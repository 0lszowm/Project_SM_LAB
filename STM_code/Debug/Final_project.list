
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036b0  080093b8  080093b8  000193b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca68  0800ca68  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca68  0800ca68  0001ca68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca70  0800ca70  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca70  0800ca70  0001ca70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca74  0800ca74  0001ca74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ca78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  20000090  0800cb08  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800cb08  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b51c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a46  00000000  00000000  0003b5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  0003f028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  00040648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b03  00000000  00000000  00041ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf82  00000000  00000000  0006a5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5193  00000000  00000000  0008753d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017c6d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006490  00000000  00000000  0017c720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800939c 	.word	0x0800939c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	0800939c 	.word	0x0800939c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b974 	b.w	8000f5c <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468e      	mov	lr, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14d      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4694      	mov	ip, r2
 8000c9e:	d969      	bls.n	8000d74 <__udivmoddi4+0xe8>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b152      	cbz	r2, 8000cbc <__udivmoddi4+0x30>
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	f1c2 0120 	rsb	r1, r2, #32
 8000cae:	fa20 f101 	lsr.w	r1, r0, r1
 8000cb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cba:	4094      	lsls	r4, r2
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	0c21      	lsrs	r1, r4, #16
 8000cc2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc6:	fa1f f78c 	uxth.w	r7, ip
 8000cca:	fb08 e316 	mls	r3, r8, r6, lr
 8000cce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cd2:	fb06 f107 	mul.w	r1, r6, r7
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ce2:	f080 811f 	bcs.w	8000f24 <__udivmoddi4+0x298>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 811c 	bls.w	8000f24 <__udivmoddi4+0x298>
 8000cec:	3e02      	subs	r6, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a5b      	subs	r3, r3, r1
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d00:	fb00 f707 	mul.w	r7, r0, r7
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x92>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d10:	f080 810a 	bcs.w	8000f28 <__udivmoddi4+0x29c>
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	f240 8107 	bls.w	8000f28 <__udivmoddi4+0x29c>
 8000d1a:	4464      	add	r4, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	1be4      	subs	r4, r4, r7
 8000d24:	2600      	movs	r6, #0
 8000d26:	b11d      	cbz	r5, 8000d30 <__udivmoddi4+0xa4>
 8000d28:	40d4      	lsrs	r4, r2
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0xc2>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	f000 80ef 	beq.w	8000f1e <__udivmoddi4+0x292>
 8000d40:	2600      	movs	r6, #0
 8000d42:	e9c5 0100 	strd	r0, r1, [r5]
 8000d46:	4630      	mov	r0, r6
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	fab3 f683 	clz	r6, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d14a      	bne.n	8000dec <__udivmoddi4+0x160>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xd4>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 80f9 	bhi.w	8000f52 <__udivmoddi4+0x2c6>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb61 0303 	sbc.w	r3, r1, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	469e      	mov	lr, r3
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e0      	beq.n	8000d30 <__udivmoddi4+0xa4>
 8000d6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d72:	e7dd      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000d74:	b902      	cbnz	r2, 8000d78 <__udivmoddi4+0xec>
 8000d76:	deff      	udf	#255	; 0xff
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	f040 8092 	bne.w	8000ea6 <__udivmoddi4+0x21a>
 8000d82:	eba1 010c 	sub.w	r1, r1, ip
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	2601      	movs	r6, #1
 8000d90:	0c20      	lsrs	r0, r4, #16
 8000d92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d96:	fb07 1113 	mls	r1, r7, r3, r1
 8000d9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9e:	fb0e f003 	mul.w	r0, lr, r3
 8000da2:	4288      	cmp	r0, r1
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x12c>
 8000da6:	eb1c 0101 	adds.w	r1, ip, r1
 8000daa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x12a>
 8000db0:	4288      	cmp	r0, r1
 8000db2:	f200 80cb 	bhi.w	8000f4c <__udivmoddi4+0x2c0>
 8000db6:	4643      	mov	r3, r8
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x156>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd8:	d202      	bcs.n	8000de0 <__udivmoddi4+0x154>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f200 80bb 	bhi.w	8000f56 <__udivmoddi4+0x2ca>
 8000de0:	4608      	mov	r0, r1
 8000de2:	eba4 040e 	sub.w	r4, r4, lr
 8000de6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dea:	e79c      	b.n	8000d26 <__udivmoddi4+0x9a>
 8000dec:	f1c6 0720 	rsb	r7, r6, #32
 8000df0:	40b3      	lsls	r3, r6
 8000df2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000e02:	431c      	orrs	r4, r3
 8000e04:	40f9      	lsrs	r1, r7
 8000e06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e12:	0c20      	lsrs	r0, r4, #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fb09 1118 	mls	r1, r9, r8, r1
 8000e1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e20:	fb08 f00e 	mul.w	r0, r8, lr
 8000e24:	4288      	cmp	r0, r1
 8000e26:	fa02 f206 	lsl.w	r2, r2, r6
 8000e2a:	d90b      	bls.n	8000e44 <__udivmoddi4+0x1b8>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e34:	f080 8088 	bcs.w	8000f48 <__udivmoddi4+0x2bc>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f240 8085 	bls.w	8000f48 <__udivmoddi4+0x2bc>
 8000e3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	458e      	cmp	lr, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x1e2>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e64:	d26c      	bcs.n	8000f40 <__udivmoddi4+0x2b4>
 8000e66:	458e      	cmp	lr, r1
 8000e68:	d96a      	bls.n	8000f40 <__udivmoddi4+0x2b4>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e72:	fba0 9402 	umull	r9, r4, r0, r2
 8000e76:	eba1 010e 	sub.w	r1, r1, lr
 8000e7a:	42a1      	cmp	r1, r4
 8000e7c:	46c8      	mov	r8, r9
 8000e7e:	46a6      	mov	lr, r4
 8000e80:	d356      	bcc.n	8000f30 <__udivmoddi4+0x2a4>
 8000e82:	d053      	beq.n	8000f2c <__udivmoddi4+0x2a0>
 8000e84:	b15d      	cbz	r5, 8000e9e <__udivmoddi4+0x212>
 8000e86:	ebb3 0208 	subs.w	r2, r3, r8
 8000e8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e92:	fa22 f306 	lsr.w	r3, r2, r6
 8000e96:	40f1      	lsrs	r1, r6
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9e:	2600      	movs	r6, #0
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	f1c2 0320 	rsb	r3, r2, #32
 8000eaa:	40d8      	lsrs	r0, r3
 8000eac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	4301      	orrs	r1, r0
 8000eb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec8:	0c0b      	lsrs	r3, r1, #16
 8000eca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ece:	fb00 f60e 	mul.w	r6, r0, lr
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x260>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee2:	d22f      	bcs.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee4:	429e      	cmp	r6, r3
 8000ee6:	d92d      	bls.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4463      	add	r3, ip
 8000eec:	1b9b      	subs	r3, r3, r6
 8000eee:	b289      	uxth	r1, r1
 8000ef0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efc:	fb06 f30e 	mul.w	r3, r6, lr
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x28a>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f0c:	d216      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d914      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000f12:	3e02      	subs	r6, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f1c:	e738      	b.n	8000d90 <__udivmoddi4+0x104>
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e705      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e3      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6f8      	b.n	8000d1e <__udivmoddi4+0x92>
 8000f2c:	454b      	cmp	r3, r9
 8000f2e:	d2a9      	bcs.n	8000e84 <__udivmoddi4+0x1f8>
 8000f30:	ebb9 0802 	subs.w	r8, r9, r2
 8000f34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7a3      	b.n	8000e84 <__udivmoddi4+0x1f8>
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	e7ea      	b.n	8000f16 <__udivmoddi4+0x28a>
 8000f40:	4620      	mov	r0, r4
 8000f42:	e794      	b.n	8000e6e <__udivmoddi4+0x1e2>
 8000f44:	4640      	mov	r0, r8
 8000f46:	e7d1      	b.n	8000eec <__udivmoddi4+0x260>
 8000f48:	46d0      	mov	r8, sl
 8000f4a:	e77b      	b.n	8000e44 <__udivmoddi4+0x1b8>
 8000f4c:	3b02      	subs	r3, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	e732      	b.n	8000db8 <__udivmoddi4+0x12c>
 8000f52:	4630      	mov	r0, r6
 8000f54:	e709      	b.n	8000d6a <__udivmoddi4+0xde>
 8000f56:	4464      	add	r4, ip
 8000f58:	3802      	subs	r0, #2
 8000f5a:	e742      	b.n	8000de2 <__udivmoddi4+0x156>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af04      	add	r7, sp, #16
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2178      	movs	r1, #120	; 0x78
 8000f8e:	4803      	ldr	r0, [pc, #12]	; (8000f9c <ssd1306_WriteCommand+0x2c>)
 8000f90:	f002 fbc6 	bl	8003720 <HAL_I2C_Mem_Write>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200004b4 	.word	0x200004b4

08000fa0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb2:	9202      	str	r2, [sp, #8]
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	2240      	movs	r2, #64	; 0x40
 8000fbe:	2178      	movs	r1, #120	; 0x78
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <ssd1306_WriteData+0x30>)
 8000fc2:	f002 fbad 	bl	8003720 <HAL_I2C_Mem_Write>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200004b4 	.word	0x200004b4

08000fd4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000fd8:	f7ff ffc2 	bl	8000f60 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000fdc:	2064      	movs	r0, #100	; 0x64
 8000fde:	f001 ff81 	bl	8002ee4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 ff4c 	bl	8001e80 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000fe8:	2020      	movs	r0, #32
 8000fea:	f7ff ffc1 	bl	8000f70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff ffbe 	bl	8000f70 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ff4:	20b0      	movs	r0, #176	; 0xb0
 8000ff6:	f7ff ffbb 	bl	8000f70 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ffa:	20c8      	movs	r0, #200	; 0xc8
 8000ffc:	f7ff ffb8 	bl	8000f70 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff ffb5 	bl	8000f70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001006:	2010      	movs	r0, #16
 8001008:	f7ff ffb2 	bl	8000f70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800100c:	2040      	movs	r0, #64	; 0x40
 800100e:	f7ff ffaf 	bl	8000f70 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001012:	20ff      	movs	r0, #255	; 0xff
 8001014:	f000 ff20 	bl	8001e58 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001018:	20a1      	movs	r0, #161	; 0xa1
 800101a:	f7ff ffa9 	bl	8000f70 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800101e:	20a6      	movs	r0, #166	; 0xa6
 8001020:	f7ff ffa6 	bl	8000f70 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001024:	20a8      	movs	r0, #168	; 0xa8
 8001026:	f7ff ffa3 	bl	8000f70 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800102a:	203f      	movs	r0, #63	; 0x3f
 800102c:	f7ff ffa0 	bl	8000f70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001030:	20a4      	movs	r0, #164	; 0xa4
 8001032:	f7ff ff9d 	bl	8000f70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001036:	20d3      	movs	r0, #211	; 0xd3
 8001038:	f7ff ff9a 	bl	8000f70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff ff97 	bl	8000f70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001042:	20d5      	movs	r0, #213	; 0xd5
 8001044:	f7ff ff94 	bl	8000f70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001048:	20f0      	movs	r0, #240	; 0xf0
 800104a:	f7ff ff91 	bl	8000f70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800104e:	20d9      	movs	r0, #217	; 0xd9
 8001050:	f7ff ff8e 	bl	8000f70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001054:	2022      	movs	r0, #34	; 0x22
 8001056:	f7ff ff8b 	bl	8000f70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800105a:	20da      	movs	r0, #218	; 0xda
 800105c:	f7ff ff88 	bl	8000f70 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001060:	2012      	movs	r0, #18
 8001062:	f7ff ff85 	bl	8000f70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001066:	20db      	movs	r0, #219	; 0xdb
 8001068:	f7ff ff82 	bl	8000f70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800106c:	2020      	movs	r0, #32
 800106e:	f7ff ff7f 	bl	8000f70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001072:	208d      	movs	r0, #141	; 0x8d
 8001074:	f7ff ff7c 	bl	8000f70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001078:	2014      	movs	r0, #20
 800107a:	f7ff ff79 	bl	8000f70 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800107e:	2001      	movs	r0, #1
 8001080:	f000 fefe 	bl	8001e80 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001084:	2000      	movs	r0, #0
 8001086:	f000 f80f 	bl	80010a8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800108a:	f000 f831 	bl	80010f0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <ssd1306_Init+0xd0>)
 8001090:	2200      	movs	r2, #0
 8001092:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <ssd1306_Init+0xd0>)
 8001096:	2200      	movs	r2, #0
 8001098:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800109a:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <ssd1306_Init+0xd0>)
 800109c:	2201      	movs	r2, #1
 800109e:	711a      	strb	r2, [r3, #4]
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200004ac 	.word	0x200004ac

080010a8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	e00d      	b.n	80010d4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <ssd1306_Fill+0x1a>
 80010be:	2100      	movs	r1, #0
 80010c0:	e000      	b.n	80010c4 <ssd1306_Fill+0x1c>
 80010c2:	21ff      	movs	r1, #255	; 0xff
 80010c4:	4a09      	ldr	r2, [pc, #36]	; (80010ec <ssd1306_Fill+0x44>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	460a      	mov	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3301      	adds	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010da:	d3ed      	bcc.n	80010b8 <ssd1306_Fill+0x10>
    }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200000ac 	.word	0x200000ac

080010f0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010f6:	2300      	movs	r3, #0
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	e016      	b.n	800112a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	3b50      	subs	r3, #80	; 0x50
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff34 	bl	8000f70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff ff31 	bl	8000f70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800110e:	2010      	movs	r0, #16
 8001110:	f7ff ff2e 	bl	8000f70 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	01db      	lsls	r3, r3, #7
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <ssd1306_UpdateScreen+0x4c>)
 800111a:	4413      	add	r3, r2
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff3e 	bl	8000fa0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	3301      	adds	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b07      	cmp	r3, #7
 800112e:	d9e5      	bls.n	80010fc <ssd1306_UpdateScreen+0xc>
    }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200000ac 	.word	0x200000ac

08001140 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	460b      	mov	r3, r1
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	4613      	mov	r3, r2
 8001150:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db3d      	blt.n	80011d6 <ssd1306_DrawPixel+0x96>
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	2b3f      	cmp	r3, #63	; 0x3f
 800115e:	d83a      	bhi.n	80011d6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d11a      	bne.n	800119c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	b2d8      	uxtb	r0, r3
 800116e:	4603      	mov	r3, r0
 8001170:	01db      	lsls	r3, r3, #7
 8001172:	4413      	add	r3, r2
 8001174:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <ssd1306_DrawPixel+0xa4>)
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	b25a      	sxtb	r2, r3
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	2101      	movs	r1, #1
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	b25b      	sxtb	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b259      	sxtb	r1, r3
 800118c:	79fa      	ldrb	r2, [r7, #7]
 800118e:	4603      	mov	r3, r0
 8001190:	01db      	lsls	r3, r3, #7
 8001192:	4413      	add	r3, r2
 8001194:	b2c9      	uxtb	r1, r1
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <ssd1306_DrawPixel+0xa4>)
 8001198:	54d1      	strb	r1, [r2, r3]
 800119a:	e01d      	b.n	80011d8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800119c:	79fa      	ldrb	r2, [r7, #7]
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	b2d8      	uxtb	r0, r3
 80011a4:	4603      	mov	r3, r0
 80011a6:	01db      	lsls	r3, r3, #7
 80011a8:	4413      	add	r3, r2
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <ssd1306_DrawPixel+0xa4>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	b25a      	sxtb	r2, r3
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	2101      	movs	r1, #1
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	4013      	ands	r3, r2
 80011c4:	b259      	sxtb	r1, r3
 80011c6:	79fa      	ldrb	r2, [r7, #7]
 80011c8:	4603      	mov	r3, r0
 80011ca:	01db      	lsls	r3, r3, #7
 80011cc:	4413      	add	r3, r2
 80011ce:	b2c9      	uxtb	r1, r1
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <ssd1306_DrawPixel+0xa4>)
 80011d2:	54d1      	strb	r1, [r2, r3]
 80011d4:	e000      	b.n	80011d8 <ssd1306_DrawPixel+0x98>
        return;
 80011d6:	bf00      	nop
    }
}
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	200000ac 	.word	0x200000ac

080011e8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4604      	mov	r4, r0
 80011f0:	1d38      	adds	r0, r7, #4
 80011f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80011f6:	461a      	mov	r2, r3
 80011f8:	4623      	mov	r3, r4
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	4613      	mov	r3, r2
 80011fe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b1f      	cmp	r3, #31
 8001204:	d902      	bls.n	800120c <ssd1306_WriteChar+0x24>
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	2b7e      	cmp	r3, #126	; 0x7e
 800120a:	d901      	bls.n	8001210 <ssd1306_WriteChar+0x28>
        return 0;
 800120c:	2300      	movs	r3, #0
 800120e:	e06d      	b.n	80012ec <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001210:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <ssd1306_WriteChar+0x10c>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	793b      	ldrb	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	2b80      	cmp	r3, #128	; 0x80
 800121c:	dc06      	bgt.n	800122c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800121e:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <ssd1306_WriteChar+0x10c>)
 8001220:	885b      	ldrh	r3, [r3, #2]
 8001222:	461a      	mov	r2, r3
 8001224:	797b      	ldrb	r3, [r7, #5]
 8001226:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001228:	2b40      	cmp	r3, #64	; 0x40
 800122a:	dd01      	ble.n	8001230 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800122c:	2300      	movs	r3, #0
 800122e:	e05d      	b.n	80012ec <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	e04c      	b.n	80012d0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	3b20      	subs	r3, #32
 800123c:	7979      	ldrb	r1, [r7, #5]
 800123e:	fb01 f303 	mul.w	r3, r1, r3
 8001242:	4619      	mov	r1, r3
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	440b      	add	r3, r1
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	e034      	b.n	80012c0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d012      	beq.n	800128c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <ssd1306_WriteChar+0x10c>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4413      	add	r3, r2
 8001272:	b2d8      	uxtb	r0, r3
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <ssd1306_WriteChar+0x10c>)
 8001276:	885b      	ldrh	r3, [r3, #2]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	7bba      	ldrb	r2, [r7, #14]
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff ff5b 	bl	8001140 <ssd1306_DrawPixel>
 800128a:	e016      	b.n	80012ba <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <ssd1306_WriteChar+0x10c>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4413      	add	r3, r2
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <ssd1306_WriteChar+0x10c>)
 800129c:	885b      	ldrh	r3, [r3, #2]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4413      	add	r3, r2
 80012a6:	b2d9      	uxtb	r1, r3
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf0c      	ite	eq
 80012ae:	2301      	moveq	r3, #1
 80012b0:	2300      	movne	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	f7ff ff43 	bl	8001140 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	3301      	adds	r3, #1
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	793b      	ldrb	r3, [r7, #4]
 80012c2:	461a      	mov	r2, r3
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d3c5      	bcc.n	8001256 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	797b      	ldrb	r3, [r7, #5]
 80012d2:	461a      	mov	r2, r3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d3ad      	bcc.n	8001236 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <ssd1306_WriteChar+0x10c>)
 80012dc:	881a      	ldrh	r2, [r3, #0]
 80012de:	793b      	ldrb	r3, [r7, #4]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <ssd1306_WriteChar+0x10c>)
 80012e8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3724      	adds	r7, #36	; 0x24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	200004ac 	.word	0x200004ac

080012f8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	1d38      	adds	r0, r7, #4
 8001302:	e880 0006 	stmia.w	r0, {r1, r2}
 8001306:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001308:	e012      	b.n	8001330 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	7818      	ldrb	r0, [r3, #0]
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	1d3a      	adds	r2, r7, #4
 8001312:	ca06      	ldmia	r2, {r1, r2}
 8001314:	f7ff ff68 	bl	80011e8 <ssd1306_WriteChar>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d002      	beq.n	800132a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	e008      	b.n	800133c <ssd1306_WriteString+0x44>
        }
        str++;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1e8      	bne.n	800130a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	781b      	ldrb	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	460a      	mov	r2, r1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	4613      	mov	r3, r2
 8001352:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <ssd1306_SetCursor+0x2c>)
 800135a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <ssd1306_SetCursor+0x2c>)
 8001362:	805a      	strh	r2, [r3, #2]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	200004ac 	.word	0x200004ac

08001374 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	4604      	mov	r4, r0
 800137c:	4608      	mov	r0, r1
 800137e:	4611      	mov	r1, r2
 8001380:	461a      	mov	r2, r3
 8001382:	4623      	mov	r3, r4
 8001384:	71fb      	strb	r3, [r7, #7]
 8001386:	4603      	mov	r3, r0
 8001388:	71bb      	strb	r3, [r7, #6]
 800138a:	460b      	mov	r3, r1
 800138c:	717b      	strb	r3, [r7, #5]
 800138e:	4613      	mov	r3, r2
 8001390:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001392:	797a      	ldrb	r2, [r7, #5]
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	bfb8      	it	lt
 800139c:	425b      	neglt	r3, r3
 800139e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80013a0:	793a      	ldrb	r2, [r7, #4]
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	bfb8      	it	lt
 80013aa:	425b      	neglt	r3, r3
 80013ac:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80013ae:	79fa      	ldrb	r2, [r7, #7]
 80013b0:	797b      	ldrb	r3, [r7, #5]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d201      	bcs.n	80013ba <ssd1306_Line+0x46>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e001      	b.n	80013be <ssd1306_Line+0x4a>
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80013c0:	79ba      	ldrb	r2, [r7, #6]
 80013c2:	793b      	ldrb	r3, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d201      	bcs.n	80013cc <ssd1306_Line+0x58>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e001      	b.n	80013d0 <ssd1306_Line+0x5c>
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80013da:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80013de:	7939      	ldrb	r1, [r7, #4]
 80013e0:	797b      	ldrb	r3, [r7, #5]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff feac 	bl	8001140 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80013e8:	e024      	b.n	8001434 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80013ea:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80013ee:	79b9      	ldrb	r1, [r7, #6]
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fea4 	bl	8001140 <ssd1306_DrawPixel>
        error2 = error * 2;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	425b      	negs	r3, r3
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	429a      	cmp	r2, r3
 8001406:	dd08      	ble.n	800141a <ssd1306_Line+0xa6>
            error -= deltaY;
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4413      	add	r3, r2
 8001418:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	429a      	cmp	r2, r3
 8001420:	da08      	bge.n	8001434 <ssd1306_Line+0xc0>
            error += deltaX;
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	4413      	add	r3, r2
 8001428:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	4413      	add	r3, r2
 8001432:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001434:	79fa      	ldrb	r2, [r7, #7]
 8001436:	797b      	ldrb	r3, [r7, #5]
 8001438:	429a      	cmp	r2, r3
 800143a:	d1d6      	bne.n	80013ea <ssd1306_Line+0x76>
 800143c:	79ba      	ldrb	r2, [r7, #6]
 800143e:	793b      	ldrb	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	d1d2      	bne.n	80013ea <ssd1306_Line+0x76>
        }
    }
    return;
 8001444:	bf00      	nop
}
 8001446:	3724      	adds	r7, #36	; 0x24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd90      	pop	{r4, r7, pc}

0800144c <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b087      	sub	sp, #28
 8001450:	af02      	add	r7, sp, #8
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d02a      	beq.n	80014b8 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 8001462:	2301      	movs	r3, #1
 8001464:	81fb      	strh	r3, [r7, #14]
 8001466:	e022      	b.n	80014ae <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8001468:	89fa      	ldrh	r2, [r7, #14]
 800146a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	7818      	ldrb	r0, [r3, #0]
 8001478:	89fa      	ldrh	r2, [r7, #14]
 800147a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800147e:	4413      	add	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	7859      	ldrb	r1, [r3, #1]
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	781c      	ldrb	r4, [r3, #0]
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	785a      	ldrb	r2, [r3, #1]
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4613      	mov	r3, r2
 80014a2:	4622      	mov	r2, r4
 80014a4:	f7ff ff66 	bl	8001374 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 80014a8:	89fb      	ldrh	r3, [r7, #14]
 80014aa:	3301      	adds	r3, #1
 80014ac:	81fb      	strh	r3, [r7, #14]
 80014ae:	89fa      	ldrh	r2, [r7, #14]
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3d8      	bcc.n	8001468 <ssd1306_Polyline+0x1c>
    }

    return;
 80014b6:	e000      	b.n	80014ba <ssd1306_Polyline+0x6e>
        return;
 80014b8:	bf00      	nop
}
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}

080014c0 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff f85c 	bl	8000588 <__aeabi_f2d>
 80014d0:	a30e      	add	r3, pc, #56	; (adr r3, 800150c <ssd1306_DegToRad+0x4c>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f8af 	bl	8000638 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <ssd1306_DegToRad+0x48>)
 80014e8:	f7ff f9d0 	bl	800088c <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f7ff fb62 	bl	8000bbc <__aeabi_d2f>
 80014f8:	4603      	mov	r3, r0
 80014fa:	ee07 3a90 	vmov	s15, r3
}
 80014fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40668000 	.word	0x40668000
 800150c:	51eb851f 	.word	0x51eb851f
 8001510:	40091eb8 	.word	0x40091eb8

08001514 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001524:	d802      	bhi.n	800152c <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	81fb      	strh	r3, [r7, #14]
 800152a:	e013      	b.n	8001554 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <ssd1306_NormalizeTo0_360+0x50>)
 8001532:	fba1 1202 	umull	r1, r2, r1, r2
 8001536:	0892      	lsrs	r2, r2, #2
 8001538:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800153c:	fb01 f202 	mul.w	r2, r1, r2
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	81fb      	strh	r3, [r7, #14]
        loc_angle = ((par_deg != 0)?par_deg:360);
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <ssd1306_NormalizeTo0_360+0x3a>
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	e001      	b.n	8001552 <ssd1306_NormalizeTo0_360+0x3e>
 800154e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001552:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 8001554:	89fb      	ldrh	r3, [r7, #14]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	16c16c17 	.word	0x16c16c17

08001568 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af02      	add	r7, sp, #8
 800156e:	4604      	mov	r4, r0
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	4603      	mov	r3, r0
 800157c:	71bb      	strb	r3, [r7, #6]
 800157e:	460b      	mov	r3, r1
 8001580:	717b      	strb	r3, [r7, #5]
 8001582:	4613      	mov	r3, r2
 8001584:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 800158e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ffbf 	bl	8001514 <ssd1306_NormalizeTo0_360>
 8001596:	4603      	mov	r3, r0
 8001598:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ffb9 	bl	8001514 <ssd1306_NormalizeTo0_360>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b77      	ldr	r3, [pc, #476]	; (8001784 <ssd1306_DrawArc+0x21c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	4a76      	ldr	r2, [pc, #472]	; (8001788 <ssd1306_DrawArc+0x220>)
 80015b0:	fb82 1203 	smull	r1, r2, r2, r3
 80015b4:	441a      	add	r2, r3
 80015b6:	1212      	asrs	r2, r2, #8
 80015b8:	17db      	asrs	r3, r3, #31
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80015be:	4b71      	ldr	r3, [pc, #452]	; (8001784 <ssd1306_DrawArc+0x21c>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fb02 f303 	mul.w	r3, r2, r3
 80015ca:	08db      	lsrs	r3, r3, #3
 80015cc:	4a6f      	ldr	r2, [pc, #444]	; (800178c <ssd1306_DrawArc+0x224>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	ee07 3a90 	vmov	s15, r3
 80015dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ee:	edc7 7a03 	vstr	s15, [r7, #12]
    while(count < approx_segments)
 80015f2:	e0be      	b.n	8001772 <ssd1306_DrawArc+0x20a>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	f7ff ff59 	bl	80014c0 <ssd1306_DegToRad>
 800160e:	ed87 0a06 	vstr	s0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 8001612:	69b8      	ldr	r0, [r7, #24]
 8001614:	f7fe ffb8 	bl	8000588 <__aeabi_f2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	ec43 2b10 	vmov	d0, r2, r3
 8001620:	f006 fe72 	bl	8008308 <sin>
 8001624:	ec55 4b10 	vmov	r4, r5, d0
 8001628:	797b      	ldrb	r3, [r7, #5]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff9a 	bl	8000564 <__aeabi_i2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4620      	mov	r0, r4
 8001636:	4629      	mov	r1, r5
 8001638:	f7fe fffe 	bl	8000638 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fa92 	bl	8000b6c <__aeabi_d2iz>
 8001648:	4603      	mov	r3, r0
 800164a:	b25b      	sxtb	r3, r3
 800164c:	b2da      	uxtb	r2, r3
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4413      	add	r3, r2
 8001652:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 8001654:	69b8      	ldr	r0, [r7, #24]
 8001656:	f7fe ff97 	bl	8000588 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ec43 2b10 	vmov	d0, r2, r3
 8001662:	f006 fdfd 	bl	8008260 <cos>
 8001666:	ec55 4b10 	vmov	r4, r5, d0
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff79 	bl	8000564 <__aeabi_i2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7fe ffdd 	bl	8000638 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fa71 	bl	8000b6c <__aeabi_d2iz>
 800168a:	4603      	mov	r3, r0
 800168c:	b25b      	sxtb	r3, r3
 800168e:	b2da      	uxtb	r2, r3
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	4413      	add	r3, r2
 8001694:	72bb      	strb	r3, [r7, #10]
        count++;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3301      	adds	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments) {
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d00f      	beq.n	80016c4 <ssd1306_DrawArc+0x15c>
            rad = ssd1306_DegToRad(count*approx_degree);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	ee07 3a90 	vmov	s15, r3
 80016aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	f7ff ff01 	bl	80014c0 <ssd1306_DegToRad>
 80016be:	ed87 0a06 	vstr	s0, [r7, #24]
 80016c2:	e00a      	b.n	80016da <ssd1306_DrawArc+0x172>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ce:	eeb0 0a67 	vmov.f32	s0, s15
 80016d2:	f7ff fef5 	bl	80014c0 <ssd1306_DegToRad>
 80016d6:	ed87 0a06 	vstr	s0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 80016da:	69b8      	ldr	r0, [r7, #24]
 80016dc:	f7fe ff54 	bl	8000588 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	ec43 2b10 	vmov	d0, r2, r3
 80016e8:	f006 fe0e 	bl	8008308 <sin>
 80016ec:	ec55 4b10 	vmov	r4, r5, d0
 80016f0:	797b      	ldrb	r3, [r7, #5]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff36 	bl	8000564 <__aeabi_i2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe ff9a 	bl	8000638 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff fa2e 	bl	8000b6c <__aeabi_d2iz>
 8001710:	4603      	mov	r3, r0
 8001712:	b25b      	sxtb	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	4413      	add	r3, r2
 800171a:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);    
 800171c:	69b8      	ldr	r0, [r7, #24]
 800171e:	f7fe ff33 	bl	8000588 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ec43 2b10 	vmov	d0, r2, r3
 800172a:	f006 fd99 	bl	8008260 <cos>
 800172e:	ec55 4b10 	vmov	r4, r5, d0
 8001732:	797b      	ldrb	r3, [r7, #5]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff15 	bl	8000564 <__aeabi_i2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7fe ff79 	bl	8000638 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fa0d 	bl	8000b6c <__aeabi_d2iz>
 8001752:	4603      	mov	r3, r0
 8001754:	b25b      	sxtb	r3, r3
 8001756:	b2da      	uxtb	r2, r3
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	4413      	add	r3, r2
 800175c:	723b      	strb	r3, [r7, #8]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 800175e:	7a3c      	ldrb	r4, [r7, #8]
 8001760:	7a7a      	ldrb	r2, [r7, #9]
 8001762:	7ab9      	ldrb	r1, [r7, #10]
 8001764:	7af8      	ldrb	r0, [r7, #11]
 8001766:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	4623      	mov	r3, r4
 800176e:	f7ff fe01 	bl	8001374 <ssd1306_Line>
    while(count < approx_segments)
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	429a      	cmp	r2, r3
 8001778:	f4ff af3c 	bcc.w	80015f4 <ssd1306_DrawArc+0x8c>
    }
    
    return;
 800177c:	bf00      	nop
}
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bdb0      	pop	{r4, r5, r7, pc}
 8001784:	0800943a 	.word	0x0800943a
 8001788:	b60b60b7 	.word	0xb60b60b7
 800178c:	16c16c17 	.word	0x16c16c17

08001790 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af02      	add	r7, sp, #8
 8001796:	4604      	mov	r4, r0
 8001798:	4608      	mov	r0, r1
 800179a:	4611      	mov	r1, r2
 800179c:	461a      	mov	r2, r3
 800179e:	4623      	mov	r3, r4
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	4603      	mov	r3, r0
 80017a4:	71bb      	strb	r3, [r7, #6]
 80017a6:	460b      	mov	r3, r1
 80017a8:	717b      	strb	r3, [r7, #5]
 80017aa:	4613      	mov	r3, r2
 80017ac:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1 = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	76fb      	strb	r3, [r7, #27]
    uint8_t xp2 = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t yp1 = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	76bb      	strb	r3, [r7, #26]
    uint8_t yp2 = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
    uint32_t loc_sweep = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80017ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fea1 	bl	8001514 <ssd1306_NormalizeTo0_360>
 80017d2:	4603      	mov	r3, r0
 80017d4:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fe9b 	bl	8001514 <ssd1306_NormalizeTo0_360>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4bad      	ldr	r3, [pc, #692]	; (8001a98 <ssd1306_DrawArcWithRadiusLine+0x308>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	4aac      	ldr	r2, [pc, #688]	; (8001a9c <ssd1306_DrawArcWithRadiusLine+0x30c>)
 80017ec:	fb82 1203 	smull	r1, r2, r2, r3
 80017f0:	441a      	add	r2, r3
 80017f2:	1212      	asrs	r2, r2, #8
 80017f4:	17db      	asrs	r3, r3, #31
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	623b      	str	r3, [r7, #32]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80017fa:	4ba7      	ldr	r3, [pc, #668]	; (8001a98 <ssd1306_DrawArcWithRadiusLine+0x308>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	08db      	lsrs	r3, r3, #3
 8001808:	4aa5      	ldr	r2, [pc, #660]	; (8001aa0 <ssd1306_DrawArcWithRadiusLine+0x310>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182a:	edc7 7a03 	vstr	s15, [r7, #12]

    rad = ssd1306_DegToRad(count*approx_degree);
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	ee07 3a90 	vmov	s15, r3
 8001834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001838:	edd7 7a03 	vldr	s15, [r7, #12]
 800183c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001840:	eeb0 0a67 	vmov.f32	s0, s15
 8001844:	f7ff fe3c 	bl	80014c0 <ssd1306_DegToRad>
 8001848:	ed87 0a07 	vstr	s0, [r7, #28]
    uint8_t first_point_x = x + (int8_t)(sin(rad)*radius);
 800184c:	69f8      	ldr	r0, [r7, #28]
 800184e:	f7fe fe9b 	bl	8000588 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	ec43 2b10 	vmov	d0, r2, r3
 800185a:	f006 fd55 	bl	8008308 <sin>
 800185e:	ec55 4b10 	vmov	r4, r5, d0
 8001862:	797b      	ldrb	r3, [r7, #5]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe7d 	bl	8000564 <__aeabi_i2d>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4620      	mov	r0, r4
 8001870:	4629      	mov	r1, r5
 8001872:	f7fe fee1 	bl	8000638 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f975 	bl	8000b6c <__aeabi_d2iz>
 8001882:	4603      	mov	r3, r0
 8001884:	b25b      	sxtb	r3, r3
 8001886:	b2da      	uxtb	r2, r3
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4413      	add	r3, r2
 800188c:	72fb      	strb	r3, [r7, #11]
    uint8_t first_point_y = y + (int8_t)(cos(rad)*radius);   
 800188e:	69f8      	ldr	r0, [r7, #28]
 8001890:	f7fe fe7a 	bl	8000588 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	ec43 2b10 	vmov	d0, r2, r3
 800189c:	f006 fce0 	bl	8008260 <cos>
 80018a0:	ec55 4b10 	vmov	r4, r5, d0
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe5c 	bl	8000564 <__aeabi_i2d>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4620      	mov	r0, r4
 80018b2:	4629      	mov	r1, r5
 80018b4:	f7fe fec0 	bl	8000638 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f954 	bl	8000b6c <__aeabi_d2iz>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	4413      	add	r3, r2
 80018ce:	72bb      	strb	r3, [r7, #10]
    while (count < approx_segments) {
 80018d0:	e0c2      	b.n	8001a58 <ssd1306_DrawArcWithRadiusLine+0x2c8>
        rad = ssd1306_DegToRad(count*approx_degree);
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	f7ff fdea 	bl	80014c0 <ssd1306_DegToRad>
 80018ec:	ed87 0a07 	vstr	s0, [r7, #28]
        xp1 = x + (int8_t)(sin(rad)*radius);
 80018f0:	69f8      	ldr	r0, [r7, #28]
 80018f2:	f7fe fe49 	bl	8000588 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	ec43 2b10 	vmov	d0, r2, r3
 80018fe:	f006 fd03 	bl	8008308 <sin>
 8001902:	ec55 4b10 	vmov	r4, r5, d0
 8001906:	797b      	ldrb	r3, [r7, #5]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe2b 	bl	8000564 <__aeabi_i2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4620      	mov	r0, r4
 8001914:	4629      	mov	r1, r5
 8001916:	f7fe fe8f 	bl	8000638 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f923 	bl	8000b6c <__aeabi_d2iz>
 8001926:	4603      	mov	r3, r0
 8001928:	b25b      	sxtb	r3, r3
 800192a:	b2da      	uxtb	r2, r3
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	4413      	add	r3, r2
 8001930:	76fb      	strb	r3, [r7, #27]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 8001932:	69f8      	ldr	r0, [r7, #28]
 8001934:	f7fe fe28 	bl	8000588 <__aeabi_f2d>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	ec43 2b10 	vmov	d0, r2, r3
 8001940:	f006 fc8e 	bl	8008260 <cos>
 8001944:	ec55 4b10 	vmov	r4, r5, d0
 8001948:	797b      	ldrb	r3, [r7, #5]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fe0a 	bl	8000564 <__aeabi_i2d>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fe6e 	bl	8000638 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff f902 	bl	8000b6c <__aeabi_d2iz>
 8001968:	4603      	mov	r3, r0
 800196a:	b25b      	sxtb	r3, r3
 800196c:	b2da      	uxtb	r2, r3
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	4413      	add	r3, r2
 8001972:	76bb      	strb	r3, [r7, #26]
        count++;
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	3301      	adds	r3, #1
 8001978:	623b      	str	r3, [r7, #32]
        if (count != approx_segments) {
 800197a:	6a3a      	ldr	r2, [r7, #32]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	429a      	cmp	r2, r3
 8001980:	d00f      	beq.n	80019a2 <ssd1306_DrawArcWithRadiusLine+0x212>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800198c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001994:	eeb0 0a67 	vmov.f32	s0, s15
 8001998:	f7ff fd92 	bl	80014c0 <ssd1306_DegToRad>
 800199c:	ed87 0a07 	vstr	s0, [r7, #28]
 80019a0:	e00a      	b.n	80019b8 <ssd1306_DrawArcWithRadiusLine+0x228>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ac:	eeb0 0a67 	vmov.f32	s0, s15
 80019b0:	f7ff fd86 	bl	80014c0 <ssd1306_DegToRad>
 80019b4:	ed87 0a07 	vstr	s0, [r7, #28]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 80019b8:	69f8      	ldr	r0, [r7, #28]
 80019ba:	f7fe fde5 	bl	8000588 <__aeabi_f2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	ec43 2b10 	vmov	d0, r2, r3
 80019c6:	f006 fc9f 	bl	8008308 <sin>
 80019ca:	ec55 4b10 	vmov	r4, r5, d0
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fdc7 	bl	8000564 <__aeabi_i2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f7fe fe2b 	bl	8000638 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f8bf 	bl	8000b6c <__aeabi_d2iz>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	4413      	add	r3, r2
 80019f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        yp2 = y + (int8_t)(cos(rad)*radius);    
 80019fc:	69f8      	ldr	r0, [r7, #28]
 80019fe:	f7fe fdc3 	bl	8000588 <__aeabi_f2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	ec43 2b10 	vmov	d0, r2, r3
 8001a0a:	f006 fc29 	bl	8008260 <cos>
 8001a0e:	ec55 4b10 	vmov	r4, r5, d0
 8001a12:	797b      	ldrb	r3, [r7, #5]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fda5 	bl	8000564 <__aeabi_i2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4620      	mov	r0, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	f7fe fe09 	bl	8000638 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f89d 	bl	8000b6c <__aeabi_d2iz>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b25b      	sxtb	r3, r3
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	79bb      	ldrb	r3, [r7, #6]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001a40:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8001a44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001a48:	7eb9      	ldrb	r1, [r7, #26]
 8001a4a:	7ef8      	ldrb	r0, [r7, #27]
 8001a4c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	4623      	mov	r3, r4
 8001a54:	f7ff fc8e 	bl	8001374 <ssd1306_Line>
    while (count < approx_segments) {
 8001a58:	6a3a      	ldr	r2, [r7, #32]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f4ff af38 	bcc.w	80018d2 <ssd1306_DrawArcWithRadiusLine+0x142>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8001a62:	7abc      	ldrb	r4, [r7, #10]
 8001a64:	7afa      	ldrb	r2, [r7, #11]
 8001a66:	79b9      	ldrb	r1, [r7, #6]
 8001a68:	79f8      	ldrb	r0, [r7, #7]
 8001a6a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4623      	mov	r3, r4
 8001a72:	f7ff fc7f 	bl	8001374 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8001a76:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8001a7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001a7e:	79b9      	ldrb	r1, [r7, #6]
 8001a80:	79f8      	ldrb	r0, [r7, #7]
 8001a82:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4623      	mov	r3, r4
 8001a8a:	f7ff fc73 	bl	8001374 <ssd1306_Line>
    return;
 8001a8e:	bf00      	nop
}
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bdb0      	pop	{r4, r5, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0800943b 	.word	0x0800943b
 8001a9c:	b60b60b7 	.word	0xb60b60b7
 8001aa0:	16c16c17 	.word	0x16c16c17

08001aa4 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4604      	mov	r4, r0
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4623      	mov	r3, r4
 8001ab4:	71fb      	strb	r3, [r7, #7]
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71bb      	strb	r3, [r7, #6]
 8001aba:	460b      	mov	r3, r1
 8001abc:	717b      	strb	r3, [r7, #5]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001ac2:	797b      	ldrb	r3, [r7, #5]
 8001ac4:	425b      	negs	r3, r3
 8001ac6:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8001acc:	797b      	ldrb	r3, [r7, #5]
 8001ace:	f1c3 0301 	rsb	r3, r3, #1
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db65      	blt.n	8001baa <ssd1306_DrawCircle+0x106>
 8001ade:	79bb      	ldrb	r3, [r7, #6]
 8001ae0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ae2:	d862      	bhi.n	8001baa <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	79fa      	ldrb	r2, [r7, #7]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	b2d8      	uxtb	r0, r3
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	79bb      	ldrb	r3, [r7, #6]
 8001af4:	4413      	add	r3, r2
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	793a      	ldrb	r2, [r7, #4]
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff fb20 	bl	8001140 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	4413      	add	r3, r2
 8001b08:	b2d8      	uxtb	r0, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	4413      	add	r3, r2
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	793a      	ldrb	r2, [r7, #4]
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7ff fb12 	bl	8001140 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	4413      	add	r3, r2
 8001b24:	b2d8      	uxtb	r0, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	79ba      	ldrb	r2, [r7, #6]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	793a      	ldrb	r2, [r7, #4]
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff fb04 	bl	8001140 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	79fa      	ldrb	r2, [r7, #7]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	b2d8      	uxtb	r0, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	79ba      	ldrb	r2, [r7, #6]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	793a      	ldrb	r2, [r7, #4]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff faf6 	bl	8001140 <ssd1306_DrawPixel>
        e2 = err;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dc13      	bgt.n	8001b88 <ssd1306_DrawCircle+0xe4>
            y++;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	3301      	adds	r3, #1
 8001b64:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	425b      	negs	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d105      	bne.n	8001b88 <ssd1306_DrawCircle+0xe4>
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dc01      	bgt.n	8001b88 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dd08      	ble.n	8001ba2 <ssd1306_DrawCircle+0xfe>
            x++;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	dd9d      	ble.n	8001ae4 <ssd1306_DrawCircle+0x40>

    return;
 8001ba8:	e000      	b.n	8001bac <ssd1306_DrawCircle+0x108>
        return;
 8001baa:	bf00      	nop
}
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}

08001bb2 <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001bb2:	b590      	push	{r4, r7, lr}
 8001bb4:	b089      	sub	sp, #36	; 0x24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4604      	mov	r4, r0
 8001bba:	4608      	mov	r0, r1
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4623      	mov	r3, r4
 8001bc2:	71fb      	strb	r3, [r7, #7]
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71bb      	strb	r3, [r7, #6]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	717b      	strb	r3, [r7, #5]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001bd0:	797b      	ldrb	r3, [r7, #5]
 8001bd2:	425b      	negs	r3, r3
 8001bd4:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8001bda:	797b      	ldrb	r3, [r7, #5]
 8001bdc:	f1c3 0301 	rsb	r3, r3, #1
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db51      	blt.n	8001c90 <ssd1306_FillCircle+0xde>
 8001bec:	79bb      	ldrb	r3, [r7, #6]
 8001bee:	2b3f      	cmp	r3, #63	; 0x3f
 8001bf0:	d84e      	bhi.n	8001c90 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	e017      	b.n	8001c2e <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	79fa      	ldrb	r2, [r7, #7]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	73bb      	strb	r3, [r7, #14]
 8001c08:	e008      	b.n	8001c1c <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8001c0a:	793a      	ldrb	r2, [r7, #4]
 8001c0c:	7bf9      	ldrb	r1, [r7, #15]
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fa95 	bl	8001140 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001c16:	7bbb      	ldrb	r3, [r7, #14]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	73bb      	strb	r3, [r7, #14]
 8001c1c:	7bba      	ldrb	r2, [r7, #14]
 8001c1e:	79f9      	ldrb	r1, [r7, #7]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	440b      	add	r3, r1
 8001c24:	429a      	cmp	r2, r3
 8001c26:	daf0      	bge.n	8001c0a <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	79b9      	ldrb	r1, [r7, #6]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	1acb      	subs	r3, r1, r3
 8001c36:	429a      	cmp	r2, r3
 8001c38:	dae1      	bge.n	8001bfe <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	dc13      	bgt.n	8001c6e <ssd1306_FillCircle+0xbc>
            y++;
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	3301      	adds	r3, #1
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4413      	add	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	425b      	negs	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d105      	bne.n	8001c6e <ssd1306_FillCircle+0xbc>
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dc01      	bgt.n	8001c6e <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	dd08      	ble.n	8001c88 <ssd1306_FillCircle+0xd6>
            x++;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	3301      	adds	r3, #1
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	ddb1      	ble.n	8001bf2 <ssd1306_FillCircle+0x40>

    return;
 8001c8e:	e000      	b.n	8001c92 <ssd1306_FillCircle+0xe0>
        return;
 8001c90:	bf00      	nop
}
 8001c92:	3724      	adds	r7, #36	; 0x24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}

08001c98 <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	71fb      	strb	r3, [r7, #7]
 8001caa:	4603      	mov	r3, r0
 8001cac:	71bb      	strb	r3, [r7, #6]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	717b      	strb	r3, [r7, #5]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8001cb6:	79bc      	ldrb	r4, [r7, #6]
 8001cb8:	797a      	ldrb	r2, [r7, #5]
 8001cba:	79b9      	ldrb	r1, [r7, #6]
 8001cbc:	79f8      	ldrb	r0, [r7, #7]
 8001cbe:	7e3b      	ldrb	r3, [r7, #24]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	f7ff fb56 	bl	8001374 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8001cc8:	793c      	ldrb	r4, [r7, #4]
 8001cca:	797a      	ldrb	r2, [r7, #5]
 8001ccc:	79b9      	ldrb	r1, [r7, #6]
 8001cce:	7978      	ldrb	r0, [r7, #5]
 8001cd0:	7e3b      	ldrb	r3, [r7, #24]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	f7ff fb4d 	bl	8001374 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001cda:	793c      	ldrb	r4, [r7, #4]
 8001cdc:	79fa      	ldrb	r2, [r7, #7]
 8001cde:	7939      	ldrb	r1, [r7, #4]
 8001ce0:	7978      	ldrb	r0, [r7, #5]
 8001ce2:	7e3b      	ldrb	r3, [r7, #24]
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	f7ff fb44 	bl	8001374 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001cec:	79bc      	ldrb	r4, [r7, #6]
 8001cee:	79fa      	ldrb	r2, [r7, #7]
 8001cf0:	7939      	ldrb	r1, [r7, #4]
 8001cf2:	79f8      	ldrb	r0, [r7, #7]
 8001cf4:	7e3b      	ldrb	r3, [r7, #24]
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	4623      	mov	r3, r4
 8001cfa:	f7ff fb3b 	bl	8001374 <ssd1306_Line>

    return;
 8001cfe:	bf00      	nop
}
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd90      	pop	{r4, r7, pc}

08001d06 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001d06:	b590      	push	{r4, r7, lr}
 8001d08:	b085      	sub	sp, #20
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	4608      	mov	r0, r1
 8001d10:	4611      	mov	r1, r2
 8001d12:	461a      	mov	r2, r3
 8001d14:	4623      	mov	r3, r4
 8001d16:	71fb      	strb	r3, [r7, #7]
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71bb      	strb	r3, [r7, #6]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	717b      	strb	r3, [r7, #5]
 8001d20:	4613      	mov	r3, r2
 8001d22:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001d24:	79fa      	ldrb	r2, [r7, #7]
 8001d26:	797b      	ldrb	r3, [r7, #5]
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	bf28      	it	cs
 8001d2c:	4613      	movcs	r3, r2
 8001d2e:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001d30:	797a      	ldrb	r2, [r7, #5]
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	4293      	cmp	r3, r2
 8001d36:	bf38      	it	cc
 8001d38:	4613      	movcc	r3, r2
 8001d3a:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001d3c:	79ba      	ldrb	r2, [r7, #6]
 8001d3e:	793b      	ldrb	r3, [r7, #4]
 8001d40:	4293      	cmp	r3, r2
 8001d42:	bf28      	it	cs
 8001d44:	4613      	movcs	r3, r2
 8001d46:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001d48:	793a      	ldrb	r2, [r7, #4]
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	bf38      	it	cc
 8001d50:	4613      	movcc	r3, r2
 8001d52:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e017      	b.n	8001d8a <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001d5a:	7b7b      	ldrb	r3, [r7, #13]
 8001d5c:	73bb      	strb	r3, [r7, #14]
 8001d5e:	e009      	b.n	8001d74 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001d60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d64:	7bf9      	ldrb	r1, [r7, #15]
 8001d66:	7bbb      	ldrb	r3, [r7, #14]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f9e9 	bl	8001140 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001d6e:	7bbb      	ldrb	r3, [r7, #14]
 8001d70:	3301      	adds	r3, #1
 8001d72:	73bb      	strb	r3, [r7, #14]
 8001d74:	7bba      	ldrb	r2, [r7, #14]
 8001d76:	7b3b      	ldrb	r3, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d803      	bhi.n	8001d84 <ssd1306_FillRectangle+0x7e>
 8001d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	daed      	bge.n	8001d60 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	3301      	adds	r3, #1
 8001d88:	73fb      	strb	r3, [r7, #15]
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	7abb      	ldrb	r3, [r7, #10]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d803      	bhi.n	8001d9a <ssd1306_FillRectangle+0x94>
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	2b3f      	cmp	r3, #63	; 0x3f
 8001d96:	d9e0      	bls.n	8001d5a <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
}
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}

08001da2 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	603a      	str	r2, [r7, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	4603      	mov	r3, r0
 8001dae:	71fb      	strb	r3, [r7, #7]
 8001db0:	460b      	mov	r3, r1
 8001db2:	71bb      	strb	r3, [r7, #6]
 8001db4:	4613      	mov	r3, r2
 8001db6:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001db8:	797b      	ldrb	r3, [r7, #5]
 8001dba:	3307      	adds	r3, #7
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	da00      	bge.n	8001dc2 <ssd1306_DrawBitmap+0x20>
 8001dc0:	3307      	adds	r3, #7
 8001dc2:	10db      	asrs	r3, r3, #3
 8001dc4:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db3e      	blt.n	8001e50 <ssd1306_DrawBitmap+0xae>
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	2b3f      	cmp	r3, #63	; 0x3f
 8001dd6:	d83b      	bhi.n	8001e50 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73bb      	strb	r3, [r7, #14]
 8001ddc:	e033      	b.n	8001e46 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	737b      	strb	r3, [r7, #13]
 8001de2:	e026      	b.n	8001e32 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001de4:	7b7b      	ldrb	r3, [r7, #13]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e00d      	b.n	8001e12 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001df6:	7bbb      	ldrb	r3, [r7, #14]
 8001df8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	7b7a      	ldrb	r2, [r7, #13]
 8001e02:	08d2      	lsrs	r2, r2, #3
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	4413      	add	r3, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	da08      	bge.n	8001e2c <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001e1a:	79fa      	ldrb	r2, [r7, #7]
 8001e1c:	7b7b      	ldrb	r3, [r7, #13]
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	7f3a      	ldrb	r2, [r7, #28]
 8001e24:	79b9      	ldrb	r1, [r7, #6]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff f98a 	bl	8001140 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001e2c:	7b7b      	ldrb	r3, [r7, #13]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	737b      	strb	r3, [r7, #13]
 8001e32:	7b7a      	ldrb	r2, [r7, #13]
 8001e34:	797b      	ldrb	r3, [r7, #5]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3d4      	bcc.n	8001de4 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001e3a:	7bbb      	ldrb	r3, [r7, #14]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	73bb      	strb	r3, [r7, #14]
 8001e40:	79bb      	ldrb	r3, [r7, #6]
 8001e42:	3301      	adds	r3, #1
 8001e44:	71bb      	strb	r3, [r7, #6]
 8001e46:	7bba      	ldrb	r2, [r7, #14]
 8001e48:	7e3b      	ldrb	r3, [r7, #24]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d3c7      	bcc.n	8001dde <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001e4e:	e000      	b.n	8001e52 <ssd1306_DrawBitmap+0xb0>
        return;
 8001e50:	bf00      	nop
}
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e62:	2381      	movs	r3, #129	; 0x81
 8001e64:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff f881 	bl	8000f70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f87d 	bl	8000f70 <ssd1306_WriteCommand>
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e90:	23af      	movs	r3, #175	; 0xaf
 8001e92:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <ssd1306_SetDisplayOn+0x38>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	715a      	strb	r2, [r3, #5]
 8001e9a:	e004      	b.n	8001ea6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001e9c:	23ae      	movs	r3, #174	; 0xae
 8001e9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <ssd1306_SetDisplayOn+0x38>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff f861 	bl	8000f70 <ssd1306_WriteCommand>
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200004ac 	.word	0x200004ac

08001ebc <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff f8f0 	bl	80010a8 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8001ec8:	f001 f800 	bl	8002ecc <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8001eda:	7bb9      	ldrb	r1, [r7, #14]
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f92d 	bl	8001140 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d106      	bne.n	8001efa <ssd1306_TestBorder+0x3e>
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b7e      	cmp	r3, #126	; 0x7e
 8001ef0:	d803      	bhi.n	8001efa <ssd1306_TestBorder+0x3e>
            x++;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e016      	b.n	8001f28 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1306_HEIGHT-1)))
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	2b7f      	cmp	r3, #127	; 0x7f
 8001efe:	d106      	bne.n	8001f0e <ssd1306_TestBorder+0x52>
 8001f00:	7bbb      	ldrb	r3, [r7, #14]
 8001f02:	2b3e      	cmp	r3, #62	; 0x3e
 8001f04:	d803      	bhi.n	8001f0e <ssd1306_TestBorder+0x52>
            y++;
 8001f06:	7bbb      	ldrb	r3, [r7, #14]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	73bb      	strb	r3, [r7, #14]
 8001f0c:	e00c      	b.n	8001f28 <ssd1306_TestBorder+0x6c>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
 8001f10:	2b3f      	cmp	r3, #63	; 0x3f
 8001f12:	d106      	bne.n	8001f22 <ssd1306_TestBorder+0x66>
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <ssd1306_TestBorder+0x66>
            x--;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e002      	b.n	8001f28 <ssd1306_TestBorder+0x6c>
        else
            y--;
 8001f22:	7bbb      	ldrb	r3, [r7, #14]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 8001f28:	7bb9      	ldrb	r1, [r7, #14]
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f906 	bl	8001140 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8001f34:	f7ff f8dc 	bl	80010f0 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8001f38:	2005      	movs	r0, #5
 8001f3a:	f000 ffd3 	bl	8002ee4 <HAL_Delay>
        end = HAL_GetTick();
 8001f3e:	f000 ffc5 	bl	8002ecc <HAL_GetTick>
 8001f42:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001f4e:	d3c4      	bcc.n	8001eda <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 8001f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f54:	f000 ffc6 	bl	8002ee4 <HAL_Delay>
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7ff f89c 	bl	80010a8 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	4619      	mov	r1, r3
 8001f74:	2002      	movs	r0, #2
 8001f76:	f7ff f9e5 	bl	8001344 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8001f7a:	4a1b      	ldr	r2, [pc, #108]	; (8001fe8 <ssd1306_TestFonts1+0x88>)
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	ca06      	ldmia	r2, {r1, r2}
 8001f80:	481a      	ldr	r0, [pc, #104]	; (8001fec <ssd1306_TestFonts1+0x8c>)
 8001f82:	f7ff f9b9 	bl	80012f8 <ssd1306_WriteString>
    y += 26;
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	331a      	adds	r3, #26
 8001f8a:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	2002      	movs	r0, #2
 8001f92:	f7ff f9d7 	bl	8001344 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8001f96:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <ssd1306_TestFonts1+0x90>)
 8001f98:	2301      	movs	r3, #1
 8001f9a:	ca06      	ldmia	r2, {r1, r2}
 8001f9c:	4815      	ldr	r0, [pc, #84]	; (8001ff4 <ssd1306_TestFonts1+0x94>)
 8001f9e:	f7ff f9ab 	bl	80012f8 <ssd1306_WriteString>
    y += 18;
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	3312      	adds	r3, #18
 8001fa6:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	4619      	mov	r1, r3
 8001fac:	2002      	movs	r0, #2
 8001fae:	f7ff f9c9 	bl	8001344 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8001fb2:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <ssd1306_TestFonts1+0x98>)
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	ca06      	ldmia	r2, {r1, r2}
 8001fb8:	4810      	ldr	r0, [pc, #64]	; (8001ffc <ssd1306_TestFonts1+0x9c>)
 8001fba:	f7ff f99d 	bl	80012f8 <ssd1306_WriteString>
    y += 10;
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	330a      	adds	r3, #10
 8001fc2:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f7ff f9bb 	bl	8001344 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8001fce:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <ssd1306_TestFonts1+0xa0>)
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	ca06      	ldmia	r2, {r1, r2}
 8001fd4:	480b      	ldr	r0, [pc, #44]	; (8002004 <ssd1306_TestFonts1+0xa4>)
 8001fd6:	f7ff f98f 	bl	80012f8 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 8001fda:	f7ff f889 	bl	80010f0 <ssd1306_UpdateScreen>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000018 	.word	0x20000018
 8001fec:	080093b8 	.word	0x080093b8
 8001ff0:	20000010 	.word	0x20000010
 8001ff4:	080093c4 	.word	0x080093c4
 8001ff8:	20000008 	.word	0x20000008
 8001ffc:	080093d0 	.word	0x080093d0
 8002000:	20000000 	.word	0x20000000
 8002004:	080093dc 	.word	0x080093dc

08002008 <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_Fill(Black);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff f84b 	bl	80010a8 <ssd1306_Fill>

    ssd1306_SetCursor(0, 3);
 8002012:	2103      	movs	r1, #3
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff f995 	bl	8001344 <ssd1306_SetCursor>
    ssd1306_WriteString("14.000.0", Font_16x26, White);
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <ssd1306_TestFonts2+0x3c>)
 800201c:	2301      	movs	r3, #1
 800201e:	ca06      	ldmia	r2, {r1, r2}
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <ssd1306_TestFonts2+0x40>)
 8002022:	f7ff f969 	bl	80012f8 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 3+26+6);
 8002026:	2123      	movs	r1, #35	; 0x23
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff f98b 	bl	8001344 <ssd1306_SetCursor>
    ssd1306_WriteString("VCC 13.8", Font_16x26, White);
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <ssd1306_TestFonts2+0x3c>)
 8002030:	2301      	movs	r3, #1
 8002032:	ca06      	ldmia	r2, {r1, r2}
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <ssd1306_TestFonts2+0x44>)
 8002036:	f7ff f95f 	bl	80012f8 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 800203a:	f7ff f859 	bl	80010f0 <ssd1306_UpdateScreen>
    #endif
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000018 	.word	0x20000018
 8002048:	080093e8 	.word	0x080093e8
 800204c:	080093f4 	.word	0x080093f4

08002050 <ssd1306_TestFPS>:


void ssd1306_TestFPS() {
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b098      	sub	sp, #96	; 0x60
 8002054:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 8002056:	2001      	movs	r0, #1
 8002058:	f7ff f826 	bl	80010a8 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 800205c:	f000 ff36 	bl	8002ecc <HAL_GetTick>
 8002060:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 8002062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002064:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 800206a:	4a43      	ldr	r2, [pc, #268]	; (8002178 <ssd1306_TestFPS+0x128>)
 800206c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002070:	ca07      	ldmia	r2, {r0, r1, r2}
 8002072:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8002076:	2100      	movs	r1, #0
 8002078:	2002      	movs	r0, #2
 800207a:	f7ff f963 	bl	8001344 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 800207e:	4a3f      	ldr	r2, [pc, #252]	; (800217c <ssd1306_TestFPS+0x12c>)
 8002080:	2300      	movs	r3, #0
 8002082:	ca06      	ldmia	r2, {r1, r2}
 8002084:	483e      	ldr	r0, [pc, #248]	; (8002180 <ssd1306_TestFPS+0x130>)
 8002086:	f7ff f937 	bl	80012f8 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 800208a:	2124      	movs	r1, #36	; 0x24
 800208c:	2002      	movs	r0, #2
 800208e:	f7ff f959 	bl	8001344 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 8002092:	4a3a      	ldr	r2, [pc, #232]	; (800217c <ssd1306_TestFPS+0x12c>)
 8002094:	2300      	movs	r3, #0
 8002096:	ca06      	ldmia	r2, {r1, r2}
 8002098:	483a      	ldr	r0, [pc, #232]	; (8002184 <ssd1306_TestFPS+0x134>)
 800209a:	f7ff f92d 	bl	80012f8 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 800209e:	2112      	movs	r1, #18
 80020a0:	2002      	movs	r0, #2
 80020a2:	f7ff f94f 	bl	8001344 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 80020a6:	4a35      	ldr	r2, [pc, #212]	; (800217c <ssd1306_TestFPS+0x12c>)
 80020a8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80020ac:	2300      	movs	r3, #0
 80020ae:	ca06      	ldmia	r2, {r1, r2}
 80020b0:	f7ff f922 	bl	80012f8 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80020b4:	f7ff f81c 	bl	80010f0 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 80020b8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80020bc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 80020c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020c4:	3301      	adds	r3, #1
 80020c6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80020ca:	220a      	movs	r2, #10
 80020cc:	4619      	mov	r1, r3
 80020ce:	f005 fc4b 	bl	8007968 <memmove>
        message[sizeof(message)-2] = ch;
 80020d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80020d6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 80020da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020dc:	3301      	adds	r3, #1
 80020de:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 80020e0:	f000 fef4 	bl	8002ecc <HAL_GetTick>
 80020e4:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 80020e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3287 	movw	r2, #4999	; 0x1387
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d9d4      	bls.n	800209e <ssd1306_TestFPS+0x4e>
   
    HAL_Delay(5000);
 80020f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80020f8:	f000 fef4 	bl	8002ee4 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 80020fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	ee17 0a90 	vmov	r0, s15
 800210a:	f7fe fa3d 	bl	8000588 <__aeabi_f2d>
 800210e:	4604      	mov	r4, r0
 8002110:	460d      	mov	r5, r1
 8002112:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fa13 	bl	8000544 <__aeabi_ui2d>
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <ssd1306_TestFPS+0x138>)
 8002124:	f7fe fbb2 	bl	800088c <__aeabi_ddiv>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4620      	mov	r0, r4
 800212e:	4629      	mov	r1, r5
 8002130:	f7fe fbac 	bl	800088c <__aeabi_ddiv>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	f7fe fd16 	bl	8000b6c <__aeabi_d2iz>
 8002140:	4603      	mov	r3, r0
 8002142:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8002144:	1d38      	adds	r0, r7, #4
 8002146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002148:	4a10      	ldr	r2, [pc, #64]	; (800218c <ssd1306_TestFPS+0x13c>)
 800214a:	2140      	movs	r1, #64	; 0x40
 800214c:	f005 fc2e 	bl	80079ac <sniprintf>
   
    ssd1306_Fill(White);
 8002150:	2001      	movs	r0, #1
 8002152:	f7fe ffa9 	bl	80010a8 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 8002156:	2102      	movs	r1, #2
 8002158:	2002      	movs	r0, #2
 800215a:	f7ff f8f3 	bl	8001344 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 800215e:	4a07      	ldr	r2, [pc, #28]	; (800217c <ssd1306_TestFPS+0x12c>)
 8002160:	1d38      	adds	r0, r7, #4
 8002162:	2300      	movs	r3, #0
 8002164:	ca06      	ldmia	r2, {r1, r2}
 8002166:	f7ff f8c7 	bl	80012f8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800216a:	f7fe ffc1 	bl	80010f0 <ssd1306_UpdateScreen>
}
 800216e:	bf00      	nop
 8002170:	3760      	adds	r7, #96	; 0x60
 8002172:	46bd      	mov	sp, r7
 8002174:	bdb0      	pop	{r4, r5, r7, pc}
 8002176:	bf00      	nop
 8002178:	08009420 	.word	0x08009420
 800217c:	20000010 	.word	0x20000010
 8002180:	08009400 	.word	0x08009400
 8002184:	0800940c 	.word	0x0800940c
 8002188:	408f4000 	.word	0x408f4000
 800218c:	08009418 	.word	0x08009418

08002190 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8002196:	2301      	movs	r3, #1
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	233f      	movs	r3, #63	; 0x3f
 800219c:	227f      	movs	r2, #127	; 0x7f
 800219e:	2101      	movs	r1, #1
 80021a0:	2001      	movs	r0, #1
 80021a2:	f7ff f8e7 	bl	8001374 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 80021a6:	2301      	movs	r3, #1
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	233f      	movs	r3, #63	; 0x3f
 80021ac:	2201      	movs	r2, #1
 80021ae:	2101      	movs	r1, #1
 80021b0:	207f      	movs	r0, #127	; 0x7f
 80021b2:	f7ff f8df 	bl	8001374 <ssd1306_Line>
  ssd1306_UpdateScreen();
 80021b6:	f7fe ff9b 	bl	80010f0 <ssd1306_UpdateScreen>
  return;
 80021ba:	bf00      	nop
}
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	e028      	b.n	800221e <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	b2d8      	uxtb	r0, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2d9      	uxtb	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461c      	mov	r4, r3
 8002204:	00a4      	lsls	r4, r4, #2
 8002206:	4423      	add	r3, r4
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2401      	movs	r4, #1
 8002212:	9400      	str	r4, [sp, #0]
 8002214:	f7ff fd40 	bl	8001c98 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3301      	adds	r3, #1
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d9d3      	bls.n	80021cc <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8002224:	f7fe ff64 	bl	80010f0 <ssd1306_UpdateScreen>
  return;
 8002228:	bf00      	nop
}
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bd90      	pop	{r4, r7, pc}

08002230 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 8002236:	2301      	movs	r3, #1
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2323      	movs	r3, #35	; 0x23
 800223c:	2241      	movs	r2, #65	; 0x41
 800223e:	2101      	movs	r1, #1
 8002240:	201f      	movs	r0, #31
 8002242:	f7ff fd60 	bl	8001d06 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 8002246:	2301      	movs	r3, #1
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	233c      	movs	r3, #60	; 0x3c
 800224c:	2246      	movs	r2, #70	; 0x46
 800224e:	212d      	movs	r1, #45	; 0x2d
 8002250:	200a      	movs	r0, #10
 8002252:	f7ff fd58 	bl	8001d06 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 8002256:	2301      	movs	r3, #1
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	232d      	movs	r3, #45	; 0x2d
 800225c:	2264      	movs	r2, #100	; 0x64
 800225e:	210a      	movs	r1, #10
 8002260:	204b      	movs	r0, #75	; 0x4b
 8002262:	f7ff fd50 	bl	8001d06 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 8002266:	2300      	movs	r3, #0
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2337      	movs	r3, #55	; 0x37
 800226c:	2250      	movs	r2, #80	; 0x50
 800226e:	211e      	movs	r1, #30
 8002270:	2037      	movs	r0, #55	; 0x37
 8002272:	f7ff fd48 	bl	8001d06 <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 8002276:	f7fe ff3b 	bl	80010f0 <ssd1306_UpdateScreen>
}
 800227a:	bf00      	nop
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	e010      	b.n	80022ae <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	b2db      	uxtb	r3, r3
 800229a:	331e      	adds	r3, #30
 800229c:	b2d8      	uxtb	r0, r3
 800229e:	2301      	movs	r3, #1
 80022a0:	220a      	movs	r2, #10
 80022a2:	210f      	movs	r1, #15
 80022a4:	f7ff fbfe 	bl	8001aa4 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3301      	adds	r3, #1
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d9eb      	bls.n	800228c <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	e011      	b.n	80022de <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	0052      	lsls	r2, r2, #1
 80022c2:	441a      	add	r2, r3
 80022c4:	00d2      	lsls	r2, r2, #3
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	330f      	adds	r3, #15
 80022cc:	b2d8      	uxtb	r0, r3
 80022ce:	2301      	movs	r3, #1
 80022d0:	220a      	movs	r2, #10
 80022d2:	2128      	movs	r1, #40	; 0x28
 80022d4:	f7ff fc6d 	bl	8001bb2 <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3301      	adds	r3, #1
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d9ea      	bls.n	80022ba <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 80022e4:	f7fe ff04 	bl	80010f0 <ssd1306_UpdateScreen>
  return;
 80022e8:	bf00      	nop
}
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 80022f6:	2301      	movs	r3, #1
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2314      	movs	r3, #20
 8002302:	221e      	movs	r2, #30
 8002304:	211e      	movs	r1, #30
 8002306:	201e      	movs	r0, #30
 8002308:	f7ff f92e 	bl	8001568 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 800230c:	2301      	movs	r3, #1
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	231e      	movs	r3, #30
 8002318:	220a      	movs	r2, #10
 800231a:	2137      	movs	r1, #55	; 0x37
 800231c:	2050      	movs	r0, #80	; 0x50
 800231e:	f7ff fa37 	bl	8001790 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 8002322:	f7fe fee5 	bl	80010f0 <ssd1306_UpdateScreen>
  return;
 8002326:	bf00      	nop
}
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <ssd1306_TestPolyline+0x28>)
 8002334:	463c      	mov	r4, r7
 8002336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002338:	c407      	stmia	r4!, {r0, r1, r2}
 800233a:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 800233c:	463b      	mov	r3, r7
 800233e:	2201      	movs	r2, #1
 8002340:	2107      	movs	r1, #7
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f882 	bl	800144c <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8002348:	f7fe fed2 	bl	80010f0 <ssd1306_UpdateScreen>
  return;
 800234c:	bf00      	nop
}
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bd90      	pop	{r4, r7, pc}
 8002354:	0800942c 	.word	0x0800942c

08002358 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 800235e:	2001      	movs	r0, #1
 8002360:	f7fe fea2 	bl	80010a8 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 8002364:	2300      	movs	r3, #0
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	2340      	movs	r3, #64	; 0x40
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <ssd1306_TestDrawBitmap+0x78>)
 8002370:	2100      	movs	r1, #0
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff fd15 	bl	8001da2 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002378:	f7fe feba 	bl	80010f0 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 800237c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002380:	f000 fdb0 	bl	8002ee4 <HAL_Delay>
    ssd1306_Fill(Black);
 8002384:	2000      	movs	r0, #0
 8002386:	f7fe fe8f 	bl	80010a8 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 800238a:	2301      	movs	r3, #1
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2340      	movs	r3, #64	; 0x40
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2340      	movs	r3, #64	; 0x40
 8002394:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <ssd1306_TestDrawBitmap+0x7c>)
 8002396:	2100      	movs	r1, #0
 8002398:	2020      	movs	r0, #32
 800239a:	f7ff fd02 	bl	8001da2 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800239e:	f7fe fea7 	bl	80010f0 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80023a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023a6:	f000 fd9d 	bl	8002ee4 <HAL_Delay>
    ssd1306_Fill(White);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7fe fe7c 	bl	80010a8 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 80023b0:	2300      	movs	r3, #0
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	2340      	movs	r3, #64	; 0x40
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2340      	movs	r3, #64	; 0x40
 80023ba:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <ssd1306_TestDrawBitmap+0x7c>)
 80023bc:	2100      	movs	r1, #0
 80023be:	2020      	movs	r0, #32
 80023c0:	f7ff fcef 	bl	8001da2 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80023c4:	f7fe fe94 	bl	80010f0 <ssd1306_UpdateScreen>
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	0800c240 	.word	0x0800c240
 80023d4:	0800c640 	.word	0x0800c640

080023d8 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80023dc:	f7fe fdfa 	bl	8000fd4 <ssd1306_Init>
    ssd1306_TestFPS();
 80023e0:	f7ff fe36 	bl	8002050 <ssd1306_TestFPS>
    HAL_Delay(3000);
 80023e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023e8:	f000 fd7c 	bl	8002ee4 <HAL_Delay>
    ssd1306_TestBorder();
 80023ec:	f7ff fd66 	bl	8001ebc <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 80023f0:	f7ff fdb6 	bl	8001f60 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 80023f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023f8:	f000 fd74 	bl	8002ee4 <HAL_Delay>
    ssd1306_TestFonts2();
 80023fc:	f7ff fe04 	bl	8002008 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 8002400:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002404:	f000 fd6e 	bl	8002ee4 <HAL_Delay>
    ssd1306_Fill(Black);
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe fe4d 	bl	80010a8 <ssd1306_Fill>
    ssd1306_TestRectangle();
 800240e:	f7ff fed7 	bl	80021c0 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 8002412:	f7ff febd 	bl	8002190 <ssd1306_TestLine>
    HAL_Delay(3000);
 8002416:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800241a:	f000 fd63 	bl	8002ee4 <HAL_Delay>
    ssd1306_Fill(Black);
 800241e:	2000      	movs	r0, #0
 8002420:	f7fe fe42 	bl	80010a8 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 8002424:	f7ff ff04 	bl	8002230 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8002428:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800242c:	f000 fd5a 	bl	8002ee4 <HAL_Delay>
    ssd1306_Fill(Black);
 8002430:	2000      	movs	r0, #0
 8002432:	f7fe fe39 	bl	80010a8 <ssd1306_Fill>
    ssd1306_TestPolyline();
 8002436:	f7ff ff79 	bl	800232c <ssd1306_TestPolyline>
    HAL_Delay(3000);
 800243a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800243e:	f000 fd51 	bl	8002ee4 <HAL_Delay>
    ssd1306_Fill(Black);
 8002442:	2000      	movs	r0, #0
 8002444:	f7fe fe30 	bl	80010a8 <ssd1306_Fill>
    ssd1306_TestArc();
 8002448:	f7ff ff52 	bl	80022f0 <ssd1306_TestArc>
    HAL_Delay(3000);
 800244c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002450:	f000 fd48 	bl	8002ee4 <HAL_Delay>
    ssd1306_Fill(Black);
 8002454:	2000      	movs	r0, #0
 8002456:	f7fe fe27 	bl	80010a8 <ssd1306_Fill>
    ssd1306_TestCircle();
 800245a:	f7ff ff11 	bl	8002280 <ssd1306_TestCircle>
    HAL_Delay(3000);
 800245e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002462:	f000 fd3f 	bl	8002ee4 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8002466:	f7ff ff77 	bl	8002358 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 800246a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800246e:	f000 fd39 	bl	8002ee4 <HAL_Delay>
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800248e:	4b6e      	ldr	r3, [pc, #440]	; (8002648 <MX_GPIO_Init+0x1d0>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a6d      	ldr	r2, [pc, #436]	; (8002648 <MX_GPIO_Init+0x1d0>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b6b      	ldr	r3, [pc, #428]	; (8002648 <MX_GPIO_Init+0x1d0>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024a6:	4b68      	ldr	r3, [pc, #416]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a67      	ldr	r2, [pc, #412]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024ac:	f043 0320 	orr.w	r3, r3, #32
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b65      	ldr	r3, [pc, #404]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024be:	4b62      	ldr	r3, [pc, #392]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a61      	ldr	r2, [pc, #388]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b5f      	ldr	r3, [pc, #380]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	4b5c      	ldr	r3, [pc, #368]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a5b      	ldr	r2, [pc, #364]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b59      	ldr	r3, [pc, #356]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	4b56      	ldr	r3, [pc, #344]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a55      	ldr	r2, [pc, #340]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b53      	ldr	r3, [pc, #332]	; (8002648 <MX_GPIO_Init+0x1d0>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002506:	4b50      	ldr	r3, [pc, #320]	; (8002648 <MX_GPIO_Init+0x1d0>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a4f      	ldr	r2, [pc, #316]	; (8002648 <MX_GPIO_Init+0x1d0>)
 800250c:	f043 0308 	orr.w	r3, r3, #8
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <MX_GPIO_Init+0x1d0>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800251e:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <MX_GPIO_Init+0x1d0>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a49      	ldr	r2, [pc, #292]	; (8002648 <MX_GPIO_Init+0x1d0>)
 8002524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <MX_GPIO_Init+0x1d0>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	f244 0181 	movw	r1, #16513	; 0x4081
 800253c:	4843      	ldr	r0, [pc, #268]	; (800264c <MX_GPIO_Init+0x1d4>)
 800253e:	f001 f845 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002542:	2200      	movs	r2, #0
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	4842      	ldr	r0, [pc, #264]	; (8002650 <MX_GPIO_Init+0x1d8>)
 8002548:	f001 f840 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800254c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002552:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	4619      	mov	r1, r3
 8002562:	483c      	ldr	r0, [pc, #240]	; (8002654 <MX_GPIO_Init+0x1dc>)
 8002564:	f000 fe86 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002568:	2332      	movs	r3, #50	; 0x32
 800256a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002578:	230b      	movs	r3, #11
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4619      	mov	r1, r3
 8002582:	4834      	ldr	r0, [pc, #208]	; (8002654 <MX_GPIO_Init+0x1dc>)
 8002584:	f000 fe76 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002588:	2386      	movs	r3, #134	; 0x86
 800258a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002598:	230b      	movs	r3, #11
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259c:	f107 031c 	add.w	r3, r7, #28
 80025a0:	4619      	mov	r1, r3
 80025a2:	482d      	ldr	r0, [pc, #180]	; (8002658 <MX_GPIO_Init+0x1e0>)
 80025a4:	f000 fe66 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80025a8:	f244 0381 	movw	r3, #16513	; 0x4081
 80025ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ae:	2301      	movs	r3, #1
 80025b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	4619      	mov	r1, r3
 80025c0:	4822      	ldr	r0, [pc, #136]	; (800264c <MX_GPIO_Init+0x1d4>)
 80025c2:	f000 fe57 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80025c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025d8:	230b      	movs	r3, #11
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4619      	mov	r1, r3
 80025e2:	481a      	ldr	r0, [pc, #104]	; (800264c <MX_GPIO_Init+0x1d4>)
 80025e4:	f000 fe46 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80025e8:	2340      	movs	r3, #64	; 0x40
 80025ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80025f8:	f107 031c 	add.w	r3, r7, #28
 80025fc:	4619      	mov	r1, r3
 80025fe:	4814      	ldr	r0, [pc, #80]	; (8002650 <MX_GPIO_Init+0x1d8>)
 8002600:	f000 fe38 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002608:	2300      	movs	r3, #0
 800260a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	4619      	mov	r1, r3
 8002616:	480e      	ldr	r0, [pc, #56]	; (8002650 <MX_GPIO_Init+0x1d8>)
 8002618:	f000 fe2c 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800261c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262a:	2303      	movs	r3, #3
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800262e:	230b      	movs	r3, #11
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002632:	f107 031c 	add.w	r3, r7, #28
 8002636:	4619      	mov	r1, r3
 8002638:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_GPIO_Init+0x1d8>)
 800263a:	f000 fe1b 	bl	8003274 <HAL_GPIO_Init>

}
 800263e:	bf00      	nop
 8002640:	3730      	adds	r7, #48	; 0x30
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	40020400 	.word	0x40020400
 8002650:	40021800 	.word	0x40021800
 8002654:	40020800 	.word	0x40020800
 8002658:	40020000 	.word	0x40020000

0800265c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MX_I2C2_Init+0x74>)
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <MX_I2C2_Init+0x78>)
 8002664:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <MX_I2C2_Init+0x74>)
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <MX_I2C2_Init+0x7c>)
 800266a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_I2C2_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <MX_I2C2_Init+0x74>)
 8002674:	2201      	movs	r2, #1
 8002676:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_I2C2_Init+0x74>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_I2C2_Init+0x74>)
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <MX_I2C2_Init+0x74>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_I2C2_Init+0x74>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <MX_I2C2_Init+0x74>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002696:	480e      	ldr	r0, [pc, #56]	; (80026d0 <MX_I2C2_Init+0x74>)
 8002698:	f000 ffb2 	bl	8003600 <HAL_I2C_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80026a2:	f000 f937 	bl	8002914 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026a6:	2100      	movs	r1, #0
 80026a8:	4809      	ldr	r0, [pc, #36]	; (80026d0 <MX_I2C2_Init+0x74>)
 80026aa:	f001 fb93 	bl	8003dd4 <HAL_I2CEx_ConfigAnalogFilter>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80026b4:	f000 f92e 	bl	8002914 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80026b8:	2100      	movs	r1, #0
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_I2C2_Init+0x74>)
 80026bc:	f001 fbd5 	bl	8003e6a <HAL_I2CEx_ConfigDigitalFilter>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80026c6:	f000 f925 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200004b4 	.word	0x200004b4
 80026d4:	40005800 	.word	0x40005800
 80026d8:	20404768 	.word	0x20404768

080026dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b0aa      	sub	sp, #168	; 0xa8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	2284      	movs	r2, #132	; 0x84
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f005 f94d 	bl	800799c <memset>
  if(i2cHandle->Instance==I2C2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a21      	ldr	r2, [pc, #132]	; (800278c <HAL_I2C_MspInit+0xb0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d13b      	bne.n	8002784 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800270c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002710:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002712:	2300      	movs	r3, #0
 8002714:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002716:	f107 0310 	add.w	r3, r7, #16
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fa64 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002726:	f000 f8f5 	bl	8002914 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_I2C_MspInit+0xb4>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a18      	ldr	r2, [pc, #96]	; (8002790 <HAL_I2C_MspInit+0xb4>)
 8002730:	f043 0320 	orr.w	r3, r3, #32
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <HAL_I2C_MspInit+0xb4>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002742:	2303      	movs	r3, #3
 8002744:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002748:	2312      	movs	r3, #18
 800274a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002754:	2303      	movs	r3, #3
 8002756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800275a:	2304      	movs	r3, #4
 800275c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002760:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002764:	4619      	mov	r1, r3
 8002766:	480b      	ldr	r0, [pc, #44]	; (8002794 <HAL_I2C_MspInit+0xb8>)
 8002768:	f000 fd84 	bl	8003274 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_I2C_MspInit+0xb4>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	4a07      	ldr	r2, [pc, #28]	; (8002790 <HAL_I2C_MspInit+0xb4>)
 8002772:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002776:	6413      	str	r3, [r2, #64]	; 0x40
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_I2C_MspInit+0xb4>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002784:	bf00      	nop
 8002786:	37a8      	adds	r7, #168	; 0xa8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40005800 	.word	0x40005800
 8002790:	40023800 	.word	0x40023800
 8002794:	40021400 	.word	0x40021400

08002798 <HAL_UART_RxCpltCallback>:
	ssd1306_UpdateScreen();
}
/*
 * tu beda przerwania
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, received_data, 3); // Tu włącza sie to gowno znowu :)
 80027a0:	2203      	movs	r2, #3
 80027a2:	4904      	ldr	r1, [pc, #16]	; (80027b4 <HAL_UART_RxCpltCallback+0x1c>)
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <HAL_UART_RxCpltCallback+0x20>)
 80027a6:	f003 fba8 	bl	8005efa <HAL_UART_Receive_IT>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000508 	.word	0x20000508
 80027b8:	2000056c 	.word	0x2000056c

080027bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ // If the interrupt is from timer 2
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027cc:	d109      	bne.n	80027e2 <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_UART_Transmit(&huart3, received_data, strlen(received_data), 100);
 80027ce:	4807      	ldr	r0, [pc, #28]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80027d0:	f7fd fd1e 	bl	8000210 <strlen>
 80027d4:	4603      	mov	r3, r0
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	2364      	movs	r3, #100	; 0x64
 80027da:	4904      	ldr	r1, [pc, #16]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80027dc:	4804      	ldr	r0, [pc, #16]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80027de:	f003 fb09 	bl	8005df4 <HAL_UART_Transmit>
		//wyswietlacz();
		//ssd1306_TestAll();
	}

}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000508 	.word	0x20000508
 80027f0:	2000056c 	.word	0x2000056c

080027f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027f8:	f000 fb17 	bl	8002e2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027fc:	f000 f81c 	bl	8002838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002800:	f7ff fe3a 	bl	8002478 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002804:	f000 f9a8 	bl	8002b58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002808:	f000 fa3e 	bl	8002c88 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 800280c:	f7ff ff26 	bl	800265c <MX_I2C2_Init>
  MX_TIM2_Init();
 8002810:	f000 f930 	bl	8002a74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_TestAll();
 8002814:	f7ff fde0 	bl	80023d8 <ssd1306_TestAll>
  //ssd1306_Init(); // Inicjalizacja wyświetlacza
  HAL_TIM_Base_Start_IT(&htim2);
 8002818:	4804      	ldr	r0, [pc, #16]	; (800282c <main+0x38>)
 800281a:	f002 fe2d 	bl	8005478 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, received_data, 3);
 800281e:	2203      	movs	r2, #3
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <main+0x3c>)
 8002822:	4804      	ldr	r0, [pc, #16]	; (8002834 <main+0x40>)
 8002824:	f003 fb69 	bl	8005efa <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002828:	e7fe      	b.n	8002828 <main+0x34>
 800282a:	bf00      	nop
 800282c:	20000520 	.word	0x20000520
 8002830:	20000508 	.word	0x20000508
 8002834:	2000056c 	.word	0x2000056c

08002838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b094      	sub	sp, #80	; 0x50
 800283c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283e:	f107 0320 	add.w	r3, r7, #32
 8002842:	2230      	movs	r2, #48	; 0x30
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f005 f8a8 	bl	800799c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800285c:	f001 fc9a 	bl	8004194 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <SystemClock_Config+0xd4>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	4a29      	ldr	r2, [pc, #164]	; (800290c <SystemClock_Config+0xd4>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286a:	6413      	str	r3, [r2, #64]	; 0x40
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <SystemClock_Config+0xd4>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002878:	4b25      	ldr	r3, [pc, #148]	; (8002910 <SystemClock_Config+0xd8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a24      	ldr	r2, [pc, #144]	; (8002910 <SystemClock_Config+0xd8>)
 800287e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b22      	ldr	r3, [pc, #136]	; (8002910 <SystemClock_Config+0xd8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002890:	2301      	movs	r3, #1
 8002892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002894:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289a:	2302      	movs	r3, #2
 800289c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800289e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028a4:	2304      	movs	r3, #4
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80028a8:	23d8      	movs	r3, #216	; 0xd8
 80028aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ac:	2302      	movs	r3, #2
 80028ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80028b0:	2309      	movs	r3, #9
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b4:	f107 0320 	add.w	r3, r7, #32
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 fccb 	bl	8004254 <HAL_RCC_OscConfig>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80028c4:	f000 f826 	bl	8002914 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80028c8:	f001 fc74 	bl	80041b4 <HAL_PWREx_EnableOverDrive>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80028d2:	f000 f81f 	bl	8002914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028d6:	230f      	movs	r3, #15
 80028d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028da:	2302      	movs	r3, #2
 80028dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80028e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	2107      	movs	r1, #7
 80028f4:	4618      	mov	r0, r3
 80028f6:	f001 ff51 	bl	800479c <HAL_RCC_ClockConfig>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002900:	f000 f808 	bl	8002914 <Error_Handler>
  }
}
 8002904:	bf00      	nop
 8002906:	3750      	adds	r7, #80	; 0x50
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800
 8002910:	40007000 	.word	0x40007000

08002914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002918:	b672      	cpsid	i
}
 800291a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800291c:	e7fe      	b.n	800291c <Error_Handler+0x8>
	...

08002920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_MspInit+0x44>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_MspInit+0x44>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <HAL_MspInit+0x44>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_MspInit+0x44>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a08      	ldr	r2, [pc, #32]	; (8002964 <HAL_MspInit+0x44>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_MspInit+0x44>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800

08002968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800296c:	e7fe      	b.n	800296c <NMI_Handler+0x4>

0800296e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <HardFault_Handler+0x4>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <MemManage_Handler+0x4>

0800297a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <BusFault_Handler+0x4>

08002980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <UsageFault_Handler+0x4>

08002986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b4:	f000 fa76 	bl	8002ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}

080029bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <TIM2_IRQHandler+0x10>)
 80029c2:	f002 fdd1 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000520 	.word	0x20000520

080029d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <USART3_IRQHandler+0x10>)
 80029d6:	f003 fad5 	bl	8005f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000056c 	.word	0x2000056c

080029e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <_sbrk+0x5c>)
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <_sbrk+0x60>)
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <_sbrk+0x64>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <_sbrk+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a14:	f004 ff70 	bl	80078f8 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e009      	b.n	8002a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <_sbrk+0x64>)
 8002a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20050000 	.word	0x20050000
 8002a44:	00000400 	.word	0x00000400
 8002a48:	2000051c 	.word	0x2000051c
 8002a4c:	20000b10 	.word	0x20000b10

08002a50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <SystemInit+0x20>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <SystemInit+0x20>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a7a:	f107 0310 	add.w	r3, r7, #16
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10799;
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002a9c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002aa8:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002aaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab0:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002abc:	4813      	ldr	r0, [pc, #76]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002abe:	f002 fc83 	bl	80053c8 <HAL_TIM_Base_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002ac8:	f7ff ff24 	bl	8002914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ad2:	f107 0310 	add.w	r3, r7, #16
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	480c      	ldr	r0, [pc, #48]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002ada:	f002 fe65 	bl	80057a8 <HAL_TIM_ConfigClockSource>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002ae4:	f7ff ff16 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	4805      	ldr	r0, [pc, #20]	; (8002b0c <MX_TIM2_Init+0x98>)
 8002af6:	f003 f883 	bl	8005c00 <HAL_TIMEx_MasterConfigSynchronization>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002b00:	f7ff ff08 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000520 	.word	0x20000520

08002b10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b20:	d113      	bne.n	8002b4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <HAL_TIM_Base_MspInit+0x44>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <HAL_TIM_Base_MspInit+0x44>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_TIM_Base_MspInit+0x44>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	201c      	movs	r0, #28
 8002b40:	f000 facf 	bl	80030e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b44:	201c      	movs	r0, #28
 8002b46:	f000 fae8 	bl	800311a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800

08002b58 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <MX_USART3_UART_Init+0x58>)
 8002b5e:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <MX_USART3_UART_Init+0x5c>)
 8002b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b62:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <MX_USART3_UART_Init+0x58>)
 8002b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <MX_USART3_UART_Init+0x58>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <MX_USART3_UART_Init+0x58>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <MX_USART3_UART_Init+0x58>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <MX_USART3_UART_Init+0x58>)
 8002b7e:	220c      	movs	r2, #12
 8002b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <MX_USART3_UART_Init+0x58>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <MX_USART3_UART_Init+0x58>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <MX_USART3_UART_Init+0x58>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <MX_USART3_UART_Init+0x58>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b9a:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <MX_USART3_UART_Init+0x58>)
 8002b9c:	f003 f8dc 	bl	8005d58 <HAL_UART_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ba6:	f7ff feb5 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	2000056c 	.word	0x2000056c
 8002bb4:	40004800 	.word	0x40004800

08002bb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b0aa      	sub	sp, #168	; 0xa8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	2284      	movs	r2, #132	; 0x84
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f004 fedf 	bl	800799c <memset>
  if(uartHandle->Instance==USART3)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <HAL_UART_MspInit+0xc4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d144      	bne.n	8002c72 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bf2:	f107 0310 	add.w	r3, r7, #16
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 fff6 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c02:	f7ff fe87 	bl	8002914 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_UART_MspInit+0xc8>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_UART_MspInit+0xc8>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_UART_MspInit+0xc8>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_UART_MspInit+0xc8>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <HAL_UART_MspInit+0xc8>)
 8002c24:	f043 0308 	orr.w	r3, r3, #8
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_UART_MspInit+0xc8>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c50:	2307      	movs	r3, #7
 8002c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4809      	ldr	r0, [pc, #36]	; (8002c84 <HAL_UART_MspInit+0xcc>)
 8002c5e:	f000 fb09 	bl	8003274 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	2027      	movs	r0, #39	; 0x27
 8002c68:	f000 fa3b 	bl	80030e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c6c:	2027      	movs	r0, #39	; 0x27
 8002c6e:	f000 fa54 	bl	800311a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c72:	bf00      	nop
 8002c74:	37a8      	adds	r7, #168	; 0xa8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40004800 	.word	0x40004800
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020c00 	.word	0x40020c00

08002c88 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c96:	2206      	movs	r2, #6
 8002c98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c9a:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ca8:	2202      	movs	r2, #2
 8002caa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002cca:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ccc:	f001 f919 	bl	8003f02 <HAL_PCD_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002cd6:	f7ff fe1d 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200005f4 	.word	0x200005f4

08002ce4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b0ac      	sub	sp, #176	; 0xb0
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cfc:	f107 0318 	add.w	r3, r7, #24
 8002d00:	2284      	movs	r2, #132	; 0x84
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 fe49 	bl	800799c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d12:	d159      	bne.n	8002dc8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002d14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d18:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d20:	f107 0318 	add.w	r3, r7, #24
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 ff5f 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002d30:	f7ff fdf0 	bl	8002914 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d34:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <HAL_PCD_MspInit+0xec>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <HAL_PCD_MspInit+0xec>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <HAL_PCD_MspInit+0xec>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d4c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d66:	230a      	movs	r3, #10
 8002d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d70:	4619      	mov	r1, r3
 8002d72:	4818      	ldr	r0, [pc, #96]	; (8002dd4 <HAL_PCD_MspInit+0xf0>)
 8002d74:	f000 fa7e 	bl	8003274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d90:	4619      	mov	r1, r3
 8002d92:	4810      	ldr	r0, [pc, #64]	; (8002dd4 <HAL_PCD_MspInit+0xf0>)
 8002d94:	f000 fa6e 	bl	8003274 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d98:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <HAL_PCD_MspInit+0xec>)
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <HAL_PCD_MspInit+0xec>)
 8002d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da2:	6353      	str	r3, [r2, #52]	; 0x34
 8002da4:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_PCD_MspInit+0xec>)
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_PCD_MspInit+0xec>)
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	4a06      	ldr	r2, [pc, #24]	; (8002dd0 <HAL_PCD_MspInit+0xec>)
 8002db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dba:	6453      	str	r3, [r2, #68]	; 0x44
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <HAL_PCD_MspInit+0xec>)
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002dc8:	bf00      	nop
 8002dca:	37b0      	adds	r7, #176	; 0xb0
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40020000 	.word	0x40020000

08002dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ddc:	480d      	ldr	r0, [pc, #52]	; (8002e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dde:	490e      	ldr	r1, [pc, #56]	; (8002e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002de0:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de4:	e002      	b.n	8002dec <LoopCopyDataInit>

08002de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dea:	3304      	adds	r3, #4

08002dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df0:	d3f9      	bcc.n	8002de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df2:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002df4:	4c0b      	ldr	r4, [pc, #44]	; (8002e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df8:	e001      	b.n	8002dfe <LoopFillZerobss>

08002dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dfc:	3204      	adds	r2, #4

08002dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e00:	d3fb      	bcc.n	8002dfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e02:	f7ff fe25 	bl	8002a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e06:	f004 fd7d 	bl	8007904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e0a:	f7ff fcf3 	bl	80027f4 <main>
  bx  lr    
 8002e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e18:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002e1c:	0800ca78 	.word	0x0800ca78
  ldr r2, =_sbss
 8002e20:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002e24:	20000b10 	.word	0x20000b10

08002e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e28:	e7fe      	b.n	8002e28 <ADC_IRQHandler>

08002e2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e2e:	2003      	movs	r0, #3
 8002e30:	f000 f94c 	bl	80030cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e34:	2000      	movs	r0, #0
 8002e36:	f000 f805 	bl	8002e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e3a:	f7ff fd71 	bl	8002920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_InitTick+0x54>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_InitTick+0x58>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f967 	bl	8003136 <HAL_SYSTICK_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00e      	b.n	8002e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d80a      	bhi.n	8002e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f000 f92f 	bl	80030e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e84:	4a06      	ldr	r2, [pc, #24]	; (8002ea0 <HAL_InitTick+0x5c>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000020 	.word	0x20000020
 8002e9c:	20000028 	.word	0x20000028
 8002ea0:	20000024 	.word	0x20000024

08002ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_IncTick+0x20>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_IncTick+0x24>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <HAL_IncTick+0x24>)
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000028 	.word	0x20000028
 8002ec8:	20000afc 	.word	0x20000afc

08002ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <HAL_GetTick+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000afc 	.word	0x20000afc

08002ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7ff ffee 	bl	8002ecc <HAL_GetTick>
 8002ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d005      	beq.n	8002f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <HAL_Delay+0x44>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f0a:	bf00      	nop
 8002f0c:	f7ff ffde 	bl	8002ecc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d8f7      	bhi.n	8002f0c <HAL_Delay+0x28>
  {
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000028 	.word	0x20000028

08002f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <__NVIC_SetPriorityGrouping+0x40>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x40>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00
 8002f70:	05fa0000 	.word	0x05fa0000

08002f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <__NVIC_GetPriorityGrouping+0x18>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 0307 	and.w	r3, r3, #7
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db0b      	blt.n	8002fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	f003 021f 	and.w	r2, r3, #31
 8002fa8:	4907      	ldr	r1, [pc, #28]	; (8002fc8 <__NVIC_EnableIRQ+0x38>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000e100 	.word	0xe000e100

08002fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	6039      	str	r1, [r7, #0]
 8002fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	db0a      	blt.n	8002ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	490c      	ldr	r1, [pc, #48]	; (8003018 <__NVIC_SetPriority+0x4c>)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	0112      	lsls	r2, r2, #4
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff4:	e00a      	b.n	800300c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4908      	ldr	r1, [pc, #32]	; (800301c <__NVIC_SetPriority+0x50>)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	3b04      	subs	r3, #4
 8003004:	0112      	lsls	r2, r2, #4
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	440b      	add	r3, r1
 800300a:	761a      	strb	r2, [r3, #24]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000e100 	.word	0xe000e100
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f1c3 0307 	rsb	r3, r3, #7
 800303a:	2b04      	cmp	r3, #4
 800303c:	bf28      	it	cs
 800303e:	2304      	movcs	r3, #4
 8003040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3304      	adds	r3, #4
 8003046:	2b06      	cmp	r3, #6
 8003048:	d902      	bls.n	8003050 <NVIC_EncodePriority+0x30>
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3b03      	subs	r3, #3
 800304e:	e000      	b.n	8003052 <NVIC_EncodePriority+0x32>
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	f04f 32ff 	mov.w	r2, #4294967295
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	401a      	ands	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003068:	f04f 31ff 	mov.w	r1, #4294967295
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	43d9      	mvns	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	4313      	orrs	r3, r2
         );
}
 800307a:	4618      	mov	r0, r3
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3b01      	subs	r3, #1
 8003094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003098:	d301      	bcc.n	800309e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800309a:	2301      	movs	r3, #1
 800309c:	e00f      	b.n	80030be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <SysTick_Config+0x40>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030a6:	210f      	movs	r1, #15
 80030a8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ac:	f7ff ff8e 	bl	8002fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <SysTick_Config+0x40>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <SysTick_Config+0x40>)
 80030b8:	2207      	movs	r2, #7
 80030ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	e000e010 	.word	0xe000e010

080030cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff ff29 	bl	8002f2c <__NVIC_SetPriorityGrouping>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f4:	f7ff ff3e 	bl	8002f74 <__NVIC_GetPriorityGrouping>
 80030f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	6978      	ldr	r0, [r7, #20]
 8003100:	f7ff ff8e 	bl	8003020 <NVIC_EncodePriority>
 8003104:	4602      	mov	r2, r0
 8003106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff5d 	bl	8002fcc <__NVIC_SetPriority>
}
 8003112:	bf00      	nop
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	4603      	mov	r3, r0
 8003122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff31 	bl	8002f90 <__NVIC_EnableIRQ>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ffa2 	bl	8003088 <SysTick_Config>
 8003144:	4603      	mov	r3, r0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800315c:	f7ff feb6 	bl	8002ecc <HAL_GetTick>
 8003160:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d008      	beq.n	8003180 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e052      	b.n	8003226 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0216 	bic.w	r2, r2, #22
 800318e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <HAL_DMA_Abort+0x62>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0208 	bic.w	r2, r2, #8
 80031be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d0:	e013      	b.n	80031fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d2:	f7ff fe7b 	bl	8002ecc <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d90c      	bls.n	80031fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2203      	movs	r2, #3
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e015      	b.n	8003226 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e4      	bne.n	80031d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	223f      	movs	r2, #63	; 0x3f
 800320e:	409a      	lsls	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d004      	beq.n	800324c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2280      	movs	r2, #128	; 0x80
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e00c      	b.n	8003266 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2205      	movs	r2, #5
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	e175      	b.n	8003580 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003294:	2201      	movs	r2, #1
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	f040 8164 	bne.w	800357a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d005      	beq.n	80032ca <HAL_GPIO_Init+0x56>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d130      	bne.n	800332c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003300:	2201      	movs	r2, #1
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 0201 	and.w	r2, r3, #1
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b03      	cmp	r3, #3
 8003336:	d017      	beq.n	8003368 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d123      	bne.n	80033bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	08da      	lsrs	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3208      	adds	r2, #8
 800337c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	220f      	movs	r2, #15
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	08da      	lsrs	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3208      	adds	r2, #8
 80033b6:	69b9      	ldr	r1, [r7, #24]
 80033b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	2203      	movs	r2, #3
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0203 	and.w	r2, r3, #3
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80be 	beq.w	800357a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fe:	4b66      	ldr	r3, [pc, #408]	; (8003598 <HAL_GPIO_Init+0x324>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	4a65      	ldr	r2, [pc, #404]	; (8003598 <HAL_GPIO_Init+0x324>)
 8003404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003408:	6453      	str	r3, [r2, #68]	; 0x44
 800340a:	4b63      	ldr	r3, [pc, #396]	; (8003598 <HAL_GPIO_Init+0x324>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003416:	4a61      	ldr	r2, [pc, #388]	; (800359c <HAL_GPIO_Init+0x328>)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	3302      	adds	r3, #2
 800341e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	220f      	movs	r2, #15
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a58      	ldr	r2, [pc, #352]	; (80035a0 <HAL_GPIO_Init+0x32c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d037      	beq.n	80034b2 <HAL_GPIO_Init+0x23e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a57      	ldr	r2, [pc, #348]	; (80035a4 <HAL_GPIO_Init+0x330>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d031      	beq.n	80034ae <HAL_GPIO_Init+0x23a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a56      	ldr	r2, [pc, #344]	; (80035a8 <HAL_GPIO_Init+0x334>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d02b      	beq.n	80034aa <HAL_GPIO_Init+0x236>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a55      	ldr	r2, [pc, #340]	; (80035ac <HAL_GPIO_Init+0x338>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d025      	beq.n	80034a6 <HAL_GPIO_Init+0x232>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a54      	ldr	r2, [pc, #336]	; (80035b0 <HAL_GPIO_Init+0x33c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01f      	beq.n	80034a2 <HAL_GPIO_Init+0x22e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a53      	ldr	r2, [pc, #332]	; (80035b4 <HAL_GPIO_Init+0x340>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d019      	beq.n	800349e <HAL_GPIO_Init+0x22a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a52      	ldr	r2, [pc, #328]	; (80035b8 <HAL_GPIO_Init+0x344>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_GPIO_Init+0x226>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a51      	ldr	r2, [pc, #324]	; (80035bc <HAL_GPIO_Init+0x348>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00d      	beq.n	8003496 <HAL_GPIO_Init+0x222>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a50      	ldr	r2, [pc, #320]	; (80035c0 <HAL_GPIO_Init+0x34c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <HAL_GPIO_Init+0x21e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4f      	ldr	r2, [pc, #316]	; (80035c4 <HAL_GPIO_Init+0x350>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_GPIO_Init+0x21a>
 800348a:	2309      	movs	r3, #9
 800348c:	e012      	b.n	80034b4 <HAL_GPIO_Init+0x240>
 800348e:	230a      	movs	r3, #10
 8003490:	e010      	b.n	80034b4 <HAL_GPIO_Init+0x240>
 8003492:	2308      	movs	r3, #8
 8003494:	e00e      	b.n	80034b4 <HAL_GPIO_Init+0x240>
 8003496:	2307      	movs	r3, #7
 8003498:	e00c      	b.n	80034b4 <HAL_GPIO_Init+0x240>
 800349a:	2306      	movs	r3, #6
 800349c:	e00a      	b.n	80034b4 <HAL_GPIO_Init+0x240>
 800349e:	2305      	movs	r3, #5
 80034a0:	e008      	b.n	80034b4 <HAL_GPIO_Init+0x240>
 80034a2:	2304      	movs	r3, #4
 80034a4:	e006      	b.n	80034b4 <HAL_GPIO_Init+0x240>
 80034a6:	2303      	movs	r3, #3
 80034a8:	e004      	b.n	80034b4 <HAL_GPIO_Init+0x240>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e002      	b.n	80034b4 <HAL_GPIO_Init+0x240>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_GPIO_Init+0x240>
 80034b2:	2300      	movs	r3, #0
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	f002 0203 	and.w	r2, r2, #3
 80034ba:	0092      	lsls	r2, r2, #2
 80034bc:	4093      	lsls	r3, r2
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034c4:	4935      	ldr	r1, [pc, #212]	; (800359c <HAL_GPIO_Init+0x328>)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	3302      	adds	r3, #2
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d2:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <HAL_GPIO_Init+0x354>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034f6:	4a34      	ldr	r2, [pc, #208]	; (80035c8 <HAL_GPIO_Init+0x354>)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034fc:	4b32      	ldr	r3, [pc, #200]	; (80035c8 <HAL_GPIO_Init+0x354>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003520:	4a29      	ldr	r2, [pc, #164]	; (80035c8 <HAL_GPIO_Init+0x354>)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003526:	4b28      	ldr	r3, [pc, #160]	; (80035c8 <HAL_GPIO_Init+0x354>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800354a:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <HAL_GPIO_Init+0x354>)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003550:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <HAL_GPIO_Init+0x354>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <HAL_GPIO_Init+0x354>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3301      	adds	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	f67f ae86 	bls.w	8003294 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	3724      	adds	r7, #36	; 0x24
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800
 800359c:	40013800 	.word	0x40013800
 80035a0:	40020000 	.word	0x40020000
 80035a4:	40020400 	.word	0x40020400
 80035a8:	40020800 	.word	0x40020800
 80035ac:	40020c00 	.word	0x40020c00
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40021400 	.word	0x40021400
 80035b8:	40021800 	.word	0x40021800
 80035bc:	40021c00 	.word	0x40021c00
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40022400 	.word	0x40022400
 80035c8:	40013c00 	.word	0x40013c00

080035cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
 80035d8:	4613      	mov	r3, r2
 80035da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035dc:	787b      	ldrb	r3, [r7, #1]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80035e8:	e003      	b.n	80035f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	041a      	lsls	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	619a      	str	r2, [r3, #24]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e07f      	b.n	8003712 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff f858 	bl	80026dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2224      	movs	r2, #36	; 0x24
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003650:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003660:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	e006      	b.n	8003688 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003686:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d104      	bne.n	800369a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003698:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_I2C_Init+0x11c>)
 80036a6:	430b      	orrs	r3, r1
 80036a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69d9      	ldr	r1, [r3, #28]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1a      	ldr	r2, [r3, #32]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	02008000 	.word	0x02008000

08003720 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	4608      	mov	r0, r1
 800372a:	4611      	mov	r1, r2
 800372c:	461a      	mov	r2, r3
 800372e:	4603      	mov	r3, r0
 8003730:	817b      	strh	r3, [r7, #10]
 8003732:	460b      	mov	r3, r1
 8003734:	813b      	strh	r3, [r7, #8]
 8003736:	4613      	mov	r3, r2
 8003738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b20      	cmp	r3, #32
 8003744:	f040 80f9 	bne.w	800393a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_I2C_Mem_Write+0x34>
 800374e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0ed      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_I2C_Mem_Write+0x4e>
 800376a:	2302      	movs	r3, #2
 800376c:	e0e6      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003776:	f7ff fba9 	bl	8002ecc <HAL_GetTick>
 800377a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	2319      	movs	r3, #25
 8003782:	2201      	movs	r2, #1
 8003784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f955 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0d1      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2221      	movs	r2, #33	; 0x21
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a3a      	ldr	r2, [r7, #32]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037c0:	88f8      	ldrh	r0, [r7, #6]
 80037c2:	893a      	ldrh	r2, [r7, #8]
 80037c4:	8979      	ldrh	r1, [r7, #10]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4603      	mov	r3, r0
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f8b9 	bl	8003948 <I2C_RequestMemoryWrite>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0a9      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2bff      	cmp	r3, #255	; 0xff
 80037f0:	d90e      	bls.n	8003810 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	22ff      	movs	r2, #255	; 0xff
 80037f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	8979      	ldrh	r1, [r7, #10]
 8003800:	2300      	movs	r3, #0
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fab1 	bl	8003d70 <I2C_TransferConfig>
 800380e:	e00f      	b.n	8003830 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	b2da      	uxtb	r2, r3
 8003820:	8979      	ldrh	r1, [r7, #10]
 8003822:	2300      	movs	r3, #0
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 faa0 	bl	8003d70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f93f 	bl	8003ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e07b      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d034      	beq.n	80038e8 <HAL_I2C_Mem_Write+0x1c8>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d130      	bne.n	80038e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	2200      	movs	r2, #0
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f8d1 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e04d      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2bff      	cmp	r3, #255	; 0xff
 80038a8:	d90e      	bls.n	80038c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	22ff      	movs	r2, #255	; 0xff
 80038ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	8979      	ldrh	r1, [r7, #10]
 80038b8:	2300      	movs	r3, #0
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fa55 	bl	8003d70 <I2C_TransferConfig>
 80038c6:	e00f      	b.n	80038e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	8979      	ldrh	r1, [r7, #10]
 80038da:	2300      	movs	r3, #0
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fa44 	bl	8003d70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d19e      	bne.n	8003830 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f91e 	bl	8003b38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e01a      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2220      	movs	r2, #32
 800390c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_I2C_Mem_Write+0x224>)
 800391a:	400b      	ands	r3, r1
 800391c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800393a:	2302      	movs	r3, #2
  }
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	fe00e800 	.word	0xfe00e800

08003948 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	461a      	mov	r2, r3
 8003956:	4603      	mov	r3, r0
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	460b      	mov	r3, r1
 800395c:	813b      	strh	r3, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	8979      	ldrh	r1, [r7, #10]
 8003968:	4b20      	ldr	r3, [pc, #128]	; (80039ec <I2C_RequestMemoryWrite+0xa4>)
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f9fd 	bl	8003d70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	69b9      	ldr	r1, [r7, #24]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f89c 	bl	8003ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e02c      	b.n	80039e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003990:	893b      	ldrh	r3, [r7, #8]
 8003992:	b2da      	uxtb	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	629a      	str	r2, [r3, #40]	; 0x28
 800399a:	e015      	b.n	80039c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800399c:	893b      	ldrh	r3, [r7, #8]
 800399e:	0a1b      	lsrs	r3, r3, #8
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	69b9      	ldr	r1, [r7, #24]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f882 	bl	8003ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e012      	b.n	80039e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039be:	893b      	ldrh	r3, [r7, #8]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2200      	movs	r2, #0
 80039d0:	2180      	movs	r1, #128	; 0x80
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f830 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	80002000 	.word	0x80002000

080039f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d103      	bne.n	8003a0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d007      	beq.n	8003a2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	619a      	str	r2, [r3, #24]
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a48:	e022      	b.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d01e      	beq.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a52:	f7ff fa3b 	bl	8002ecc <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d302      	bcc.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d113      	bne.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e00f      	b.n	8003ab0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d0cd      	beq.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ac4:	e02c      	b.n	8003b20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f870 	bl	8003bb0 <I2C_IsErrorOccurred>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e02a      	b.n	8003b30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d01e      	beq.n	8003b20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae2:	f7ff f9f3 	bl	8002ecc <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d113      	bne.n	8003b20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e007      	b.n	8003b30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d1cb      	bne.n	8003ac6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b44:	e028      	b.n	8003b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f830 	bl	8003bb0 <I2C_IsErrorOccurred>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e026      	b.n	8003ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7ff f9b7 	bl	8002ecc <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d113      	bne.n	8003b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e007      	b.n	8003ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d1cf      	bne.n	8003b46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d068      	beq.n	8003cae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2210      	movs	r2, #16
 8003be2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003be4:	e049      	b.n	8003c7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d045      	beq.n	8003c7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bee:	f7ff f96d 	bl	8002ecc <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <I2C_IsErrorOccurred+0x54>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d13a      	bne.n	8003c7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c26:	d121      	bne.n	8003c6c <I2C_IsErrorOccurred+0xbc>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c2e:	d01d      	beq.n	8003c6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d01a      	beq.n	8003c6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c46:	f7ff f941 	bl	8002ecc <HAL_GetTick>
 8003c4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c4c:	e00e      	b.n	8003c6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c4e:	f7ff f93d 	bl	8002ecc <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b19      	cmp	r3, #25
 8003c5a:	d907      	bls.n	8003c6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	f043 0320 	orr.w	r3, r3, #32
 8003c62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003c6a:	e006      	b.n	8003c7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d1e9      	bne.n	8003c4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d003      	beq.n	8003c90 <I2C_IsErrorOccurred+0xe0>
 8003c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0aa      	beq.n	8003be6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d103      	bne.n	8003ca0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	f043 0304 	orr.w	r3, r3, #4
 8003ca6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f043 0308 	orr.w	r3, r3, #8
 8003ce8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00b      	beq.n	8003d1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	f043 0302 	orr.w	r3, r3, #2
 8003d0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01c      	beq.n	8003d5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff fe63 	bl	80039f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <I2C_IsErrorOccurred+0x1bc>)
 8003d36:	400b      	ands	r3, r1
 8003d38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3728      	adds	r7, #40	; 0x28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	fe00e800 	.word	0xfe00e800

08003d70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	817b      	strh	r3, [r7, #10]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d82:	897b      	ldrh	r3, [r7, #10]
 8003d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d88:	7a7b      	ldrb	r3, [r7, #9]
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	0d5b      	lsrs	r3, r3, #21
 8003daa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <I2C_TransferConfig+0x60>)
 8003db0:	430b      	orrs	r3, r1
 8003db2:	43db      	mvns	r3, r3
 8003db4:	ea02 0103 	and.w	r1, r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	03ff63ff 	.word	0x03ff63ff

08003dd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d138      	bne.n	8003e5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e032      	b.n	8003e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b085      	sub	sp, #20
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d139      	bne.n	8003ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e033      	b.n	8003ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2224      	movs	r2, #36	; 0x24
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ebc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f04:	b08f      	sub	sp, #60	; 0x3c
 8003f06:	af0a      	add	r7, sp, #40	; 0x28
 8003f08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e116      	b.n	8004142 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fe fed8 	bl	8002ce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2203      	movs	r2, #3
 8003f38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f003 fa34 	bl	80073c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	687e      	ldr	r6, [r7, #4]
 8003f60:	466d      	mov	r5, sp
 8003f62:	f106 0410 	add.w	r4, r6, #16
 8003f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f72:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f76:	1d33      	adds	r3, r6, #4
 8003f78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f7a:	6838      	ldr	r0, [r7, #0]
 8003f7c:	f003 f9c8 	bl	8007310 <USB_CoreInit>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e0d7      	b.n	8004142 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f003 fa22 	bl	80073e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	e04a      	b.n	800403a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	333d      	adds	r3, #61	; 0x3d
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	333c      	adds	r3, #60	; 0x3c
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	b298      	uxth	r0, r3
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3344      	adds	r3, #68	; 0x44
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3340      	adds	r3, #64	; 0x40
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	3348      	adds	r3, #72	; 0x48
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800400c:	7bfa      	ldrb	r2, [r7, #15]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	334c      	adds	r3, #76	; 0x4c
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	3354      	adds	r3, #84	; 0x54
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	3301      	adds	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d3af      	bcc.n	8003fa4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004044:	2300      	movs	r3, #0
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	e044      	b.n	80040d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004060:	7bfa      	ldrb	r2, [r7, #15]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004072:	7bfa      	ldrb	r2, [r7, #15]
 8004074:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800408c:	7bfa      	ldrb	r2, [r7, #15]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040b8:	7bfa      	ldrb	r2, [r7, #15]
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	3301      	adds	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
 80040d4:	7bfa      	ldrb	r2, [r7, #15]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d3b5      	bcc.n	800404a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	687e      	ldr	r6, [r7, #4]
 80040e6:	466d      	mov	r5, sp
 80040e8:	f106 0410 	add.w	r4, r6, #16
 80040ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80040fc:	1d33      	adds	r3, r6, #4
 80040fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004100:	6838      	ldr	r0, [r7, #0]
 8004102:	f003 f9bb 	bl	800747c <USB_DevInit>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e014      	b.n	8004142 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	2b01      	cmp	r3, #1
 800412e:	d102      	bne.n	8004136 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f80b 	bl	800414c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f003 fb79 	bl	8007832 <USB_DevDisconnect>

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800414c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_PCDEx_ActivateLPM+0x44>)
 800417c:	4313      	orrs	r3, r2
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	10000003 	.word	0x10000003

08004194 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800419e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40007000 	.word	0x40007000

080041b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80041be:	4b23      	ldr	r3, [pc, #140]	; (800424c <HAL_PWREx_EnableOverDrive+0x98>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	4a22      	ldr	r2, [pc, #136]	; (800424c <HAL_PWREx_EnableOverDrive+0x98>)
 80041c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ca:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_PWREx_EnableOverDrive+0x98>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041e2:	f7fe fe73 	bl	8002ecc <HAL_GetTick>
 80041e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041e8:	e009      	b.n	80041fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041ea:	f7fe fe6f 	bl	8002ecc <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041f8:	d901      	bls.n	80041fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e022      	b.n	8004244 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041fe:	4b14      	ldr	r3, [pc, #80]	; (8004250 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420a:	d1ee      	bne.n	80041ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800420c:	4b10      	ldr	r3, [pc, #64]	; (8004250 <HAL_PWREx_EnableOverDrive+0x9c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0f      	ldr	r2, [pc, #60]	; (8004250 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004216:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004218:	f7fe fe58 	bl	8002ecc <HAL_GetTick>
 800421c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800421e:	e009      	b.n	8004234 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004220:	f7fe fe54 	bl	8002ecc <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800422e:	d901      	bls.n	8004234 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e007      	b.n	8004244 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004240:	d1ee      	bne.n	8004220 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	40007000 	.word	0x40007000

08004254 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800425c:	2300      	movs	r3, #0
 800425e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e291      	b.n	800478e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8087 	beq.w	8004386 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004278:	4b96      	ldr	r3, [pc, #600]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b04      	cmp	r3, #4
 8004282:	d00c      	beq.n	800429e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004284:	4b93      	ldr	r3, [pc, #588]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b08      	cmp	r3, #8
 800428e:	d112      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62>
 8004290:	4b90      	ldr	r3, [pc, #576]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429c:	d10b      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429e:	4b8d      	ldr	r3, [pc, #564]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d06c      	beq.n	8004384 <HAL_RCC_OscConfig+0x130>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d168      	bne.n	8004384 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e26b      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042be:	d106      	bne.n	80042ce <HAL_RCC_OscConfig+0x7a>
 80042c0:	4b84      	ldr	r3, [pc, #528]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a83      	ldr	r2, [pc, #524]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	e02e      	b.n	800432c <HAL_RCC_OscConfig+0xd8>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x9c>
 80042d6:	4b7f      	ldr	r3, [pc, #508]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7e      	ldr	r2, [pc, #504]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b7c      	ldr	r3, [pc, #496]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a7b      	ldr	r2, [pc, #492]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e01d      	b.n	800432c <HAL_RCC_OscConfig+0xd8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0xc0>
 80042fa:	4b76      	ldr	r3, [pc, #472]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a75      	ldr	r2, [pc, #468]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b73      	ldr	r3, [pc, #460]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a72      	ldr	r2, [pc, #456]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0xd8>
 8004314:	4b6f      	ldr	r3, [pc, #444]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a6e      	ldr	r2, [pc, #440]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800431a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b6c      	ldr	r3, [pc, #432]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6b      	ldr	r2, [pc, #428]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fe fdca 	bl	8002ecc <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fe fdc6 	bl	8002ecc <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	; 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e21f      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0xe8>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fe fdb6 	bl	8002ecc <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004364:	f7fe fdb2 	bl	8002ecc <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e20b      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	4b57      	ldr	r3, [pc, #348]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x110>
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d069      	beq.n	8004466 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004392:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800439e:	4b4d      	ldr	r3, [pc, #308]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d11c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x190>
 80043aa:	4b4a      	ldr	r3, [pc, #296]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d116      	bne.n	80043e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	4b47      	ldr	r3, [pc, #284]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_RCC_OscConfig+0x17a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e1df      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ce:	4b41      	ldr	r3, [pc, #260]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	493d      	ldr	r1, [pc, #244]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	e040      	b.n	8004466 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d023      	beq.n	8004434 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ec:	4b39      	ldr	r3, [pc, #228]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a38      	ldr	r2, [pc, #224]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fe fd68 	bl	8002ecc <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004400:	f7fe fd64 	bl	8002ecc <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e1bd      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004412:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441e:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4929      	ldr	r1, [pc, #164]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]
 8004432:	e018      	b.n	8004466 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a26      	ldr	r2, [pc, #152]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fe fd44 	bl	8002ecc <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004448:	f7fe fd40 	bl	8002ecc <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e199      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d038      	beq.n	80044e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d019      	beq.n	80044ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b16      	ldr	r3, [pc, #88]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800447c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447e:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004486:	f7fe fd21 	bl	8002ecc <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448e:	f7fe fd1d 	bl	8002ecc <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e176      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80044a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x23a>
 80044ac:	e01a      	b.n	80044e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80044b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b2:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fe fd07 	bl	8002ecc <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c2:	f7fe fd03 	bl	8002ecc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d903      	bls.n	80044d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e15c      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
 80044d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d8:	4b91      	ldr	r3, [pc, #580]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1ee      	bne.n	80044c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80a4 	beq.w	800463a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f2:	4b8b      	ldr	r3, [pc, #556]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fe:	4b88      	ldr	r3, [pc, #544]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	4a87      	ldr	r2, [pc, #540]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004508:	6413      	str	r3, [r2, #64]	; 0x40
 800450a:	4b85      	ldr	r3, [pc, #532]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004516:	2301      	movs	r3, #1
 8004518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451a:	4b82      	ldr	r3, [pc, #520]	; (8004724 <HAL_RCC_OscConfig+0x4d0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d118      	bne.n	8004558 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004526:	4b7f      	ldr	r3, [pc, #508]	; (8004724 <HAL_RCC_OscConfig+0x4d0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a7e      	ldr	r2, [pc, #504]	; (8004724 <HAL_RCC_OscConfig+0x4d0>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004532:	f7fe fccb 	bl	8002ecc <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fe fcc7 	bl	8002ecc <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b64      	cmp	r3, #100	; 0x64
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e120      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800454c:	4b75      	ldr	r3, [pc, #468]	; (8004724 <HAL_RCC_OscConfig+0x4d0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d106      	bne.n	800456e <HAL_RCC_OscConfig+0x31a>
 8004560:	4b6f      	ldr	r3, [pc, #444]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	4a6e      	ldr	r2, [pc, #440]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6713      	str	r3, [r2, #112]	; 0x70
 800456c:	e02d      	b.n	80045ca <HAL_RCC_OscConfig+0x376>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10c      	bne.n	8004590 <HAL_RCC_OscConfig+0x33c>
 8004576:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	4a69      	ldr	r2, [pc, #420]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	6713      	str	r3, [r2, #112]	; 0x70
 8004582:	4b67      	ldr	r3, [pc, #412]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a66      	ldr	r2, [pc, #408]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004588:	f023 0304 	bic.w	r3, r3, #4
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
 800458e:	e01c      	b.n	80045ca <HAL_RCC_OscConfig+0x376>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b05      	cmp	r3, #5
 8004596:	d10c      	bne.n	80045b2 <HAL_RCC_OscConfig+0x35e>
 8004598:	4b61      	ldr	r3, [pc, #388]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a60      	ldr	r2, [pc, #384]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 800459e:	f043 0304 	orr.w	r3, r3, #4
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	4b5e      	ldr	r3, [pc, #376]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	4a5d      	ldr	r2, [pc, #372]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6713      	str	r3, [r2, #112]	; 0x70
 80045b0:	e00b      	b.n	80045ca <HAL_RCC_OscConfig+0x376>
 80045b2:	4b5b      	ldr	r3, [pc, #364]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a5a      	ldr	r2, [pc, #360]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
 80045be:	4b58      	ldr	r3, [pc, #352]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	4a57      	ldr	r2, [pc, #348]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d015      	beq.n	80045fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d2:	f7fe fc7b 	bl	8002ecc <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d8:	e00a      	b.n	80045f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f7fe fc77 	bl	8002ecc <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e0ce      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f0:	4b4b      	ldr	r3, [pc, #300]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ee      	beq.n	80045da <HAL_RCC_OscConfig+0x386>
 80045fc:	e014      	b.n	8004628 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fe:	f7fe fc65 	bl	8002ecc <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004604:	e00a      	b.n	800461c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004606:	f7fe fc61 	bl	8002ecc <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	f241 3288 	movw	r2, #5000	; 0x1388
 8004614:	4293      	cmp	r3, r2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e0b8      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461c:	4b40      	ldr	r3, [pc, #256]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1ee      	bne.n	8004606 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d105      	bne.n	800463a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462e:	4b3c      	ldr	r3, [pc, #240]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	4a3b      	ldr	r2, [pc, #236]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004638:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80a4 	beq.w	800478c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004644:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b08      	cmp	r3, #8
 800464e:	d06b      	beq.n	8004728 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d149      	bne.n	80046ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004658:	4b31      	ldr	r3, [pc, #196]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a30      	ldr	r2, [pc, #192]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 800465e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fe fc32 	bl	8002ecc <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466c:	f7fe fc2e 	bl	8002ecc <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e087      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	4b28      	ldr	r3, [pc, #160]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	019b      	lsls	r3, r3, #6
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	085b      	lsrs	r3, r3, #1
 80046a2:	3b01      	subs	r3, #1
 80046a4:	041b      	lsls	r3, r3, #16
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	061b      	lsls	r3, r3, #24
 80046ae:	4313      	orrs	r3, r2
 80046b0:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80046b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b8:	4b19      	ldr	r3, [pc, #100]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a18      	ldr	r2, [pc, #96]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80046be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fe fc02 	bl	8002ecc <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fe fbfe 	bl	8002ecc <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e057      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x478>
 80046ea:	e04f      	b.n	800478c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0b      	ldr	r2, [pc, #44]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 80046f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fe fbe8 	bl	8002ecc <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004700:	f7fe fbe4 	bl	8002ecc <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e03d      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b03      	ldr	r3, [pc, #12]	; (8004720 <HAL_RCC_OscConfig+0x4cc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x4ac>
 800471e:	e035      	b.n	800478c <HAL_RCC_OscConfig+0x538>
 8004720:	40023800 	.word	0x40023800
 8004724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004728:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <HAL_RCC_OscConfig+0x544>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d028      	beq.n	8004788 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d121      	bne.n	8004788 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d11a      	bne.n	8004788 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004758:	4013      	ands	r3, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800475e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004760:	4293      	cmp	r3, r2
 8004762:	d111      	bne.n	8004788 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	3b01      	subs	r3, #1
 8004772:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d107      	bne.n	8004788 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800

0800479c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0d0      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b4:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d910      	bls.n	80047e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b67      	ldr	r3, [pc, #412]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 020f 	bic.w	r2, r3, #15
 80047ca:	4965      	ldr	r1, [pc, #404]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b63      	ldr	r3, [pc, #396]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0b8      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d020      	beq.n	8004832 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047fc:	4b59      	ldr	r3, [pc, #356]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4a58      	ldr	r2, [pc, #352]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 8004802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004806:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004814:	4b53      	ldr	r3, [pc, #332]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4a52      	ldr	r2, [pc, #328]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 800481a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800481e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004820:	4b50      	ldr	r3, [pc, #320]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	494d      	ldr	r1, [pc, #308]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d040      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	4b47      	ldr	r3, [pc, #284]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d115      	bne.n	800487e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e07f      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485e:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e073      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486e:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06b      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487e:	4b39      	ldr	r3, [pc, #228]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4936      	ldr	r1, [pc, #216]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 800488c:	4313      	orrs	r3, r2
 800488e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004890:	f7fe fb1c 	bl	8002ecc <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	e00a      	b.n	80048ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004898:	f7fe fb18 	bl	8002ecc <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e053      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 020c 	and.w	r2, r3, #12
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	429a      	cmp	r2, r3
 80048be:	d1eb      	bne.n	8004898 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d210      	bcs.n	80048f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 020f 	bic.w	r2, r3, #15
 80048d6:	4922      	ldr	r1, [pc, #136]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e032      	b.n	8004956 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4916      	ldr	r1, [pc, #88]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	490e      	ldr	r1, [pc, #56]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800492e:	f000 f821 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8004932:	4602      	mov	r2, r0
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	490a      	ldr	r1, [pc, #40]	; (8004968 <HAL_RCC_ClockConfig+0x1cc>)
 8004940:	5ccb      	ldrb	r3, [r1, r3]
 8004942:	fa22 f303 	lsr.w	r3, r2, r3
 8004946:	4a09      	ldr	r2, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1d0>)
 8004948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1d4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe fa78 	bl	8002e44 <HAL_InitTick>

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40023c00 	.word	0x40023c00
 8004964:	40023800 	.word	0x40023800
 8004968:	0800c840 	.word	0x0800c840
 800496c:	20000020 	.word	0x20000020
 8004970:	20000024 	.word	0x20000024

08004974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004978:	b094      	sub	sp, #80	; 0x50
 800497a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	647b      	str	r3, [r7, #68]	; 0x44
 8004980:	2300      	movs	r3, #0
 8004982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004984:	2300      	movs	r3, #0
 8004986:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800498c:	4b79      	ldr	r3, [pc, #484]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x200>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b08      	cmp	r3, #8
 8004996:	d00d      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004998:	2b08      	cmp	r3, #8
 800499a:	f200 80e1 	bhi.w	8004b60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x34>
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d003      	beq.n	80049ae <HAL_RCC_GetSysClockFreq+0x3a>
 80049a6:	e0db      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a8:	4b73      	ldr	r3, [pc, #460]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x204>)
 80049aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ac:	e0db      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ae:	4b73      	ldr	r3, [pc, #460]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x208>)
 80049b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049b2:	e0d8      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b4:	4b6f      	ldr	r3, [pc, #444]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049bc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049be:	4b6d      	ldr	r3, [pc, #436]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d063      	beq.n	8004a92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ca:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	099b      	lsrs	r3, r3, #6
 80049d0:	2200      	movs	r2, #0
 80049d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049dc:	633b      	str	r3, [r7, #48]	; 0x30
 80049de:	2300      	movs	r3, #0
 80049e0:	637b      	str	r3, [r7, #52]	; 0x34
 80049e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049e6:	4622      	mov	r2, r4
 80049e8:	462b      	mov	r3, r5
 80049ea:	f04f 0000 	mov.w	r0, #0
 80049ee:	f04f 0100 	mov.w	r1, #0
 80049f2:	0159      	lsls	r1, r3, #5
 80049f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f8:	0150      	lsls	r0, r2, #5
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4621      	mov	r1, r4
 8004a00:	1a51      	subs	r1, r2, r1
 8004a02:	6139      	str	r1, [r7, #16]
 8004a04:	4629      	mov	r1, r5
 8004a06:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a18:	4659      	mov	r1, fp
 8004a1a:	018b      	lsls	r3, r1, #6
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a22:	4651      	mov	r1, sl
 8004a24:	018a      	lsls	r2, r1, #6
 8004a26:	4651      	mov	r1, sl
 8004a28:	ebb2 0801 	subs.w	r8, r2, r1
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a46:	4690      	mov	r8, r2
 8004a48:	4699      	mov	r9, r3
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	eb18 0303 	adds.w	r3, r8, r3
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	462b      	mov	r3, r5
 8004a54:	eb49 0303 	adc.w	r3, r9, r3
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a66:	4629      	mov	r1, r5
 8004a68:	024b      	lsls	r3, r1, #9
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a70:	4621      	mov	r1, r4
 8004a72:	024a      	lsls	r2, r1, #9
 8004a74:	4610      	mov	r0, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a84:	f7fc f8ea 	bl	8000c5c <__aeabi_uldivmod>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a90:	e058      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a92:	4b38      	ldr	r3, [pc, #224]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	2200      	movs	r2, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aa2:	623b      	str	r3, [r7, #32]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004aac:	4642      	mov	r2, r8
 8004aae:	464b      	mov	r3, r9
 8004ab0:	f04f 0000 	mov.w	r0, #0
 8004ab4:	f04f 0100 	mov.w	r1, #0
 8004ab8:	0159      	lsls	r1, r3, #5
 8004aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004abe:	0150      	lsls	r0, r2, #5
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4641      	mov	r1, r8
 8004ac6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aca:	4649      	mov	r1, r9
 8004acc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004adc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ae4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ae8:	eb63 050b 	sbc.w	r5, r3, fp
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	00eb      	lsls	r3, r5, #3
 8004af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004afa:	00e2      	lsls	r2, r4, #3
 8004afc:	4614      	mov	r4, r2
 8004afe:	461d      	mov	r5, r3
 8004b00:	4643      	mov	r3, r8
 8004b02:	18e3      	adds	r3, r4, r3
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	464b      	mov	r3, r9
 8004b08:	eb45 0303 	adc.w	r3, r5, r3
 8004b0c:	607b      	str	r3, [r7, #4]
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	028b      	lsls	r3, r1, #10
 8004b1e:	4621      	mov	r1, r4
 8004b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b24:	4621      	mov	r1, r4
 8004b26:	028a      	lsls	r2, r1, #10
 8004b28:	4610      	mov	r0, r2
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2e:	2200      	movs	r2, #0
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	61fa      	str	r2, [r7, #28]
 8004b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b38:	f7fc f890 	bl	8000c5c <__aeabi_uldivmod>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4613      	mov	r3, r2
 8004b42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	0c1b      	lsrs	r3, r3, #16
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004b54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b5e:	e002      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3750      	adds	r7, #80	; 0x50
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b72:	bf00      	nop
 8004b74:	40023800 	.word	0x40023800
 8004b78:	00f42400 	.word	0x00f42400
 8004b7c:	007a1200 	.word	0x007a1200

08004b80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b84:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b86:	681b      	ldr	r3, [r3, #0]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000020 	.word	0x20000020

08004b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b9c:	f7ff fff0 	bl	8004b80 <HAL_RCC_GetHCLKFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	0a9b      	lsrs	r3, r3, #10
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	4903      	ldr	r1, [pc, #12]	; (8004bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	0800c850 	.word	0x0800c850

08004bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bc4:	f7ff ffdc 	bl	8004b80 <HAL_RCC_GetHCLKFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	0b5b      	lsrs	r3, r3, #13
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	4903      	ldr	r1, [pc, #12]	; (8004be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40023800 	.word	0x40023800
 8004be4:	0800c850 	.word	0x0800c850

08004be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d012      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c10:	4b69      	ldr	r3, [pc, #420]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4a68      	ldr	r2, [pc, #416]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c1a:	6093      	str	r3, [r2, #8]
 8004c1c:	4b66      	ldr	r3, [pc, #408]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c24:	4964      	ldr	r1, [pc, #400]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c32:	2301      	movs	r3, #1
 8004c34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d017      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c42:	4b5d      	ldr	r3, [pc, #372]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c50:	4959      	ldr	r1, [pc, #356]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c60:	d101      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c62:	2301      	movs	r3, #1
 8004c64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d017      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c7e:	4b4e      	ldr	r3, [pc, #312]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	494a      	ldr	r1, [pc, #296]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004caa:	2301      	movs	r3, #1
 8004cac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 808b 	beq.w	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ccc:	4b3a      	ldr	r3, [pc, #232]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	4a39      	ldr	r2, [pc, #228]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd8:	4b37      	ldr	r3, [pc, #220]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ce4:	4b35      	ldr	r3, [pc, #212]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a34      	ldr	r2, [pc, #208]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf0:	f7fe f8ec 	bl	8002ecc <HAL_GetTick>
 8004cf4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf8:	f7fe f8e8 	bl	8002ecc <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	; 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e357      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d0a:	4b2c      	ldr	r3, [pc, #176]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d16:	4b28      	ldr	r3, [pc, #160]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d035      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d02e      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d34:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d3e:	4b1e      	ldr	r3, [pc, #120]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	4a1d      	ldr	r2, [pc, #116]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d56:	4a18      	ldr	r2, [pc, #96]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d5c:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d114      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fe f8b0 	bl	8002ecc <HAL_GetTick>
 8004d6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d70:	f7fe f8ac 	bl	8002ecc <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e319      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0ee      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d9e:	d111      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dae:	400b      	ands	r3, r1
 8004db0:	4901      	ldr	r1, [pc, #4]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
 8004db6:	e00b      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	40007000 	.word	0x40007000
 8004dc0:	0ffffcff 	.word	0x0ffffcff
 8004dc4:	4baa      	ldr	r3, [pc, #680]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4aa9      	ldr	r2, [pc, #676]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dce:	6093      	str	r3, [r2, #8]
 8004dd0:	4ba7      	ldr	r3, [pc, #668]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ddc:	49a4      	ldr	r1, [pc, #656]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d010      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dee:	4ba0      	ldr	r3, [pc, #640]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df4:	4a9e      	ldr	r2, [pc, #632]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004dfe:	4b9c      	ldr	r3, [pc, #624]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	4999      	ldr	r1, [pc, #612]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e1c:	4b94      	ldr	r3, [pc, #592]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2a:	4991      	ldr	r1, [pc, #580]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e3e:	4b8c      	ldr	r3, [pc, #560]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e4c:	4988      	ldr	r1, [pc, #544]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e60:	4b83      	ldr	r3, [pc, #524]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6e:	4980      	ldr	r1, [pc, #512]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e82:	4b7b      	ldr	r3, [pc, #492]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	4977      	ldr	r1, [pc, #476]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ea4:	4b72      	ldr	r3, [pc, #456]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f023 0203 	bic.w	r2, r3, #3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb2:	496f      	ldr	r1, [pc, #444]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec6:	4b6a      	ldr	r3, [pc, #424]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ecc:	f023 020c 	bic.w	r2, r3, #12
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed4:	4966      	ldr	r1, [pc, #408]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee8:	4b61      	ldr	r3, [pc, #388]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef6:	495e      	ldr	r1, [pc, #376]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f0a:	4b59      	ldr	r3, [pc, #356]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f18:	4955      	ldr	r1, [pc, #340]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f2c:	4b50      	ldr	r3, [pc, #320]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	494d      	ldr	r1, [pc, #308]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f4e:	4b48      	ldr	r3, [pc, #288]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5c:	4944      	ldr	r1, [pc, #272]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f70:	4b3f      	ldr	r3, [pc, #252]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7e:	493c      	ldr	r1, [pc, #240]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f92:	4b37      	ldr	r3, [pc, #220]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa0:	4933      	ldr	r1, [pc, #204]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fb4:	4b2e      	ldr	r3, [pc, #184]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fc2:	492b      	ldr	r1, [pc, #172]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d011      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe4:	4922      	ldr	r1, [pc, #136]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005006:	2301      	movs	r3, #1
 8005008:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005016:	4b16      	ldr	r3, [pc, #88]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005024:	4912      	ldr	r1, [pc, #72]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005048:	4909      	ldr	r1, [pc, #36]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d006      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80d9 	beq.w	8005216 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005064:	4b02      	ldr	r3, [pc, #8]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a01      	ldr	r2, [pc, #4]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800506a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800506e:	e001      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005070:	40023800 	.word	0x40023800
 8005074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005076:	f7fd ff29 	bl	8002ecc <HAL_GetTick>
 800507a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800507c:	e008      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800507e:	f7fd ff25 	bl	8002ecc <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b64      	cmp	r3, #100	; 0x64
 800508a:	d901      	bls.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e194      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005090:	4b6c      	ldr	r3, [pc, #432]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f0      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d021      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d11d      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050b0:	4b64      	ldr	r3, [pc, #400]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b6:	0c1b      	lsrs	r3, r3, #16
 80050b8:	f003 0303 	and.w	r3, r3, #3
 80050bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050be:	4b61      	ldr	r3, [pc, #388]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c4:	0e1b      	lsrs	r3, r3, #24
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	019a      	lsls	r2, r3, #6
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	431a      	orrs	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	061b      	lsls	r3, r3, #24
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	071b      	lsls	r3, r3, #28
 80050e4:	4957      	ldr	r1, [pc, #348]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005100:	d00a      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800510a:	2b00      	cmp	r3, #0
 800510c:	d02e      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005116:	d129      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005118:	4b4a      	ldr	r3, [pc, #296]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800511a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005126:	4b47      	ldr	r3, [pc, #284]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512c:	0f1b      	lsrs	r3, r3, #28
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	019a      	lsls	r2, r3, #6
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	061b      	lsls	r3, r3, #24
 8005146:	431a      	orrs	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	071b      	lsls	r3, r3, #28
 800514c:	493d      	ldr	r1, [pc, #244]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005154:	4b3b      	ldr	r3, [pc, #236]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800515a:	f023 021f 	bic.w	r2, r3, #31
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	3b01      	subs	r3, #1
 8005164:	4937      	ldr	r1, [pc, #220]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01d      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005178:	4b32      	ldr	r3, [pc, #200]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800517a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800517e:	0e1b      	lsrs	r3, r3, #24
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005186:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518c:	0f1b      	lsrs	r3, r3, #28
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	019a      	lsls	r2, r3, #6
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	041b      	lsls	r3, r3, #16
 80051a0:	431a      	orrs	r2, r3
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	061b      	lsls	r3, r3, #24
 80051a6:	431a      	orrs	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	071b      	lsls	r3, r3, #28
 80051ac:	4925      	ldr	r1, [pc, #148]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d011      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	019a      	lsls	r2, r3, #6
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	061b      	lsls	r3, r3, #24
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	071b      	lsls	r3, r3, #28
 80051dc:	4919      	ldr	r1, [pc, #100]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051e4:	4b17      	ldr	r3, [pc, #92]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a16      	ldr	r2, [pc, #88]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f0:	f7fd fe6c 	bl	8002ecc <HAL_GetTick>
 80051f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051f8:	f7fd fe68 	bl	8002ecc <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	; 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e0d7      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800520a:	4b0e      	ldr	r3, [pc, #56]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b01      	cmp	r3, #1
 800521a:	f040 80cd 	bne.w	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a08      	ldr	r2, [pc, #32]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522a:	f7fd fe4f 	bl	8002ecc <HAL_GetTick>
 800522e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005230:	e00a      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005232:	f7fd fe4b 	bl	8002ecc <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b64      	cmp	r3, #100	; 0x64
 800523e:	d903      	bls.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e0ba      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005244:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005248:	4b5e      	ldr	r3, [pc, #376]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005254:	d0ed      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005272:	2b00      	cmp	r3, #0
 8005274:	d02e      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d12a      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800527e:	4b51      	ldr	r3, [pc, #324]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005284:	0c1b      	lsrs	r3, r3, #16
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800528c:	4b4d      	ldr	r3, [pc, #308]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005292:	0f1b      	lsrs	r3, r3, #28
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	019a      	lsls	r2, r3, #6
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	041b      	lsls	r3, r3, #16
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	061b      	lsls	r3, r3, #24
 80052ac:	431a      	orrs	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	071b      	lsls	r3, r3, #28
 80052b2:	4944      	ldr	r1, [pc, #272]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052ba:	4b42      	ldr	r3, [pc, #264]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	493d      	ldr	r1, [pc, #244]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d022      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e8:	d11d      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052ea:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	0e1b      	lsrs	r3, r3, #24
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052f8:	4b32      	ldr	r3, [pc, #200]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	0f1b      	lsrs	r3, r3, #28
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	019a      	lsls	r2, r3, #6
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	041b      	lsls	r3, r3, #16
 8005312:	431a      	orrs	r2, r3
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	061b      	lsls	r3, r3, #24
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	071b      	lsls	r3, r3, #28
 800531e:	4929      	ldr	r1, [pc, #164]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d028      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005332:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005338:	0e1b      	lsrs	r3, r3, #24
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005340:	4b20      	ldr	r3, [pc, #128]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	0c1b      	lsrs	r3, r3, #16
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	019a      	lsls	r2, r3, #6
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	041b      	lsls	r3, r3, #16
 8005358:	431a      	orrs	r2, r3
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	061b      	lsls	r3, r3, #24
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	071b      	lsls	r3, r3, #28
 8005366:	4917      	ldr	r1, [pc, #92]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800536e:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005374:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	4911      	ldr	r1, [pc, #68]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a0e      	ldr	r2, [pc, #56]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800538a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005390:	f7fd fd9c 	bl	8002ecc <HAL_GetTick>
 8005394:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005398:	f7fd fd98 	bl	8002ecc <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	; 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e007      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053aa:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b6:	d1ef      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40023800 	.word	0x40023800

080053c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e049      	b.n	800546e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fd fb8e 	bl	8002b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3304      	adds	r3, #4
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f000 fac0 	bl	800598c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	d001      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e054      	b.n	800553a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a26      	ldr	r2, [pc, #152]	; (8005548 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d022      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d01d      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a22      	ldr	r2, [pc, #136]	; (800554c <HAL_TIM_Base_Start_IT+0xd4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d018      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a21      	ldr	r2, [pc, #132]	; (8005550 <HAL_TIM_Base_Start_IT+0xd8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <HAL_TIM_Base_Start_IT+0xdc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00e      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <HAL_TIM_Base_Start_IT+0xe0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1c      	ldr	r2, [pc, #112]	; (800555c <HAL_TIM_Base_Start_IT+0xe4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x80>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1b      	ldr	r2, [pc, #108]	; (8005560 <HAL_TIM_Base_Start_IT+0xe8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d115      	bne.n	8005524 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	4b19      	ldr	r3, [pc, #100]	; (8005564 <HAL_TIM_Base_Start_IT+0xec>)
 8005500:	4013      	ands	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b06      	cmp	r3, #6
 8005508:	d015      	beq.n	8005536 <HAL_TIM_Base_Start_IT+0xbe>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005510:	d011      	beq.n	8005536 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0201 	orr.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005522:	e008      	b.n	8005536 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e000      	b.n	8005538 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005536:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40010000 	.word	0x40010000
 800554c:	40000400 	.word	0x40000400
 8005550:	40000800 	.word	0x40000800
 8005554:	40000c00 	.word	0x40000c00
 8005558:	40010400 	.word	0x40010400
 800555c:	40014000 	.word	0x40014000
 8005560:	40001800 	.word	0x40001800
 8005564:	00010007 	.word	0x00010007

08005568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b02      	cmp	r3, #2
 800557c:	d122      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b02      	cmp	r3, #2
 800558a:	d11b      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0202 	mvn.w	r2, #2
 8005594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f9d0 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9c2 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f9d3 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d122      	bne.n	8005618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d11b      	bne.n	8005618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0204 	mvn.w	r2, #4
 80055e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f9a6 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f998 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f9a9 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b08      	cmp	r3, #8
 8005624:	d122      	bne.n	800566c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b08      	cmp	r3, #8
 8005632:	d11b      	bne.n	800566c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0208 	mvn.w	r2, #8
 800563c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2204      	movs	r2, #4
 8005642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f97c 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 8005658:	e005      	b.n	8005666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f96e 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f97f 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b10      	cmp	r3, #16
 8005678:	d122      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b10      	cmp	r3, #16
 8005686:	d11b      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0210 	mvn.w	r2, #16
 8005690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2208      	movs	r2, #8
 8005696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f952 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 80056ac:	e005      	b.n	80056ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f944 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f955 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d10e      	bne.n	80056ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d107      	bne.n	80056ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0201 	mvn.w	r2, #1
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fd f868 	bl	80027bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f6:	2b80      	cmp	r3, #128	; 0x80
 80056f8:	d10e      	bne.n	8005718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005704:	2b80      	cmp	r3, #128	; 0x80
 8005706:	d107      	bne.n	8005718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fb0c 	bl	8005d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005726:	d10e      	bne.n	8005746 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b80      	cmp	r3, #128	; 0x80
 8005734:	d107      	bne.n	8005746 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 faff 	bl	8005d44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d10e      	bne.n	8005772 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d107      	bne.n	8005772 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800576a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f903 	bl	8005978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b20      	cmp	r3, #32
 800577e:	d10e      	bne.n	800579e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b20      	cmp	r3, #32
 800578c:	d107      	bne.n	800579e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f06f 0220 	mvn.w	r2, #32
 8005796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fabf 	bl	8005d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_ConfigClockSource+0x1c>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e0b4      	b.n	800592e <HAL_TIM_ConfigClockSource+0x186>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	4b56      	ldr	r3, [pc, #344]	; (8005938 <HAL_TIM_ConfigClockSource+0x190>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fc:	d03e      	beq.n	800587c <HAL_TIM_ConfigClockSource+0xd4>
 80057fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005802:	f200 8087 	bhi.w	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580a:	f000 8086 	beq.w	800591a <HAL_TIM_ConfigClockSource+0x172>
 800580e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005812:	d87f      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b70      	cmp	r3, #112	; 0x70
 8005816:	d01a      	beq.n	800584e <HAL_TIM_ConfigClockSource+0xa6>
 8005818:	2b70      	cmp	r3, #112	; 0x70
 800581a:	d87b      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800581c:	2b60      	cmp	r3, #96	; 0x60
 800581e:	d050      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005820:	2b60      	cmp	r3, #96	; 0x60
 8005822:	d877      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005824:	2b50      	cmp	r3, #80	; 0x50
 8005826:	d03c      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005828:	2b50      	cmp	r3, #80	; 0x50
 800582a:	d873      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d058      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d86f      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b30      	cmp	r3, #48	; 0x30
 8005836:	d064      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005838:	2b30      	cmp	r3, #48	; 0x30
 800583a:	d86b      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b20      	cmp	r3, #32
 800583e:	d060      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d867      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d05c      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005848:	2b10      	cmp	r3, #16
 800584a:	d05a      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 800584c:	e062      	b.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6899      	ldr	r1, [r3, #8]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f000 f9af 	bl	8005bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	609a      	str	r2, [r3, #8]
      break;
 800587a:	e04f      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	6899      	ldr	r1, [r3, #8]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f000 f998 	bl	8005bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800589e:	609a      	str	r2, [r3, #8]
      break;
 80058a0:	e03c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6859      	ldr	r1, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f000 f90c 	bl	8005acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2150      	movs	r1, #80	; 0x50
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 f965 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 80058c0:	e02c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 f92b 	bl	8005b2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2160      	movs	r1, #96	; 0x60
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f955 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 80058e0:	e01c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 f8ec 	bl	8005acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2140      	movs	r1, #64	; 0x40
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 f945 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005900:	e00c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f000 f93c 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005912:	e003      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
      break;
 8005918:	e000      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800591a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	fffeff88 	.word	0xfffeff88

0800593c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a40      	ldr	r2, [pc, #256]	; (8005aa0 <TIM_Base_SetConfig+0x114>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059aa:	d00f      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a3d      	ldr	r2, [pc, #244]	; (8005aa4 <TIM_Base_SetConfig+0x118>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00b      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a3c      	ldr	r2, [pc, #240]	; (8005aa8 <TIM_Base_SetConfig+0x11c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a3b      	ldr	r2, [pc, #236]	; (8005aac <TIM_Base_SetConfig+0x120>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a3a      	ldr	r2, [pc, #232]	; (8005ab0 <TIM_Base_SetConfig+0x124>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d108      	bne.n	80059de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2f      	ldr	r2, [pc, #188]	; (8005aa0 <TIM_Base_SetConfig+0x114>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d02b      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ec:	d027      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2c      	ldr	r2, [pc, #176]	; (8005aa4 <TIM_Base_SetConfig+0x118>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d023      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <TIM_Base_SetConfig+0x11c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01f      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2a      	ldr	r2, [pc, #168]	; (8005aac <TIM_Base_SetConfig+0x120>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01b      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a29      	ldr	r2, [pc, #164]	; (8005ab0 <TIM_Base_SetConfig+0x124>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d017      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a28      	ldr	r2, [pc, #160]	; (8005ab4 <TIM_Base_SetConfig+0x128>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a27      	ldr	r2, [pc, #156]	; (8005ab8 <TIM_Base_SetConfig+0x12c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00f      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a26      	ldr	r2, [pc, #152]	; (8005abc <TIM_Base_SetConfig+0x130>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00b      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a25      	ldr	r2, [pc, #148]	; (8005ac0 <TIM_Base_SetConfig+0x134>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a24      	ldr	r2, [pc, #144]	; (8005ac4 <TIM_Base_SetConfig+0x138>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a23      	ldr	r2, [pc, #140]	; (8005ac8 <TIM_Base_SetConfig+0x13c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d108      	bne.n	8005a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <TIM_Base_SetConfig+0x114>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_Base_SetConfig+0xf8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <TIM_Base_SetConfig+0x124>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d103      	bne.n	8005a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	615a      	str	r2, [r3, #20]
}
 8005a92:	bf00      	nop
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40010400 	.word	0x40010400
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	40014400 	.word	0x40014400
 8005abc:	40014800 	.word	0x40014800
 8005ac0:	40001800 	.word	0x40001800
 8005ac4:	40001c00 	.word	0x40001c00
 8005ac8:	40002000 	.word	0x40002000

08005acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f023 0201 	bic.w	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f023 030a 	bic.w	r3, r3, #10
 8005b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	621a      	str	r2, [r3, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b087      	sub	sp, #28
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f023 0210 	bic.w	r2, r3, #16
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	031b      	lsls	r3, r3, #12
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f043 0307 	orr.w	r3, r3, #7
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	609a      	str	r2, [r3, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	021a      	lsls	r2, r3, #8
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	609a      	str	r2, [r3, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e06d      	b.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a30      	ldr	r2, [pc, #192]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2f      	ldr	r2, [pc, #188]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d108      	bne.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a20      	ldr	r2, [pc, #128]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d022      	beq.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8a:	d01d      	beq.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1d      	ldr	r2, [pc, #116]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d018      	beq.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a1a      	ldr	r2, [pc, #104]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d009      	beq.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a16      	ldr	r2, [pc, #88]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a15      	ldr	r2, [pc, #84]	; (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d10c      	bne.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40010400 	.word	0x40010400
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800
 8005d10:	40000c00 	.word	0x40000c00
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40001800 	.word	0x40001800

08005d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e040      	b.n	8005dec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fc ff1c 	bl	8002bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2224      	movs	r2, #36	; 0x24
 8005d84:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fbe6 	bl	8006568 <UART_SetConfig>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e022      	b.n	8005dec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fe3e 	bl	8006a30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fec5 	bl	8006b74 <UART_CheckIdleState>
 8005dea:	4603      	mov	r3, r0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08a      	sub	sp, #40	; 0x28
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d171      	bne.n	8005ef0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <HAL_UART_Transmit+0x24>
 8005e12:	88fb      	ldrh	r3, [r7, #6]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e06a      	b.n	8005ef2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2221      	movs	r2, #33	; 0x21
 8005e28:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e2a:	f7fd f84f 	bl	8002ecc <HAL_GetTick>
 8005e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	88fa      	ldrh	r2, [r7, #6]
 8005e34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	88fa      	ldrh	r2, [r7, #6]
 8005e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e48:	d108      	bne.n	8005e5c <HAL_UART_Transmit+0x68>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d104      	bne.n	8005e5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	e003      	b.n	8005e64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e64:	e02c      	b.n	8005ec0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2180      	movs	r1, #128	; 0x80
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 feb6 	bl	8006be2 <UART_WaitOnFlagUntilTimeout>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e038      	b.n	8005ef2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	3302      	adds	r3, #2
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	e007      	b.n	8005eae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1cc      	bne.n	8005e66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2140      	movs	r1, #64	; 0x40
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fe83 	bl	8006be2 <UART_WaitOnFlagUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e005      	b.n	8005ef2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b08a      	sub	sp, #40	; 0x28
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	4613      	mov	r3, r2
 8005f06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d132      	bne.n	8005f78 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_UART_Receive_IT+0x24>
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e02b      	b.n	8005f7a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d018      	beq.n	8005f68 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	613b      	str	r3, [r7, #16]
   return(result);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	623b      	str	r3, [r7, #32]
 8005f56:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	69f9      	ldr	r1, [r7, #28]
 8005f5a:	6a3a      	ldr	r2, [r7, #32]
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e6      	bne.n	8005f36 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fefe 	bl	8006d70 <UART_Start_Receive_IT>
 8005f74:	4603      	mov	r3, r0
 8005f76:	e000      	b.n	8005f7a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005f78:	2302      	movs	r3, #2
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3728      	adds	r7, #40	; 0x28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b0ba      	sub	sp, #232	; 0xe8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005faa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005fae:	f640 030f 	movw	r3, #2063	; 0x80f
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005fb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d115      	bne.n	8005fec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00f      	beq.n	8005fec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d009      	beq.n	8005fec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8297 	beq.w	8006510 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	4798      	blx	r3
      }
      return;
 8005fea:	e291      	b.n	8006510 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 8117 	beq.w	8006224 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006002:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006006:	4b85      	ldr	r3, [pc, #532]	; (800621c <HAL_UART_IRQHandler+0x298>)
 8006008:	4013      	ands	r3, r2
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 810a 	beq.w	8006224 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d011      	beq.n	8006040 <HAL_UART_IRQHandler+0xbc>
 800601c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2201      	movs	r2, #1
 800602e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006036:	f043 0201 	orr.w	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d011      	beq.n	8006070 <HAL_UART_IRQHandler+0xec>
 800604c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2202      	movs	r2, #2
 800605e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006066:	f043 0204 	orr.w	r2, r3, #4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d011      	beq.n	80060a0 <HAL_UART_IRQHandler+0x11c>
 800607c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2204      	movs	r2, #4
 800608e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006096:	f043 0202 	orr.w	r2, r3, #2
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d017      	beq.n	80060dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d105      	bne.n	80060c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00b      	beq.n	80060dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2208      	movs	r2, #8
 80060ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d2:	f043 0208 	orr.w	r2, r3, #8
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d012      	beq.n	800610e <HAL_UART_IRQHandler+0x18a>
 80060e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00c      	beq.n	800610e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006104:	f043 0220 	orr.w	r2, r3, #32
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 81fd 	beq.w	8006514 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800611a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00d      	beq.n	8006142 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612a:	f003 0320 	and.w	r3, r3, #32
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d005      	beq.n	8006166 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800615a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800615e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006162:	2b00      	cmp	r3, #0
 8006164:	d04f      	beq.n	8006206 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fec8 	bl	8006efc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d141      	bne.n	80061fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3308      	adds	r3, #8
 8006180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3308      	adds	r3, #8
 80061a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1d9      	bne.n	800617a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d013      	beq.n	80061f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d2:	4a13      	ldr	r2, [pc, #76]	; (8006220 <HAL_UART_IRQHandler+0x29c>)
 80061d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fd f827 	bl	800322e <HAL_DMA_Abort_IT>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d017      	beq.n	8006216 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061f0:	4610      	mov	r0, r2
 80061f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f4:	e00f      	b.n	8006216 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f9a0 	bl	800653c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061fc:	e00b      	b.n	8006216 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f99c 	bl	800653c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006204:	e007      	b.n	8006216 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f998 	bl	800653c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006214:	e17e      	b.n	8006514 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006216:	bf00      	nop
    return;
 8006218:	e17c      	b.n	8006514 <HAL_UART_IRQHandler+0x590>
 800621a:	bf00      	nop
 800621c:	04000120 	.word	0x04000120
 8006220:	08006fc5 	.word	0x08006fc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006228:	2b01      	cmp	r3, #1
 800622a:	f040 814c 	bne.w	80064c6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006232:	f003 0310 	and.w	r3, r3, #16
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 8145 	beq.w	80064c6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800623c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 813e 	beq.w	80064c6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2210      	movs	r2, #16
 8006250:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b40      	cmp	r3, #64	; 0x40
 800625e:	f040 80b6 	bne.w	80063ce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800626e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 8150 	beq.w	8006518 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800627e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006282:	429a      	cmp	r2, r3
 8006284:	f080 8148 	bcs.w	8006518 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800628e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629c:	f000 8086 	beq.w	80063ac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1da      	bne.n	80062a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3308      	adds	r3, #8
 800630a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800630e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006312:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006316:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e1      	bne.n	80062ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3308      	adds	r3, #8
 800632c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800633c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3308      	adds	r3, #8
 8006346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800634a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800634c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006350:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e3      	bne.n	8006326 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800637a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800637c:	f023 0310 	bic.w	r3, r3, #16
 8006380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800638e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006390:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006394:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800639c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e4      	bne.n	800636c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fc fed1 	bl	800314e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063be:	b29b      	uxth	r3, r3
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f8c2 	bl	8006550 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063cc:	e0a4      	b.n	8006518 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063da:	b29b      	uxth	r3, r3
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 8096 	beq.w	800651c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80063f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8091 	beq.w	800651c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800640e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800641c:	647b      	str	r3, [r7, #68]	; 0x44
 800641e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800642a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e4      	bne.n	80063fa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3308      	adds	r3, #8
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	623b      	str	r3, [r7, #32]
   return(result);
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3308      	adds	r3, #8
 8006450:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006454:	633a      	str	r2, [r7, #48]	; 0x30
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800645a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e3      	bne.n	8006430 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	60fb      	str	r3, [r7, #12]
   return(result);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f023 0310 	bic.w	r3, r3, #16
 8006490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	69b9      	ldr	r1, [r7, #24]
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	617b      	str	r3, [r7, #20]
   return(result);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e4      	bne.n	800647c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f846 	bl	8006550 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064c4:	e02a      	b.n	800651c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00e      	beq.n	80064f0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d01c      	beq.n	8006520 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
    }
    return;
 80064ee:	e017      	b.n	8006520 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d012      	beq.n	8006522 <HAL_UART_IRQHandler+0x59e>
 80064fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00c      	beq.n	8006522 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fd71 	bl	8006ff0 <UART_EndTransmit_IT>
    return;
 800650e:	e008      	b.n	8006522 <HAL_UART_IRQHandler+0x59e>
      return;
 8006510:	bf00      	nop
 8006512:	e006      	b.n	8006522 <HAL_UART_IRQHandler+0x59e>
    return;
 8006514:	bf00      	nop
 8006516:	e004      	b.n	8006522 <HAL_UART_IRQHandler+0x59e>
      return;
 8006518:	bf00      	nop
 800651a:	e002      	b.n	8006522 <HAL_UART_IRQHandler+0x59e>
      return;
 800651c:	bf00      	nop
 800651e:	e000      	b.n	8006522 <HAL_UART_IRQHandler+0x59e>
    return;
 8006520:	bf00      	nop
  }

}
 8006522:	37e8      	adds	r7, #232	; 0xe8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4ba6      	ldr	r3, [pc, #664]	; (800682c <UART_SetConfig+0x2c4>)
 8006594:	4013      	ands	r3, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	6979      	ldr	r1, [r7, #20]
 800659c:	430b      	orrs	r3, r1
 800659e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a94      	ldr	r2, [pc, #592]	; (8006830 <UART_SetConfig+0x2c8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d120      	bne.n	8006626 <UART_SetConfig+0xbe>
 80065e4:	4b93      	ldr	r3, [pc, #588]	; (8006834 <UART_SetConfig+0x2cc>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d816      	bhi.n	8006620 <UART_SetConfig+0xb8>
 80065f2:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <UART_SetConfig+0x90>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	08006609 	.word	0x08006609
 80065fc:	08006615 	.word	0x08006615
 8006600:	0800660f 	.word	0x0800660f
 8006604:	0800661b 	.word	0x0800661b
 8006608:	2301      	movs	r3, #1
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e150      	b.n	80068b0 <UART_SetConfig+0x348>
 800660e:	2302      	movs	r3, #2
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e14d      	b.n	80068b0 <UART_SetConfig+0x348>
 8006614:	2304      	movs	r3, #4
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e14a      	b.n	80068b0 <UART_SetConfig+0x348>
 800661a:	2308      	movs	r3, #8
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e147      	b.n	80068b0 <UART_SetConfig+0x348>
 8006620:	2310      	movs	r3, #16
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e144      	b.n	80068b0 <UART_SetConfig+0x348>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a83      	ldr	r2, [pc, #524]	; (8006838 <UART_SetConfig+0x2d0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d132      	bne.n	8006696 <UART_SetConfig+0x12e>
 8006630:	4b80      	ldr	r3, [pc, #512]	; (8006834 <UART_SetConfig+0x2cc>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	f003 030c 	and.w	r3, r3, #12
 800663a:	2b0c      	cmp	r3, #12
 800663c:	d828      	bhi.n	8006690 <UART_SetConfig+0x128>
 800663e:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0xdc>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	08006679 	.word	0x08006679
 8006648:	08006691 	.word	0x08006691
 800664c:	08006691 	.word	0x08006691
 8006650:	08006691 	.word	0x08006691
 8006654:	08006685 	.word	0x08006685
 8006658:	08006691 	.word	0x08006691
 800665c:	08006691 	.word	0x08006691
 8006660:	08006691 	.word	0x08006691
 8006664:	0800667f 	.word	0x0800667f
 8006668:	08006691 	.word	0x08006691
 800666c:	08006691 	.word	0x08006691
 8006670:	08006691 	.word	0x08006691
 8006674:	0800668b 	.word	0x0800668b
 8006678:	2300      	movs	r3, #0
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e118      	b.n	80068b0 <UART_SetConfig+0x348>
 800667e:	2302      	movs	r3, #2
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e115      	b.n	80068b0 <UART_SetConfig+0x348>
 8006684:	2304      	movs	r3, #4
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e112      	b.n	80068b0 <UART_SetConfig+0x348>
 800668a:	2308      	movs	r3, #8
 800668c:	77fb      	strb	r3, [r7, #31]
 800668e:	e10f      	b.n	80068b0 <UART_SetConfig+0x348>
 8006690:	2310      	movs	r3, #16
 8006692:	77fb      	strb	r3, [r7, #31]
 8006694:	e10c      	b.n	80068b0 <UART_SetConfig+0x348>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a68      	ldr	r2, [pc, #416]	; (800683c <UART_SetConfig+0x2d4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d120      	bne.n	80066e2 <UART_SetConfig+0x17a>
 80066a0:	4b64      	ldr	r3, [pc, #400]	; (8006834 <UART_SetConfig+0x2cc>)
 80066a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066aa:	2b30      	cmp	r3, #48	; 0x30
 80066ac:	d013      	beq.n	80066d6 <UART_SetConfig+0x16e>
 80066ae:	2b30      	cmp	r3, #48	; 0x30
 80066b0:	d814      	bhi.n	80066dc <UART_SetConfig+0x174>
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	d009      	beq.n	80066ca <UART_SetConfig+0x162>
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	d810      	bhi.n	80066dc <UART_SetConfig+0x174>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <UART_SetConfig+0x15c>
 80066be:	2b10      	cmp	r3, #16
 80066c0:	d006      	beq.n	80066d0 <UART_SetConfig+0x168>
 80066c2:	e00b      	b.n	80066dc <UART_SetConfig+0x174>
 80066c4:	2300      	movs	r3, #0
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e0f2      	b.n	80068b0 <UART_SetConfig+0x348>
 80066ca:	2302      	movs	r3, #2
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e0ef      	b.n	80068b0 <UART_SetConfig+0x348>
 80066d0:	2304      	movs	r3, #4
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e0ec      	b.n	80068b0 <UART_SetConfig+0x348>
 80066d6:	2308      	movs	r3, #8
 80066d8:	77fb      	strb	r3, [r7, #31]
 80066da:	e0e9      	b.n	80068b0 <UART_SetConfig+0x348>
 80066dc:	2310      	movs	r3, #16
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e0e6      	b.n	80068b0 <UART_SetConfig+0x348>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a56      	ldr	r2, [pc, #344]	; (8006840 <UART_SetConfig+0x2d8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d120      	bne.n	800672e <UART_SetConfig+0x1c6>
 80066ec:	4b51      	ldr	r3, [pc, #324]	; (8006834 <UART_SetConfig+0x2cc>)
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066f6:	2bc0      	cmp	r3, #192	; 0xc0
 80066f8:	d013      	beq.n	8006722 <UART_SetConfig+0x1ba>
 80066fa:	2bc0      	cmp	r3, #192	; 0xc0
 80066fc:	d814      	bhi.n	8006728 <UART_SetConfig+0x1c0>
 80066fe:	2b80      	cmp	r3, #128	; 0x80
 8006700:	d009      	beq.n	8006716 <UART_SetConfig+0x1ae>
 8006702:	2b80      	cmp	r3, #128	; 0x80
 8006704:	d810      	bhi.n	8006728 <UART_SetConfig+0x1c0>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <UART_SetConfig+0x1a8>
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d006      	beq.n	800671c <UART_SetConfig+0x1b4>
 800670e:	e00b      	b.n	8006728 <UART_SetConfig+0x1c0>
 8006710:	2300      	movs	r3, #0
 8006712:	77fb      	strb	r3, [r7, #31]
 8006714:	e0cc      	b.n	80068b0 <UART_SetConfig+0x348>
 8006716:	2302      	movs	r3, #2
 8006718:	77fb      	strb	r3, [r7, #31]
 800671a:	e0c9      	b.n	80068b0 <UART_SetConfig+0x348>
 800671c:	2304      	movs	r3, #4
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	e0c6      	b.n	80068b0 <UART_SetConfig+0x348>
 8006722:	2308      	movs	r3, #8
 8006724:	77fb      	strb	r3, [r7, #31]
 8006726:	e0c3      	b.n	80068b0 <UART_SetConfig+0x348>
 8006728:	2310      	movs	r3, #16
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e0c0      	b.n	80068b0 <UART_SetConfig+0x348>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a44      	ldr	r2, [pc, #272]	; (8006844 <UART_SetConfig+0x2dc>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d125      	bne.n	8006784 <UART_SetConfig+0x21c>
 8006738:	4b3e      	ldr	r3, [pc, #248]	; (8006834 <UART_SetConfig+0x2cc>)
 800673a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006746:	d017      	beq.n	8006778 <UART_SetConfig+0x210>
 8006748:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800674c:	d817      	bhi.n	800677e <UART_SetConfig+0x216>
 800674e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006752:	d00b      	beq.n	800676c <UART_SetConfig+0x204>
 8006754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006758:	d811      	bhi.n	800677e <UART_SetConfig+0x216>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <UART_SetConfig+0x1fe>
 800675e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006762:	d006      	beq.n	8006772 <UART_SetConfig+0x20a>
 8006764:	e00b      	b.n	800677e <UART_SetConfig+0x216>
 8006766:	2300      	movs	r3, #0
 8006768:	77fb      	strb	r3, [r7, #31]
 800676a:	e0a1      	b.n	80068b0 <UART_SetConfig+0x348>
 800676c:	2302      	movs	r3, #2
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e09e      	b.n	80068b0 <UART_SetConfig+0x348>
 8006772:	2304      	movs	r3, #4
 8006774:	77fb      	strb	r3, [r7, #31]
 8006776:	e09b      	b.n	80068b0 <UART_SetConfig+0x348>
 8006778:	2308      	movs	r3, #8
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e098      	b.n	80068b0 <UART_SetConfig+0x348>
 800677e:	2310      	movs	r3, #16
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e095      	b.n	80068b0 <UART_SetConfig+0x348>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a2f      	ldr	r2, [pc, #188]	; (8006848 <UART_SetConfig+0x2e0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d125      	bne.n	80067da <UART_SetConfig+0x272>
 800678e:	4b29      	ldr	r3, [pc, #164]	; (8006834 <UART_SetConfig+0x2cc>)
 8006790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006794:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006798:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800679c:	d017      	beq.n	80067ce <UART_SetConfig+0x266>
 800679e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067a2:	d817      	bhi.n	80067d4 <UART_SetConfig+0x26c>
 80067a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a8:	d00b      	beq.n	80067c2 <UART_SetConfig+0x25a>
 80067aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ae:	d811      	bhi.n	80067d4 <UART_SetConfig+0x26c>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <UART_SetConfig+0x254>
 80067b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b8:	d006      	beq.n	80067c8 <UART_SetConfig+0x260>
 80067ba:	e00b      	b.n	80067d4 <UART_SetConfig+0x26c>
 80067bc:	2301      	movs	r3, #1
 80067be:	77fb      	strb	r3, [r7, #31]
 80067c0:	e076      	b.n	80068b0 <UART_SetConfig+0x348>
 80067c2:	2302      	movs	r3, #2
 80067c4:	77fb      	strb	r3, [r7, #31]
 80067c6:	e073      	b.n	80068b0 <UART_SetConfig+0x348>
 80067c8:	2304      	movs	r3, #4
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e070      	b.n	80068b0 <UART_SetConfig+0x348>
 80067ce:	2308      	movs	r3, #8
 80067d0:	77fb      	strb	r3, [r7, #31]
 80067d2:	e06d      	b.n	80068b0 <UART_SetConfig+0x348>
 80067d4:	2310      	movs	r3, #16
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e06a      	b.n	80068b0 <UART_SetConfig+0x348>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1b      	ldr	r2, [pc, #108]	; (800684c <UART_SetConfig+0x2e4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d138      	bne.n	8006856 <UART_SetConfig+0x2ee>
 80067e4:	4b13      	ldr	r3, [pc, #76]	; (8006834 <UART_SetConfig+0x2cc>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067f2:	d017      	beq.n	8006824 <UART_SetConfig+0x2bc>
 80067f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067f8:	d82a      	bhi.n	8006850 <UART_SetConfig+0x2e8>
 80067fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fe:	d00b      	beq.n	8006818 <UART_SetConfig+0x2b0>
 8006800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006804:	d824      	bhi.n	8006850 <UART_SetConfig+0x2e8>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <UART_SetConfig+0x2aa>
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680e:	d006      	beq.n	800681e <UART_SetConfig+0x2b6>
 8006810:	e01e      	b.n	8006850 <UART_SetConfig+0x2e8>
 8006812:	2300      	movs	r3, #0
 8006814:	77fb      	strb	r3, [r7, #31]
 8006816:	e04b      	b.n	80068b0 <UART_SetConfig+0x348>
 8006818:	2302      	movs	r3, #2
 800681a:	77fb      	strb	r3, [r7, #31]
 800681c:	e048      	b.n	80068b0 <UART_SetConfig+0x348>
 800681e:	2304      	movs	r3, #4
 8006820:	77fb      	strb	r3, [r7, #31]
 8006822:	e045      	b.n	80068b0 <UART_SetConfig+0x348>
 8006824:	2308      	movs	r3, #8
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e042      	b.n	80068b0 <UART_SetConfig+0x348>
 800682a:	bf00      	nop
 800682c:	efff69f3 	.word	0xefff69f3
 8006830:	40011000 	.word	0x40011000
 8006834:	40023800 	.word	0x40023800
 8006838:	40004400 	.word	0x40004400
 800683c:	40004800 	.word	0x40004800
 8006840:	40004c00 	.word	0x40004c00
 8006844:	40005000 	.word	0x40005000
 8006848:	40011400 	.word	0x40011400
 800684c:	40007800 	.word	0x40007800
 8006850:	2310      	movs	r3, #16
 8006852:	77fb      	strb	r3, [r7, #31]
 8006854:	e02c      	b.n	80068b0 <UART_SetConfig+0x348>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a72      	ldr	r2, [pc, #456]	; (8006a24 <UART_SetConfig+0x4bc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d125      	bne.n	80068ac <UART_SetConfig+0x344>
 8006860:	4b71      	ldr	r3, [pc, #452]	; (8006a28 <UART_SetConfig+0x4c0>)
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006866:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800686a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800686e:	d017      	beq.n	80068a0 <UART_SetConfig+0x338>
 8006870:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006874:	d817      	bhi.n	80068a6 <UART_SetConfig+0x33e>
 8006876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687a:	d00b      	beq.n	8006894 <UART_SetConfig+0x32c>
 800687c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006880:	d811      	bhi.n	80068a6 <UART_SetConfig+0x33e>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <UART_SetConfig+0x326>
 8006886:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800688a:	d006      	beq.n	800689a <UART_SetConfig+0x332>
 800688c:	e00b      	b.n	80068a6 <UART_SetConfig+0x33e>
 800688e:	2300      	movs	r3, #0
 8006890:	77fb      	strb	r3, [r7, #31]
 8006892:	e00d      	b.n	80068b0 <UART_SetConfig+0x348>
 8006894:	2302      	movs	r3, #2
 8006896:	77fb      	strb	r3, [r7, #31]
 8006898:	e00a      	b.n	80068b0 <UART_SetConfig+0x348>
 800689a:	2304      	movs	r3, #4
 800689c:	77fb      	strb	r3, [r7, #31]
 800689e:	e007      	b.n	80068b0 <UART_SetConfig+0x348>
 80068a0:	2308      	movs	r3, #8
 80068a2:	77fb      	strb	r3, [r7, #31]
 80068a4:	e004      	b.n	80068b0 <UART_SetConfig+0x348>
 80068a6:	2310      	movs	r3, #16
 80068a8:	77fb      	strb	r3, [r7, #31]
 80068aa:	e001      	b.n	80068b0 <UART_SetConfig+0x348>
 80068ac:	2310      	movs	r3, #16
 80068ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b8:	d15b      	bne.n	8006972 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80068ba:	7ffb      	ldrb	r3, [r7, #31]
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d828      	bhi.n	8006912 <UART_SetConfig+0x3aa>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <UART_SetConfig+0x360>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068fd 	.word	0x080068fd
 80068d4:	08006913 	.word	0x08006913
 80068d8:	08006903 	.word	0x08006903
 80068dc:	08006913 	.word	0x08006913
 80068e0:	08006913 	.word	0x08006913
 80068e4:	08006913 	.word	0x08006913
 80068e8:	0800690b 	.word	0x0800690b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ec:	f7fe f954 	bl	8004b98 <HAL_RCC_GetPCLK1Freq>
 80068f0:	61b8      	str	r0, [r7, #24]
        break;
 80068f2:	e013      	b.n	800691c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f4:	f7fe f964 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 80068f8:	61b8      	str	r0, [r7, #24]
        break;
 80068fa:	e00f      	b.n	800691c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068fc:	4b4b      	ldr	r3, [pc, #300]	; (8006a2c <UART_SetConfig+0x4c4>)
 80068fe:	61bb      	str	r3, [r7, #24]
        break;
 8006900:	e00c      	b.n	800691c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006902:	f7fe f837 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8006906:	61b8      	str	r0, [r7, #24]
        break;
 8006908:	e008      	b.n	800691c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690e:	61bb      	str	r3, [r7, #24]
        break;
 8006910:	e004      	b.n	800691c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	77bb      	strb	r3, [r7, #30]
        break;
 800691a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d074      	beq.n	8006a0c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	005a      	lsls	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	441a      	add	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	fbb2 f3f3 	udiv	r3, r2, r3
 8006936:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	2b0f      	cmp	r3, #15
 800693c:	d916      	bls.n	800696c <UART_SetConfig+0x404>
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006944:	d212      	bcs.n	800696c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f023 030f 	bic.w	r3, r3, #15
 800694e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	085b      	lsrs	r3, r3, #1
 8006954:	b29b      	uxth	r3, r3
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	b29a      	uxth	r2, r3
 800695c:	89fb      	ldrh	r3, [r7, #14]
 800695e:	4313      	orrs	r3, r2
 8006960:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	89fa      	ldrh	r2, [r7, #14]
 8006968:	60da      	str	r2, [r3, #12]
 800696a:	e04f      	b.n	8006a0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	77bb      	strb	r3, [r7, #30]
 8006970:	e04c      	b.n	8006a0c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006972:	7ffb      	ldrb	r3, [r7, #31]
 8006974:	2b08      	cmp	r3, #8
 8006976:	d828      	bhi.n	80069ca <UART_SetConfig+0x462>
 8006978:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <UART_SetConfig+0x418>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	080069a5 	.word	0x080069a5
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069b5 	.word	0x080069b5
 800698c:	080069cb 	.word	0x080069cb
 8006990:	080069bb 	.word	0x080069bb
 8006994:	080069cb 	.word	0x080069cb
 8006998:	080069cb 	.word	0x080069cb
 800699c:	080069cb 	.word	0x080069cb
 80069a0:	080069c3 	.word	0x080069c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a4:	f7fe f8f8 	bl	8004b98 <HAL_RCC_GetPCLK1Freq>
 80069a8:	61b8      	str	r0, [r7, #24]
        break;
 80069aa:	e013      	b.n	80069d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069ac:	f7fe f908 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 80069b0:	61b8      	str	r0, [r7, #24]
        break;
 80069b2:	e00f      	b.n	80069d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b4:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <UART_SetConfig+0x4c4>)
 80069b6:	61bb      	str	r3, [r7, #24]
        break;
 80069b8:	e00c      	b.n	80069d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ba:	f7fd ffdb 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 80069be:	61b8      	str	r0, [r7, #24]
        break;
 80069c0:	e008      	b.n	80069d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069c6:	61bb      	str	r3, [r7, #24]
        break;
 80069c8:	e004      	b.n	80069d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	77bb      	strb	r3, [r7, #30]
        break;
 80069d2:	bf00      	nop
    }

    if (pclk != 0U)
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d018      	beq.n	8006a0c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	085a      	lsrs	r2, r3, #1
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	441a      	add	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b0f      	cmp	r3, #15
 80069f2:	d909      	bls.n	8006a08 <UART_SetConfig+0x4a0>
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069fa:	d205      	bcs.n	8006a08 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60da      	str	r2, [r3, #12]
 8006a06:	e001      	b.n	8006a0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006a18:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3720      	adds	r7, #32
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	40007c00 	.word	0x40007c00
 8006a28:	40023800 	.word	0x40023800
 8006a2c:	00f42400 	.word	0x00f42400

08006a30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00a      	beq.n	8006a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00a      	beq.n	8006ae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01a      	beq.n	8006b46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b2e:	d10a      	bne.n	8006b46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	605a      	str	r2, [r3, #4]
  }
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b84:	f7fc f9a2 	bl	8002ecc <HAL_GetTick>
 8006b88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d10e      	bne.n	8006bb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f81b 	bl	8006be2 <UART_WaitOnFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e011      	b.n	8006bda <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b09c      	sub	sp, #112	; 0x70
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf2:	e0a7      	b.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfa:	f000 80a3 	beq.w	8006d44 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bfe:	f7fc f965 	bl	8002ecc <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d302      	bcc.n	8006c14 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d13f      	bne.n	8006c94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c28:	667b      	str	r3, [r7, #100]	; 0x64
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e6      	bne.n	8006c14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3308      	adds	r3, #8
 8006c64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c66:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e5      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e068      	b.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d050      	beq.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb0:	d148      	bne.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cda:	637b      	str	r3, [r7, #52]	; 0x34
 8006cdc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e6      	bne.n	8006cbc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d0e:	623a      	str	r2, [r7, #32]
 8006d10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	69f9      	ldr	r1, [r7, #28]
 8006d14:	6a3a      	ldr	r2, [r7, #32]
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2220      	movs	r2, #32
 8006d26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e010      	b.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	69da      	ldr	r2, [r3, #28]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	bf0c      	ite	eq
 8006d54:	2301      	moveq	r3, #1
 8006d56:	2300      	movne	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	f43f af48 	beq.w	8006bf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3770      	adds	r7, #112	; 0x70
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b097      	sub	sp, #92	; 0x5c
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	88fa      	ldrh	r2, [r7, #6]
 8006d88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	88fa      	ldrh	r2, [r7, #6]
 8006d90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da2:	d10e      	bne.n	8006dc2 <UART_Start_Receive_IT+0x52>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d105      	bne.n	8006db8 <UART_Start_Receive_IT+0x48>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006db2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006db6:	e02d      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	22ff      	movs	r2, #255	; 0xff
 8006dbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dc0:	e028      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10d      	bne.n	8006de6 <UART_Start_Receive_IT+0x76>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <UART_Start_Receive_IT+0x6c>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	22ff      	movs	r2, #255	; 0xff
 8006dd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dda:	e01b      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	227f      	movs	r2, #127	; 0x7f
 8006de0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006de4:	e016      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dee:	d10d      	bne.n	8006e0c <UART_Start_Receive_IT+0x9c>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <UART_Start_Receive_IT+0x92>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	227f      	movs	r2, #127	; 0x7f
 8006dfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e00:	e008      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	223f      	movs	r2, #63	; 0x3f
 8006e06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e0a:	e003      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2222      	movs	r2, #34	; 0x22
 8006e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	f043 0301 	orr.w	r3, r3, #1
 8006e3a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3308      	adds	r3, #8
 8006e42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e44:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e46:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e5      	bne.n	8006e24 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e60:	d107      	bne.n	8006e72 <UART_Start_Receive_IT+0x102>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d103      	bne.n	8006e72 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a21      	ldr	r2, [pc, #132]	; (8006ef4 <UART_Start_Receive_IT+0x184>)
 8006e6e:	669a      	str	r2, [r3, #104]	; 0x68
 8006e70:	e002      	b.n	8006e78 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a20      	ldr	r2, [pc, #128]	; (8006ef8 <UART_Start_Receive_IT+0x188>)
 8006e76:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d019      	beq.n	8006eb4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e6      	bne.n	8006e80 <UART_Start_Receive_IT+0x110>
 8006eb2:	e018      	b.n	8006ee6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f043 0320 	orr.w	r3, r3, #32
 8006ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed2:	623b      	str	r3, [r7, #32]
 8006ed4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	69f9      	ldr	r1, [r7, #28]
 8006ed8:	6a3a      	ldr	r2, [r7, #32]
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e6      	bne.n	8006eb4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	375c      	adds	r7, #92	; 0x5c
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	080071ab 	.word	0x080071ab
 8006ef8:	08007045 	.word	0x08007045

08006efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b095      	sub	sp, #84	; 0x54
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f22:	643b      	str	r3, [r7, #64]	; 0x40
 8006f24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e6      	bne.n	8006f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	f023 0301 	bic.w	r3, r3, #1
 8006f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3308      	adds	r3, #8
 8006f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e5      	bne.n	8006f36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d118      	bne.n	8006fa4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	e853 3f00 	ldrex	r3, [r3]
 8006f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f023 0310 	bic.w	r3, r3, #16
 8006f86:	647b      	str	r3, [r7, #68]	; 0x44
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	6979      	ldr	r1, [r7, #20]
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	e841 2300 	strex	r3, r2, [r1]
 8006f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e6      	bne.n	8006f72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006fb8:	bf00      	nop
 8006fba:	3754      	adds	r7, #84	; 0x54
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff faaa 	bl	800653c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	60bb      	str	r3, [r7, #8]
   return(result);
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700c:	61fb      	str	r3, [r7, #28]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6979      	ldr	r1, [r7, #20]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	613b      	str	r3, [r7, #16]
   return(result);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e6      	bne.n	8006ff8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fa76 	bl	8006528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800703c:	bf00      	nop
 800703e:	3720      	adds	r7, #32
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b096      	sub	sp, #88	; 0x58
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007052:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800705c:	2b22      	cmp	r3, #34	; 0x22
 800705e:	f040 8098 	bne.w	8007192 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800706c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007070:	b2d9      	uxtb	r1, r3
 8007072:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007076:	b2da      	uxtb	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707c:	400a      	ands	r2, r1
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d17b      	bne.n	80071a2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070be:	653b      	str	r3, [r7, #80]	; 0x50
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c8:	647b      	str	r3, [r7, #68]	; 0x44
 80070ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3308      	adds	r3, #8
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	623b      	str	r3, [r7, #32]
   return(result);
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	f023 0301 	bic.w	r3, r3, #1
 80070f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3308      	adds	r3, #8
 80070fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070fc:	633a      	str	r2, [r7, #48]	; 0x30
 80070fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e5      	bne.n	80070dc <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007128:	2b01      	cmp	r3, #1
 800712a:	d12e      	bne.n	800718a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0310 	bic.w	r3, r3, #16
 8007146:	64bb      	str	r3, [r7, #72]	; 0x48
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	69b9      	ldr	r1, [r7, #24]
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	617b      	str	r3, [r7, #20]
   return(result);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e6      	bne.n	8007132 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f003 0310 	and.w	r3, r3, #16
 800716e:	2b10      	cmp	r3, #16
 8007170:	d103      	bne.n	800717a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2210      	movs	r2, #16
 8007178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff f9e4 	bl	8006550 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007188:	e00b      	b.n	80071a2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fb fb04 	bl	8002798 <HAL_UART_RxCpltCallback>
}
 8007190:	e007      	b.n	80071a2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0208 	orr.w	r2, r2, #8
 80071a0:	619a      	str	r2, [r3, #24]
}
 80071a2:	bf00      	nop
 80071a4:	3758      	adds	r7, #88	; 0x58
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b096      	sub	sp, #88	; 0x58
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c2:	2b22      	cmp	r3, #34	; 0x22
 80071c4:	f040 8098 	bne.w	80072f8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80071d8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80071dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80071e0:	4013      	ands	r3, r2
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ec:	1c9a      	adds	r2, r3, #2
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d17b      	bne.n	8007308 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007224:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800722e:	643b      	str	r3, [r7, #64]	; 0x40
 8007230:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e6      	bne.n	8007210 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3308      	adds	r3, #8
 8007248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	61fb      	str	r3, [r7, #28]
   return(result);
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	64bb      	str	r3, [r7, #72]	; 0x48
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3308      	adds	r3, #8
 8007260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007262:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e5      	bne.n	8007242 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728e:	2b01      	cmp	r3, #1
 8007290:	d12e      	bne.n	80072f0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f023 0310 	bic.w	r3, r3, #16
 80072ac:	647b      	str	r3, [r7, #68]	; 0x44
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072b6:	61bb      	str	r3, [r7, #24]
 80072b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6979      	ldr	r1, [r7, #20]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	613b      	str	r3, [r7, #16]
   return(result);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e6      	bne.n	8007298 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d103      	bne.n	80072e0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2210      	movs	r2, #16
 80072de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff f931 	bl	8006550 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072ee:	e00b      	b.n	8007308 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7fb fa51 	bl	8002798 <HAL_UART_RxCpltCallback>
}
 80072f6:	e007      	b.n	8007308 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f042 0208 	orr.w	r2, r2, #8
 8007306:	619a      	str	r2, [r3, #24]
}
 8007308:	bf00      	nop
 800730a:	3758      	adds	r7, #88	; 0x58
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007310:	b084      	sub	sp, #16
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	f107 001c 	add.w	r0, r7, #28
 800731e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	2b01      	cmp	r3, #1
 8007326:	d120      	bne.n	800736a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	4b20      	ldr	r3, [pc, #128]	; (80073bc <USB_CoreInit+0xac>)
 800733a:	4013      	ands	r3, r2
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800734c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734e:	2b01      	cmp	r3, #1
 8007350:	d105      	bne.n	800735e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa96 	bl	8007890 <USB_CoreReset>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	e010      	b.n	800738c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa8a 	bl	8007890 <USB_CoreReset>
 800737c:	4603      	mov	r3, r0
 800737e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007384:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	2b01      	cmp	r3, #1
 8007390:	d10b      	bne.n	80073aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f043 0206 	orr.w	r2, r3, #6
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f043 0220 	orr.w	r2, r3, #32
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073b6:	b004      	add	sp, #16
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	ffbdffbf 	.word	0xffbdffbf

080073c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f023 0201 	bic.w	r2, r3, #1
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073fe:	78fb      	ldrb	r3, [r7, #3]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d115      	bne.n	8007430 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007410:	2001      	movs	r0, #1
 8007412:	f7fb fd67 	bl	8002ee4 <HAL_Delay>
      ms++;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3301      	adds	r3, #1
 800741a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa29 	bl	8007874 <USB_GetMode>
 8007422:	4603      	mov	r3, r0
 8007424:	2b01      	cmp	r3, #1
 8007426:	d01e      	beq.n	8007466 <USB_SetCurrentMode+0x84>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b31      	cmp	r3, #49	; 0x31
 800742c:	d9f0      	bls.n	8007410 <USB_SetCurrentMode+0x2e>
 800742e:	e01a      	b.n	8007466 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d115      	bne.n	8007462 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007442:	2001      	movs	r0, #1
 8007444:	f7fb fd4e 	bl	8002ee4 <HAL_Delay>
      ms++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa10 	bl	8007874 <USB_GetMode>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <USB_SetCurrentMode+0x84>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b31      	cmp	r3, #49	; 0x31
 800745e:	d9f0      	bls.n	8007442 <USB_SetCurrentMode+0x60>
 8007460:	e001      	b.n	8007466 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e005      	b.n	8007472 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b32      	cmp	r3, #50	; 0x32
 800746a:	d101      	bne.n	8007470 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800747c:	b084      	sub	sp, #16
 800747e:	b580      	push	{r7, lr}
 8007480:	b086      	sub	sp, #24
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800748a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	e009      	b.n	80074b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	3340      	adds	r3, #64	; 0x40
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	2200      	movs	r2, #0
 80074a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	3301      	adds	r3, #1
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	2b0e      	cmp	r3, #14
 80074b4:	d9f2      	bls.n	800749c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d11c      	bne.n	80074f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ca:	f043 0302 	orr.w	r3, r3, #2
 80074ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e005      	b.n	8007502 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007508:	461a      	mov	r2, r3
 800750a:	2300      	movs	r3, #0
 800750c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007514:	4619      	mov	r1, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751c:	461a      	mov	r2, r3
 800751e:	680b      	ldr	r3, [r1, #0]
 8007520:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	2b01      	cmp	r3, #1
 8007526:	d10c      	bne.n	8007542 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	2b00      	cmp	r3, #0
 800752c:	d104      	bne.n	8007538 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800752e:	2100      	movs	r1, #0
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f965 	bl	8007800 <USB_SetDevSpeed>
 8007536:	e008      	b.n	800754a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007538:	2101      	movs	r1, #1
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f960 	bl	8007800 <USB_SetDevSpeed>
 8007540:	e003      	b.n	800754a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007542:	2103      	movs	r1, #3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f95b 	bl	8007800 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800754a:	2110      	movs	r1, #16
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f8f3 	bl	8007738 <USB_FlushTxFifo>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f91f 	bl	80077a0 <USB_FlushRxFifo>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007572:	461a      	mov	r2, r3
 8007574:	2300      	movs	r3, #0
 8007576:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	461a      	mov	r2, r3
 8007580:	2300      	movs	r3, #0
 8007582:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758a:	461a      	mov	r2, r3
 800758c:	2300      	movs	r3, #0
 800758e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007590:	2300      	movs	r3, #0
 8007592:	613b      	str	r3, [r7, #16]
 8007594:	e043      	b.n	800761e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ac:	d118      	bne.n	80075e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10a      	bne.n	80075ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c0:	461a      	mov	r2, r3
 80075c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	e013      	b.n	80075f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d6:	461a      	mov	r2, r3
 80075d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	e008      	b.n	80075f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ec:	461a      	mov	r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fe:	461a      	mov	r2, r3
 8007600:	2300      	movs	r3, #0
 8007602:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007610:	461a      	mov	r2, r3
 8007612:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007616:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	3301      	adds	r3, #1
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	429a      	cmp	r2, r3
 8007624:	d3b7      	bcc.n	8007596 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
 800762a:	e043      	b.n	80076b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800763e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007642:	d118      	bne.n	8007676 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007656:	461a      	mov	r2, r3
 8007658:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	e013      	b.n	8007688 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766c:	461a      	mov	r2, r3
 800766e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	e008      	b.n	8007688 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007682:	461a      	mov	r2, r3
 8007684:	2300      	movs	r3, #0
 8007686:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007694:	461a      	mov	r2, r3
 8007696:	2300      	movs	r3, #0
 8007698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a6:	461a      	mov	r2, r3
 80076a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	3301      	adds	r3, #1
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d3b7      	bcc.n	800762c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	f043 0210 	orr.w	r2, r3, #16
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	699a      	ldr	r2, [r3, #24]
 80076f4:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <USB_DevInit+0x2b4>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d005      	beq.n	800770e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	f043 0208 	orr.w	r2, r3, #8
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800770e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d105      	bne.n	8007720 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699a      	ldr	r2, [r3, #24]
 8007718:	4b06      	ldr	r3, [pc, #24]	; (8007734 <USB_DevInit+0x2b8>)
 800771a:	4313      	orrs	r3, r2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007720:	7dfb      	ldrb	r3, [r7, #23]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800772c:	b004      	add	sp, #16
 800772e:	4770      	bx	lr
 8007730:	803c3800 	.word	0x803c3800
 8007734:	40000004 	.word	0x40000004

08007738 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4a13      	ldr	r2, [pc, #76]	; (800779c <USB_FlushTxFifo+0x64>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d901      	bls.n	8007758 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e01b      	b.n	8007790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	daf2      	bge.n	8007746 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	019b      	lsls	r3, r3, #6
 8007768:	f043 0220 	orr.w	r2, r3, #32
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4a08      	ldr	r2, [pc, #32]	; (800779c <USB_FlushTxFifo+0x64>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d901      	bls.n	8007782 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e006      	b.n	8007790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b20      	cmp	r3, #32
 800778c:	d0f0      	beq.n	8007770 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	00030d40 	.word	0x00030d40

080077a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4a11      	ldr	r2, [pc, #68]	; (80077fc <USB_FlushRxFifo+0x5c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e018      	b.n	80077f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	daf2      	bge.n	80077ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2210      	movs	r2, #16
 80077ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3301      	adds	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a08      	ldr	r2, [pc, #32]	; (80077fc <USB_FlushRxFifo+0x5c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d901      	bls.n	80077e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e006      	b.n	80077f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	2b10      	cmp	r3, #16
 80077ec:	d0f0      	beq.n	80077d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	00030d40 	.word	0x00030d40

08007800 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	78fb      	ldrb	r3, [r7, #3]
 800781a:	68f9      	ldr	r1, [r7, #12]
 800781c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007820:	4313      	orrs	r3, r2
 8007822:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007832:	b480      	push	{r7}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800784c:	f023 0303 	bic.w	r3, r3, #3
 8007850:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007860:	f043 0302 	orr.w	r3, r3, #2
 8007864:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	f003 0301 	and.w	r3, r3, #1
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4a13      	ldr	r2, [pc, #76]	; (80078f4 <USB_CoreReset+0x64>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d901      	bls.n	80078ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e01b      	b.n	80078e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	daf2      	bge.n	800789c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f043 0201 	orr.w	r2, r3, #1
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3301      	adds	r3, #1
 80078ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <USB_CoreReset+0x64>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d901      	bls.n	80078d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e006      	b.n	80078e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d0f0      	beq.n	80078c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	00030d40 	.word	0x00030d40

080078f8 <__errno>:
 80078f8:	4b01      	ldr	r3, [pc, #4]	; (8007900 <__errno+0x8>)
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	2000002c 	.word	0x2000002c

08007904 <__libc_init_array>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	4d0d      	ldr	r5, [pc, #52]	; (800793c <__libc_init_array+0x38>)
 8007908:	4c0d      	ldr	r4, [pc, #52]	; (8007940 <__libc_init_array+0x3c>)
 800790a:	1b64      	subs	r4, r4, r5
 800790c:	10a4      	asrs	r4, r4, #2
 800790e:	2600      	movs	r6, #0
 8007910:	42a6      	cmp	r6, r4
 8007912:	d109      	bne.n	8007928 <__libc_init_array+0x24>
 8007914:	4d0b      	ldr	r5, [pc, #44]	; (8007944 <__libc_init_array+0x40>)
 8007916:	4c0c      	ldr	r4, [pc, #48]	; (8007948 <__libc_init_array+0x44>)
 8007918:	f001 fd40 	bl	800939c <_init>
 800791c:	1b64      	subs	r4, r4, r5
 800791e:	10a4      	asrs	r4, r4, #2
 8007920:	2600      	movs	r6, #0
 8007922:	42a6      	cmp	r6, r4
 8007924:	d105      	bne.n	8007932 <__libc_init_array+0x2e>
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	f855 3b04 	ldr.w	r3, [r5], #4
 800792c:	4798      	blx	r3
 800792e:	3601      	adds	r6, #1
 8007930:	e7ee      	b.n	8007910 <__libc_init_array+0xc>
 8007932:	f855 3b04 	ldr.w	r3, [r5], #4
 8007936:	4798      	blx	r3
 8007938:	3601      	adds	r6, #1
 800793a:	e7f2      	b.n	8007922 <__libc_init_array+0x1e>
 800793c:	0800ca70 	.word	0x0800ca70
 8007940:	0800ca70 	.word	0x0800ca70
 8007944:	0800ca70 	.word	0x0800ca70
 8007948:	0800ca74 	.word	0x0800ca74

0800794c <memcpy>:
 800794c:	440a      	add	r2, r1
 800794e:	4291      	cmp	r1, r2
 8007950:	f100 33ff 	add.w	r3, r0, #4294967295
 8007954:	d100      	bne.n	8007958 <memcpy+0xc>
 8007956:	4770      	bx	lr
 8007958:	b510      	push	{r4, lr}
 800795a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800795e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007962:	4291      	cmp	r1, r2
 8007964:	d1f9      	bne.n	800795a <memcpy+0xe>
 8007966:	bd10      	pop	{r4, pc}

08007968 <memmove>:
 8007968:	4288      	cmp	r0, r1
 800796a:	b510      	push	{r4, lr}
 800796c:	eb01 0402 	add.w	r4, r1, r2
 8007970:	d902      	bls.n	8007978 <memmove+0x10>
 8007972:	4284      	cmp	r4, r0
 8007974:	4623      	mov	r3, r4
 8007976:	d807      	bhi.n	8007988 <memmove+0x20>
 8007978:	1e43      	subs	r3, r0, #1
 800797a:	42a1      	cmp	r1, r4
 800797c:	d008      	beq.n	8007990 <memmove+0x28>
 800797e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007986:	e7f8      	b.n	800797a <memmove+0x12>
 8007988:	4402      	add	r2, r0
 800798a:	4601      	mov	r1, r0
 800798c:	428a      	cmp	r2, r1
 800798e:	d100      	bne.n	8007992 <memmove+0x2a>
 8007990:	bd10      	pop	{r4, pc}
 8007992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800799a:	e7f7      	b.n	800798c <memmove+0x24>

0800799c <memset>:
 800799c:	4402      	add	r2, r0
 800799e:	4603      	mov	r3, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memset+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e7f9      	b.n	80079a0 <memset+0x4>

080079ac <sniprintf>:
 80079ac:	b40c      	push	{r2, r3}
 80079ae:	b530      	push	{r4, r5, lr}
 80079b0:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <sniprintf+0x64>)
 80079b2:	1e0c      	subs	r4, r1, #0
 80079b4:	681d      	ldr	r5, [r3, #0]
 80079b6:	b09d      	sub	sp, #116	; 0x74
 80079b8:	da08      	bge.n	80079cc <sniprintf+0x20>
 80079ba:	238b      	movs	r3, #139	; 0x8b
 80079bc:	602b      	str	r3, [r5, #0]
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	b01d      	add	sp, #116	; 0x74
 80079c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079c8:	b002      	add	sp, #8
 80079ca:	4770      	bx	lr
 80079cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80079d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079d4:	bf14      	ite	ne
 80079d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079da:	4623      	moveq	r3, r4
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	9307      	str	r3, [sp, #28]
 80079e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079e4:	9002      	str	r0, [sp, #8]
 80079e6:	9006      	str	r0, [sp, #24]
 80079e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079ee:	ab21      	add	r3, sp, #132	; 0x84
 80079f0:	a902      	add	r1, sp, #8
 80079f2:	4628      	mov	r0, r5
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	f000 f869 	bl	8007acc <_svfiprintf_r>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	bfbc      	itt	lt
 80079fe:	238b      	movlt	r3, #139	; 0x8b
 8007a00:	602b      	strlt	r3, [r5, #0]
 8007a02:	2c00      	cmp	r4, #0
 8007a04:	d0dd      	beq.n	80079c2 <sniprintf+0x16>
 8007a06:	9b02      	ldr	r3, [sp, #8]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	701a      	strb	r2, [r3, #0]
 8007a0c:	e7d9      	b.n	80079c2 <sniprintf+0x16>
 8007a0e:	bf00      	nop
 8007a10:	2000002c 	.word	0x2000002c

08007a14 <__ssputs_r>:
 8007a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a18:	688e      	ldr	r6, [r1, #8]
 8007a1a:	429e      	cmp	r6, r3
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	4690      	mov	r8, r2
 8007a22:	461f      	mov	r7, r3
 8007a24:	d838      	bhi.n	8007a98 <__ssputs_r+0x84>
 8007a26:	898a      	ldrh	r2, [r1, #12]
 8007a28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a2c:	d032      	beq.n	8007a94 <__ssputs_r+0x80>
 8007a2e:	6825      	ldr	r5, [r4, #0]
 8007a30:	6909      	ldr	r1, [r1, #16]
 8007a32:	eba5 0901 	sub.w	r9, r5, r1
 8007a36:	6965      	ldr	r5, [r4, #20]
 8007a38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a40:	3301      	adds	r3, #1
 8007a42:	444b      	add	r3, r9
 8007a44:	106d      	asrs	r5, r5, #1
 8007a46:	429d      	cmp	r5, r3
 8007a48:	bf38      	it	cc
 8007a4a:	461d      	movcc	r5, r3
 8007a4c:	0553      	lsls	r3, r2, #21
 8007a4e:	d531      	bpl.n	8007ab4 <__ssputs_r+0xa0>
 8007a50:	4629      	mov	r1, r5
 8007a52:	f000 fb3b 	bl	80080cc <_malloc_r>
 8007a56:	4606      	mov	r6, r0
 8007a58:	b950      	cbnz	r0, 8007a70 <__ssputs_r+0x5c>
 8007a5a:	230c      	movs	r3, #12
 8007a5c:	f8ca 3000 	str.w	r3, [sl]
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a66:	81a3      	strh	r3, [r4, #12]
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a70:	6921      	ldr	r1, [r4, #16]
 8007a72:	464a      	mov	r2, r9
 8007a74:	f7ff ff6a 	bl	800794c <memcpy>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	6126      	str	r6, [r4, #16]
 8007a86:	6165      	str	r5, [r4, #20]
 8007a88:	444e      	add	r6, r9
 8007a8a:	eba5 0509 	sub.w	r5, r5, r9
 8007a8e:	6026      	str	r6, [r4, #0]
 8007a90:	60a5      	str	r5, [r4, #8]
 8007a92:	463e      	mov	r6, r7
 8007a94:	42be      	cmp	r6, r7
 8007a96:	d900      	bls.n	8007a9a <__ssputs_r+0x86>
 8007a98:	463e      	mov	r6, r7
 8007a9a:	6820      	ldr	r0, [r4, #0]
 8007a9c:	4632      	mov	r2, r6
 8007a9e:	4641      	mov	r1, r8
 8007aa0:	f7ff ff62 	bl	8007968 <memmove>
 8007aa4:	68a3      	ldr	r3, [r4, #8]
 8007aa6:	1b9b      	subs	r3, r3, r6
 8007aa8:	60a3      	str	r3, [r4, #8]
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	4433      	add	r3, r6
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e7db      	b.n	8007a6c <__ssputs_r+0x58>
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	f000 fb7d 	bl	80081b4 <_realloc_r>
 8007aba:	4606      	mov	r6, r0
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d1e1      	bne.n	8007a84 <__ssputs_r+0x70>
 8007ac0:	6921      	ldr	r1, [r4, #16]
 8007ac2:	4650      	mov	r0, sl
 8007ac4:	f000 fa96 	bl	8007ff4 <_free_r>
 8007ac8:	e7c7      	b.n	8007a5a <__ssputs_r+0x46>
	...

08007acc <_svfiprintf_r>:
 8007acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad0:	4698      	mov	r8, r3
 8007ad2:	898b      	ldrh	r3, [r1, #12]
 8007ad4:	061b      	lsls	r3, r3, #24
 8007ad6:	b09d      	sub	sp, #116	; 0x74
 8007ad8:	4607      	mov	r7, r0
 8007ada:	460d      	mov	r5, r1
 8007adc:	4614      	mov	r4, r2
 8007ade:	d50e      	bpl.n	8007afe <_svfiprintf_r+0x32>
 8007ae0:	690b      	ldr	r3, [r1, #16]
 8007ae2:	b963      	cbnz	r3, 8007afe <_svfiprintf_r+0x32>
 8007ae4:	2140      	movs	r1, #64	; 0x40
 8007ae6:	f000 faf1 	bl	80080cc <_malloc_r>
 8007aea:	6028      	str	r0, [r5, #0]
 8007aec:	6128      	str	r0, [r5, #16]
 8007aee:	b920      	cbnz	r0, 8007afa <_svfiprintf_r+0x2e>
 8007af0:	230c      	movs	r3, #12
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	f04f 30ff 	mov.w	r0, #4294967295
 8007af8:	e0d1      	b.n	8007c9e <_svfiprintf_r+0x1d2>
 8007afa:	2340      	movs	r3, #64	; 0x40
 8007afc:	616b      	str	r3, [r5, #20]
 8007afe:	2300      	movs	r3, #0
 8007b00:	9309      	str	r3, [sp, #36]	; 0x24
 8007b02:	2320      	movs	r3, #32
 8007b04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b08:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b0c:	2330      	movs	r3, #48	; 0x30
 8007b0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007cb8 <_svfiprintf_r+0x1ec>
 8007b12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b16:	f04f 0901 	mov.w	r9, #1
 8007b1a:	4623      	mov	r3, r4
 8007b1c:	469a      	mov	sl, r3
 8007b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b22:	b10a      	cbz	r2, 8007b28 <_svfiprintf_r+0x5c>
 8007b24:	2a25      	cmp	r2, #37	; 0x25
 8007b26:	d1f9      	bne.n	8007b1c <_svfiprintf_r+0x50>
 8007b28:	ebba 0b04 	subs.w	fp, sl, r4
 8007b2c:	d00b      	beq.n	8007b46 <_svfiprintf_r+0x7a>
 8007b2e:	465b      	mov	r3, fp
 8007b30:	4622      	mov	r2, r4
 8007b32:	4629      	mov	r1, r5
 8007b34:	4638      	mov	r0, r7
 8007b36:	f7ff ff6d 	bl	8007a14 <__ssputs_r>
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	f000 80aa 	beq.w	8007c94 <_svfiprintf_r+0x1c8>
 8007b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b42:	445a      	add	r2, fp
 8007b44:	9209      	str	r2, [sp, #36]	; 0x24
 8007b46:	f89a 3000 	ldrb.w	r3, [sl]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 80a2 	beq.w	8007c94 <_svfiprintf_r+0x1c8>
 8007b50:	2300      	movs	r3, #0
 8007b52:	f04f 32ff 	mov.w	r2, #4294967295
 8007b56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b5a:	f10a 0a01 	add.w	sl, sl, #1
 8007b5e:	9304      	str	r3, [sp, #16]
 8007b60:	9307      	str	r3, [sp, #28]
 8007b62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b66:	931a      	str	r3, [sp, #104]	; 0x68
 8007b68:	4654      	mov	r4, sl
 8007b6a:	2205      	movs	r2, #5
 8007b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b70:	4851      	ldr	r0, [pc, #324]	; (8007cb8 <_svfiprintf_r+0x1ec>)
 8007b72:	f7f8 fb55 	bl	8000220 <memchr>
 8007b76:	9a04      	ldr	r2, [sp, #16]
 8007b78:	b9d8      	cbnz	r0, 8007bb2 <_svfiprintf_r+0xe6>
 8007b7a:	06d0      	lsls	r0, r2, #27
 8007b7c:	bf44      	itt	mi
 8007b7e:	2320      	movmi	r3, #32
 8007b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b84:	0711      	lsls	r1, r2, #28
 8007b86:	bf44      	itt	mi
 8007b88:	232b      	movmi	r3, #43	; 0x2b
 8007b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b92:	2b2a      	cmp	r3, #42	; 0x2a
 8007b94:	d015      	beq.n	8007bc2 <_svfiprintf_r+0xf6>
 8007b96:	9a07      	ldr	r2, [sp, #28]
 8007b98:	4654      	mov	r4, sl
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	f04f 0c0a 	mov.w	ip, #10
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ba6:	3b30      	subs	r3, #48	; 0x30
 8007ba8:	2b09      	cmp	r3, #9
 8007baa:	d94e      	bls.n	8007c4a <_svfiprintf_r+0x17e>
 8007bac:	b1b0      	cbz	r0, 8007bdc <_svfiprintf_r+0x110>
 8007bae:	9207      	str	r2, [sp, #28]
 8007bb0:	e014      	b.n	8007bdc <_svfiprintf_r+0x110>
 8007bb2:	eba0 0308 	sub.w	r3, r0, r8
 8007bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	9304      	str	r3, [sp, #16]
 8007bbe:	46a2      	mov	sl, r4
 8007bc0:	e7d2      	b.n	8007b68 <_svfiprintf_r+0x9c>
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	1d19      	adds	r1, r3, #4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	9103      	str	r1, [sp, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bfbb      	ittet	lt
 8007bce:	425b      	neglt	r3, r3
 8007bd0:	f042 0202 	orrlt.w	r2, r2, #2
 8007bd4:	9307      	strge	r3, [sp, #28]
 8007bd6:	9307      	strlt	r3, [sp, #28]
 8007bd8:	bfb8      	it	lt
 8007bda:	9204      	strlt	r2, [sp, #16]
 8007bdc:	7823      	ldrb	r3, [r4, #0]
 8007bde:	2b2e      	cmp	r3, #46	; 0x2e
 8007be0:	d10c      	bne.n	8007bfc <_svfiprintf_r+0x130>
 8007be2:	7863      	ldrb	r3, [r4, #1]
 8007be4:	2b2a      	cmp	r3, #42	; 0x2a
 8007be6:	d135      	bne.n	8007c54 <_svfiprintf_r+0x188>
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	1d1a      	adds	r2, r3, #4
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	9203      	str	r2, [sp, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bfb8      	it	lt
 8007bf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bf8:	3402      	adds	r4, #2
 8007bfa:	9305      	str	r3, [sp, #20]
 8007bfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cc8 <_svfiprintf_r+0x1fc>
 8007c00:	7821      	ldrb	r1, [r4, #0]
 8007c02:	2203      	movs	r2, #3
 8007c04:	4650      	mov	r0, sl
 8007c06:	f7f8 fb0b 	bl	8000220 <memchr>
 8007c0a:	b140      	cbz	r0, 8007c1e <_svfiprintf_r+0x152>
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	eba0 000a 	sub.w	r0, r0, sl
 8007c12:	fa03 f000 	lsl.w	r0, r3, r0
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	4303      	orrs	r3, r0
 8007c1a:	3401      	adds	r4, #1
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c22:	4826      	ldr	r0, [pc, #152]	; (8007cbc <_svfiprintf_r+0x1f0>)
 8007c24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c28:	2206      	movs	r2, #6
 8007c2a:	f7f8 faf9 	bl	8000220 <memchr>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d038      	beq.n	8007ca4 <_svfiprintf_r+0x1d8>
 8007c32:	4b23      	ldr	r3, [pc, #140]	; (8007cc0 <_svfiprintf_r+0x1f4>)
 8007c34:	bb1b      	cbnz	r3, 8007c7e <_svfiprintf_r+0x1b2>
 8007c36:	9b03      	ldr	r3, [sp, #12]
 8007c38:	3307      	adds	r3, #7
 8007c3a:	f023 0307 	bic.w	r3, r3, #7
 8007c3e:	3308      	adds	r3, #8
 8007c40:	9303      	str	r3, [sp, #12]
 8007c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c44:	4433      	add	r3, r6
 8007c46:	9309      	str	r3, [sp, #36]	; 0x24
 8007c48:	e767      	b.n	8007b1a <_svfiprintf_r+0x4e>
 8007c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c4e:	460c      	mov	r4, r1
 8007c50:	2001      	movs	r0, #1
 8007c52:	e7a5      	b.n	8007ba0 <_svfiprintf_r+0xd4>
 8007c54:	2300      	movs	r3, #0
 8007c56:	3401      	adds	r4, #1
 8007c58:	9305      	str	r3, [sp, #20]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	f04f 0c0a 	mov.w	ip, #10
 8007c60:	4620      	mov	r0, r4
 8007c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c66:	3a30      	subs	r2, #48	; 0x30
 8007c68:	2a09      	cmp	r2, #9
 8007c6a:	d903      	bls.n	8007c74 <_svfiprintf_r+0x1a8>
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0c5      	beq.n	8007bfc <_svfiprintf_r+0x130>
 8007c70:	9105      	str	r1, [sp, #20]
 8007c72:	e7c3      	b.n	8007bfc <_svfiprintf_r+0x130>
 8007c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c78:	4604      	mov	r4, r0
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e7f0      	b.n	8007c60 <_svfiprintf_r+0x194>
 8007c7e:	ab03      	add	r3, sp, #12
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	462a      	mov	r2, r5
 8007c84:	4b0f      	ldr	r3, [pc, #60]	; (8007cc4 <_svfiprintf_r+0x1f8>)
 8007c86:	a904      	add	r1, sp, #16
 8007c88:	4638      	mov	r0, r7
 8007c8a:	f3af 8000 	nop.w
 8007c8e:	1c42      	adds	r2, r0, #1
 8007c90:	4606      	mov	r6, r0
 8007c92:	d1d6      	bne.n	8007c42 <_svfiprintf_r+0x176>
 8007c94:	89ab      	ldrh	r3, [r5, #12]
 8007c96:	065b      	lsls	r3, r3, #25
 8007c98:	f53f af2c 	bmi.w	8007af4 <_svfiprintf_r+0x28>
 8007c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c9e:	b01d      	add	sp, #116	; 0x74
 8007ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca4:	ab03      	add	r3, sp, #12
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	462a      	mov	r2, r5
 8007caa:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <_svfiprintf_r+0x1f8>)
 8007cac:	a904      	add	r1, sp, #16
 8007cae:	4638      	mov	r0, r7
 8007cb0:	f000 f87a 	bl	8007da8 <_printf_i>
 8007cb4:	e7eb      	b.n	8007c8e <_svfiprintf_r+0x1c2>
 8007cb6:	bf00      	nop
 8007cb8:	0800c858 	.word	0x0800c858
 8007cbc:	0800c862 	.word	0x0800c862
 8007cc0:	00000000 	.word	0x00000000
 8007cc4:	08007a15 	.word	0x08007a15
 8007cc8:	0800c85e 	.word	0x0800c85e

08007ccc <_printf_common>:
 8007ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	4699      	mov	r9, r3
 8007cd4:	688a      	ldr	r2, [r1, #8]
 8007cd6:	690b      	ldr	r3, [r1, #16]
 8007cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	bfb8      	it	lt
 8007ce0:	4613      	movlt	r3, r2
 8007ce2:	6033      	str	r3, [r6, #0]
 8007ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ce8:	4607      	mov	r7, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	b10a      	cbz	r2, 8007cf2 <_printf_common+0x26>
 8007cee:	3301      	adds	r3, #1
 8007cf0:	6033      	str	r3, [r6, #0]
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	0699      	lsls	r1, r3, #26
 8007cf6:	bf42      	ittt	mi
 8007cf8:	6833      	ldrmi	r3, [r6, #0]
 8007cfa:	3302      	addmi	r3, #2
 8007cfc:	6033      	strmi	r3, [r6, #0]
 8007cfe:	6825      	ldr	r5, [r4, #0]
 8007d00:	f015 0506 	ands.w	r5, r5, #6
 8007d04:	d106      	bne.n	8007d14 <_printf_common+0x48>
 8007d06:	f104 0a19 	add.w	sl, r4, #25
 8007d0a:	68e3      	ldr	r3, [r4, #12]
 8007d0c:	6832      	ldr	r2, [r6, #0]
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc26      	bgt.n	8007d62 <_printf_common+0x96>
 8007d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d18:	1e13      	subs	r3, r2, #0
 8007d1a:	6822      	ldr	r2, [r4, #0]
 8007d1c:	bf18      	it	ne
 8007d1e:	2301      	movne	r3, #1
 8007d20:	0692      	lsls	r2, r2, #26
 8007d22:	d42b      	bmi.n	8007d7c <_printf_common+0xb0>
 8007d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d28:	4649      	mov	r1, r9
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	47c0      	blx	r8
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d01e      	beq.n	8007d70 <_printf_common+0xa4>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	68e5      	ldr	r5, [r4, #12]
 8007d36:	6832      	ldr	r2, [r6, #0]
 8007d38:	f003 0306 	and.w	r3, r3, #6
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	bf08      	it	eq
 8007d40:	1aad      	subeq	r5, r5, r2
 8007d42:	68a3      	ldr	r3, [r4, #8]
 8007d44:	6922      	ldr	r2, [r4, #16]
 8007d46:	bf0c      	ite	eq
 8007d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d4c:	2500      	movne	r5, #0
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	bfc4      	itt	gt
 8007d52:	1a9b      	subgt	r3, r3, r2
 8007d54:	18ed      	addgt	r5, r5, r3
 8007d56:	2600      	movs	r6, #0
 8007d58:	341a      	adds	r4, #26
 8007d5a:	42b5      	cmp	r5, r6
 8007d5c:	d11a      	bne.n	8007d94 <_printf_common+0xc8>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	e008      	b.n	8007d74 <_printf_common+0xa8>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4652      	mov	r2, sl
 8007d66:	4649      	mov	r1, r9
 8007d68:	4638      	mov	r0, r7
 8007d6a:	47c0      	blx	r8
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d103      	bne.n	8007d78 <_printf_common+0xac>
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295
 8007d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d78:	3501      	adds	r5, #1
 8007d7a:	e7c6      	b.n	8007d0a <_printf_common+0x3e>
 8007d7c:	18e1      	adds	r1, r4, r3
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	2030      	movs	r0, #48	; 0x30
 8007d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d86:	4422      	add	r2, r4
 8007d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d90:	3302      	adds	r3, #2
 8007d92:	e7c7      	b.n	8007d24 <_printf_common+0x58>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4622      	mov	r2, r4
 8007d98:	4649      	mov	r1, r9
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	47c0      	blx	r8
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d0e6      	beq.n	8007d70 <_printf_common+0xa4>
 8007da2:	3601      	adds	r6, #1
 8007da4:	e7d9      	b.n	8007d5a <_printf_common+0x8e>
	...

08007da8 <_printf_i>:
 8007da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dac:	7e0f      	ldrb	r7, [r1, #24]
 8007dae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007db0:	2f78      	cmp	r7, #120	; 0x78
 8007db2:	4691      	mov	r9, r2
 8007db4:	4680      	mov	r8, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	469a      	mov	sl, r3
 8007dba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dbe:	d807      	bhi.n	8007dd0 <_printf_i+0x28>
 8007dc0:	2f62      	cmp	r7, #98	; 0x62
 8007dc2:	d80a      	bhi.n	8007dda <_printf_i+0x32>
 8007dc4:	2f00      	cmp	r7, #0
 8007dc6:	f000 80d8 	beq.w	8007f7a <_printf_i+0x1d2>
 8007dca:	2f58      	cmp	r7, #88	; 0x58
 8007dcc:	f000 80a3 	beq.w	8007f16 <_printf_i+0x16e>
 8007dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dd8:	e03a      	b.n	8007e50 <_printf_i+0xa8>
 8007dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dde:	2b15      	cmp	r3, #21
 8007de0:	d8f6      	bhi.n	8007dd0 <_printf_i+0x28>
 8007de2:	a101      	add	r1, pc, #4	; (adr r1, 8007de8 <_printf_i+0x40>)
 8007de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007de8:	08007e41 	.word	0x08007e41
 8007dec:	08007e55 	.word	0x08007e55
 8007df0:	08007dd1 	.word	0x08007dd1
 8007df4:	08007dd1 	.word	0x08007dd1
 8007df8:	08007dd1 	.word	0x08007dd1
 8007dfc:	08007dd1 	.word	0x08007dd1
 8007e00:	08007e55 	.word	0x08007e55
 8007e04:	08007dd1 	.word	0x08007dd1
 8007e08:	08007dd1 	.word	0x08007dd1
 8007e0c:	08007dd1 	.word	0x08007dd1
 8007e10:	08007dd1 	.word	0x08007dd1
 8007e14:	08007f61 	.word	0x08007f61
 8007e18:	08007e85 	.word	0x08007e85
 8007e1c:	08007f43 	.word	0x08007f43
 8007e20:	08007dd1 	.word	0x08007dd1
 8007e24:	08007dd1 	.word	0x08007dd1
 8007e28:	08007f83 	.word	0x08007f83
 8007e2c:	08007dd1 	.word	0x08007dd1
 8007e30:	08007e85 	.word	0x08007e85
 8007e34:	08007dd1 	.word	0x08007dd1
 8007e38:	08007dd1 	.word	0x08007dd1
 8007e3c:	08007f4b 	.word	0x08007f4b
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	1d1a      	adds	r2, r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	602a      	str	r2, [r5, #0]
 8007e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0a3      	b.n	8007f9c <_printf_i+0x1f4>
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	6829      	ldr	r1, [r5, #0]
 8007e58:	0606      	lsls	r6, r0, #24
 8007e5a:	f101 0304 	add.w	r3, r1, #4
 8007e5e:	d50a      	bpl.n	8007e76 <_printf_i+0xce>
 8007e60:	680e      	ldr	r6, [r1, #0]
 8007e62:	602b      	str	r3, [r5, #0]
 8007e64:	2e00      	cmp	r6, #0
 8007e66:	da03      	bge.n	8007e70 <_printf_i+0xc8>
 8007e68:	232d      	movs	r3, #45	; 0x2d
 8007e6a:	4276      	negs	r6, r6
 8007e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e70:	485e      	ldr	r0, [pc, #376]	; (8007fec <_printf_i+0x244>)
 8007e72:	230a      	movs	r3, #10
 8007e74:	e019      	b.n	8007eaa <_printf_i+0x102>
 8007e76:	680e      	ldr	r6, [r1, #0]
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e7e:	bf18      	it	ne
 8007e80:	b236      	sxthne	r6, r6
 8007e82:	e7ef      	b.n	8007e64 <_printf_i+0xbc>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	6820      	ldr	r0, [r4, #0]
 8007e88:	1d19      	adds	r1, r3, #4
 8007e8a:	6029      	str	r1, [r5, #0]
 8007e8c:	0601      	lsls	r1, r0, #24
 8007e8e:	d501      	bpl.n	8007e94 <_printf_i+0xec>
 8007e90:	681e      	ldr	r6, [r3, #0]
 8007e92:	e002      	b.n	8007e9a <_printf_i+0xf2>
 8007e94:	0646      	lsls	r6, r0, #25
 8007e96:	d5fb      	bpl.n	8007e90 <_printf_i+0xe8>
 8007e98:	881e      	ldrh	r6, [r3, #0]
 8007e9a:	4854      	ldr	r0, [pc, #336]	; (8007fec <_printf_i+0x244>)
 8007e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2308      	moveq	r3, #8
 8007ea2:	230a      	movne	r3, #10
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eaa:	6865      	ldr	r5, [r4, #4]
 8007eac:	60a5      	str	r5, [r4, #8]
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	bfa2      	ittt	ge
 8007eb2:	6821      	ldrge	r1, [r4, #0]
 8007eb4:	f021 0104 	bicge.w	r1, r1, #4
 8007eb8:	6021      	strge	r1, [r4, #0]
 8007eba:	b90e      	cbnz	r6, 8007ec0 <_printf_i+0x118>
 8007ebc:	2d00      	cmp	r5, #0
 8007ebe:	d04d      	beq.n	8007f5c <_printf_i+0x1b4>
 8007ec0:	4615      	mov	r5, r2
 8007ec2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ec6:	fb03 6711 	mls	r7, r3, r1, r6
 8007eca:	5dc7      	ldrb	r7, [r0, r7]
 8007ecc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ed0:	4637      	mov	r7, r6
 8007ed2:	42bb      	cmp	r3, r7
 8007ed4:	460e      	mov	r6, r1
 8007ed6:	d9f4      	bls.n	8007ec2 <_printf_i+0x11a>
 8007ed8:	2b08      	cmp	r3, #8
 8007eda:	d10b      	bne.n	8007ef4 <_printf_i+0x14c>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	07de      	lsls	r6, r3, #31
 8007ee0:	d508      	bpl.n	8007ef4 <_printf_i+0x14c>
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	6861      	ldr	r1, [r4, #4]
 8007ee6:	4299      	cmp	r1, r3
 8007ee8:	bfde      	ittt	le
 8007eea:	2330      	movle	r3, #48	; 0x30
 8007eec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ef0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ef4:	1b52      	subs	r2, r2, r5
 8007ef6:	6122      	str	r2, [r4, #16]
 8007ef8:	f8cd a000 	str.w	sl, [sp]
 8007efc:	464b      	mov	r3, r9
 8007efe:	aa03      	add	r2, sp, #12
 8007f00:	4621      	mov	r1, r4
 8007f02:	4640      	mov	r0, r8
 8007f04:	f7ff fee2 	bl	8007ccc <_printf_common>
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d14c      	bne.n	8007fa6 <_printf_i+0x1fe>
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f10:	b004      	add	sp, #16
 8007f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f16:	4835      	ldr	r0, [pc, #212]	; (8007fec <_printf_i+0x244>)
 8007f18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f1c:	6829      	ldr	r1, [r5, #0]
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f24:	6029      	str	r1, [r5, #0]
 8007f26:	061d      	lsls	r5, r3, #24
 8007f28:	d514      	bpl.n	8007f54 <_printf_i+0x1ac>
 8007f2a:	07df      	lsls	r7, r3, #31
 8007f2c:	bf44      	itt	mi
 8007f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007f32:	6023      	strmi	r3, [r4, #0]
 8007f34:	b91e      	cbnz	r6, 8007f3e <_printf_i+0x196>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	f023 0320 	bic.w	r3, r3, #32
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	2310      	movs	r3, #16
 8007f40:	e7b0      	b.n	8007ea4 <_printf_i+0xfc>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	f043 0320 	orr.w	r3, r3, #32
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	2378      	movs	r3, #120	; 0x78
 8007f4c:	4828      	ldr	r0, [pc, #160]	; (8007ff0 <_printf_i+0x248>)
 8007f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f52:	e7e3      	b.n	8007f1c <_printf_i+0x174>
 8007f54:	0659      	lsls	r1, r3, #25
 8007f56:	bf48      	it	mi
 8007f58:	b2b6      	uxthmi	r6, r6
 8007f5a:	e7e6      	b.n	8007f2a <_printf_i+0x182>
 8007f5c:	4615      	mov	r5, r2
 8007f5e:	e7bb      	b.n	8007ed8 <_printf_i+0x130>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	6826      	ldr	r6, [r4, #0]
 8007f64:	6961      	ldr	r1, [r4, #20]
 8007f66:	1d18      	adds	r0, r3, #4
 8007f68:	6028      	str	r0, [r5, #0]
 8007f6a:	0635      	lsls	r5, r6, #24
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	d501      	bpl.n	8007f74 <_printf_i+0x1cc>
 8007f70:	6019      	str	r1, [r3, #0]
 8007f72:	e002      	b.n	8007f7a <_printf_i+0x1d2>
 8007f74:	0670      	lsls	r0, r6, #25
 8007f76:	d5fb      	bpl.n	8007f70 <_printf_i+0x1c8>
 8007f78:	8019      	strh	r1, [r3, #0]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	6123      	str	r3, [r4, #16]
 8007f7e:	4615      	mov	r5, r2
 8007f80:	e7ba      	b.n	8007ef8 <_printf_i+0x150>
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	1d1a      	adds	r2, r3, #4
 8007f86:	602a      	str	r2, [r5, #0]
 8007f88:	681d      	ldr	r5, [r3, #0]
 8007f8a:	6862      	ldr	r2, [r4, #4]
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f7f8 f946 	bl	8000220 <memchr>
 8007f94:	b108      	cbz	r0, 8007f9a <_printf_i+0x1f2>
 8007f96:	1b40      	subs	r0, r0, r5
 8007f98:	6060      	str	r0, [r4, #4]
 8007f9a:	6863      	ldr	r3, [r4, #4]
 8007f9c:	6123      	str	r3, [r4, #16]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa4:	e7a8      	b.n	8007ef8 <_printf_i+0x150>
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	462a      	mov	r2, r5
 8007faa:	4649      	mov	r1, r9
 8007fac:	4640      	mov	r0, r8
 8007fae:	47d0      	blx	sl
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d0ab      	beq.n	8007f0c <_printf_i+0x164>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	079b      	lsls	r3, r3, #30
 8007fb8:	d413      	bmi.n	8007fe2 <_printf_i+0x23a>
 8007fba:	68e0      	ldr	r0, [r4, #12]
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	4298      	cmp	r0, r3
 8007fc0:	bfb8      	it	lt
 8007fc2:	4618      	movlt	r0, r3
 8007fc4:	e7a4      	b.n	8007f10 <_printf_i+0x168>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4632      	mov	r2, r6
 8007fca:	4649      	mov	r1, r9
 8007fcc:	4640      	mov	r0, r8
 8007fce:	47d0      	blx	sl
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d09b      	beq.n	8007f0c <_printf_i+0x164>
 8007fd4:	3501      	adds	r5, #1
 8007fd6:	68e3      	ldr	r3, [r4, #12]
 8007fd8:	9903      	ldr	r1, [sp, #12]
 8007fda:	1a5b      	subs	r3, r3, r1
 8007fdc:	42ab      	cmp	r3, r5
 8007fde:	dcf2      	bgt.n	8007fc6 <_printf_i+0x21e>
 8007fe0:	e7eb      	b.n	8007fba <_printf_i+0x212>
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	f104 0619 	add.w	r6, r4, #25
 8007fe8:	e7f5      	b.n	8007fd6 <_printf_i+0x22e>
 8007fea:	bf00      	nop
 8007fec:	0800c869 	.word	0x0800c869
 8007ff0:	0800c87a 	.word	0x0800c87a

08007ff4 <_free_r>:
 8007ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	d044      	beq.n	8008084 <_free_r+0x90>
 8007ffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ffe:	9001      	str	r0, [sp, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f1a1 0404 	sub.w	r4, r1, #4
 8008006:	bfb8      	it	lt
 8008008:	18e4      	addlt	r4, r4, r3
 800800a:	f000 f913 	bl	8008234 <__malloc_lock>
 800800e:	4a1e      	ldr	r2, [pc, #120]	; (8008088 <_free_r+0x94>)
 8008010:	9801      	ldr	r0, [sp, #4]
 8008012:	6813      	ldr	r3, [r2, #0]
 8008014:	b933      	cbnz	r3, 8008024 <_free_r+0x30>
 8008016:	6063      	str	r3, [r4, #4]
 8008018:	6014      	str	r4, [r2, #0]
 800801a:	b003      	add	sp, #12
 800801c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008020:	f000 b90e 	b.w	8008240 <__malloc_unlock>
 8008024:	42a3      	cmp	r3, r4
 8008026:	d908      	bls.n	800803a <_free_r+0x46>
 8008028:	6825      	ldr	r5, [r4, #0]
 800802a:	1961      	adds	r1, r4, r5
 800802c:	428b      	cmp	r3, r1
 800802e:	bf01      	itttt	eq
 8008030:	6819      	ldreq	r1, [r3, #0]
 8008032:	685b      	ldreq	r3, [r3, #4]
 8008034:	1949      	addeq	r1, r1, r5
 8008036:	6021      	streq	r1, [r4, #0]
 8008038:	e7ed      	b.n	8008016 <_free_r+0x22>
 800803a:	461a      	mov	r2, r3
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	b10b      	cbz	r3, 8008044 <_free_r+0x50>
 8008040:	42a3      	cmp	r3, r4
 8008042:	d9fa      	bls.n	800803a <_free_r+0x46>
 8008044:	6811      	ldr	r1, [r2, #0]
 8008046:	1855      	adds	r5, r2, r1
 8008048:	42a5      	cmp	r5, r4
 800804a:	d10b      	bne.n	8008064 <_free_r+0x70>
 800804c:	6824      	ldr	r4, [r4, #0]
 800804e:	4421      	add	r1, r4
 8008050:	1854      	adds	r4, r2, r1
 8008052:	42a3      	cmp	r3, r4
 8008054:	6011      	str	r1, [r2, #0]
 8008056:	d1e0      	bne.n	800801a <_free_r+0x26>
 8008058:	681c      	ldr	r4, [r3, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	6053      	str	r3, [r2, #4]
 800805e:	4421      	add	r1, r4
 8008060:	6011      	str	r1, [r2, #0]
 8008062:	e7da      	b.n	800801a <_free_r+0x26>
 8008064:	d902      	bls.n	800806c <_free_r+0x78>
 8008066:	230c      	movs	r3, #12
 8008068:	6003      	str	r3, [r0, #0]
 800806a:	e7d6      	b.n	800801a <_free_r+0x26>
 800806c:	6825      	ldr	r5, [r4, #0]
 800806e:	1961      	adds	r1, r4, r5
 8008070:	428b      	cmp	r3, r1
 8008072:	bf04      	itt	eq
 8008074:	6819      	ldreq	r1, [r3, #0]
 8008076:	685b      	ldreq	r3, [r3, #4]
 8008078:	6063      	str	r3, [r4, #4]
 800807a:	bf04      	itt	eq
 800807c:	1949      	addeq	r1, r1, r5
 800807e:	6021      	streq	r1, [r4, #0]
 8008080:	6054      	str	r4, [r2, #4]
 8008082:	e7ca      	b.n	800801a <_free_r+0x26>
 8008084:	b003      	add	sp, #12
 8008086:	bd30      	pop	{r4, r5, pc}
 8008088:	20000b00 	.word	0x20000b00

0800808c <sbrk_aligned>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4e0e      	ldr	r6, [pc, #56]	; (80080c8 <sbrk_aligned+0x3c>)
 8008090:	460c      	mov	r4, r1
 8008092:	6831      	ldr	r1, [r6, #0]
 8008094:	4605      	mov	r5, r0
 8008096:	b911      	cbnz	r1, 800809e <sbrk_aligned+0x12>
 8008098:	f000 f8bc 	bl	8008214 <_sbrk_r>
 800809c:	6030      	str	r0, [r6, #0]
 800809e:	4621      	mov	r1, r4
 80080a0:	4628      	mov	r0, r5
 80080a2:	f000 f8b7 	bl	8008214 <_sbrk_r>
 80080a6:	1c43      	adds	r3, r0, #1
 80080a8:	d00a      	beq.n	80080c0 <sbrk_aligned+0x34>
 80080aa:	1cc4      	adds	r4, r0, #3
 80080ac:	f024 0403 	bic.w	r4, r4, #3
 80080b0:	42a0      	cmp	r0, r4
 80080b2:	d007      	beq.n	80080c4 <sbrk_aligned+0x38>
 80080b4:	1a21      	subs	r1, r4, r0
 80080b6:	4628      	mov	r0, r5
 80080b8:	f000 f8ac 	bl	8008214 <_sbrk_r>
 80080bc:	3001      	adds	r0, #1
 80080be:	d101      	bne.n	80080c4 <sbrk_aligned+0x38>
 80080c0:	f04f 34ff 	mov.w	r4, #4294967295
 80080c4:	4620      	mov	r0, r4
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	20000b04 	.word	0x20000b04

080080cc <_malloc_r>:
 80080cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d0:	1ccd      	adds	r5, r1, #3
 80080d2:	f025 0503 	bic.w	r5, r5, #3
 80080d6:	3508      	adds	r5, #8
 80080d8:	2d0c      	cmp	r5, #12
 80080da:	bf38      	it	cc
 80080dc:	250c      	movcc	r5, #12
 80080de:	2d00      	cmp	r5, #0
 80080e0:	4607      	mov	r7, r0
 80080e2:	db01      	blt.n	80080e8 <_malloc_r+0x1c>
 80080e4:	42a9      	cmp	r1, r5
 80080e6:	d905      	bls.n	80080f4 <_malloc_r+0x28>
 80080e8:	230c      	movs	r3, #12
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	2600      	movs	r6, #0
 80080ee:	4630      	mov	r0, r6
 80080f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080f4:	4e2e      	ldr	r6, [pc, #184]	; (80081b0 <_malloc_r+0xe4>)
 80080f6:	f000 f89d 	bl	8008234 <__malloc_lock>
 80080fa:	6833      	ldr	r3, [r6, #0]
 80080fc:	461c      	mov	r4, r3
 80080fe:	bb34      	cbnz	r4, 800814e <_malloc_r+0x82>
 8008100:	4629      	mov	r1, r5
 8008102:	4638      	mov	r0, r7
 8008104:	f7ff ffc2 	bl	800808c <sbrk_aligned>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	4604      	mov	r4, r0
 800810c:	d14d      	bne.n	80081aa <_malloc_r+0xde>
 800810e:	6834      	ldr	r4, [r6, #0]
 8008110:	4626      	mov	r6, r4
 8008112:	2e00      	cmp	r6, #0
 8008114:	d140      	bne.n	8008198 <_malloc_r+0xcc>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	4631      	mov	r1, r6
 800811a:	4638      	mov	r0, r7
 800811c:	eb04 0803 	add.w	r8, r4, r3
 8008120:	f000 f878 	bl	8008214 <_sbrk_r>
 8008124:	4580      	cmp	r8, r0
 8008126:	d13a      	bne.n	800819e <_malloc_r+0xd2>
 8008128:	6821      	ldr	r1, [r4, #0]
 800812a:	3503      	adds	r5, #3
 800812c:	1a6d      	subs	r5, r5, r1
 800812e:	f025 0503 	bic.w	r5, r5, #3
 8008132:	3508      	adds	r5, #8
 8008134:	2d0c      	cmp	r5, #12
 8008136:	bf38      	it	cc
 8008138:	250c      	movcc	r5, #12
 800813a:	4629      	mov	r1, r5
 800813c:	4638      	mov	r0, r7
 800813e:	f7ff ffa5 	bl	800808c <sbrk_aligned>
 8008142:	3001      	adds	r0, #1
 8008144:	d02b      	beq.n	800819e <_malloc_r+0xd2>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	442b      	add	r3, r5
 800814a:	6023      	str	r3, [r4, #0]
 800814c:	e00e      	b.n	800816c <_malloc_r+0xa0>
 800814e:	6822      	ldr	r2, [r4, #0]
 8008150:	1b52      	subs	r2, r2, r5
 8008152:	d41e      	bmi.n	8008192 <_malloc_r+0xc6>
 8008154:	2a0b      	cmp	r2, #11
 8008156:	d916      	bls.n	8008186 <_malloc_r+0xba>
 8008158:	1961      	adds	r1, r4, r5
 800815a:	42a3      	cmp	r3, r4
 800815c:	6025      	str	r5, [r4, #0]
 800815e:	bf18      	it	ne
 8008160:	6059      	strne	r1, [r3, #4]
 8008162:	6863      	ldr	r3, [r4, #4]
 8008164:	bf08      	it	eq
 8008166:	6031      	streq	r1, [r6, #0]
 8008168:	5162      	str	r2, [r4, r5]
 800816a:	604b      	str	r3, [r1, #4]
 800816c:	4638      	mov	r0, r7
 800816e:	f104 060b 	add.w	r6, r4, #11
 8008172:	f000 f865 	bl	8008240 <__malloc_unlock>
 8008176:	f026 0607 	bic.w	r6, r6, #7
 800817a:	1d23      	adds	r3, r4, #4
 800817c:	1af2      	subs	r2, r6, r3
 800817e:	d0b6      	beq.n	80080ee <_malloc_r+0x22>
 8008180:	1b9b      	subs	r3, r3, r6
 8008182:	50a3      	str	r3, [r4, r2]
 8008184:	e7b3      	b.n	80080ee <_malloc_r+0x22>
 8008186:	6862      	ldr	r2, [r4, #4]
 8008188:	42a3      	cmp	r3, r4
 800818a:	bf0c      	ite	eq
 800818c:	6032      	streq	r2, [r6, #0]
 800818e:	605a      	strne	r2, [r3, #4]
 8008190:	e7ec      	b.n	800816c <_malloc_r+0xa0>
 8008192:	4623      	mov	r3, r4
 8008194:	6864      	ldr	r4, [r4, #4]
 8008196:	e7b2      	b.n	80080fe <_malloc_r+0x32>
 8008198:	4634      	mov	r4, r6
 800819a:	6876      	ldr	r6, [r6, #4]
 800819c:	e7b9      	b.n	8008112 <_malloc_r+0x46>
 800819e:	230c      	movs	r3, #12
 80081a0:	603b      	str	r3, [r7, #0]
 80081a2:	4638      	mov	r0, r7
 80081a4:	f000 f84c 	bl	8008240 <__malloc_unlock>
 80081a8:	e7a1      	b.n	80080ee <_malloc_r+0x22>
 80081aa:	6025      	str	r5, [r4, #0]
 80081ac:	e7de      	b.n	800816c <_malloc_r+0xa0>
 80081ae:	bf00      	nop
 80081b0:	20000b00 	.word	0x20000b00

080081b4 <_realloc_r>:
 80081b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b8:	4680      	mov	r8, r0
 80081ba:	4614      	mov	r4, r2
 80081bc:	460e      	mov	r6, r1
 80081be:	b921      	cbnz	r1, 80081ca <_realloc_r+0x16>
 80081c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081c4:	4611      	mov	r1, r2
 80081c6:	f7ff bf81 	b.w	80080cc <_malloc_r>
 80081ca:	b92a      	cbnz	r2, 80081d8 <_realloc_r+0x24>
 80081cc:	f7ff ff12 	bl	8007ff4 <_free_r>
 80081d0:	4625      	mov	r5, r4
 80081d2:	4628      	mov	r0, r5
 80081d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d8:	f000 f838 	bl	800824c <_malloc_usable_size_r>
 80081dc:	4284      	cmp	r4, r0
 80081de:	4607      	mov	r7, r0
 80081e0:	d802      	bhi.n	80081e8 <_realloc_r+0x34>
 80081e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081e6:	d812      	bhi.n	800820e <_realloc_r+0x5a>
 80081e8:	4621      	mov	r1, r4
 80081ea:	4640      	mov	r0, r8
 80081ec:	f7ff ff6e 	bl	80080cc <_malloc_r>
 80081f0:	4605      	mov	r5, r0
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d0ed      	beq.n	80081d2 <_realloc_r+0x1e>
 80081f6:	42bc      	cmp	r4, r7
 80081f8:	4622      	mov	r2, r4
 80081fa:	4631      	mov	r1, r6
 80081fc:	bf28      	it	cs
 80081fe:	463a      	movcs	r2, r7
 8008200:	f7ff fba4 	bl	800794c <memcpy>
 8008204:	4631      	mov	r1, r6
 8008206:	4640      	mov	r0, r8
 8008208:	f7ff fef4 	bl	8007ff4 <_free_r>
 800820c:	e7e1      	b.n	80081d2 <_realloc_r+0x1e>
 800820e:	4635      	mov	r5, r6
 8008210:	e7df      	b.n	80081d2 <_realloc_r+0x1e>
	...

08008214 <_sbrk_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d06      	ldr	r5, [pc, #24]	; (8008230 <_sbrk_r+0x1c>)
 8008218:	2300      	movs	r3, #0
 800821a:	4604      	mov	r4, r0
 800821c:	4608      	mov	r0, r1
 800821e:	602b      	str	r3, [r5, #0]
 8008220:	f7fa fbe0 	bl	80029e4 <_sbrk>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_sbrk_r+0x1a>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_sbrk_r+0x1a>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	20000b08 	.word	0x20000b08

08008234 <__malloc_lock>:
 8008234:	4801      	ldr	r0, [pc, #4]	; (800823c <__malloc_lock+0x8>)
 8008236:	f000 b811 	b.w	800825c <__retarget_lock_acquire_recursive>
 800823a:	bf00      	nop
 800823c:	20000b0c 	.word	0x20000b0c

08008240 <__malloc_unlock>:
 8008240:	4801      	ldr	r0, [pc, #4]	; (8008248 <__malloc_unlock+0x8>)
 8008242:	f000 b80c 	b.w	800825e <__retarget_lock_release_recursive>
 8008246:	bf00      	nop
 8008248:	20000b0c 	.word	0x20000b0c

0800824c <_malloc_usable_size_r>:
 800824c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008250:	1f18      	subs	r0, r3, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	bfbc      	itt	lt
 8008256:	580b      	ldrlt	r3, [r1, r0]
 8008258:	18c0      	addlt	r0, r0, r3
 800825a:	4770      	bx	lr

0800825c <__retarget_lock_acquire_recursive>:
 800825c:	4770      	bx	lr

0800825e <__retarget_lock_release_recursive>:
 800825e:	4770      	bx	lr

08008260 <cos>:
 8008260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008262:	ec53 2b10 	vmov	r2, r3, d0
 8008266:	4826      	ldr	r0, [pc, #152]	; (8008300 <cos+0xa0>)
 8008268:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800826c:	4281      	cmp	r1, r0
 800826e:	dc06      	bgt.n	800827e <cos+0x1e>
 8008270:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80082f8 <cos+0x98>
 8008274:	b005      	add	sp, #20
 8008276:	f85d eb04 	ldr.w	lr, [sp], #4
 800827a:	f000 baa9 	b.w	80087d0 <__kernel_cos>
 800827e:	4821      	ldr	r0, [pc, #132]	; (8008304 <cos+0xa4>)
 8008280:	4281      	cmp	r1, r0
 8008282:	dd09      	ble.n	8008298 <cos+0x38>
 8008284:	ee10 0a10 	vmov	r0, s0
 8008288:	4619      	mov	r1, r3
 800828a:	f7f8 f81d 	bl	80002c8 <__aeabi_dsub>
 800828e:	ec41 0b10 	vmov	d0, r0, r1
 8008292:	b005      	add	sp, #20
 8008294:	f85d fb04 	ldr.w	pc, [sp], #4
 8008298:	4668      	mov	r0, sp
 800829a:	f000 f88d 	bl	80083b8 <__ieee754_rem_pio2>
 800829e:	f000 0003 	and.w	r0, r0, #3
 80082a2:	2801      	cmp	r0, #1
 80082a4:	d00b      	beq.n	80082be <cos+0x5e>
 80082a6:	2802      	cmp	r0, #2
 80082a8:	d016      	beq.n	80082d8 <cos+0x78>
 80082aa:	b9e0      	cbnz	r0, 80082e6 <cos+0x86>
 80082ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082b0:	ed9d 0b00 	vldr	d0, [sp]
 80082b4:	f000 fa8c 	bl	80087d0 <__kernel_cos>
 80082b8:	ec51 0b10 	vmov	r0, r1, d0
 80082bc:	e7e7      	b.n	800828e <cos+0x2e>
 80082be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082c2:	ed9d 0b00 	vldr	d0, [sp]
 80082c6:	f000 fe9b 	bl	8009000 <__kernel_sin>
 80082ca:	ec53 2b10 	vmov	r2, r3, d0
 80082ce:	ee10 0a10 	vmov	r0, s0
 80082d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80082d6:	e7da      	b.n	800828e <cos+0x2e>
 80082d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082dc:	ed9d 0b00 	vldr	d0, [sp]
 80082e0:	f000 fa76 	bl	80087d0 <__kernel_cos>
 80082e4:	e7f1      	b.n	80082ca <cos+0x6a>
 80082e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082ea:	ed9d 0b00 	vldr	d0, [sp]
 80082ee:	2001      	movs	r0, #1
 80082f0:	f000 fe86 	bl	8009000 <__kernel_sin>
 80082f4:	e7e0      	b.n	80082b8 <cos+0x58>
 80082f6:	bf00      	nop
	...
 8008300:	3fe921fb 	.word	0x3fe921fb
 8008304:	7fefffff 	.word	0x7fefffff

08008308 <sin>:
 8008308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800830a:	ec53 2b10 	vmov	r2, r3, d0
 800830e:	4828      	ldr	r0, [pc, #160]	; (80083b0 <sin+0xa8>)
 8008310:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008314:	4281      	cmp	r1, r0
 8008316:	dc07      	bgt.n	8008328 <sin+0x20>
 8008318:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80083a8 <sin+0xa0>
 800831c:	2000      	movs	r0, #0
 800831e:	b005      	add	sp, #20
 8008320:	f85d eb04 	ldr.w	lr, [sp], #4
 8008324:	f000 be6c 	b.w	8009000 <__kernel_sin>
 8008328:	4822      	ldr	r0, [pc, #136]	; (80083b4 <sin+0xac>)
 800832a:	4281      	cmp	r1, r0
 800832c:	dd09      	ble.n	8008342 <sin+0x3a>
 800832e:	ee10 0a10 	vmov	r0, s0
 8008332:	4619      	mov	r1, r3
 8008334:	f7f7 ffc8 	bl	80002c8 <__aeabi_dsub>
 8008338:	ec41 0b10 	vmov	d0, r0, r1
 800833c:	b005      	add	sp, #20
 800833e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008342:	4668      	mov	r0, sp
 8008344:	f000 f838 	bl	80083b8 <__ieee754_rem_pio2>
 8008348:	f000 0003 	and.w	r0, r0, #3
 800834c:	2801      	cmp	r0, #1
 800834e:	d00c      	beq.n	800836a <sin+0x62>
 8008350:	2802      	cmp	r0, #2
 8008352:	d011      	beq.n	8008378 <sin+0x70>
 8008354:	b9f0      	cbnz	r0, 8008394 <sin+0x8c>
 8008356:	ed9d 1b02 	vldr	d1, [sp, #8]
 800835a:	ed9d 0b00 	vldr	d0, [sp]
 800835e:	2001      	movs	r0, #1
 8008360:	f000 fe4e 	bl	8009000 <__kernel_sin>
 8008364:	ec51 0b10 	vmov	r0, r1, d0
 8008368:	e7e6      	b.n	8008338 <sin+0x30>
 800836a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800836e:	ed9d 0b00 	vldr	d0, [sp]
 8008372:	f000 fa2d 	bl	80087d0 <__kernel_cos>
 8008376:	e7f5      	b.n	8008364 <sin+0x5c>
 8008378:	ed9d 1b02 	vldr	d1, [sp, #8]
 800837c:	ed9d 0b00 	vldr	d0, [sp]
 8008380:	2001      	movs	r0, #1
 8008382:	f000 fe3d 	bl	8009000 <__kernel_sin>
 8008386:	ec53 2b10 	vmov	r2, r3, d0
 800838a:	ee10 0a10 	vmov	r0, s0
 800838e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008392:	e7d1      	b.n	8008338 <sin+0x30>
 8008394:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008398:	ed9d 0b00 	vldr	d0, [sp]
 800839c:	f000 fa18 	bl	80087d0 <__kernel_cos>
 80083a0:	e7f1      	b.n	8008386 <sin+0x7e>
 80083a2:	bf00      	nop
 80083a4:	f3af 8000 	nop.w
	...
 80083b0:	3fe921fb 	.word	0x3fe921fb
 80083b4:	7fefffff 	.word	0x7fefffff

080083b8 <__ieee754_rem_pio2>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	ed2d 8b02 	vpush	{d8}
 80083c0:	ec55 4b10 	vmov	r4, r5, d0
 80083c4:	4bca      	ldr	r3, [pc, #808]	; (80086f0 <__ieee754_rem_pio2+0x338>)
 80083c6:	b08b      	sub	sp, #44	; 0x2c
 80083c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80083cc:	4598      	cmp	r8, r3
 80083ce:	4682      	mov	sl, r0
 80083d0:	9502      	str	r5, [sp, #8]
 80083d2:	dc08      	bgt.n	80083e6 <__ieee754_rem_pio2+0x2e>
 80083d4:	2200      	movs	r2, #0
 80083d6:	2300      	movs	r3, #0
 80083d8:	ed80 0b00 	vstr	d0, [r0]
 80083dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80083e0:	f04f 0b00 	mov.w	fp, #0
 80083e4:	e028      	b.n	8008438 <__ieee754_rem_pio2+0x80>
 80083e6:	4bc3      	ldr	r3, [pc, #780]	; (80086f4 <__ieee754_rem_pio2+0x33c>)
 80083e8:	4598      	cmp	r8, r3
 80083ea:	dc78      	bgt.n	80084de <__ieee754_rem_pio2+0x126>
 80083ec:	9b02      	ldr	r3, [sp, #8]
 80083ee:	4ec2      	ldr	r6, [pc, #776]	; (80086f8 <__ieee754_rem_pio2+0x340>)
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	ee10 0a10 	vmov	r0, s0
 80083f6:	a3b0      	add	r3, pc, #704	; (adr r3, 80086b8 <__ieee754_rem_pio2+0x300>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	4629      	mov	r1, r5
 80083fe:	dd39      	ble.n	8008474 <__ieee754_rem_pio2+0xbc>
 8008400:	f7f7 ff62 	bl	80002c8 <__aeabi_dsub>
 8008404:	45b0      	cmp	r8, r6
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
 800840a:	d01b      	beq.n	8008444 <__ieee754_rem_pio2+0x8c>
 800840c:	a3ac      	add	r3, pc, #688	; (adr r3, 80086c0 <__ieee754_rem_pio2+0x308>)
 800840e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008412:	f7f7 ff59 	bl	80002c8 <__aeabi_dsub>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	e9ca 2300 	strd	r2, r3, [sl]
 800841e:	4620      	mov	r0, r4
 8008420:	4629      	mov	r1, r5
 8008422:	f7f7 ff51 	bl	80002c8 <__aeabi_dsub>
 8008426:	a3a6      	add	r3, pc, #664	; (adr r3, 80086c0 <__ieee754_rem_pio2+0x308>)
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f7f7 ff4c 	bl	80002c8 <__aeabi_dsub>
 8008430:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008434:	f04f 0b01 	mov.w	fp, #1
 8008438:	4658      	mov	r0, fp
 800843a:	b00b      	add	sp, #44	; 0x2c
 800843c:	ecbd 8b02 	vpop	{d8}
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	a3a0      	add	r3, pc, #640	; (adr r3, 80086c8 <__ieee754_rem_pio2+0x310>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f7f7 ff3d 	bl	80002c8 <__aeabi_dsub>
 800844e:	a3a0      	add	r3, pc, #640	; (adr r3, 80086d0 <__ieee754_rem_pio2+0x318>)
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	4604      	mov	r4, r0
 8008456:	460d      	mov	r5, r1
 8008458:	f7f7 ff36 	bl	80002c8 <__aeabi_dsub>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	e9ca 2300 	strd	r2, r3, [sl]
 8008464:	4620      	mov	r0, r4
 8008466:	4629      	mov	r1, r5
 8008468:	f7f7 ff2e 	bl	80002c8 <__aeabi_dsub>
 800846c:	a398      	add	r3, pc, #608	; (adr r3, 80086d0 <__ieee754_rem_pio2+0x318>)
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	e7db      	b.n	800842c <__ieee754_rem_pio2+0x74>
 8008474:	f7f7 ff2a 	bl	80002cc <__adddf3>
 8008478:	45b0      	cmp	r8, r6
 800847a:	4604      	mov	r4, r0
 800847c:	460d      	mov	r5, r1
 800847e:	d016      	beq.n	80084ae <__ieee754_rem_pio2+0xf6>
 8008480:	a38f      	add	r3, pc, #572	; (adr r3, 80086c0 <__ieee754_rem_pio2+0x308>)
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	f7f7 ff21 	bl	80002cc <__adddf3>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	e9ca 2300 	strd	r2, r3, [sl]
 8008492:	4620      	mov	r0, r4
 8008494:	4629      	mov	r1, r5
 8008496:	f7f7 ff17 	bl	80002c8 <__aeabi_dsub>
 800849a:	a389      	add	r3, pc, #548	; (adr r3, 80086c0 <__ieee754_rem_pio2+0x308>)
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f7f7 ff14 	bl	80002cc <__adddf3>
 80084a4:	f04f 3bff 	mov.w	fp, #4294967295
 80084a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084ac:	e7c4      	b.n	8008438 <__ieee754_rem_pio2+0x80>
 80084ae:	a386      	add	r3, pc, #536	; (adr r3, 80086c8 <__ieee754_rem_pio2+0x310>)
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f7f7 ff0a 	bl	80002cc <__adddf3>
 80084b8:	a385      	add	r3, pc, #532	; (adr r3, 80086d0 <__ieee754_rem_pio2+0x318>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	4604      	mov	r4, r0
 80084c0:	460d      	mov	r5, r1
 80084c2:	f7f7 ff03 	bl	80002cc <__adddf3>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	e9ca 2300 	strd	r2, r3, [sl]
 80084ce:	4620      	mov	r0, r4
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f7 fef9 	bl	80002c8 <__aeabi_dsub>
 80084d6:	a37e      	add	r3, pc, #504	; (adr r3, 80086d0 <__ieee754_rem_pio2+0x318>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	e7e0      	b.n	80084a0 <__ieee754_rem_pio2+0xe8>
 80084de:	4b87      	ldr	r3, [pc, #540]	; (80086fc <__ieee754_rem_pio2+0x344>)
 80084e0:	4598      	cmp	r8, r3
 80084e2:	f300 80d9 	bgt.w	8008698 <__ieee754_rem_pio2+0x2e0>
 80084e6:	f000 fe49 	bl	800917c <fabs>
 80084ea:	ec55 4b10 	vmov	r4, r5, d0
 80084ee:	ee10 0a10 	vmov	r0, s0
 80084f2:	a379      	add	r3, pc, #484	; (adr r3, 80086d8 <__ieee754_rem_pio2+0x320>)
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	4629      	mov	r1, r5
 80084fa:	f7f8 f89d 	bl	8000638 <__aeabi_dmul>
 80084fe:	4b80      	ldr	r3, [pc, #512]	; (8008700 <__ieee754_rem_pio2+0x348>)
 8008500:	2200      	movs	r2, #0
 8008502:	f7f7 fee3 	bl	80002cc <__adddf3>
 8008506:	f7f8 fb31 	bl	8000b6c <__aeabi_d2iz>
 800850a:	4683      	mov	fp, r0
 800850c:	f7f8 f82a 	bl	8000564 <__aeabi_i2d>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	ec43 2b18 	vmov	d8, r2, r3
 8008518:	a367      	add	r3, pc, #412	; (adr r3, 80086b8 <__ieee754_rem_pio2+0x300>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f7f8 f88b 	bl	8000638 <__aeabi_dmul>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4620      	mov	r0, r4
 8008528:	4629      	mov	r1, r5
 800852a:	f7f7 fecd 	bl	80002c8 <__aeabi_dsub>
 800852e:	a364      	add	r3, pc, #400	; (adr r3, 80086c0 <__ieee754_rem_pio2+0x308>)
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	4606      	mov	r6, r0
 8008536:	460f      	mov	r7, r1
 8008538:	ec51 0b18 	vmov	r0, r1, d8
 800853c:	f7f8 f87c 	bl	8000638 <__aeabi_dmul>
 8008540:	f1bb 0f1f 	cmp.w	fp, #31
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	dc0d      	bgt.n	8008566 <__ieee754_rem_pio2+0x1ae>
 800854a:	4b6e      	ldr	r3, [pc, #440]	; (8008704 <__ieee754_rem_pio2+0x34c>)
 800854c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008554:	4543      	cmp	r3, r8
 8008556:	d006      	beq.n	8008566 <__ieee754_rem_pio2+0x1ae>
 8008558:	4622      	mov	r2, r4
 800855a:	462b      	mov	r3, r5
 800855c:	4630      	mov	r0, r6
 800855e:	4639      	mov	r1, r7
 8008560:	f7f7 feb2 	bl	80002c8 <__aeabi_dsub>
 8008564:	e00f      	b.n	8008586 <__ieee754_rem_pio2+0x1ce>
 8008566:	462b      	mov	r3, r5
 8008568:	4622      	mov	r2, r4
 800856a:	4630      	mov	r0, r6
 800856c:	4639      	mov	r1, r7
 800856e:	f7f7 feab 	bl	80002c8 <__aeabi_dsub>
 8008572:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008576:	9303      	str	r3, [sp, #12]
 8008578:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800857c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008580:	f1b8 0f10 	cmp.w	r8, #16
 8008584:	dc02      	bgt.n	800858c <__ieee754_rem_pio2+0x1d4>
 8008586:	e9ca 0100 	strd	r0, r1, [sl]
 800858a:	e039      	b.n	8008600 <__ieee754_rem_pio2+0x248>
 800858c:	a34e      	add	r3, pc, #312	; (adr r3, 80086c8 <__ieee754_rem_pio2+0x310>)
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	ec51 0b18 	vmov	r0, r1, d8
 8008596:	f7f8 f84f 	bl	8000638 <__aeabi_dmul>
 800859a:	4604      	mov	r4, r0
 800859c:	460d      	mov	r5, r1
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4630      	mov	r0, r6
 80085a4:	4639      	mov	r1, r7
 80085a6:	f7f7 fe8f 	bl	80002c8 <__aeabi_dsub>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4680      	mov	r8, r0
 80085b0:	4689      	mov	r9, r1
 80085b2:	4630      	mov	r0, r6
 80085b4:	4639      	mov	r1, r7
 80085b6:	f7f7 fe87 	bl	80002c8 <__aeabi_dsub>
 80085ba:	4622      	mov	r2, r4
 80085bc:	462b      	mov	r3, r5
 80085be:	f7f7 fe83 	bl	80002c8 <__aeabi_dsub>
 80085c2:	a343      	add	r3, pc, #268	; (adr r3, 80086d0 <__ieee754_rem_pio2+0x318>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	4604      	mov	r4, r0
 80085ca:	460d      	mov	r5, r1
 80085cc:	ec51 0b18 	vmov	r0, r1, d8
 80085d0:	f7f8 f832 	bl	8000638 <__aeabi_dmul>
 80085d4:	4622      	mov	r2, r4
 80085d6:	462b      	mov	r3, r5
 80085d8:	f7f7 fe76 	bl	80002c8 <__aeabi_dsub>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4604      	mov	r4, r0
 80085e2:	460d      	mov	r5, r1
 80085e4:	4640      	mov	r0, r8
 80085e6:	4649      	mov	r1, r9
 80085e8:	f7f7 fe6e 	bl	80002c8 <__aeabi_dsub>
 80085ec:	9a03      	ldr	r2, [sp, #12]
 80085ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b31      	cmp	r3, #49	; 0x31
 80085f6:	dc24      	bgt.n	8008642 <__ieee754_rem_pio2+0x28a>
 80085f8:	e9ca 0100 	strd	r0, r1, [sl]
 80085fc:	4646      	mov	r6, r8
 80085fe:	464f      	mov	r7, r9
 8008600:	e9da 8900 	ldrd	r8, r9, [sl]
 8008604:	4630      	mov	r0, r6
 8008606:	4642      	mov	r2, r8
 8008608:	464b      	mov	r3, r9
 800860a:	4639      	mov	r1, r7
 800860c:	f7f7 fe5c 	bl	80002c8 <__aeabi_dsub>
 8008610:	462b      	mov	r3, r5
 8008612:	4622      	mov	r2, r4
 8008614:	f7f7 fe58 	bl	80002c8 <__aeabi_dsub>
 8008618:	9b02      	ldr	r3, [sp, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008620:	f6bf af0a 	bge.w	8008438 <__ieee754_rem_pio2+0x80>
 8008624:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008628:	f8ca 3004 	str.w	r3, [sl, #4]
 800862c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008630:	f8ca 8000 	str.w	r8, [sl]
 8008634:	f8ca 0008 	str.w	r0, [sl, #8]
 8008638:	f8ca 300c 	str.w	r3, [sl, #12]
 800863c:	f1cb 0b00 	rsb	fp, fp, #0
 8008640:	e6fa      	b.n	8008438 <__ieee754_rem_pio2+0x80>
 8008642:	a327      	add	r3, pc, #156	; (adr r3, 80086e0 <__ieee754_rem_pio2+0x328>)
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	ec51 0b18 	vmov	r0, r1, d8
 800864c:	f7f7 fff4 	bl	8000638 <__aeabi_dmul>
 8008650:	4604      	mov	r4, r0
 8008652:	460d      	mov	r5, r1
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4640      	mov	r0, r8
 800865a:	4649      	mov	r1, r9
 800865c:	f7f7 fe34 	bl	80002c8 <__aeabi_dsub>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4606      	mov	r6, r0
 8008666:	460f      	mov	r7, r1
 8008668:	4640      	mov	r0, r8
 800866a:	4649      	mov	r1, r9
 800866c:	f7f7 fe2c 	bl	80002c8 <__aeabi_dsub>
 8008670:	4622      	mov	r2, r4
 8008672:	462b      	mov	r3, r5
 8008674:	f7f7 fe28 	bl	80002c8 <__aeabi_dsub>
 8008678:	a31b      	add	r3, pc, #108	; (adr r3, 80086e8 <__ieee754_rem_pio2+0x330>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	4604      	mov	r4, r0
 8008680:	460d      	mov	r5, r1
 8008682:	ec51 0b18 	vmov	r0, r1, d8
 8008686:	f7f7 ffd7 	bl	8000638 <__aeabi_dmul>
 800868a:	4622      	mov	r2, r4
 800868c:	462b      	mov	r3, r5
 800868e:	f7f7 fe1b 	bl	80002c8 <__aeabi_dsub>
 8008692:	4604      	mov	r4, r0
 8008694:	460d      	mov	r5, r1
 8008696:	e75f      	b.n	8008558 <__ieee754_rem_pio2+0x1a0>
 8008698:	4b1b      	ldr	r3, [pc, #108]	; (8008708 <__ieee754_rem_pio2+0x350>)
 800869a:	4598      	cmp	r8, r3
 800869c:	dd36      	ble.n	800870c <__ieee754_rem_pio2+0x354>
 800869e:	ee10 2a10 	vmov	r2, s0
 80086a2:	462b      	mov	r3, r5
 80086a4:	4620      	mov	r0, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7f7 fe0e 	bl	80002c8 <__aeabi_dsub>
 80086ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80086b0:	e9ca 0100 	strd	r0, r1, [sl]
 80086b4:	e694      	b.n	80083e0 <__ieee754_rem_pio2+0x28>
 80086b6:	bf00      	nop
 80086b8:	54400000 	.word	0x54400000
 80086bc:	3ff921fb 	.word	0x3ff921fb
 80086c0:	1a626331 	.word	0x1a626331
 80086c4:	3dd0b461 	.word	0x3dd0b461
 80086c8:	1a600000 	.word	0x1a600000
 80086cc:	3dd0b461 	.word	0x3dd0b461
 80086d0:	2e037073 	.word	0x2e037073
 80086d4:	3ba3198a 	.word	0x3ba3198a
 80086d8:	6dc9c883 	.word	0x6dc9c883
 80086dc:	3fe45f30 	.word	0x3fe45f30
 80086e0:	2e000000 	.word	0x2e000000
 80086e4:	3ba3198a 	.word	0x3ba3198a
 80086e8:	252049c1 	.word	0x252049c1
 80086ec:	397b839a 	.word	0x397b839a
 80086f0:	3fe921fb 	.word	0x3fe921fb
 80086f4:	4002d97b 	.word	0x4002d97b
 80086f8:	3ff921fb 	.word	0x3ff921fb
 80086fc:	413921fb 	.word	0x413921fb
 8008700:	3fe00000 	.word	0x3fe00000
 8008704:	0800c88c 	.word	0x0800c88c
 8008708:	7fefffff 	.word	0x7fefffff
 800870c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008710:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008714:	ee10 0a10 	vmov	r0, s0
 8008718:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800871c:	ee10 6a10 	vmov	r6, s0
 8008720:	460f      	mov	r7, r1
 8008722:	f7f8 fa23 	bl	8000b6c <__aeabi_d2iz>
 8008726:	f7f7 ff1d 	bl	8000564 <__aeabi_i2d>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	4630      	mov	r0, r6
 8008730:	4639      	mov	r1, r7
 8008732:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008736:	f7f7 fdc7 	bl	80002c8 <__aeabi_dsub>
 800873a:	4b23      	ldr	r3, [pc, #140]	; (80087c8 <__ieee754_rem_pio2+0x410>)
 800873c:	2200      	movs	r2, #0
 800873e:	f7f7 ff7b 	bl	8000638 <__aeabi_dmul>
 8008742:	460f      	mov	r7, r1
 8008744:	4606      	mov	r6, r0
 8008746:	f7f8 fa11 	bl	8000b6c <__aeabi_d2iz>
 800874a:	f7f7 ff0b 	bl	8000564 <__aeabi_i2d>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4630      	mov	r0, r6
 8008754:	4639      	mov	r1, r7
 8008756:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800875a:	f7f7 fdb5 	bl	80002c8 <__aeabi_dsub>
 800875e:	4b1a      	ldr	r3, [pc, #104]	; (80087c8 <__ieee754_rem_pio2+0x410>)
 8008760:	2200      	movs	r2, #0
 8008762:	f7f7 ff69 	bl	8000638 <__aeabi_dmul>
 8008766:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800876a:	ad04      	add	r5, sp, #16
 800876c:	f04f 0803 	mov.w	r8, #3
 8008770:	46a9      	mov	r9, r5
 8008772:	2600      	movs	r6, #0
 8008774:	2700      	movs	r7, #0
 8008776:	4632      	mov	r2, r6
 8008778:	463b      	mov	r3, r7
 800877a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800877e:	46c3      	mov	fp, r8
 8008780:	3d08      	subs	r5, #8
 8008782:	f108 38ff 	add.w	r8, r8, #4294967295
 8008786:	f7f8 f9bf 	bl	8000b08 <__aeabi_dcmpeq>
 800878a:	2800      	cmp	r0, #0
 800878c:	d1f3      	bne.n	8008776 <__ieee754_rem_pio2+0x3be>
 800878e:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <__ieee754_rem_pio2+0x414>)
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	2302      	movs	r3, #2
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	4622      	mov	r2, r4
 8008798:	465b      	mov	r3, fp
 800879a:	4651      	mov	r1, sl
 800879c:	4648      	mov	r0, r9
 800879e:	f000 f8df 	bl	8008960 <__kernel_rem_pio2>
 80087a2:	9b02      	ldr	r3, [sp, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	4683      	mov	fp, r0
 80087a8:	f6bf ae46 	bge.w	8008438 <__ieee754_rem_pio2+0x80>
 80087ac:	e9da 2100 	ldrd	r2, r1, [sl]
 80087b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087b4:	e9ca 2300 	strd	r2, r3, [sl]
 80087b8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80087bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087c0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80087c4:	e73a      	b.n	800863c <__ieee754_rem_pio2+0x284>
 80087c6:	bf00      	nop
 80087c8:	41700000 	.word	0x41700000
 80087cc:	0800c90c 	.word	0x0800c90c

080087d0 <__kernel_cos>:
 80087d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d4:	ec57 6b10 	vmov	r6, r7, d0
 80087d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80087dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80087e0:	ed8d 1b00 	vstr	d1, [sp]
 80087e4:	da07      	bge.n	80087f6 <__kernel_cos+0x26>
 80087e6:	ee10 0a10 	vmov	r0, s0
 80087ea:	4639      	mov	r1, r7
 80087ec:	f7f8 f9be 	bl	8000b6c <__aeabi_d2iz>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	f000 8088 	beq.w	8008906 <__kernel_cos+0x136>
 80087f6:	4632      	mov	r2, r6
 80087f8:	463b      	mov	r3, r7
 80087fa:	4630      	mov	r0, r6
 80087fc:	4639      	mov	r1, r7
 80087fe:	f7f7 ff1b 	bl	8000638 <__aeabi_dmul>
 8008802:	4b51      	ldr	r3, [pc, #324]	; (8008948 <__kernel_cos+0x178>)
 8008804:	2200      	movs	r2, #0
 8008806:	4604      	mov	r4, r0
 8008808:	460d      	mov	r5, r1
 800880a:	f7f7 ff15 	bl	8000638 <__aeabi_dmul>
 800880e:	a340      	add	r3, pc, #256	; (adr r3, 8008910 <__kernel_cos+0x140>)
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	4682      	mov	sl, r0
 8008816:	468b      	mov	fp, r1
 8008818:	4620      	mov	r0, r4
 800881a:	4629      	mov	r1, r5
 800881c:	f7f7 ff0c 	bl	8000638 <__aeabi_dmul>
 8008820:	a33d      	add	r3, pc, #244	; (adr r3, 8008918 <__kernel_cos+0x148>)
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	f7f7 fd51 	bl	80002cc <__adddf3>
 800882a:	4622      	mov	r2, r4
 800882c:	462b      	mov	r3, r5
 800882e:	f7f7 ff03 	bl	8000638 <__aeabi_dmul>
 8008832:	a33b      	add	r3, pc, #236	; (adr r3, 8008920 <__kernel_cos+0x150>)
 8008834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008838:	f7f7 fd46 	bl	80002c8 <__aeabi_dsub>
 800883c:	4622      	mov	r2, r4
 800883e:	462b      	mov	r3, r5
 8008840:	f7f7 fefa 	bl	8000638 <__aeabi_dmul>
 8008844:	a338      	add	r3, pc, #224	; (adr r3, 8008928 <__kernel_cos+0x158>)
 8008846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884a:	f7f7 fd3f 	bl	80002cc <__adddf3>
 800884e:	4622      	mov	r2, r4
 8008850:	462b      	mov	r3, r5
 8008852:	f7f7 fef1 	bl	8000638 <__aeabi_dmul>
 8008856:	a336      	add	r3, pc, #216	; (adr r3, 8008930 <__kernel_cos+0x160>)
 8008858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885c:	f7f7 fd34 	bl	80002c8 <__aeabi_dsub>
 8008860:	4622      	mov	r2, r4
 8008862:	462b      	mov	r3, r5
 8008864:	f7f7 fee8 	bl	8000638 <__aeabi_dmul>
 8008868:	a333      	add	r3, pc, #204	; (adr r3, 8008938 <__kernel_cos+0x168>)
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f7f7 fd2d 	bl	80002cc <__adddf3>
 8008872:	4622      	mov	r2, r4
 8008874:	462b      	mov	r3, r5
 8008876:	f7f7 fedf 	bl	8000638 <__aeabi_dmul>
 800887a:	4622      	mov	r2, r4
 800887c:	462b      	mov	r3, r5
 800887e:	f7f7 fedb 	bl	8000638 <__aeabi_dmul>
 8008882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008886:	4604      	mov	r4, r0
 8008888:	460d      	mov	r5, r1
 800888a:	4630      	mov	r0, r6
 800888c:	4639      	mov	r1, r7
 800888e:	f7f7 fed3 	bl	8000638 <__aeabi_dmul>
 8008892:	460b      	mov	r3, r1
 8008894:	4602      	mov	r2, r0
 8008896:	4629      	mov	r1, r5
 8008898:	4620      	mov	r0, r4
 800889a:	f7f7 fd15 	bl	80002c8 <__aeabi_dsub>
 800889e:	4b2b      	ldr	r3, [pc, #172]	; (800894c <__kernel_cos+0x17c>)
 80088a0:	4598      	cmp	r8, r3
 80088a2:	4606      	mov	r6, r0
 80088a4:	460f      	mov	r7, r1
 80088a6:	dc10      	bgt.n	80088ca <__kernel_cos+0xfa>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4650      	mov	r0, sl
 80088ae:	4659      	mov	r1, fp
 80088b0:	f7f7 fd0a 	bl	80002c8 <__aeabi_dsub>
 80088b4:	460b      	mov	r3, r1
 80088b6:	4926      	ldr	r1, [pc, #152]	; (8008950 <__kernel_cos+0x180>)
 80088b8:	4602      	mov	r2, r0
 80088ba:	2000      	movs	r0, #0
 80088bc:	f7f7 fd04 	bl	80002c8 <__aeabi_dsub>
 80088c0:	ec41 0b10 	vmov	d0, r0, r1
 80088c4:	b003      	add	sp, #12
 80088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ca:	4b22      	ldr	r3, [pc, #136]	; (8008954 <__kernel_cos+0x184>)
 80088cc:	4920      	ldr	r1, [pc, #128]	; (8008950 <__kernel_cos+0x180>)
 80088ce:	4598      	cmp	r8, r3
 80088d0:	bfcc      	ite	gt
 80088d2:	4d21      	ldrgt	r5, [pc, #132]	; (8008958 <__kernel_cos+0x188>)
 80088d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80088d8:	2400      	movs	r4, #0
 80088da:	4622      	mov	r2, r4
 80088dc:	462b      	mov	r3, r5
 80088de:	2000      	movs	r0, #0
 80088e0:	f7f7 fcf2 	bl	80002c8 <__aeabi_dsub>
 80088e4:	4622      	mov	r2, r4
 80088e6:	4680      	mov	r8, r0
 80088e8:	4689      	mov	r9, r1
 80088ea:	462b      	mov	r3, r5
 80088ec:	4650      	mov	r0, sl
 80088ee:	4659      	mov	r1, fp
 80088f0:	f7f7 fcea 	bl	80002c8 <__aeabi_dsub>
 80088f4:	4632      	mov	r2, r6
 80088f6:	463b      	mov	r3, r7
 80088f8:	f7f7 fce6 	bl	80002c8 <__aeabi_dsub>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4640      	mov	r0, r8
 8008902:	4649      	mov	r1, r9
 8008904:	e7da      	b.n	80088bc <__kernel_cos+0xec>
 8008906:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008940 <__kernel_cos+0x170>
 800890a:	e7db      	b.n	80088c4 <__kernel_cos+0xf4>
 800890c:	f3af 8000 	nop.w
 8008910:	be8838d4 	.word	0xbe8838d4
 8008914:	bda8fae9 	.word	0xbda8fae9
 8008918:	bdb4b1c4 	.word	0xbdb4b1c4
 800891c:	3e21ee9e 	.word	0x3e21ee9e
 8008920:	809c52ad 	.word	0x809c52ad
 8008924:	3e927e4f 	.word	0x3e927e4f
 8008928:	19cb1590 	.word	0x19cb1590
 800892c:	3efa01a0 	.word	0x3efa01a0
 8008930:	16c15177 	.word	0x16c15177
 8008934:	3f56c16c 	.word	0x3f56c16c
 8008938:	5555554c 	.word	0x5555554c
 800893c:	3fa55555 	.word	0x3fa55555
 8008940:	00000000 	.word	0x00000000
 8008944:	3ff00000 	.word	0x3ff00000
 8008948:	3fe00000 	.word	0x3fe00000
 800894c:	3fd33332 	.word	0x3fd33332
 8008950:	3ff00000 	.word	0x3ff00000
 8008954:	3fe90000 	.word	0x3fe90000
 8008958:	3fd20000 	.word	0x3fd20000
 800895c:	00000000 	.word	0x00000000

08008960 <__kernel_rem_pio2>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	ed2d 8b02 	vpush	{d8}
 8008968:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800896c:	f112 0f14 	cmn.w	r2, #20
 8008970:	9308      	str	r3, [sp, #32]
 8008972:	9101      	str	r1, [sp, #4]
 8008974:	4bc4      	ldr	r3, [pc, #784]	; (8008c88 <__kernel_rem_pio2+0x328>)
 8008976:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008978:	900b      	str	r0, [sp, #44]	; 0x2c
 800897a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800897e:	9302      	str	r3, [sp, #8]
 8008980:	9b08      	ldr	r3, [sp, #32]
 8008982:	f103 33ff 	add.w	r3, r3, #4294967295
 8008986:	bfa8      	it	ge
 8008988:	1ed4      	subge	r4, r2, #3
 800898a:	9306      	str	r3, [sp, #24]
 800898c:	bfb2      	itee	lt
 800898e:	2400      	movlt	r4, #0
 8008990:	2318      	movge	r3, #24
 8008992:	fb94 f4f3 	sdivge	r4, r4, r3
 8008996:	f06f 0317 	mvn.w	r3, #23
 800899a:	fb04 3303 	mla	r3, r4, r3, r3
 800899e:	eb03 0a02 	add.w	sl, r3, r2
 80089a2:	9b02      	ldr	r3, [sp, #8]
 80089a4:	9a06      	ldr	r2, [sp, #24]
 80089a6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008c78 <__kernel_rem_pio2+0x318>
 80089aa:	eb03 0802 	add.w	r8, r3, r2
 80089ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80089b0:	1aa7      	subs	r7, r4, r2
 80089b2:	ae22      	add	r6, sp, #136	; 0x88
 80089b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80089b8:	2500      	movs	r5, #0
 80089ba:	4545      	cmp	r5, r8
 80089bc:	dd13      	ble.n	80089e6 <__kernel_rem_pio2+0x86>
 80089be:	9b08      	ldr	r3, [sp, #32]
 80089c0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008c78 <__kernel_rem_pio2+0x318>
 80089c4:	aa22      	add	r2, sp, #136	; 0x88
 80089c6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80089ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80089ce:	f04f 0800 	mov.w	r8, #0
 80089d2:	9b02      	ldr	r3, [sp, #8]
 80089d4:	4598      	cmp	r8, r3
 80089d6:	dc2f      	bgt.n	8008a38 <__kernel_rem_pio2+0xd8>
 80089d8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80089dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80089e0:	462f      	mov	r7, r5
 80089e2:	2600      	movs	r6, #0
 80089e4:	e01b      	b.n	8008a1e <__kernel_rem_pio2+0xbe>
 80089e6:	42ef      	cmn	r7, r5
 80089e8:	d407      	bmi.n	80089fa <__kernel_rem_pio2+0x9a>
 80089ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80089ee:	f7f7 fdb9 	bl	8000564 <__aeabi_i2d>
 80089f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80089f6:	3501      	adds	r5, #1
 80089f8:	e7df      	b.n	80089ba <__kernel_rem_pio2+0x5a>
 80089fa:	ec51 0b18 	vmov	r0, r1, d8
 80089fe:	e7f8      	b.n	80089f2 <__kernel_rem_pio2+0x92>
 8008a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008a08:	f7f7 fe16 	bl	8000638 <__aeabi_dmul>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a14:	f7f7 fc5a 	bl	80002cc <__adddf3>
 8008a18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a1c:	3601      	adds	r6, #1
 8008a1e:	9b06      	ldr	r3, [sp, #24]
 8008a20:	429e      	cmp	r6, r3
 8008a22:	f1a7 0708 	sub.w	r7, r7, #8
 8008a26:	ddeb      	ble.n	8008a00 <__kernel_rem_pio2+0xa0>
 8008a28:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008a2c:	f108 0801 	add.w	r8, r8, #1
 8008a30:	ecab 7b02 	vstmia	fp!, {d7}
 8008a34:	3508      	adds	r5, #8
 8008a36:	e7cc      	b.n	80089d2 <__kernel_rem_pio2+0x72>
 8008a38:	9b02      	ldr	r3, [sp, #8]
 8008a3a:	aa0e      	add	r2, sp, #56	; 0x38
 8008a3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a40:	930d      	str	r3, [sp, #52]	; 0x34
 8008a42:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008a44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008a48:	9c02      	ldr	r4, [sp, #8]
 8008a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a4c:	00e3      	lsls	r3, r4, #3
 8008a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a50:	ab9a      	add	r3, sp, #616	; 0x268
 8008a52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008a5a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008a5e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008a60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008a64:	46c3      	mov	fp, r8
 8008a66:	46a1      	mov	r9, r4
 8008a68:	f1b9 0f00 	cmp.w	r9, #0
 8008a6c:	f1a5 0508 	sub.w	r5, r5, #8
 8008a70:	dc77      	bgt.n	8008b62 <__kernel_rem_pio2+0x202>
 8008a72:	ec47 6b10 	vmov	d0, r6, r7
 8008a76:	4650      	mov	r0, sl
 8008a78:	f000 fc0a 	bl	8009290 <scalbn>
 8008a7c:	ec57 6b10 	vmov	r6, r7, d0
 8008a80:	2200      	movs	r2, #0
 8008a82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008a86:	ee10 0a10 	vmov	r0, s0
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	f7f7 fdd4 	bl	8000638 <__aeabi_dmul>
 8008a90:	ec41 0b10 	vmov	d0, r0, r1
 8008a94:	f000 fb7c 	bl	8009190 <floor>
 8008a98:	4b7c      	ldr	r3, [pc, #496]	; (8008c8c <__kernel_rem_pio2+0x32c>)
 8008a9a:	ec51 0b10 	vmov	r0, r1, d0
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f7f7 fdca 	bl	8000638 <__aeabi_dmul>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	4639      	mov	r1, r7
 8008aac:	f7f7 fc0c 	bl	80002c8 <__aeabi_dsub>
 8008ab0:	460f      	mov	r7, r1
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	f7f8 f85a 	bl	8000b6c <__aeabi_d2iz>
 8008ab8:	9004      	str	r0, [sp, #16]
 8008aba:	f7f7 fd53 	bl	8000564 <__aeabi_i2d>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	f7f7 fbff 	bl	80002c8 <__aeabi_dsub>
 8008aca:	f1ba 0f00 	cmp.w	sl, #0
 8008ace:	4606      	mov	r6, r0
 8008ad0:	460f      	mov	r7, r1
 8008ad2:	dd6d      	ble.n	8008bb0 <__kernel_rem_pio2+0x250>
 8008ad4:	1e62      	subs	r2, r4, #1
 8008ad6:	ab0e      	add	r3, sp, #56	; 0x38
 8008ad8:	9d04      	ldr	r5, [sp, #16]
 8008ada:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008ade:	f1ca 0118 	rsb	r1, sl, #24
 8008ae2:	fa40 f301 	asr.w	r3, r0, r1
 8008ae6:	441d      	add	r5, r3
 8008ae8:	408b      	lsls	r3, r1
 8008aea:	1ac0      	subs	r0, r0, r3
 8008aec:	ab0e      	add	r3, sp, #56	; 0x38
 8008aee:	9504      	str	r5, [sp, #16]
 8008af0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008af4:	f1ca 0317 	rsb	r3, sl, #23
 8008af8:	fa40 fb03 	asr.w	fp, r0, r3
 8008afc:	f1bb 0f00 	cmp.w	fp, #0
 8008b00:	dd65      	ble.n	8008bce <__kernel_rem_pio2+0x26e>
 8008b02:	9b04      	ldr	r3, [sp, #16]
 8008b04:	2200      	movs	r2, #0
 8008b06:	3301      	adds	r3, #1
 8008b08:	9304      	str	r3, [sp, #16]
 8008b0a:	4615      	mov	r5, r2
 8008b0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008b10:	4294      	cmp	r4, r2
 8008b12:	f300 809c 	bgt.w	8008c4e <__kernel_rem_pio2+0x2ee>
 8008b16:	f1ba 0f00 	cmp.w	sl, #0
 8008b1a:	dd07      	ble.n	8008b2c <__kernel_rem_pio2+0x1cc>
 8008b1c:	f1ba 0f01 	cmp.w	sl, #1
 8008b20:	f000 80c0 	beq.w	8008ca4 <__kernel_rem_pio2+0x344>
 8008b24:	f1ba 0f02 	cmp.w	sl, #2
 8008b28:	f000 80c6 	beq.w	8008cb8 <__kernel_rem_pio2+0x358>
 8008b2c:	f1bb 0f02 	cmp.w	fp, #2
 8008b30:	d14d      	bne.n	8008bce <__kernel_rem_pio2+0x26e>
 8008b32:	4632      	mov	r2, r6
 8008b34:	463b      	mov	r3, r7
 8008b36:	4956      	ldr	r1, [pc, #344]	; (8008c90 <__kernel_rem_pio2+0x330>)
 8008b38:	2000      	movs	r0, #0
 8008b3a:	f7f7 fbc5 	bl	80002c8 <__aeabi_dsub>
 8008b3e:	4606      	mov	r6, r0
 8008b40:	460f      	mov	r7, r1
 8008b42:	2d00      	cmp	r5, #0
 8008b44:	d043      	beq.n	8008bce <__kernel_rem_pio2+0x26e>
 8008b46:	4650      	mov	r0, sl
 8008b48:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008c80 <__kernel_rem_pio2+0x320>
 8008b4c:	f000 fba0 	bl	8009290 <scalbn>
 8008b50:	4630      	mov	r0, r6
 8008b52:	4639      	mov	r1, r7
 8008b54:	ec53 2b10 	vmov	r2, r3, d0
 8008b58:	f7f7 fbb6 	bl	80002c8 <__aeabi_dsub>
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	460f      	mov	r7, r1
 8008b60:	e035      	b.n	8008bce <__kernel_rem_pio2+0x26e>
 8008b62:	4b4c      	ldr	r3, [pc, #304]	; (8008c94 <__kernel_rem_pio2+0x334>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	4630      	mov	r0, r6
 8008b68:	4639      	mov	r1, r7
 8008b6a:	f7f7 fd65 	bl	8000638 <__aeabi_dmul>
 8008b6e:	f7f7 fffd 	bl	8000b6c <__aeabi_d2iz>
 8008b72:	f7f7 fcf7 	bl	8000564 <__aeabi_i2d>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	ec43 2b18 	vmov	d8, r2, r3
 8008b7e:	4b46      	ldr	r3, [pc, #280]	; (8008c98 <__kernel_rem_pio2+0x338>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	f7f7 fd59 	bl	8000638 <__aeabi_dmul>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	f7f7 fb9b 	bl	80002c8 <__aeabi_dsub>
 8008b92:	f7f7 ffeb 	bl	8000b6c <__aeabi_d2iz>
 8008b96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b9a:	f84b 0b04 	str.w	r0, [fp], #4
 8008b9e:	ec51 0b18 	vmov	r0, r1, d8
 8008ba2:	f7f7 fb93 	bl	80002cc <__adddf3>
 8008ba6:	f109 39ff 	add.w	r9, r9, #4294967295
 8008baa:	4606      	mov	r6, r0
 8008bac:	460f      	mov	r7, r1
 8008bae:	e75b      	b.n	8008a68 <__kernel_rem_pio2+0x108>
 8008bb0:	d106      	bne.n	8008bc0 <__kernel_rem_pio2+0x260>
 8008bb2:	1e63      	subs	r3, r4, #1
 8008bb4:	aa0e      	add	r2, sp, #56	; 0x38
 8008bb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008bba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008bbe:	e79d      	b.n	8008afc <__kernel_rem_pio2+0x19c>
 8008bc0:	4b36      	ldr	r3, [pc, #216]	; (8008c9c <__kernel_rem_pio2+0x33c>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f7f7 ffbe 	bl	8000b44 <__aeabi_dcmpge>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d13d      	bne.n	8008c48 <__kernel_rem_pio2+0x2e8>
 8008bcc:	4683      	mov	fp, r0
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	f7f7 ff97 	bl	8000b08 <__aeabi_dcmpeq>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	f000 80c0 	beq.w	8008d60 <__kernel_rem_pio2+0x400>
 8008be0:	1e65      	subs	r5, r4, #1
 8008be2:	462b      	mov	r3, r5
 8008be4:	2200      	movs	r2, #0
 8008be6:	9902      	ldr	r1, [sp, #8]
 8008be8:	428b      	cmp	r3, r1
 8008bea:	da6c      	bge.n	8008cc6 <__kernel_rem_pio2+0x366>
 8008bec:	2a00      	cmp	r2, #0
 8008bee:	f000 8089 	beq.w	8008d04 <__kernel_rem_pio2+0x3a4>
 8008bf2:	ab0e      	add	r3, sp, #56	; 0x38
 8008bf4:	f1aa 0a18 	sub.w	sl, sl, #24
 8008bf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 80ad 	beq.w	8008d5c <__kernel_rem_pio2+0x3fc>
 8008c02:	4650      	mov	r0, sl
 8008c04:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008c80 <__kernel_rem_pio2+0x320>
 8008c08:	f000 fb42 	bl	8009290 <scalbn>
 8008c0c:	ab9a      	add	r3, sp, #616	; 0x268
 8008c0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c12:	ec57 6b10 	vmov	r6, r7, d0
 8008c16:	00ec      	lsls	r4, r5, #3
 8008c18:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008c1c:	46aa      	mov	sl, r5
 8008c1e:	f1ba 0f00 	cmp.w	sl, #0
 8008c22:	f280 80d6 	bge.w	8008dd2 <__kernel_rem_pio2+0x472>
 8008c26:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008c78 <__kernel_rem_pio2+0x318>
 8008c2a:	462e      	mov	r6, r5
 8008c2c:	2e00      	cmp	r6, #0
 8008c2e:	f2c0 8104 	blt.w	8008e3a <__kernel_rem_pio2+0x4da>
 8008c32:	ab72      	add	r3, sp, #456	; 0x1c8
 8008c34:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008c38:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008ca0 <__kernel_rem_pio2+0x340>
 8008c3c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008c40:	f04f 0800 	mov.w	r8, #0
 8008c44:	1baf      	subs	r7, r5, r6
 8008c46:	e0ea      	b.n	8008e1e <__kernel_rem_pio2+0x4be>
 8008c48:	f04f 0b02 	mov.w	fp, #2
 8008c4c:	e759      	b.n	8008b02 <__kernel_rem_pio2+0x1a2>
 8008c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c52:	b955      	cbnz	r5, 8008c6a <__kernel_rem_pio2+0x30a>
 8008c54:	b123      	cbz	r3, 8008c60 <__kernel_rem_pio2+0x300>
 8008c56:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008c5a:	f8c8 3000 	str.w	r3, [r8]
 8008c5e:	2301      	movs	r3, #1
 8008c60:	3201      	adds	r2, #1
 8008c62:	f108 0804 	add.w	r8, r8, #4
 8008c66:	461d      	mov	r5, r3
 8008c68:	e752      	b.n	8008b10 <__kernel_rem_pio2+0x1b0>
 8008c6a:	1acb      	subs	r3, r1, r3
 8008c6c:	f8c8 3000 	str.w	r3, [r8]
 8008c70:	462b      	mov	r3, r5
 8008c72:	e7f5      	b.n	8008c60 <__kernel_rem_pio2+0x300>
 8008c74:	f3af 8000 	nop.w
	...
 8008c84:	3ff00000 	.word	0x3ff00000
 8008c88:	0800ca58 	.word	0x0800ca58
 8008c8c:	40200000 	.word	0x40200000
 8008c90:	3ff00000 	.word	0x3ff00000
 8008c94:	3e700000 	.word	0x3e700000
 8008c98:	41700000 	.word	0x41700000
 8008c9c:	3fe00000 	.word	0x3fe00000
 8008ca0:	0800ca18 	.word	0x0800ca18
 8008ca4:	1e62      	subs	r2, r4, #1
 8008ca6:	ab0e      	add	r3, sp, #56	; 0x38
 8008ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008cb0:	a90e      	add	r1, sp, #56	; 0x38
 8008cb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008cb6:	e739      	b.n	8008b2c <__kernel_rem_pio2+0x1cc>
 8008cb8:	1e62      	subs	r2, r4, #1
 8008cba:	ab0e      	add	r3, sp, #56	; 0x38
 8008cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008cc4:	e7f4      	b.n	8008cb0 <__kernel_rem_pio2+0x350>
 8008cc6:	a90e      	add	r1, sp, #56	; 0x38
 8008cc8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	e789      	b.n	8008be6 <__kernel_rem_pio2+0x286>
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008cd8:	2900      	cmp	r1, #0
 8008cda:	d0fa      	beq.n	8008cd2 <__kernel_rem_pio2+0x372>
 8008cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cde:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008ce2:	446a      	add	r2, sp
 8008ce4:	3a98      	subs	r2, #152	; 0x98
 8008ce6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ce8:	9a08      	ldr	r2, [sp, #32]
 8008cea:	18e3      	adds	r3, r4, r3
 8008cec:	18a5      	adds	r5, r4, r2
 8008cee:	aa22      	add	r2, sp, #136	; 0x88
 8008cf0:	f104 0801 	add.w	r8, r4, #1
 8008cf4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008cf8:	9304      	str	r3, [sp, #16]
 8008cfa:	9b04      	ldr	r3, [sp, #16]
 8008cfc:	4543      	cmp	r3, r8
 8008cfe:	da04      	bge.n	8008d0a <__kernel_rem_pio2+0x3aa>
 8008d00:	461c      	mov	r4, r3
 8008d02:	e6a3      	b.n	8008a4c <__kernel_rem_pio2+0xec>
 8008d04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d06:	2301      	movs	r3, #1
 8008d08:	e7e4      	b.n	8008cd4 <__kernel_rem_pio2+0x374>
 8008d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d0c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008d10:	f7f7 fc28 	bl	8000564 <__aeabi_i2d>
 8008d14:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d1a:	46ab      	mov	fp, r5
 8008d1c:	461c      	mov	r4, r3
 8008d1e:	f04f 0900 	mov.w	r9, #0
 8008d22:	2600      	movs	r6, #0
 8008d24:	2700      	movs	r7, #0
 8008d26:	9b06      	ldr	r3, [sp, #24]
 8008d28:	4599      	cmp	r9, r3
 8008d2a:	dd06      	ble.n	8008d3a <__kernel_rem_pio2+0x3da>
 8008d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d2e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008d32:	f108 0801 	add.w	r8, r8, #1
 8008d36:	930a      	str	r3, [sp, #40]	; 0x28
 8008d38:	e7df      	b.n	8008cfa <__kernel_rem_pio2+0x39a>
 8008d3a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008d3e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008d42:	f7f7 fc79 	bl	8000638 <__aeabi_dmul>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	4639      	mov	r1, r7
 8008d4e:	f7f7 fabd 	bl	80002cc <__adddf3>
 8008d52:	f109 0901 	add.w	r9, r9, #1
 8008d56:	4606      	mov	r6, r0
 8008d58:	460f      	mov	r7, r1
 8008d5a:	e7e4      	b.n	8008d26 <__kernel_rem_pio2+0x3c6>
 8008d5c:	3d01      	subs	r5, #1
 8008d5e:	e748      	b.n	8008bf2 <__kernel_rem_pio2+0x292>
 8008d60:	ec47 6b10 	vmov	d0, r6, r7
 8008d64:	f1ca 0000 	rsb	r0, sl, #0
 8008d68:	f000 fa92 	bl	8009290 <scalbn>
 8008d6c:	ec57 6b10 	vmov	r6, r7, d0
 8008d70:	4ba0      	ldr	r3, [pc, #640]	; (8008ff4 <__kernel_rem_pio2+0x694>)
 8008d72:	ee10 0a10 	vmov	r0, s0
 8008d76:	2200      	movs	r2, #0
 8008d78:	4639      	mov	r1, r7
 8008d7a:	f7f7 fee3 	bl	8000b44 <__aeabi_dcmpge>
 8008d7e:	b1f8      	cbz	r0, 8008dc0 <__kernel_rem_pio2+0x460>
 8008d80:	4b9d      	ldr	r3, [pc, #628]	; (8008ff8 <__kernel_rem_pio2+0x698>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	4630      	mov	r0, r6
 8008d86:	4639      	mov	r1, r7
 8008d88:	f7f7 fc56 	bl	8000638 <__aeabi_dmul>
 8008d8c:	f7f7 feee 	bl	8000b6c <__aeabi_d2iz>
 8008d90:	4680      	mov	r8, r0
 8008d92:	f7f7 fbe7 	bl	8000564 <__aeabi_i2d>
 8008d96:	4b97      	ldr	r3, [pc, #604]	; (8008ff4 <__kernel_rem_pio2+0x694>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f7f7 fc4d 	bl	8000638 <__aeabi_dmul>
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4602      	mov	r2, r0
 8008da2:	4639      	mov	r1, r7
 8008da4:	4630      	mov	r0, r6
 8008da6:	f7f7 fa8f 	bl	80002c8 <__aeabi_dsub>
 8008daa:	f7f7 fedf 	bl	8000b6c <__aeabi_d2iz>
 8008dae:	1c65      	adds	r5, r4, #1
 8008db0:	ab0e      	add	r3, sp, #56	; 0x38
 8008db2:	f10a 0a18 	add.w	sl, sl, #24
 8008db6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008dba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008dbe:	e720      	b.n	8008c02 <__kernel_rem_pio2+0x2a2>
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	4639      	mov	r1, r7
 8008dc4:	f7f7 fed2 	bl	8000b6c <__aeabi_d2iz>
 8008dc8:	ab0e      	add	r3, sp, #56	; 0x38
 8008dca:	4625      	mov	r5, r4
 8008dcc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008dd0:	e717      	b.n	8008c02 <__kernel_rem_pio2+0x2a2>
 8008dd2:	ab0e      	add	r3, sp, #56	; 0x38
 8008dd4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008dd8:	f7f7 fbc4 	bl	8000564 <__aeabi_i2d>
 8008ddc:	4632      	mov	r2, r6
 8008dde:	463b      	mov	r3, r7
 8008de0:	f7f7 fc2a 	bl	8000638 <__aeabi_dmul>
 8008de4:	4b84      	ldr	r3, [pc, #528]	; (8008ff8 <__kernel_rem_pio2+0x698>)
 8008de6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008dea:	2200      	movs	r2, #0
 8008dec:	4630      	mov	r0, r6
 8008dee:	4639      	mov	r1, r7
 8008df0:	f7f7 fc22 	bl	8000638 <__aeabi_dmul>
 8008df4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008df8:	4606      	mov	r6, r0
 8008dfa:	460f      	mov	r7, r1
 8008dfc:	e70f      	b.n	8008c1e <__kernel_rem_pio2+0x2be>
 8008dfe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008e02:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008e06:	f7f7 fc17 	bl	8000638 <__aeabi_dmul>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e12:	f7f7 fa5b 	bl	80002cc <__adddf3>
 8008e16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e1a:	f108 0801 	add.w	r8, r8, #1
 8008e1e:	9b02      	ldr	r3, [sp, #8]
 8008e20:	4598      	cmp	r8, r3
 8008e22:	dc01      	bgt.n	8008e28 <__kernel_rem_pio2+0x4c8>
 8008e24:	45b8      	cmp	r8, r7
 8008e26:	ddea      	ble.n	8008dfe <__kernel_rem_pio2+0x49e>
 8008e28:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008e2c:	ab4a      	add	r3, sp, #296	; 0x128
 8008e2e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008e32:	ed87 7b00 	vstr	d7, [r7]
 8008e36:	3e01      	subs	r6, #1
 8008e38:	e6f8      	b.n	8008c2c <__kernel_rem_pio2+0x2cc>
 8008e3a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	dc0b      	bgt.n	8008e58 <__kernel_rem_pio2+0x4f8>
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	dc35      	bgt.n	8008eb0 <__kernel_rem_pio2+0x550>
 8008e44:	d059      	beq.n	8008efa <__kernel_rem_pio2+0x59a>
 8008e46:	9b04      	ldr	r3, [sp, #16]
 8008e48:	f003 0007 	and.w	r0, r3, #7
 8008e4c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008e50:	ecbd 8b02 	vpop	{d8}
 8008e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e58:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d1f3      	bne.n	8008e46 <__kernel_rem_pio2+0x4e6>
 8008e5e:	ab4a      	add	r3, sp, #296	; 0x128
 8008e60:	4423      	add	r3, r4
 8008e62:	9306      	str	r3, [sp, #24]
 8008e64:	461c      	mov	r4, r3
 8008e66:	469a      	mov	sl, r3
 8008e68:	9502      	str	r5, [sp, #8]
 8008e6a:	9b02      	ldr	r3, [sp, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f1aa 0a08 	sub.w	sl, sl, #8
 8008e72:	dc6b      	bgt.n	8008f4c <__kernel_rem_pio2+0x5ec>
 8008e74:	46aa      	mov	sl, r5
 8008e76:	f1ba 0f01 	cmp.w	sl, #1
 8008e7a:	f1a4 0408 	sub.w	r4, r4, #8
 8008e7e:	f300 8085 	bgt.w	8008f8c <__kernel_rem_pio2+0x62c>
 8008e82:	9c06      	ldr	r4, [sp, #24]
 8008e84:	2000      	movs	r0, #0
 8008e86:	3408      	adds	r4, #8
 8008e88:	2100      	movs	r1, #0
 8008e8a:	2d01      	cmp	r5, #1
 8008e8c:	f300 809d 	bgt.w	8008fca <__kernel_rem_pio2+0x66a>
 8008e90:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008e94:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008e98:	f1bb 0f00 	cmp.w	fp, #0
 8008e9c:	f040 809b 	bne.w	8008fd6 <__kernel_rem_pio2+0x676>
 8008ea0:	9b01      	ldr	r3, [sp, #4]
 8008ea2:	e9c3 5600 	strd	r5, r6, [r3]
 8008ea6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008eaa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008eae:	e7ca      	b.n	8008e46 <__kernel_rem_pio2+0x4e6>
 8008eb0:	3408      	adds	r4, #8
 8008eb2:	ab4a      	add	r3, sp, #296	; 0x128
 8008eb4:	441c      	add	r4, r3
 8008eb6:	462e      	mov	r6, r5
 8008eb8:	2000      	movs	r0, #0
 8008eba:	2100      	movs	r1, #0
 8008ebc:	2e00      	cmp	r6, #0
 8008ebe:	da36      	bge.n	8008f2e <__kernel_rem_pio2+0x5ce>
 8008ec0:	f1bb 0f00 	cmp.w	fp, #0
 8008ec4:	d039      	beq.n	8008f3a <__kernel_rem_pio2+0x5da>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ecc:	9c01      	ldr	r4, [sp, #4]
 8008ece:	e9c4 2300 	strd	r2, r3, [r4]
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008eda:	f7f7 f9f5 	bl	80002c8 <__aeabi_dsub>
 8008ede:	ae4c      	add	r6, sp, #304	; 0x130
 8008ee0:	2401      	movs	r4, #1
 8008ee2:	42a5      	cmp	r5, r4
 8008ee4:	da2c      	bge.n	8008f40 <__kernel_rem_pio2+0x5e0>
 8008ee6:	f1bb 0f00 	cmp.w	fp, #0
 8008eea:	d002      	beq.n	8008ef2 <__kernel_rem_pio2+0x592>
 8008eec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	9b01      	ldr	r3, [sp, #4]
 8008ef4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008ef8:	e7a5      	b.n	8008e46 <__kernel_rem_pio2+0x4e6>
 8008efa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008efe:	eb0d 0403 	add.w	r4, sp, r3
 8008f02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008f06:	2000      	movs	r0, #0
 8008f08:	2100      	movs	r1, #0
 8008f0a:	2d00      	cmp	r5, #0
 8008f0c:	da09      	bge.n	8008f22 <__kernel_rem_pio2+0x5c2>
 8008f0e:	f1bb 0f00 	cmp.w	fp, #0
 8008f12:	d002      	beq.n	8008f1a <__kernel_rem_pio2+0x5ba>
 8008f14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f18:	4619      	mov	r1, r3
 8008f1a:	9b01      	ldr	r3, [sp, #4]
 8008f1c:	e9c3 0100 	strd	r0, r1, [r3]
 8008f20:	e791      	b.n	8008e46 <__kernel_rem_pio2+0x4e6>
 8008f22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008f26:	f7f7 f9d1 	bl	80002cc <__adddf3>
 8008f2a:	3d01      	subs	r5, #1
 8008f2c:	e7ed      	b.n	8008f0a <__kernel_rem_pio2+0x5aa>
 8008f2e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008f32:	f7f7 f9cb 	bl	80002cc <__adddf3>
 8008f36:	3e01      	subs	r6, #1
 8008f38:	e7c0      	b.n	8008ebc <__kernel_rem_pio2+0x55c>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	e7c5      	b.n	8008ecc <__kernel_rem_pio2+0x56c>
 8008f40:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008f44:	f7f7 f9c2 	bl	80002cc <__adddf3>
 8008f48:	3401      	adds	r4, #1
 8008f4a:	e7ca      	b.n	8008ee2 <__kernel_rem_pio2+0x582>
 8008f4c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f50:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008f54:	9b02      	ldr	r3, [sp, #8]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	9302      	str	r3, [sp, #8]
 8008f5a:	4632      	mov	r2, r6
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	f7f7 f9b3 	bl	80002cc <__adddf3>
 8008f66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4640      	mov	r0, r8
 8008f70:	4649      	mov	r1, r9
 8008f72:	f7f7 f9a9 	bl	80002c8 <__aeabi_dsub>
 8008f76:	4632      	mov	r2, r6
 8008f78:	463b      	mov	r3, r7
 8008f7a:	f7f7 f9a7 	bl	80002cc <__adddf3>
 8008f7e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008f82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f86:	ed8a 7b00 	vstr	d7, [sl]
 8008f8a:	e76e      	b.n	8008e6a <__kernel_rem_pio2+0x50a>
 8008f8c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008f90:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008f94:	4640      	mov	r0, r8
 8008f96:	4632      	mov	r2, r6
 8008f98:	463b      	mov	r3, r7
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	f7f7 f996 	bl	80002cc <__adddf3>
 8008fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4640      	mov	r0, r8
 8008faa:	4649      	mov	r1, r9
 8008fac:	f7f7 f98c 	bl	80002c8 <__aeabi_dsub>
 8008fb0:	4632      	mov	r2, r6
 8008fb2:	463b      	mov	r3, r7
 8008fb4:	f7f7 f98a 	bl	80002cc <__adddf3>
 8008fb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008fc0:	ed84 7b00 	vstr	d7, [r4]
 8008fc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fc8:	e755      	b.n	8008e76 <__kernel_rem_pio2+0x516>
 8008fca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008fce:	f7f7 f97d 	bl	80002cc <__adddf3>
 8008fd2:	3d01      	subs	r5, #1
 8008fd4:	e759      	b.n	8008e8a <__kernel_rem_pio2+0x52a>
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	9a01      	ldr	r2, [sp, #4]
 8008fda:	601d      	str	r5, [r3, #0]
 8008fdc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008fe0:	605c      	str	r4, [r3, #4]
 8008fe2:	609f      	str	r7, [r3, #8]
 8008fe4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008fe8:	60d3      	str	r3, [r2, #12]
 8008fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fee:	6110      	str	r0, [r2, #16]
 8008ff0:	6153      	str	r3, [r2, #20]
 8008ff2:	e728      	b.n	8008e46 <__kernel_rem_pio2+0x4e6>
 8008ff4:	41700000 	.word	0x41700000
 8008ff8:	3e700000 	.word	0x3e700000
 8008ffc:	00000000 	.word	0x00000000

08009000 <__kernel_sin>:
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	ed2d 8b04 	vpush	{d8-d9}
 8009008:	eeb0 8a41 	vmov.f32	s16, s2
 800900c:	eef0 8a61 	vmov.f32	s17, s3
 8009010:	ec55 4b10 	vmov	r4, r5, d0
 8009014:	b083      	sub	sp, #12
 8009016:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800901a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800901e:	9001      	str	r0, [sp, #4]
 8009020:	da06      	bge.n	8009030 <__kernel_sin+0x30>
 8009022:	ee10 0a10 	vmov	r0, s0
 8009026:	4629      	mov	r1, r5
 8009028:	f7f7 fda0 	bl	8000b6c <__aeabi_d2iz>
 800902c:	2800      	cmp	r0, #0
 800902e:	d051      	beq.n	80090d4 <__kernel_sin+0xd4>
 8009030:	4622      	mov	r2, r4
 8009032:	462b      	mov	r3, r5
 8009034:	4620      	mov	r0, r4
 8009036:	4629      	mov	r1, r5
 8009038:	f7f7 fafe 	bl	8000638 <__aeabi_dmul>
 800903c:	4682      	mov	sl, r0
 800903e:	468b      	mov	fp, r1
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4620      	mov	r0, r4
 8009046:	4629      	mov	r1, r5
 8009048:	f7f7 faf6 	bl	8000638 <__aeabi_dmul>
 800904c:	a341      	add	r3, pc, #260	; (adr r3, 8009154 <__kernel_sin+0x154>)
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	4680      	mov	r8, r0
 8009054:	4689      	mov	r9, r1
 8009056:	4650      	mov	r0, sl
 8009058:	4659      	mov	r1, fp
 800905a:	f7f7 faed 	bl	8000638 <__aeabi_dmul>
 800905e:	a33f      	add	r3, pc, #252	; (adr r3, 800915c <__kernel_sin+0x15c>)
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	f7f7 f930 	bl	80002c8 <__aeabi_dsub>
 8009068:	4652      	mov	r2, sl
 800906a:	465b      	mov	r3, fp
 800906c:	f7f7 fae4 	bl	8000638 <__aeabi_dmul>
 8009070:	a33c      	add	r3, pc, #240	; (adr r3, 8009164 <__kernel_sin+0x164>)
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	f7f7 f929 	bl	80002cc <__adddf3>
 800907a:	4652      	mov	r2, sl
 800907c:	465b      	mov	r3, fp
 800907e:	f7f7 fadb 	bl	8000638 <__aeabi_dmul>
 8009082:	a33a      	add	r3, pc, #232	; (adr r3, 800916c <__kernel_sin+0x16c>)
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	f7f7 f91e 	bl	80002c8 <__aeabi_dsub>
 800908c:	4652      	mov	r2, sl
 800908e:	465b      	mov	r3, fp
 8009090:	f7f7 fad2 	bl	8000638 <__aeabi_dmul>
 8009094:	a337      	add	r3, pc, #220	; (adr r3, 8009174 <__kernel_sin+0x174>)
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	f7f7 f917 	bl	80002cc <__adddf3>
 800909e:	9b01      	ldr	r3, [sp, #4]
 80090a0:	4606      	mov	r6, r0
 80090a2:	460f      	mov	r7, r1
 80090a4:	b9eb      	cbnz	r3, 80090e2 <__kernel_sin+0xe2>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4650      	mov	r0, sl
 80090ac:	4659      	mov	r1, fp
 80090ae:	f7f7 fac3 	bl	8000638 <__aeabi_dmul>
 80090b2:	a325      	add	r3, pc, #148	; (adr r3, 8009148 <__kernel_sin+0x148>)
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 f906 	bl	80002c8 <__aeabi_dsub>
 80090bc:	4642      	mov	r2, r8
 80090be:	464b      	mov	r3, r9
 80090c0:	f7f7 faba 	bl	8000638 <__aeabi_dmul>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4620      	mov	r0, r4
 80090ca:	4629      	mov	r1, r5
 80090cc:	f7f7 f8fe 	bl	80002cc <__adddf3>
 80090d0:	4604      	mov	r4, r0
 80090d2:	460d      	mov	r5, r1
 80090d4:	ec45 4b10 	vmov	d0, r4, r5
 80090d8:	b003      	add	sp, #12
 80090da:	ecbd 8b04 	vpop	{d8-d9}
 80090de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e2:	4b1b      	ldr	r3, [pc, #108]	; (8009150 <__kernel_sin+0x150>)
 80090e4:	ec51 0b18 	vmov	r0, r1, d8
 80090e8:	2200      	movs	r2, #0
 80090ea:	f7f7 faa5 	bl	8000638 <__aeabi_dmul>
 80090ee:	4632      	mov	r2, r6
 80090f0:	ec41 0b19 	vmov	d9, r0, r1
 80090f4:	463b      	mov	r3, r7
 80090f6:	4640      	mov	r0, r8
 80090f8:	4649      	mov	r1, r9
 80090fa:	f7f7 fa9d 	bl	8000638 <__aeabi_dmul>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	ec51 0b19 	vmov	r0, r1, d9
 8009106:	f7f7 f8df 	bl	80002c8 <__aeabi_dsub>
 800910a:	4652      	mov	r2, sl
 800910c:	465b      	mov	r3, fp
 800910e:	f7f7 fa93 	bl	8000638 <__aeabi_dmul>
 8009112:	ec53 2b18 	vmov	r2, r3, d8
 8009116:	f7f7 f8d7 	bl	80002c8 <__aeabi_dsub>
 800911a:	a30b      	add	r3, pc, #44	; (adr r3, 8009148 <__kernel_sin+0x148>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	4606      	mov	r6, r0
 8009122:	460f      	mov	r7, r1
 8009124:	4640      	mov	r0, r8
 8009126:	4649      	mov	r1, r9
 8009128:	f7f7 fa86 	bl	8000638 <__aeabi_dmul>
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	4630      	mov	r0, r6
 8009132:	4639      	mov	r1, r7
 8009134:	f7f7 f8ca 	bl	80002cc <__adddf3>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4620      	mov	r0, r4
 800913e:	4629      	mov	r1, r5
 8009140:	f7f7 f8c2 	bl	80002c8 <__aeabi_dsub>
 8009144:	e7c4      	b.n	80090d0 <__kernel_sin+0xd0>
 8009146:	bf00      	nop
 8009148:	55555549 	.word	0x55555549
 800914c:	3fc55555 	.word	0x3fc55555
 8009150:	3fe00000 	.word	0x3fe00000
 8009154:	5acfd57c 	.word	0x5acfd57c
 8009158:	3de5d93a 	.word	0x3de5d93a
 800915c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009160:	3e5ae5e6 	.word	0x3e5ae5e6
 8009164:	57b1fe7d 	.word	0x57b1fe7d
 8009168:	3ec71de3 	.word	0x3ec71de3
 800916c:	19c161d5 	.word	0x19c161d5
 8009170:	3f2a01a0 	.word	0x3f2a01a0
 8009174:	1110f8a6 	.word	0x1110f8a6
 8009178:	3f811111 	.word	0x3f811111

0800917c <fabs>:
 800917c:	ec51 0b10 	vmov	r0, r1, d0
 8009180:	ee10 2a10 	vmov	r2, s0
 8009184:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009188:	ec43 2b10 	vmov	d0, r2, r3
 800918c:	4770      	bx	lr
	...

08009190 <floor>:
 8009190:	ec51 0b10 	vmov	r0, r1, d0
 8009194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009198:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800919c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80091a0:	2e13      	cmp	r6, #19
 80091a2:	ee10 5a10 	vmov	r5, s0
 80091a6:	ee10 8a10 	vmov	r8, s0
 80091aa:	460c      	mov	r4, r1
 80091ac:	dc32      	bgt.n	8009214 <floor+0x84>
 80091ae:	2e00      	cmp	r6, #0
 80091b0:	da14      	bge.n	80091dc <floor+0x4c>
 80091b2:	a333      	add	r3, pc, #204	; (adr r3, 8009280 <floor+0xf0>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	f7f7 f888 	bl	80002cc <__adddf3>
 80091bc:	2200      	movs	r2, #0
 80091be:	2300      	movs	r3, #0
 80091c0:	f7f7 fcca 	bl	8000b58 <__aeabi_dcmpgt>
 80091c4:	b138      	cbz	r0, 80091d6 <floor+0x46>
 80091c6:	2c00      	cmp	r4, #0
 80091c8:	da57      	bge.n	800927a <floor+0xea>
 80091ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80091ce:	431d      	orrs	r5, r3
 80091d0:	d001      	beq.n	80091d6 <floor+0x46>
 80091d2:	4c2d      	ldr	r4, [pc, #180]	; (8009288 <floor+0xf8>)
 80091d4:	2500      	movs	r5, #0
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	e025      	b.n	8009228 <floor+0x98>
 80091dc:	4f2b      	ldr	r7, [pc, #172]	; (800928c <floor+0xfc>)
 80091de:	4137      	asrs	r7, r6
 80091e0:	ea01 0307 	and.w	r3, r1, r7
 80091e4:	4303      	orrs	r3, r0
 80091e6:	d01f      	beq.n	8009228 <floor+0x98>
 80091e8:	a325      	add	r3, pc, #148	; (adr r3, 8009280 <floor+0xf0>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	f7f7 f86d 	bl	80002cc <__adddf3>
 80091f2:	2200      	movs	r2, #0
 80091f4:	2300      	movs	r3, #0
 80091f6:	f7f7 fcaf 	bl	8000b58 <__aeabi_dcmpgt>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d0eb      	beq.n	80091d6 <floor+0x46>
 80091fe:	2c00      	cmp	r4, #0
 8009200:	bfbe      	ittt	lt
 8009202:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009206:	fa43 f606 	asrlt.w	r6, r3, r6
 800920a:	19a4      	addlt	r4, r4, r6
 800920c:	ea24 0407 	bic.w	r4, r4, r7
 8009210:	2500      	movs	r5, #0
 8009212:	e7e0      	b.n	80091d6 <floor+0x46>
 8009214:	2e33      	cmp	r6, #51	; 0x33
 8009216:	dd0b      	ble.n	8009230 <floor+0xa0>
 8009218:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800921c:	d104      	bne.n	8009228 <floor+0x98>
 800921e:	ee10 2a10 	vmov	r2, s0
 8009222:	460b      	mov	r3, r1
 8009224:	f7f7 f852 	bl	80002cc <__adddf3>
 8009228:	ec41 0b10 	vmov	d0, r0, r1
 800922c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009230:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009234:	f04f 33ff 	mov.w	r3, #4294967295
 8009238:	fa23 f707 	lsr.w	r7, r3, r7
 800923c:	4207      	tst	r7, r0
 800923e:	d0f3      	beq.n	8009228 <floor+0x98>
 8009240:	a30f      	add	r3, pc, #60	; (adr r3, 8009280 <floor+0xf0>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	f7f7 f841 	bl	80002cc <__adddf3>
 800924a:	2200      	movs	r2, #0
 800924c:	2300      	movs	r3, #0
 800924e:	f7f7 fc83 	bl	8000b58 <__aeabi_dcmpgt>
 8009252:	2800      	cmp	r0, #0
 8009254:	d0bf      	beq.n	80091d6 <floor+0x46>
 8009256:	2c00      	cmp	r4, #0
 8009258:	da02      	bge.n	8009260 <floor+0xd0>
 800925a:	2e14      	cmp	r6, #20
 800925c:	d103      	bne.n	8009266 <floor+0xd6>
 800925e:	3401      	adds	r4, #1
 8009260:	ea25 0507 	bic.w	r5, r5, r7
 8009264:	e7b7      	b.n	80091d6 <floor+0x46>
 8009266:	2301      	movs	r3, #1
 8009268:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800926c:	fa03 f606 	lsl.w	r6, r3, r6
 8009270:	4435      	add	r5, r6
 8009272:	4545      	cmp	r5, r8
 8009274:	bf38      	it	cc
 8009276:	18e4      	addcc	r4, r4, r3
 8009278:	e7f2      	b.n	8009260 <floor+0xd0>
 800927a:	2500      	movs	r5, #0
 800927c:	462c      	mov	r4, r5
 800927e:	e7aa      	b.n	80091d6 <floor+0x46>
 8009280:	8800759c 	.word	0x8800759c
 8009284:	7e37e43c 	.word	0x7e37e43c
 8009288:	bff00000 	.word	0xbff00000
 800928c:	000fffff 	.word	0x000fffff

08009290 <scalbn>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	ec55 4b10 	vmov	r4, r5, d0
 8009296:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800929a:	4606      	mov	r6, r0
 800929c:	462b      	mov	r3, r5
 800929e:	b99a      	cbnz	r2, 80092c8 <scalbn+0x38>
 80092a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80092a4:	4323      	orrs	r3, r4
 80092a6:	d036      	beq.n	8009316 <scalbn+0x86>
 80092a8:	4b39      	ldr	r3, [pc, #228]	; (8009390 <scalbn+0x100>)
 80092aa:	4629      	mov	r1, r5
 80092ac:	ee10 0a10 	vmov	r0, s0
 80092b0:	2200      	movs	r2, #0
 80092b2:	f7f7 f9c1 	bl	8000638 <__aeabi_dmul>
 80092b6:	4b37      	ldr	r3, [pc, #220]	; (8009394 <scalbn+0x104>)
 80092b8:	429e      	cmp	r6, r3
 80092ba:	4604      	mov	r4, r0
 80092bc:	460d      	mov	r5, r1
 80092be:	da10      	bge.n	80092e2 <scalbn+0x52>
 80092c0:	a32b      	add	r3, pc, #172	; (adr r3, 8009370 <scalbn+0xe0>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	e03a      	b.n	800933e <scalbn+0xae>
 80092c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80092cc:	428a      	cmp	r2, r1
 80092ce:	d10c      	bne.n	80092ea <scalbn+0x5a>
 80092d0:	ee10 2a10 	vmov	r2, s0
 80092d4:	4620      	mov	r0, r4
 80092d6:	4629      	mov	r1, r5
 80092d8:	f7f6 fff8 	bl	80002cc <__adddf3>
 80092dc:	4604      	mov	r4, r0
 80092de:	460d      	mov	r5, r1
 80092e0:	e019      	b.n	8009316 <scalbn+0x86>
 80092e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80092e6:	460b      	mov	r3, r1
 80092e8:	3a36      	subs	r2, #54	; 0x36
 80092ea:	4432      	add	r2, r6
 80092ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80092f0:	428a      	cmp	r2, r1
 80092f2:	dd08      	ble.n	8009306 <scalbn+0x76>
 80092f4:	2d00      	cmp	r5, #0
 80092f6:	a120      	add	r1, pc, #128	; (adr r1, 8009378 <scalbn+0xe8>)
 80092f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092fc:	da1c      	bge.n	8009338 <scalbn+0xa8>
 80092fe:	a120      	add	r1, pc, #128	; (adr r1, 8009380 <scalbn+0xf0>)
 8009300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009304:	e018      	b.n	8009338 <scalbn+0xa8>
 8009306:	2a00      	cmp	r2, #0
 8009308:	dd08      	ble.n	800931c <scalbn+0x8c>
 800930a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800930e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009312:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009316:	ec45 4b10 	vmov	d0, r4, r5
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009320:	da19      	bge.n	8009356 <scalbn+0xc6>
 8009322:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009326:	429e      	cmp	r6, r3
 8009328:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800932c:	dd0a      	ble.n	8009344 <scalbn+0xb4>
 800932e:	a112      	add	r1, pc, #72	; (adr r1, 8009378 <scalbn+0xe8>)
 8009330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e2      	bne.n	80092fe <scalbn+0x6e>
 8009338:	a30f      	add	r3, pc, #60	; (adr r3, 8009378 <scalbn+0xe8>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f7 f97b 	bl	8000638 <__aeabi_dmul>
 8009342:	e7cb      	b.n	80092dc <scalbn+0x4c>
 8009344:	a10a      	add	r1, pc, #40	; (adr r1, 8009370 <scalbn+0xe0>)
 8009346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0b8      	beq.n	80092c0 <scalbn+0x30>
 800934e:	a10e      	add	r1, pc, #56	; (adr r1, 8009388 <scalbn+0xf8>)
 8009350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009354:	e7b4      	b.n	80092c0 <scalbn+0x30>
 8009356:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800935a:	3236      	adds	r2, #54	; 0x36
 800935c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009360:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009364:	4620      	mov	r0, r4
 8009366:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <scalbn+0x108>)
 8009368:	2200      	movs	r2, #0
 800936a:	e7e8      	b.n	800933e <scalbn+0xae>
 800936c:	f3af 8000 	nop.w
 8009370:	c2f8f359 	.word	0xc2f8f359
 8009374:	01a56e1f 	.word	0x01a56e1f
 8009378:	8800759c 	.word	0x8800759c
 800937c:	7e37e43c 	.word	0x7e37e43c
 8009380:	8800759c 	.word	0x8800759c
 8009384:	fe37e43c 	.word	0xfe37e43c
 8009388:	c2f8f359 	.word	0xc2f8f359
 800938c:	81a56e1f 	.word	0x81a56e1f
 8009390:	43500000 	.word	0x43500000
 8009394:	ffff3cb0 	.word	0xffff3cb0
 8009398:	3c900000 	.word	0x3c900000

0800939c <_init>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	bf00      	nop
 80093a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a2:	bc08      	pop	{r3}
 80093a4:	469e      	mov	lr, r3
 80093a6:	4770      	bx	lr

080093a8 <_fini>:
 80093a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093aa:	bf00      	nop
 80093ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ae:	bc08      	pop	{r3}
 80093b0:	469e      	mov	lr, r3
 80093b2:	4770      	bx	lr
