
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c660  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca0  0800c830  0800c830  0001c830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4d0  0800d4d0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4d0  0800d4d0  0001d4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4d8  0800d4d8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4d8  0800d4d8  0001d4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4dc  0800d4dc  0001d4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d4e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  200001f0  0800d6d0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800d6d0  00020964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8cb  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c1e  00000000  00000000  0003baeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003f710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  00040c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293a3  00000000  00000000  00041f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b881  00000000  00000000  0006b313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fae33  00000000  00000000  00086b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c9  00000000  00000000  001819c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad4  00000000  00000000  00181a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c818 	.word	0x0800c818

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c818 	.word	0x0800c818

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b9aa 	b.w	8001008 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f83c 	bl	8000d38 <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_d2lz>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	f7ff ff21 	bl	8000b1c <__aeabi_dcmplt>
 8000cda:	b928      	cbnz	r0, 8000ce8 <__aeabi_d2lz+0x1c>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce4:	f000 b80a 	b.w	8000cfc <__aeabi_d2ulz>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cee:	f000 f805 	bl	8000cfc <__aeabi_d2ulz>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop

08000cfc <__aeabi_d2ulz>:
 8000cfc:	b5d0      	push	{r4, r6, r7, lr}
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__aeabi_d2ulz+0x34>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	4606      	mov	r6, r0
 8000d04:	460f      	mov	r7, r1
 8000d06:	f7ff fc97 	bl	8000638 <__aeabi_dmul>
 8000d0a:	f7ff ff57 	bl	8000bbc <__aeabi_d2uiz>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fc18 	bl	8000544 <__aeabi_ui2d>
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <__aeabi_d2ulz+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f7ff fc8e 	bl	8000638 <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f7ff fad0 	bl	80002c8 <__aeabi_dsub>
 8000d28:	f7ff ff48 	bl	8000bbc <__aeabi_d2uiz>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d30:	3df00000 	.word	0x3df00000
 8000d34:	41f00000 	.word	0x41f00000

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468e      	mov	lr, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d14d      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d46:	428a      	cmp	r2, r1
 8000d48:	4694      	mov	ip, r2
 8000d4a:	d969      	bls.n	8000e20 <__udivmoddi4+0xe8>
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	b152      	cbz	r2, 8000d68 <__udivmoddi4+0x30>
 8000d52:	fa01 f302 	lsl.w	r3, r1, r2
 8000d56:	f1c2 0120 	rsb	r1, r2, #32
 8000d5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d62:	ea41 0e03 	orr.w	lr, r1, r3
 8000d66:	4094      	lsls	r4, r2
 8000d68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d6c:	0c21      	lsrs	r1, r4, #16
 8000d6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d72:	fa1f f78c 	uxth.w	r7, ip
 8000d76:	fb08 e316 	mls	r3, r8, r6, lr
 8000d7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7e:	fb06 f107 	mul.w	r1, r6, r7
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8e:	f080 811f 	bcs.w	8000fd0 <__udivmoddi4+0x298>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 811c 	bls.w	8000fd0 <__udivmoddi4+0x298>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dac:	fb00 f707 	mul.w	r7, r0, r7
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x92>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	f080 810a 	bcs.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc0:	42a7      	cmp	r7, r4
 8000dc2:	f240 8107 	bls.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dce:	1be4      	subs	r4, r4, r7
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	b11d      	cbz	r5, 8000ddc <__udivmoddi4+0xa4>
 8000dd4:	40d4      	lsrs	r4, r2
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0xc2>
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	f000 80ef 	beq.w	8000fca <__udivmoddi4+0x292>
 8000dec:	2600      	movs	r6, #0
 8000dee:	e9c5 0100 	strd	r0, r1, [r5]
 8000df2:	4630      	mov	r0, r6
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	fab3 f683 	clz	r6, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d14a      	bne.n	8000e98 <__udivmoddi4+0x160>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xd4>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 80f9 	bhi.w	8000ffe <__udivmoddi4+0x2c6>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	469e      	mov	lr, r3
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e0      	beq.n	8000ddc <__udivmoddi4+0xa4>
 8000e1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1e:	e7dd      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000e20:	b902      	cbnz	r2, 8000e24 <__udivmoddi4+0xec>
 8000e22:	deff      	udf	#255	; 0xff
 8000e24:	fab2 f282 	clz	r2, r2
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	f040 8092 	bne.w	8000f52 <__udivmoddi4+0x21a>
 8000e2e:	eba1 010c 	sub.w	r1, r1, ip
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	2601      	movs	r6, #1
 8000e3c:	0c20      	lsrs	r0, r4, #16
 8000e3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e42:	fb07 1113 	mls	r1, r7, r3, r1
 8000e46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4a:	fb0e f003 	mul.w	r0, lr, r3
 8000e4e:	4288      	cmp	r0, r1
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x12c>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x12a>
 8000e5c:	4288      	cmp	r0, r1
 8000e5e:	f200 80cb 	bhi.w	8000ff8 <__udivmoddi4+0x2c0>
 8000e62:	4643      	mov	r3, r8
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e74:	fb0e fe00 	mul.w	lr, lr, r0
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x156>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e84:	d202      	bcs.n	8000e8c <__udivmoddi4+0x154>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f200 80bb 	bhi.w	8001002 <__udivmoddi4+0x2ca>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	eba4 040e 	sub.w	r4, r4, lr
 8000e92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e96:	e79c      	b.n	8000dd2 <__udivmoddi4+0x9a>
 8000e98:	f1c6 0720 	rsb	r7, r6, #32
 8000e9c:	40b3      	lsls	r3, r6
 8000e9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000eae:	431c      	orrs	r4, r3
 8000eb0:	40f9      	lsrs	r1, r7
 8000eb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ebe:	0c20      	lsrs	r0, r4, #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed6:	d90b      	bls.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee0:	f080 8088 	bcs.w	8000ff4 <__udivmoddi4+0x2bc>
 8000ee4:	4288      	cmp	r0, r1
 8000ee6:	f240 8085 	bls.w	8000ff4 <__udivmoddi4+0x2bc>
 8000eea:	f1a8 0802 	sub.w	r8, r8, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef8:	fb09 1110 	mls	r1, r9, r0, r1
 8000efc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f04:	458e      	cmp	lr, r1
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x1e2>
 8000f08:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f10:	d26c      	bcs.n	8000fec <__udivmoddi4+0x2b4>
 8000f12:	458e      	cmp	lr, r1
 8000f14:	d96a      	bls.n	8000fec <__udivmoddi4+0x2b4>
 8000f16:	3802      	subs	r0, #2
 8000f18:	4461      	add	r1, ip
 8000f1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f22:	eba1 010e 	sub.w	r1, r1, lr
 8000f26:	42a1      	cmp	r1, r4
 8000f28:	46c8      	mov	r8, r9
 8000f2a:	46a6      	mov	lr, r4
 8000f2c:	d356      	bcc.n	8000fdc <__udivmoddi4+0x2a4>
 8000f2e:	d053      	beq.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f30:	b15d      	cbz	r5, 8000f4a <__udivmoddi4+0x212>
 8000f32:	ebb3 0208 	subs.w	r2, r3, r8
 8000f36:	eb61 010e 	sbc.w	r1, r1, lr
 8000f3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f42:	40f1      	lsrs	r1, r6
 8000f44:	431f      	orrs	r7, r3
 8000f46:	e9c5 7100 	strd	r7, r1, [r5]
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	f1c2 0320 	rsb	r3, r2, #32
 8000f56:	40d8      	lsrs	r0, r3
 8000f58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f60:	4091      	lsls	r1, r2
 8000f62:	4301      	orrs	r1, r0
 8000f64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f68:	fa1f fe8c 	uxth.w	lr, ip
 8000f6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f70:	fb07 3610 	mls	r6, r7, r0, r3
 8000f74:	0c0b      	lsrs	r3, r1, #16
 8000f76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7e:	429e      	cmp	r6, r3
 8000f80:	fa04 f402 	lsl.w	r4, r4, r2
 8000f84:	d908      	bls.n	8000f98 <__udivmoddi4+0x260>
 8000f86:	eb1c 0303 	adds.w	r3, ip, r3
 8000f8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8e:	d22f      	bcs.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f90:	429e      	cmp	r6, r3
 8000f92:	d92d      	bls.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f94:	3802      	subs	r0, #2
 8000f96:	4463      	add	r3, ip
 8000f98:	1b9b      	subs	r3, r3, r6
 8000f9a:	b289      	uxth	r1, r1
 8000f9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fa0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fac:	428b      	cmp	r3, r1
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x28a>
 8000fb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb8:	d216      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	d914      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fbe:	3e02      	subs	r6, #2
 8000fc0:	4461      	add	r1, ip
 8000fc2:	1ac9      	subs	r1, r1, r3
 8000fc4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc8:	e738      	b.n	8000e3c <__udivmoddi4+0x104>
 8000fca:	462e      	mov	r6, r5
 8000fcc:	4628      	mov	r0, r5
 8000fce:	e705      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	e6e3      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	e6f8      	b.n	8000dca <__udivmoddi4+0x92>
 8000fd8:	454b      	cmp	r3, r9
 8000fda:	d2a9      	bcs.n	8000f30 <__udivmoddi4+0x1f8>
 8000fdc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	e7a3      	b.n	8000f30 <__udivmoddi4+0x1f8>
 8000fe8:	4646      	mov	r6, r8
 8000fea:	e7ea      	b.n	8000fc2 <__udivmoddi4+0x28a>
 8000fec:	4620      	mov	r0, r4
 8000fee:	e794      	b.n	8000f1a <__udivmoddi4+0x1e2>
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	e7d1      	b.n	8000f98 <__udivmoddi4+0x260>
 8000ff4:	46d0      	mov	r8, sl
 8000ff6:	e77b      	b.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ff8:	3b02      	subs	r3, #2
 8000ffa:	4461      	add	r1, ip
 8000ffc:	e732      	b.n	8000e64 <__udivmoddi4+0x12c>
 8000ffe:	4630      	mov	r0, r6
 8001000:	e709      	b.n	8000e16 <__udivmoddi4+0xde>
 8001002:	4464      	add	r4, ip
 8001004:	3802      	subs	r0, #2
 8001006:	e742      	b.n	8000e8e <__udivmoddi4+0x156>

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MCP9808_Init>:
 * write bit.
 *
 * @param hi2c A pointer to the I2C handler.
 * @param addr Address of MCP9808 on I2C bus (default 0x18).
 */
void MCP9808_Init(I2C_HandleTypeDef *hi2c, uint8_t addr) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
	mcp9808.hi2c = hi2c;
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <MCP9808_Init+0x30>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
	mcp9808.address = addr << 1;
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <MCP9808_Init+0x30>)
 8001026:	711a      	strb	r2, [r3, #4]
	mcp9808.resolution = MCP9808_VeryHigh_Res;
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <MCP9808_Init+0x30>)
 800102a:	2203      	movs	r2, #3
 800102c:	715a      	strb	r2, [r3, #5]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000020c 	.word	0x2000020c

08001040 <MCP9808_Write>:
 *
 * @param _reg Pointer to a register.
 * @param value The data on which to send.
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Write(MCP9808_REG_TypeDef *_reg, uint8_t *value) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	uint8_t reg[] = {*_reg, *value};
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	733b      	strb	r3, [r7, #12]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MCP9808_Write+0x40>)
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MCP9808_Write+0x40>)
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	b299      	uxth	r1, r3
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	f002 ffee 	bl	800404c <HAL_I2C_Master_Transmit>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
			reg, sizeof(reg), HAL_MAX_DELAY);

	return res;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000020c 	.word	0x2000020c

08001084 <MCP9808_Read>:
 * @param _reg Pointer to a register.
 * @param buf A pointer to a buffer to store the response in.
 * @param buf_size The size of the buffer (n values).
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Read(MCP9808_REG_TypeDef *_reg, uint8_t *buf, uint8_t buf_size) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af02      	add	r7, sp, #8
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	71fb      	strb	r3, [r7, #7]

	uint8_t reg[1] = {*_reg};
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MCP9808_Read+0x70>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MCP9808_Read+0x70>)
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	f107 0214 	add.w	r2, r7, #20
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	f002 ffcd 	bl	800404c <HAL_I2C_Master_Transmit>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
			reg, sizeof(reg), HAL_MAX_DELAY);


	if(res != HAL_OK){
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MCP9808_Read+0x3c>
		return res;
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	e014      	b.n	80010ea <MCP9808_Read+0x66>
	}

	res = HAL_I2C_Master_Receive(mcp9808.hi2c, mcp9808.address, buf, buf_size, HAL_MAX_DELAY);
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MCP9808_Read+0x70>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MCP9808_Read+0x70>)
 80010c6:	791b      	ldrb	r3, [r3, #4]
 80010c8:	b299      	uxth	r1, r3
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	9200      	str	r2, [sp, #0]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	f003 f8ad 	bl	8004234 <HAL_I2C_Master_Receive>
 80010da:	4603      	mov	r3, r0
 80010dc:	75fb      	strb	r3, [r7, #23]

	if(res != HAL_OK){
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MCP9808_Read+0x64>
		return res;
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	e000      	b.n	80010ea <MCP9808_Read+0x66>
	}

	return res;
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000020c 	.word	0x2000020c

080010f8 <MCP9808_MeasureTemperature>:
 *
 * @param temperature A pointer to a temperature float to store a returned
 * value from.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_MeasureTemperature(float *temperature) {
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	MCP9808_REG_TypeDef reg = MCP9808_T_AMBIENT_REG;
 8001100:	2305      	movs	r3, #5
 8001102:	733b      	strb	r3, [r7, #12]
	uint8_t buf[2];
	HAL_StatusTypeDef res = MCP9808_Read(&reg, buf, sizeof(buf));
 8001104:	f107 0108 	add.w	r1, r7, #8
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2202      	movs	r2, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffb8 	bl	8001084 <MCP9808_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d162      	bne.n	80011e4 <MCP9808_MeasureTemperature+0xec>
		uint8_t upper = buf[0];
 800111e:	7a3b      	ldrb	r3, [r7, #8]
 8001120:	73bb      	strb	r3, [r7, #14]
		upper &= 0x1F;
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	73bb      	strb	r3, [r7, #14]
		uint8_t lower = buf[1];
 800112a:	7a7b      	ldrb	r3, [r7, #9]
 800112c:	737b      	strb	r3, [r7, #13]

		if((upper & 0x10) == 0x10) {
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b00      	cmp	r3, #0
 8001136:	d030      	beq.n	800119a <MCP9808_MeasureTemperature+0xa2>
			upper &= 0x0F;
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	73bb      	strb	r3, [r7, #14]
			*temperature = 256 - (upper * 16.0) + (lower / 16.0);
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa0e 	bl	8000564 <__aeabi_i2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 800114e:	f7ff fa73 	bl	8000638 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4926      	ldr	r1, [pc, #152]	; (80011f4 <MCP9808_MeasureTemperature+0xfc>)
 800115c:	f7ff f8b4 	bl	80002c8 <__aeabi_dsub>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9fa 	bl	8000564 <__aeabi_i2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 8001176:	f7ff fb89 	bl	800088c <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f8a3 	bl	80002cc <__adddf3>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fd35 	bl	8000bfc <__aeabi_d2f>
 8001192:	4602      	mov	r2, r0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e024      	b.n	80011e4 <MCP9808_MeasureTemperature+0xec>
		} else {
			*temperature = (upper * 16.0) + (lower / 16.0);
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9e1 	bl	8000564 <__aeabi_i2d>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 80011a8:	f7ff fa46 	bl	8000638 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4614      	mov	r4, r2
 80011b2:	461d      	mov	r5, r3
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9d4 	bl	8000564 <__aeabi_i2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 80011c2:	f7ff fb63 	bl	800088c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f87d 	bl	80002cc <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fd0f 	bl	8000bfc <__aeabi_d2f>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	601a      	str	r2, [r3, #0]
		}
	}

	return res;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bdb0      	pop	{r4, r5, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40300000 	.word	0x40300000
 80011f4:	40700000 	.word	0x40700000

080011f8 <MCP9808_SetResolution>:
 * VeryHigh = 0.0625 (slowest 250 ms)
 *
 * @param resolution Desired resolution to switch to.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_SetResolution(MCP9808_Resolution_TypeDef resolution) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]

	MCP9808_REG_TypeDef reg = MCP9808_RESOLUTION_REG;
 8001202:	2308      	movs	r3, #8
 8001204:	73bb      	strb	r3, [r7, #14]
	uint8_t value = resolution & 0x03;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef res = MCP9808_Write(&reg, &value);
 8001210:	f107 020d 	add.w	r2, r7, #13
 8001214:	f107 030e 	add.w	r3, r7, #14
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff10 	bl	8001040 <MCP9808_Write>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <MCP9808_SetResolution+0x38>
		mcp9808.resolution = resolution;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <MCP9808_SetResolution+0x44>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	7153      	strb	r3, [r2, #5]
	}

	return res;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000020c 	.word	0x2000020c

08001240 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af04      	add	r7, sp, #16
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	2301      	movs	r3, #1
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	2200      	movs	r2, #0
 800126c:	2178      	movs	r1, #120	; 0x78
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <ssd1306_WriteCommand+0x2c>)
 8001270:	f003 f8d6 	bl	8004420 <HAL_I2C_Mem_Write>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000664 	.word	0x20000664

08001280 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af04      	add	r7, sp, #16
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	f04f 32ff 	mov.w	r2, #4294967295
 8001292:	9202      	str	r2, [sp, #8]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	2178      	movs	r1, #120	; 0x78
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <ssd1306_WriteData+0x30>)
 80012a2:	f003 f8bd 	bl	8004420 <HAL_I2C_Mem_Write>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000664 	.word	0x20000664

080012b4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80012b8:	f7ff ffc2 	bl	8001240 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80012bc:	2064      	movs	r0, #100	; 0x64
 80012be:	f001 fe95 	bl	8002fec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f9da 	bl	800167c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80012c8:	2020      	movs	r0, #32
 80012ca:	f7ff ffc1 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ffbe 	bl	8001250 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012d4:	20b0      	movs	r0, #176	; 0xb0
 80012d6:	f7ff ffbb 	bl	8001250 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012da:	20c8      	movs	r0, #200	; 0xc8
 80012dc:	f7ff ffb8 	bl	8001250 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ffb5 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012e6:	2010      	movs	r0, #16
 80012e8:	f7ff ffb2 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012ec:	2040      	movs	r0, #64	; 0x40
 80012ee:	f7ff ffaf 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012f2:	20ff      	movs	r0, #255	; 0xff
 80012f4:	f000 f9ae 	bl	8001654 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012f8:	20a1      	movs	r0, #161	; 0xa1
 80012fa:	f7ff ffa9 	bl	8001250 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012fe:	20a6      	movs	r0, #166	; 0xa6
 8001300:	f7ff ffa6 	bl	8001250 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001304:	20a8      	movs	r0, #168	; 0xa8
 8001306:	f7ff ffa3 	bl	8001250 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800130a:	203f      	movs	r0, #63	; 0x3f
 800130c:	f7ff ffa0 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001310:	20a4      	movs	r0, #164	; 0xa4
 8001312:	f7ff ff9d 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001316:	20d3      	movs	r0, #211	; 0xd3
 8001318:	f7ff ff9a 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ff97 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001322:	20d5      	movs	r0, #213	; 0xd5
 8001324:	f7ff ff94 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001328:	20f0      	movs	r0, #240	; 0xf0
 800132a:	f7ff ff91 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800132e:	20d9      	movs	r0, #217	; 0xd9
 8001330:	f7ff ff8e 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001334:	2022      	movs	r0, #34	; 0x22
 8001336:	f7ff ff8b 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800133a:	20da      	movs	r0, #218	; 0xda
 800133c:	f7ff ff88 	bl	8001250 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001340:	2012      	movs	r0, #18
 8001342:	f7ff ff85 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001346:	20db      	movs	r0, #219	; 0xdb
 8001348:	f7ff ff82 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800134c:	2020      	movs	r0, #32
 800134e:	f7ff ff7f 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001352:	208d      	movs	r0, #141	; 0x8d
 8001354:	f7ff ff7c 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001358:	2014      	movs	r0, #20
 800135a:	f7ff ff79 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800135e:	2001      	movs	r0, #1
 8001360:	f000 f98c 	bl	800167c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f80f 	bl	8001388 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800136a:	f000 f831 	bl	80013d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <ssd1306_Init+0xd0>)
 8001370:	2200      	movs	r2, #0
 8001372:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <ssd1306_Init+0xd0>)
 8001376:	2200      	movs	r2, #0
 8001378:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800137a:	4b02      	ldr	r3, [pc, #8]	; (8001384 <ssd1306_Init+0xd0>)
 800137c:	2201      	movs	r2, #1
 800137e:	711a      	strb	r2, [r3, #4]
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000614 	.word	0x20000614

08001388 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e00d      	b.n	80013b4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <ssd1306_Fill+0x1a>
 800139e:	2100      	movs	r1, #0
 80013a0:	e000      	b.n	80013a4 <ssd1306_Fill+0x1c>
 80013a2:	21ff      	movs	r1, #255	; 0xff
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <ssd1306_Fill+0x44>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	460a      	mov	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d3ed      	bcc.n	8001398 <ssd1306_Fill+0x10>
    }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000214 	.word	0x20000214

080013d0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e016      	b.n	800140a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3b50      	subs	r3, #80	; 0x50
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff34 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff ff31 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013ee:	2010      	movs	r0, #16
 80013f0:	f7ff ff2e 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	01db      	lsls	r3, r3, #7
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <ssd1306_UpdateScreen+0x4c>)
 80013fa:	4413      	add	r3, r2
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff3e 	bl	8001280 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	3301      	adds	r3, #1
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b07      	cmp	r3, #7
 800140e:	d9e5      	bls.n	80013dc <ssd1306_UpdateScreen+0xc>
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000214 	.word	0x20000214

08001420 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	460b      	mov	r3, r1
 800142c:	71bb      	strb	r3, [r7, #6]
 800142e:	4613      	mov	r3, r2
 8001430:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db3d      	blt.n	80014b6 <ssd1306_DrawPixel+0x96>
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	2b3f      	cmp	r3, #63	; 0x3f
 800143e:	d83a      	bhi.n	80014b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001440:	797b      	ldrb	r3, [r7, #5]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11a      	bne.n	800147c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	4603      	mov	r3, r0
 8001450:	01db      	lsls	r3, r3, #7
 8001452:	4413      	add	r3, r2
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	b25a      	sxtb	r2, r3
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	b25b      	sxtb	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b259      	sxtb	r1, r3
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	4603      	mov	r3, r0
 8001470:	01db      	lsls	r3, r3, #7
 8001472:	4413      	add	r3, r2
 8001474:	b2c9      	uxtb	r1, r1
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 8001478:	54d1      	strb	r1, [r2, r3]
 800147a:	e01d      	b.n	80014b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	4603      	mov	r3, r0
 8001486:	01db      	lsls	r3, r3, #7
 8001488:	4413      	add	r3, r2
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	b25a      	sxtb	r2, r3
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	b25b      	sxtb	r3, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	b259      	sxtb	r1, r3
 80014a6:	79fa      	ldrb	r2, [r7, #7]
 80014a8:	4603      	mov	r3, r0
 80014aa:	01db      	lsls	r3, r3, #7
 80014ac:	4413      	add	r3, r2
 80014ae:	b2c9      	uxtb	r1, r1
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 80014b2:	54d1      	strb	r1, [r2, r3]
 80014b4:	e000      	b.n	80014b8 <ssd1306_DrawPixel+0x98>
        return;
 80014b6:	bf00      	nop
    }
}
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000214 	.word	0x20000214

080014c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4604      	mov	r4, r0
 80014d0:	1d38      	adds	r0, r7, #4
 80014d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80014d6:	461a      	mov	r2, r3
 80014d8:	4623      	mov	r3, r4
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	4613      	mov	r3, r2
 80014de:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b1f      	cmp	r3, #31
 80014e4:	d902      	bls.n	80014ec <ssd1306_WriteChar+0x24>
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b7e      	cmp	r3, #126	; 0x7e
 80014ea:	d901      	bls.n	80014f0 <ssd1306_WriteChar+0x28>
        return 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e06d      	b.n	80015cc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	793b      	ldrb	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	2b80      	cmp	r3, #128	; 0x80
 80014fc:	dc06      	bgt.n	800150c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001500:	885b      	ldrh	r3, [r3, #2]
 8001502:	461a      	mov	r2, r3
 8001504:	797b      	ldrb	r3, [r7, #5]
 8001506:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001508:	2b40      	cmp	r3, #64	; 0x40
 800150a:	dd01      	ble.n	8001510 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800150c:	2300      	movs	r3, #0
 800150e:	e05d      	b.n	80015cc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	e04c      	b.n	80015b0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3b20      	subs	r3, #32
 800151c:	7979      	ldrb	r1, [r7, #5]
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4619      	mov	r1, r3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	440b      	add	r3, r1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e034      	b.n	80015a0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d012      	beq.n	800156c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b2d8      	uxtb	r0, r3
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001556:	885b      	ldrh	r3, [r3, #2]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4413      	add	r3, r2
 8001560:	b2db      	uxtb	r3, r3
 8001562:	7bba      	ldrb	r2, [r7, #14]
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff ff5b 	bl	8001420 <ssd1306_DrawPixel>
 800156a:	e016      	b.n	800159a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b2d8      	uxtb	r0, r3
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b2d9      	uxtb	r1, r3
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	f7ff ff43 	bl	8001420 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	3301      	adds	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	793b      	ldrb	r3, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d3c5      	bcc.n	8001536 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	797b      	ldrb	r3, [r7, #5]
 80015b2:	461a      	mov	r2, r3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d3ad      	bcc.n	8001516 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80015c8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	20000614 	.word	0x20000614

080015d8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	1d38      	adds	r0, r7, #4
 80015e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80015e6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80015e8:	e012      	b.n	8001610 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	7818      	ldrb	r0, [r3, #0]
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	1d3a      	adds	r2, r7, #4
 80015f2:	ca06      	ldmia	r2, {r1, r2}
 80015f4:	f7ff ff68 	bl	80014c8 <ssd1306_WriteChar>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d002      	beq.n	800160a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	e008      	b.n	800161c <ssd1306_WriteString+0x44>
        }
        str++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e8      	bne.n	80015ea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	781b      	ldrb	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	460a      	mov	r2, r1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	4613      	mov	r3, r2
 8001632:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <ssd1306_SetCursor+0x2c>)
 800163a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <ssd1306_SetCursor+0x2c>)
 8001642:	805a      	strh	r2, [r3, #2]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000614 	.word	0x20000614

08001654 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800165e:	2381      	movs	r3, #129	; 0x81
 8001660:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fdf3 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fdef 	bl	8001250 <ssd1306_WriteCommand>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800168c:	23af      	movs	r3, #175	; 0xaf
 800168e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <ssd1306_SetDisplayOn+0x38>)
 8001692:	2201      	movs	r2, #1
 8001694:	715a      	strb	r2, [r3, #5]
 8001696:	e004      	b.n	80016a2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001698:	23ae      	movs	r3, #174	; 0xae
 800169a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <ssd1306_SetDisplayOn+0x38>)
 800169e:	2200      	movs	r2, #0
 80016a0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fdd3 	bl	8001250 <ssd1306_WriteCommand>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000614 	.word	0x20000614

080016b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_ADC1_Init+0x98>)
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_ADC1_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_ADC1_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_ADC1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f8:	4a17      	ldr	r2, [pc, #92]	; (8001758 <MX_ADC1_Init+0xa0>)
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_ADC1_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_ADC1_Init+0x98>)
 8001704:	2201      	movs	r2, #1
 8001706:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_ADC1_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_ADC1_Init+0x98>)
 8001712:	2201      	movs	r2, #1
 8001714:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <MX_ADC1_Init+0x98>)
 8001718:	f001 fc8c 	bl	8003034 <HAL_ADC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001722:	f000 ff47 	bl	80025b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001726:	2303      	movs	r3, #3
 8001728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800172a:	2301      	movs	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_ADC1_Init+0x98>)
 8001738:	f001 fe26 	bl	8003388 <HAL_ADC_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001742:	f000 ff37 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000061c 	.word	0x2000061c
 8001754:	40012000 	.word	0x40012000
 8001758:	0f000001 	.word	0x0f000001

0800175c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <HAL_ADC_MspInit+0x74>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d123      	bne.n	80017c6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ae:	2308      	movs	r3, #8
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b2:	2303      	movs	r3, #3
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_ADC_MspInit+0x7c>)
 80017c2:	f002 f9d5 	bl	8003b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40012000 	.word	0x40012000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	; 0x38
 80017e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <MX_GPIO_Init+0x268>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a93      	ldr	r2, [pc, #588]	; (8001a44 <MX_GPIO_Init+0x268>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800180a:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <MX_GPIO_Init+0x268>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a8d      	ldr	r2, [pc, #564]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a87      	ldr	r2, [pc, #540]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b85      	ldr	r3, [pc, #532]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b82      	ldr	r3, [pc, #520]	; (8001a44 <MX_GPIO_Init+0x268>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a81      	ldr	r2, [pc, #516]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b7f      	ldr	r3, [pc, #508]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a7b      	ldr	r2, [pc, #492]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b79      	ldr	r3, [pc, #484]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <MX_GPIO_Init+0x268>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001870:	f043 0310 	orr.w	r3, r3, #16
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	4b70      	ldr	r3, [pc, #448]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a6f      	ldr	r2, [pc, #444]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800189a:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <MX_GPIO_Init+0x268>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a69      	ldr	r2, [pc, #420]	; (8001a44 <MX_GPIO_Init+0x268>)
 80018a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <MX_GPIO_Init+0x268>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80018b8:	4863      	ldr	r0, [pc, #396]	; (8001a48 <MX_GPIO_Init+0x26c>)
 80018ba:	f002 fb1d 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2140      	movs	r1, #64	; 0x40
 80018c2:	4862      	ldr	r0, [pc, #392]	; (8001a4c <MX_GPIO_Init+0x270>)
 80018c4:	f002 fb18 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ce:	4860      	ldr	r0, [pc, #384]	; (8001a50 <MX_GPIO_Init+0x274>)
 80018d0:	f002 fb12 	bl	8003ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4859      	ldr	r0, [pc, #356]	; (8001a50 <MX_GPIO_Init+0x274>)
 80018ec:	f002 f940 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018f0:	2332      	movs	r3, #50	; 0x32
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001900:	230b      	movs	r3, #11
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4851      	ldr	r0, [pc, #324]	; (8001a50 <MX_GPIO_Init+0x274>)
 800190c:	f002 f930 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001910:	2386      	movs	r3, #134	; 0x86
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001920:	230b      	movs	r3, #11
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	4619      	mov	r1, r3
 800192a:	484a      	ldr	r0, [pc, #296]	; (8001a54 <MX_GPIO_Init+0x278>)
 800192c:	f002 f920 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001930:	f244 0381 	movw	r3, #16513	; 0x4081
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	483f      	ldr	r0, [pc, #252]	; (8001a48 <MX_GPIO_Init+0x26c>)
 800194a:	f002 f911 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800194e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001960:	230b      	movs	r3, #11
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	4837      	ldr	r0, [pc, #220]	; (8001a48 <MX_GPIO_Init+0x26c>)
 800196c:	f002 f900 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001970:	2340      	movs	r3, #64	; 0x40
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4831      	ldr	r0, [pc, #196]	; (8001a4c <MX_GPIO_Init+0x270>)
 8001988:	f002 f8f2 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	4619      	mov	r1, r3
 800199e:	482b      	ldr	r0, [pc, #172]	; (8001a4c <MX_GPIO_Init+0x270>)
 80019a0:	f002 f8e6 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = przycisk1_Pin|przycisk0_Pin;
 80019a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	4825      	ldr	r0, [pc, #148]	; (8001a50 <MX_GPIO_Init+0x274>)
 80019ba:	f002 f8d9 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019d0:	230a      	movs	r3, #10
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <MX_GPIO_Init+0x278>)
 80019dc:	f002 f8c8 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	4817      	ldr	r0, [pc, #92]	; (8001a54 <MX_GPIO_Init+0x278>)
 80019f6:	f002 f8bb 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = wentylator_Pin;
 80019fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(wentylator_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	4619      	mov	r1, r3
 8001a12:	480f      	ldr	r0, [pc, #60]	; (8001a50 <MX_GPIO_Init+0x274>)
 8001a14:	f002 f8ac 	bl	8003b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a2a:	230b      	movs	r3, #11
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_GPIO_Init+0x270>)
 8001a36:	f002 f89b 	bl	8003b70 <HAL_GPIO_Init>

}
 8001a3a:	bf00      	nop
 8001a3c:	3738      	adds	r7, #56	; 0x38
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020000 	.word	0x40020000

08001a58 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <MX_I2C2_Init+0x78>)
 8001a60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00501FE4;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <MX_I2C2_Init+0x7c>)
 8001a66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a92:	480e      	ldr	r0, [pc, #56]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a94:	f002 fa4a 	bl	8003f2c <HAL_I2C_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a9e:	f000 fd89 	bl	80025b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <MX_I2C2_Init+0x74>)
 8001aa6:	f003 f88f 	bl	8004bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ab0:	f000 fd80 	bl	80025b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_I2C2_Init+0x74>)
 8001ab8:	f003 f8d1 	bl	8004c5e <HAL_I2CEx_ConfigDigitalFilter>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ac2:	f000 fd77 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000664 	.word	0x20000664
 8001ad0:	40005800 	.word	0x40005800
 8001ad4:	00501fe4 	.word	0x00501fe4

08001ad8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <MX_I2C4_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <MX_I2C4_Init+0x7c>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001b12:	480e      	ldr	r0, [pc, #56]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b14:	f002 fa0a 	bl	8003f2c <HAL_I2C_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001b1e:	f000 fd49 	bl	80025b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b26:	f003 f84f 	bl	8004bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001b30:	f000 fd40 	bl	80025b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001b34:	2100      	movs	r1, #0
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b38:	f003 f891 	bl	8004c5e <HAL_I2CEx_ConfigDigitalFilter>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f000 fd37 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200006b8 	.word	0x200006b8
 8001b50:	40006000 	.word	0x40006000
 8001b54:	20404768 	.word	0x20404768

08001b58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0ac      	sub	sp, #176	; 0xb0
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	2284      	movs	r2, #132	; 0x84
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f006 ff67 	bl	8008a4c <memset>
  if(i2cHandle->Instance==I2C2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a44      	ldr	r2, [pc, #272]	; (8001c94 <HAL_I2C_MspInit+0x13c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d13d      	bne.n	8001c04 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fdd7 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001ba4:	f000 fd06 	bl	80025b4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a3a      	ldr	r2, [pc, #232]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bae:	f043 0320 	orr.w	r3, r3, #32
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc6:	2312      	movs	r3, #18
 8001bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001be2:	4619      	mov	r1, r3
 8001be4:	482d      	ldr	r0, [pc, #180]	; (8001c9c <HAL_I2C_MspInit+0x144>)
 8001be6:	f001 ffc3 	bl	8003b70 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bea:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001c02:	e042      	b.n	8001c8a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <HAL_I2C_MspInit+0x148>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d13d      	bne.n	8001c8a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 fd94 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001c2a:	f000 fcc3 	bl	80025b4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001c60:	2304      	movs	r3, #4
 8001c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <HAL_I2C_MspInit+0x144>)
 8001c6e:	f001 ff7f 	bl	8003b70 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
}
 8001c8a:	bf00      	nop
 8001c8c:	37b0      	adds	r7, #176	; 0xb0
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40005800 	.word	0x40005800
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40021400 	.word	0x40021400
 8001ca0:	40006000 	.word	0x40006000

08001ca4 <grzanie_on_off>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

bool grzanie_on_off() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(przycisk0_GPIO_Port, przycisk0_Pin) == GPIO_PIN_SET){
 8001ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <grzanie_on_off+0x20>)
 8001cae:	f002 f90b 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <grzanie_on_off+0x18>
		return true;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <grzanie_on_off+0x1a>
	}
	else{
		return false;
 8001cbc:	2300      	movs	r3, #0
	}
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020800 	.word	0x40020800

08001cc8 <auto_manual_on_off>:

bool auto_manual_on_off() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(przycisk1_GPIO_Port, przycisk1_Pin) == GPIO_PIN_SET){
 8001ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <auto_manual_on_off+0x20>)
 8001cd2:	f002 f8f9 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <auto_manual_on_off+0x18>
		return true;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <auto_manual_on_off+0x1a>
	}
	else{
		return false;
 8001ce0:	2300      	movs	r3, #0
	}
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40020800 	.word	0x40020800

08001cec <HAL_UART_RxCpltCallback>:

// Z tym gównem też chyba jest coś nie tak
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart3, received_data, 3); // Tu włącza sie to gowno znowu :)
	if(auto_manual_on_off()){
 8001cf4:	f7ff ffe8 	bl	8001cc8 <auto_manual_on_off>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d030      	beq.n	8001d60 <HAL_UART_RxCpltCallback+0x74>
		if(atof(received_data)>50){
 8001cfe:	481a      	ldr	r0, [pc, #104]	; (8001d68 <HAL_UART_RxCpltCallback+0x7c>)
 8001d00:	f006 fe44 	bl	800898c <atof>
 8001d04:	ec51 0b10 	vmov	r0, r1, d0
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_UART_RxCpltCallback+0x80>)
 8001d0e:	f7fe ff23 	bl	8000b58 <__aeabi_dcmpgt>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_UART_RxCpltCallback+0x34>
			zadana_temperatura = 50;
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_UART_RxCpltCallback+0x84>)
 8001d1a:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <HAL_UART_RxCpltCallback+0x88>)
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e01c      	b.n	8001d5a <HAL_UART_RxCpltCallback+0x6e>
		}
		else if(atof(received_data)<20){
 8001d20:	4811      	ldr	r0, [pc, #68]	; (8001d68 <HAL_UART_RxCpltCallback+0x7c>)
 8001d22:	f006 fe33 	bl	800898c <atof>
 8001d26:	ec51 0b10 	vmov	r0, r1, d0
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_UART_RxCpltCallback+0x8c>)
 8001d30:	f7fe fef4 	bl	8000b1c <__aeabi_dcmplt>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_UART_RxCpltCallback+0x56>
			zadana_temperatura = 20;
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_UART_RxCpltCallback+0x84>)
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <HAL_UART_RxCpltCallback+0x90>)
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e00b      	b.n	8001d5a <HAL_UART_RxCpltCallback+0x6e>
		}
		else{
			zadana_temperatura = atof(received_data);
 8001d42:	4809      	ldr	r0, [pc, #36]	; (8001d68 <HAL_UART_RxCpltCallback+0x7c>)
 8001d44:	f006 fe22 	bl	800898c <atof>
 8001d48:	ec53 2b10 	vmov	r2, r3, d0
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f7fe ff54 	bl	8000bfc <__aeabi_d2f>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <HAL_UART_RxCpltCallback+0x84>)
 8001d58:	6013      	str	r3, [r2, #0]
		}
		arm_pid_reset_f32(&pid);
 8001d5a:	4809      	ldr	r0, [pc, #36]	; (8001d80 <HAL_UART_RxCpltCallback+0x94>)
 8001d5c:	f006 fdf2 	bl	8008944 <arm_pid_reset_f32>
	}
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	2000070c 	.word	0x2000070c
 8001d6c:	40490000 	.word	0x40490000
 8001d70:	20000718 	.word	0x20000718
 8001d74:	42480000 	.word	0x42480000
 8001d78:	40340000 	.word	0x40340000
 8001d7c:	41a00000 	.word	0x41a00000
 8001d80:	20000724 	.word	0x20000724

08001d84 <zadajnik>:

float zadajnik() {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001d8a:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <zadajnik+0x54>)
 8001d8c:	f001 f996 	bl	80030bc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	4810      	ldr	r0, [pc, #64]	; (8001dd8 <zadajnik+0x54>)
 8001d96:	f001 fa5f 	bl	8003258 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8001d9a:	480f      	ldr	r0, [pc, #60]	; (8001dd8 <zadajnik+0x54>)
 8001d9c:	f001 fae7 	bl	800336e <HAL_ADC_GetValue>
 8001da0:	6078      	str	r0, [r7, #4]
	float ser = (1.0f * value /4095.0f)*30+20;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dac:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001ddc <zadajnik+0x58>
 8001db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dbc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001dc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dc4:	edc7 7a00 	vstr	s15, [r7]
	return ser;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	ee07 3a90 	vmov	s15, r3
}
 8001dce:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000061c 	.word	0x2000061c
 8001ddc:	457ff000 	.word	0x457ff000

08001de0 <wentyl>:

void wentyl(){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
	float blad = zadana_temperatura - akutalna_temperatura;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <wentyl+0x60>)
 8001de8:	ed93 7a00 	vldr	s14, [r3]
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <wentyl+0x64>)
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df6:	edc7 7a01 	vstr	s15, [r7, #4]
	float hist = -5;
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <wentyl+0x68>)
 8001dfc:	603b      	str	r3, [r7, #0]
	if (blad<=hist){
 8001dfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e02:	edd7 7a00 	vldr	s15, [r7]
 8001e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	d805      	bhi.n	8001e1c <wentyl+0x3c>
		HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e16:	480d      	ldr	r0, [pc, #52]	; (8001e4c <wentyl+0x6c>)
 8001e18:	f002 f86e 	bl	8003ef8 <HAL_GPIO_WritePin>
	}
	if (blad>=0){
 8001e1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e28:	da00      	bge.n	8001e2c <wentyl+0x4c>
		HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
	}
}
 8001e2a:	e005      	b.n	8001e38 <wentyl+0x58>
		HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <wentyl+0x6c>)
 8001e34:	f002 f860 	bl	8003ef8 <HAL_GPIO_WritePin>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000718 	.word	0x20000718
 8001e44:	20000710 	.word	0x20000710
 8001e48:	c0a00000 	.word	0xc0a00000
 8001e4c:	40020800 	.word	0x40020800

08001e50 <change_current_duty_cycle>:

// Jakbym miał powiedzieć gdzie sie wypierdoli ten kod to wlasnie tutaj
void change_current_duty_cycle(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t current_duty_cycle)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	80fb      	strh	r3, [r7, #6]
    // calculate the new pulse value
    uint32_t pulse = ((htim->Init.Period+1) * current_duty_cycle) / 1000;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	3301      	adds	r3, #1
 8001e64:	88fa      	ldrh	r2, [r7, #6]
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <change_current_duty_cycle+0x88>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	099b      	lsrs	r3, r3, #6
 8001e72:	617b      	str	r3, [r7, #20]
    // update the capture/compare register
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d104      	bne.n	8001e84 <change_current_duty_cycle+0x34>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e82:	e023      	b.n	8001ecc <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d104      	bne.n	8001e94 <change_current_duty_cycle+0x44>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e92:	e01b      	b.n	8001ecc <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d104      	bne.n	8001ea4 <change_current_duty_cycle+0x54>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001ea2:	e013      	b.n	8001ecc <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d104      	bne.n	8001eb4 <change_current_duty_cycle+0x64>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001eb2:	e00b      	b.n	8001ecc <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d104      	bne.n	8001ec4 <change_current_duty_cycle+0x74>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001ec2:	e003      	b.n	8001ecc <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001ecc:	bf00      	nop
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	10624dd3 	.word	0x10624dd3

08001edc <wyswietlacz>:

void wyswietlacz(){
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b0a2      	sub	sp, #136	; 0x88
 8001ee0:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff fa50 	bl	8001388 <ssd1306_Fill>
	uint8_t y = 0; // ktora linia wyswietlacza
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char temp_buf[6];
	gcvt(akutalna_temperatura, 6, temp_buf);
 8001eee:	4ba8      	ldr	r3, [pc, #672]	; (8002190 <wyswietlacz+0x2b4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb48 	bl	8000588 <__aeabi_f2d>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	460d      	mov	r5, r1
 8001efc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f00:	4619      	mov	r1, r3
 8001f02:	2006      	movs	r0, #6
 8001f04:	ec45 4b10 	vmov	d0, r4, r5
 8001f08:	f006 fd44 	bl	8008994 <gcvt>
	ssd1306_SetCursor(2, y);
 8001f0c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001f10:	4619      	mov	r1, r3
 8001f12:	2002      	movs	r0, #2
 8001f14:	f7ff fb86 	bl	8001624 <ssd1306_SetCursor>
	char buf0[20] = "Temperatura:";
 8001f18:	4b9e      	ldr	r3, [pc, #632]	; (8002194 <wyswietlacz+0x2b8>)
 8001f1a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f20:	c407      	stmia	r4!, {r0, r1, r2}
 8001f22:	7023      	strb	r3, [r4, #0]
 8001f24:	f107 0371 	add.w	r3, r7, #113	; 0x71
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f8c3 2003 	str.w	r2, [r3, #3]
	ssd1306_WriteString(strcat(buf0, temp_buf), Font_7x10, White);
 8001f30:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001f34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f006 fd8e 	bl	8008a5c <strcat>
 8001f40:	4a95      	ldr	r2, [pc, #596]	; (8002198 <wyswietlacz+0x2bc>)
 8001f42:	2301      	movs	r3, #1
 8001f44:	ca06      	ldmia	r2, {r1, r2}
 8001f46:	f7ff fb47 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001f4a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001f4e:	330a      	adds	r3, #10
 8001f50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char set_buf[6];
	gcvt(zadana_temperatura, 4, set_buf);
 8001f54:	4b91      	ldr	r3, [pc, #580]	; (800219c <wyswietlacz+0x2c0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fb15 	bl	8000588 <__aeabi_f2d>
 8001f5e:	4604      	mov	r4, r0
 8001f60:	460d      	mov	r5, r1
 8001f62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f66:	4619      	mov	r1, r3
 8001f68:	2004      	movs	r0, #4
 8001f6a:	ec45 4b10 	vmov	d0, r4, r5
 8001f6e:	f006 fd11 	bl	8008994 <gcvt>
	ssd1306_SetCursor(2, y);
 8001f72:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001f76:	4619      	mov	r1, r3
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f7ff fb53 	bl	8001624 <ssd1306_SetCursor>
	char buf1[20] = "Nastawa:";
 8001f7e:	4a88      	ldr	r2, [pc, #544]	; (80021a0 <wyswietlacz+0x2c4>)
 8001f80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f84:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f86:	c303      	stmia	r3!, {r0, r1}
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	f107 0351 	add.w	r3, r7, #81	; 0x51
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	f8c3 2007 	str.w	r2, [r3, #7]
	ssd1306_WriteString(strcat(buf1, set_buf), Font_7x10, White);
 8001f98:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f006 fd5a 	bl	8008a5c <strcat>
 8001fa8:	4a7b      	ldr	r2, [pc, #492]	; (8002198 <wyswietlacz+0x2bc>)
 8001faa:	2301      	movs	r3, #1
 8001fac:	ca06      	ldmia	r2, {r1, r2}
 8001fae:	f7ff fb13 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001fb2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001fb6:	330a      	adds	r3, #10
 8001fb8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	float duty_cl = sterowanie/10.0f;
 8001fbc:	4b79      	ldr	r3, [pc, #484]	; (80021a4 <wyswietlacz+0x2c8>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	char duty_buf[6];
	gcvt(duty_cl, 3, duty_buf);
 8001fd4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001fd8:	f7fe fad6 	bl	8000588 <__aeabi_f2d>
 8001fdc:	4604      	mov	r4, r0
 8001fde:	460d      	mov	r5, r1
 8001fe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	2003      	movs	r0, #3
 8001fe8:	ec45 4b10 	vmov	d0, r4, r5
 8001fec:	f006 fcd2 	bl	8008994 <gcvt>
	ssd1306_SetCursor(2, y);
 8001ff0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	f7ff fb14 	bl	8001624 <ssd1306_SetCursor>
	char buf2[20] = "PWM: ";
 8001ffc:	4a6a      	ldr	r2, [pc, #424]	; (80021a8 <wyswietlacz+0x2cc>)
 8001ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002006:	6018      	str	r0, [r3, #0]
 8002008:	3304      	adds	r3, #4
 800200a:	8019      	strh	r1, [r3, #0]
 800200c:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	819a      	strh	r2, [r3, #12]
	strcat(buf2, duty_buf);
 800201a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800201e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f006 fd19 	bl	8008a5c <strcat>
	ssd1306_WriteString(strcat(buf2, "%"), Font_7x10, White);
 800202a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe f8ee 	bl	8000210 <strlen>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800203c:	4413      	add	r3, r2
 800203e:	495b      	ldr	r1, [pc, #364]	; (80021ac <wyswietlacz+0x2d0>)
 8002040:	461a      	mov	r2, r3
 8002042:	460b      	mov	r3, r1
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	8013      	strh	r3, [r2, #0]
 8002048:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <wyswietlacz+0x2bc>)
 800204e:	2301      	movs	r3, #1
 8002050:	ca06      	ldmia	r2, {r1, r2}
 8002052:	f7ff fac1 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8002056:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800205a:	330a      	adds	r3, #10
 800205c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	ssd1306_SetCursor(2, y);
 8002060:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002064:	4619      	mov	r1, r3
 8002066:	2002      	movs	r0, #2
 8002068:	f7ff fadc 	bl	8001624 <ssd1306_SetCursor>
	char buf3[20] = "Dziala: ";
 800206c:	4a50      	ldr	r2, [pc, #320]	; (80021b0 <wyswietlacz+0x2d4>)
 800206e:	f107 0318 	add.w	r3, r7, #24
 8002072:	ca07      	ldmia	r2, {r0, r1, r2}
 8002074:	c303      	stmia	r3!, {r0, r1}
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	f8c3 2007 	str.w	r2, [r3, #7]
	if(grzanie_on_off()){
 8002086:	f7ff fe0d 	bl	8001ca4 <grzanie_on_off>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d014      	beq.n	80020ba <wyswietlacz+0x1de>
		ssd1306_WriteString(strcat(buf3, "TAK"), Font_7x10, White);
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe f8bb 	bl	8000210 <strlen>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	f107 0318 	add.w	r3, r7, #24
 80020a2:	4413      	add	r3, r2
 80020a4:	4a43      	ldr	r2, [pc, #268]	; (80021b4 <wyswietlacz+0x2d8>)
 80020a6:	6810      	ldr	r0, [r2, #0]
 80020a8:	6018      	str	r0, [r3, #0]
 80020aa:	f107 0018 	add.w	r0, r7, #24
 80020ae:	4a3a      	ldr	r2, [pc, #232]	; (8002198 <wyswietlacz+0x2bc>)
 80020b0:	2301      	movs	r3, #1
 80020b2:	ca06      	ldmia	r2, {r1, r2}
 80020b4:	f7ff fa90 	bl	80015d8 <ssd1306_WriteString>
 80020b8:	e013      	b.n	80020e2 <wyswietlacz+0x206>
	}
	else{
		ssd1306_WriteString(strcat(buf3, "NIE"), Font_7x10, White);
 80020ba:	f107 0318 	add.w	r3, r7, #24
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f8a6 	bl	8000210 <strlen>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	f107 0318 	add.w	r3, r7, #24
 80020cc:	4413      	add	r3, r2
 80020ce:	4a3a      	ldr	r2, [pc, #232]	; (80021b8 <wyswietlacz+0x2dc>)
 80020d0:	6810      	ldr	r0, [r2, #0]
 80020d2:	6018      	str	r0, [r3, #0]
 80020d4:	f107 0018 	add.w	r0, r7, #24
 80020d8:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <wyswietlacz+0x2bc>)
 80020da:	2301      	movs	r3, #1
 80020dc:	ca06      	ldmia	r2, {r1, r2}
 80020de:	f7ff fa7b 	bl	80015d8 <ssd1306_WriteString>
	}
	y += 10;
 80020e2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80020e6:	330a      	adds	r3, #10
 80020e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	ssd1306_SetCursor(2, y);
 80020ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80020f0:	4619      	mov	r1, r3
 80020f2:	2002      	movs	r0, #2
 80020f4:	f7ff fa96 	bl	8001624 <ssd1306_SetCursor>
		char buf6[20] = "Tryb: ";
 80020f8:	4a30      	ldr	r2, [pc, #192]	; (80021bc <wyswietlacz+0x2e0>)
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002100:	6018      	str	r0, [r3, #0]
 8002102:	3304      	adds	r3, #4
 8002104:	8019      	strh	r1, [r3, #0]
 8002106:	3302      	adds	r3, #2
 8002108:	0c0a      	lsrs	r2, r1, #16
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	f107 030b 	add.w	r3, r7, #11
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	731a      	strb	r2, [r3, #12]
		if(auto_manual_on_off()){
 800211a:	f7ff fdd5 	bl	8001cc8 <auto_manual_on_off>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d014      	beq.n	800214e <wyswietlacz+0x272>
			ssd1306_WriteString(strcat(buf6, "AUTOMAT"), Font_7x10, White);
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe f872 	bl	8000210 <strlen>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	4413      	add	r3, r2
 8002134:	4922      	ldr	r1, [pc, #136]	; (80021c0 <wyswietlacz+0x2e4>)
 8002136:	461a      	mov	r2, r3
 8002138:	460b      	mov	r3, r1
 800213a:	cb03      	ldmia	r3!, {r0, r1}
 800213c:	6010      	str	r0, [r2, #0]
 800213e:	6051      	str	r1, [r2, #4]
 8002140:	1d38      	adds	r0, r7, #4
 8002142:	4a15      	ldr	r2, [pc, #84]	; (8002198 <wyswietlacz+0x2bc>)
 8002144:	2301      	movs	r3, #1
 8002146:	ca06      	ldmia	r2, {r1, r2}
 8002148:	f7ff fa46 	bl	80015d8 <ssd1306_WriteString>
 800214c:	e014      	b.n	8002178 <wyswietlacz+0x29c>
		}
		else{
			ssd1306_WriteString(strcat(buf6, "MANUAL"), Font_7x10, White);
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f85d 	bl	8000210 <strlen>
 8002156:	4603      	mov	r3, r0
 8002158:	461a      	mov	r2, r3
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	4413      	add	r3, r2
 800215e:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <wyswietlacz+0x2e8>)
 8002160:	6810      	ldr	r0, [r2, #0]
 8002162:	6018      	str	r0, [r3, #0]
 8002164:	8891      	ldrh	r1, [r2, #4]
 8002166:	7992      	ldrb	r2, [r2, #6]
 8002168:	8099      	strh	r1, [r3, #4]
 800216a:	719a      	strb	r2, [r3, #6]
 800216c:	1d38      	adds	r0, r7, #4
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <wyswietlacz+0x2bc>)
 8002170:	2301      	movs	r3, #1
 8002172:	ca06      	ldmia	r2, {r1, r2}
 8002174:	f7ff fa30 	bl	80015d8 <ssd1306_WriteString>
		}
		y += 10;
 8002178:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800217c:	330a      	adds	r3, #10
 800217e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87


	ssd1306_UpdateScreen();
 8002182:	f7ff f925 	bl	80013d0 <ssd1306_UpdateScreen>
}
 8002186:	bf00      	nop
 8002188:	3788      	adds	r7, #136	; 0x88
 800218a:	46bd      	mov	sp, r7
 800218c:	bdb0      	pop	{r4, r5, r7, pc}
 800218e:	bf00      	nop
 8002190:	20000710 	.word	0x20000710
 8002194:	0800c84c 	.word	0x0800c84c
 8002198:	20000000 	.word	0x20000000
 800219c:	20000718 	.word	0x20000718
 80021a0:	0800c860 	.word	0x0800c860
 80021a4:	20000716 	.word	0x20000716
 80021a8:	0800c874 	.word	0x0800c874
 80021ac:	0800c830 	.word	0x0800c830
 80021b0:	0800c888 	.word	0x0800c888
 80021b4:	0800c834 	.word	0x0800c834
 80021b8:	0800c838 	.word	0x0800c838
 80021bc:	0800c89c 	.word	0x0800c89c
 80021c0:	0800c83c 	.word	0x0800c83c
 80021c4:	0800c844 	.word	0x0800c844

080021c8 <transmit_data>:

void transmit_data(float current_temp){
 80021c8:	b5b0      	push	{r4, r5, r7, lr}
 80021ca:	b09c      	sub	sp, #112	; 0x70
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	ed87 0a01 	vstr	s0, [r7, #4]
    char data_buf[100];
    gcvt(current_temp, 6, data_buf); // convertuje float na string
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe f9d8 	bl	8000588 <__aeabi_f2d>
 80021d8:	4604      	mov	r4, r0
 80021da:	460d      	mov	r5, r1
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	4619      	mov	r1, r3
 80021e2:	2006      	movs	r0, #6
 80021e4:	ec45 4b10 	vmov	d0, r4, r5
 80021e8:	f006 fbd4 	bl	8008994 <gcvt>
    strcat(data_buf, ";"); // dodaje srednik
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f80d 	bl	8000210 <strlen>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	f107 030c 	add.w	r3, r7, #12
 80021fe:	4413      	add	r3, r2
 8002200:	491f      	ldr	r1, [pc, #124]	; (8002280 <transmit_data+0xb8>)
 8002202:	461a      	mov	r2, r3
 8002204:	460b      	mov	r3, r1
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	8013      	strh	r3, [r2, #0]
    //gcvt(set_temp, 6, data_buf+strlen(data_buf)); // dodaje set_temp do stringa
    gcvt(sterowanie/1.0f, 6, data_buf+strlen(data_buf));
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <transmit_data+0xbc>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002216:	ee17 0a90 	vmov	r0, s15
 800221a:	f7fe f9b5 	bl	8000588 <__aeabi_f2d>
 800221e:	4604      	mov	r4, r0
 8002220:	460d      	mov	r5, r1
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4618      	mov	r0, r3
 8002228:	f7fd fff2 	bl	8000210 <strlen>
 800222c:	4602      	mov	r2, r0
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	4413      	add	r3, r2
 8002234:	4619      	mov	r1, r3
 8002236:	2006      	movs	r0, #6
 8002238:	ec45 4b10 	vmov	d0, r4, r5
 800223c:	f006 fbaa 	bl	8008994 <gcvt>
    strcat(data_buf, "\r\n");
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	4618      	mov	r0, r3
 8002246:	f7fd ffe3 	bl	8000210 <strlen>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	4413      	add	r3, r2
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <transmit_data+0xc0>)
 8002256:	8811      	ldrh	r1, [r2, #0]
 8002258:	7892      	ldrb	r2, [r2, #2]
 800225a:	8019      	strh	r1, [r3, #0]
 800225c:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart3, data_buf, strlen(data_buf), 100);
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	4618      	mov	r0, r3
 8002264:	f7fd ffd4 	bl	8000210 <strlen>
 8002268:	4603      	mov	r3, r0
 800226a:	b29a      	uxth	r2, r3
 800226c:	f107 010c 	add.w	r1, r7, #12
 8002270:	2364      	movs	r3, #100	; 0x64
 8002272:	4806      	ldr	r0, [pc, #24]	; (800228c <transmit_data+0xc4>)
 8002274:	f005 f8d8 	bl	8007428 <HAL_UART_Transmit>
}
 8002278:	bf00      	nop
 800227a:	3770      	adds	r7, #112	; 0x70
 800227c:	46bd      	mov	sp, r7
 800227e:	bdb0      	pop	{r4, r5, r7, pc}
 8002280:	0800c8b0 	.word	0x0800c8b0
 8002284:	20000716 	.word	0x20000716
 8002288:	0800c8b4 	.word	0x0800c8b4
 800228c:	200008c8 	.word	0x200008c8

08002290 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ // If the interrupt is from timer 2 - 10Hz
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a0:	d171      	bne.n	8002386 <HAL_TIM_PeriodElapsedCallback+0xf6>
		transmit_data(akutalna_temperatura);
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	eeb0 0a67 	vmov.f32	s0, s15
 80022ac:	f7ff ff8c 	bl	80021c8 <transmit_data>
		current_duty_cycle = sterowanie;
 80022b0:	4b51      	ldr	r3, [pc, #324]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80022b2:	881a      	ldrh	r2, [r3, #0]
 80022b4:	4b51      	ldr	r3, [pc, #324]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80022b6:	801a      	strh	r2, [r3, #0]
		aktualny_blad = (zadana_temperatura-akutalna_temperatura);
 80022b8:	4b51      	ldr	r3, [pc, #324]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80022ba:	ed93 7a00 	vldr	s14, [r3]
 80022be:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c8:	4b4e      	ldr	r3, [pc, #312]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80022ca:	edc3 7a00 	vstr	s15, [r3]
		if(grzanie_on_off()){
 80022ce:	f7ff fce9 	bl	8001ca4 <grzanie_on_off>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d047      	beq.n	8002368 <HAL_TIM_PeriodElapsedCallback+0xd8>
				//sterowanie = 500;
				sterowanie = round(arm_pid_f32(&pid, aktualny_blad));
 80022d8:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80022de:	617a      	str	r2, [r7, #20]
 80022e0:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	ed93 7a00 	vldr	s14, [r3]
 80022e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ec:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80022fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002300:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	edd3 6a02 	vldr	s13, [r3, #8]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800231e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002322:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f923 	bl	8000588 <__aeabi_f2d>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	ec43 2b10 	vmov	d0, r2, r3
 800234a:	f00a fa1f 	bl	800c78c <round>
 800234e:	ec53 2b10 	vmov	r2, r3, d0
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f7fe fc31 	bl	8000bbc <__aeabi_d2uiz>
 800235a:	4603      	mov	r3, r0
 800235c:	b29a      	uxth	r2, r3
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002360:	801a      	strh	r2, [r3, #0]
				wentyl();
 8002362:	f7ff fd3d 	bl	8001de0 <wentyl>
 8002366:	e007      	b.n	8002378 <HAL_TIM_PeriodElapsedCallback+0xe8>
			}
			else{
				arm_pid_reset_f32(&pid);
 8002368:	4827      	ldr	r0, [pc, #156]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800236a:	f006 faeb 	bl	8008944 <arm_pid_reset_f32>
				sterowanie = 0;
 800236e:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002370:	2200      	movs	r2, #0
 8002372:	801a      	strh	r2, [r3, #0]
				wentyl();
 8002374:	f7ff fd34 	bl	8001de0 <wentyl>
			}
		change_current_duty_cycle(&htim1, TIM_CHANNEL_1, sterowanie);
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	2100      	movs	r1, #0
 8002380:	4822      	ldr	r0, [pc, #136]	; (800240c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002382:	f7ff fd65 	bl	8001e50 <change_current_duty_cycle>
	}
	if(htim->Instance == TIM3){ // If the interrupt is from timer 3 - 2Hz
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a21      	ldr	r2, [pc, #132]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d104      	bne.n	800239a <HAL_TIM_PeriodElapsedCallback+0x10a>
		//ssd1306_TestAll();
		HAL_UART_Receive_IT(&huart3, received_data, 4);
 8002390:	2204      	movs	r2, #4
 8002392:	4920      	ldr	r1, [pc, #128]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002394:	4820      	ldr	r0, [pc, #128]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002396:	f005 f8ca 	bl	800752e <HAL_UART_Receive_IT>
	}
	if(htim->Instance == TIM4){ // If the interrupt is from timer 4 - 8Hz
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d122      	bne.n	80023ea <HAL_TIM_PeriodElapsedCallback+0x15a>
		MCP9808_MeasureTemperature(&akutalna_temperatura);
 80023a4:	4813      	ldr	r0, [pc, #76]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80023a6:	f7fe fea7 	bl	80010f8 <MCP9808_MeasureTemperature>
		if(auto_manual_on_off()==false){
 80023aa:	f7ff fc8d 	bl	8001cc8 <auto_manual_on_off>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f083 0301 	eor.w	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d015      	beq.n	80023e6 <HAL_TIM_PeriodElapsedCallback+0x156>
			zadana_temperatura = round(zadajnik());
 80023ba:	f7ff fce3 	bl	8001d84 <zadajnik>
 80023be:	ee10 3a10 	vmov	r3, s0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe f8e0 	bl	8000588 <__aeabi_f2d>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	ec43 2b10 	vmov	d0, r2, r3
 80023d0:	f00a f9dc 	bl	800c78c <round>
 80023d4:	ec53 2b10 	vmov	r2, r3, d0
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f7fe fc0e 	bl	8000bfc <__aeabi_d2f>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80023e4:	6013      	str	r3, [r2, #0]
		}
		wyswietlacz();
 80023e6:	f7ff fd79 	bl	8001edc <wyswietlacz>
	}
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000710 	.word	0x20000710
 80023f8:	20000716 	.word	0x20000716
 80023fc:	20000714 	.word	0x20000714
 8002400:	20000718 	.word	0x20000718
 8002404:	20000720 	.word	0x20000720
 8002408:	20000724 	.word	0x20000724
 800240c:	2000074c 	.word	0x2000074c
 8002410:	40000400 	.word	0x40000400
 8002414:	2000070c 	.word	0x2000070c
 8002418:	200008c8 	.word	0x200008c8
 800241c:	40000800 	.word	0x40000800

08002420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002424:	f000 fd85 	bl	8002f32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002428:	f000 f856 	bl	80024d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800242c:	f7ff f9d6 	bl	80017dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002430:	f000 fcbe 	bl	8002db0 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8002434:	f7ff fb10 	bl	8001a58 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002438:	f000 faa8 	bl	800298c <MX_TIM2_Init>
  MX_TIM3_Init();
 800243c:	f000 faf4 	bl	8002a28 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002440:	f000 fb42 	bl	8002ac8 <MX_TIM4_Init>
  MX_I2C4_Init();
 8002444:	f7ff fb48 	bl	8001ad8 <MX_I2C4_Init>
  MX_ADC1_Init();
 8002448:	f7ff f936 	bl	80016b8 <MX_ADC1_Init>
  MX_TIM1_Init();
 800244c:	f000 fa10 	bl	8002870 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002450:	f000 fb8a 	bl	8002b68 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_TestAll();
  ssd1306_Init(); // Inicjalizacja wyświetlacza
 8002454:	f7fe ff2e 	bl	80012b4 <ssd1306_Init>
  MCP9808_Init(&hi2c4, 0x18); // inicjalizacja sensora temperatury
 8002458:	2118      	movs	r1, #24
 800245a:	4814      	ldr	r0, [pc, #80]	; (80024ac <main+0x8c>)
 800245c:	f7fe fdd6 	bl	800100c <MCP9808_Init>
  // Tutej nastawiają się dokładności czujnika temperatury :))))
  MCP9808_SetResolution(MCP9808_High_Res);  ///> High 0.125 (130 ms)
 8002460:	2002      	movs	r0, #2
 8002462:	f7fe fec9 	bl	80011f8 <MCP9808_SetResolution>
  arm_pid_init_f32(&pid, 1);
 8002466:	2101      	movs	r1, #1
 8002468:	4811      	ldr	r0, [pc, #68]	; (80024b0 <main+0x90>)
 800246a:	f006 fa71 	bl	8008950 <arm_pid_init_f32>
  pid.Kp=kp;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <main+0x94>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a0f      	ldr	r2, [pc, #60]	; (80024b0 <main+0x90>)
 8002474:	6193      	str	r3, [r2, #24]
  pid.Kd=kd;
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <main+0x98>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <main+0x90>)
 800247c:	6213      	str	r3, [r2, #32]
  pid.Ki=ki;
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <main+0x9c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <main+0x90>)
 8002484:	61d3      	str	r3, [r2, #28]

  HAL_UART_Receive_IT(&huart3, received_data, 4);
 8002486:	2204      	movs	r2, #4
 8002488:	490d      	ldr	r1, [pc, #52]	; (80024c0 <main+0xa0>)
 800248a:	480e      	ldr	r0, [pc, #56]	; (80024c4 <main+0xa4>)
 800248c:	f005 f84f 	bl	800752e <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002490:	2100      	movs	r1, #0
 8002492:	480d      	ldr	r0, [pc, #52]	; (80024c8 <main+0xa8>)
 8002494:	f003 fe72 	bl	800617c <HAL_TIM_PWM_Start>

// te niżej najlepiej jak beda na koncu // tak powiedzial szef
  HAL_TIM_Base_Start_IT(&htim2);
 8002498:	480c      	ldr	r0, [pc, #48]	; (80024cc <main+0xac>)
 800249a:	f003 fd9f 	bl	8005fdc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800249e:	480c      	ldr	r0, [pc, #48]	; (80024d0 <main+0xb0>)
 80024a0:	f003 fd9c 	bl	8005fdc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80024a4:	480b      	ldr	r0, [pc, #44]	; (80024d4 <main+0xb4>)
 80024a6:	f003 fd99 	bl	8005fdc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <main+0x8a>
 80024ac:	200006b8 	.word	0x200006b8
 80024b0:	20000724 	.word	0x20000724
 80024b4:	20000008 	.word	0x20000008
 80024b8:	2000071c 	.word	0x2000071c
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	2000070c 	.word	0x2000070c
 80024c4:	200008c8 	.word	0x200008c8
 80024c8:	2000074c 	.word	0x2000074c
 80024cc:	20000798 	.word	0x20000798
 80024d0:	200007e4 	.word	0x200007e4
 80024d4:	20000830 	.word	0x20000830

080024d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b094      	sub	sp, #80	; 0x50
 80024dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024de:	f107 0320 	add.w	r3, r7, #32
 80024e2:	2230      	movs	r2, #48	; 0x30
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f006 fab0 	bl	8008a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024fc:	f002 fbfc 	bl	8004cf8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <SystemClock_Config+0xd4>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <SystemClock_Config+0xd4>)
 8002506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250a:	6413      	str	r3, [r2, #64]	; 0x40
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <SystemClock_Config+0xd4>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <SystemClock_Config+0xd8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <SystemClock_Config+0xd8>)
 800251e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <SystemClock_Config+0xd8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002530:	2301      	movs	r3, #1
 8002532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002534:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800253a:	2302      	movs	r3, #2
 800253c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800253e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002542:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002544:	2304      	movs	r3, #4
 8002546:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002548:	23d8      	movs	r3, #216	; 0xd8
 800254a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800254c:	2302      	movs	r3, #2
 800254e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002550:	2309      	movs	r3, #9
 8002552:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002554:	f107 0320 	add.w	r3, r7, #32
 8002558:	4618      	mov	r0, r3
 800255a:	f002 fc2d 	bl	8004db8 <HAL_RCC_OscConfig>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002564:	f000 f826 	bl	80025b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002568:	f002 fbd6 	bl	8004d18 <HAL_PWREx_EnableOverDrive>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002572:	f000 f81f 	bl	80025b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002576:	230f      	movs	r3, #15
 8002578:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800257a:	2302      	movs	r3, #2
 800257c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002582:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002586:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002588:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800258c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800258e:	f107 030c 	add.w	r3, r7, #12
 8002592:	2107      	movs	r1, #7
 8002594:	4618      	mov	r0, r3
 8002596:	f002 feb3 	bl	8005300 <HAL_RCC_ClockConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80025a0:	f000 f808 	bl	80025b4 <Error_Handler>
  }
}
 80025a4:	bf00      	nop
 80025a6:	3750      	adds	r7, #80	; 0x50
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40007000 	.word	0x40007000

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025bc:	e7fe      	b.n	80025bc <Error_Handler+0x8>
	...

080025c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_MspInit+0x44>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <HAL_MspInit+0x44>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_MspInit+0x44>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_MspInit+0x44>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <HAL_MspInit+0x44>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_MspInit+0x44>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800

08002608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800260c:	e7fe      	b.n	800260c <NMI_Handler+0x4>

0800260e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <HardFault_Handler+0x4>

08002614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002618:	e7fe      	b.n	8002618 <MemManage_Handler+0x4>

0800261a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261e:	e7fe      	b.n	800261e <BusFault_Handler+0x4>

08002620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <UsageFault_Handler+0x4>

08002626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002654:	f000 fcaa 	bl	8002fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}

0800265c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <TIM2_IRQHandler+0x10>)
 8002662:	f003 fe85 	bl	8006370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000798 	.word	0x20000798

08002670 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002674:	4802      	ldr	r0, [pc, #8]	; (8002680 <TIM3_IRQHandler+0x10>)
 8002676:	f003 fe7b 	bl	8006370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200007e4 	.word	0x200007e4

08002684 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <TIM4_IRQHandler+0x10>)
 800268a:	f003 fe71 	bl	8006370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000830 	.word	0x20000830

08002698 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <USART3_IRQHandler+0x10>)
 800269e:	f004 ff8b 	bl	80075b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200008c8 	.word	0x200008c8

080026ac <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80026b2:	f003 fe5d 	bl	8006370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000087c 	.word	0x2000087c

080026c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return 1;
 80026c4:	2301      	movs	r3, #1
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <_kill>:

int _kill(int pid, int sig)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026da:	f006 f97f 	bl	80089dc <__errno>
 80026de:	4603      	mov	r3, r0
 80026e0:	2216      	movs	r2, #22
 80026e2:	601a      	str	r2, [r3, #0]
  return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_exit>:

void _exit (int status)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ffe7 	bl	80026d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002702:	e7fe      	b.n	8002702 <_exit+0x12>

08002704 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e00a      	b.n	800272c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002716:	f3af 8000 	nop.w
 800271a:	4601      	mov	r1, r0
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	60ba      	str	r2, [r7, #8]
 8002722:	b2ca      	uxtb	r2, r1
 8002724:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	429a      	cmp	r2, r3
 8002732:	dbf0      	blt.n	8002716 <_read+0x12>
  }

  return len;
 8002734:	687b      	ldr	r3, [r7, #4]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e009      	b.n	8002764 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	60ba      	str	r2, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	dbf1      	blt.n	8002750 <_write+0x12>
  }
  return len;
 800276c:	687b      	ldr	r3, [r7, #4]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_close>:

int _close(int file)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800279e:	605a      	str	r2, [r3, #4]
  return 0;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <_isatty>:

int _isatty(int file)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027b6:	2301      	movs	r3, #1
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e8:	4a14      	ldr	r2, [pc, #80]	; (800283c <_sbrk+0x5c>)
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <_sbrk+0x60>)
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <_sbrk+0x64>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <_sbrk+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	429a      	cmp	r2, r3
 800280e:	d207      	bcs.n	8002820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002810:	f006 f8e4 	bl	80089dc <__errno>
 8002814:	4603      	mov	r3, r0
 8002816:	220c      	movs	r2, #12
 8002818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	e009      	b.n	8002834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <_sbrk+0x64>)
 8002830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20050000 	.word	0x20050000
 8002840:	00000400 	.word	0x00000400
 8002844:	20000748 	.word	0x20000748
 8002848:	20000968 	.word	0x20000968

0800284c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <SystemInit+0x20>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <SystemInit+0x20>)
 8002858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800285c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b096      	sub	sp, #88	; 0x58
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002876:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	611a      	str	r2, [r3, #16]
 8002892:	615a      	str	r2, [r3, #20]
 8002894:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	222c      	movs	r2, #44	; 0x2c
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f006 f8d5 	bl	8008a4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <MX_TIM1_Init+0x114>)
 80028a4:	4a38      	ldr	r2, [pc, #224]	; (8002988 <MX_TIM1_Init+0x118>)
 80028a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <MX_TIM1_Init+0x114>)
 80028aa:	226b      	movs	r2, #107	; 0x6b
 80028ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ae:	4b35      	ldr	r3, [pc, #212]	; (8002984 <MX_TIM1_Init+0x114>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80028b4:	4b33      	ldr	r3, [pc, #204]	; (8002984 <MX_TIM1_Init+0x114>)
 80028b6:	2263      	movs	r2, #99	; 0x63
 80028b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ba:	4b32      	ldr	r3, [pc, #200]	; (8002984 <MX_TIM1_Init+0x114>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028c0:	4b30      	ldr	r3, [pc, #192]	; (8002984 <MX_TIM1_Init+0x114>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c6:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <MX_TIM1_Init+0x114>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028cc:	482d      	ldr	r0, [pc, #180]	; (8002984 <MX_TIM1_Init+0x114>)
 80028ce:	f003 fbfd 	bl	80060cc <HAL_TIM_PWM_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80028d8:	f7ff fe6c 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028ec:	4619      	mov	r1, r3
 80028ee:	4825      	ldr	r0, [pc, #148]	; (8002984 <MX_TIM1_Init+0x114>)
 80028f0:	f004 fc22 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80028fa:	f7ff fe5b 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028fe:	2360      	movs	r3, #96	; 0x60
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002906:	2300      	movs	r3, #0
 8002908:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800290a:	2300      	movs	r3, #0
 800290c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800291a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800291e:	2200      	movs	r2, #0
 8002920:	4619      	mov	r1, r3
 8002922:	4818      	ldr	r0, [pc, #96]	; (8002984 <MX_TIM1_Init+0x114>)
 8002924:	f003 fe44 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800292e:	f7ff fe41 	bl	80025b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800294a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002950:	2300      	movs	r3, #0
 8002952:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002954:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4807      	ldr	r0, [pc, #28]	; (8002984 <MX_TIM1_Init+0x114>)
 8002968:	f004 fc74 	bl	8007254 <HAL_TIMEx_ConfigBreakDeadTime>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002972:	f7ff fe1f 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002976:	4803      	ldr	r0, [pc, #12]	; (8002984 <MX_TIM1_Init+0x114>)
 8002978:	f000 f9e2 	bl	8002d40 <HAL_TIM_MspPostInit>

}
 800297c:	bf00      	nop
 800297e:	3758      	adds	r7, #88	; 0x58
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	2000074c 	.word	0x2000074c
 8002988:	40010000 	.word	0x40010000

0800298c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002992:	f107 0310 	add.w	r3, r7, #16
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029aa:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <MX_TIM2_Init+0x98>)
 80029ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10799;
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <MX_TIM2_Init+0x98>)
 80029b4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80029b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <MX_TIM2_Init+0x98>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <MX_TIM2_Init+0x98>)
 80029c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c8:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <MX_TIM2_Init+0x98>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <MX_TIM2_Init+0x98>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029d4:	4813      	ldr	r0, [pc, #76]	; (8002a24 <MX_TIM2_Init+0x98>)
 80029d6:	f003 faa9 	bl	8005f2c <HAL_TIM_Base_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80029e0:	f7ff fde8 	bl	80025b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029ea:	f107 0310 	add.w	r3, r7, #16
 80029ee:	4619      	mov	r1, r3
 80029f0:	480c      	ldr	r0, [pc, #48]	; (8002a24 <MX_TIM2_Init+0x98>)
 80029f2:	f003 fef1 	bl	80067d8 <HAL_TIM_ConfigClockSource>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80029fc:	f7ff fdda 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a00:	2300      	movs	r3, #0
 8002a02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4805      	ldr	r0, [pc, #20]	; (8002a24 <MX_TIM2_Init+0x98>)
 8002a0e:	f004 fb93 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002a18:	f7ff fdcc 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a1c:	bf00      	nop
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000798 	.word	0x20000798

08002a28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a2e:	f107 0310 	add.w	r3, r7, #16
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <MX_TIM3_Init+0x98>)
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <MX_TIM3_Init+0x9c>)
 8002a4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 8002a4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <MX_TIM3_Init+0x98>)
 8002a4e:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002a52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <MX_TIM3_Init+0x98>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <MX_TIM3_Init+0x98>)
 8002a5c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002a60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <MX_TIM3_Init+0x98>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a68:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <MX_TIM3_Init+0x98>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a6e:	4814      	ldr	r0, [pc, #80]	; (8002ac0 <MX_TIM3_Init+0x98>)
 8002a70:	f003 fa5c 	bl	8005f2c <HAL_TIM_Base_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002a7a:	f7ff fd9b 	bl	80025b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	4619      	mov	r1, r3
 8002a8a:	480d      	ldr	r0, [pc, #52]	; (8002ac0 <MX_TIM3_Init+0x98>)
 8002a8c:	f003 fea4 	bl	80067d8 <HAL_TIM_ConfigClockSource>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002a96:	f7ff fd8d 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4806      	ldr	r0, [pc, #24]	; (8002ac0 <MX_TIM3_Init+0x98>)
 8002aa8:	f004 fb46 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002ab2:	f7ff fd7f 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ab6:	bf00      	nop
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200007e4 	.word	0x200007e4
 8002ac4:	40000400 	.word	0x40000400

08002ac8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	609a      	str	r2, [r3, #8]
 8002ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <MX_TIM4_Init+0x98>)
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <MX_TIM4_Init+0x9c>)
 8002aea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10799;
 8002aec:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <MX_TIM4_Init+0x98>)
 8002aee:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002af2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <MX_TIM4_Init+0x98>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1249;
 8002afa:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <MX_TIM4_Init+0x98>)
 8002afc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002b00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <MX_TIM4_Init+0x98>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <MX_TIM4_Init+0x98>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b0e:	4814      	ldr	r0, [pc, #80]	; (8002b60 <MX_TIM4_Init+0x98>)
 8002b10:	f003 fa0c 	bl	8005f2c <HAL_TIM_Base_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002b1a:	f7ff fd4b 	bl	80025b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <MX_TIM4_Init+0x98>)
 8002b2c:	f003 fe54 	bl	80067d8 <HAL_TIM_ConfigClockSource>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002b36:	f7ff fd3d 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4806      	ldr	r0, [pc, #24]	; (8002b60 <MX_TIM4_Init+0x98>)
 8002b48:	f004 faf6 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002b52:	f7ff fd2f 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000830 	.word	0x20000830
 8002b64:	40000800 	.word	0x40000800

08002b68 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b6e:	f107 0310 	add.w	r3, r7, #16
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <MX_TIM8_Init+0xa0>)
 8002b88:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <MX_TIM8_Init+0xa4>)
 8002b8a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 107;
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <MX_TIM8_Init+0xa0>)
 8002b8e:	226b      	movs	r2, #107	; 0x6b
 8002b90:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <MX_TIM8_Init+0xa0>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <MX_TIM8_Init+0xa0>)
 8002b9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b9e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <MX_TIM8_Init+0xa0>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <MX_TIM8_Init+0xa0>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <MX_TIM8_Init+0xa0>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002bb2:	4815      	ldr	r0, [pc, #84]	; (8002c08 <MX_TIM8_Init+0xa0>)
 8002bb4:	f003 f9ba 	bl	8005f2c <HAL_TIM_Base_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002bbe:	f7ff fcf9 	bl	80025b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002bc8:	f107 0310 	add.w	r3, r7, #16
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480e      	ldr	r0, [pc, #56]	; (8002c08 <MX_TIM8_Init+0xa0>)
 8002bd0:	f003 fe02 	bl	80067d8 <HAL_TIM_ConfigClockSource>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002bda:	f7ff fceb 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	4806      	ldr	r0, [pc, #24]	; (8002c08 <MX_TIM8_Init+0xa0>)
 8002bf0:	f004 faa2 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002bfa:	f7ff fcdb 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	2000087c 	.word	0x2000087c
 8002c0c:	40010400 	.word	0x40010400

08002c10 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <HAL_TIM_PWM_MspInit+0x38>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10b      	bne.n	8002c3a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_TIM_PWM_MspInit+0x3c>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <HAL_TIM_PWM_MspInit+0x3c>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <HAL_TIM_PWM_MspInit+0x3c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d114      	bne.n	8002c8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c62:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a32      	ldr	r2, [pc, #200]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	201c      	movs	r0, #28
 8002c80:	f000 fead 	bl	80039de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c84:	201c      	movs	r0, #28
 8002c86:	f000 fec6 	bl	8003a16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002c8a:	e04c      	b.n	8002d26 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <HAL_TIM_Base_MspInit+0xe4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d114      	bne.n	8002cc0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c96:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	201d      	movs	r0, #29
 8002cb4:	f000 fe93 	bl	80039de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cb8:	201d      	movs	r0, #29
 8002cba:	f000 feac 	bl	8003a16 <HAL_NVIC_EnableIRQ>
}
 8002cbe:	e032      	b.n	8002d26 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <HAL_TIM_Base_MspInit+0xe8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d114      	bne.n	8002cf4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cca:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a18      	ldr	r2, [pc, #96]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	201e      	movs	r0, #30
 8002ce8:	f000 fe79 	bl	80039de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002cec:	201e      	movs	r0, #30
 8002cee:	f000 fe92 	bl	8003a16 <HAL_NVIC_EnableIRQ>
}
 8002cf2:	e018      	b.n	8002d26 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM8)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <HAL_TIM_Base_MspInit+0xec>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d113      	bne.n	8002d26 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_TIM_Base_MspInit+0xe0>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2100      	movs	r1, #0
 8002d1a:	202b      	movs	r0, #43	; 0x2b
 8002d1c:	f000 fe5f 	bl	80039de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002d20:	202b      	movs	r0, #43	; 0x2b
 8002d22:	f000 fe78 	bl	8003a16 <HAL_NVIC_EnableIRQ>
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40000800 	.word	0x40000800
 8002d3c:	40010400 	.word	0x40010400

08002d40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <HAL_TIM_MspPostInit+0x64>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d11c      	bne.n	8002d9c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_TIM_MspPostInit+0x68>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <HAL_TIM_MspPostInit+0x68>)
 8002d68:	f043 0310 	orr.w	r3, r3, #16
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_TIM_MspPostInit+0x68>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	4619      	mov	r1, r3
 8002d96:	4805      	ldr	r0, [pc, #20]	; (8002dac <HAL_TIM_MspPostInit+0x6c>)
 8002d98:	f000 feea 	bl	8003b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d9c:	bf00      	nop
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40010000 	.word	0x40010000
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40021000 	.word	0x40021000

08002db0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <MX_USART3_UART_Init+0x58>)
 8002db6:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <MX_USART3_UART_Init+0x5c>)
 8002db8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002dba:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc2:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dd6:	220c      	movs	r2, #12
 8002dd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <MX_USART3_UART_Init+0x58>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <MX_USART3_UART_Init+0x58>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <MX_USART3_UART_Init+0x58>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002df2:	4805      	ldr	r0, [pc, #20]	; (8002e08 <MX_USART3_UART_Init+0x58>)
 8002df4:	f004 faca 	bl	800738c <HAL_UART_Init>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002dfe:	f7ff fbd9 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200008c8 	.word	0x200008c8
 8002e0c:	40004800 	.word	0x40004800

08002e10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b0aa      	sub	sp, #168	; 0xa8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e28:	f107 0310 	add.w	r3, r7, #16
 8002e2c:	2284      	movs	r2, #132	; 0x84
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 fe0b 	bl	8008a4c <memset>
  if(uartHandle->Instance==USART3)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a26      	ldr	r2, [pc, #152]	; (8002ed4 <HAL_UART_MspInit+0xc4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d144      	bne.n	8002eca <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e46:	2300      	movs	r3, #0
 8002e48:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e4a:	f107 0310 	add.w	r3, r7, #16
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 fc7c 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e5a:	f7ff fbab 	bl	80025b4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e76:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e7c:	f043 0308 	orr.w	r3, r3, #8
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ea8:	2307      	movs	r3, #7
 8002eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4809      	ldr	r0, [pc, #36]	; (8002edc <HAL_UART_MspInit+0xcc>)
 8002eb6:	f000 fe5b 	bl	8003b70 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	2027      	movs	r0, #39	; 0x27
 8002ec0:	f000 fd8d 	bl	80039de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ec4:	2027      	movs	r0, #39	; 0x27
 8002ec6:	f000 fda6 	bl	8003a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002eca:	bf00      	nop
 8002ecc:	37a8      	adds	r7, #168	; 0xa8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40004800 	.word	0x40004800
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40020c00 	.word	0x40020c00

08002ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ee4:	480d      	ldr	r0, [pc, #52]	; (8002f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ee6:	490e      	ldr	r1, [pc, #56]	; (8002f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ee8:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eec:	e002      	b.n	8002ef4 <LoopCopyDataInit>

08002eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef2:	3304      	adds	r3, #4

08002ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef8:	d3f9      	bcc.n	8002eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efa:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002efc:	4c0b      	ldr	r4, [pc, #44]	; (8002f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f00:	e001      	b.n	8002f06 <LoopFillZerobss>

08002f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f04:	3204      	adds	r2, #4

08002f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f08:	d3fb      	bcc.n	8002f02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f0a:	f7ff fc9f 	bl	800284c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f0e:	f005 fd6b 	bl	80089e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f12:	f7ff fa85 	bl	8002420 <main>
  bx  lr    
 8002f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f20:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002f24:	0800d4e0 	.word	0x0800d4e0
  ldr r2, =_sbss
 8002f28:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002f2c:	20000964 	.word	0x20000964

08002f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f30:	e7fe      	b.n	8002f30 <ADC_IRQHandler>

08002f32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f36:	2003      	movs	r0, #3
 8002f38:	f000 fd46 	bl	80039c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f000 f805 	bl	8002f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f42:	f7ff fb3d 	bl	80025c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_InitTick+0x54>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_InitTick+0x58>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fd61 	bl	8003a32 <HAL_SYSTICK_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00e      	b.n	8002f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d80a      	bhi.n	8002f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f80:	2200      	movs	r2, #0
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295
 8002f88:	f000 fd29 	bl	80039de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f8c:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <HAL_InitTick+0x5c>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000010 	.word	0x20000010
 8002fa4:	20000018 	.word	0x20000018
 8002fa8:	20000014 	.word	0x20000014

08002fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_IncTick+0x20>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_IncTick+0x24>)
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000018 	.word	0x20000018
 8002fd0:	20000950 	.word	0x20000950

08002fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_GetTick+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000950 	.word	0x20000950

08002fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7ff ffee 	bl	8002fd4 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d005      	beq.n	8003012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_Delay+0x44>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003012:	bf00      	nop
 8003014:	f7ff ffde 	bl	8002fd4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	429a      	cmp	r2, r3
 8003022:	d8f7      	bhi.n	8003014 <HAL_Delay+0x28>
  {
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000018 	.word	0x20000018

08003034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e031      	b.n	80030ae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe fb82 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_ADC_Init+0x84>)
 8003078:	4013      	ands	r3, r2
 800307a:	f043 0202 	orr.w	r2, r3, #2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fad6 	bl	8003634 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
 800309e:	e001      	b.n	80030a4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	ffffeefd 	.word	0xffffeefd

080030bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_Start+0x1a>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e0ad      	b.n	8003232 <HAL_ADC_Start+0x176>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d018      	beq.n	800311e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_ADC_Start+0x184>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a50      	ldr	r2, [pc, #320]	; (8003244 <HAL_ADC_Start+0x188>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0c9a      	lsrs	r2, r3, #18
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003110:	e002      	b.n	8003118 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3b01      	subs	r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f9      	bne.n	8003112 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d175      	bne.n	8003218 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003130:	4b45      	ldr	r3, [pc, #276]	; (8003248 <HAL_ADC_Start+0x18c>)
 8003132:	4013      	ands	r3, r2
 8003134:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003152:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003166:	d106      	bne.n	8003176 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	f023 0206 	bic.w	r2, r3, #6
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	645a      	str	r2, [r3, #68]	; 0x44
 8003174:	e002      	b.n	800317c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800318c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800318e:	4b2f      	ldr	r3, [pc, #188]	; (800324c <HAL_ADC_Start+0x190>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d143      	bne.n	8003230 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	e03a      	b.n	8003230 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a24      	ldr	r2, [pc, #144]	; (8003250 <HAL_ADC_Start+0x194>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d10e      	bne.n	80031e2 <HAL_ADC_Start+0x126>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d107      	bne.n	80031e2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031e0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80031e2:	4b1a      	ldr	r3, [pc, #104]	; (800324c <HAL_ADC_Start+0x190>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d120      	bne.n	8003230 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a18      	ldr	r2, [pc, #96]	; (8003254 <HAL_ADC_Start+0x198>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d11b      	bne.n	8003230 <HAL_ADC_Start+0x174>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d114      	bne.n	8003230 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	e00b      	b.n	8003230 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f043 0210 	orr.w	r2, r3, #16
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000010 	.word	0x20000010
 8003244:	431bde83 	.word	0x431bde83
 8003248:	fffff8fe 	.word	0xfffff8fe
 800324c:	40012300 	.word	0x40012300
 8003250:	40012000 	.word	0x40012000
 8003254:	40012200 	.word	0x40012200

08003258 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003274:	d113      	bne.n	800329e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003284:	d10b      	bne.n	800329e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e063      	b.n	8003366 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800329e:	f7ff fe99 	bl	8002fd4 <HAL_GetTick>
 80032a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032a4:	e021      	b.n	80032ea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d01d      	beq.n	80032ea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_ADC_PollForConversion+0x6c>
 80032b4:	f7ff fe8e 	bl	8002fd4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d212      	bcs.n	80032ea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d00b      	beq.n	80032ea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f043 0204 	orr.w	r2, r3, #4
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e03d      	b.n	8003366 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d1d6      	bne.n	80032a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0212 	mvn.w	r2, #18
 8003300:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d123      	bne.n	8003364 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11f      	bne.n	8003364 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800333c:	2b00      	cmp	r3, #0
 800333e:	d111      	bne.n	8003364 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d105      	bne.n	8003364 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x1c>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e136      	b.n	8003612 <HAL_ADC_ConfigChannel+0x28a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b09      	cmp	r3, #9
 80033b2:	d93a      	bls.n	800342a <HAL_ADC_ConfigChannel+0xa2>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033bc:	d035      	beq.n	800342a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68d9      	ldr	r1, [r3, #12]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	4613      	mov	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4413      	add	r3, r2
 80033d2:	3b1e      	subs	r3, #30
 80033d4:	2207      	movs	r2, #7
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	400a      	ands	r2, r1
 80033e2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a8d      	ldr	r2, [pc, #564]	; (8003620 <HAL_ADC_ConfigChannel+0x298>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10a      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68d9      	ldr	r1, [r3, #12]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	061a      	lsls	r2, r3, #24
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003402:	e035      	b.n	8003470 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68d9      	ldr	r1, [r3, #12]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	4618      	mov	r0, r3
 8003416:	4603      	mov	r3, r0
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4403      	add	r3, r0
 800341c:	3b1e      	subs	r3, #30
 800341e:	409a      	lsls	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003428:	e022      	b.n	8003470 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6919      	ldr	r1, [r3, #16]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	b29b      	uxth	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	2207      	movs	r2, #7
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43da      	mvns	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	400a      	ands	r2, r1
 800344c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6919      	ldr	r1, [r3, #16]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	4618      	mov	r0, r3
 8003460:	4603      	mov	r3, r0
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4403      	add	r3, r0
 8003466:	409a      	lsls	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b06      	cmp	r3, #6
 8003476:	d824      	bhi.n	80034c2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	3b05      	subs	r3, #5
 800348a:	221f      	movs	r2, #31
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43da      	mvns	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	400a      	ands	r2, r1
 8003498:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	4618      	mov	r0, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	3b05      	subs	r3, #5
 80034b4:	fa00 f203 	lsl.w	r2, r0, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	635a      	str	r2, [r3, #52]	; 0x34
 80034c0:	e04c      	b.n	800355c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d824      	bhi.n	8003514 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	3b23      	subs	r3, #35	; 0x23
 80034dc:	221f      	movs	r2, #31
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	400a      	ands	r2, r1
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4618      	mov	r0, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	3b23      	subs	r3, #35	; 0x23
 8003506:	fa00 f203 	lsl.w	r2, r0, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
 8003512:	e023      	b.n	800355c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	3b41      	subs	r3, #65	; 0x41
 8003526:	221f      	movs	r2, #31
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43da      	mvns	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	400a      	ands	r2, r1
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	4618      	mov	r0, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	3b41      	subs	r3, #65	; 0x41
 8003550:	fa00 f203 	lsl.w	r2, r0, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a30      	ldr	r2, [pc, #192]	; (8003624 <HAL_ADC_ConfigChannel+0x29c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d10a      	bne.n	800357c <HAL_ADC_ConfigChannel+0x1f4>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800356e:	d105      	bne.n	800357c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003570:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <HAL_ADC_ConfigChannel+0x2a0>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a2c      	ldr	r2, [pc, #176]	; (8003628 <HAL_ADC_ConfigChannel+0x2a0>)
 8003576:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800357a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a28      	ldr	r2, [pc, #160]	; (8003624 <HAL_ADC_ConfigChannel+0x29c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10f      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x21e>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b12      	cmp	r3, #18
 800358c:	d10b      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800358e:	4b26      	ldr	r3, [pc, #152]	; (8003628 <HAL_ADC_ConfigChannel+0x2a0>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4a25      	ldr	r2, [pc, #148]	; (8003628 <HAL_ADC_ConfigChannel+0x2a0>)
 8003594:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003598:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800359a:	4b23      	ldr	r3, [pc, #140]	; (8003628 <HAL_ADC_ConfigChannel+0x2a0>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4a22      	ldr	r2, [pc, #136]	; (8003628 <HAL_ADC_ConfigChannel+0x2a0>)
 80035a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <HAL_ADC_ConfigChannel+0x29c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d12b      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x280>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <HAL_ADC_ConfigChannel+0x298>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x23a>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b11      	cmp	r3, #17
 80035c0:	d122      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80035c2:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_ADC_ConfigChannel+0x2a0>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a18      	ldr	r2, [pc, #96]	; (8003628 <HAL_ADC_ConfigChannel+0x2a0>)
 80035c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035cc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <HAL_ADC_ConfigChannel+0x2a0>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4a15      	ldr	r2, [pc, #84]	; (8003628 <HAL_ADC_ConfigChannel+0x2a0>)
 80035d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <HAL_ADC_ConfigChannel+0x298>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d111      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_ADC_ConfigChannel+0x2a4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a11      	ldr	r2, [pc, #68]	; (8003630 <HAL_ADC_ConfigChannel+0x2a8>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	0c9a      	lsrs	r2, r3, #18
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035fa:	e002      	b.n	8003602 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3b01      	subs	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f9      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	10000012 	.word	0x10000012
 8003624:	40012000 	.word	0x40012000
 8003628:	40012300 	.word	0x40012300
 800362c:	20000010 	.word	0x20000010
 8003630:	431bde83 	.word	0x431bde83

08003634 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800363c:	4b78      	ldr	r3, [pc, #480]	; (8003820 <ADC_Init+0x1ec>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a77      	ldr	r2, [pc, #476]	; (8003820 <ADC_Init+0x1ec>)
 8003642:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003646:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003648:	4b75      	ldr	r3, [pc, #468]	; (8003820 <ADC_Init+0x1ec>)
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4973      	ldr	r1, [pc, #460]	; (8003820 <ADC_Init+0x1ec>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	021a      	lsls	r2, r3, #8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6899      	ldr	r1, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	4a58      	ldr	r2, [pc, #352]	; (8003824 <ADC_Init+0x1f0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d022      	beq.n	800370e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6899      	ldr	r1, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6899      	ldr	r1, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	e00f      	b.n	800372e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800371c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800372c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0202 	bic.w	r2, r2, #2
 800373c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	005a      	lsls	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01b      	beq.n	8003794 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800377a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	3b01      	subs	r3, #1
 8003788:	035a      	lsls	r2, r3, #13
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	e007      	b.n	80037a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	3b01      	subs	r3, #1
 80037c0:	051a      	lsls	r2, r3, #20
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6899      	ldr	r1, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037e6:	025a      	lsls	r2, r3, #9
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6899      	ldr	r1, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	029a      	lsls	r2, r3, #10
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	40012300 	.word	0x40012300
 8003824:	0f000001 	.word	0x0f000001

08003828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <__NVIC_SetPriorityGrouping+0x40>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003844:	4013      	ands	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <__NVIC_SetPriorityGrouping+0x44>)
 8003852:	4313      	orrs	r3, r2
 8003854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003856:	4a04      	ldr	r2, [pc, #16]	; (8003868 <__NVIC_SetPriorityGrouping+0x40>)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	60d3      	str	r3, [r2, #12]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000ed00 	.word	0xe000ed00
 800386c:	05fa0000 	.word	0x05fa0000

08003870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <__NVIC_GetPriorityGrouping+0x18>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	f003 0307 	and.w	r3, r3, #7
}
 800387e:	4618      	mov	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	2b00      	cmp	r3, #0
 800389c:	db0b      	blt.n	80038b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	f003 021f 	and.w	r2, r3, #31
 80038a4:	4907      	ldr	r1, [pc, #28]	; (80038c4 <__NVIC_EnableIRQ+0x38>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	2001      	movs	r0, #1
 80038ae:	fa00 f202 	lsl.w	r2, r0, r2
 80038b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	e000e100 	.word	0xe000e100

080038c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	db0a      	blt.n	80038f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	490c      	ldr	r1, [pc, #48]	; (8003914 <__NVIC_SetPriority+0x4c>)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	0112      	lsls	r2, r2, #4
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	440b      	add	r3, r1
 80038ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f0:	e00a      	b.n	8003908 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	4908      	ldr	r1, [pc, #32]	; (8003918 <__NVIC_SetPriority+0x50>)
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	3b04      	subs	r3, #4
 8003900:	0112      	lsls	r2, r2, #4
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	440b      	add	r3, r1
 8003906:	761a      	strb	r2, [r3, #24]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000e100 	.word	0xe000e100
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f1c3 0307 	rsb	r3, r3, #7
 8003936:	2b04      	cmp	r3, #4
 8003938:	bf28      	it	cs
 800393a:	2304      	movcs	r3, #4
 800393c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3304      	adds	r3, #4
 8003942:	2b06      	cmp	r3, #6
 8003944:	d902      	bls.n	800394c <NVIC_EncodePriority+0x30>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3b03      	subs	r3, #3
 800394a:	e000      	b.n	800394e <NVIC_EncodePriority+0x32>
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	f04f 32ff 	mov.w	r2, #4294967295
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43da      	mvns	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	401a      	ands	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003964:	f04f 31ff 	mov.w	r1, #4294967295
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	43d9      	mvns	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	4313      	orrs	r3, r2
         );
}
 8003976:	4618      	mov	r0, r3
 8003978:	3724      	adds	r7, #36	; 0x24
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003994:	d301      	bcc.n	800399a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003996:	2301      	movs	r3, #1
 8003998:	e00f      	b.n	80039ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <SysTick_Config+0x40>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3b01      	subs	r3, #1
 80039a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039a2:	210f      	movs	r1, #15
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	f7ff ff8e 	bl	80038c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <SysTick_Config+0x40>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039b2:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <SysTick_Config+0x40>)
 80039b4:	2207      	movs	r2, #7
 80039b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	e000e010 	.word	0xe000e010

080039c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ff29 	bl	8003828 <__NVIC_SetPriorityGrouping>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	4603      	mov	r3, r0
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f0:	f7ff ff3e 	bl	8003870 <__NVIC_GetPriorityGrouping>
 80039f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	6978      	ldr	r0, [r7, #20]
 80039fc:	f7ff ff8e 	bl	800391c <NVIC_EncodePriority>
 8003a00:	4602      	mov	r2, r0
 8003a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ff5d 	bl	80038c8 <__NVIC_SetPriority>
}
 8003a0e:	bf00      	nop
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff31 	bl	800388c <__NVIC_EnableIRQ>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ffa2 	bl	8003984 <SysTick_Config>
 8003a40:	4603      	mov	r3, r0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7ff fabc 	bl	8002fd4 <HAL_GetTick>
 8003a5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d008      	beq.n	8003a7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2280      	movs	r2, #128	; 0x80
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e052      	b.n	8003b22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0216 	bic.w	r2, r2, #22
 8003a8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d103      	bne.n	8003aac <HAL_DMA_Abort+0x62>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0208 	bic.w	r2, r2, #8
 8003aba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003acc:	e013      	b.n	8003af6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ace:	f7ff fa81 	bl	8002fd4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b05      	cmp	r3, #5
 8003ada:	d90c      	bls.n	8003af6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e015      	b.n	8003b22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e4      	bne.n	8003ace <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	223f      	movs	r2, #63	; 0x3f
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d004      	beq.n	8003b48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2280      	movs	r2, #128	; 0x80
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e00c      	b.n	8003b62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2205      	movs	r2, #5
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	e175      	b.n	8003e7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b90:	2201      	movs	r2, #1
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	f040 8164 	bne.w	8003e76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d005      	beq.n	8003bc6 <HAL_GPIO_Init+0x56>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d130      	bne.n	8003c28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f003 0201 	and.w	r2, r3, #1
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d017      	beq.n	8003c64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d123      	bne.n	8003cb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	08da      	lsrs	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3208      	adds	r2, #8
 8003c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	220f      	movs	r2, #15
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	08da      	lsrs	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3208      	adds	r2, #8
 8003cb2:	69b9      	ldr	r1, [r7, #24]
 8003cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0203 	and.w	r2, r3, #3
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80be 	beq.w	8003e76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cfa:	4b66      	ldr	r3, [pc, #408]	; (8003e94 <HAL_GPIO_Init+0x324>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	4a65      	ldr	r2, [pc, #404]	; (8003e94 <HAL_GPIO_Init+0x324>)
 8003d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d04:	6453      	str	r3, [r2, #68]	; 0x44
 8003d06:	4b63      	ldr	r3, [pc, #396]	; (8003e94 <HAL_GPIO_Init+0x324>)
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d12:	4a61      	ldr	r2, [pc, #388]	; (8003e98 <HAL_GPIO_Init+0x328>)
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	3302      	adds	r3, #2
 8003d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	220f      	movs	r2, #15
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <HAL_GPIO_Init+0x32c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d037      	beq.n	8003dae <HAL_GPIO_Init+0x23e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a57      	ldr	r2, [pc, #348]	; (8003ea0 <HAL_GPIO_Init+0x330>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d031      	beq.n	8003daa <HAL_GPIO_Init+0x23a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a56      	ldr	r2, [pc, #344]	; (8003ea4 <HAL_GPIO_Init+0x334>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d02b      	beq.n	8003da6 <HAL_GPIO_Init+0x236>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a55      	ldr	r2, [pc, #340]	; (8003ea8 <HAL_GPIO_Init+0x338>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d025      	beq.n	8003da2 <HAL_GPIO_Init+0x232>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a54      	ldr	r2, [pc, #336]	; (8003eac <HAL_GPIO_Init+0x33c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01f      	beq.n	8003d9e <HAL_GPIO_Init+0x22e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a53      	ldr	r2, [pc, #332]	; (8003eb0 <HAL_GPIO_Init+0x340>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d019      	beq.n	8003d9a <HAL_GPIO_Init+0x22a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a52      	ldr	r2, [pc, #328]	; (8003eb4 <HAL_GPIO_Init+0x344>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_GPIO_Init+0x226>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a51      	ldr	r2, [pc, #324]	; (8003eb8 <HAL_GPIO_Init+0x348>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00d      	beq.n	8003d92 <HAL_GPIO_Init+0x222>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a50      	ldr	r2, [pc, #320]	; (8003ebc <HAL_GPIO_Init+0x34c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <HAL_GPIO_Init+0x21e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4f      	ldr	r2, [pc, #316]	; (8003ec0 <HAL_GPIO_Init+0x350>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d101      	bne.n	8003d8a <HAL_GPIO_Init+0x21a>
 8003d86:	2309      	movs	r3, #9
 8003d88:	e012      	b.n	8003db0 <HAL_GPIO_Init+0x240>
 8003d8a:	230a      	movs	r3, #10
 8003d8c:	e010      	b.n	8003db0 <HAL_GPIO_Init+0x240>
 8003d8e:	2308      	movs	r3, #8
 8003d90:	e00e      	b.n	8003db0 <HAL_GPIO_Init+0x240>
 8003d92:	2307      	movs	r3, #7
 8003d94:	e00c      	b.n	8003db0 <HAL_GPIO_Init+0x240>
 8003d96:	2306      	movs	r3, #6
 8003d98:	e00a      	b.n	8003db0 <HAL_GPIO_Init+0x240>
 8003d9a:	2305      	movs	r3, #5
 8003d9c:	e008      	b.n	8003db0 <HAL_GPIO_Init+0x240>
 8003d9e:	2304      	movs	r3, #4
 8003da0:	e006      	b.n	8003db0 <HAL_GPIO_Init+0x240>
 8003da2:	2303      	movs	r3, #3
 8003da4:	e004      	b.n	8003db0 <HAL_GPIO_Init+0x240>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e002      	b.n	8003db0 <HAL_GPIO_Init+0x240>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <HAL_GPIO_Init+0x240>
 8003dae:	2300      	movs	r3, #0
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	f002 0203 	and.w	r2, r2, #3
 8003db6:	0092      	lsls	r2, r2, #2
 8003db8:	4093      	lsls	r3, r2
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003dc0:	4935      	ldr	r1, [pc, #212]	; (8003e98 <HAL_GPIO_Init+0x328>)
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	089b      	lsrs	r3, r3, #2
 8003dc6:	3302      	adds	r3, #2
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dce:	4b3d      	ldr	r3, [pc, #244]	; (8003ec4 <HAL_GPIO_Init+0x354>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003df2:	4a34      	ldr	r2, [pc, #208]	; (8003ec4 <HAL_GPIO_Init+0x354>)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003df8:	4b32      	ldr	r3, [pc, #200]	; (8003ec4 <HAL_GPIO_Init+0x354>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e1c:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <HAL_GPIO_Init+0x354>)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e22:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <HAL_GPIO_Init+0x354>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e46:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <HAL_GPIO_Init+0x354>)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <HAL_GPIO_Init+0x354>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e70:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <HAL_GPIO_Init+0x354>)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	2b0f      	cmp	r3, #15
 8003e80:	f67f ae86 	bls.w	8003b90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	3724      	adds	r7, #36	; 0x24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40013800 	.word	0x40013800
 8003e9c:	40020000 	.word	0x40020000
 8003ea0:	40020400 	.word	0x40020400
 8003ea4:	40020800 	.word	0x40020800
 8003ea8:	40020c00 	.word	0x40020c00
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40021400 	.word	0x40021400
 8003eb4:	40021800 	.word	0x40021800
 8003eb8:	40021c00 	.word	0x40021c00
 8003ebc:	40022000 	.word	0x40022000
 8003ec0:	40022400 	.word	0x40022400
 8003ec4:	40013c00 	.word	0x40013c00

08003ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e001      	b.n	8003eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
 8003f04:	4613      	mov	r3, r2
 8003f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f08:	787b      	ldrb	r3, [r7, #1]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f14:	e003      	b.n	8003f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f16:	887b      	ldrh	r3, [r7, #2]
 8003f18:	041a      	lsls	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	619a      	str	r2, [r3, #24]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07f      	b.n	800403e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fd fe00 	bl	8001b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	; 0x24
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d107      	bne.n	8003fa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fa2:	609a      	str	r2, [r3, #8]
 8003fa4:	e006      	b.n	8003fb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d104      	bne.n	8003fc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6859      	ldr	r1, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <HAL_I2C_Init+0x11c>)
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69d9      	ldr	r1, [r3, #28]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	02008000 	.word	0x02008000

0800404c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	461a      	mov	r2, r3
 8004058:	460b      	mov	r3, r1
 800405a:	817b      	strh	r3, [r7, #10]
 800405c:	4613      	mov	r3, r2
 800405e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b20      	cmp	r3, #32
 800406a:	f040 80da 	bne.w	8004222 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_I2C_Master_Transmit+0x30>
 8004078:	2302      	movs	r3, #2
 800407a:	e0d3      	b.n	8004224 <HAL_I2C_Master_Transmit+0x1d8>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004084:	f7fe ffa6 	bl	8002fd4 <HAL_GetTick>
 8004088:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2319      	movs	r3, #25
 8004090:	2201      	movs	r2, #1
 8004092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fb4e 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0be      	b.n	8004224 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2221      	movs	r2, #33	; 0x21
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2210      	movs	r2, #16
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	893a      	ldrh	r2, [r7, #8]
 80040c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2bff      	cmp	r3, #255	; 0xff
 80040d6:	d90e      	bls.n	80040f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	22ff      	movs	r2, #255	; 0xff
 80040dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	8979      	ldrh	r1, [r7, #10]
 80040e6:	4b51      	ldr	r3, [pc, #324]	; (800422c <HAL_I2C_Master_Transmit+0x1e0>)
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fd38 	bl	8004b64 <I2C_TransferConfig>
 80040f4:	e06c      	b.n	80041d0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	b2da      	uxtb	r2, r3
 8004106:	8979      	ldrh	r1, [r7, #10]
 8004108:	4b48      	ldr	r3, [pc, #288]	; (800422c <HAL_I2C_Master_Transmit+0x1e0>)
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fd27 	bl	8004b64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004116:	e05b      	b.n	80041d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	6a39      	ldr	r1, [r7, #32]
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fb4b 	bl	80047b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e07b      	b.n	8004224 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	781a      	ldrb	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d034      	beq.n	80041d0 <HAL_I2C_Master_Transmit+0x184>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	2b00      	cmp	r3, #0
 800416c:	d130      	bne.n	80041d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	2200      	movs	r2, #0
 8004176:	2180      	movs	r1, #128	; 0x80
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fadd 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e04d      	b.n	8004224 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	2bff      	cmp	r3, #255	; 0xff
 8004190:	d90e      	bls.n	80041b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	22ff      	movs	r2, #255	; 0xff
 8004196:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	b2da      	uxtb	r2, r3
 800419e:	8979      	ldrh	r1, [r7, #10]
 80041a0:	2300      	movs	r3, #0
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fcdb 	bl	8004b64 <I2C_TransferConfig>
 80041ae:	e00f      	b.n	80041d0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	8979      	ldrh	r1, [r7, #10]
 80041c2:	2300      	movs	r3, #0
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fcca 	bl	8004b64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d19e      	bne.n	8004118 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	6a39      	ldr	r1, [r7, #32]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fb2a 	bl	8004838 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e01a      	b.n	8004224 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2220      	movs	r2, #32
 80041f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_I2C_Master_Transmit+0x1e4>)
 8004202:	400b      	ands	r3, r1
 8004204:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e000      	b.n	8004224 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004222:	2302      	movs	r3, #2
  }
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	80002000 	.word	0x80002000
 8004230:	fe00e800 	.word	0xfe00e800

08004234 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	461a      	mov	r2, r3
 8004240:	460b      	mov	r3, r1
 8004242:	817b      	strh	r3, [r7, #10]
 8004244:	4613      	mov	r3, r2
 8004246:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	f040 80db 	bne.w	800440c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_I2C_Master_Receive+0x30>
 8004260:	2302      	movs	r3, #2
 8004262:	e0d4      	b.n	800440e <HAL_I2C_Master_Receive+0x1da>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800426c:	f7fe feb2 	bl	8002fd4 <HAL_GetTick>
 8004270:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2319      	movs	r3, #25
 8004278:	2201      	movs	r2, #1
 800427a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fa5a 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0bf      	b.n	800440e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2222      	movs	r2, #34	; 0x22
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2210      	movs	r2, #16
 800429a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	893a      	ldrh	r2, [r7, #8]
 80042ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2bff      	cmp	r3, #255	; 0xff
 80042be:	d90e      	bls.n	80042de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	22ff      	movs	r2, #255	; 0xff
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	8979      	ldrh	r1, [r7, #10]
 80042ce:	4b52      	ldr	r3, [pc, #328]	; (8004418 <HAL_I2C_Master_Receive+0x1e4>)
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 fc44 	bl	8004b64 <I2C_TransferConfig>
 80042dc:	e06d      	b.n	80043ba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	8979      	ldrh	r1, [r7, #10]
 80042f0:	4b49      	ldr	r3, [pc, #292]	; (8004418 <HAL_I2C_Master_Receive+0x1e4>)
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fc33 	bl	8004b64 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80042fe:	e05c      	b.n	80043ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	6a39      	ldr	r1, [r7, #32]
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fad3 	bl	80048b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e07c      	b.n	800440e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d034      	beq.n	80043ba <HAL_I2C_Master_Receive+0x186>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	d130      	bne.n	80043ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	2200      	movs	r2, #0
 8004360:	2180      	movs	r1, #128	; 0x80
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f9e8 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e04d      	b.n	800440e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	2bff      	cmp	r3, #255	; 0xff
 800437a:	d90e      	bls.n	800439a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	22ff      	movs	r2, #255	; 0xff
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	b2da      	uxtb	r2, r3
 8004388:	8979      	ldrh	r1, [r7, #10]
 800438a:	2300      	movs	r3, #0
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fbe6 	bl	8004b64 <I2C_TransferConfig>
 8004398:	e00f      	b.n	80043ba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	8979      	ldrh	r1, [r7, #10]
 80043ac:	2300      	movs	r3, #0
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fbd5 	bl	8004b64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d19d      	bne.n	8004300 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	6a39      	ldr	r1, [r7, #32]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fa35 	bl	8004838 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e01a      	b.n	800440e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2220      	movs	r2, #32
 80043de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <HAL_I2C_Master_Receive+0x1e8>)
 80043ec:	400b      	ands	r3, r1
 80043ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	e000      	b.n	800440e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800440c:	2302      	movs	r3, #2
  }
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	80002400 	.word	0x80002400
 800441c:	fe00e800 	.word	0xfe00e800

08004420 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	4608      	mov	r0, r1
 800442a:	4611      	mov	r1, r2
 800442c:	461a      	mov	r2, r3
 800442e:	4603      	mov	r3, r0
 8004430:	817b      	strh	r3, [r7, #10]
 8004432:	460b      	mov	r3, r1
 8004434:	813b      	strh	r3, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b20      	cmp	r3, #32
 8004444:	f040 80f9 	bne.w	800463a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_I2C_Mem_Write+0x34>
 800444e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800445a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0ed      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_I2C_Mem_Write+0x4e>
 800446a:	2302      	movs	r3, #2
 800446c:	e0e6      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004476:	f7fe fdad 	bl	8002fd4 <HAL_GetTick>
 800447a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	2319      	movs	r3, #25
 8004482:	2201      	movs	r2, #1
 8004484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f955 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0d1      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2221      	movs	r2, #33	; 0x21
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2240      	movs	r2, #64	; 0x40
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a3a      	ldr	r2, [r7, #32]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044c0:	88f8      	ldrh	r0, [r7, #6]
 80044c2:	893a      	ldrh	r2, [r7, #8]
 80044c4:	8979      	ldrh	r1, [r7, #10]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	4603      	mov	r3, r0
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f8b9 	bl	8004648 <I2C_RequestMemoryWrite>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0a9      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2bff      	cmp	r3, #255	; 0xff
 80044f0:	d90e      	bls.n	8004510 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	22ff      	movs	r2, #255	; 0xff
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	8979      	ldrh	r1, [r7, #10]
 8004500:	2300      	movs	r3, #0
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fb2b 	bl	8004b64 <I2C_TransferConfig>
 800450e:	e00f      	b.n	8004530 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451e:	b2da      	uxtb	r2, r3
 8004520:	8979      	ldrh	r1, [r7, #10]
 8004522:	2300      	movs	r3, #0
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fb1a 	bl	8004b64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f93f 	bl	80047b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e07b      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d034      	beq.n	80045e8 <HAL_I2C_Mem_Write+0x1c8>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004582:	2b00      	cmp	r3, #0
 8004584:	d130      	bne.n	80045e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	2200      	movs	r2, #0
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f8d1 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e04d      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2bff      	cmp	r3, #255	; 0xff
 80045a8:	d90e      	bls.n	80045c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	22ff      	movs	r2, #255	; 0xff
 80045ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	8979      	ldrh	r1, [r7, #10]
 80045b8:	2300      	movs	r3, #0
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 facf 	bl	8004b64 <I2C_TransferConfig>
 80045c6:	e00f      	b.n	80045e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	8979      	ldrh	r1, [r7, #10]
 80045da:	2300      	movs	r3, #0
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fabe 	bl	8004b64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d19e      	bne.n	8004530 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f91e 	bl	8004838 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e01a      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2220      	movs	r2, #32
 800460c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <HAL_I2C_Mem_Write+0x224>)
 800461a:	400b      	ands	r3, r1
 800461c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800463a:	2302      	movs	r3, #2
  }
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	fe00e800 	.word	0xfe00e800

08004648 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af02      	add	r7, sp, #8
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	4608      	mov	r0, r1
 8004652:	4611      	mov	r1, r2
 8004654:	461a      	mov	r2, r3
 8004656:	4603      	mov	r3, r0
 8004658:	817b      	strh	r3, [r7, #10]
 800465a:	460b      	mov	r3, r1
 800465c:	813b      	strh	r3, [r7, #8]
 800465e:	4613      	mov	r3, r2
 8004660:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	8979      	ldrh	r1, [r7, #10]
 8004668:	4b20      	ldr	r3, [pc, #128]	; (80046ec <I2C_RequestMemoryWrite+0xa4>)
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 fa77 	bl	8004b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	69b9      	ldr	r1, [r7, #24]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f89c 	bl	80047b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e02c      	b.n	80046e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d105      	bne.n	800469c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004690:	893b      	ldrh	r3, [r7, #8]
 8004692:	b2da      	uxtb	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	629a      	str	r2, [r3, #40]	; 0x28
 800469a:	e015      	b.n	80046c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800469c:	893b      	ldrh	r3, [r7, #8]
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	69b9      	ldr	r1, [r7, #24]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f882 	bl	80047b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e012      	b.n	80046e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046be:	893b      	ldrh	r3, [r7, #8]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2200      	movs	r2, #0
 80046d0:	2180      	movs	r1, #128	; 0x80
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f830 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	80002000 	.word	0x80002000

080046f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b02      	cmp	r3, #2
 8004704:	d103      	bne.n	800470e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d007      	beq.n	800472c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	619a      	str	r2, [r3, #24]
  }
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004748:	e022      	b.n	8004790 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004750:	d01e      	beq.n	8004790 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004752:	f7fe fc3f 	bl	8002fd4 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d113      	bne.n	8004790 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476c:	f043 0220 	orr.w	r2, r3, #32
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e00f      	b.n	80047b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4013      	ands	r3, r2
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	429a      	cmp	r2, r3
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d0cd      	beq.n	800474a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047c4:	e02c      	b.n	8004820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f8ea 	bl	80049a4 <I2C_IsErrorOccurred>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e02a      	b.n	8004830 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d01e      	beq.n	8004820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7fe fbf7 	bl	8002fd4 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d113      	bne.n	8004820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	f043 0220 	orr.w	r2, r3, #32
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e007      	b.n	8004830 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b02      	cmp	r3, #2
 800482c:	d1cb      	bne.n	80047c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004844:	e028      	b.n	8004898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f8aa 	bl	80049a4 <I2C_IsErrorOccurred>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e026      	b.n	80048a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485a:	f7fe fbbb 	bl	8002fd4 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d113      	bne.n	8004898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e007      	b.n	80048a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d1cf      	bne.n	8004846 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048bc:	e064      	b.n	8004988 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f86e 	bl	80049a4 <I2C_IsErrorOccurred>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e062      	b.n	8004998 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d138      	bne.n	8004952 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d105      	bne.n	80048fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	e04e      	b.n	8004998 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b10      	cmp	r3, #16
 8004906:	d107      	bne.n	8004918 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2210      	movs	r2, #16
 800490e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2204      	movs	r2, #4
 8004914:	645a      	str	r2, [r3, #68]	; 0x44
 8004916:	e002      	b.n	800491e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2220      	movs	r2, #32
 8004924:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6859      	ldr	r1, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004932:	400b      	ands	r3, r1
 8004934:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e022      	b.n	8004998 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004952:	f7fe fb3f 	bl	8002fd4 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	d302      	bcc.n	8004968 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10f      	bne.n	8004988 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e007      	b.n	8004998 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d193      	bne.n	80048be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	fe00e800 	.word	0xfe00e800

080049a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	; 0x28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f003 0310 	and.w	r3, r3, #16
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d068      	beq.n	8004aa2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2210      	movs	r2, #16
 80049d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049d8:	e049      	b.n	8004a6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d045      	beq.n	8004a6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049e2:	f7fe faf7 	bl	8002fd4 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d302      	bcc.n	80049f8 <I2C_IsErrorOccurred+0x54>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d13a      	bne.n	8004a6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a1a:	d121      	bne.n	8004a60 <I2C_IsErrorOccurred+0xbc>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a22:	d01d      	beq.n	8004a60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d01a      	beq.n	8004a60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a3a:	f7fe facb 	bl	8002fd4 <HAL_GetTick>
 8004a3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a40:	e00e      	b.n	8004a60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a42:	f7fe fac7 	bl	8002fd4 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b19      	cmp	r3, #25
 8004a4e:	d907      	bls.n	8004a60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	f043 0320 	orr.w	r3, r3, #32
 8004a56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004a5e:	e006      	b.n	8004a6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d1e9      	bne.n	8004a42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d003      	beq.n	8004a84 <I2C_IsErrorOccurred+0xe0>
 8004a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0aa      	beq.n	80049da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d103      	bne.n	8004a94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2220      	movs	r2, #32
 8004a92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	f043 0304 	orr.w	r3, r3, #4
 8004a9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ac4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	f043 0308 	orr.w	r3, r3, #8
 8004adc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ae6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00b      	beq.n	8004b10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	f043 0302 	orr.w	r3, r3, #2
 8004afe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01c      	beq.n	8004b52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7ff fde9 	bl	80046f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <I2C_IsErrorOccurred+0x1bc>)
 8004b2a:	400b      	ands	r3, r1
 8004b2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3728      	adds	r7, #40	; 0x28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	fe00e800 	.word	0xfe00e800

08004b64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	817b      	strh	r3, [r7, #10]
 8004b72:	4613      	mov	r3, r2
 8004b74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b76:	897b      	ldrh	r3, [r7, #10]
 8004b78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b7c:	7a7b      	ldrb	r3, [r7, #9]
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	0d5b      	lsrs	r3, r3, #21
 8004b9e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <I2C_TransferConfig+0x60>)
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	ea02 0103 	and.w	r1, r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	03ff63ff 	.word	0x03ff63ff

08004bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d138      	bne.n	8004c50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e032      	b.n	8004c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	; 0x24
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6819      	ldr	r1, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e000      	b.n	8004c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c50:	2302      	movs	r3, #2
  }
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d139      	bne.n	8004ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e033      	b.n	8004cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2224      	movs	r2, #36	; 0x24
 8004c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e000      	b.n	8004cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
  }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a04      	ldr	r2, [pc, #16]	; (8004d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d06:	6013      	str	r3, [r2, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40007000 	.word	0x40007000

08004d18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d22:	4b23      	ldr	r3, [pc, #140]	; (8004db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2e:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	; (8004db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1d      	ldr	r2, [pc, #116]	; (8004db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d46:	f7fe f945 	bl	8002fd4 <HAL_GetTick>
 8004d4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d4c:	e009      	b.n	8004d62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d4e:	f7fe f941 	bl	8002fd4 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d5c:	d901      	bls.n	8004d62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e022      	b.n	8004da8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d62:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6e:	d1ee      	bne.n	8004d4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d70:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a0f      	ldr	r2, [pc, #60]	; (8004db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d7c:	f7fe f92a 	bl	8002fd4 <HAL_GetTick>
 8004d80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d82:	e009      	b.n	8004d98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d84:	f7fe f926 	bl	8002fd4 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d92:	d901      	bls.n	8004d98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e007      	b.n	8004da8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da4:	d1ee      	bne.n	8004d84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40007000 	.word	0x40007000

08004db8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e291      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8087 	beq.w	8004eea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ddc:	4b96      	ldr	r3, [pc, #600]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 030c 	and.w	r3, r3, #12
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d00c      	beq.n	8004e02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004de8:	4b93      	ldr	r3, [pc, #588]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d112      	bne.n	8004e1a <HAL_RCC_OscConfig+0x62>
 8004df4:	4b90      	ldr	r3, [pc, #576]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e00:	d10b      	bne.n	8004e1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e02:	4b8d      	ldr	r3, [pc, #564]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d06c      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x130>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d168      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e26b      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e22:	d106      	bne.n	8004e32 <HAL_RCC_OscConfig+0x7a>
 8004e24:	4b84      	ldr	r3, [pc, #528]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a83      	ldr	r2, [pc, #524]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e02e      	b.n	8004e90 <HAL_RCC_OscConfig+0xd8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCC_OscConfig+0x9c>
 8004e3a:	4b7f      	ldr	r3, [pc, #508]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a7e      	ldr	r2, [pc, #504]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	4b7c      	ldr	r3, [pc, #496]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a7b      	ldr	r2, [pc, #492]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e01d      	b.n	8004e90 <HAL_RCC_OscConfig+0xd8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0xc0>
 8004e5e:	4b76      	ldr	r3, [pc, #472]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a75      	ldr	r2, [pc, #468]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b73      	ldr	r3, [pc, #460]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a72      	ldr	r2, [pc, #456]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0xd8>
 8004e78:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a6e      	ldr	r2, [pc, #440]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b6c      	ldr	r3, [pc, #432]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a6b      	ldr	r2, [pc, #428]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d013      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fe f89c 	bl	8002fd4 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea0:	f7fe f898 	bl	8002fd4 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	; 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e21f      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb2:	4b61      	ldr	r3, [pc, #388]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0xe8>
 8004ebe:	e014      	b.n	8004eea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fe f888 	bl	8002fd4 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fe f884 	bl	8002fd4 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e20b      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	4b57      	ldr	r3, [pc, #348]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x110>
 8004ee6:	e000      	b.n	8004eea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d069      	beq.n	8004fca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ef6:	4b50      	ldr	r3, [pc, #320]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f02:	4b4d      	ldr	r3, [pc, #308]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d11c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x190>
 8004f0e:	4b4a      	ldr	r3, [pc, #296]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d116      	bne.n	8004f48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1a:	4b47      	ldr	r3, [pc, #284]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_RCC_OscConfig+0x17a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e1df      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f32:	4b41      	ldr	r3, [pc, #260]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	493d      	ldr	r1, [pc, #244]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f46:	e040      	b.n	8004fca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d023      	beq.n	8004f98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f50:	4b39      	ldr	r3, [pc, #228]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a38      	ldr	r2, [pc, #224]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fe f83a 	bl	8002fd4 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f64:	f7fe f836 	bl	8002fd4 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e1bd      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f76:	4b30      	ldr	r3, [pc, #192]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f82:	4b2d      	ldr	r3, [pc, #180]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4929      	ldr	r1, [pc, #164]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]
 8004f96:	e018      	b.n	8004fca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f98:	4b27      	ldr	r3, [pc, #156]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fe f816 	bl	8002fd4 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fac:	f7fe f812 	bl	8002fd4 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e199      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fbe:	4b1e      	ldr	r3, [pc, #120]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d038      	beq.n	8005048 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d019      	beq.n	8005012 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fde:	4b16      	ldr	r3, [pc, #88]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe2:	4a15      	ldr	r2, [pc, #84]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fd fff3 	bl	8002fd4 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff2:	f7fd ffef 	bl	8002fd4 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e176      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8005006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x23a>
 8005010:	e01a      	b.n	8005048 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005012:	4b09      	ldr	r3, [pc, #36]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8005014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005016:	4a08      	ldr	r2, [pc, #32]	; (8005038 <HAL_RCC_OscConfig+0x280>)
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501e:	f7fd ffd9 	bl	8002fd4 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005024:	e00a      	b.n	800503c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005026:	f7fd ffd5 	bl	8002fd4 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d903      	bls.n	800503c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e15c      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
 8005038:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	4b91      	ldr	r3, [pc, #580]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 800503e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1ee      	bne.n	8005026 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80a4 	beq.w	800519e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005056:	4b8b      	ldr	r3, [pc, #556]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10d      	bne.n	800507e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005062:	4b88      	ldr	r3, [pc, #544]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	4a87      	ldr	r2, [pc, #540]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506c:	6413      	str	r3, [r2, #64]	; 0x40
 800506e:	4b85      	ldr	r3, [pc, #532]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800507e:	4b82      	ldr	r3, [pc, #520]	; (8005288 <HAL_RCC_OscConfig+0x4d0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d118      	bne.n	80050bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800508a:	4b7f      	ldr	r3, [pc, #508]	; (8005288 <HAL_RCC_OscConfig+0x4d0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a7e      	ldr	r2, [pc, #504]	; (8005288 <HAL_RCC_OscConfig+0x4d0>)
 8005090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005096:	f7fd ff9d 	bl	8002fd4 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509e:	f7fd ff99 	bl	8002fd4 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b64      	cmp	r3, #100	; 0x64
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e120      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050b0:	4b75      	ldr	r3, [pc, #468]	; (8005288 <HAL_RCC_OscConfig+0x4d0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d106      	bne.n	80050d2 <HAL_RCC_OscConfig+0x31a>
 80050c4:	4b6f      	ldr	r3, [pc, #444]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	4a6e      	ldr	r2, [pc, #440]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	6713      	str	r3, [r2, #112]	; 0x70
 80050d0:	e02d      	b.n	800512e <HAL_RCC_OscConfig+0x376>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x33c>
 80050da:	4b6a      	ldr	r3, [pc, #424]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	4a69      	ldr	r2, [pc, #420]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	6713      	str	r3, [r2, #112]	; 0x70
 80050e6:	4b67      	ldr	r3, [pc, #412]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	4a66      	ldr	r2, [pc, #408]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80050ec:	f023 0304 	bic.w	r3, r3, #4
 80050f0:	6713      	str	r3, [r2, #112]	; 0x70
 80050f2:	e01c      	b.n	800512e <HAL_RCC_OscConfig+0x376>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d10c      	bne.n	8005116 <HAL_RCC_OscConfig+0x35e>
 80050fc:	4b61      	ldr	r3, [pc, #388]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	4a60      	ldr	r2, [pc, #384]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005102:	f043 0304 	orr.w	r3, r3, #4
 8005106:	6713      	str	r3, [r2, #112]	; 0x70
 8005108:	4b5e      	ldr	r3, [pc, #376]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	4a5d      	ldr	r2, [pc, #372]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	6713      	str	r3, [r2, #112]	; 0x70
 8005114:	e00b      	b.n	800512e <HAL_RCC_OscConfig+0x376>
 8005116:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	4a5a      	ldr	r2, [pc, #360]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	6713      	str	r3, [r2, #112]	; 0x70
 8005122:	4b58      	ldr	r3, [pc, #352]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	4a57      	ldr	r2, [pc, #348]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005128:	f023 0304 	bic.w	r3, r3, #4
 800512c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d015      	beq.n	8005162 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7fd ff4d 	bl	8002fd4 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513c:	e00a      	b.n	8005154 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fd ff49 	bl	8002fd4 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f241 3288 	movw	r2, #5000	; 0x1388
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e0ce      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005154:	4b4b      	ldr	r3, [pc, #300]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ee      	beq.n	800513e <HAL_RCC_OscConfig+0x386>
 8005160:	e014      	b.n	800518c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005162:	f7fd ff37 	bl	8002fd4 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005168:	e00a      	b.n	8005180 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7fd ff33 	bl	8002fd4 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f241 3288 	movw	r2, #5000	; 0x1388
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e0b8      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005180:	4b40      	ldr	r3, [pc, #256]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1ee      	bne.n	800516a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d105      	bne.n	800519e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005192:	4b3c      	ldr	r3, [pc, #240]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	4a3b      	ldr	r2, [pc, #236]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800519c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 80a4 	beq.w	80052f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a8:	4b36      	ldr	r3, [pc, #216]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 030c 	and.w	r3, r3, #12
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d06b      	beq.n	800528c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d149      	bne.n	8005250 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051bc:	4b31      	ldr	r3, [pc, #196]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a30      	ldr	r2, [pc, #192]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80051c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fd ff04 	bl	8002fd4 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fd ff00 	bl	8002fd4 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e087      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e2:	4b28      	ldr	r3, [pc, #160]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69da      	ldr	r2, [r3, #28]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	019b      	lsls	r3, r3, #6
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	3b01      	subs	r3, #1
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	4313      	orrs	r3, r2
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800521a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800521c:	4b19      	ldr	r3, [pc, #100]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a18      	ldr	r2, [pc, #96]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fd fed4 	bl	8002fd4 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fd fed0 	bl	8002fd4 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e057      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x478>
 800524e:	e04f      	b.n	80052f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a0b      	ldr	r2, [pc, #44]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800525a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fd feba 	bl	8002fd4 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005264:	f7fd feb6 	bl	8002fd4 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e03d      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005276:	4b03      	ldr	r3, [pc, #12]	; (8005284 <HAL_RCC_OscConfig+0x4cc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0x4ac>
 8005282:	e035      	b.n	80052f0 <HAL_RCC_OscConfig+0x538>
 8005284:	40023800 	.word	0x40023800
 8005288:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800528c:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <HAL_RCC_OscConfig+0x544>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d028      	beq.n	80052ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d121      	bne.n	80052ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d11a      	bne.n	80052ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052bc:	4013      	ands	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d111      	bne.n	80052ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	3b01      	subs	r3, #1
 80052d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052d8:	429a      	cmp	r2, r3
 80052da:	d107      	bne.n	80052ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d001      	beq.n	80052f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40023800 	.word	0x40023800

08005300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0d0      	b.n	80054ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005318:	4b6a      	ldr	r3, [pc, #424]	; (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d910      	bls.n	8005348 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005326:	4b67      	ldr	r3, [pc, #412]	; (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 020f 	bic.w	r2, r3, #15
 800532e:	4965      	ldr	r1, [pc, #404]	; (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	4313      	orrs	r3, r2
 8005334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005336:	4b63      	ldr	r3, [pc, #396]	; (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0b8      	b.n	80054ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d020      	beq.n	8005396 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005360:	4b59      	ldr	r3, [pc, #356]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	4a58      	ldr	r2, [pc, #352]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800536a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005378:	4b53      	ldr	r3, [pc, #332]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	4a52      	ldr	r2, [pc, #328]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 800537e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005382:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005384:	4b50      	ldr	r3, [pc, #320]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	494d      	ldr	r1, [pc, #308]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d040      	beq.n	8005424 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d107      	bne.n	80053ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053aa:	4b47      	ldr	r3, [pc, #284]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d115      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e07f      	b.n	80054ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d107      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c2:	4b41      	ldr	r3, [pc, #260]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e073      	b.n	80054ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d2:	4b3d      	ldr	r3, [pc, #244]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e06b      	b.n	80054ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053e2:	4b39      	ldr	r3, [pc, #228]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f023 0203 	bic.w	r2, r3, #3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4936      	ldr	r1, [pc, #216]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f4:	f7fd fdee 	bl	8002fd4 <HAL_GetTick>
 80053f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fc:	f7fd fdea 	bl	8002fd4 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	; 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e053      	b.n	80054ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	4b2d      	ldr	r3, [pc, #180]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 020c 	and.w	r2, r3, #12
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	429a      	cmp	r2, r3
 8005422:	d1eb      	bne.n	80053fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005424:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d210      	bcs.n	8005454 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f023 020f 	bic.w	r2, r3, #15
 800543a:	4922      	ldr	r1, [pc, #136]	; (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	4313      	orrs	r3, r2
 8005440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005442:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d001      	beq.n	8005454 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e032      	b.n	80054ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	4916      	ldr	r1, [pc, #88]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 800546e:	4313      	orrs	r3, r2
 8005470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800547e:	4b12      	ldr	r3, [pc, #72]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	490e      	ldr	r1, [pc, #56]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 800548e:	4313      	orrs	r3, r2
 8005490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005492:	f000 f821 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8005496:	4602      	mov	r2, r0
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	091b      	lsrs	r3, r3, #4
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	490a      	ldr	r1, [pc, #40]	; (80054cc <HAL_RCC_ClockConfig+0x1cc>)
 80054a4:	5ccb      	ldrb	r3, [r1, r3]
 80054a6:	fa22 f303 	lsr.w	r3, r2, r3
 80054aa:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <HAL_RCC_ClockConfig+0x1d0>)
 80054ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_RCC_ClockConfig+0x1d4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fd fd4a 	bl	8002f4c <HAL_InitTick>

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40023c00 	.word	0x40023c00
 80054c8:	40023800 	.word	0x40023800
 80054cc:	0800d024 	.word	0x0800d024
 80054d0:	20000010 	.word	0x20000010
 80054d4:	20000014 	.word	0x20000014

080054d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054dc:	b094      	sub	sp, #80	; 0x50
 80054de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	647b      	str	r3, [r7, #68]	; 0x44
 80054e4:	2300      	movs	r3, #0
 80054e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e8:	2300      	movs	r3, #0
 80054ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054f0:	4b79      	ldr	r3, [pc, #484]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 030c 	and.w	r3, r3, #12
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d00d      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x40>
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	f200 80e1 	bhi.w	80056c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_RCC_GetSysClockFreq+0x34>
 8005506:	2b04      	cmp	r3, #4
 8005508:	d003      	beq.n	8005512 <HAL_RCC_GetSysClockFreq+0x3a>
 800550a:	e0db      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800550c:	4b73      	ldr	r3, [pc, #460]	; (80056dc <HAL_RCC_GetSysClockFreq+0x204>)
 800550e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005510:	e0db      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005512:	4b73      	ldr	r3, [pc, #460]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005514:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005516:	e0d8      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005518:	4b6f      	ldr	r3, [pc, #444]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005520:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005522:	4b6d      	ldr	r3, [pc, #436]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d063      	beq.n	80055f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800552e:	4b6a      	ldr	r3, [pc, #424]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	099b      	lsrs	r3, r3, #6
 8005534:	2200      	movs	r2, #0
 8005536:	63bb      	str	r3, [r7, #56]	; 0x38
 8005538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005540:	633b      	str	r3, [r7, #48]	; 0x30
 8005542:	2300      	movs	r3, #0
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
 8005546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800554a:	4622      	mov	r2, r4
 800554c:	462b      	mov	r3, r5
 800554e:	f04f 0000 	mov.w	r0, #0
 8005552:	f04f 0100 	mov.w	r1, #0
 8005556:	0159      	lsls	r1, r3, #5
 8005558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800555c:	0150      	lsls	r0, r2, #5
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4621      	mov	r1, r4
 8005564:	1a51      	subs	r1, r2, r1
 8005566:	6139      	str	r1, [r7, #16]
 8005568:	4629      	mov	r1, r5
 800556a:	eb63 0301 	sbc.w	r3, r3, r1
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800557c:	4659      	mov	r1, fp
 800557e:	018b      	lsls	r3, r1, #6
 8005580:	4651      	mov	r1, sl
 8005582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005586:	4651      	mov	r1, sl
 8005588:	018a      	lsls	r2, r1, #6
 800558a:	4651      	mov	r1, sl
 800558c:	ebb2 0801 	subs.w	r8, r2, r1
 8005590:	4659      	mov	r1, fp
 8005592:	eb63 0901 	sbc.w	r9, r3, r1
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055aa:	4690      	mov	r8, r2
 80055ac:	4699      	mov	r9, r3
 80055ae:	4623      	mov	r3, r4
 80055b0:	eb18 0303 	adds.w	r3, r8, r3
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	462b      	mov	r3, r5
 80055b8:	eb49 0303 	adc.w	r3, r9, r3
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055ca:	4629      	mov	r1, r5
 80055cc:	024b      	lsls	r3, r1, #9
 80055ce:	4621      	mov	r1, r4
 80055d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055d4:	4621      	mov	r1, r4
 80055d6:	024a      	lsls	r2, r1, #9
 80055d8:	4610      	mov	r0, r2
 80055da:	4619      	mov	r1, r3
 80055dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055de:	2200      	movs	r2, #0
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055e8:	f7fb fb58 	bl	8000c9c <__aeabi_uldivmod>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4613      	mov	r3, r2
 80055f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f4:	e058      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055f6:	4b38      	ldr	r3, [pc, #224]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	099b      	lsrs	r3, r3, #6
 80055fc:	2200      	movs	r2, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	4611      	mov	r1, r2
 8005602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005606:	623b      	str	r3, [r7, #32]
 8005608:	2300      	movs	r3, #0
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
 800560c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005610:	4642      	mov	r2, r8
 8005612:	464b      	mov	r3, r9
 8005614:	f04f 0000 	mov.w	r0, #0
 8005618:	f04f 0100 	mov.w	r1, #0
 800561c:	0159      	lsls	r1, r3, #5
 800561e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005622:	0150      	lsls	r0, r2, #5
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4641      	mov	r1, r8
 800562a:	ebb2 0a01 	subs.w	sl, r2, r1
 800562e:	4649      	mov	r1, r9
 8005630:	eb63 0b01 	sbc.w	fp, r3, r1
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005648:	ebb2 040a 	subs.w	r4, r2, sl
 800564c:	eb63 050b 	sbc.w	r5, r3, fp
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	00eb      	lsls	r3, r5, #3
 800565a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800565e:	00e2      	lsls	r2, r4, #3
 8005660:	4614      	mov	r4, r2
 8005662:	461d      	mov	r5, r3
 8005664:	4643      	mov	r3, r8
 8005666:	18e3      	adds	r3, r4, r3
 8005668:	603b      	str	r3, [r7, #0]
 800566a:	464b      	mov	r3, r9
 800566c:	eb45 0303 	adc.w	r3, r5, r3
 8005670:	607b      	str	r3, [r7, #4]
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	f04f 0300 	mov.w	r3, #0
 800567a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800567e:	4629      	mov	r1, r5
 8005680:	028b      	lsls	r3, r1, #10
 8005682:	4621      	mov	r1, r4
 8005684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005688:	4621      	mov	r1, r4
 800568a:	028a      	lsls	r2, r1, #10
 800568c:	4610      	mov	r0, r2
 800568e:	4619      	mov	r1, r3
 8005690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005692:	2200      	movs	r2, #0
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	61fa      	str	r2, [r7, #28]
 8005698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800569c:	f7fb fafe 	bl	8000c9c <__aeabi_uldivmod>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4613      	mov	r3, r2
 80056a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	0c1b      	lsrs	r3, r3, #16
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	3301      	adds	r3, #1
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80056b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056c2:	e002      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCC_GetSysClockFreq+0x204>)
 80056c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3750      	adds	r7, #80	; 0x50
 80056d0:	46bd      	mov	sp, r7
 80056d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056d6:	bf00      	nop
 80056d8:	40023800 	.word	0x40023800
 80056dc:	00f42400 	.word	0x00f42400
 80056e0:	007a1200 	.word	0x007a1200

080056e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056e8:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056ea:	681b      	ldr	r3, [r3, #0]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20000010 	.word	0x20000010

080056fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005700:	f7ff fff0 	bl	80056e4 <HAL_RCC_GetHCLKFreq>
 8005704:	4602      	mov	r2, r0
 8005706:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	0a9b      	lsrs	r3, r3, #10
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	4903      	ldr	r1, [pc, #12]	; (8005720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005712:	5ccb      	ldrb	r3, [r1, r3]
 8005714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005718:	4618      	mov	r0, r3
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40023800 	.word	0x40023800
 8005720:	0800d034 	.word	0x0800d034

08005724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005728:	f7ff ffdc 	bl	80056e4 <HAL_RCC_GetHCLKFreq>
 800572c:	4602      	mov	r2, r0
 800572e:	4b05      	ldr	r3, [pc, #20]	; (8005744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	0b5b      	lsrs	r3, r3, #13
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	4903      	ldr	r1, [pc, #12]	; (8005748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800573a:	5ccb      	ldrb	r3, [r1, r3]
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40023800 	.word	0x40023800
 8005748:	0800d034 	.word	0x0800d034

0800574c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d012      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005774:	4b69      	ldr	r3, [pc, #420]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a68      	ldr	r2, [pc, #416]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800577e:	6093      	str	r3, [r2, #8]
 8005780:	4b66      	ldr	r3, [pc, #408]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005788:	4964      	ldr	r1, [pc, #400]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578a:	4313      	orrs	r3, r2
 800578c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005796:	2301      	movs	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d017      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057a6:	4b5d      	ldr	r3, [pc, #372]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	4959      	ldr	r1, [pc, #356]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c4:	d101      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80057c6:	2301      	movs	r3, #1
 80057c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80057d2:	2301      	movs	r3, #1
 80057d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d017      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057e2:	4b4e      	ldr	r3, [pc, #312]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	494a      	ldr	r1, [pc, #296]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005800:	d101      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005802:	2301      	movs	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800580e:	2301      	movs	r3, #1
 8005810:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800581e:	2301      	movs	r3, #1
 8005820:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 808b 	beq.w	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005830:	4b3a      	ldr	r3, [pc, #232]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	4a39      	ldr	r2, [pc, #228]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800583a:	6413      	str	r3, [r2, #64]	; 0x40
 800583c:	4b37      	ldr	r3, [pc, #220]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005848:	4b35      	ldr	r3, [pc, #212]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a34      	ldr	r2, [pc, #208]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800584e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005854:	f7fd fbbe 	bl	8002fd4 <HAL_GetTick>
 8005858:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800585a:	e008      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800585c:	f7fd fbba 	bl	8002fd4 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b64      	cmp	r3, #100	; 0x64
 8005868:	d901      	bls.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e357      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800586e:	4b2c      	ldr	r3, [pc, #176]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f0      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800587a:	4b28      	ldr	r3, [pc, #160]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005882:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d035      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	429a      	cmp	r2, r3
 8005896:	d02e      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005898:	4b20      	ldr	r3, [pc, #128]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058a2:	4b1e      	ldr	r3, [pc, #120]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a6:	4a1d      	ldr	r2, [pc, #116]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058ae:	4b1b      	ldr	r3, [pc, #108]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	4a1a      	ldr	r2, [pc, #104]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80058ba:	4a18      	ldr	r2, [pc, #96]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d114      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058cc:	f7fd fb82 	bl	8002fd4 <HAL_GetTick>
 80058d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d2:	e00a      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058d4:	f7fd fb7e 	bl	8002fd4 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e319      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ea:	4b0c      	ldr	r3, [pc, #48]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0ee      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005902:	d111      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005910:	4b04      	ldr	r3, [pc, #16]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005912:	400b      	ands	r3, r1
 8005914:	4901      	ldr	r1, [pc, #4]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]
 800591a:	e00b      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800591c:	40023800 	.word	0x40023800
 8005920:	40007000 	.word	0x40007000
 8005924:	0ffffcff 	.word	0x0ffffcff
 8005928:	4baa      	ldr	r3, [pc, #680]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4aa9      	ldr	r2, [pc, #676]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800592e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005932:	6093      	str	r3, [r2, #8]
 8005934:	4ba7      	ldr	r3, [pc, #668]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005936:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005940:	49a4      	ldr	r1, [pc, #656]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005942:	4313      	orrs	r3, r2
 8005944:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	d010      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005952:	4ba0      	ldr	r3, [pc, #640]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005958:	4a9e      	ldr	r2, [pc, #632]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800595a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800595e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005962:	4b9c      	ldr	r3, [pc, #624]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005964:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	4999      	ldr	r1, [pc, #612]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005980:	4b94      	ldr	r3, [pc, #592]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005986:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800598e:	4991      	ldr	r1, [pc, #580]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059a2:	4b8c      	ldr	r3, [pc, #560]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059b0:	4988      	ldr	r1, [pc, #544]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059c4:	4b83      	ldr	r3, [pc, #524]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d2:	4980      	ldr	r1, [pc, #512]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059e6:	4b7b      	ldr	r3, [pc, #492]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f4:	4977      	ldr	r1, [pc, #476]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a08:	4b72      	ldr	r3, [pc, #456]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0e:	f023 0203 	bic.w	r2, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	496f      	ldr	r1, [pc, #444]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a2a:	4b6a      	ldr	r3, [pc, #424]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a30:	f023 020c 	bic.w	r2, r3, #12
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a38:	4966      	ldr	r1, [pc, #408]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a4c:	4b61      	ldr	r3, [pc, #388]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5a:	495e      	ldr	r1, [pc, #376]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a6e:	4b59      	ldr	r3, [pc, #356]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7c:	4955      	ldr	r1, [pc, #340]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a90:	4b50      	ldr	r3, [pc, #320]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9e:	494d      	ldr	r1, [pc, #308]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005ab2:	4b48      	ldr	r3, [pc, #288]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac0:	4944      	ldr	r1, [pc, #272]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ad4:	4b3f      	ldr	r3, [pc, #252]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae2:	493c      	ldr	r1, [pc, #240]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005af6:	4b37      	ldr	r3, [pc, #220]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b04:	4933      	ldr	r1, [pc, #204]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00a      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b18:	4b2e      	ldr	r3, [pc, #184]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b26:	492b      	ldr	r1, [pc, #172]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d011      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b3a:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b48:	4922      	ldr	r1, [pc, #136]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b58:	d101      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b7a:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b88:	4912      	ldr	r1, [pc, #72]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00b      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bac:	4909      	ldr	r1, [pc, #36]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d006      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 80d9 	beq.w	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bc8:	4b02      	ldr	r3, [pc, #8]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a01      	ldr	r2, [pc, #4]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bd2:	e001      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bda:	f7fd f9fb 	bl	8002fd4 <HAL_GetTick>
 8005bde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005be2:	f7fd f9f7 	bl	8002fd4 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b64      	cmp	r3, #100	; 0x64
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e194      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bf4:	4b6c      	ldr	r3, [pc, #432]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1f0      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d021      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11d      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c14:	4b64      	ldr	r3, [pc, #400]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c1a:	0c1b      	lsrs	r3, r3, #16
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c22:	4b61      	ldr	r3, [pc, #388]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c28:	0e1b      	lsrs	r3, r3, #24
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	019a      	lsls	r2, r3, #6
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	041b      	lsls	r3, r3, #16
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	061b      	lsls	r3, r3, #24
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	071b      	lsls	r3, r3, #28
 8005c48:	4957      	ldr	r1, [pc, #348]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c64:	d00a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d02e      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c7a:	d129      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c7c:	4b4a      	ldr	r3, [pc, #296]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c82:	0c1b      	lsrs	r3, r3, #16
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c8a:	4b47      	ldr	r3, [pc, #284]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c90:	0f1b      	lsrs	r3, r3, #28
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	019a      	lsls	r2, r3, #6
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	041b      	lsls	r3, r3, #16
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	061b      	lsls	r3, r3, #24
 8005caa:	431a      	orrs	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	071b      	lsls	r3, r3, #28
 8005cb0:	493d      	ldr	r1, [pc, #244]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005cb8:	4b3b      	ldr	r3, [pc, #236]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cbe:	f023 021f 	bic.w	r2, r3, #31
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	4937      	ldr	r1, [pc, #220]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01d      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cdc:	4b32      	ldr	r3, [pc, #200]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ce2:	0e1b      	lsrs	r3, r3, #24
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cea:	4b2f      	ldr	r3, [pc, #188]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf0:	0f1b      	lsrs	r3, r3, #28
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	019a      	lsls	r2, r3, #6
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	431a      	orrs	r2, r3
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	061b      	lsls	r3, r3, #24
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	071b      	lsls	r3, r3, #28
 8005d10:	4925      	ldr	r1, [pc, #148]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d011      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	019a      	lsls	r2, r3, #6
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	061b      	lsls	r3, r3, #24
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	071b      	lsls	r3, r3, #28
 8005d40:	4919      	ldr	r1, [pc, #100]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d48:	4b17      	ldr	r3, [pc, #92]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a16      	ldr	r2, [pc, #88]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d54:	f7fd f93e 	bl	8002fd4 <HAL_GetTick>
 8005d58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d5c:	f7fd f93a 	bl	8002fd4 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b64      	cmp	r3, #100	; 0x64
 8005d68:	d901      	bls.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e0d7      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d6e:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0f0      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	f040 80cd 	bne.w	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a08      	ldr	r2, [pc, #32]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8e:	f7fd f921 	bl	8002fd4 <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d94:	e00a      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d96:	f7fd f91d 	bl	8002fd4 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b64      	cmp	r3, #100	; 0x64
 8005da2:	d903      	bls.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e0ba      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005da8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dac:	4b5e      	ldr	r3, [pc, #376]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db8:	d0ed      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d02e      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d12a      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005de2:	4b51      	ldr	r3, [pc, #324]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de8:	0c1b      	lsrs	r3, r3, #16
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005df0:	4b4d      	ldr	r3, [pc, #308]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	0f1b      	lsrs	r3, r3, #28
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	019a      	lsls	r2, r3, #6
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	041b      	lsls	r3, r3, #16
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	061b      	lsls	r3, r3, #24
 8005e10:	431a      	orrs	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	071b      	lsls	r3, r3, #28
 8005e16:	4944      	ldr	r1, [pc, #272]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e1e:	4b42      	ldr	r3, [pc, #264]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	493d      	ldr	r1, [pc, #244]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d022      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e4c:	d11d      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e4e:	4b36      	ldr	r3, [pc, #216]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e54:	0e1b      	lsrs	r3, r3, #24
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e5c:	4b32      	ldr	r3, [pc, #200]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e62:	0f1b      	lsrs	r3, r3, #28
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	019a      	lsls	r2, r3, #6
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	431a      	orrs	r2, r3
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	061b      	lsls	r3, r3, #24
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	071b      	lsls	r3, r3, #28
 8005e82:	4929      	ldr	r1, [pc, #164]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d028      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e96:	4b24      	ldr	r3, [pc, #144]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9c:	0e1b      	lsrs	r3, r3, #24
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ea4:	4b20      	ldr	r3, [pc, #128]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eaa:	0c1b      	lsrs	r3, r3, #16
 8005eac:	f003 0303 	and.w	r3, r3, #3
 8005eb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	019a      	lsls	r2, r3, #6
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	041b      	lsls	r3, r3, #16
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	061b      	lsls	r3, r3, #24
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	071b      	lsls	r3, r3, #28
 8005eca:	4917      	ldr	r1, [pc, #92]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ed2:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ed8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	4911      	ldr	r1, [pc, #68]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ee8:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a0e      	ldr	r2, [pc, #56]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ef4:	f7fd f86e 	bl	8002fd4 <HAL_GetTick>
 8005ef8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005efc:	f7fd f86a 	bl	8002fd4 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b64      	cmp	r3, #100	; 0x64
 8005f08:	d901      	bls.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e007      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f0e:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f1a:	d1ef      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40023800 	.word	0x40023800

08005f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e049      	b.n	8005fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fc fe7c 	bl	8002c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f000 fd26 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d001      	beq.n	8005ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e054      	b.n	800609e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0201 	orr.w	r2, r2, #1
 800600a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a26      	ldr	r2, [pc, #152]	; (80060ac <HAL_TIM_Base_Start_IT+0xd0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d022      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x80>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601e:	d01d      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x80>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a22      	ldr	r2, [pc, #136]	; (80060b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d018      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x80>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a21      	ldr	r2, [pc, #132]	; (80060b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d013      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x80>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1f      	ldr	r2, [pc, #124]	; (80060b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00e      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x80>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1e      	ldr	r2, [pc, #120]	; (80060bc <HAL_TIM_Base_Start_IT+0xe0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d009      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x80>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x80>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1b      	ldr	r2, [pc, #108]	; (80060c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d115      	bne.n	8006088 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <HAL_TIM_Base_Start_IT+0xec>)
 8006064:	4013      	ands	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b06      	cmp	r3, #6
 800606c:	d015      	beq.n	800609a <HAL_TIM_Base_Start_IT+0xbe>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006074:	d011      	beq.n	800609a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0201 	orr.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006086:	e008      	b.n	800609a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0201 	orr.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	e000      	b.n	800609c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40010000 	.word	0x40010000
 80060b0:	40000400 	.word	0x40000400
 80060b4:	40000800 	.word	0x40000800
 80060b8:	40000c00 	.word	0x40000c00
 80060bc:	40010400 	.word	0x40010400
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40001800 	.word	0x40001800
 80060c8:	00010007 	.word	0x00010007

080060cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e049      	b.n	8006172 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fc fd8c 	bl	8002c10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3304      	adds	r3, #4
 8006108:	4619      	mov	r1, r3
 800610a:	4610      	mov	r0, r2
 800610c:	f000 fc56 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <HAL_TIM_PWM_Start+0x24>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e03c      	b.n	800621a <HAL_TIM_PWM_Start+0x9e>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d109      	bne.n	80061ba <HAL_TIM_PWM_Start+0x3e>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	bf14      	ite	ne
 80061b2:	2301      	movne	r3, #1
 80061b4:	2300      	moveq	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	e02f      	b.n	800621a <HAL_TIM_PWM_Start+0x9e>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d109      	bne.n	80061d4 <HAL_TIM_PWM_Start+0x58>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e022      	b.n	800621a <HAL_TIM_PWM_Start+0x9e>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b0c      	cmp	r3, #12
 80061d8:	d109      	bne.n	80061ee <HAL_TIM_PWM_Start+0x72>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	bf14      	ite	ne
 80061e6:	2301      	movne	r3, #1
 80061e8:	2300      	moveq	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	e015      	b.n	800621a <HAL_TIM_PWM_Start+0x9e>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d109      	bne.n	8006208 <HAL_TIM_PWM_Start+0x8c>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	bf14      	ite	ne
 8006200:	2301      	movne	r3, #1
 8006202:	2300      	moveq	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	e008      	b.n	800621a <HAL_TIM_PWM_Start+0x9e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	bf14      	ite	ne
 8006214:	2301      	movne	r3, #1
 8006216:	2300      	moveq	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e092      	b.n	8006348 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d104      	bne.n	8006232 <HAL_TIM_PWM_Start+0xb6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006230:	e023      	b.n	800627a <HAL_TIM_PWM_Start+0xfe>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b04      	cmp	r3, #4
 8006236:	d104      	bne.n	8006242 <HAL_TIM_PWM_Start+0xc6>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006240:	e01b      	b.n	800627a <HAL_TIM_PWM_Start+0xfe>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d104      	bne.n	8006252 <HAL_TIM_PWM_Start+0xd6>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006250:	e013      	b.n	800627a <HAL_TIM_PWM_Start+0xfe>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b0c      	cmp	r3, #12
 8006256:	d104      	bne.n	8006262 <HAL_TIM_PWM_Start+0xe6>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006260:	e00b      	b.n	800627a <HAL_TIM_PWM_Start+0xfe>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b10      	cmp	r3, #16
 8006266:	d104      	bne.n	8006272 <HAL_TIM_PWM_Start+0xf6>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006270:	e003      	b.n	800627a <HAL_TIM_PWM_Start+0xfe>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2201      	movs	r2, #1
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 ff32 	bl	80070ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a30      	ldr	r2, [pc, #192]	; (8006350 <HAL_TIM_PWM_Start+0x1d4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <HAL_TIM_PWM_Start+0x120>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a2f      	ldr	r2, [pc, #188]	; (8006354 <HAL_TIM_PWM_Start+0x1d8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d101      	bne.n	80062a0 <HAL_TIM_PWM_Start+0x124>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <HAL_TIM_PWM_Start+0x126>
 80062a0:	2300      	movs	r3, #0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a25      	ldr	r2, [pc, #148]	; (8006350 <HAL_TIM_PWM_Start+0x1d4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_TIM_PWM_Start+0x18a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c8:	d01d      	beq.n	8006306 <HAL_TIM_PWM_Start+0x18a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a22      	ldr	r2, [pc, #136]	; (8006358 <HAL_TIM_PWM_Start+0x1dc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_TIM_PWM_Start+0x18a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a20      	ldr	r2, [pc, #128]	; (800635c <HAL_TIM_PWM_Start+0x1e0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_TIM_PWM_Start+0x18a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1f      	ldr	r2, [pc, #124]	; (8006360 <HAL_TIM_PWM_Start+0x1e4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_TIM_PWM_Start+0x18a>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a19      	ldr	r2, [pc, #100]	; (8006354 <HAL_TIM_PWM_Start+0x1d8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_TIM_PWM_Start+0x18a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1b      	ldr	r2, [pc, #108]	; (8006364 <HAL_TIM_PWM_Start+0x1e8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_TIM_PWM_Start+0x18a>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a19      	ldr	r2, [pc, #100]	; (8006368 <HAL_TIM_PWM_Start+0x1ec>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d115      	bne.n	8006332 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	4b17      	ldr	r3, [pc, #92]	; (800636c <HAL_TIM_PWM_Start+0x1f0>)
 800630e:	4013      	ands	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b06      	cmp	r3, #6
 8006316:	d015      	beq.n	8006344 <HAL_TIM_PWM_Start+0x1c8>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631e:	d011      	beq.n	8006344 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006330:	e008      	b.n	8006344 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e000      	b.n	8006346 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006344:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40010000 	.word	0x40010000
 8006354:	40010400 	.word	0x40010400
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	40000c00 	.word	0x40000c00
 8006364:	40014000 	.word	0x40014000
 8006368:	40001800 	.word	0x40001800
 800636c:	00010007 	.word	0x00010007

08006370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b02      	cmp	r3, #2
 8006384:	d122      	bne.n	80063cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b02      	cmp	r3, #2
 8006392:	d11b      	bne.n	80063cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0202 	mvn.w	r2, #2
 800639c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fae4 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fad6 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fae7 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d122      	bne.n	8006420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d11b      	bne.n	8006420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0204 	mvn.w	r2, #4
 80063f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2202      	movs	r2, #2
 80063f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 faba 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 800640c:	e005      	b.n	800641a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 faac 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fabd 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b08      	cmp	r3, #8
 800642c:	d122      	bne.n	8006474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b08      	cmp	r3, #8
 800643a:	d11b      	bne.n	8006474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0208 	mvn.w	r2, #8
 8006444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2204      	movs	r2, #4
 800644a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa90 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 8006460:	e005      	b.n	800646e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa82 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fa93 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0310 	and.w	r3, r3, #16
 800647e:	2b10      	cmp	r3, #16
 8006480:	d122      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b10      	cmp	r3, #16
 800648e:	d11b      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0210 	mvn.w	r2, #16
 8006498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2208      	movs	r2, #8
 800649e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fa66 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 80064b4:	e005      	b.n	80064c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa58 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fa69 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d10e      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d107      	bne.n	80064f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0201 	mvn.w	r2, #1
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fb fece 	bl	8002290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d10e      	bne.n	8006520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650c:	2b80      	cmp	r3, #128	; 0x80
 800650e:	d107      	bne.n	8006520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 ff22 	bl	8007364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652e:	d10e      	bne.n	800654e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	d107      	bne.n	800654e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 ff15 	bl	8007378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	d10e      	bne.n	800657a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b40      	cmp	r3, #64	; 0x40
 8006568:	d107      	bne.n	800657a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fa17 	bl	80069a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b20      	cmp	r3, #32
 8006586:	d10e      	bne.n	80065a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b20      	cmp	r3, #32
 8006594:	d107      	bne.n	80065a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f06f 0220 	mvn.w	r2, #32
 800659e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fed5 	bl	8007350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e0ff      	b.n	80067ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b14      	cmp	r3, #20
 80065da:	f200 80f0 	bhi.w	80067be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006639 	.word	0x08006639
 80065e8:	080067bf 	.word	0x080067bf
 80065ec:	080067bf 	.word	0x080067bf
 80065f0:	080067bf 	.word	0x080067bf
 80065f4:	08006679 	.word	0x08006679
 80065f8:	080067bf 	.word	0x080067bf
 80065fc:	080067bf 	.word	0x080067bf
 8006600:	080067bf 	.word	0x080067bf
 8006604:	080066bb 	.word	0x080066bb
 8006608:	080067bf 	.word	0x080067bf
 800660c:	080067bf 	.word	0x080067bf
 8006610:	080067bf 	.word	0x080067bf
 8006614:	080066fb 	.word	0x080066fb
 8006618:	080067bf 	.word	0x080067bf
 800661c:	080067bf 	.word	0x080067bf
 8006620:	080067bf 	.word	0x080067bf
 8006624:	0800673d 	.word	0x0800673d
 8006628:	080067bf 	.word	0x080067bf
 800662c:	080067bf 	.word	0x080067bf
 8006630:	080067bf 	.word	0x080067bf
 8006634:	0800677d 	.word	0x0800677d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fa5c 	bl	8006afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0208 	orr.w	r2, r2, #8
 8006652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0204 	bic.w	r2, r2, #4
 8006662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6999      	ldr	r1, [r3, #24]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	619a      	str	r2, [r3, #24]
      break;
 8006676:	e0a5      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 faae 	bl	8006be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6999      	ldr	r1, [r3, #24]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	021a      	lsls	r2, r3, #8
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	619a      	str	r2, [r3, #24]
      break;
 80066b8:	e084      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fb05 	bl	8006cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0208 	orr.w	r2, r2, #8
 80066d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0204 	bic.w	r2, r2, #4
 80066e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69d9      	ldr	r1, [r3, #28]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	61da      	str	r2, [r3, #28]
      break;
 80066f8:	e064      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68b9      	ldr	r1, [r7, #8]
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fb5b 	bl	8006dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69da      	ldr	r2, [r3, #28]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69d9      	ldr	r1, [r3, #28]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	021a      	lsls	r2, r3, #8
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	61da      	str	r2, [r3, #28]
      break;
 800673a:	e043      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fb92 	bl	8006e6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0208 	orr.w	r2, r2, #8
 8006756:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0204 	bic.w	r2, r2, #4
 8006766:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800677a:	e023      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fbc4 	bl	8006f10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006796:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	021a      	lsls	r2, r3, #8
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067bc:	e002      	b.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	75fb      	strb	r3, [r7, #23]
      break;
 80067c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop

080067d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_TIM_ConfigClockSource+0x1c>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e0b4      	b.n	800695e <HAL_TIM_ConfigClockSource+0x186>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	4b56      	ldr	r3, [pc, #344]	; (8006968 <HAL_TIM_ConfigClockSource+0x190>)
 8006810:	4013      	ands	r3, r2
 8006812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800681a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682c:	d03e      	beq.n	80068ac <HAL_TIM_ConfigClockSource+0xd4>
 800682e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006832:	f200 8087 	bhi.w	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683a:	f000 8086 	beq.w	800694a <HAL_TIM_ConfigClockSource+0x172>
 800683e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006842:	d87f      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006844:	2b70      	cmp	r3, #112	; 0x70
 8006846:	d01a      	beq.n	800687e <HAL_TIM_ConfigClockSource+0xa6>
 8006848:	2b70      	cmp	r3, #112	; 0x70
 800684a:	d87b      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800684c:	2b60      	cmp	r3, #96	; 0x60
 800684e:	d050      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x11a>
 8006850:	2b60      	cmp	r3, #96	; 0x60
 8006852:	d877      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006854:	2b50      	cmp	r3, #80	; 0x50
 8006856:	d03c      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0xfa>
 8006858:	2b50      	cmp	r3, #80	; 0x50
 800685a:	d873      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	d058      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x13a>
 8006860:	2b40      	cmp	r3, #64	; 0x40
 8006862:	d86f      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006864:	2b30      	cmp	r3, #48	; 0x30
 8006866:	d064      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006868:	2b30      	cmp	r3, #48	; 0x30
 800686a:	d86b      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800686c:	2b20      	cmp	r3, #32
 800686e:	d060      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006870:	2b20      	cmp	r3, #32
 8006872:	d867      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d05c      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006878:	2b10      	cmp	r3, #16
 800687a:	d05a      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 800687c:	e062      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	6899      	ldr	r1, [r3, #8]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f000 fc0d 	bl	80070ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	609a      	str	r2, [r3, #8]
      break;
 80068aa:	e04f      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	6899      	ldr	r1, [r3, #8]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f000 fbf6 	bl	80070ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ce:	609a      	str	r2, [r3, #8]
      break;
 80068d0:	e03c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	461a      	mov	r2, r3
 80068e0:	f000 fb6a 	bl	8006fb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2150      	movs	r1, #80	; 0x50
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fbc3 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 80068f0:	e02c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6859      	ldr	r1, [r3, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	461a      	mov	r2, r3
 8006900:	f000 fb89 	bl	8007016 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2160      	movs	r1, #96	; 0x60
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fbb3 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006910:	e01c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6859      	ldr	r1, [r3, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	461a      	mov	r2, r3
 8006920:	f000 fb4a 	bl	8006fb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2140      	movs	r1, #64	; 0x40
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fba3 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006930:	e00c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f000 fb9a 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006942:	e003      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	e000      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800694a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	fffeff88 	.word	0xfffeff88

0800696c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a40      	ldr	r2, [pc, #256]	; (8006ad0 <TIM_Base_SetConfig+0x114>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d013      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069da:	d00f      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a3d      	ldr	r2, [pc, #244]	; (8006ad4 <TIM_Base_SetConfig+0x118>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00b      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a3c      	ldr	r2, [pc, #240]	; (8006ad8 <TIM_Base_SetConfig+0x11c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a3b      	ldr	r2, [pc, #236]	; (8006adc <TIM_Base_SetConfig+0x120>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a3a      	ldr	r2, [pc, #232]	; (8006ae0 <TIM_Base_SetConfig+0x124>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d108      	bne.n	8006a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a2f      	ldr	r2, [pc, #188]	; (8006ad0 <TIM_Base_SetConfig+0x114>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d02b      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1c:	d027      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a2c      	ldr	r2, [pc, #176]	; (8006ad4 <TIM_Base_SetConfig+0x118>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d023      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2b      	ldr	r2, [pc, #172]	; (8006ad8 <TIM_Base_SetConfig+0x11c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01f      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2a      	ldr	r2, [pc, #168]	; (8006adc <TIM_Base_SetConfig+0x120>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d01b      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a29      	ldr	r2, [pc, #164]	; (8006ae0 <TIM_Base_SetConfig+0x124>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d017      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a28      	ldr	r2, [pc, #160]	; (8006ae4 <TIM_Base_SetConfig+0x128>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a27      	ldr	r2, [pc, #156]	; (8006ae8 <TIM_Base_SetConfig+0x12c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00f      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a26      	ldr	r2, [pc, #152]	; (8006aec <TIM_Base_SetConfig+0x130>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00b      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a25      	ldr	r2, [pc, #148]	; (8006af0 <TIM_Base_SetConfig+0x134>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d007      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a24      	ldr	r2, [pc, #144]	; (8006af4 <TIM_Base_SetConfig+0x138>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d003      	beq.n	8006a6e <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a23      	ldr	r2, [pc, #140]	; (8006af8 <TIM_Base_SetConfig+0x13c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d108      	bne.n	8006a80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a0a      	ldr	r2, [pc, #40]	; (8006ad0 <TIM_Base_SetConfig+0x114>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_Base_SetConfig+0xf8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a0c      	ldr	r2, [pc, #48]	; (8006ae0 <TIM_Base_SetConfig+0x124>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d103      	bne.n	8006abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	615a      	str	r2, [r3, #20]
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40010000 	.word	0x40010000
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	40000c00 	.word	0x40000c00
 8006ae0:	40010400 	.word	0x40010400
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	40014400 	.word	0x40014400
 8006aec:	40014800 	.word	0x40014800
 8006af0:	40001800 	.word	0x40001800
 8006af4:	40001c00 	.word	0x40001c00
 8006af8:	40002000 	.word	0x40002000

08006afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f023 0201 	bic.w	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4b2b      	ldr	r3, [pc, #172]	; (8006bd4 <TIM_OC1_SetConfig+0xd8>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0303 	bic.w	r3, r3, #3
 8006b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 0302 	bic.w	r3, r3, #2
 8006b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <TIM_OC1_SetConfig+0xdc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d003      	beq.n	8006b60 <TIM_OC1_SetConfig+0x64>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a20      	ldr	r2, [pc, #128]	; (8006bdc <TIM_OC1_SetConfig+0xe0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d10c      	bne.n	8006b7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f023 0308 	bic.w	r3, r3, #8
 8006b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f023 0304 	bic.w	r3, r3, #4
 8006b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a16      	ldr	r2, [pc, #88]	; (8006bd8 <TIM_OC1_SetConfig+0xdc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_OC1_SetConfig+0x8e>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a15      	ldr	r2, [pc, #84]	; (8006bdc <TIM_OC1_SetConfig+0xe0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d111      	bne.n	8006bae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	621a      	str	r2, [r3, #32]
}
 8006bc8:	bf00      	nop
 8006bca:	371c      	adds	r7, #28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	fffeff8f 	.word	0xfffeff8f
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40010400 	.word	0x40010400

08006be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	f023 0210 	bic.w	r2, r3, #16
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4b2e      	ldr	r3, [pc, #184]	; (8006cc4 <TIM_OC2_SetConfig+0xe4>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0320 	bic.w	r3, r3, #32
 8006c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a23      	ldr	r2, [pc, #140]	; (8006cc8 <TIM_OC2_SetConfig+0xe8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d003      	beq.n	8006c48 <TIM_OC2_SetConfig+0x68>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a22      	ldr	r2, [pc, #136]	; (8006ccc <TIM_OC2_SetConfig+0xec>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d10d      	bne.n	8006c64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a18      	ldr	r2, [pc, #96]	; (8006cc8 <TIM_OC2_SetConfig+0xe8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d003      	beq.n	8006c74 <TIM_OC2_SetConfig+0x94>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a17      	ldr	r2, [pc, #92]	; (8006ccc <TIM_OC2_SetConfig+0xec>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d113      	bne.n	8006c9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	feff8fff 	.word	0xfeff8fff
 8006cc8:	40010000 	.word	0x40010000
 8006ccc:	40010400 	.word	0x40010400

08006cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4b2d      	ldr	r3, [pc, #180]	; (8006db0 <TIM_OC3_SetConfig+0xe0>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a22      	ldr	r2, [pc, #136]	; (8006db4 <TIM_OC3_SetConfig+0xe4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d003      	beq.n	8006d36 <TIM_OC3_SetConfig+0x66>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a21      	ldr	r2, [pc, #132]	; (8006db8 <TIM_OC3_SetConfig+0xe8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d10d      	bne.n	8006d52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a17      	ldr	r2, [pc, #92]	; (8006db4 <TIM_OC3_SetConfig+0xe4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d003      	beq.n	8006d62 <TIM_OC3_SetConfig+0x92>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a16      	ldr	r2, [pc, #88]	; (8006db8 <TIM_OC3_SetConfig+0xe8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d113      	bne.n	8006d8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	fffeff8f 	.word	0xfffeff8f
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40010400 	.word	0x40010400

08006dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4b1e      	ldr	r3, [pc, #120]	; (8006e60 <TIM_OC4_SetConfig+0xa4>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	021b      	lsls	r3, r3, #8
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	031b      	lsls	r3, r3, #12
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a13      	ldr	r2, [pc, #76]	; (8006e64 <TIM_OC4_SetConfig+0xa8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_OC4_SetConfig+0x68>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a12      	ldr	r2, [pc, #72]	; (8006e68 <TIM_OC4_SetConfig+0xac>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d109      	bne.n	8006e38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	019b      	lsls	r3, r3, #6
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	feff8fff 	.word	0xfeff8fff
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40010400 	.word	0x40010400

08006e6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4b1b      	ldr	r3, [pc, #108]	; (8006f04 <TIM_OC5_SetConfig+0x98>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006eac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	041b      	lsls	r3, r3, #16
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a12      	ldr	r2, [pc, #72]	; (8006f08 <TIM_OC5_SetConfig+0x9c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_OC5_SetConfig+0x5e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a11      	ldr	r2, [pc, #68]	; (8006f0c <TIM_OC5_SetConfig+0xa0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d109      	bne.n	8006ede <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	621a      	str	r2, [r3, #32]
}
 8006ef8:	bf00      	nop
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	fffeff8f 	.word	0xfffeff8f
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	40010400 	.word	0x40010400

08006f10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4b1c      	ldr	r3, [pc, #112]	; (8006fac <TIM_OC6_SetConfig+0x9c>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	021b      	lsls	r3, r3, #8
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	051b      	lsls	r3, r3, #20
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <TIM_OC6_SetConfig+0xa0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC6_SetConfig+0x60>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a12      	ldr	r2, [pc, #72]	; (8006fb4 <TIM_OC6_SetConfig+0xa4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d109      	bne.n	8006f84 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	029b      	lsls	r3, r3, #10
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	621a      	str	r2, [r3, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	feff8fff 	.word	0xfeff8fff
 8006fb0:	40010000 	.word	0x40010000
 8006fb4:	40010400 	.word	0x40010400

08006fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f023 0201 	bic.w	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f023 030a 	bic.w	r3, r3, #10
 8006ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	621a      	str	r2, [r3, #32]
}
 800700a:	bf00      	nop
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007016:	b480      	push	{r7}
 8007018:	b087      	sub	sp, #28
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f023 0210 	bic.w	r2, r3, #16
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007040:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	031b      	lsls	r3, r3, #12
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007052:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	f043 0307 	orr.w	r3, r3, #7
 8007098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	021a      	lsls	r2, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 031f 	and.w	r3, r3, #31
 80070fe:	2201      	movs	r2, #1
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1a      	ldr	r2, [r3, #32]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	43db      	mvns	r3, r3
 800710e:	401a      	ands	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a1a      	ldr	r2, [r3, #32]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f003 031f 	and.w	r3, r3, #31
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	fa01 f303 	lsl.w	r3, r1, r3
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800714c:	2302      	movs	r3, #2
 800714e:	e06d      	b.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a30      	ldr	r2, [pc, #192]	; (8007238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a2f      	ldr	r2, [pc, #188]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d108      	bne.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800718a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a20      	ldr	r2, [pc, #128]	; (8007238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d022      	beq.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c2:	d01d      	beq.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d018      	beq.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1c      	ldr	r2, [pc, #112]	; (8007244 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d013      	beq.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a1a      	ldr	r2, [pc, #104]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00e      	beq.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a15      	ldr	r2, [pc, #84]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d009      	beq.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a16      	ldr	r2, [pc, #88]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d004      	beq.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a15      	ldr	r2, [pc, #84]	; (8007250 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d10c      	bne.n	800721a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007206:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	4313      	orrs	r3, r2
 8007210:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	40010000 	.word	0x40010000
 800723c:	40010400 	.word	0x40010400
 8007240:	40000400 	.word	0x40000400
 8007244:	40000800 	.word	0x40000800
 8007248:	40000c00 	.word	0x40000c00
 800724c:	40014000 	.word	0x40014000
 8007250:	40001800 	.word	0x40001800

08007254 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800726c:	2302      	movs	r3, #2
 800726e:	e065      	b.n	800733c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	041b      	lsls	r3, r3, #16
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a16      	ldr	r2, [pc, #88]	; (8007348 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d004      	beq.n	80072fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a14      	ldr	r2, [pc, #80]	; (800734c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d115      	bne.n	800732a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	051b      	lsls	r3, r3, #20
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	4313      	orrs	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	40010000 	.word	0x40010000
 800734c:	40010400 	.word	0x40010400

08007350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e040      	b.n	8007420 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7fb fd2e 	bl	8002e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2224      	movs	r2, #36	; 0x24
 80073b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0201 	bic.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fbe6 	bl	8007b9c <UART_SetConfig>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d101      	bne.n	80073da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e022      	b.n	8007420 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fe3e 	bl	8008064 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0201 	orr.w	r2, r2, #1
 8007416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fec5 	bl	80081a8 <UART_CheckIdleState>
 800741e:	4603      	mov	r3, r0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08a      	sub	sp, #40	; 0x28
 800742c:	af02      	add	r7, sp, #8
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	4613      	mov	r3, r2
 8007436:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743c:	2b20      	cmp	r3, #32
 800743e:	d171      	bne.n	8007524 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <HAL_UART_Transmit+0x24>
 8007446:	88fb      	ldrh	r3, [r7, #6]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e06a      	b.n	8007526 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2221      	movs	r2, #33	; 0x21
 800745c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800745e:	f7fb fdb9 	bl	8002fd4 <HAL_GetTick>
 8007462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	88fa      	ldrh	r2, [r7, #6]
 8007468:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	88fa      	ldrh	r2, [r7, #6]
 8007470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747c:	d108      	bne.n	8007490 <HAL_UART_Transmit+0x68>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d104      	bne.n	8007490 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	61bb      	str	r3, [r7, #24]
 800748e:	e003      	b.n	8007498 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007494:	2300      	movs	r3, #0
 8007496:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007498:	e02c      	b.n	80074f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2200      	movs	r2, #0
 80074a2:	2180      	movs	r1, #128	; 0x80
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 feb6 	bl	8008216 <UART_WaitOnFlagUntilTimeout>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e038      	b.n	8007526 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10b      	bne.n	80074d2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	3302      	adds	r3, #2
 80074ce:	61bb      	str	r3, [r7, #24]
 80074d0:	e007      	b.n	80074e2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	781a      	ldrb	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	3301      	adds	r3, #1
 80074e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1cc      	bne.n	800749a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2200      	movs	r2, #0
 8007508:	2140      	movs	r1, #64	; 0x40
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fe83 	bl	8008216 <UART_WaitOnFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e005      	b.n	8007526 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2220      	movs	r2, #32
 800751e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	e000      	b.n	8007526 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007524:	2302      	movs	r3, #2
  }
}
 8007526:	4618      	mov	r0, r3
 8007528:	3720      	adds	r7, #32
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b08a      	sub	sp, #40	; 0x28
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	4613      	mov	r3, r2
 800753a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007542:	2b20      	cmp	r3, #32
 8007544:	d132      	bne.n	80075ac <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <HAL_UART_Receive_IT+0x24>
 800754c:	88fb      	ldrh	r3, [r7, #6]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e02b      	b.n	80075ae <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d018      	beq.n	800759c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	613b      	str	r3, [r7, #16]
   return(result);
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	461a      	mov	r2, r3
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	623b      	str	r3, [r7, #32]
 800758a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	69f9      	ldr	r1, [r7, #28]
 800758e:	6a3a      	ldr	r2, [r7, #32]
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	61bb      	str	r3, [r7, #24]
   return(result);
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e6      	bne.n	800756a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800759c:	88fb      	ldrh	r3, [r7, #6]
 800759e:	461a      	mov	r2, r3
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 fefe 	bl	80083a4 <UART_Start_Receive_IT>
 80075a8:	4603      	mov	r3, r0
 80075aa:	e000      	b.n	80075ae <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80075ac:	2302      	movs	r3, #2
  }
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3728      	adds	r7, #40	; 0x28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b0ba      	sub	sp, #232	; 0xe8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80075e6:	4013      	ands	r3, r2
 80075e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d115      	bne.n	8007620 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00f      	beq.n	8007620 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b00      	cmp	r3, #0
 800760a:	d009      	beq.n	8007620 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 8297 	beq.w	8007b44 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
      }
      return;
 800761e:	e291      	b.n	8007b44 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8117 	beq.w	8007858 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800762a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007636:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800763a:	4b85      	ldr	r3, [pc, #532]	; (8007850 <HAL_UART_IRQHandler+0x298>)
 800763c:	4013      	ands	r3, r2
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 810a 	beq.w	8007858 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d011      	beq.n	8007674 <HAL_UART_IRQHandler+0xbc>
 8007650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2201      	movs	r2, #1
 8007662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800766a:	f043 0201 	orr.w	r2, r3, #1
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d011      	beq.n	80076a4 <HAL_UART_IRQHandler+0xec>
 8007680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00b      	beq.n	80076a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2202      	movs	r2, #2
 8007692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800769a:	f043 0204 	orr.w	r2, r3, #4
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d011      	beq.n	80076d4 <HAL_UART_IRQHandler+0x11c>
 80076b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2204      	movs	r2, #4
 80076c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ca:	f043 0202 	orr.w	r2, r3, #2
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d8:	f003 0308 	and.w	r3, r3, #8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d017      	beq.n	8007710 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d105      	bne.n	80076f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2208      	movs	r2, #8
 80076fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007706:	f043 0208 	orr.w	r2, r3, #8
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007718:	2b00      	cmp	r3, #0
 800771a:	d012      	beq.n	8007742 <HAL_UART_IRQHandler+0x18a>
 800771c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00c      	beq.n	8007742 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007730:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007738:	f043 0220 	orr.w	r2, r3, #32
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 81fd 	beq.w	8007b48 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800774e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00d      	beq.n	8007776 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800775a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b00      	cmp	r3, #0
 8007764:	d007      	beq.n	8007776 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800777c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d005      	beq.n	800779a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800778e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007792:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04f      	beq.n	800783a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fec8 	bl	8008530 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d141      	bne.n	8007832 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3308      	adds	r3, #8
 80077d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1d9      	bne.n	80077ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d013      	beq.n	800782a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007806:	4a13      	ldr	r2, [pc, #76]	; (8007854 <HAL_UART_IRQHandler+0x29c>)
 8007808:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780e:	4618      	mov	r0, r3
 8007810:	f7fc f98b 	bl	8003b2a <HAL_DMA_Abort_IT>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d017      	beq.n	800784a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800781e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007828:	e00f      	b.n	800784a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f9a0 	bl	8007b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007830:	e00b      	b.n	800784a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f99c 	bl	8007b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007838:	e007      	b.n	800784a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f998 	bl	8007b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007848:	e17e      	b.n	8007b48 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784a:	bf00      	nop
    return;
 800784c:	e17c      	b.n	8007b48 <HAL_UART_IRQHandler+0x590>
 800784e:	bf00      	nop
 8007850:	04000120 	.word	0x04000120
 8007854:	080085f9 	.word	0x080085f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800785c:	2b01      	cmp	r3, #1
 800785e:	f040 814c 	bne.w	8007afa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007866:	f003 0310 	and.w	r3, r3, #16
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8145 	beq.w	8007afa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 813e 	beq.w	8007afa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2210      	movs	r2, #16
 8007884:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	f040 80b6 	bne.w	8007a02 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 8150 	beq.w	8007b4c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078b6:	429a      	cmp	r2, r3
 80078b8:	f080 8148 	bcs.w	8007b4c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d0:	f000 8086 	beq.w	80079e0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007902:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800790a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1da      	bne.n	80078d4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3308      	adds	r3, #8
 8007924:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800792e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007930:	f023 0301 	bic.w	r3, r3, #1
 8007934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007942:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007946:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800794a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e1      	bne.n	800791e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3308      	adds	r3, #8
 8007960:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800796a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800796c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3308      	adds	r3, #8
 800797a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800797e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007980:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007984:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800798c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e3      	bne.n	800795a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b0:	f023 0310 	bic.w	r3, r3, #16
 80079b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	461a      	mov	r2, r3
 80079be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80079c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e4      	bne.n	80079a0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fc f835 	bl	8003a4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f8c2 	bl	8007b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a00:	e0a4      	b.n	8007b4c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8096 	beq.w	8007b50 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8091 	beq.w	8007b50 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a50:	647b      	str	r3, [r7, #68]	; 0x44
 8007a52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a58:	e841 2300 	strex	r3, r2, [r1]
 8007a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e4      	bne.n	8007a2e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3308      	adds	r3, #8
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	623b      	str	r3, [r7, #32]
   return(result);
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	f023 0301 	bic.w	r3, r3, #1
 8007a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3308      	adds	r3, #8
 8007a84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a88:	633a      	str	r2, [r7, #48]	; 0x30
 8007a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e3      	bne.n	8007a64 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f023 0310 	bic.w	r3, r3, #16
 8007ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ad2:	61fb      	str	r3, [r7, #28]
 8007ad4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	69b9      	ldr	r1, [r7, #24]
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	617b      	str	r3, [r7, #20]
   return(result);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e4      	bne.n	8007ab0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2202      	movs	r2, #2
 8007aea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f846 	bl	8007b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007af8:	e02a      	b.n	8007b50 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00e      	beq.n	8007b24 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d008      	beq.n	8007b24 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d01c      	beq.n	8007b54 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
    }
    return;
 8007b22:	e017      	b.n	8007b54 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d012      	beq.n	8007b56 <HAL_UART_IRQHandler+0x59e>
 8007b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00c      	beq.n	8007b56 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fd71 	bl	8008624 <UART_EndTransmit_IT>
    return;
 8007b42:	e008      	b.n	8007b56 <HAL_UART_IRQHandler+0x59e>
      return;
 8007b44:	bf00      	nop
 8007b46:	e006      	b.n	8007b56 <HAL_UART_IRQHandler+0x59e>
    return;
 8007b48:	bf00      	nop
 8007b4a:	e004      	b.n	8007b56 <HAL_UART_IRQHandler+0x59e>
      return;
 8007b4c:	bf00      	nop
 8007b4e:	e002      	b.n	8007b56 <HAL_UART_IRQHandler+0x59e>
      return;
 8007b50:	bf00      	nop
 8007b52:	e000      	b.n	8007b56 <HAL_UART_IRQHandler+0x59e>
    return;
 8007b54:	bf00      	nop
  }

}
 8007b56:	37e8      	adds	r7, #232	; 0xe8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	4ba6      	ldr	r3, [pc, #664]	; (8007e60 <UART_SetConfig+0x2c4>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6812      	ldr	r2, [r2, #0]
 8007bce:	6979      	ldr	r1, [r7, #20]
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a94      	ldr	r2, [pc, #592]	; (8007e64 <UART_SetConfig+0x2c8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d120      	bne.n	8007c5a <UART_SetConfig+0xbe>
 8007c18:	4b93      	ldr	r3, [pc, #588]	; (8007e68 <UART_SetConfig+0x2cc>)
 8007c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1e:	f003 0303 	and.w	r3, r3, #3
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d816      	bhi.n	8007c54 <UART_SetConfig+0xb8>
 8007c26:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <UART_SetConfig+0x90>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c49 	.word	0x08007c49
 8007c34:	08007c43 	.word	0x08007c43
 8007c38:	08007c4f 	.word	0x08007c4f
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	77fb      	strb	r3, [r7, #31]
 8007c40:	e150      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007c42:	2302      	movs	r3, #2
 8007c44:	77fb      	strb	r3, [r7, #31]
 8007c46:	e14d      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	77fb      	strb	r3, [r7, #31]
 8007c4c:	e14a      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007c4e:	2308      	movs	r3, #8
 8007c50:	77fb      	strb	r3, [r7, #31]
 8007c52:	e147      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007c54:	2310      	movs	r3, #16
 8007c56:	77fb      	strb	r3, [r7, #31]
 8007c58:	e144      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a83      	ldr	r2, [pc, #524]	; (8007e6c <UART_SetConfig+0x2d0>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d132      	bne.n	8007cca <UART_SetConfig+0x12e>
 8007c64:	4b80      	ldr	r3, [pc, #512]	; (8007e68 <UART_SetConfig+0x2cc>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	f003 030c 	and.w	r3, r3, #12
 8007c6e:	2b0c      	cmp	r3, #12
 8007c70:	d828      	bhi.n	8007cc4 <UART_SetConfig+0x128>
 8007c72:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <UART_SetConfig+0xdc>)
 8007c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c78:	08007cad 	.word	0x08007cad
 8007c7c:	08007cc5 	.word	0x08007cc5
 8007c80:	08007cc5 	.word	0x08007cc5
 8007c84:	08007cc5 	.word	0x08007cc5
 8007c88:	08007cb9 	.word	0x08007cb9
 8007c8c:	08007cc5 	.word	0x08007cc5
 8007c90:	08007cc5 	.word	0x08007cc5
 8007c94:	08007cc5 	.word	0x08007cc5
 8007c98:	08007cb3 	.word	0x08007cb3
 8007c9c:	08007cc5 	.word	0x08007cc5
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007cc5 	.word	0x08007cc5
 8007ca8:	08007cbf 	.word	0x08007cbf
 8007cac:	2300      	movs	r3, #0
 8007cae:	77fb      	strb	r3, [r7, #31]
 8007cb0:	e118      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	77fb      	strb	r3, [r7, #31]
 8007cb6:	e115      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007cb8:	2304      	movs	r3, #4
 8007cba:	77fb      	strb	r3, [r7, #31]
 8007cbc:	e112      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007cbe:	2308      	movs	r3, #8
 8007cc0:	77fb      	strb	r3, [r7, #31]
 8007cc2:	e10f      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	77fb      	strb	r3, [r7, #31]
 8007cc8:	e10c      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a68      	ldr	r2, [pc, #416]	; (8007e70 <UART_SetConfig+0x2d4>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d120      	bne.n	8007d16 <UART_SetConfig+0x17a>
 8007cd4:	4b64      	ldr	r3, [pc, #400]	; (8007e68 <UART_SetConfig+0x2cc>)
 8007cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cde:	2b30      	cmp	r3, #48	; 0x30
 8007ce0:	d013      	beq.n	8007d0a <UART_SetConfig+0x16e>
 8007ce2:	2b30      	cmp	r3, #48	; 0x30
 8007ce4:	d814      	bhi.n	8007d10 <UART_SetConfig+0x174>
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	d009      	beq.n	8007cfe <UART_SetConfig+0x162>
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d810      	bhi.n	8007d10 <UART_SetConfig+0x174>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <UART_SetConfig+0x15c>
 8007cf2:	2b10      	cmp	r3, #16
 8007cf4:	d006      	beq.n	8007d04 <UART_SetConfig+0x168>
 8007cf6:	e00b      	b.n	8007d10 <UART_SetConfig+0x174>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	77fb      	strb	r3, [r7, #31]
 8007cfc:	e0f2      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	77fb      	strb	r3, [r7, #31]
 8007d02:	e0ef      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007d04:	2304      	movs	r3, #4
 8007d06:	77fb      	strb	r3, [r7, #31]
 8007d08:	e0ec      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007d0a:	2308      	movs	r3, #8
 8007d0c:	77fb      	strb	r3, [r7, #31]
 8007d0e:	e0e9      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007d10:	2310      	movs	r3, #16
 8007d12:	77fb      	strb	r3, [r7, #31]
 8007d14:	e0e6      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a56      	ldr	r2, [pc, #344]	; (8007e74 <UART_SetConfig+0x2d8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d120      	bne.n	8007d62 <UART_SetConfig+0x1c6>
 8007d20:	4b51      	ldr	r3, [pc, #324]	; (8007e68 <UART_SetConfig+0x2cc>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d2c:	d013      	beq.n	8007d56 <UART_SetConfig+0x1ba>
 8007d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d30:	d814      	bhi.n	8007d5c <UART_SetConfig+0x1c0>
 8007d32:	2b80      	cmp	r3, #128	; 0x80
 8007d34:	d009      	beq.n	8007d4a <UART_SetConfig+0x1ae>
 8007d36:	2b80      	cmp	r3, #128	; 0x80
 8007d38:	d810      	bhi.n	8007d5c <UART_SetConfig+0x1c0>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <UART_SetConfig+0x1a8>
 8007d3e:	2b40      	cmp	r3, #64	; 0x40
 8007d40:	d006      	beq.n	8007d50 <UART_SetConfig+0x1b4>
 8007d42:	e00b      	b.n	8007d5c <UART_SetConfig+0x1c0>
 8007d44:	2300      	movs	r3, #0
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e0cc      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	77fb      	strb	r3, [r7, #31]
 8007d4e:	e0c9      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007d50:	2304      	movs	r3, #4
 8007d52:	77fb      	strb	r3, [r7, #31]
 8007d54:	e0c6      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007d56:	2308      	movs	r3, #8
 8007d58:	77fb      	strb	r3, [r7, #31]
 8007d5a:	e0c3      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007d5c:	2310      	movs	r3, #16
 8007d5e:	77fb      	strb	r3, [r7, #31]
 8007d60:	e0c0      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a44      	ldr	r2, [pc, #272]	; (8007e78 <UART_SetConfig+0x2dc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d125      	bne.n	8007db8 <UART_SetConfig+0x21c>
 8007d6c:	4b3e      	ldr	r3, [pc, #248]	; (8007e68 <UART_SetConfig+0x2cc>)
 8007d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d7a:	d017      	beq.n	8007dac <UART_SetConfig+0x210>
 8007d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d80:	d817      	bhi.n	8007db2 <UART_SetConfig+0x216>
 8007d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d86:	d00b      	beq.n	8007da0 <UART_SetConfig+0x204>
 8007d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d8c:	d811      	bhi.n	8007db2 <UART_SetConfig+0x216>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <UART_SetConfig+0x1fe>
 8007d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d96:	d006      	beq.n	8007da6 <UART_SetConfig+0x20a>
 8007d98:	e00b      	b.n	8007db2 <UART_SetConfig+0x216>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	77fb      	strb	r3, [r7, #31]
 8007d9e:	e0a1      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007da0:	2302      	movs	r3, #2
 8007da2:	77fb      	strb	r3, [r7, #31]
 8007da4:	e09e      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007da6:	2304      	movs	r3, #4
 8007da8:	77fb      	strb	r3, [r7, #31]
 8007daa:	e09b      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007dac:	2308      	movs	r3, #8
 8007dae:	77fb      	strb	r3, [r7, #31]
 8007db0:	e098      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007db2:	2310      	movs	r3, #16
 8007db4:	77fb      	strb	r3, [r7, #31]
 8007db6:	e095      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a2f      	ldr	r2, [pc, #188]	; (8007e7c <UART_SetConfig+0x2e0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d125      	bne.n	8007e0e <UART_SetConfig+0x272>
 8007dc2:	4b29      	ldr	r3, [pc, #164]	; (8007e68 <UART_SetConfig+0x2cc>)
 8007dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dd0:	d017      	beq.n	8007e02 <UART_SetConfig+0x266>
 8007dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dd6:	d817      	bhi.n	8007e08 <UART_SetConfig+0x26c>
 8007dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ddc:	d00b      	beq.n	8007df6 <UART_SetConfig+0x25a>
 8007dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de2:	d811      	bhi.n	8007e08 <UART_SetConfig+0x26c>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <UART_SetConfig+0x254>
 8007de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dec:	d006      	beq.n	8007dfc <UART_SetConfig+0x260>
 8007dee:	e00b      	b.n	8007e08 <UART_SetConfig+0x26c>
 8007df0:	2301      	movs	r3, #1
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e076      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007df6:	2302      	movs	r3, #2
 8007df8:	77fb      	strb	r3, [r7, #31]
 8007dfa:	e073      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007dfc:	2304      	movs	r3, #4
 8007dfe:	77fb      	strb	r3, [r7, #31]
 8007e00:	e070      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007e02:	2308      	movs	r3, #8
 8007e04:	77fb      	strb	r3, [r7, #31]
 8007e06:	e06d      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	77fb      	strb	r3, [r7, #31]
 8007e0c:	e06a      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a1b      	ldr	r2, [pc, #108]	; (8007e80 <UART_SetConfig+0x2e4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d138      	bne.n	8007e8a <UART_SetConfig+0x2ee>
 8007e18:	4b13      	ldr	r3, [pc, #76]	; (8007e68 <UART_SetConfig+0x2cc>)
 8007e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e26:	d017      	beq.n	8007e58 <UART_SetConfig+0x2bc>
 8007e28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e2c:	d82a      	bhi.n	8007e84 <UART_SetConfig+0x2e8>
 8007e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e32:	d00b      	beq.n	8007e4c <UART_SetConfig+0x2b0>
 8007e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e38:	d824      	bhi.n	8007e84 <UART_SetConfig+0x2e8>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <UART_SetConfig+0x2aa>
 8007e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e42:	d006      	beq.n	8007e52 <UART_SetConfig+0x2b6>
 8007e44:	e01e      	b.n	8007e84 <UART_SetConfig+0x2e8>
 8007e46:	2300      	movs	r3, #0
 8007e48:	77fb      	strb	r3, [r7, #31]
 8007e4a:	e04b      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	77fb      	strb	r3, [r7, #31]
 8007e50:	e048      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007e52:	2304      	movs	r3, #4
 8007e54:	77fb      	strb	r3, [r7, #31]
 8007e56:	e045      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007e58:	2308      	movs	r3, #8
 8007e5a:	77fb      	strb	r3, [r7, #31]
 8007e5c:	e042      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007e5e:	bf00      	nop
 8007e60:	efff69f3 	.word	0xefff69f3
 8007e64:	40011000 	.word	0x40011000
 8007e68:	40023800 	.word	0x40023800
 8007e6c:	40004400 	.word	0x40004400
 8007e70:	40004800 	.word	0x40004800
 8007e74:	40004c00 	.word	0x40004c00
 8007e78:	40005000 	.word	0x40005000
 8007e7c:	40011400 	.word	0x40011400
 8007e80:	40007800 	.word	0x40007800
 8007e84:	2310      	movs	r3, #16
 8007e86:	77fb      	strb	r3, [r7, #31]
 8007e88:	e02c      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a72      	ldr	r2, [pc, #456]	; (8008058 <UART_SetConfig+0x4bc>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d125      	bne.n	8007ee0 <UART_SetConfig+0x344>
 8007e94:	4b71      	ldr	r3, [pc, #452]	; (800805c <UART_SetConfig+0x4c0>)
 8007e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ea2:	d017      	beq.n	8007ed4 <UART_SetConfig+0x338>
 8007ea4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ea8:	d817      	bhi.n	8007eda <UART_SetConfig+0x33e>
 8007eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eae:	d00b      	beq.n	8007ec8 <UART_SetConfig+0x32c>
 8007eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb4:	d811      	bhi.n	8007eda <UART_SetConfig+0x33e>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <UART_SetConfig+0x326>
 8007eba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ebe:	d006      	beq.n	8007ece <UART_SetConfig+0x332>
 8007ec0:	e00b      	b.n	8007eda <UART_SetConfig+0x33e>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	77fb      	strb	r3, [r7, #31]
 8007ec6:	e00d      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	77fb      	strb	r3, [r7, #31]
 8007ecc:	e00a      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007ece:	2304      	movs	r3, #4
 8007ed0:	77fb      	strb	r3, [r7, #31]
 8007ed2:	e007      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007ed4:	2308      	movs	r3, #8
 8007ed6:	77fb      	strb	r3, [r7, #31]
 8007ed8:	e004      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007eda:	2310      	movs	r3, #16
 8007edc:	77fb      	strb	r3, [r7, #31]
 8007ede:	e001      	b.n	8007ee4 <UART_SetConfig+0x348>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	69db      	ldr	r3, [r3, #28]
 8007ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eec:	d15b      	bne.n	8007fa6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007eee:	7ffb      	ldrb	r3, [r7, #31]
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d828      	bhi.n	8007f46 <UART_SetConfig+0x3aa>
 8007ef4:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <UART_SetConfig+0x360>)
 8007ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efa:	bf00      	nop
 8007efc:	08007f21 	.word	0x08007f21
 8007f00:	08007f29 	.word	0x08007f29
 8007f04:	08007f31 	.word	0x08007f31
 8007f08:	08007f47 	.word	0x08007f47
 8007f0c:	08007f37 	.word	0x08007f37
 8007f10:	08007f47 	.word	0x08007f47
 8007f14:	08007f47 	.word	0x08007f47
 8007f18:	08007f47 	.word	0x08007f47
 8007f1c:	08007f3f 	.word	0x08007f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f20:	f7fd fbec 	bl	80056fc <HAL_RCC_GetPCLK1Freq>
 8007f24:	61b8      	str	r0, [r7, #24]
        break;
 8007f26:	e013      	b.n	8007f50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f28:	f7fd fbfc 	bl	8005724 <HAL_RCC_GetPCLK2Freq>
 8007f2c:	61b8      	str	r0, [r7, #24]
        break;
 8007f2e:	e00f      	b.n	8007f50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f30:	4b4b      	ldr	r3, [pc, #300]	; (8008060 <UART_SetConfig+0x4c4>)
 8007f32:	61bb      	str	r3, [r7, #24]
        break;
 8007f34:	e00c      	b.n	8007f50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f36:	f7fd facf 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8007f3a:	61b8      	str	r0, [r7, #24]
        break;
 8007f3c:	e008      	b.n	8007f50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f42:	61bb      	str	r3, [r7, #24]
        break;
 8007f44:	e004      	b.n	8007f50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	77bb      	strb	r3, [r7, #30]
        break;
 8007f4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d074      	beq.n	8008040 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	005a      	lsls	r2, r3, #1
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	085b      	lsrs	r3, r3, #1
 8007f60:	441a      	add	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	2b0f      	cmp	r3, #15
 8007f70:	d916      	bls.n	8007fa0 <UART_SetConfig+0x404>
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f78:	d212      	bcs.n	8007fa0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	f023 030f 	bic.w	r3, r3, #15
 8007f82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	085b      	lsrs	r3, r3, #1
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	89fb      	ldrh	r3, [r7, #14]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	89fa      	ldrh	r2, [r7, #14]
 8007f9c:	60da      	str	r2, [r3, #12]
 8007f9e:	e04f      	b.n	8008040 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	77bb      	strb	r3, [r7, #30]
 8007fa4:	e04c      	b.n	8008040 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fa6:	7ffb      	ldrb	r3, [r7, #31]
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d828      	bhi.n	8007ffe <UART_SetConfig+0x462>
 8007fac:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <UART_SetConfig+0x418>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fd9 	.word	0x08007fd9
 8007fb8:	08007fe1 	.word	0x08007fe1
 8007fbc:	08007fe9 	.word	0x08007fe9
 8007fc0:	08007fff 	.word	0x08007fff
 8007fc4:	08007fef 	.word	0x08007fef
 8007fc8:	08007fff 	.word	0x08007fff
 8007fcc:	08007fff 	.word	0x08007fff
 8007fd0:	08007fff 	.word	0x08007fff
 8007fd4:	08007ff7 	.word	0x08007ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fd8:	f7fd fb90 	bl	80056fc <HAL_RCC_GetPCLK1Freq>
 8007fdc:	61b8      	str	r0, [r7, #24]
        break;
 8007fde:	e013      	b.n	8008008 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fe0:	f7fd fba0 	bl	8005724 <HAL_RCC_GetPCLK2Freq>
 8007fe4:	61b8      	str	r0, [r7, #24]
        break;
 8007fe6:	e00f      	b.n	8008008 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fe8:	4b1d      	ldr	r3, [pc, #116]	; (8008060 <UART_SetConfig+0x4c4>)
 8007fea:	61bb      	str	r3, [r7, #24]
        break;
 8007fec:	e00c      	b.n	8008008 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fee:	f7fd fa73 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8007ff2:	61b8      	str	r0, [r7, #24]
        break;
 8007ff4:	e008      	b.n	8008008 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ffa:	61bb      	str	r3, [r7, #24]
        break;
 8007ffc:	e004      	b.n	8008008 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	77bb      	strb	r3, [r7, #30]
        break;
 8008006:	bf00      	nop
    }

    if (pclk != 0U)
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d018      	beq.n	8008040 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	085a      	lsrs	r2, r3, #1
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	441a      	add	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008020:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2b0f      	cmp	r3, #15
 8008026:	d909      	bls.n	800803c <UART_SetConfig+0x4a0>
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800802e:	d205      	bcs.n	800803c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	b29a      	uxth	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60da      	str	r2, [r3, #12]
 800803a:	e001      	b.n	8008040 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800804c:	7fbb      	ldrb	r3, [r7, #30]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3720      	adds	r7, #32
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	40007c00 	.word	0x40007c00
 800805c:	40023800 	.word	0x40023800
 8008060:	00f42400 	.word	0x00f42400

08008064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	430a      	orrs	r2, r1
 80080d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	f003 0308 	and.w	r3, r3, #8
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	f003 0310 	and.w	r3, r3, #16
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01a      	beq.n	800817a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008162:	d10a      	bne.n	800817a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	605a      	str	r2, [r3, #4]
  }
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081b8:	f7fa ff0c 	bl	8002fd4 <HAL_GetTick>
 80081bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0308 	and.w	r3, r3, #8
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	d10e      	bne.n	80081ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f81b 	bl	8008216 <UART_WaitOnFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e011      	b.n	800820e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b09c      	sub	sp, #112	; 0x70
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	603b      	str	r3, [r7, #0]
 8008222:	4613      	mov	r3, r2
 8008224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008226:	e0a7      	b.n	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800822a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822e:	f000 80a3 	beq.w	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008232:	f7fa fecf 	bl	8002fd4 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800823e:	429a      	cmp	r2, r3
 8008240:	d302      	bcc.n	8008248 <UART_WaitOnFlagUntilTimeout+0x32>
 8008242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008244:	2b00      	cmp	r3, #0
 8008246:	d13f      	bne.n	80082c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008258:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800825c:	667b      	str	r3, [r7, #100]	; 0x64
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008268:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800826c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e6      	bne.n	8008248 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3308      	adds	r3, #8
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008284:	e853 3f00 	ldrex	r3, [r3]
 8008288:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	f023 0301 	bic.w	r3, r3, #1
 8008290:	663b      	str	r3, [r7, #96]	; 0x60
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3308      	adds	r3, #8
 8008298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800829a:	64ba      	str	r2, [r7, #72]	; 0x48
 800829c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e5      	bne.n	800827a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e068      	b.n	800839a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d050      	beq.n	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e4:	d148      	bne.n	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008304:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
 8008310:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800831c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e6      	bne.n	80082f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	613b      	str	r3, [r7, #16]
   return(result);
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f023 0301 	bic.w	r3, r3, #1
 8008338:	66bb      	str	r3, [r7, #104]	; 0x68
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008342:	623a      	str	r2, [r7, #32]
 8008344:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	69f9      	ldr	r1, [r7, #28]
 8008348:	6a3a      	ldr	r2, [r7, #32]
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e5      	bne.n	8008322 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2220      	movs	r2, #32
 800835a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2220      	movs	r2, #32
 8008360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2220      	movs	r2, #32
 8008368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e010      	b.n	800839a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	69da      	ldr	r2, [r3, #28]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	4013      	ands	r3, r2
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	429a      	cmp	r2, r3
 8008386:	bf0c      	ite	eq
 8008388:	2301      	moveq	r3, #1
 800838a:	2300      	movne	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	429a      	cmp	r2, r3
 8008394:	f43f af48 	beq.w	8008228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3770      	adds	r7, #112	; 0x70
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b097      	sub	sp, #92	; 0x5c
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	88fa      	ldrh	r2, [r7, #6]
 80083bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	88fa      	ldrh	r2, [r7, #6]
 80083c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d6:	d10e      	bne.n	80083f6 <UART_Start_Receive_IT+0x52>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d105      	bne.n	80083ec <UART_Start_Receive_IT+0x48>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80083e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083ea:	e02d      	b.n	8008448 <UART_Start_Receive_IT+0xa4>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	22ff      	movs	r2, #255	; 0xff
 80083f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083f4:	e028      	b.n	8008448 <UART_Start_Receive_IT+0xa4>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10d      	bne.n	800841a <UART_Start_Receive_IT+0x76>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d104      	bne.n	8008410 <UART_Start_Receive_IT+0x6c>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	22ff      	movs	r2, #255	; 0xff
 800840a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800840e:	e01b      	b.n	8008448 <UART_Start_Receive_IT+0xa4>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	227f      	movs	r2, #127	; 0x7f
 8008414:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008418:	e016      	b.n	8008448 <UART_Start_Receive_IT+0xa4>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008422:	d10d      	bne.n	8008440 <UART_Start_Receive_IT+0x9c>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d104      	bne.n	8008436 <UART_Start_Receive_IT+0x92>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	227f      	movs	r2, #127	; 0x7f
 8008430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008434:	e008      	b.n	8008448 <UART_Start_Receive_IT+0xa4>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	223f      	movs	r2, #63	; 0x3f
 800843a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800843e:	e003      	b.n	8008448 <UART_Start_Receive_IT+0xa4>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2222      	movs	r2, #34	; 0x22
 8008454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3308      	adds	r3, #8
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008462:	e853 3f00 	ldrex	r3, [r3]
 8008466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	f043 0301 	orr.w	r3, r3, #1
 800846e:	657b      	str	r3, [r7, #84]	; 0x54
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3308      	adds	r3, #8
 8008476:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008478:	64ba      	str	r2, [r7, #72]	; 0x48
 800847a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800847e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008480:	e841 2300 	strex	r3, r2, [r1]
 8008484:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e5      	bne.n	8008458 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008494:	d107      	bne.n	80084a6 <UART_Start_Receive_IT+0x102>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d103      	bne.n	80084a6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4a21      	ldr	r2, [pc, #132]	; (8008528 <UART_Start_Receive_IT+0x184>)
 80084a2:	669a      	str	r2, [r3, #104]	; 0x68
 80084a4:	e002      	b.n	80084ac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4a20      	ldr	r2, [pc, #128]	; (800852c <UART_Start_Receive_IT+0x188>)
 80084aa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d019      	beq.n	80084e8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80084c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d2:	637b      	str	r3, [r7, #52]	; 0x34
 80084d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1e6      	bne.n	80084b4 <UART_Start_Receive_IT+0x110>
 80084e6:	e018      	b.n	800851a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	613b      	str	r3, [r7, #16]
   return(result);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f043 0320 	orr.w	r3, r3, #32
 80084fc:	653b      	str	r3, [r7, #80]	; 0x50
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008506:	623b      	str	r3, [r7, #32]
 8008508:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	69f9      	ldr	r1, [r7, #28]
 800850c:	6a3a      	ldr	r2, [r7, #32]
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	61bb      	str	r3, [r7, #24]
   return(result);
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e6      	bne.n	80084e8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	375c      	adds	r7, #92	; 0x5c
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	080087df 	.word	0x080087df
 800852c:	08008679 	.word	0x08008679

08008530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b095      	sub	sp, #84	; 0x54
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800854c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008556:	643b      	str	r3, [r7, #64]	; 0x40
 8008558:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800855c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e6      	bne.n	8008538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	61fb      	str	r3, [r7, #28]
   return(result);
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	f023 0301 	bic.w	r3, r3, #1
 8008580:	64bb      	str	r3, [r7, #72]	; 0x48
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800858a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e5      	bne.n	800856a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d118      	bne.n	80085d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f023 0310 	bic.w	r3, r3, #16
 80085ba:	647b      	str	r3, [r7, #68]	; 0x44
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	461a      	mov	r2, r3
 80085c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c4:	61bb      	str	r3, [r7, #24]
 80085c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	6979      	ldr	r1, [r7, #20]
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	613b      	str	r3, [r7, #16]
   return(result);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e6      	bne.n	80085a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2220      	movs	r2, #32
 80085dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 80085ec:	bf00      	nop
 80085ee:	3754      	adds	r7, #84	; 0x54
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008604:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f7ff faaa 	bl	8007b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800861c:	bf00      	nop
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b088      	sub	sp, #32
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	60bb      	str	r3, [r7, #8]
   return(result);
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	61bb      	str	r3, [r7, #24]
 800864c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6979      	ldr	r1, [r7, #20]
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	613b      	str	r3, [r7, #16]
   return(result);
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e6      	bne.n	800862c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fa76 	bl	8007b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008670:	bf00      	nop
 8008672:	3720      	adds	r7, #32
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b096      	sub	sp, #88	; 0x58
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008686:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008690:	2b22      	cmp	r3, #34	; 0x22
 8008692:	f040 8098 	bne.w	80087c6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80086a4:	b2d9      	uxtb	r1, r3
 80086a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b0:	400a      	ands	r2, r1
 80086b2:	b2d2      	uxtb	r2, r2
 80086b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	3b01      	subs	r3, #1
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d17b      	bne.n	80087d6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086f2:	653b      	str	r3, [r7, #80]	; 0x50
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086fc:	647b      	str	r3, [r7, #68]	; 0x44
 80086fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008700:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008704:	e841 2300 	strex	r3, r2, [r1]
 8008708:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800870a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e6      	bne.n	80086de <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3308      	adds	r3, #8
 8008716:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	e853 3f00 	ldrex	r3, [r3]
 800871e:	623b      	str	r3, [r7, #32]
   return(result);
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	f023 0301 	bic.w	r3, r3, #1
 8008726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3308      	adds	r3, #8
 800872e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008730:	633a      	str	r2, [r7, #48]	; 0x30
 8008732:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008734:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008738:	e841 2300 	strex	r3, r2, [r1]
 800873c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e5      	bne.n	8008710 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800875c:	2b01      	cmp	r3, #1
 800875e:	d12e      	bne.n	80087be <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	e853 3f00 	ldrex	r3, [r3]
 8008772:	60fb      	str	r3, [r7, #12]
   return(result);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0310 	bic.w	r3, r3, #16
 800877a:	64bb      	str	r3, [r7, #72]	; 0x48
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	461a      	mov	r2, r3
 8008782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008784:	61fb      	str	r3, [r7, #28]
 8008786:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008788:	69b9      	ldr	r1, [r7, #24]
 800878a:	69fa      	ldr	r2, [r7, #28]
 800878c:	e841 2300 	strex	r3, r2, [r1]
 8008790:	617b      	str	r3, [r7, #20]
   return(result);
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e6      	bne.n	8008766 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f003 0310 	and.w	r3, r3, #16
 80087a2:	2b10      	cmp	r3, #16
 80087a4:	d103      	bne.n	80087ae <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2210      	movs	r2, #16
 80087ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7ff f9e4 	bl	8007b84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087bc:	e00b      	b.n	80087d6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7f9 fa94 	bl	8001cec <HAL_UART_RxCpltCallback>
}
 80087c4:	e007      	b.n	80087d6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	699a      	ldr	r2, [r3, #24]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f042 0208 	orr.w	r2, r2, #8
 80087d4:	619a      	str	r2, [r3, #24]
}
 80087d6:	bf00      	nop
 80087d8:	3758      	adds	r7, #88	; 0x58
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b096      	sub	sp, #88	; 0x58
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087f6:	2b22      	cmp	r3, #34	; 0x22
 80087f8:	f040 8098 	bne.w	800892c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008802:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800880a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800880c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008810:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008814:	4013      	ands	r3, r2
 8008816:	b29a      	uxth	r2, r3
 8008818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008820:	1c9a      	adds	r2, r3, #2
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800882c:	b29b      	uxth	r3, r3
 800882e:	3b01      	subs	r3, #1
 8008830:	b29a      	uxth	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800883e:	b29b      	uxth	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d17b      	bne.n	800893c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008862:	643b      	str	r3, [r7, #64]	; 0x40
 8008864:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e6      	bne.n	8008844 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3308      	adds	r3, #8
 800887c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	61fb      	str	r3, [r7, #28]
   return(result);
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	f023 0301 	bic.w	r3, r3, #1
 800888c:	64bb      	str	r3, [r7, #72]	; 0x48
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008898:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800889c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e5      	bne.n	8008876 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2220      	movs	r2, #32
 80088ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d12e      	bne.n	8008924 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	e853 3f00 	ldrex	r3, [r3]
 80088d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f023 0310 	bic.w	r3, r3, #16
 80088e0:	647b      	str	r3, [r7, #68]	; 0x44
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ea:	61bb      	str	r3, [r7, #24]
 80088ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ee:	6979      	ldr	r1, [r7, #20]
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	613b      	str	r3, [r7, #16]
   return(result);
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e6      	bne.n	80088cc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	f003 0310 	and.w	r3, r3, #16
 8008908:	2b10      	cmp	r3, #16
 800890a:	d103      	bne.n	8008914 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2210      	movs	r2, #16
 8008912:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff f931 	bl	8007b84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008922:	e00b      	b.n	800893c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7f9 f9e1 	bl	8001cec <HAL_UART_RxCpltCallback>
}
 800892a:	e007      	b.n	800893c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699a      	ldr	r2, [r3, #24]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0208 	orr.w	r2, r2, #8
 800893a:	619a      	str	r2, [r3, #24]
}
 800893c:	bf00      	nop
 800893e:	3758      	adds	r7, #88	; 0x58
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <arm_pid_reset_f32>:
 8008944:	2300      	movs	r3, #0
 8008946:	60c3      	str	r3, [r0, #12]
 8008948:	6103      	str	r3, [r0, #16]
 800894a:	6143      	str	r3, [r0, #20]
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop

08008950 <arm_pid_init_f32>:
 8008950:	ed90 7a08 	vldr	s14, [r0, #32]
 8008954:	edd0 7a06 	vldr	s15, [r0, #24]
 8008958:	ed90 6a07 	vldr	s12, [r0, #28]
 800895c:	eef1 6a67 	vneg.f32	s13, s15
 8008960:	ed80 7a02 	vstr	s14, [r0, #8]
 8008964:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008968:	ee37 6a07 	vadd.f32	s12, s14, s14
 800896c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008970:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8008974:	edc0 7a00 	vstr	s15, [r0]
 8008978:	ed80 7a01 	vstr	s14, [r0, #4]
 800897c:	b901      	cbnz	r1, 8008980 <arm_pid_init_f32+0x30>
 800897e:	4770      	bx	lr
 8008980:	2300      	movs	r3, #0
 8008982:	60c3      	str	r3, [r0, #12]
 8008984:	6103      	str	r3, [r0, #16]
 8008986:	6143      	str	r3, [r0, #20]
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop

0800898c <atof>:
 800898c:	2100      	movs	r1, #0
 800898e:	f000 be99 	b.w	80096c4 <strtod>
	...

08008994 <gcvt>:
 8008994:	b530      	push	{r4, r5, lr}
 8008996:	2200      	movs	r2, #0
 8008998:	b085      	sub	sp, #20
 800899a:	460c      	mov	r4, r1
 800899c:	4605      	mov	r5, r0
 800899e:	2300      	movs	r3, #0
 80089a0:	ec51 0b10 	vmov	r0, r1, d0
 80089a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089a8:	f7f8 f8b8 	bl	8000b1c <__aeabi_dcmplt>
 80089ac:	ed9d 0b02 	vldr	d0, [sp, #8]
 80089b0:	4622      	mov	r2, r4
 80089b2:	b118      	cbz	r0, 80089bc <gcvt+0x28>
 80089b4:	232d      	movs	r3, #45	; 0x2d
 80089b6:	f802 3b01 	strb.w	r3, [r2], #1
 80089ba:	3d01      	subs	r5, #1
 80089bc:	2300      	movs	r3, #0
 80089be:	4806      	ldr	r0, [pc, #24]	; (80089d8 <gcvt+0x44>)
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	4629      	mov	r1, r5
 80089c4:	2367      	movs	r3, #103	; 0x67
 80089c6:	6800      	ldr	r0, [r0, #0]
 80089c8:	f000 ff02 	bl	80097d0 <_gcvt>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	bf14      	ite	ne
 80089d0:	4620      	movne	r0, r4
 80089d2:	2000      	moveq	r0, #0
 80089d4:	b005      	add	sp, #20
 80089d6:	bd30      	pop	{r4, r5, pc}
 80089d8:	2000001c 	.word	0x2000001c

080089dc <__errno>:
 80089dc:	4b01      	ldr	r3, [pc, #4]	; (80089e4 <__errno+0x8>)
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	2000001c 	.word	0x2000001c

080089e8 <__libc_init_array>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	4d0d      	ldr	r5, [pc, #52]	; (8008a20 <__libc_init_array+0x38>)
 80089ec:	4c0d      	ldr	r4, [pc, #52]	; (8008a24 <__libc_init_array+0x3c>)
 80089ee:	1b64      	subs	r4, r4, r5
 80089f0:	10a4      	asrs	r4, r4, #2
 80089f2:	2600      	movs	r6, #0
 80089f4:	42a6      	cmp	r6, r4
 80089f6:	d109      	bne.n	8008a0c <__libc_init_array+0x24>
 80089f8:	4d0b      	ldr	r5, [pc, #44]	; (8008a28 <__libc_init_array+0x40>)
 80089fa:	4c0c      	ldr	r4, [pc, #48]	; (8008a2c <__libc_init_array+0x44>)
 80089fc:	f003 ff0c 	bl	800c818 <_init>
 8008a00:	1b64      	subs	r4, r4, r5
 8008a02:	10a4      	asrs	r4, r4, #2
 8008a04:	2600      	movs	r6, #0
 8008a06:	42a6      	cmp	r6, r4
 8008a08:	d105      	bne.n	8008a16 <__libc_init_array+0x2e>
 8008a0a:	bd70      	pop	{r4, r5, r6, pc}
 8008a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a10:	4798      	blx	r3
 8008a12:	3601      	adds	r6, #1
 8008a14:	e7ee      	b.n	80089f4 <__libc_init_array+0xc>
 8008a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a1a:	4798      	blx	r3
 8008a1c:	3601      	adds	r6, #1
 8008a1e:	e7f2      	b.n	8008a06 <__libc_init_array+0x1e>
 8008a20:	0800d4d8 	.word	0x0800d4d8
 8008a24:	0800d4d8 	.word	0x0800d4d8
 8008a28:	0800d4d8 	.word	0x0800d4d8
 8008a2c:	0800d4dc 	.word	0x0800d4dc

08008a30 <memcpy>:
 8008a30:	440a      	add	r2, r1
 8008a32:	4291      	cmp	r1, r2
 8008a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a38:	d100      	bne.n	8008a3c <memcpy+0xc>
 8008a3a:	4770      	bx	lr
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a46:	4291      	cmp	r1, r2
 8008a48:	d1f9      	bne.n	8008a3e <memcpy+0xe>
 8008a4a:	bd10      	pop	{r4, pc}

08008a4c <memset>:
 8008a4c:	4402      	add	r2, r0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d100      	bne.n	8008a56 <memset+0xa>
 8008a54:	4770      	bx	lr
 8008a56:	f803 1b01 	strb.w	r1, [r3], #1
 8008a5a:	e7f9      	b.n	8008a50 <memset+0x4>

08008a5c <strcat>:
 8008a5c:	b510      	push	{r4, lr}
 8008a5e:	4602      	mov	r2, r0
 8008a60:	7814      	ldrb	r4, [r2, #0]
 8008a62:	4613      	mov	r3, r2
 8008a64:	3201      	adds	r2, #1
 8008a66:	2c00      	cmp	r4, #0
 8008a68:	d1fa      	bne.n	8008a60 <strcat+0x4>
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a70:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a74:	2a00      	cmp	r2, #0
 8008a76:	d1f9      	bne.n	8008a6c <strcat+0x10>
 8008a78:	bd10      	pop	{r4, pc}

08008a7a <sulp>:
 8008a7a:	b570      	push	{r4, r5, r6, lr}
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	460d      	mov	r5, r1
 8008a80:	ec45 4b10 	vmov	d0, r4, r5
 8008a84:	4616      	mov	r6, r2
 8008a86:	f001 fe57 	bl	800a738 <__ulp>
 8008a8a:	ec51 0b10 	vmov	r0, r1, d0
 8008a8e:	b17e      	cbz	r6, 8008ab0 <sulp+0x36>
 8008a90:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dd09      	ble.n	8008ab0 <sulp+0x36>
 8008a9c:	051b      	lsls	r3, r3, #20
 8008a9e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008aa2:	2400      	movs	r4, #0
 8008aa4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	462b      	mov	r3, r5
 8008aac:	f7f7 fdc4 	bl	8000638 <__aeabi_dmul>
 8008ab0:	bd70      	pop	{r4, r5, r6, pc}
 8008ab2:	0000      	movs	r0, r0
 8008ab4:	0000      	movs	r0, r0
	...

08008ab8 <_strtod_l>:
 8008ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	ed2d 8b02 	vpush	{d8}
 8008ac0:	b09d      	sub	sp, #116	; 0x74
 8008ac2:	461f      	mov	r7, r3
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	9318      	str	r3, [sp, #96]	; 0x60
 8008ac8:	4ba2      	ldr	r3, [pc, #648]	; (8008d54 <_strtod_l+0x29c>)
 8008aca:	9213      	str	r2, [sp, #76]	; 0x4c
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	4688      	mov	r8, r1
 8008ad6:	f7f7 fb9b 	bl	8000210 <strlen>
 8008ada:	f04f 0a00 	mov.w	sl, #0
 8008ade:	4605      	mov	r5, r0
 8008ae0:	f04f 0b00 	mov.w	fp, #0
 8008ae4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aea:	781a      	ldrb	r2, [r3, #0]
 8008aec:	2a2b      	cmp	r2, #43	; 0x2b
 8008aee:	d04e      	beq.n	8008b8e <_strtod_l+0xd6>
 8008af0:	d83b      	bhi.n	8008b6a <_strtod_l+0xb2>
 8008af2:	2a0d      	cmp	r2, #13
 8008af4:	d834      	bhi.n	8008b60 <_strtod_l+0xa8>
 8008af6:	2a08      	cmp	r2, #8
 8008af8:	d834      	bhi.n	8008b64 <_strtod_l+0xac>
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	d03e      	beq.n	8008b7c <_strtod_l+0xc4>
 8008afe:	2300      	movs	r3, #0
 8008b00:	930a      	str	r3, [sp, #40]	; 0x28
 8008b02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008b04:	7833      	ldrb	r3, [r6, #0]
 8008b06:	2b30      	cmp	r3, #48	; 0x30
 8008b08:	f040 80b0 	bne.w	8008c6c <_strtod_l+0x1b4>
 8008b0c:	7873      	ldrb	r3, [r6, #1]
 8008b0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b12:	2b58      	cmp	r3, #88	; 0x58
 8008b14:	d168      	bne.n	8008be8 <_strtod_l+0x130>
 8008b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	ab18      	add	r3, sp, #96	; 0x60
 8008b1c:	9702      	str	r7, [sp, #8]
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	4a8d      	ldr	r2, [pc, #564]	; (8008d58 <_strtod_l+0x2a0>)
 8008b22:	ab19      	add	r3, sp, #100	; 0x64
 8008b24:	a917      	add	r1, sp, #92	; 0x5c
 8008b26:	4620      	mov	r0, r4
 8008b28:	f000 ff7a 	bl	8009a20 <__gethex>
 8008b2c:	f010 0707 	ands.w	r7, r0, #7
 8008b30:	4605      	mov	r5, r0
 8008b32:	d005      	beq.n	8008b40 <_strtod_l+0x88>
 8008b34:	2f06      	cmp	r7, #6
 8008b36:	d12c      	bne.n	8008b92 <_strtod_l+0xda>
 8008b38:	3601      	adds	r6, #1
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f040 8590 	bne.w	8009668 <_strtod_l+0xbb0>
 8008b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4a:	b1eb      	cbz	r3, 8008b88 <_strtod_l+0xd0>
 8008b4c:	4652      	mov	r2, sl
 8008b4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b52:	ec43 2b10 	vmov	d0, r2, r3
 8008b56:	b01d      	add	sp, #116	; 0x74
 8008b58:	ecbd 8b02 	vpop	{d8}
 8008b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b60:	2a20      	cmp	r2, #32
 8008b62:	d1cc      	bne.n	8008afe <_strtod_l+0x46>
 8008b64:	3301      	adds	r3, #1
 8008b66:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b68:	e7be      	b.n	8008ae8 <_strtod_l+0x30>
 8008b6a:	2a2d      	cmp	r2, #45	; 0x2d
 8008b6c:	d1c7      	bne.n	8008afe <_strtod_l+0x46>
 8008b6e:	2201      	movs	r2, #1
 8008b70:	920a      	str	r2, [sp, #40]	; 0x28
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b76:	785b      	ldrb	r3, [r3, #1]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1c2      	bne.n	8008b02 <_strtod_l+0x4a>
 8008b7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b7e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f040 856e 	bne.w	8009664 <_strtod_l+0xbac>
 8008b88:	4652      	mov	r2, sl
 8008b8a:	465b      	mov	r3, fp
 8008b8c:	e7e1      	b.n	8008b52 <_strtod_l+0x9a>
 8008b8e:	2200      	movs	r2, #0
 8008b90:	e7ee      	b.n	8008b70 <_strtod_l+0xb8>
 8008b92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b94:	b13a      	cbz	r2, 8008ba6 <_strtod_l+0xee>
 8008b96:	2135      	movs	r1, #53	; 0x35
 8008b98:	a81a      	add	r0, sp, #104	; 0x68
 8008b9a:	f001 fef7 	bl	800a98c <__copybits>
 8008b9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f001 fa97 	bl	800a0d4 <_Bfree>
 8008ba6:	3f01      	subs	r7, #1
 8008ba8:	2f04      	cmp	r7, #4
 8008baa:	d806      	bhi.n	8008bba <_strtod_l+0x102>
 8008bac:	e8df f007 	tbb	[pc, r7]
 8008bb0:	1714030a 	.word	0x1714030a
 8008bb4:	0a          	.byte	0x0a
 8008bb5:	00          	.byte	0x00
 8008bb6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008bba:	0728      	lsls	r0, r5, #28
 8008bbc:	d5c0      	bpl.n	8008b40 <_strtod_l+0x88>
 8008bbe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008bc2:	e7bd      	b.n	8008b40 <_strtod_l+0x88>
 8008bc4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008bc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008bce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008bd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008bd6:	e7f0      	b.n	8008bba <_strtod_l+0x102>
 8008bd8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008d5c <_strtod_l+0x2a4>
 8008bdc:	e7ed      	b.n	8008bba <_strtod_l+0x102>
 8008bde:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008be2:	f04f 3aff 	mov.w	sl, #4294967295
 8008be6:	e7e8      	b.n	8008bba <_strtod_l+0x102>
 8008be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bee:	785b      	ldrb	r3, [r3, #1]
 8008bf0:	2b30      	cmp	r3, #48	; 0x30
 8008bf2:	d0f9      	beq.n	8008be8 <_strtod_l+0x130>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0a3      	beq.n	8008b40 <_strtod_l+0x88>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	f04f 0900 	mov.w	r9, #0
 8008bfe:	9304      	str	r3, [sp, #16]
 8008c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c02:	9308      	str	r3, [sp, #32]
 8008c04:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c08:	464f      	mov	r7, r9
 8008c0a:	220a      	movs	r2, #10
 8008c0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008c0e:	7806      	ldrb	r6, [r0, #0]
 8008c10:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008c14:	b2d9      	uxtb	r1, r3
 8008c16:	2909      	cmp	r1, #9
 8008c18:	d92a      	bls.n	8008c70 <_strtod_l+0x1b8>
 8008c1a:	9905      	ldr	r1, [sp, #20]
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	f002 f957 	bl	800aed0 <strncmp>
 8008c22:	b398      	cbz	r0, 8008c8c <_strtod_l+0x1d4>
 8008c24:	2000      	movs	r0, #0
 8008c26:	4632      	mov	r2, r6
 8008c28:	463d      	mov	r5, r7
 8008c2a:	9005      	str	r0, [sp, #20]
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2a65      	cmp	r2, #101	; 0x65
 8008c30:	d001      	beq.n	8008c36 <_strtod_l+0x17e>
 8008c32:	2a45      	cmp	r2, #69	; 0x45
 8008c34:	d118      	bne.n	8008c68 <_strtod_l+0x1b0>
 8008c36:	b91d      	cbnz	r5, 8008c40 <_strtod_l+0x188>
 8008c38:	9a04      	ldr	r2, [sp, #16]
 8008c3a:	4302      	orrs	r2, r0
 8008c3c:	d09e      	beq.n	8008b7c <_strtod_l+0xc4>
 8008c3e:	2500      	movs	r5, #0
 8008c40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008c44:	f108 0201 	add.w	r2, r8, #1
 8008c48:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c4a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008c4e:	2a2b      	cmp	r2, #43	; 0x2b
 8008c50:	d075      	beq.n	8008d3e <_strtod_l+0x286>
 8008c52:	2a2d      	cmp	r2, #45	; 0x2d
 8008c54:	d07b      	beq.n	8008d4e <_strtod_l+0x296>
 8008c56:	f04f 0c00 	mov.w	ip, #0
 8008c5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008c5e:	2909      	cmp	r1, #9
 8008c60:	f240 8082 	bls.w	8008d68 <_strtod_l+0x2b0>
 8008c64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c68:	2600      	movs	r6, #0
 8008c6a:	e09d      	b.n	8008da8 <_strtod_l+0x2f0>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	e7c4      	b.n	8008bfa <_strtod_l+0x142>
 8008c70:	2f08      	cmp	r7, #8
 8008c72:	bfd8      	it	le
 8008c74:	9907      	ldrle	r1, [sp, #28]
 8008c76:	f100 0001 	add.w	r0, r0, #1
 8008c7a:	bfda      	itte	le
 8008c7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c80:	9307      	strle	r3, [sp, #28]
 8008c82:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008c86:	3701      	adds	r7, #1
 8008c88:	9017      	str	r0, [sp, #92]	; 0x5c
 8008c8a:	e7bf      	b.n	8008c0c <_strtod_l+0x154>
 8008c8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c8e:	195a      	adds	r2, r3, r5
 8008c90:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c92:	5d5a      	ldrb	r2, [r3, r5]
 8008c94:	2f00      	cmp	r7, #0
 8008c96:	d037      	beq.n	8008d08 <_strtod_l+0x250>
 8008c98:	9005      	str	r0, [sp, #20]
 8008c9a:	463d      	mov	r5, r7
 8008c9c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ca0:	2b09      	cmp	r3, #9
 8008ca2:	d912      	bls.n	8008cca <_strtod_l+0x212>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e7c2      	b.n	8008c2e <_strtod_l+0x176>
 8008ca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cae:	785a      	ldrb	r2, [r3, #1]
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	2a30      	cmp	r2, #48	; 0x30
 8008cb4:	d0f8      	beq.n	8008ca8 <_strtod_l+0x1f0>
 8008cb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008cba:	2b08      	cmp	r3, #8
 8008cbc:	f200 84d9 	bhi.w	8009672 <_strtod_l+0xbba>
 8008cc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cc2:	9005      	str	r0, [sp, #20]
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	9308      	str	r3, [sp, #32]
 8008cc8:	4605      	mov	r5, r0
 8008cca:	3a30      	subs	r2, #48	; 0x30
 8008ccc:	f100 0301 	add.w	r3, r0, #1
 8008cd0:	d014      	beq.n	8008cfc <_strtod_l+0x244>
 8008cd2:	9905      	ldr	r1, [sp, #20]
 8008cd4:	4419      	add	r1, r3
 8008cd6:	9105      	str	r1, [sp, #20]
 8008cd8:	462b      	mov	r3, r5
 8008cda:	eb00 0e05 	add.w	lr, r0, r5
 8008cde:	210a      	movs	r1, #10
 8008ce0:	4573      	cmp	r3, lr
 8008ce2:	d113      	bne.n	8008d0c <_strtod_l+0x254>
 8008ce4:	182b      	adds	r3, r5, r0
 8008ce6:	2b08      	cmp	r3, #8
 8008ce8:	f105 0501 	add.w	r5, r5, #1
 8008cec:	4405      	add	r5, r0
 8008cee:	dc1c      	bgt.n	8008d2a <_strtod_l+0x272>
 8008cf0:	9907      	ldr	r1, [sp, #28]
 8008cf2:	230a      	movs	r3, #10
 8008cf4:	fb03 2301 	mla	r3, r3, r1, r2
 8008cf8:	9307      	str	r3, [sp, #28]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cfe:	1c51      	adds	r1, r2, #1
 8008d00:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d02:	7852      	ldrb	r2, [r2, #1]
 8008d04:	4618      	mov	r0, r3
 8008d06:	e7c9      	b.n	8008c9c <_strtod_l+0x1e4>
 8008d08:	4638      	mov	r0, r7
 8008d0a:	e7d2      	b.n	8008cb2 <_strtod_l+0x1fa>
 8008d0c:	2b08      	cmp	r3, #8
 8008d0e:	dc04      	bgt.n	8008d1a <_strtod_l+0x262>
 8008d10:	9e07      	ldr	r6, [sp, #28]
 8008d12:	434e      	muls	r6, r1
 8008d14:	9607      	str	r6, [sp, #28]
 8008d16:	3301      	adds	r3, #1
 8008d18:	e7e2      	b.n	8008ce0 <_strtod_l+0x228>
 8008d1a:	f103 0c01 	add.w	ip, r3, #1
 8008d1e:	f1bc 0f10 	cmp.w	ip, #16
 8008d22:	bfd8      	it	le
 8008d24:	fb01 f909 	mulle.w	r9, r1, r9
 8008d28:	e7f5      	b.n	8008d16 <_strtod_l+0x25e>
 8008d2a:	2d10      	cmp	r5, #16
 8008d2c:	bfdc      	itt	le
 8008d2e:	230a      	movle	r3, #10
 8008d30:	fb03 2909 	mlale	r9, r3, r9, r2
 8008d34:	e7e1      	b.n	8008cfa <_strtod_l+0x242>
 8008d36:	2300      	movs	r3, #0
 8008d38:	9305      	str	r3, [sp, #20]
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e77c      	b.n	8008c38 <_strtod_l+0x180>
 8008d3e:	f04f 0c00 	mov.w	ip, #0
 8008d42:	f108 0202 	add.w	r2, r8, #2
 8008d46:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d48:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008d4c:	e785      	b.n	8008c5a <_strtod_l+0x1a2>
 8008d4e:	f04f 0c01 	mov.w	ip, #1
 8008d52:	e7f6      	b.n	8008d42 <_strtod_l+0x28a>
 8008d54:	0800d110 	.word	0x0800d110
 8008d58:	0800d048 	.word	0x0800d048
 8008d5c:	7ff00000 	.word	0x7ff00000
 8008d60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d62:	1c51      	adds	r1, r2, #1
 8008d64:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d66:	7852      	ldrb	r2, [r2, #1]
 8008d68:	2a30      	cmp	r2, #48	; 0x30
 8008d6a:	d0f9      	beq.n	8008d60 <_strtod_l+0x2a8>
 8008d6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008d70:	2908      	cmp	r1, #8
 8008d72:	f63f af79 	bhi.w	8008c68 <_strtod_l+0x1b0>
 8008d76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008d7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d7c:	9206      	str	r2, [sp, #24]
 8008d7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d80:	1c51      	adds	r1, r2, #1
 8008d82:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d84:	7852      	ldrb	r2, [r2, #1]
 8008d86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008d8a:	2e09      	cmp	r6, #9
 8008d8c:	d937      	bls.n	8008dfe <_strtod_l+0x346>
 8008d8e:	9e06      	ldr	r6, [sp, #24]
 8008d90:	1b89      	subs	r1, r1, r6
 8008d92:	2908      	cmp	r1, #8
 8008d94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008d98:	dc02      	bgt.n	8008da0 <_strtod_l+0x2e8>
 8008d9a:	4576      	cmp	r6, lr
 8008d9c:	bfa8      	it	ge
 8008d9e:	4676      	movge	r6, lr
 8008da0:	f1bc 0f00 	cmp.w	ip, #0
 8008da4:	d000      	beq.n	8008da8 <_strtod_l+0x2f0>
 8008da6:	4276      	negs	r6, r6
 8008da8:	2d00      	cmp	r5, #0
 8008daa:	d14d      	bne.n	8008e48 <_strtod_l+0x390>
 8008dac:	9904      	ldr	r1, [sp, #16]
 8008dae:	4301      	orrs	r1, r0
 8008db0:	f47f aec6 	bne.w	8008b40 <_strtod_l+0x88>
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f47f aee1 	bne.w	8008b7c <_strtod_l+0xc4>
 8008dba:	2a69      	cmp	r2, #105	; 0x69
 8008dbc:	d027      	beq.n	8008e0e <_strtod_l+0x356>
 8008dbe:	dc24      	bgt.n	8008e0a <_strtod_l+0x352>
 8008dc0:	2a49      	cmp	r2, #73	; 0x49
 8008dc2:	d024      	beq.n	8008e0e <_strtod_l+0x356>
 8008dc4:	2a4e      	cmp	r2, #78	; 0x4e
 8008dc6:	f47f aed9 	bne.w	8008b7c <_strtod_l+0xc4>
 8008dca:	499f      	ldr	r1, [pc, #636]	; (8009048 <_strtod_l+0x590>)
 8008dcc:	a817      	add	r0, sp, #92	; 0x5c
 8008dce:	f001 f87f 	bl	8009ed0 <__match>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	f43f aed2 	beq.w	8008b7c <_strtod_l+0xc4>
 8008dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	2b28      	cmp	r3, #40	; 0x28
 8008dde:	d12d      	bne.n	8008e3c <_strtod_l+0x384>
 8008de0:	499a      	ldr	r1, [pc, #616]	; (800904c <_strtod_l+0x594>)
 8008de2:	aa1a      	add	r2, sp, #104	; 0x68
 8008de4:	a817      	add	r0, sp, #92	; 0x5c
 8008de6:	f001 f887 	bl	8009ef8 <__hexnan>
 8008dea:	2805      	cmp	r0, #5
 8008dec:	d126      	bne.n	8008e3c <_strtod_l+0x384>
 8008dee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008df0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008df4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008df8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008dfc:	e6a0      	b.n	8008b40 <_strtod_l+0x88>
 8008dfe:	210a      	movs	r1, #10
 8008e00:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008e04:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008e08:	e7b9      	b.n	8008d7e <_strtod_l+0x2c6>
 8008e0a:	2a6e      	cmp	r2, #110	; 0x6e
 8008e0c:	e7db      	b.n	8008dc6 <_strtod_l+0x30e>
 8008e0e:	4990      	ldr	r1, [pc, #576]	; (8009050 <_strtod_l+0x598>)
 8008e10:	a817      	add	r0, sp, #92	; 0x5c
 8008e12:	f001 f85d 	bl	8009ed0 <__match>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f43f aeb0 	beq.w	8008b7c <_strtod_l+0xc4>
 8008e1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e1e:	498d      	ldr	r1, [pc, #564]	; (8009054 <_strtod_l+0x59c>)
 8008e20:	3b01      	subs	r3, #1
 8008e22:	a817      	add	r0, sp, #92	; 0x5c
 8008e24:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e26:	f001 f853 	bl	8009ed0 <__match>
 8008e2a:	b910      	cbnz	r0, 8008e32 <_strtod_l+0x37a>
 8008e2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e2e:	3301      	adds	r3, #1
 8008e30:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e32:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009064 <_strtod_l+0x5ac>
 8008e36:	f04f 0a00 	mov.w	sl, #0
 8008e3a:	e681      	b.n	8008b40 <_strtod_l+0x88>
 8008e3c:	4886      	ldr	r0, [pc, #536]	; (8009058 <_strtod_l+0x5a0>)
 8008e3e:	f002 f827 	bl	800ae90 <nan>
 8008e42:	ec5b ab10 	vmov	sl, fp, d0
 8008e46:	e67b      	b.n	8008b40 <_strtod_l+0x88>
 8008e48:	9b05      	ldr	r3, [sp, #20]
 8008e4a:	9807      	ldr	r0, [sp, #28]
 8008e4c:	1af3      	subs	r3, r6, r3
 8008e4e:	2f00      	cmp	r7, #0
 8008e50:	bf08      	it	eq
 8008e52:	462f      	moveq	r7, r5
 8008e54:	2d10      	cmp	r5, #16
 8008e56:	9306      	str	r3, [sp, #24]
 8008e58:	46a8      	mov	r8, r5
 8008e5a:	bfa8      	it	ge
 8008e5c:	f04f 0810 	movge.w	r8, #16
 8008e60:	f7f7 fb70 	bl	8000544 <__aeabi_ui2d>
 8008e64:	2d09      	cmp	r5, #9
 8008e66:	4682      	mov	sl, r0
 8008e68:	468b      	mov	fp, r1
 8008e6a:	dd13      	ble.n	8008e94 <_strtod_l+0x3dc>
 8008e6c:	4b7b      	ldr	r3, [pc, #492]	; (800905c <_strtod_l+0x5a4>)
 8008e6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e76:	f7f7 fbdf 	bl	8000638 <__aeabi_dmul>
 8008e7a:	4682      	mov	sl, r0
 8008e7c:	4648      	mov	r0, r9
 8008e7e:	468b      	mov	fp, r1
 8008e80:	f7f7 fb60 	bl	8000544 <__aeabi_ui2d>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4650      	mov	r0, sl
 8008e8a:	4659      	mov	r1, fp
 8008e8c:	f7f7 fa1e 	bl	80002cc <__adddf3>
 8008e90:	4682      	mov	sl, r0
 8008e92:	468b      	mov	fp, r1
 8008e94:	2d0f      	cmp	r5, #15
 8008e96:	dc38      	bgt.n	8008f0a <_strtod_l+0x452>
 8008e98:	9b06      	ldr	r3, [sp, #24]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f43f ae50 	beq.w	8008b40 <_strtod_l+0x88>
 8008ea0:	dd24      	ble.n	8008eec <_strtod_l+0x434>
 8008ea2:	2b16      	cmp	r3, #22
 8008ea4:	dc0b      	bgt.n	8008ebe <_strtod_l+0x406>
 8008ea6:	496d      	ldr	r1, [pc, #436]	; (800905c <_strtod_l+0x5a4>)
 8008ea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eb0:	4652      	mov	r2, sl
 8008eb2:	465b      	mov	r3, fp
 8008eb4:	f7f7 fbc0 	bl	8000638 <__aeabi_dmul>
 8008eb8:	4682      	mov	sl, r0
 8008eba:	468b      	mov	fp, r1
 8008ebc:	e640      	b.n	8008b40 <_strtod_l+0x88>
 8008ebe:	9a06      	ldr	r2, [sp, #24]
 8008ec0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	db20      	blt.n	8008f0a <_strtod_l+0x452>
 8008ec8:	4c64      	ldr	r4, [pc, #400]	; (800905c <_strtod_l+0x5a4>)
 8008eca:	f1c5 050f 	rsb	r5, r5, #15
 8008ece:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008ed2:	4652      	mov	r2, sl
 8008ed4:	465b      	mov	r3, fp
 8008ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eda:	f7f7 fbad 	bl	8000638 <__aeabi_dmul>
 8008ede:	9b06      	ldr	r3, [sp, #24]
 8008ee0:	1b5d      	subs	r5, r3, r5
 8008ee2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ee6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008eea:	e7e3      	b.n	8008eb4 <_strtod_l+0x3fc>
 8008eec:	9b06      	ldr	r3, [sp, #24]
 8008eee:	3316      	adds	r3, #22
 8008ef0:	db0b      	blt.n	8008f0a <_strtod_l+0x452>
 8008ef2:	9b05      	ldr	r3, [sp, #20]
 8008ef4:	1b9e      	subs	r6, r3, r6
 8008ef6:	4b59      	ldr	r3, [pc, #356]	; (800905c <_strtod_l+0x5a4>)
 8008ef8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008efc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f00:	4650      	mov	r0, sl
 8008f02:	4659      	mov	r1, fp
 8008f04:	f7f7 fcc2 	bl	800088c <__aeabi_ddiv>
 8008f08:	e7d6      	b.n	8008eb8 <_strtod_l+0x400>
 8008f0a:	9b06      	ldr	r3, [sp, #24]
 8008f0c:	eba5 0808 	sub.w	r8, r5, r8
 8008f10:	4498      	add	r8, r3
 8008f12:	f1b8 0f00 	cmp.w	r8, #0
 8008f16:	dd74      	ble.n	8009002 <_strtod_l+0x54a>
 8008f18:	f018 030f 	ands.w	r3, r8, #15
 8008f1c:	d00a      	beq.n	8008f34 <_strtod_l+0x47c>
 8008f1e:	494f      	ldr	r1, [pc, #316]	; (800905c <_strtod_l+0x5a4>)
 8008f20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f24:	4652      	mov	r2, sl
 8008f26:	465b      	mov	r3, fp
 8008f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f2c:	f7f7 fb84 	bl	8000638 <__aeabi_dmul>
 8008f30:	4682      	mov	sl, r0
 8008f32:	468b      	mov	fp, r1
 8008f34:	f038 080f 	bics.w	r8, r8, #15
 8008f38:	d04f      	beq.n	8008fda <_strtod_l+0x522>
 8008f3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008f3e:	dd22      	ble.n	8008f86 <_strtod_l+0x4ce>
 8008f40:	2500      	movs	r5, #0
 8008f42:	462e      	mov	r6, r5
 8008f44:	9507      	str	r5, [sp, #28]
 8008f46:	9505      	str	r5, [sp, #20]
 8008f48:	2322      	movs	r3, #34	; 0x22
 8008f4a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009064 <_strtod_l+0x5ac>
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	f04f 0a00 	mov.w	sl, #0
 8008f54:	9b07      	ldr	r3, [sp, #28]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f43f adf2 	beq.w	8008b40 <_strtod_l+0x88>
 8008f5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f001 f8b8 	bl	800a0d4 <_Bfree>
 8008f64:	9905      	ldr	r1, [sp, #20]
 8008f66:	4620      	mov	r0, r4
 8008f68:	f001 f8b4 	bl	800a0d4 <_Bfree>
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f001 f8b0 	bl	800a0d4 <_Bfree>
 8008f74:	9907      	ldr	r1, [sp, #28]
 8008f76:	4620      	mov	r0, r4
 8008f78:	f001 f8ac 	bl	800a0d4 <_Bfree>
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f001 f8a8 	bl	800a0d4 <_Bfree>
 8008f84:	e5dc      	b.n	8008b40 <_strtod_l+0x88>
 8008f86:	4b36      	ldr	r3, [pc, #216]	; (8009060 <_strtod_l+0x5a8>)
 8008f88:	9304      	str	r3, [sp, #16]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f90:	4650      	mov	r0, sl
 8008f92:	4659      	mov	r1, fp
 8008f94:	4699      	mov	r9, r3
 8008f96:	f1b8 0f01 	cmp.w	r8, #1
 8008f9a:	dc21      	bgt.n	8008fe0 <_strtod_l+0x528>
 8008f9c:	b10b      	cbz	r3, 8008fa2 <_strtod_l+0x4ea>
 8008f9e:	4682      	mov	sl, r0
 8008fa0:	468b      	mov	fp, r1
 8008fa2:	4b2f      	ldr	r3, [pc, #188]	; (8009060 <_strtod_l+0x5a8>)
 8008fa4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008fa8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008fac:	4652      	mov	r2, sl
 8008fae:	465b      	mov	r3, fp
 8008fb0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008fb4:	f7f7 fb40 	bl	8000638 <__aeabi_dmul>
 8008fb8:	4b2a      	ldr	r3, [pc, #168]	; (8009064 <_strtod_l+0x5ac>)
 8008fba:	460a      	mov	r2, r1
 8008fbc:	400b      	ands	r3, r1
 8008fbe:	492a      	ldr	r1, [pc, #168]	; (8009068 <_strtod_l+0x5b0>)
 8008fc0:	428b      	cmp	r3, r1
 8008fc2:	4682      	mov	sl, r0
 8008fc4:	d8bc      	bhi.n	8008f40 <_strtod_l+0x488>
 8008fc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008fca:	428b      	cmp	r3, r1
 8008fcc:	bf86      	itte	hi
 8008fce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800906c <_strtod_l+0x5b4>
 8008fd2:	f04f 3aff 	movhi.w	sl, #4294967295
 8008fd6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008fda:	2300      	movs	r3, #0
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	e084      	b.n	80090ea <_strtod_l+0x632>
 8008fe0:	f018 0f01 	tst.w	r8, #1
 8008fe4:	d005      	beq.n	8008ff2 <_strtod_l+0x53a>
 8008fe6:	9b04      	ldr	r3, [sp, #16]
 8008fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fec:	f7f7 fb24 	bl	8000638 <__aeabi_dmul>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	9a04      	ldr	r2, [sp, #16]
 8008ff4:	3208      	adds	r2, #8
 8008ff6:	f109 0901 	add.w	r9, r9, #1
 8008ffa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ffe:	9204      	str	r2, [sp, #16]
 8009000:	e7c9      	b.n	8008f96 <_strtod_l+0x4de>
 8009002:	d0ea      	beq.n	8008fda <_strtod_l+0x522>
 8009004:	f1c8 0800 	rsb	r8, r8, #0
 8009008:	f018 020f 	ands.w	r2, r8, #15
 800900c:	d00a      	beq.n	8009024 <_strtod_l+0x56c>
 800900e:	4b13      	ldr	r3, [pc, #76]	; (800905c <_strtod_l+0x5a4>)
 8009010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009014:	4650      	mov	r0, sl
 8009016:	4659      	mov	r1, fp
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 fc36 	bl	800088c <__aeabi_ddiv>
 8009020:	4682      	mov	sl, r0
 8009022:	468b      	mov	fp, r1
 8009024:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009028:	d0d7      	beq.n	8008fda <_strtod_l+0x522>
 800902a:	f1b8 0f1f 	cmp.w	r8, #31
 800902e:	dd1f      	ble.n	8009070 <_strtod_l+0x5b8>
 8009030:	2500      	movs	r5, #0
 8009032:	462e      	mov	r6, r5
 8009034:	9507      	str	r5, [sp, #28]
 8009036:	9505      	str	r5, [sp, #20]
 8009038:	2322      	movs	r3, #34	; 0x22
 800903a:	f04f 0a00 	mov.w	sl, #0
 800903e:	f04f 0b00 	mov.w	fp, #0
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	e786      	b.n	8008f54 <_strtod_l+0x49c>
 8009046:	bf00      	nop
 8009048:	0800d043 	.word	0x0800d043
 800904c:	0800d05c 	.word	0x0800d05c
 8009050:	0800d040 	.word	0x0800d040
 8009054:	0800d3f6 	.word	0x0800d3f6
 8009058:	0800d2f1 	.word	0x0800d2f1
 800905c:	0800d1c0 	.word	0x0800d1c0
 8009060:	0800d198 	.word	0x0800d198
 8009064:	7ff00000 	.word	0x7ff00000
 8009068:	7ca00000 	.word	0x7ca00000
 800906c:	7fefffff 	.word	0x7fefffff
 8009070:	f018 0310 	ands.w	r3, r8, #16
 8009074:	bf18      	it	ne
 8009076:	236a      	movne	r3, #106	; 0x6a
 8009078:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009428 <_strtod_l+0x970>
 800907c:	9304      	str	r3, [sp, #16]
 800907e:	4650      	mov	r0, sl
 8009080:	4659      	mov	r1, fp
 8009082:	2300      	movs	r3, #0
 8009084:	f018 0f01 	tst.w	r8, #1
 8009088:	d004      	beq.n	8009094 <_strtod_l+0x5dc>
 800908a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800908e:	f7f7 fad3 	bl	8000638 <__aeabi_dmul>
 8009092:	2301      	movs	r3, #1
 8009094:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009098:	f109 0908 	add.w	r9, r9, #8
 800909c:	d1f2      	bne.n	8009084 <_strtod_l+0x5cc>
 800909e:	b10b      	cbz	r3, 80090a4 <_strtod_l+0x5ec>
 80090a0:	4682      	mov	sl, r0
 80090a2:	468b      	mov	fp, r1
 80090a4:	9b04      	ldr	r3, [sp, #16]
 80090a6:	b1c3      	cbz	r3, 80090da <_strtod_l+0x622>
 80090a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80090ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	4659      	mov	r1, fp
 80090b4:	dd11      	ble.n	80090da <_strtod_l+0x622>
 80090b6:	2b1f      	cmp	r3, #31
 80090b8:	f340 8124 	ble.w	8009304 <_strtod_l+0x84c>
 80090bc:	2b34      	cmp	r3, #52	; 0x34
 80090be:	bfde      	ittt	le
 80090c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80090c4:	f04f 33ff 	movle.w	r3, #4294967295
 80090c8:	fa03 f202 	lslle.w	r2, r3, r2
 80090cc:	f04f 0a00 	mov.w	sl, #0
 80090d0:	bfcc      	ite	gt
 80090d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80090d6:	ea02 0b01 	andle.w	fp, r2, r1
 80090da:	2200      	movs	r2, #0
 80090dc:	2300      	movs	r3, #0
 80090de:	4650      	mov	r0, sl
 80090e0:	4659      	mov	r1, fp
 80090e2:	f7f7 fd11 	bl	8000b08 <__aeabi_dcmpeq>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d1a2      	bne.n	8009030 <_strtod_l+0x578>
 80090ea:	9b07      	ldr	r3, [sp, #28]
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	9908      	ldr	r1, [sp, #32]
 80090f0:	462b      	mov	r3, r5
 80090f2:	463a      	mov	r2, r7
 80090f4:	4620      	mov	r0, r4
 80090f6:	f001 f855 	bl	800a1a4 <__s2b>
 80090fa:	9007      	str	r0, [sp, #28]
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f43f af1f 	beq.w	8008f40 <_strtod_l+0x488>
 8009102:	9b05      	ldr	r3, [sp, #20]
 8009104:	1b9e      	subs	r6, r3, r6
 8009106:	9b06      	ldr	r3, [sp, #24]
 8009108:	2b00      	cmp	r3, #0
 800910a:	bfb4      	ite	lt
 800910c:	4633      	movlt	r3, r6
 800910e:	2300      	movge	r3, #0
 8009110:	930c      	str	r3, [sp, #48]	; 0x30
 8009112:	9b06      	ldr	r3, [sp, #24]
 8009114:	2500      	movs	r5, #0
 8009116:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800911a:	9312      	str	r3, [sp, #72]	; 0x48
 800911c:	462e      	mov	r6, r5
 800911e:	9b07      	ldr	r3, [sp, #28]
 8009120:	4620      	mov	r0, r4
 8009122:	6859      	ldr	r1, [r3, #4]
 8009124:	f000 ff96 	bl	800a054 <_Balloc>
 8009128:	9005      	str	r0, [sp, #20]
 800912a:	2800      	cmp	r0, #0
 800912c:	f43f af0c 	beq.w	8008f48 <_strtod_l+0x490>
 8009130:	9b07      	ldr	r3, [sp, #28]
 8009132:	691a      	ldr	r2, [r3, #16]
 8009134:	3202      	adds	r2, #2
 8009136:	f103 010c 	add.w	r1, r3, #12
 800913a:	0092      	lsls	r2, r2, #2
 800913c:	300c      	adds	r0, #12
 800913e:	f7ff fc77 	bl	8008a30 <memcpy>
 8009142:	ec4b ab10 	vmov	d0, sl, fp
 8009146:	aa1a      	add	r2, sp, #104	; 0x68
 8009148:	a919      	add	r1, sp, #100	; 0x64
 800914a:	4620      	mov	r0, r4
 800914c:	f001 fb70 	bl	800a830 <__d2b>
 8009150:	ec4b ab18 	vmov	d8, sl, fp
 8009154:	9018      	str	r0, [sp, #96]	; 0x60
 8009156:	2800      	cmp	r0, #0
 8009158:	f43f aef6 	beq.w	8008f48 <_strtod_l+0x490>
 800915c:	2101      	movs	r1, #1
 800915e:	4620      	mov	r0, r4
 8009160:	f001 f8ba 	bl	800a2d8 <__i2b>
 8009164:	4606      	mov	r6, r0
 8009166:	2800      	cmp	r0, #0
 8009168:	f43f aeee 	beq.w	8008f48 <_strtod_l+0x490>
 800916c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800916e:	9904      	ldr	r1, [sp, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	bfab      	itete	ge
 8009174:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009176:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009178:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800917a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800917e:	bfac      	ite	ge
 8009180:	eb03 0902 	addge.w	r9, r3, r2
 8009184:	1ad7      	sublt	r7, r2, r3
 8009186:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009188:	eba3 0801 	sub.w	r8, r3, r1
 800918c:	4490      	add	r8, r2
 800918e:	4ba1      	ldr	r3, [pc, #644]	; (8009414 <_strtod_l+0x95c>)
 8009190:	f108 38ff 	add.w	r8, r8, #4294967295
 8009194:	4598      	cmp	r8, r3
 8009196:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800919a:	f280 80c7 	bge.w	800932c <_strtod_l+0x874>
 800919e:	eba3 0308 	sub.w	r3, r3, r8
 80091a2:	2b1f      	cmp	r3, #31
 80091a4:	eba2 0203 	sub.w	r2, r2, r3
 80091a8:	f04f 0101 	mov.w	r1, #1
 80091ac:	f300 80b1 	bgt.w	8009312 <_strtod_l+0x85a>
 80091b0:	fa01 f303 	lsl.w	r3, r1, r3
 80091b4:	930d      	str	r3, [sp, #52]	; 0x34
 80091b6:	2300      	movs	r3, #0
 80091b8:	9308      	str	r3, [sp, #32]
 80091ba:	eb09 0802 	add.w	r8, r9, r2
 80091be:	9b04      	ldr	r3, [sp, #16]
 80091c0:	45c1      	cmp	r9, r8
 80091c2:	4417      	add	r7, r2
 80091c4:	441f      	add	r7, r3
 80091c6:	464b      	mov	r3, r9
 80091c8:	bfa8      	it	ge
 80091ca:	4643      	movge	r3, r8
 80091cc:	42bb      	cmp	r3, r7
 80091ce:	bfa8      	it	ge
 80091d0:	463b      	movge	r3, r7
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	bfc2      	ittt	gt
 80091d6:	eba8 0803 	subgt.w	r8, r8, r3
 80091da:	1aff      	subgt	r7, r7, r3
 80091dc:	eba9 0903 	subgt.w	r9, r9, r3
 80091e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dd17      	ble.n	8009216 <_strtod_l+0x75e>
 80091e6:	4631      	mov	r1, r6
 80091e8:	461a      	mov	r2, r3
 80091ea:	4620      	mov	r0, r4
 80091ec:	f001 f934 	bl	800a458 <__pow5mult>
 80091f0:	4606      	mov	r6, r0
 80091f2:	2800      	cmp	r0, #0
 80091f4:	f43f aea8 	beq.w	8008f48 <_strtod_l+0x490>
 80091f8:	4601      	mov	r1, r0
 80091fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80091fc:	4620      	mov	r0, r4
 80091fe:	f001 f881 	bl	800a304 <__multiply>
 8009202:	900b      	str	r0, [sp, #44]	; 0x2c
 8009204:	2800      	cmp	r0, #0
 8009206:	f43f ae9f 	beq.w	8008f48 <_strtod_l+0x490>
 800920a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800920c:	4620      	mov	r0, r4
 800920e:	f000 ff61 	bl	800a0d4 <_Bfree>
 8009212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009214:	9318      	str	r3, [sp, #96]	; 0x60
 8009216:	f1b8 0f00 	cmp.w	r8, #0
 800921a:	f300 808c 	bgt.w	8009336 <_strtod_l+0x87e>
 800921e:	9b06      	ldr	r3, [sp, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	dd08      	ble.n	8009236 <_strtod_l+0x77e>
 8009224:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009226:	9905      	ldr	r1, [sp, #20]
 8009228:	4620      	mov	r0, r4
 800922a:	f001 f915 	bl	800a458 <__pow5mult>
 800922e:	9005      	str	r0, [sp, #20]
 8009230:	2800      	cmp	r0, #0
 8009232:	f43f ae89 	beq.w	8008f48 <_strtod_l+0x490>
 8009236:	2f00      	cmp	r7, #0
 8009238:	dd08      	ble.n	800924c <_strtod_l+0x794>
 800923a:	9905      	ldr	r1, [sp, #20]
 800923c:	463a      	mov	r2, r7
 800923e:	4620      	mov	r0, r4
 8009240:	f001 f964 	bl	800a50c <__lshift>
 8009244:	9005      	str	r0, [sp, #20]
 8009246:	2800      	cmp	r0, #0
 8009248:	f43f ae7e 	beq.w	8008f48 <_strtod_l+0x490>
 800924c:	f1b9 0f00 	cmp.w	r9, #0
 8009250:	dd08      	ble.n	8009264 <_strtod_l+0x7ac>
 8009252:	4631      	mov	r1, r6
 8009254:	464a      	mov	r2, r9
 8009256:	4620      	mov	r0, r4
 8009258:	f001 f958 	bl	800a50c <__lshift>
 800925c:	4606      	mov	r6, r0
 800925e:	2800      	cmp	r0, #0
 8009260:	f43f ae72 	beq.w	8008f48 <_strtod_l+0x490>
 8009264:	9a05      	ldr	r2, [sp, #20]
 8009266:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009268:	4620      	mov	r0, r4
 800926a:	f001 f9db 	bl	800a624 <__mdiff>
 800926e:	4605      	mov	r5, r0
 8009270:	2800      	cmp	r0, #0
 8009272:	f43f ae69 	beq.w	8008f48 <_strtod_l+0x490>
 8009276:	68c3      	ldr	r3, [r0, #12]
 8009278:	930b      	str	r3, [sp, #44]	; 0x2c
 800927a:	2300      	movs	r3, #0
 800927c:	60c3      	str	r3, [r0, #12]
 800927e:	4631      	mov	r1, r6
 8009280:	f001 f9b4 	bl	800a5ec <__mcmp>
 8009284:	2800      	cmp	r0, #0
 8009286:	da60      	bge.n	800934a <_strtod_l+0x892>
 8009288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800928a:	ea53 030a 	orrs.w	r3, r3, sl
 800928e:	f040 8082 	bne.w	8009396 <_strtod_l+0x8de>
 8009292:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009296:	2b00      	cmp	r3, #0
 8009298:	d17d      	bne.n	8009396 <_strtod_l+0x8de>
 800929a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800929e:	0d1b      	lsrs	r3, r3, #20
 80092a0:	051b      	lsls	r3, r3, #20
 80092a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80092a6:	d976      	bls.n	8009396 <_strtod_l+0x8de>
 80092a8:	696b      	ldr	r3, [r5, #20]
 80092aa:	b913      	cbnz	r3, 80092b2 <_strtod_l+0x7fa>
 80092ac:	692b      	ldr	r3, [r5, #16]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	dd71      	ble.n	8009396 <_strtod_l+0x8de>
 80092b2:	4629      	mov	r1, r5
 80092b4:	2201      	movs	r2, #1
 80092b6:	4620      	mov	r0, r4
 80092b8:	f001 f928 	bl	800a50c <__lshift>
 80092bc:	4631      	mov	r1, r6
 80092be:	4605      	mov	r5, r0
 80092c0:	f001 f994 	bl	800a5ec <__mcmp>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	dd66      	ble.n	8009396 <_strtod_l+0x8de>
 80092c8:	9904      	ldr	r1, [sp, #16]
 80092ca:	4a53      	ldr	r2, [pc, #332]	; (8009418 <_strtod_l+0x960>)
 80092cc:	465b      	mov	r3, fp
 80092ce:	2900      	cmp	r1, #0
 80092d0:	f000 8081 	beq.w	80093d6 <_strtod_l+0x91e>
 80092d4:	ea02 010b 	and.w	r1, r2, fp
 80092d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092dc:	dc7b      	bgt.n	80093d6 <_strtod_l+0x91e>
 80092de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80092e2:	f77f aea9 	ble.w	8009038 <_strtod_l+0x580>
 80092e6:	4b4d      	ldr	r3, [pc, #308]	; (800941c <_strtod_l+0x964>)
 80092e8:	4650      	mov	r0, sl
 80092ea:	4659      	mov	r1, fp
 80092ec:	2200      	movs	r2, #0
 80092ee:	f7f7 f9a3 	bl	8000638 <__aeabi_dmul>
 80092f2:	460b      	mov	r3, r1
 80092f4:	4303      	orrs	r3, r0
 80092f6:	bf08      	it	eq
 80092f8:	2322      	moveq	r3, #34	; 0x22
 80092fa:	4682      	mov	sl, r0
 80092fc:	468b      	mov	fp, r1
 80092fe:	bf08      	it	eq
 8009300:	6023      	streq	r3, [r4, #0]
 8009302:	e62b      	b.n	8008f5c <_strtod_l+0x4a4>
 8009304:	f04f 32ff 	mov.w	r2, #4294967295
 8009308:	fa02 f303 	lsl.w	r3, r2, r3
 800930c:	ea03 0a0a 	and.w	sl, r3, sl
 8009310:	e6e3      	b.n	80090da <_strtod_l+0x622>
 8009312:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009316:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800931a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800931e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009322:	fa01 f308 	lsl.w	r3, r1, r8
 8009326:	9308      	str	r3, [sp, #32]
 8009328:	910d      	str	r1, [sp, #52]	; 0x34
 800932a:	e746      	b.n	80091ba <_strtod_l+0x702>
 800932c:	2300      	movs	r3, #0
 800932e:	9308      	str	r3, [sp, #32]
 8009330:	2301      	movs	r3, #1
 8009332:	930d      	str	r3, [sp, #52]	; 0x34
 8009334:	e741      	b.n	80091ba <_strtod_l+0x702>
 8009336:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009338:	4642      	mov	r2, r8
 800933a:	4620      	mov	r0, r4
 800933c:	f001 f8e6 	bl	800a50c <__lshift>
 8009340:	9018      	str	r0, [sp, #96]	; 0x60
 8009342:	2800      	cmp	r0, #0
 8009344:	f47f af6b 	bne.w	800921e <_strtod_l+0x766>
 8009348:	e5fe      	b.n	8008f48 <_strtod_l+0x490>
 800934a:	465f      	mov	r7, fp
 800934c:	d16e      	bne.n	800942c <_strtod_l+0x974>
 800934e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009350:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009354:	b342      	cbz	r2, 80093a8 <_strtod_l+0x8f0>
 8009356:	4a32      	ldr	r2, [pc, #200]	; (8009420 <_strtod_l+0x968>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d128      	bne.n	80093ae <_strtod_l+0x8f6>
 800935c:	9b04      	ldr	r3, [sp, #16]
 800935e:	4651      	mov	r1, sl
 8009360:	b1eb      	cbz	r3, 800939e <_strtod_l+0x8e6>
 8009362:	4b2d      	ldr	r3, [pc, #180]	; (8009418 <_strtod_l+0x960>)
 8009364:	403b      	ands	r3, r7
 8009366:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800936a:	f04f 32ff 	mov.w	r2, #4294967295
 800936e:	d819      	bhi.n	80093a4 <_strtod_l+0x8ec>
 8009370:	0d1b      	lsrs	r3, r3, #20
 8009372:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009376:	fa02 f303 	lsl.w	r3, r2, r3
 800937a:	4299      	cmp	r1, r3
 800937c:	d117      	bne.n	80093ae <_strtod_l+0x8f6>
 800937e:	4b29      	ldr	r3, [pc, #164]	; (8009424 <_strtod_l+0x96c>)
 8009380:	429f      	cmp	r7, r3
 8009382:	d102      	bne.n	800938a <_strtod_l+0x8d2>
 8009384:	3101      	adds	r1, #1
 8009386:	f43f addf 	beq.w	8008f48 <_strtod_l+0x490>
 800938a:	4b23      	ldr	r3, [pc, #140]	; (8009418 <_strtod_l+0x960>)
 800938c:	403b      	ands	r3, r7
 800938e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009392:	f04f 0a00 	mov.w	sl, #0
 8009396:	9b04      	ldr	r3, [sp, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1a4      	bne.n	80092e6 <_strtod_l+0x82e>
 800939c:	e5de      	b.n	8008f5c <_strtod_l+0x4a4>
 800939e:	f04f 33ff 	mov.w	r3, #4294967295
 80093a2:	e7ea      	b.n	800937a <_strtod_l+0x8c2>
 80093a4:	4613      	mov	r3, r2
 80093a6:	e7e8      	b.n	800937a <_strtod_l+0x8c2>
 80093a8:	ea53 030a 	orrs.w	r3, r3, sl
 80093ac:	d08c      	beq.n	80092c8 <_strtod_l+0x810>
 80093ae:	9b08      	ldr	r3, [sp, #32]
 80093b0:	b1db      	cbz	r3, 80093ea <_strtod_l+0x932>
 80093b2:	423b      	tst	r3, r7
 80093b4:	d0ef      	beq.n	8009396 <_strtod_l+0x8de>
 80093b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b8:	9a04      	ldr	r2, [sp, #16]
 80093ba:	4650      	mov	r0, sl
 80093bc:	4659      	mov	r1, fp
 80093be:	b1c3      	cbz	r3, 80093f2 <_strtod_l+0x93a>
 80093c0:	f7ff fb5b 	bl	8008a7a <sulp>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	ec51 0b18 	vmov	r0, r1, d8
 80093cc:	f7f6 ff7e 	bl	80002cc <__adddf3>
 80093d0:	4682      	mov	sl, r0
 80093d2:	468b      	mov	fp, r1
 80093d4:	e7df      	b.n	8009396 <_strtod_l+0x8de>
 80093d6:	4013      	ands	r3, r2
 80093d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80093dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80093e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80093e4:	f04f 3aff 	mov.w	sl, #4294967295
 80093e8:	e7d5      	b.n	8009396 <_strtod_l+0x8de>
 80093ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ec:	ea13 0f0a 	tst.w	r3, sl
 80093f0:	e7e0      	b.n	80093b4 <_strtod_l+0x8fc>
 80093f2:	f7ff fb42 	bl	8008a7a <sulp>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	ec51 0b18 	vmov	r0, r1, d8
 80093fe:	f7f6 ff63 	bl	80002c8 <__aeabi_dsub>
 8009402:	2200      	movs	r2, #0
 8009404:	2300      	movs	r3, #0
 8009406:	4682      	mov	sl, r0
 8009408:	468b      	mov	fp, r1
 800940a:	f7f7 fb7d 	bl	8000b08 <__aeabi_dcmpeq>
 800940e:	2800      	cmp	r0, #0
 8009410:	d0c1      	beq.n	8009396 <_strtod_l+0x8de>
 8009412:	e611      	b.n	8009038 <_strtod_l+0x580>
 8009414:	fffffc02 	.word	0xfffffc02
 8009418:	7ff00000 	.word	0x7ff00000
 800941c:	39500000 	.word	0x39500000
 8009420:	000fffff 	.word	0x000fffff
 8009424:	7fefffff 	.word	0x7fefffff
 8009428:	0800d070 	.word	0x0800d070
 800942c:	4631      	mov	r1, r6
 800942e:	4628      	mov	r0, r5
 8009430:	f001 fa5a 	bl	800a8e8 <__ratio>
 8009434:	ec59 8b10 	vmov	r8, r9, d0
 8009438:	ee10 0a10 	vmov	r0, s0
 800943c:	2200      	movs	r2, #0
 800943e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009442:	4649      	mov	r1, r9
 8009444:	f7f7 fb74 	bl	8000b30 <__aeabi_dcmple>
 8009448:	2800      	cmp	r0, #0
 800944a:	d07a      	beq.n	8009542 <_strtod_l+0xa8a>
 800944c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d04a      	beq.n	80094e8 <_strtod_l+0xa30>
 8009452:	4b95      	ldr	r3, [pc, #596]	; (80096a8 <_strtod_l+0xbf0>)
 8009454:	2200      	movs	r2, #0
 8009456:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800945a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80096a8 <_strtod_l+0xbf0>
 800945e:	f04f 0800 	mov.w	r8, #0
 8009462:	4b92      	ldr	r3, [pc, #584]	; (80096ac <_strtod_l+0xbf4>)
 8009464:	403b      	ands	r3, r7
 8009466:	930d      	str	r3, [sp, #52]	; 0x34
 8009468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800946a:	4b91      	ldr	r3, [pc, #580]	; (80096b0 <_strtod_l+0xbf8>)
 800946c:	429a      	cmp	r2, r3
 800946e:	f040 80b0 	bne.w	80095d2 <_strtod_l+0xb1a>
 8009472:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009476:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800947a:	ec4b ab10 	vmov	d0, sl, fp
 800947e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009482:	f001 f959 	bl	800a738 <__ulp>
 8009486:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800948a:	ec53 2b10 	vmov	r2, r3, d0
 800948e:	f7f7 f8d3 	bl	8000638 <__aeabi_dmul>
 8009492:	4652      	mov	r2, sl
 8009494:	465b      	mov	r3, fp
 8009496:	f7f6 ff19 	bl	80002cc <__adddf3>
 800949a:	460b      	mov	r3, r1
 800949c:	4983      	ldr	r1, [pc, #524]	; (80096ac <_strtod_l+0xbf4>)
 800949e:	4a85      	ldr	r2, [pc, #532]	; (80096b4 <_strtod_l+0xbfc>)
 80094a0:	4019      	ands	r1, r3
 80094a2:	4291      	cmp	r1, r2
 80094a4:	4682      	mov	sl, r0
 80094a6:	d960      	bls.n	800956a <_strtod_l+0xab2>
 80094a8:	ee18 3a90 	vmov	r3, s17
 80094ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d104      	bne.n	80094be <_strtod_l+0xa06>
 80094b4:	ee18 3a10 	vmov	r3, s16
 80094b8:	3301      	adds	r3, #1
 80094ba:	f43f ad45 	beq.w	8008f48 <_strtod_l+0x490>
 80094be:	f8df b200 	ldr.w	fp, [pc, #512]	; 80096c0 <_strtod_l+0xc08>
 80094c2:	f04f 3aff 	mov.w	sl, #4294967295
 80094c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094c8:	4620      	mov	r0, r4
 80094ca:	f000 fe03 	bl	800a0d4 <_Bfree>
 80094ce:	9905      	ldr	r1, [sp, #20]
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fdff 	bl	800a0d4 <_Bfree>
 80094d6:	4631      	mov	r1, r6
 80094d8:	4620      	mov	r0, r4
 80094da:	f000 fdfb 	bl	800a0d4 <_Bfree>
 80094de:	4629      	mov	r1, r5
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fdf7 	bl	800a0d4 <_Bfree>
 80094e6:	e61a      	b.n	800911e <_strtod_l+0x666>
 80094e8:	f1ba 0f00 	cmp.w	sl, #0
 80094ec:	d11b      	bne.n	8009526 <_strtod_l+0xa6e>
 80094ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094f2:	b9f3      	cbnz	r3, 8009532 <_strtod_l+0xa7a>
 80094f4:	4b6c      	ldr	r3, [pc, #432]	; (80096a8 <_strtod_l+0xbf0>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	4640      	mov	r0, r8
 80094fa:	4649      	mov	r1, r9
 80094fc:	f7f7 fb0e 	bl	8000b1c <__aeabi_dcmplt>
 8009500:	b9d0      	cbnz	r0, 8009538 <_strtod_l+0xa80>
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	4b6c      	ldr	r3, [pc, #432]	; (80096b8 <_strtod_l+0xc00>)
 8009508:	2200      	movs	r2, #0
 800950a:	f7f7 f895 	bl	8000638 <__aeabi_dmul>
 800950e:	4680      	mov	r8, r0
 8009510:	4689      	mov	r9, r1
 8009512:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009516:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800951a:	9315      	str	r3, [sp, #84]	; 0x54
 800951c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009520:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009524:	e79d      	b.n	8009462 <_strtod_l+0x9aa>
 8009526:	f1ba 0f01 	cmp.w	sl, #1
 800952a:	d102      	bne.n	8009532 <_strtod_l+0xa7a>
 800952c:	2f00      	cmp	r7, #0
 800952e:	f43f ad83 	beq.w	8009038 <_strtod_l+0x580>
 8009532:	4b62      	ldr	r3, [pc, #392]	; (80096bc <_strtod_l+0xc04>)
 8009534:	2200      	movs	r2, #0
 8009536:	e78e      	b.n	8009456 <_strtod_l+0x99e>
 8009538:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80096b8 <_strtod_l+0xc00>
 800953c:	f04f 0800 	mov.w	r8, #0
 8009540:	e7e7      	b.n	8009512 <_strtod_l+0xa5a>
 8009542:	4b5d      	ldr	r3, [pc, #372]	; (80096b8 <_strtod_l+0xc00>)
 8009544:	4640      	mov	r0, r8
 8009546:	4649      	mov	r1, r9
 8009548:	2200      	movs	r2, #0
 800954a:	f7f7 f875 	bl	8000638 <__aeabi_dmul>
 800954e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009550:	4680      	mov	r8, r0
 8009552:	4689      	mov	r9, r1
 8009554:	b933      	cbnz	r3, 8009564 <_strtod_l+0xaac>
 8009556:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800955a:	900e      	str	r0, [sp, #56]	; 0x38
 800955c:	930f      	str	r3, [sp, #60]	; 0x3c
 800955e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009562:	e7dd      	b.n	8009520 <_strtod_l+0xa68>
 8009564:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009568:	e7f9      	b.n	800955e <_strtod_l+0xaa6>
 800956a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800956e:	9b04      	ldr	r3, [sp, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1a8      	bne.n	80094c6 <_strtod_l+0xa0e>
 8009574:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009578:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800957a:	0d1b      	lsrs	r3, r3, #20
 800957c:	051b      	lsls	r3, r3, #20
 800957e:	429a      	cmp	r2, r3
 8009580:	d1a1      	bne.n	80094c6 <_strtod_l+0xa0e>
 8009582:	4640      	mov	r0, r8
 8009584:	4649      	mov	r1, r9
 8009586:	f7f7 fba1 	bl	8000ccc <__aeabi_d2lz>
 800958a:	f7f7 f827 	bl	80005dc <__aeabi_l2d>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4640      	mov	r0, r8
 8009594:	4649      	mov	r1, r9
 8009596:	f7f6 fe97 	bl	80002c8 <__aeabi_dsub>
 800959a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800959c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095a0:	ea43 030a 	orr.w	r3, r3, sl
 80095a4:	4313      	orrs	r3, r2
 80095a6:	4680      	mov	r8, r0
 80095a8:	4689      	mov	r9, r1
 80095aa:	d055      	beq.n	8009658 <_strtod_l+0xba0>
 80095ac:	a336      	add	r3, pc, #216	; (adr r3, 8009688 <_strtod_l+0xbd0>)
 80095ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b2:	f7f7 fab3 	bl	8000b1c <__aeabi_dcmplt>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f47f acd0 	bne.w	8008f5c <_strtod_l+0x4a4>
 80095bc:	a334      	add	r3, pc, #208	; (adr r3, 8009690 <_strtod_l+0xbd8>)
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	4640      	mov	r0, r8
 80095c4:	4649      	mov	r1, r9
 80095c6:	f7f7 fac7 	bl	8000b58 <__aeabi_dcmpgt>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	f43f af7b 	beq.w	80094c6 <_strtod_l+0xa0e>
 80095d0:	e4c4      	b.n	8008f5c <_strtod_l+0x4a4>
 80095d2:	9b04      	ldr	r3, [sp, #16]
 80095d4:	b333      	cbz	r3, 8009624 <_strtod_l+0xb6c>
 80095d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095dc:	d822      	bhi.n	8009624 <_strtod_l+0xb6c>
 80095de:	a32e      	add	r3, pc, #184	; (adr r3, 8009698 <_strtod_l+0xbe0>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	4640      	mov	r0, r8
 80095e6:	4649      	mov	r1, r9
 80095e8:	f7f7 faa2 	bl	8000b30 <__aeabi_dcmple>
 80095ec:	b1a0      	cbz	r0, 8009618 <_strtod_l+0xb60>
 80095ee:	4649      	mov	r1, r9
 80095f0:	4640      	mov	r0, r8
 80095f2:	f7f7 fae3 	bl	8000bbc <__aeabi_d2uiz>
 80095f6:	2801      	cmp	r0, #1
 80095f8:	bf38      	it	cc
 80095fa:	2001      	movcc	r0, #1
 80095fc:	f7f6 ffa2 	bl	8000544 <__aeabi_ui2d>
 8009600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009602:	4680      	mov	r8, r0
 8009604:	4689      	mov	r9, r1
 8009606:	bb23      	cbnz	r3, 8009652 <_strtod_l+0xb9a>
 8009608:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800960c:	9010      	str	r0, [sp, #64]	; 0x40
 800960e:	9311      	str	r3, [sp, #68]	; 0x44
 8009610:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009614:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800961c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009620:	1a9b      	subs	r3, r3, r2
 8009622:	9309      	str	r3, [sp, #36]	; 0x24
 8009624:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009628:	eeb0 0a48 	vmov.f32	s0, s16
 800962c:	eef0 0a68 	vmov.f32	s1, s17
 8009630:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009634:	f001 f880 	bl	800a738 <__ulp>
 8009638:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800963c:	ec53 2b10 	vmov	r2, r3, d0
 8009640:	f7f6 fffa 	bl	8000638 <__aeabi_dmul>
 8009644:	ec53 2b18 	vmov	r2, r3, d8
 8009648:	f7f6 fe40 	bl	80002cc <__adddf3>
 800964c:	4682      	mov	sl, r0
 800964e:	468b      	mov	fp, r1
 8009650:	e78d      	b.n	800956e <_strtod_l+0xab6>
 8009652:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009656:	e7db      	b.n	8009610 <_strtod_l+0xb58>
 8009658:	a311      	add	r3, pc, #68	; (adr r3, 80096a0 <_strtod_l+0xbe8>)
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	f7f7 fa5d 	bl	8000b1c <__aeabi_dcmplt>
 8009662:	e7b2      	b.n	80095ca <_strtod_l+0xb12>
 8009664:	2300      	movs	r3, #0
 8009666:	930a      	str	r3, [sp, #40]	; 0x28
 8009668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800966a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	f7ff ba6b 	b.w	8008b48 <_strtod_l+0x90>
 8009672:	2a65      	cmp	r2, #101	; 0x65
 8009674:	f43f ab5f 	beq.w	8008d36 <_strtod_l+0x27e>
 8009678:	2a45      	cmp	r2, #69	; 0x45
 800967a:	f43f ab5c 	beq.w	8008d36 <_strtod_l+0x27e>
 800967e:	2301      	movs	r3, #1
 8009680:	f7ff bb94 	b.w	8008dac <_strtod_l+0x2f4>
 8009684:	f3af 8000 	nop.w
 8009688:	94a03595 	.word	0x94a03595
 800968c:	3fdfffff 	.word	0x3fdfffff
 8009690:	35afe535 	.word	0x35afe535
 8009694:	3fe00000 	.word	0x3fe00000
 8009698:	ffc00000 	.word	0xffc00000
 800969c:	41dfffff 	.word	0x41dfffff
 80096a0:	94a03595 	.word	0x94a03595
 80096a4:	3fcfffff 	.word	0x3fcfffff
 80096a8:	3ff00000 	.word	0x3ff00000
 80096ac:	7ff00000 	.word	0x7ff00000
 80096b0:	7fe00000 	.word	0x7fe00000
 80096b4:	7c9fffff 	.word	0x7c9fffff
 80096b8:	3fe00000 	.word	0x3fe00000
 80096bc:	bff00000 	.word	0xbff00000
 80096c0:	7fefffff 	.word	0x7fefffff

080096c4 <strtod>:
 80096c4:	460a      	mov	r2, r1
 80096c6:	4601      	mov	r1, r0
 80096c8:	4802      	ldr	r0, [pc, #8]	; (80096d4 <strtod+0x10>)
 80096ca:	4b03      	ldr	r3, [pc, #12]	; (80096d8 <strtod+0x14>)
 80096cc:	6800      	ldr	r0, [r0, #0]
 80096ce:	f7ff b9f3 	b.w	8008ab8 <_strtod_l>
 80096d2:	bf00      	nop
 80096d4:	2000001c 	.word	0x2000001c
 80096d8:	20000084 	.word	0x20000084

080096dc <print_e>:
 80096dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096de:	b087      	sub	sp, #28
 80096e0:	ec43 2b10 	vmov	d0, r2, r3
 80096e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80096e6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80096ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80096ec:	ab04      	add	r3, sp, #16
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	ab03      	add	r3, sp, #12
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	1c62      	adds	r2, r4, #1
 80096f6:	ab05      	add	r3, sp, #20
 80096f8:	460f      	mov	r7, r1
 80096fa:	2102      	movs	r1, #2
 80096fc:	f001 fcb4 	bl	800b068 <_dtoa_r>
 8009700:	9a05      	ldr	r2, [sp, #20]
 8009702:	f242 730f 	movw	r3, #9999	; 0x270f
 8009706:	429a      	cmp	r2, r3
 8009708:	d105      	bne.n	8009716 <print_e+0x3a>
 800970a:	4601      	mov	r1, r0
 800970c:	4638      	mov	r0, r7
 800970e:	f001 fbd7 	bl	800aec0 <strcpy>
 8009712:	b007      	add	sp, #28
 8009714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009716:	463b      	mov	r3, r7
 8009718:	7801      	ldrb	r1, [r0, #0]
 800971a:	f803 1b01 	strb.w	r1, [r3], #1
 800971e:	2c00      	cmp	r4, #0
 8009720:	bfc8      	it	gt
 8009722:	2501      	movgt	r5, #1
 8009724:	212e      	movs	r1, #46	; 0x2e
 8009726:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800972a:	b10f      	cbz	r7, 8009730 <print_e+0x54>
 800972c:	2c00      	cmp	r4, #0
 800972e:	dc37      	bgt.n	80097a0 <print_e+0xc4>
 8009730:	2e67      	cmp	r6, #103	; 0x67
 8009732:	d046      	beq.n	80097c2 <print_e+0xe6>
 8009734:	2e47      	cmp	r6, #71	; 0x47
 8009736:	d046      	beq.n	80097c6 <print_e+0xea>
 8009738:	212e      	movs	r1, #46	; 0x2e
 800973a:	2030      	movs	r0, #48	; 0x30
 800973c:	2c00      	cmp	r4, #0
 800973e:	dc38      	bgt.n	80097b2 <print_e+0xd6>
 8009740:	1e51      	subs	r1, r2, #1
 8009742:	2900      	cmp	r1, #0
 8009744:	bfb8      	it	lt
 8009746:	f1c2 0201 	rsblt	r2, r2, #1
 800974a:	4618      	mov	r0, r3
 800974c:	9105      	str	r1, [sp, #20]
 800974e:	bfac      	ite	ge
 8009750:	222b      	movge	r2, #43	; 0x2b
 8009752:	9205      	strlt	r2, [sp, #20]
 8009754:	f800 6b02 	strb.w	r6, [r0], #2
 8009758:	bfa8      	it	ge
 800975a:	705a      	strbge	r2, [r3, #1]
 800975c:	9a05      	ldr	r2, [sp, #20]
 800975e:	bfbc      	itt	lt
 8009760:	212d      	movlt	r1, #45	; 0x2d
 8009762:	7059      	strblt	r1, [r3, #1]
 8009764:	2a63      	cmp	r2, #99	; 0x63
 8009766:	dd0b      	ble.n	8009780 <print_e+0xa4>
 8009768:	2164      	movs	r1, #100	; 0x64
 800976a:	fb92 f1f1 	sdiv	r1, r2, r1
 800976e:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8009772:	1cd8      	adds	r0, r3, #3
 8009774:	709c      	strb	r4, [r3, #2]
 8009776:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800977a:	fb03 2201 	mla	r2, r3, r1, r2
 800977e:	9205      	str	r2, [sp, #20]
 8009780:	9b05      	ldr	r3, [sp, #20]
 8009782:	220a      	movs	r2, #10
 8009784:	fb93 f2f2 	sdiv	r2, r3, r2
 8009788:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800978c:	7001      	strb	r1, [r0, #0]
 800978e:	f06f 0109 	mvn.w	r1, #9
 8009792:	fb01 3302 	mla	r3, r1, r2, r3
 8009796:	3330      	adds	r3, #48	; 0x30
 8009798:	7043      	strb	r3, [r0, #1]
 800979a:	2300      	movs	r3, #0
 800979c:	7083      	strb	r3, [r0, #2]
 800979e:	e7b8      	b.n	8009712 <print_e+0x36>
 80097a0:	b10d      	cbz	r5, 80097a6 <print_e+0xca>
 80097a2:	f803 1b01 	strb.w	r1, [r3], #1
 80097a6:	7805      	ldrb	r5, [r0, #0]
 80097a8:	f803 5b01 	strb.w	r5, [r3], #1
 80097ac:	3c01      	subs	r4, #1
 80097ae:	2500      	movs	r5, #0
 80097b0:	e7b9      	b.n	8009726 <print_e+0x4a>
 80097b2:	b10d      	cbz	r5, 80097b8 <print_e+0xdc>
 80097b4:	f803 1b01 	strb.w	r1, [r3], #1
 80097b8:	f803 0b01 	strb.w	r0, [r3], #1
 80097bc:	3c01      	subs	r4, #1
 80097be:	2500      	movs	r5, #0
 80097c0:	e7bc      	b.n	800973c <print_e+0x60>
 80097c2:	2665      	movs	r6, #101	; 0x65
 80097c4:	e7bc      	b.n	8009740 <print_e+0x64>
 80097c6:	2645      	movs	r6, #69	; 0x45
 80097c8:	e7ba      	b.n	8009740 <print_e+0x64>
 80097ca:	0000      	movs	r0, r0
 80097cc:	0000      	movs	r0, r0
	...

080097d0 <_gcvt>:
 80097d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d4:	ec55 4b10 	vmov	r4, r5, d0
 80097d8:	b088      	sub	sp, #32
 80097da:	4681      	mov	r9, r0
 80097dc:	4688      	mov	r8, r1
 80097de:	4616      	mov	r6, r2
 80097e0:	469a      	mov	sl, r3
 80097e2:	ee10 0a10 	vmov	r0, s0
 80097e6:	2200      	movs	r2, #0
 80097e8:	2300      	movs	r3, #0
 80097ea:	4629      	mov	r1, r5
 80097ec:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80097ee:	f7f7 f995 	bl	8000b1c <__aeabi_dcmplt>
 80097f2:	b110      	cbz	r0, 80097fa <_gcvt+0x2a>
 80097f4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80097f8:	461d      	mov	r5, r3
 80097fa:	2200      	movs	r2, #0
 80097fc:	2300      	movs	r3, #0
 80097fe:	4620      	mov	r0, r4
 8009800:	4629      	mov	r1, r5
 8009802:	f7f7 f981 	bl	8000b08 <__aeabi_dcmpeq>
 8009806:	b138      	cbz	r0, 8009818 <_gcvt+0x48>
 8009808:	2330      	movs	r3, #48	; 0x30
 800980a:	7033      	strb	r3, [r6, #0]
 800980c:	2300      	movs	r3, #0
 800980e:	7073      	strb	r3, [r6, #1]
 8009810:	4630      	mov	r0, r6
 8009812:	b008      	add	sp, #32
 8009814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009818:	a34b      	add	r3, pc, #300	; (adr r3, 8009948 <_gcvt+0x178>)
 800981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981e:	4620      	mov	r0, r4
 8009820:	4629      	mov	r1, r5
 8009822:	f7f7 f985 	bl	8000b30 <__aeabi_dcmple>
 8009826:	b158      	cbz	r0, 8009840 <_gcvt+0x70>
 8009828:	f108 31ff 	add.w	r1, r8, #4294967295
 800982c:	9100      	str	r1, [sp, #0]
 800982e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8009832:	4622      	mov	r2, r4
 8009834:	462b      	mov	r3, r5
 8009836:	4631      	mov	r1, r6
 8009838:	4648      	mov	r0, r9
 800983a:	f7ff ff4f 	bl	80096dc <print_e>
 800983e:	e7e7      	b.n	8009810 <_gcvt+0x40>
 8009840:	4640      	mov	r0, r8
 8009842:	f001 f885 	bl	800a950 <_mprec_log10>
 8009846:	4622      	mov	r2, r4
 8009848:	ec51 0b10 	vmov	r0, r1, d0
 800984c:	462b      	mov	r3, r5
 800984e:	f7f7 f96f 	bl	8000b30 <__aeabi_dcmple>
 8009852:	2800      	cmp	r0, #0
 8009854:	d1e8      	bne.n	8009828 <_gcvt+0x58>
 8009856:	ab07      	add	r3, sp, #28
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	ab06      	add	r3, sp, #24
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	4642      	mov	r2, r8
 8009860:	ab05      	add	r3, sp, #20
 8009862:	ec45 4b10 	vmov	d0, r4, r5
 8009866:	2102      	movs	r1, #2
 8009868:	4648      	mov	r0, r9
 800986a:	f001 fbfd 	bl	800b068 <_dtoa_r>
 800986e:	9a05      	ldr	r2, [sp, #20]
 8009870:	f242 730f 	movw	r3, #9999	; 0x270f
 8009874:	429a      	cmp	r2, r3
 8009876:	d00e      	beq.n	8009896 <_gcvt+0xc6>
 8009878:	4633      	mov	r3, r6
 800987a:	44b0      	add	r8, r6
 800987c:	4605      	mov	r5, r0
 800987e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009882:	9c05      	ldr	r4, [sp, #20]
 8009884:	eba8 0203 	sub.w	r2, r8, r3
 8009888:	b109      	cbz	r1, 800988e <_gcvt+0xbe>
 800988a:	2c00      	cmp	r4, #0
 800988c:	dc08      	bgt.n	80098a0 <_gcvt+0xd0>
 800988e:	2100      	movs	r1, #0
 8009890:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8009894:	e00d      	b.n	80098b2 <_gcvt+0xe2>
 8009896:	4601      	mov	r1, r0
 8009898:	4630      	mov	r0, r6
 800989a:	f001 fb11 	bl	800aec0 <strcpy>
 800989e:	e7b7      	b.n	8009810 <_gcvt+0x40>
 80098a0:	3c01      	subs	r4, #1
 80098a2:	f803 1b01 	strb.w	r1, [r3], #1
 80098a6:	9405      	str	r4, [sp, #20]
 80098a8:	e7e8      	b.n	800987c <_gcvt+0xac>
 80098aa:	f803 cb01 	strb.w	ip, [r3], #1
 80098ae:	3a01      	subs	r2, #1
 80098b0:	2101      	movs	r1, #1
 80098b2:	2c00      	cmp	r4, #0
 80098b4:	4620      	mov	r0, r4
 80098b6:	dc2a      	bgt.n	800990e <_gcvt+0x13e>
 80098b8:	b101      	cbz	r1, 80098bc <_gcvt+0xec>
 80098ba:	9405      	str	r4, [sp, #20]
 80098bc:	b90f      	cbnz	r7, 80098c2 <_gcvt+0xf2>
 80098be:	7829      	ldrb	r1, [r5, #0]
 80098c0:	b311      	cbz	r1, 8009908 <_gcvt+0x138>
 80098c2:	42b3      	cmp	r3, r6
 80098c4:	bf04      	itt	eq
 80098c6:	2130      	moveq	r1, #48	; 0x30
 80098c8:	f803 1b01 	strbeq.w	r1, [r3], #1
 80098cc:	212e      	movs	r1, #46	; 0x2e
 80098ce:	7019      	strb	r1, [r3, #0]
 80098d0:	9905      	ldr	r1, [sp, #20]
 80098d2:	4618      	mov	r0, r3
 80098d4:	2400      	movs	r4, #0
 80098d6:	eba1 0c03 	sub.w	ip, r1, r3
 80098da:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80098de:	eb1c 0f00 	cmn.w	ip, r0
 80098e2:	d41c      	bmi.n	800991e <_gcvt+0x14e>
 80098e4:	2900      	cmp	r1, #0
 80098e6:	f1c1 0000 	rsb	r0, r1, #0
 80098ea:	bfc8      	it	gt
 80098ec:	2000      	movgt	r0, #0
 80098ee:	f100 0c01 	add.w	ip, r0, #1
 80098f2:	4463      	add	r3, ip
 80098f4:	4401      	add	r1, r0
 80098f6:	b104      	cbz	r4, 80098fa <_gcvt+0x12a>
 80098f8:	9105      	str	r1, [sp, #20]
 80098fa:	1e69      	subs	r1, r5, #1
 80098fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009900:	b108      	cbz	r0, 8009906 <_gcvt+0x136>
 8009902:	2a00      	cmp	r2, #0
 8009904:	dc0f      	bgt.n	8009926 <_gcvt+0x156>
 8009906:	b9df      	cbnz	r7, 8009940 <_gcvt+0x170>
 8009908:	2200      	movs	r2, #0
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	e780      	b.n	8009810 <_gcvt+0x40>
 800990e:	2a00      	cmp	r2, #0
 8009910:	f104 34ff 	add.w	r4, r4, #4294967295
 8009914:	dcc9      	bgt.n	80098aa <_gcvt+0xda>
 8009916:	2900      	cmp	r1, #0
 8009918:	d0d0      	beq.n	80098bc <_gcvt+0xec>
 800991a:	9005      	str	r0, [sp, #20]
 800991c:	e7ce      	b.n	80098bc <_gcvt+0xec>
 800991e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8009922:	2401      	movs	r4, #1
 8009924:	e7db      	b.n	80098de <_gcvt+0x10e>
 8009926:	f803 0b01 	strb.w	r0, [r3], #1
 800992a:	3a01      	subs	r2, #1
 800992c:	e7e6      	b.n	80098fc <_gcvt+0x12c>
 800992e:	f801 5b01 	strb.w	r5, [r1], #1
 8009932:	1a60      	subs	r0, r4, r1
 8009934:	2800      	cmp	r0, #0
 8009936:	dcfa      	bgt.n	800992e <_gcvt+0x15e>
 8009938:	2a00      	cmp	r2, #0
 800993a:	bfa8      	it	ge
 800993c:	189b      	addge	r3, r3, r2
 800993e:	e7e3      	b.n	8009908 <_gcvt+0x138>
 8009940:	4619      	mov	r1, r3
 8009942:	189c      	adds	r4, r3, r2
 8009944:	2530      	movs	r5, #48	; 0x30
 8009946:	e7f4      	b.n	8009932 <_gcvt+0x162>
 8009948:	eb1c432d 	.word	0xeb1c432d
 800994c:	3f1a36e2 	.word	0x3f1a36e2

08009950 <rshift>:
 8009950:	6903      	ldr	r3, [r0, #16]
 8009952:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800995a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800995e:	f100 0414 	add.w	r4, r0, #20
 8009962:	dd45      	ble.n	80099f0 <rshift+0xa0>
 8009964:	f011 011f 	ands.w	r1, r1, #31
 8009968:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800996c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009970:	d10c      	bne.n	800998c <rshift+0x3c>
 8009972:	f100 0710 	add.w	r7, r0, #16
 8009976:	4629      	mov	r1, r5
 8009978:	42b1      	cmp	r1, r6
 800997a:	d334      	bcc.n	80099e6 <rshift+0x96>
 800997c:	1a9b      	subs	r3, r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	1eea      	subs	r2, r5, #3
 8009982:	4296      	cmp	r6, r2
 8009984:	bf38      	it	cc
 8009986:	2300      	movcc	r3, #0
 8009988:	4423      	add	r3, r4
 800998a:	e015      	b.n	80099b8 <rshift+0x68>
 800998c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009990:	f1c1 0820 	rsb	r8, r1, #32
 8009994:	40cf      	lsrs	r7, r1
 8009996:	f105 0e04 	add.w	lr, r5, #4
 800999a:	46a1      	mov	r9, r4
 800999c:	4576      	cmp	r6, lr
 800999e:	46f4      	mov	ip, lr
 80099a0:	d815      	bhi.n	80099ce <rshift+0x7e>
 80099a2:	1a9a      	subs	r2, r3, r2
 80099a4:	0092      	lsls	r2, r2, #2
 80099a6:	3a04      	subs	r2, #4
 80099a8:	3501      	adds	r5, #1
 80099aa:	42ae      	cmp	r6, r5
 80099ac:	bf38      	it	cc
 80099ae:	2200      	movcc	r2, #0
 80099b0:	18a3      	adds	r3, r4, r2
 80099b2:	50a7      	str	r7, [r4, r2]
 80099b4:	b107      	cbz	r7, 80099b8 <rshift+0x68>
 80099b6:	3304      	adds	r3, #4
 80099b8:	1b1a      	subs	r2, r3, r4
 80099ba:	42a3      	cmp	r3, r4
 80099bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80099c0:	bf08      	it	eq
 80099c2:	2300      	moveq	r3, #0
 80099c4:	6102      	str	r2, [r0, #16]
 80099c6:	bf08      	it	eq
 80099c8:	6143      	streq	r3, [r0, #20]
 80099ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099ce:	f8dc c000 	ldr.w	ip, [ip]
 80099d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80099d6:	ea4c 0707 	orr.w	r7, ip, r7
 80099da:	f849 7b04 	str.w	r7, [r9], #4
 80099de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80099e2:	40cf      	lsrs	r7, r1
 80099e4:	e7da      	b.n	800999c <rshift+0x4c>
 80099e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80099ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80099ee:	e7c3      	b.n	8009978 <rshift+0x28>
 80099f0:	4623      	mov	r3, r4
 80099f2:	e7e1      	b.n	80099b8 <rshift+0x68>

080099f4 <__hexdig_fun>:
 80099f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80099f8:	2b09      	cmp	r3, #9
 80099fa:	d802      	bhi.n	8009a02 <__hexdig_fun+0xe>
 80099fc:	3820      	subs	r0, #32
 80099fe:	b2c0      	uxtb	r0, r0
 8009a00:	4770      	bx	lr
 8009a02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a06:	2b05      	cmp	r3, #5
 8009a08:	d801      	bhi.n	8009a0e <__hexdig_fun+0x1a>
 8009a0a:	3847      	subs	r0, #71	; 0x47
 8009a0c:	e7f7      	b.n	80099fe <__hexdig_fun+0xa>
 8009a0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a12:	2b05      	cmp	r3, #5
 8009a14:	d801      	bhi.n	8009a1a <__hexdig_fun+0x26>
 8009a16:	3827      	subs	r0, #39	; 0x27
 8009a18:	e7f1      	b.n	80099fe <__hexdig_fun+0xa>
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	4770      	bx	lr
	...

08009a20 <__gethex>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	ed2d 8b02 	vpush	{d8}
 8009a28:	b089      	sub	sp, #36	; 0x24
 8009a2a:	ee08 0a10 	vmov	s16, r0
 8009a2e:	9304      	str	r3, [sp, #16]
 8009a30:	4bb4      	ldr	r3, [pc, #720]	; (8009d04 <__gethex+0x2e4>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	4618      	mov	r0, r3
 8009a38:	468b      	mov	fp, r1
 8009a3a:	4690      	mov	r8, r2
 8009a3c:	f7f6 fbe8 	bl	8000210 <strlen>
 8009a40:	9b01      	ldr	r3, [sp, #4]
 8009a42:	f8db 2000 	ldr.w	r2, [fp]
 8009a46:	4403      	add	r3, r0
 8009a48:	4682      	mov	sl, r0
 8009a4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a4e:	9305      	str	r3, [sp, #20]
 8009a50:	1c93      	adds	r3, r2, #2
 8009a52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009a56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009a5a:	32fe      	adds	r2, #254	; 0xfe
 8009a5c:	18d1      	adds	r1, r2, r3
 8009a5e:	461f      	mov	r7, r3
 8009a60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a64:	9100      	str	r1, [sp, #0]
 8009a66:	2830      	cmp	r0, #48	; 0x30
 8009a68:	d0f8      	beq.n	8009a5c <__gethex+0x3c>
 8009a6a:	f7ff ffc3 	bl	80099f4 <__hexdig_fun>
 8009a6e:	4604      	mov	r4, r0
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d13a      	bne.n	8009aea <__gethex+0xca>
 8009a74:	9901      	ldr	r1, [sp, #4]
 8009a76:	4652      	mov	r2, sl
 8009a78:	4638      	mov	r0, r7
 8009a7a:	f001 fa29 	bl	800aed0 <strncmp>
 8009a7e:	4605      	mov	r5, r0
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d168      	bne.n	8009b56 <__gethex+0x136>
 8009a84:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009a88:	eb07 060a 	add.w	r6, r7, sl
 8009a8c:	f7ff ffb2 	bl	80099f4 <__hexdig_fun>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d062      	beq.n	8009b5a <__gethex+0x13a>
 8009a94:	4633      	mov	r3, r6
 8009a96:	7818      	ldrb	r0, [r3, #0]
 8009a98:	2830      	cmp	r0, #48	; 0x30
 8009a9a:	461f      	mov	r7, r3
 8009a9c:	f103 0301 	add.w	r3, r3, #1
 8009aa0:	d0f9      	beq.n	8009a96 <__gethex+0x76>
 8009aa2:	f7ff ffa7 	bl	80099f4 <__hexdig_fun>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	fab0 f480 	clz	r4, r0
 8009aac:	0964      	lsrs	r4, r4, #5
 8009aae:	4635      	mov	r5, r6
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	463a      	mov	r2, r7
 8009ab4:	4616      	mov	r6, r2
 8009ab6:	3201      	adds	r2, #1
 8009ab8:	7830      	ldrb	r0, [r6, #0]
 8009aba:	f7ff ff9b 	bl	80099f4 <__hexdig_fun>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d1f8      	bne.n	8009ab4 <__gethex+0x94>
 8009ac2:	9901      	ldr	r1, [sp, #4]
 8009ac4:	4652      	mov	r2, sl
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f001 fa02 	bl	800aed0 <strncmp>
 8009acc:	b980      	cbnz	r0, 8009af0 <__gethex+0xd0>
 8009ace:	b94d      	cbnz	r5, 8009ae4 <__gethex+0xc4>
 8009ad0:	eb06 050a 	add.w	r5, r6, sl
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	4616      	mov	r6, r2
 8009ad8:	3201      	adds	r2, #1
 8009ada:	7830      	ldrb	r0, [r6, #0]
 8009adc:	f7ff ff8a 	bl	80099f4 <__hexdig_fun>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d1f8      	bne.n	8009ad6 <__gethex+0xb6>
 8009ae4:	1bad      	subs	r5, r5, r6
 8009ae6:	00ad      	lsls	r5, r5, #2
 8009ae8:	e004      	b.n	8009af4 <__gethex+0xd4>
 8009aea:	2400      	movs	r4, #0
 8009aec:	4625      	mov	r5, r4
 8009aee:	e7e0      	b.n	8009ab2 <__gethex+0x92>
 8009af0:	2d00      	cmp	r5, #0
 8009af2:	d1f7      	bne.n	8009ae4 <__gethex+0xc4>
 8009af4:	7833      	ldrb	r3, [r6, #0]
 8009af6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009afa:	2b50      	cmp	r3, #80	; 0x50
 8009afc:	d13b      	bne.n	8009b76 <__gethex+0x156>
 8009afe:	7873      	ldrb	r3, [r6, #1]
 8009b00:	2b2b      	cmp	r3, #43	; 0x2b
 8009b02:	d02c      	beq.n	8009b5e <__gethex+0x13e>
 8009b04:	2b2d      	cmp	r3, #45	; 0x2d
 8009b06:	d02e      	beq.n	8009b66 <__gethex+0x146>
 8009b08:	1c71      	adds	r1, r6, #1
 8009b0a:	f04f 0900 	mov.w	r9, #0
 8009b0e:	7808      	ldrb	r0, [r1, #0]
 8009b10:	f7ff ff70 	bl	80099f4 <__hexdig_fun>
 8009b14:	1e43      	subs	r3, r0, #1
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b18      	cmp	r3, #24
 8009b1a:	d82c      	bhi.n	8009b76 <__gethex+0x156>
 8009b1c:	f1a0 0210 	sub.w	r2, r0, #16
 8009b20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b24:	f7ff ff66 	bl	80099f4 <__hexdig_fun>
 8009b28:	1e43      	subs	r3, r0, #1
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b18      	cmp	r3, #24
 8009b2e:	d91d      	bls.n	8009b6c <__gethex+0x14c>
 8009b30:	f1b9 0f00 	cmp.w	r9, #0
 8009b34:	d000      	beq.n	8009b38 <__gethex+0x118>
 8009b36:	4252      	negs	r2, r2
 8009b38:	4415      	add	r5, r2
 8009b3a:	f8cb 1000 	str.w	r1, [fp]
 8009b3e:	b1e4      	cbz	r4, 8009b7a <__gethex+0x15a>
 8009b40:	9b00      	ldr	r3, [sp, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	bf14      	ite	ne
 8009b46:	2700      	movne	r7, #0
 8009b48:	2706      	moveq	r7, #6
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	b009      	add	sp, #36	; 0x24
 8009b4e:	ecbd 8b02 	vpop	{d8}
 8009b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b56:	463e      	mov	r6, r7
 8009b58:	4625      	mov	r5, r4
 8009b5a:	2401      	movs	r4, #1
 8009b5c:	e7ca      	b.n	8009af4 <__gethex+0xd4>
 8009b5e:	f04f 0900 	mov.w	r9, #0
 8009b62:	1cb1      	adds	r1, r6, #2
 8009b64:	e7d3      	b.n	8009b0e <__gethex+0xee>
 8009b66:	f04f 0901 	mov.w	r9, #1
 8009b6a:	e7fa      	b.n	8009b62 <__gethex+0x142>
 8009b6c:	230a      	movs	r3, #10
 8009b6e:	fb03 0202 	mla	r2, r3, r2, r0
 8009b72:	3a10      	subs	r2, #16
 8009b74:	e7d4      	b.n	8009b20 <__gethex+0x100>
 8009b76:	4631      	mov	r1, r6
 8009b78:	e7df      	b.n	8009b3a <__gethex+0x11a>
 8009b7a:	1bf3      	subs	r3, r6, r7
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	4621      	mov	r1, r4
 8009b80:	2b07      	cmp	r3, #7
 8009b82:	dc0b      	bgt.n	8009b9c <__gethex+0x17c>
 8009b84:	ee18 0a10 	vmov	r0, s16
 8009b88:	f000 fa64 	bl	800a054 <_Balloc>
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	b940      	cbnz	r0, 8009ba2 <__gethex+0x182>
 8009b90:	4b5d      	ldr	r3, [pc, #372]	; (8009d08 <__gethex+0x2e8>)
 8009b92:	4602      	mov	r2, r0
 8009b94:	21de      	movs	r1, #222	; 0xde
 8009b96:	485d      	ldr	r0, [pc, #372]	; (8009d0c <__gethex+0x2ec>)
 8009b98:	f001 f9bc 	bl	800af14 <__assert_func>
 8009b9c:	3101      	adds	r1, #1
 8009b9e:	105b      	asrs	r3, r3, #1
 8009ba0:	e7ee      	b.n	8009b80 <__gethex+0x160>
 8009ba2:	f100 0914 	add.w	r9, r0, #20
 8009ba6:	f04f 0b00 	mov.w	fp, #0
 8009baa:	f1ca 0301 	rsb	r3, sl, #1
 8009bae:	f8cd 9008 	str.w	r9, [sp, #8]
 8009bb2:	f8cd b000 	str.w	fp, [sp]
 8009bb6:	9306      	str	r3, [sp, #24]
 8009bb8:	42b7      	cmp	r7, r6
 8009bba:	d340      	bcc.n	8009c3e <__gethex+0x21e>
 8009bbc:	9802      	ldr	r0, [sp, #8]
 8009bbe:	9b00      	ldr	r3, [sp, #0]
 8009bc0:	f840 3b04 	str.w	r3, [r0], #4
 8009bc4:	eba0 0009 	sub.w	r0, r0, r9
 8009bc8:	1080      	asrs	r0, r0, #2
 8009bca:	0146      	lsls	r6, r0, #5
 8009bcc:	6120      	str	r0, [r4, #16]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 fb32 	bl	800a238 <__hi0bits>
 8009bd4:	1a30      	subs	r0, r6, r0
 8009bd6:	f8d8 6000 	ldr.w	r6, [r8]
 8009bda:	42b0      	cmp	r0, r6
 8009bdc:	dd63      	ble.n	8009ca6 <__gethex+0x286>
 8009bde:	1b87      	subs	r7, r0, r6
 8009be0:	4639      	mov	r1, r7
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 fef5 	bl	800a9d2 <__any_on>
 8009be8:	4682      	mov	sl, r0
 8009bea:	b1a8      	cbz	r0, 8009c18 <__gethex+0x1f8>
 8009bec:	1e7b      	subs	r3, r7, #1
 8009bee:	1159      	asrs	r1, r3, #5
 8009bf0:	f003 021f 	and.w	r2, r3, #31
 8009bf4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009bf8:	f04f 0a01 	mov.w	sl, #1
 8009bfc:	fa0a f202 	lsl.w	r2, sl, r2
 8009c00:	420a      	tst	r2, r1
 8009c02:	d009      	beq.n	8009c18 <__gethex+0x1f8>
 8009c04:	4553      	cmp	r3, sl
 8009c06:	dd05      	ble.n	8009c14 <__gethex+0x1f4>
 8009c08:	1eb9      	subs	r1, r7, #2
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 fee1 	bl	800a9d2 <__any_on>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d145      	bne.n	8009ca0 <__gethex+0x280>
 8009c14:	f04f 0a02 	mov.w	sl, #2
 8009c18:	4639      	mov	r1, r7
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f7ff fe98 	bl	8009950 <rshift>
 8009c20:	443d      	add	r5, r7
 8009c22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c26:	42ab      	cmp	r3, r5
 8009c28:	da4c      	bge.n	8009cc4 <__gethex+0x2a4>
 8009c2a:	ee18 0a10 	vmov	r0, s16
 8009c2e:	4621      	mov	r1, r4
 8009c30:	f000 fa50 	bl	800a0d4 <_Bfree>
 8009c34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c36:	2300      	movs	r3, #0
 8009c38:	6013      	str	r3, [r2, #0]
 8009c3a:	27a3      	movs	r7, #163	; 0xa3
 8009c3c:	e785      	b.n	8009b4a <__gethex+0x12a>
 8009c3e:	1e73      	subs	r3, r6, #1
 8009c40:	9a05      	ldr	r2, [sp, #20]
 8009c42:	9303      	str	r3, [sp, #12]
 8009c44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d019      	beq.n	8009c80 <__gethex+0x260>
 8009c4c:	f1bb 0f20 	cmp.w	fp, #32
 8009c50:	d107      	bne.n	8009c62 <__gethex+0x242>
 8009c52:	9b02      	ldr	r3, [sp, #8]
 8009c54:	9a00      	ldr	r2, [sp, #0]
 8009c56:	f843 2b04 	str.w	r2, [r3], #4
 8009c5a:	9302      	str	r3, [sp, #8]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	469b      	mov	fp, r3
 8009c62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009c66:	f7ff fec5 	bl	80099f4 <__hexdig_fun>
 8009c6a:	9b00      	ldr	r3, [sp, #0]
 8009c6c:	f000 000f 	and.w	r0, r0, #15
 8009c70:	fa00 f00b 	lsl.w	r0, r0, fp
 8009c74:	4303      	orrs	r3, r0
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	f10b 0b04 	add.w	fp, fp, #4
 8009c7c:	9b03      	ldr	r3, [sp, #12]
 8009c7e:	e00d      	b.n	8009c9c <__gethex+0x27c>
 8009c80:	9b03      	ldr	r3, [sp, #12]
 8009c82:	9a06      	ldr	r2, [sp, #24]
 8009c84:	4413      	add	r3, r2
 8009c86:	42bb      	cmp	r3, r7
 8009c88:	d3e0      	bcc.n	8009c4c <__gethex+0x22c>
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	9901      	ldr	r1, [sp, #4]
 8009c8e:	9307      	str	r3, [sp, #28]
 8009c90:	4652      	mov	r2, sl
 8009c92:	f001 f91d 	bl	800aed0 <strncmp>
 8009c96:	9b07      	ldr	r3, [sp, #28]
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d1d7      	bne.n	8009c4c <__gethex+0x22c>
 8009c9c:	461e      	mov	r6, r3
 8009c9e:	e78b      	b.n	8009bb8 <__gethex+0x198>
 8009ca0:	f04f 0a03 	mov.w	sl, #3
 8009ca4:	e7b8      	b.n	8009c18 <__gethex+0x1f8>
 8009ca6:	da0a      	bge.n	8009cbe <__gethex+0x29e>
 8009ca8:	1a37      	subs	r7, r6, r0
 8009caa:	4621      	mov	r1, r4
 8009cac:	ee18 0a10 	vmov	r0, s16
 8009cb0:	463a      	mov	r2, r7
 8009cb2:	f000 fc2b 	bl	800a50c <__lshift>
 8009cb6:	1bed      	subs	r5, r5, r7
 8009cb8:	4604      	mov	r4, r0
 8009cba:	f100 0914 	add.w	r9, r0, #20
 8009cbe:	f04f 0a00 	mov.w	sl, #0
 8009cc2:	e7ae      	b.n	8009c22 <__gethex+0x202>
 8009cc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009cc8:	42a8      	cmp	r0, r5
 8009cca:	dd72      	ble.n	8009db2 <__gethex+0x392>
 8009ccc:	1b45      	subs	r5, r0, r5
 8009cce:	42ae      	cmp	r6, r5
 8009cd0:	dc36      	bgt.n	8009d40 <__gethex+0x320>
 8009cd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d02a      	beq.n	8009d30 <__gethex+0x310>
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d02c      	beq.n	8009d38 <__gethex+0x318>
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d11c      	bne.n	8009d1c <__gethex+0x2fc>
 8009ce2:	42ae      	cmp	r6, r5
 8009ce4:	d11a      	bne.n	8009d1c <__gethex+0x2fc>
 8009ce6:	2e01      	cmp	r6, #1
 8009ce8:	d112      	bne.n	8009d10 <__gethex+0x2f0>
 8009cea:	9a04      	ldr	r2, [sp, #16]
 8009cec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009cf0:	6013      	str	r3, [r2, #0]
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	6123      	str	r3, [r4, #16]
 8009cf6:	f8c9 3000 	str.w	r3, [r9]
 8009cfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cfc:	2762      	movs	r7, #98	; 0x62
 8009cfe:	601c      	str	r4, [r3, #0]
 8009d00:	e723      	b.n	8009b4a <__gethex+0x12a>
 8009d02:	bf00      	nop
 8009d04:	0800d110 	.word	0x0800d110
 8009d08:	0800d098 	.word	0x0800d098
 8009d0c:	0800d0a9 	.word	0x0800d0a9
 8009d10:	1e71      	subs	r1, r6, #1
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 fe5d 	bl	800a9d2 <__any_on>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d1e6      	bne.n	8009cea <__gethex+0x2ca>
 8009d1c:	ee18 0a10 	vmov	r0, s16
 8009d20:	4621      	mov	r1, r4
 8009d22:	f000 f9d7 	bl	800a0d4 <_Bfree>
 8009d26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d28:	2300      	movs	r3, #0
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	2750      	movs	r7, #80	; 0x50
 8009d2e:	e70c      	b.n	8009b4a <__gethex+0x12a>
 8009d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1f2      	bne.n	8009d1c <__gethex+0x2fc>
 8009d36:	e7d8      	b.n	8009cea <__gethex+0x2ca>
 8009d38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1d5      	bne.n	8009cea <__gethex+0x2ca>
 8009d3e:	e7ed      	b.n	8009d1c <__gethex+0x2fc>
 8009d40:	1e6f      	subs	r7, r5, #1
 8009d42:	f1ba 0f00 	cmp.w	sl, #0
 8009d46:	d131      	bne.n	8009dac <__gethex+0x38c>
 8009d48:	b127      	cbz	r7, 8009d54 <__gethex+0x334>
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f000 fe40 	bl	800a9d2 <__any_on>
 8009d52:	4682      	mov	sl, r0
 8009d54:	117b      	asrs	r3, r7, #5
 8009d56:	2101      	movs	r1, #1
 8009d58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009d5c:	f007 071f 	and.w	r7, r7, #31
 8009d60:	fa01 f707 	lsl.w	r7, r1, r7
 8009d64:	421f      	tst	r7, r3
 8009d66:	4629      	mov	r1, r5
 8009d68:	4620      	mov	r0, r4
 8009d6a:	bf18      	it	ne
 8009d6c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009d70:	1b76      	subs	r6, r6, r5
 8009d72:	f7ff fded 	bl	8009950 <rshift>
 8009d76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d7a:	2702      	movs	r7, #2
 8009d7c:	f1ba 0f00 	cmp.w	sl, #0
 8009d80:	d048      	beq.n	8009e14 <__gethex+0x3f4>
 8009d82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d015      	beq.n	8009db6 <__gethex+0x396>
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d017      	beq.n	8009dbe <__gethex+0x39e>
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d109      	bne.n	8009da6 <__gethex+0x386>
 8009d92:	f01a 0f02 	tst.w	sl, #2
 8009d96:	d006      	beq.n	8009da6 <__gethex+0x386>
 8009d98:	f8d9 0000 	ldr.w	r0, [r9]
 8009d9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009da0:	f01a 0f01 	tst.w	sl, #1
 8009da4:	d10e      	bne.n	8009dc4 <__gethex+0x3a4>
 8009da6:	f047 0710 	orr.w	r7, r7, #16
 8009daa:	e033      	b.n	8009e14 <__gethex+0x3f4>
 8009dac:	f04f 0a01 	mov.w	sl, #1
 8009db0:	e7d0      	b.n	8009d54 <__gethex+0x334>
 8009db2:	2701      	movs	r7, #1
 8009db4:	e7e2      	b.n	8009d7c <__gethex+0x35c>
 8009db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009db8:	f1c3 0301 	rsb	r3, r3, #1
 8009dbc:	9315      	str	r3, [sp, #84]	; 0x54
 8009dbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d0f0      	beq.n	8009da6 <__gethex+0x386>
 8009dc4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009dc8:	f104 0314 	add.w	r3, r4, #20
 8009dcc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009dd0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009dd4:	f04f 0c00 	mov.w	ip, #0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dde:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009de2:	d01c      	beq.n	8009e1e <__gethex+0x3fe>
 8009de4:	3201      	adds	r2, #1
 8009de6:	6002      	str	r2, [r0, #0]
 8009de8:	2f02      	cmp	r7, #2
 8009dea:	f104 0314 	add.w	r3, r4, #20
 8009dee:	d13f      	bne.n	8009e70 <__gethex+0x450>
 8009df0:	f8d8 2000 	ldr.w	r2, [r8]
 8009df4:	3a01      	subs	r2, #1
 8009df6:	42b2      	cmp	r2, r6
 8009df8:	d10a      	bne.n	8009e10 <__gethex+0x3f0>
 8009dfa:	1171      	asrs	r1, r6, #5
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e02:	f006 061f 	and.w	r6, r6, #31
 8009e06:	fa02 f606 	lsl.w	r6, r2, r6
 8009e0a:	421e      	tst	r6, r3
 8009e0c:	bf18      	it	ne
 8009e0e:	4617      	movne	r7, r2
 8009e10:	f047 0720 	orr.w	r7, r7, #32
 8009e14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e16:	601c      	str	r4, [r3, #0]
 8009e18:	9b04      	ldr	r3, [sp, #16]
 8009e1a:	601d      	str	r5, [r3, #0]
 8009e1c:	e695      	b.n	8009b4a <__gethex+0x12a>
 8009e1e:	4299      	cmp	r1, r3
 8009e20:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e24:	d8d8      	bhi.n	8009dd8 <__gethex+0x3b8>
 8009e26:	68a3      	ldr	r3, [r4, #8]
 8009e28:	459b      	cmp	fp, r3
 8009e2a:	db19      	blt.n	8009e60 <__gethex+0x440>
 8009e2c:	6861      	ldr	r1, [r4, #4]
 8009e2e:	ee18 0a10 	vmov	r0, s16
 8009e32:	3101      	adds	r1, #1
 8009e34:	f000 f90e 	bl	800a054 <_Balloc>
 8009e38:	4681      	mov	r9, r0
 8009e3a:	b918      	cbnz	r0, 8009e44 <__gethex+0x424>
 8009e3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ea8 <__gethex+0x488>)
 8009e3e:	4602      	mov	r2, r0
 8009e40:	2184      	movs	r1, #132	; 0x84
 8009e42:	e6a8      	b.n	8009b96 <__gethex+0x176>
 8009e44:	6922      	ldr	r2, [r4, #16]
 8009e46:	3202      	adds	r2, #2
 8009e48:	f104 010c 	add.w	r1, r4, #12
 8009e4c:	0092      	lsls	r2, r2, #2
 8009e4e:	300c      	adds	r0, #12
 8009e50:	f7fe fdee 	bl	8008a30 <memcpy>
 8009e54:	4621      	mov	r1, r4
 8009e56:	ee18 0a10 	vmov	r0, s16
 8009e5a:	f000 f93b 	bl	800a0d4 <_Bfree>
 8009e5e:	464c      	mov	r4, r9
 8009e60:	6923      	ldr	r3, [r4, #16]
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e68:	6122      	str	r2, [r4, #16]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	615a      	str	r2, [r3, #20]
 8009e6e:	e7bb      	b.n	8009de8 <__gethex+0x3c8>
 8009e70:	6922      	ldr	r2, [r4, #16]
 8009e72:	455a      	cmp	r2, fp
 8009e74:	dd0b      	ble.n	8009e8e <__gethex+0x46e>
 8009e76:	2101      	movs	r1, #1
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f7ff fd69 	bl	8009950 <rshift>
 8009e7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e82:	3501      	adds	r5, #1
 8009e84:	42ab      	cmp	r3, r5
 8009e86:	f6ff aed0 	blt.w	8009c2a <__gethex+0x20a>
 8009e8a:	2701      	movs	r7, #1
 8009e8c:	e7c0      	b.n	8009e10 <__gethex+0x3f0>
 8009e8e:	f016 061f 	ands.w	r6, r6, #31
 8009e92:	d0fa      	beq.n	8009e8a <__gethex+0x46a>
 8009e94:	4453      	add	r3, sl
 8009e96:	f1c6 0620 	rsb	r6, r6, #32
 8009e9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e9e:	f000 f9cb 	bl	800a238 <__hi0bits>
 8009ea2:	42b0      	cmp	r0, r6
 8009ea4:	dbe7      	blt.n	8009e76 <__gethex+0x456>
 8009ea6:	e7f0      	b.n	8009e8a <__gethex+0x46a>
 8009ea8:	0800d098 	.word	0x0800d098

08009eac <L_shift>:
 8009eac:	f1c2 0208 	rsb	r2, r2, #8
 8009eb0:	0092      	lsls	r2, r2, #2
 8009eb2:	b570      	push	{r4, r5, r6, lr}
 8009eb4:	f1c2 0620 	rsb	r6, r2, #32
 8009eb8:	6843      	ldr	r3, [r0, #4]
 8009eba:	6804      	ldr	r4, [r0, #0]
 8009ebc:	fa03 f506 	lsl.w	r5, r3, r6
 8009ec0:	432c      	orrs	r4, r5
 8009ec2:	40d3      	lsrs	r3, r2
 8009ec4:	6004      	str	r4, [r0, #0]
 8009ec6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009eca:	4288      	cmp	r0, r1
 8009ecc:	d3f4      	bcc.n	8009eb8 <L_shift+0xc>
 8009ece:	bd70      	pop	{r4, r5, r6, pc}

08009ed0 <__match>:
 8009ed0:	b530      	push	{r4, r5, lr}
 8009ed2:	6803      	ldr	r3, [r0, #0]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eda:	b914      	cbnz	r4, 8009ee2 <__match+0x12>
 8009edc:	6003      	str	r3, [r0, #0]
 8009ede:	2001      	movs	r0, #1
 8009ee0:	bd30      	pop	{r4, r5, pc}
 8009ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ee6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009eea:	2d19      	cmp	r5, #25
 8009eec:	bf98      	it	ls
 8009eee:	3220      	addls	r2, #32
 8009ef0:	42a2      	cmp	r2, r4
 8009ef2:	d0f0      	beq.n	8009ed6 <__match+0x6>
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	e7f3      	b.n	8009ee0 <__match+0x10>

08009ef8 <__hexnan>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	680b      	ldr	r3, [r1, #0]
 8009efe:	115e      	asrs	r6, r3, #5
 8009f00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f04:	f013 031f 	ands.w	r3, r3, #31
 8009f08:	b087      	sub	sp, #28
 8009f0a:	bf18      	it	ne
 8009f0c:	3604      	addne	r6, #4
 8009f0e:	2500      	movs	r5, #0
 8009f10:	1f37      	subs	r7, r6, #4
 8009f12:	4690      	mov	r8, r2
 8009f14:	6802      	ldr	r2, [r0, #0]
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	4682      	mov	sl, r0
 8009f1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f1e:	46b9      	mov	r9, r7
 8009f20:	463c      	mov	r4, r7
 8009f22:	9502      	str	r5, [sp, #8]
 8009f24:	46ab      	mov	fp, r5
 8009f26:	7851      	ldrb	r1, [r2, #1]
 8009f28:	1c53      	adds	r3, r2, #1
 8009f2a:	9303      	str	r3, [sp, #12]
 8009f2c:	b341      	cbz	r1, 8009f80 <__hexnan+0x88>
 8009f2e:	4608      	mov	r0, r1
 8009f30:	9205      	str	r2, [sp, #20]
 8009f32:	9104      	str	r1, [sp, #16]
 8009f34:	f7ff fd5e 	bl	80099f4 <__hexdig_fun>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d14f      	bne.n	8009fdc <__hexnan+0xe4>
 8009f3c:	9904      	ldr	r1, [sp, #16]
 8009f3e:	9a05      	ldr	r2, [sp, #20]
 8009f40:	2920      	cmp	r1, #32
 8009f42:	d818      	bhi.n	8009f76 <__hexnan+0x7e>
 8009f44:	9b02      	ldr	r3, [sp, #8]
 8009f46:	459b      	cmp	fp, r3
 8009f48:	dd13      	ble.n	8009f72 <__hexnan+0x7a>
 8009f4a:	454c      	cmp	r4, r9
 8009f4c:	d206      	bcs.n	8009f5c <__hexnan+0x64>
 8009f4e:	2d07      	cmp	r5, #7
 8009f50:	dc04      	bgt.n	8009f5c <__hexnan+0x64>
 8009f52:	462a      	mov	r2, r5
 8009f54:	4649      	mov	r1, r9
 8009f56:	4620      	mov	r0, r4
 8009f58:	f7ff ffa8 	bl	8009eac <L_shift>
 8009f5c:	4544      	cmp	r4, r8
 8009f5e:	d950      	bls.n	800a002 <__hexnan+0x10a>
 8009f60:	2300      	movs	r3, #0
 8009f62:	f1a4 0904 	sub.w	r9, r4, #4
 8009f66:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f6a:	f8cd b008 	str.w	fp, [sp, #8]
 8009f6e:	464c      	mov	r4, r9
 8009f70:	461d      	mov	r5, r3
 8009f72:	9a03      	ldr	r2, [sp, #12]
 8009f74:	e7d7      	b.n	8009f26 <__hexnan+0x2e>
 8009f76:	2929      	cmp	r1, #41	; 0x29
 8009f78:	d156      	bne.n	800a028 <__hexnan+0x130>
 8009f7a:	3202      	adds	r2, #2
 8009f7c:	f8ca 2000 	str.w	r2, [sl]
 8009f80:	f1bb 0f00 	cmp.w	fp, #0
 8009f84:	d050      	beq.n	800a028 <__hexnan+0x130>
 8009f86:	454c      	cmp	r4, r9
 8009f88:	d206      	bcs.n	8009f98 <__hexnan+0xa0>
 8009f8a:	2d07      	cmp	r5, #7
 8009f8c:	dc04      	bgt.n	8009f98 <__hexnan+0xa0>
 8009f8e:	462a      	mov	r2, r5
 8009f90:	4649      	mov	r1, r9
 8009f92:	4620      	mov	r0, r4
 8009f94:	f7ff ff8a 	bl	8009eac <L_shift>
 8009f98:	4544      	cmp	r4, r8
 8009f9a:	d934      	bls.n	800a006 <__hexnan+0x10e>
 8009f9c:	f1a8 0204 	sub.w	r2, r8, #4
 8009fa0:	4623      	mov	r3, r4
 8009fa2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009fa6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009faa:	429f      	cmp	r7, r3
 8009fac:	d2f9      	bcs.n	8009fa2 <__hexnan+0xaa>
 8009fae:	1b3b      	subs	r3, r7, r4
 8009fb0:	f023 0303 	bic.w	r3, r3, #3
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	3401      	adds	r4, #1
 8009fb8:	3e03      	subs	r6, #3
 8009fba:	42b4      	cmp	r4, r6
 8009fbc:	bf88      	it	hi
 8009fbe:	2304      	movhi	r3, #4
 8009fc0:	4443      	add	r3, r8
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f843 2b04 	str.w	r2, [r3], #4
 8009fc8:	429f      	cmp	r7, r3
 8009fca:	d2fb      	bcs.n	8009fc4 <__hexnan+0xcc>
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	b91b      	cbnz	r3, 8009fd8 <__hexnan+0xe0>
 8009fd0:	4547      	cmp	r7, r8
 8009fd2:	d127      	bne.n	800a024 <__hexnan+0x12c>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	2005      	movs	r0, #5
 8009fda:	e026      	b.n	800a02a <__hexnan+0x132>
 8009fdc:	3501      	adds	r5, #1
 8009fde:	2d08      	cmp	r5, #8
 8009fe0:	f10b 0b01 	add.w	fp, fp, #1
 8009fe4:	dd06      	ble.n	8009ff4 <__hexnan+0xfc>
 8009fe6:	4544      	cmp	r4, r8
 8009fe8:	d9c3      	bls.n	8009f72 <__hexnan+0x7a>
 8009fea:	2300      	movs	r3, #0
 8009fec:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ff0:	2501      	movs	r5, #1
 8009ff2:	3c04      	subs	r4, #4
 8009ff4:	6822      	ldr	r2, [r4, #0]
 8009ff6:	f000 000f 	and.w	r0, r0, #15
 8009ffa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009ffe:	6022      	str	r2, [r4, #0]
 800a000:	e7b7      	b.n	8009f72 <__hexnan+0x7a>
 800a002:	2508      	movs	r5, #8
 800a004:	e7b5      	b.n	8009f72 <__hexnan+0x7a>
 800a006:	9b01      	ldr	r3, [sp, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d0df      	beq.n	8009fcc <__hexnan+0xd4>
 800a00c:	f04f 32ff 	mov.w	r2, #4294967295
 800a010:	f1c3 0320 	rsb	r3, r3, #32
 800a014:	fa22 f303 	lsr.w	r3, r2, r3
 800a018:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a01c:	401a      	ands	r2, r3
 800a01e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a022:	e7d3      	b.n	8009fcc <__hexnan+0xd4>
 800a024:	3f04      	subs	r7, #4
 800a026:	e7d1      	b.n	8009fcc <__hexnan+0xd4>
 800a028:	2004      	movs	r0, #4
 800a02a:	b007      	add	sp, #28
 800a02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a030 <__ascii_mbtowc>:
 800a030:	b082      	sub	sp, #8
 800a032:	b901      	cbnz	r1, 800a036 <__ascii_mbtowc+0x6>
 800a034:	a901      	add	r1, sp, #4
 800a036:	b142      	cbz	r2, 800a04a <__ascii_mbtowc+0x1a>
 800a038:	b14b      	cbz	r3, 800a04e <__ascii_mbtowc+0x1e>
 800a03a:	7813      	ldrb	r3, [r2, #0]
 800a03c:	600b      	str	r3, [r1, #0]
 800a03e:	7812      	ldrb	r2, [r2, #0]
 800a040:	1e10      	subs	r0, r2, #0
 800a042:	bf18      	it	ne
 800a044:	2001      	movne	r0, #1
 800a046:	b002      	add	sp, #8
 800a048:	4770      	bx	lr
 800a04a:	4610      	mov	r0, r2
 800a04c:	e7fb      	b.n	800a046 <__ascii_mbtowc+0x16>
 800a04e:	f06f 0001 	mvn.w	r0, #1
 800a052:	e7f8      	b.n	800a046 <__ascii_mbtowc+0x16>

0800a054 <_Balloc>:
 800a054:	b570      	push	{r4, r5, r6, lr}
 800a056:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a058:	4604      	mov	r4, r0
 800a05a:	460d      	mov	r5, r1
 800a05c:	b976      	cbnz	r6, 800a07c <_Balloc+0x28>
 800a05e:	2010      	movs	r0, #16
 800a060:	f001 fe02 	bl	800bc68 <malloc>
 800a064:	4602      	mov	r2, r0
 800a066:	6260      	str	r0, [r4, #36]	; 0x24
 800a068:	b920      	cbnz	r0, 800a074 <_Balloc+0x20>
 800a06a:	4b18      	ldr	r3, [pc, #96]	; (800a0cc <_Balloc+0x78>)
 800a06c:	4818      	ldr	r0, [pc, #96]	; (800a0d0 <_Balloc+0x7c>)
 800a06e:	2166      	movs	r1, #102	; 0x66
 800a070:	f000 ff50 	bl	800af14 <__assert_func>
 800a074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a078:	6006      	str	r6, [r0, #0]
 800a07a:	60c6      	str	r6, [r0, #12]
 800a07c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a07e:	68f3      	ldr	r3, [r6, #12]
 800a080:	b183      	cbz	r3, 800a0a4 <_Balloc+0x50>
 800a082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a08a:	b9b8      	cbnz	r0, 800a0bc <_Balloc+0x68>
 800a08c:	2101      	movs	r1, #1
 800a08e:	fa01 f605 	lsl.w	r6, r1, r5
 800a092:	1d72      	adds	r2, r6, #5
 800a094:	0092      	lsls	r2, r2, #2
 800a096:	4620      	mov	r0, r4
 800a098:	f000 fcbc 	bl	800aa14 <_calloc_r>
 800a09c:	b160      	cbz	r0, 800a0b8 <_Balloc+0x64>
 800a09e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0a2:	e00e      	b.n	800a0c2 <_Balloc+0x6e>
 800a0a4:	2221      	movs	r2, #33	; 0x21
 800a0a6:	2104      	movs	r1, #4
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f000 fcb3 	bl	800aa14 <_calloc_r>
 800a0ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0b0:	60f0      	str	r0, [r6, #12]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e4      	bne.n	800a082 <_Balloc+0x2e>
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	bd70      	pop	{r4, r5, r6, pc}
 800a0bc:	6802      	ldr	r2, [r0, #0]
 800a0be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0c8:	e7f7      	b.n	800a0ba <_Balloc+0x66>
 800a0ca:	bf00      	nop
 800a0cc:	0800d124 	.word	0x0800d124
 800a0d0:	0800d13b 	.word	0x0800d13b

0800a0d4 <_Bfree>:
 800a0d4:	b570      	push	{r4, r5, r6, lr}
 800a0d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0d8:	4605      	mov	r5, r0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	b976      	cbnz	r6, 800a0fc <_Bfree+0x28>
 800a0de:	2010      	movs	r0, #16
 800a0e0:	f001 fdc2 	bl	800bc68 <malloc>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	6268      	str	r0, [r5, #36]	; 0x24
 800a0e8:	b920      	cbnz	r0, 800a0f4 <_Bfree+0x20>
 800a0ea:	4b09      	ldr	r3, [pc, #36]	; (800a110 <_Bfree+0x3c>)
 800a0ec:	4809      	ldr	r0, [pc, #36]	; (800a114 <_Bfree+0x40>)
 800a0ee:	218a      	movs	r1, #138	; 0x8a
 800a0f0:	f000 ff10 	bl	800af14 <__assert_func>
 800a0f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0f8:	6006      	str	r6, [r0, #0]
 800a0fa:	60c6      	str	r6, [r0, #12]
 800a0fc:	b13c      	cbz	r4, 800a10e <_Bfree+0x3a>
 800a0fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a100:	6862      	ldr	r2, [r4, #4]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a108:	6021      	str	r1, [r4, #0]
 800a10a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	0800d124 	.word	0x0800d124
 800a114:	0800d13b 	.word	0x0800d13b

0800a118 <__multadd>:
 800a118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11c:	690d      	ldr	r5, [r1, #16]
 800a11e:	4607      	mov	r7, r0
 800a120:	460c      	mov	r4, r1
 800a122:	461e      	mov	r6, r3
 800a124:	f101 0c14 	add.w	ip, r1, #20
 800a128:	2000      	movs	r0, #0
 800a12a:	f8dc 3000 	ldr.w	r3, [ip]
 800a12e:	b299      	uxth	r1, r3
 800a130:	fb02 6101 	mla	r1, r2, r1, r6
 800a134:	0c1e      	lsrs	r6, r3, #16
 800a136:	0c0b      	lsrs	r3, r1, #16
 800a138:	fb02 3306 	mla	r3, r2, r6, r3
 800a13c:	b289      	uxth	r1, r1
 800a13e:	3001      	adds	r0, #1
 800a140:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a144:	4285      	cmp	r5, r0
 800a146:	f84c 1b04 	str.w	r1, [ip], #4
 800a14a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a14e:	dcec      	bgt.n	800a12a <__multadd+0x12>
 800a150:	b30e      	cbz	r6, 800a196 <__multadd+0x7e>
 800a152:	68a3      	ldr	r3, [r4, #8]
 800a154:	42ab      	cmp	r3, r5
 800a156:	dc19      	bgt.n	800a18c <__multadd+0x74>
 800a158:	6861      	ldr	r1, [r4, #4]
 800a15a:	4638      	mov	r0, r7
 800a15c:	3101      	adds	r1, #1
 800a15e:	f7ff ff79 	bl	800a054 <_Balloc>
 800a162:	4680      	mov	r8, r0
 800a164:	b928      	cbnz	r0, 800a172 <__multadd+0x5a>
 800a166:	4602      	mov	r2, r0
 800a168:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <__multadd+0x84>)
 800a16a:	480d      	ldr	r0, [pc, #52]	; (800a1a0 <__multadd+0x88>)
 800a16c:	21b5      	movs	r1, #181	; 0xb5
 800a16e:	f000 fed1 	bl	800af14 <__assert_func>
 800a172:	6922      	ldr	r2, [r4, #16]
 800a174:	3202      	adds	r2, #2
 800a176:	f104 010c 	add.w	r1, r4, #12
 800a17a:	0092      	lsls	r2, r2, #2
 800a17c:	300c      	adds	r0, #12
 800a17e:	f7fe fc57 	bl	8008a30 <memcpy>
 800a182:	4621      	mov	r1, r4
 800a184:	4638      	mov	r0, r7
 800a186:	f7ff ffa5 	bl	800a0d4 <_Bfree>
 800a18a:	4644      	mov	r4, r8
 800a18c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a190:	3501      	adds	r5, #1
 800a192:	615e      	str	r6, [r3, #20]
 800a194:	6125      	str	r5, [r4, #16]
 800a196:	4620      	mov	r0, r4
 800a198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a19c:	0800d098 	.word	0x0800d098
 800a1a0:	0800d13b 	.word	0x0800d13b

0800a1a4 <__s2b>:
 800a1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	4615      	mov	r5, r2
 800a1ac:	461f      	mov	r7, r3
 800a1ae:	2209      	movs	r2, #9
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	db09      	blt.n	800a1d4 <__s2b+0x30>
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff ff47 	bl	800a054 <_Balloc>
 800a1c6:	b940      	cbnz	r0, 800a1da <__s2b+0x36>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	4b19      	ldr	r3, [pc, #100]	; (800a230 <__s2b+0x8c>)
 800a1cc:	4819      	ldr	r0, [pc, #100]	; (800a234 <__s2b+0x90>)
 800a1ce:	21ce      	movs	r1, #206	; 0xce
 800a1d0:	f000 fea0 	bl	800af14 <__assert_func>
 800a1d4:	0052      	lsls	r2, r2, #1
 800a1d6:	3101      	adds	r1, #1
 800a1d8:	e7f0      	b.n	800a1bc <__s2b+0x18>
 800a1da:	9b08      	ldr	r3, [sp, #32]
 800a1dc:	6143      	str	r3, [r0, #20]
 800a1de:	2d09      	cmp	r5, #9
 800a1e0:	f04f 0301 	mov.w	r3, #1
 800a1e4:	6103      	str	r3, [r0, #16]
 800a1e6:	dd16      	ble.n	800a216 <__s2b+0x72>
 800a1e8:	f104 0909 	add.w	r9, r4, #9
 800a1ec:	46c8      	mov	r8, r9
 800a1ee:	442c      	add	r4, r5
 800a1f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1f4:	4601      	mov	r1, r0
 800a1f6:	3b30      	subs	r3, #48	; 0x30
 800a1f8:	220a      	movs	r2, #10
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7ff ff8c 	bl	800a118 <__multadd>
 800a200:	45a0      	cmp	r8, r4
 800a202:	d1f5      	bne.n	800a1f0 <__s2b+0x4c>
 800a204:	f1a5 0408 	sub.w	r4, r5, #8
 800a208:	444c      	add	r4, r9
 800a20a:	1b2d      	subs	r5, r5, r4
 800a20c:	1963      	adds	r3, r4, r5
 800a20e:	42bb      	cmp	r3, r7
 800a210:	db04      	blt.n	800a21c <__s2b+0x78>
 800a212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a216:	340a      	adds	r4, #10
 800a218:	2509      	movs	r5, #9
 800a21a:	e7f6      	b.n	800a20a <__s2b+0x66>
 800a21c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a220:	4601      	mov	r1, r0
 800a222:	3b30      	subs	r3, #48	; 0x30
 800a224:	220a      	movs	r2, #10
 800a226:	4630      	mov	r0, r6
 800a228:	f7ff ff76 	bl	800a118 <__multadd>
 800a22c:	e7ee      	b.n	800a20c <__s2b+0x68>
 800a22e:	bf00      	nop
 800a230:	0800d098 	.word	0x0800d098
 800a234:	0800d13b 	.word	0x0800d13b

0800a238 <__hi0bits>:
 800a238:	0c03      	lsrs	r3, r0, #16
 800a23a:	041b      	lsls	r3, r3, #16
 800a23c:	b9d3      	cbnz	r3, 800a274 <__hi0bits+0x3c>
 800a23e:	0400      	lsls	r0, r0, #16
 800a240:	2310      	movs	r3, #16
 800a242:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a246:	bf04      	itt	eq
 800a248:	0200      	lsleq	r0, r0, #8
 800a24a:	3308      	addeq	r3, #8
 800a24c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a250:	bf04      	itt	eq
 800a252:	0100      	lsleq	r0, r0, #4
 800a254:	3304      	addeq	r3, #4
 800a256:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a25a:	bf04      	itt	eq
 800a25c:	0080      	lsleq	r0, r0, #2
 800a25e:	3302      	addeq	r3, #2
 800a260:	2800      	cmp	r0, #0
 800a262:	db05      	blt.n	800a270 <__hi0bits+0x38>
 800a264:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a268:	f103 0301 	add.w	r3, r3, #1
 800a26c:	bf08      	it	eq
 800a26e:	2320      	moveq	r3, #32
 800a270:	4618      	mov	r0, r3
 800a272:	4770      	bx	lr
 800a274:	2300      	movs	r3, #0
 800a276:	e7e4      	b.n	800a242 <__hi0bits+0xa>

0800a278 <__lo0bits>:
 800a278:	6803      	ldr	r3, [r0, #0]
 800a27a:	f013 0207 	ands.w	r2, r3, #7
 800a27e:	4601      	mov	r1, r0
 800a280:	d00b      	beq.n	800a29a <__lo0bits+0x22>
 800a282:	07da      	lsls	r2, r3, #31
 800a284:	d423      	bmi.n	800a2ce <__lo0bits+0x56>
 800a286:	0798      	lsls	r0, r3, #30
 800a288:	bf49      	itett	mi
 800a28a:	085b      	lsrmi	r3, r3, #1
 800a28c:	089b      	lsrpl	r3, r3, #2
 800a28e:	2001      	movmi	r0, #1
 800a290:	600b      	strmi	r3, [r1, #0]
 800a292:	bf5c      	itt	pl
 800a294:	600b      	strpl	r3, [r1, #0]
 800a296:	2002      	movpl	r0, #2
 800a298:	4770      	bx	lr
 800a29a:	b298      	uxth	r0, r3
 800a29c:	b9a8      	cbnz	r0, 800a2ca <__lo0bits+0x52>
 800a29e:	0c1b      	lsrs	r3, r3, #16
 800a2a0:	2010      	movs	r0, #16
 800a2a2:	b2da      	uxtb	r2, r3
 800a2a4:	b90a      	cbnz	r2, 800a2aa <__lo0bits+0x32>
 800a2a6:	3008      	adds	r0, #8
 800a2a8:	0a1b      	lsrs	r3, r3, #8
 800a2aa:	071a      	lsls	r2, r3, #28
 800a2ac:	bf04      	itt	eq
 800a2ae:	091b      	lsreq	r3, r3, #4
 800a2b0:	3004      	addeq	r0, #4
 800a2b2:	079a      	lsls	r2, r3, #30
 800a2b4:	bf04      	itt	eq
 800a2b6:	089b      	lsreq	r3, r3, #2
 800a2b8:	3002      	addeq	r0, #2
 800a2ba:	07da      	lsls	r2, r3, #31
 800a2bc:	d403      	bmi.n	800a2c6 <__lo0bits+0x4e>
 800a2be:	085b      	lsrs	r3, r3, #1
 800a2c0:	f100 0001 	add.w	r0, r0, #1
 800a2c4:	d005      	beq.n	800a2d2 <__lo0bits+0x5a>
 800a2c6:	600b      	str	r3, [r1, #0]
 800a2c8:	4770      	bx	lr
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	e7e9      	b.n	800a2a2 <__lo0bits+0x2a>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	4770      	bx	lr
 800a2d2:	2020      	movs	r0, #32
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <__i2b>:
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	460c      	mov	r4, r1
 800a2dc:	2101      	movs	r1, #1
 800a2de:	f7ff feb9 	bl	800a054 <_Balloc>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	b928      	cbnz	r0, 800a2f2 <__i2b+0x1a>
 800a2e6:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <__i2b+0x24>)
 800a2e8:	4805      	ldr	r0, [pc, #20]	; (800a300 <__i2b+0x28>)
 800a2ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a2ee:	f000 fe11 	bl	800af14 <__assert_func>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	6144      	str	r4, [r0, #20]
 800a2f6:	6103      	str	r3, [r0, #16]
 800a2f8:	bd10      	pop	{r4, pc}
 800a2fa:	bf00      	nop
 800a2fc:	0800d098 	.word	0x0800d098
 800a300:	0800d13b 	.word	0x0800d13b

0800a304 <__multiply>:
 800a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	4691      	mov	r9, r2
 800a30a:	690a      	ldr	r2, [r1, #16]
 800a30c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a310:	429a      	cmp	r2, r3
 800a312:	bfb8      	it	lt
 800a314:	460b      	movlt	r3, r1
 800a316:	460c      	mov	r4, r1
 800a318:	bfbc      	itt	lt
 800a31a:	464c      	movlt	r4, r9
 800a31c:	4699      	movlt	r9, r3
 800a31e:	6927      	ldr	r7, [r4, #16]
 800a320:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a324:	68a3      	ldr	r3, [r4, #8]
 800a326:	6861      	ldr	r1, [r4, #4]
 800a328:	eb07 060a 	add.w	r6, r7, sl
 800a32c:	42b3      	cmp	r3, r6
 800a32e:	b085      	sub	sp, #20
 800a330:	bfb8      	it	lt
 800a332:	3101      	addlt	r1, #1
 800a334:	f7ff fe8e 	bl	800a054 <_Balloc>
 800a338:	b930      	cbnz	r0, 800a348 <__multiply+0x44>
 800a33a:	4602      	mov	r2, r0
 800a33c:	4b44      	ldr	r3, [pc, #272]	; (800a450 <__multiply+0x14c>)
 800a33e:	4845      	ldr	r0, [pc, #276]	; (800a454 <__multiply+0x150>)
 800a340:	f240 115d 	movw	r1, #349	; 0x15d
 800a344:	f000 fde6 	bl	800af14 <__assert_func>
 800a348:	f100 0514 	add.w	r5, r0, #20
 800a34c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a350:	462b      	mov	r3, r5
 800a352:	2200      	movs	r2, #0
 800a354:	4543      	cmp	r3, r8
 800a356:	d321      	bcc.n	800a39c <__multiply+0x98>
 800a358:	f104 0314 	add.w	r3, r4, #20
 800a35c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a360:	f109 0314 	add.w	r3, r9, #20
 800a364:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a368:	9202      	str	r2, [sp, #8]
 800a36a:	1b3a      	subs	r2, r7, r4
 800a36c:	3a15      	subs	r2, #21
 800a36e:	f022 0203 	bic.w	r2, r2, #3
 800a372:	3204      	adds	r2, #4
 800a374:	f104 0115 	add.w	r1, r4, #21
 800a378:	428f      	cmp	r7, r1
 800a37a:	bf38      	it	cc
 800a37c:	2204      	movcc	r2, #4
 800a37e:	9201      	str	r2, [sp, #4]
 800a380:	9a02      	ldr	r2, [sp, #8]
 800a382:	9303      	str	r3, [sp, #12]
 800a384:	429a      	cmp	r2, r3
 800a386:	d80c      	bhi.n	800a3a2 <__multiply+0x9e>
 800a388:	2e00      	cmp	r6, #0
 800a38a:	dd03      	ble.n	800a394 <__multiply+0x90>
 800a38c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a390:	2b00      	cmp	r3, #0
 800a392:	d05a      	beq.n	800a44a <__multiply+0x146>
 800a394:	6106      	str	r6, [r0, #16]
 800a396:	b005      	add	sp, #20
 800a398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39c:	f843 2b04 	str.w	r2, [r3], #4
 800a3a0:	e7d8      	b.n	800a354 <__multiply+0x50>
 800a3a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3a6:	f1ba 0f00 	cmp.w	sl, #0
 800a3aa:	d024      	beq.n	800a3f6 <__multiply+0xf2>
 800a3ac:	f104 0e14 	add.w	lr, r4, #20
 800a3b0:	46a9      	mov	r9, r5
 800a3b2:	f04f 0c00 	mov.w	ip, #0
 800a3b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a3ba:	f8d9 1000 	ldr.w	r1, [r9]
 800a3be:	fa1f fb82 	uxth.w	fp, r2
 800a3c2:	b289      	uxth	r1, r1
 800a3c4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3cc:	f8d9 2000 	ldr.w	r2, [r9]
 800a3d0:	4461      	add	r1, ip
 800a3d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3d6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3de:	b289      	uxth	r1, r1
 800a3e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3e4:	4577      	cmp	r7, lr
 800a3e6:	f849 1b04 	str.w	r1, [r9], #4
 800a3ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3ee:	d8e2      	bhi.n	800a3b6 <__multiply+0xb2>
 800a3f0:	9a01      	ldr	r2, [sp, #4]
 800a3f2:	f845 c002 	str.w	ip, [r5, r2]
 800a3f6:	9a03      	ldr	r2, [sp, #12]
 800a3f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	f1b9 0f00 	cmp.w	r9, #0
 800a402:	d020      	beq.n	800a446 <__multiply+0x142>
 800a404:	6829      	ldr	r1, [r5, #0]
 800a406:	f104 0c14 	add.w	ip, r4, #20
 800a40a:	46ae      	mov	lr, r5
 800a40c:	f04f 0a00 	mov.w	sl, #0
 800a410:	f8bc b000 	ldrh.w	fp, [ip]
 800a414:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a418:	fb09 220b 	mla	r2, r9, fp, r2
 800a41c:	4492      	add	sl, r2
 800a41e:	b289      	uxth	r1, r1
 800a420:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a424:	f84e 1b04 	str.w	r1, [lr], #4
 800a428:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a42c:	f8be 1000 	ldrh.w	r1, [lr]
 800a430:	0c12      	lsrs	r2, r2, #16
 800a432:	fb09 1102 	mla	r1, r9, r2, r1
 800a436:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a43a:	4567      	cmp	r7, ip
 800a43c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a440:	d8e6      	bhi.n	800a410 <__multiply+0x10c>
 800a442:	9a01      	ldr	r2, [sp, #4]
 800a444:	50a9      	str	r1, [r5, r2]
 800a446:	3504      	adds	r5, #4
 800a448:	e79a      	b.n	800a380 <__multiply+0x7c>
 800a44a:	3e01      	subs	r6, #1
 800a44c:	e79c      	b.n	800a388 <__multiply+0x84>
 800a44e:	bf00      	nop
 800a450:	0800d098 	.word	0x0800d098
 800a454:	0800d13b 	.word	0x0800d13b

0800a458 <__pow5mult>:
 800a458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a45c:	4615      	mov	r5, r2
 800a45e:	f012 0203 	ands.w	r2, r2, #3
 800a462:	4606      	mov	r6, r0
 800a464:	460f      	mov	r7, r1
 800a466:	d007      	beq.n	800a478 <__pow5mult+0x20>
 800a468:	4c25      	ldr	r4, [pc, #148]	; (800a500 <__pow5mult+0xa8>)
 800a46a:	3a01      	subs	r2, #1
 800a46c:	2300      	movs	r3, #0
 800a46e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a472:	f7ff fe51 	bl	800a118 <__multadd>
 800a476:	4607      	mov	r7, r0
 800a478:	10ad      	asrs	r5, r5, #2
 800a47a:	d03d      	beq.n	800a4f8 <__pow5mult+0xa0>
 800a47c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a47e:	b97c      	cbnz	r4, 800a4a0 <__pow5mult+0x48>
 800a480:	2010      	movs	r0, #16
 800a482:	f001 fbf1 	bl	800bc68 <malloc>
 800a486:	4602      	mov	r2, r0
 800a488:	6270      	str	r0, [r6, #36]	; 0x24
 800a48a:	b928      	cbnz	r0, 800a498 <__pow5mult+0x40>
 800a48c:	4b1d      	ldr	r3, [pc, #116]	; (800a504 <__pow5mult+0xac>)
 800a48e:	481e      	ldr	r0, [pc, #120]	; (800a508 <__pow5mult+0xb0>)
 800a490:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a494:	f000 fd3e 	bl	800af14 <__assert_func>
 800a498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a49c:	6004      	str	r4, [r0, #0]
 800a49e:	60c4      	str	r4, [r0, #12]
 800a4a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4a8:	b94c      	cbnz	r4, 800a4be <__pow5mult+0x66>
 800a4aa:	f240 2171 	movw	r1, #625	; 0x271
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f7ff ff12 	bl	800a2d8 <__i2b>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	6003      	str	r3, [r0, #0]
 800a4be:	f04f 0900 	mov.w	r9, #0
 800a4c2:	07eb      	lsls	r3, r5, #31
 800a4c4:	d50a      	bpl.n	800a4dc <__pow5mult+0x84>
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f7ff ff1a 	bl	800a304 <__multiply>
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	4680      	mov	r8, r0
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f7ff fdfd 	bl	800a0d4 <_Bfree>
 800a4da:	4647      	mov	r7, r8
 800a4dc:	106d      	asrs	r5, r5, #1
 800a4de:	d00b      	beq.n	800a4f8 <__pow5mult+0xa0>
 800a4e0:	6820      	ldr	r0, [r4, #0]
 800a4e2:	b938      	cbnz	r0, 800a4f4 <__pow5mult+0x9c>
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7ff ff0b 	bl	800a304 <__multiply>
 800a4ee:	6020      	str	r0, [r4, #0]
 800a4f0:	f8c0 9000 	str.w	r9, [r0]
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	e7e4      	b.n	800a4c2 <__pow5mult+0x6a>
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4fe:	bf00      	nop
 800a500:	0800d288 	.word	0x0800d288
 800a504:	0800d124 	.word	0x0800d124
 800a508:	0800d13b 	.word	0x0800d13b

0800a50c <__lshift>:
 800a50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a510:	460c      	mov	r4, r1
 800a512:	6849      	ldr	r1, [r1, #4]
 800a514:	6923      	ldr	r3, [r4, #16]
 800a516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a51a:	68a3      	ldr	r3, [r4, #8]
 800a51c:	4607      	mov	r7, r0
 800a51e:	4691      	mov	r9, r2
 800a520:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a524:	f108 0601 	add.w	r6, r8, #1
 800a528:	42b3      	cmp	r3, r6
 800a52a:	db0b      	blt.n	800a544 <__lshift+0x38>
 800a52c:	4638      	mov	r0, r7
 800a52e:	f7ff fd91 	bl	800a054 <_Balloc>
 800a532:	4605      	mov	r5, r0
 800a534:	b948      	cbnz	r0, 800a54a <__lshift+0x3e>
 800a536:	4602      	mov	r2, r0
 800a538:	4b2a      	ldr	r3, [pc, #168]	; (800a5e4 <__lshift+0xd8>)
 800a53a:	482b      	ldr	r0, [pc, #172]	; (800a5e8 <__lshift+0xdc>)
 800a53c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a540:	f000 fce8 	bl	800af14 <__assert_func>
 800a544:	3101      	adds	r1, #1
 800a546:	005b      	lsls	r3, r3, #1
 800a548:	e7ee      	b.n	800a528 <__lshift+0x1c>
 800a54a:	2300      	movs	r3, #0
 800a54c:	f100 0114 	add.w	r1, r0, #20
 800a550:	f100 0210 	add.w	r2, r0, #16
 800a554:	4618      	mov	r0, r3
 800a556:	4553      	cmp	r3, sl
 800a558:	db37      	blt.n	800a5ca <__lshift+0xbe>
 800a55a:	6920      	ldr	r0, [r4, #16]
 800a55c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a560:	f104 0314 	add.w	r3, r4, #20
 800a564:	f019 091f 	ands.w	r9, r9, #31
 800a568:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a56c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a570:	d02f      	beq.n	800a5d2 <__lshift+0xc6>
 800a572:	f1c9 0e20 	rsb	lr, r9, #32
 800a576:	468a      	mov	sl, r1
 800a578:	f04f 0c00 	mov.w	ip, #0
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	fa02 f209 	lsl.w	r2, r2, r9
 800a582:	ea42 020c 	orr.w	r2, r2, ip
 800a586:	f84a 2b04 	str.w	r2, [sl], #4
 800a58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a58e:	4298      	cmp	r0, r3
 800a590:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a594:	d8f2      	bhi.n	800a57c <__lshift+0x70>
 800a596:	1b03      	subs	r3, r0, r4
 800a598:	3b15      	subs	r3, #21
 800a59a:	f023 0303 	bic.w	r3, r3, #3
 800a59e:	3304      	adds	r3, #4
 800a5a0:	f104 0215 	add.w	r2, r4, #21
 800a5a4:	4290      	cmp	r0, r2
 800a5a6:	bf38      	it	cc
 800a5a8:	2304      	movcc	r3, #4
 800a5aa:	f841 c003 	str.w	ip, [r1, r3]
 800a5ae:	f1bc 0f00 	cmp.w	ip, #0
 800a5b2:	d001      	beq.n	800a5b8 <__lshift+0xac>
 800a5b4:	f108 0602 	add.w	r6, r8, #2
 800a5b8:	3e01      	subs	r6, #1
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	612e      	str	r6, [r5, #16]
 800a5be:	4621      	mov	r1, r4
 800a5c0:	f7ff fd88 	bl	800a0d4 <_Bfree>
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	e7c1      	b.n	800a556 <__lshift+0x4a>
 800a5d2:	3904      	subs	r1, #4
 800a5d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5dc:	4298      	cmp	r0, r3
 800a5de:	d8f9      	bhi.n	800a5d4 <__lshift+0xc8>
 800a5e0:	e7ea      	b.n	800a5b8 <__lshift+0xac>
 800a5e2:	bf00      	nop
 800a5e4:	0800d098 	.word	0x0800d098
 800a5e8:	0800d13b 	.word	0x0800d13b

0800a5ec <__mcmp>:
 800a5ec:	b530      	push	{r4, r5, lr}
 800a5ee:	6902      	ldr	r2, [r0, #16]
 800a5f0:	690c      	ldr	r4, [r1, #16]
 800a5f2:	1b12      	subs	r2, r2, r4
 800a5f4:	d10e      	bne.n	800a614 <__mcmp+0x28>
 800a5f6:	f100 0314 	add.w	r3, r0, #20
 800a5fa:	3114      	adds	r1, #20
 800a5fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a600:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a604:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a608:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a60c:	42a5      	cmp	r5, r4
 800a60e:	d003      	beq.n	800a618 <__mcmp+0x2c>
 800a610:	d305      	bcc.n	800a61e <__mcmp+0x32>
 800a612:	2201      	movs	r2, #1
 800a614:	4610      	mov	r0, r2
 800a616:	bd30      	pop	{r4, r5, pc}
 800a618:	4283      	cmp	r3, r0
 800a61a:	d3f3      	bcc.n	800a604 <__mcmp+0x18>
 800a61c:	e7fa      	b.n	800a614 <__mcmp+0x28>
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295
 800a622:	e7f7      	b.n	800a614 <__mcmp+0x28>

0800a624 <__mdiff>:
 800a624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	460c      	mov	r4, r1
 800a62a:	4606      	mov	r6, r0
 800a62c:	4611      	mov	r1, r2
 800a62e:	4620      	mov	r0, r4
 800a630:	4690      	mov	r8, r2
 800a632:	f7ff ffdb 	bl	800a5ec <__mcmp>
 800a636:	1e05      	subs	r5, r0, #0
 800a638:	d110      	bne.n	800a65c <__mdiff+0x38>
 800a63a:	4629      	mov	r1, r5
 800a63c:	4630      	mov	r0, r6
 800a63e:	f7ff fd09 	bl	800a054 <_Balloc>
 800a642:	b930      	cbnz	r0, 800a652 <__mdiff+0x2e>
 800a644:	4b3a      	ldr	r3, [pc, #232]	; (800a730 <__mdiff+0x10c>)
 800a646:	4602      	mov	r2, r0
 800a648:	f240 2132 	movw	r1, #562	; 0x232
 800a64c:	4839      	ldr	r0, [pc, #228]	; (800a734 <__mdiff+0x110>)
 800a64e:	f000 fc61 	bl	800af14 <__assert_func>
 800a652:	2301      	movs	r3, #1
 800a654:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65c:	bfa4      	itt	ge
 800a65e:	4643      	movge	r3, r8
 800a660:	46a0      	movge	r8, r4
 800a662:	4630      	mov	r0, r6
 800a664:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a668:	bfa6      	itte	ge
 800a66a:	461c      	movge	r4, r3
 800a66c:	2500      	movge	r5, #0
 800a66e:	2501      	movlt	r5, #1
 800a670:	f7ff fcf0 	bl	800a054 <_Balloc>
 800a674:	b920      	cbnz	r0, 800a680 <__mdiff+0x5c>
 800a676:	4b2e      	ldr	r3, [pc, #184]	; (800a730 <__mdiff+0x10c>)
 800a678:	4602      	mov	r2, r0
 800a67a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a67e:	e7e5      	b.n	800a64c <__mdiff+0x28>
 800a680:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a684:	6926      	ldr	r6, [r4, #16]
 800a686:	60c5      	str	r5, [r0, #12]
 800a688:	f104 0914 	add.w	r9, r4, #20
 800a68c:	f108 0514 	add.w	r5, r8, #20
 800a690:	f100 0e14 	add.w	lr, r0, #20
 800a694:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a698:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a69c:	f108 0210 	add.w	r2, r8, #16
 800a6a0:	46f2      	mov	sl, lr
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6ac:	fa1f f883 	uxth.w	r8, r3
 800a6b0:	fa11 f18b 	uxtah	r1, r1, fp
 800a6b4:	0c1b      	lsrs	r3, r3, #16
 800a6b6:	eba1 0808 	sub.w	r8, r1, r8
 800a6ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6c2:	fa1f f888 	uxth.w	r8, r8
 800a6c6:	1419      	asrs	r1, r3, #16
 800a6c8:	454e      	cmp	r6, r9
 800a6ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6ce:	f84a 3b04 	str.w	r3, [sl], #4
 800a6d2:	d8e7      	bhi.n	800a6a4 <__mdiff+0x80>
 800a6d4:	1b33      	subs	r3, r6, r4
 800a6d6:	3b15      	subs	r3, #21
 800a6d8:	f023 0303 	bic.w	r3, r3, #3
 800a6dc:	3304      	adds	r3, #4
 800a6de:	3415      	adds	r4, #21
 800a6e0:	42a6      	cmp	r6, r4
 800a6e2:	bf38      	it	cc
 800a6e4:	2304      	movcc	r3, #4
 800a6e6:	441d      	add	r5, r3
 800a6e8:	4473      	add	r3, lr
 800a6ea:	469e      	mov	lr, r3
 800a6ec:	462e      	mov	r6, r5
 800a6ee:	4566      	cmp	r6, ip
 800a6f0:	d30e      	bcc.n	800a710 <__mdiff+0xec>
 800a6f2:	f10c 0203 	add.w	r2, ip, #3
 800a6f6:	1b52      	subs	r2, r2, r5
 800a6f8:	f022 0203 	bic.w	r2, r2, #3
 800a6fc:	3d03      	subs	r5, #3
 800a6fe:	45ac      	cmp	ip, r5
 800a700:	bf38      	it	cc
 800a702:	2200      	movcc	r2, #0
 800a704:	441a      	add	r2, r3
 800a706:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a70a:	b17b      	cbz	r3, 800a72c <__mdiff+0x108>
 800a70c:	6107      	str	r7, [r0, #16]
 800a70e:	e7a3      	b.n	800a658 <__mdiff+0x34>
 800a710:	f856 8b04 	ldr.w	r8, [r6], #4
 800a714:	fa11 f288 	uxtah	r2, r1, r8
 800a718:	1414      	asrs	r4, r2, #16
 800a71a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a71e:	b292      	uxth	r2, r2
 800a720:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a724:	f84e 2b04 	str.w	r2, [lr], #4
 800a728:	1421      	asrs	r1, r4, #16
 800a72a:	e7e0      	b.n	800a6ee <__mdiff+0xca>
 800a72c:	3f01      	subs	r7, #1
 800a72e:	e7ea      	b.n	800a706 <__mdiff+0xe2>
 800a730:	0800d098 	.word	0x0800d098
 800a734:	0800d13b 	.word	0x0800d13b

0800a738 <__ulp>:
 800a738:	b082      	sub	sp, #8
 800a73a:	ed8d 0b00 	vstr	d0, [sp]
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	4912      	ldr	r1, [pc, #72]	; (800a78c <__ulp+0x54>)
 800a742:	4019      	ands	r1, r3
 800a744:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a748:	2900      	cmp	r1, #0
 800a74a:	dd05      	ble.n	800a758 <__ulp+0x20>
 800a74c:	2200      	movs	r2, #0
 800a74e:	460b      	mov	r3, r1
 800a750:	ec43 2b10 	vmov	d0, r2, r3
 800a754:	b002      	add	sp, #8
 800a756:	4770      	bx	lr
 800a758:	4249      	negs	r1, r1
 800a75a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a75e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a762:	f04f 0200 	mov.w	r2, #0
 800a766:	f04f 0300 	mov.w	r3, #0
 800a76a:	da04      	bge.n	800a776 <__ulp+0x3e>
 800a76c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a770:	fa41 f300 	asr.w	r3, r1, r0
 800a774:	e7ec      	b.n	800a750 <__ulp+0x18>
 800a776:	f1a0 0114 	sub.w	r1, r0, #20
 800a77a:	291e      	cmp	r1, #30
 800a77c:	bfda      	itte	le
 800a77e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a782:	fa20 f101 	lsrle.w	r1, r0, r1
 800a786:	2101      	movgt	r1, #1
 800a788:	460a      	mov	r2, r1
 800a78a:	e7e1      	b.n	800a750 <__ulp+0x18>
 800a78c:	7ff00000 	.word	0x7ff00000

0800a790 <__b2d>:
 800a790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a792:	6905      	ldr	r5, [r0, #16]
 800a794:	f100 0714 	add.w	r7, r0, #20
 800a798:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a79c:	1f2e      	subs	r6, r5, #4
 800a79e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f7ff fd48 	bl	800a238 <__hi0bits>
 800a7a8:	f1c0 0320 	rsb	r3, r0, #32
 800a7ac:	280a      	cmp	r0, #10
 800a7ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a82c <__b2d+0x9c>
 800a7b2:	600b      	str	r3, [r1, #0]
 800a7b4:	dc14      	bgt.n	800a7e0 <__b2d+0x50>
 800a7b6:	f1c0 0e0b 	rsb	lr, r0, #11
 800a7ba:	fa24 f10e 	lsr.w	r1, r4, lr
 800a7be:	42b7      	cmp	r7, r6
 800a7c0:	ea41 030c 	orr.w	r3, r1, ip
 800a7c4:	bf34      	ite	cc
 800a7c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7ca:	2100      	movcs	r1, #0
 800a7cc:	3015      	adds	r0, #21
 800a7ce:	fa04 f000 	lsl.w	r0, r4, r0
 800a7d2:	fa21 f10e 	lsr.w	r1, r1, lr
 800a7d6:	ea40 0201 	orr.w	r2, r0, r1
 800a7da:	ec43 2b10 	vmov	d0, r2, r3
 800a7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e0:	42b7      	cmp	r7, r6
 800a7e2:	bf3a      	itte	cc
 800a7e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7e8:	f1a5 0608 	subcc.w	r6, r5, #8
 800a7ec:	2100      	movcs	r1, #0
 800a7ee:	380b      	subs	r0, #11
 800a7f0:	d017      	beq.n	800a822 <__b2d+0x92>
 800a7f2:	f1c0 0c20 	rsb	ip, r0, #32
 800a7f6:	fa04 f500 	lsl.w	r5, r4, r0
 800a7fa:	42be      	cmp	r6, r7
 800a7fc:	fa21 f40c 	lsr.w	r4, r1, ip
 800a800:	ea45 0504 	orr.w	r5, r5, r4
 800a804:	bf8c      	ite	hi
 800a806:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a80a:	2400      	movls	r4, #0
 800a80c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a810:	fa01 f000 	lsl.w	r0, r1, r0
 800a814:	fa24 f40c 	lsr.w	r4, r4, ip
 800a818:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a81c:	ea40 0204 	orr.w	r2, r0, r4
 800a820:	e7db      	b.n	800a7da <__b2d+0x4a>
 800a822:	ea44 030c 	orr.w	r3, r4, ip
 800a826:	460a      	mov	r2, r1
 800a828:	e7d7      	b.n	800a7da <__b2d+0x4a>
 800a82a:	bf00      	nop
 800a82c:	3ff00000 	.word	0x3ff00000

0800a830 <__d2b>:
 800a830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a834:	4689      	mov	r9, r1
 800a836:	2101      	movs	r1, #1
 800a838:	ec57 6b10 	vmov	r6, r7, d0
 800a83c:	4690      	mov	r8, r2
 800a83e:	f7ff fc09 	bl	800a054 <_Balloc>
 800a842:	4604      	mov	r4, r0
 800a844:	b930      	cbnz	r0, 800a854 <__d2b+0x24>
 800a846:	4602      	mov	r2, r0
 800a848:	4b25      	ldr	r3, [pc, #148]	; (800a8e0 <__d2b+0xb0>)
 800a84a:	4826      	ldr	r0, [pc, #152]	; (800a8e4 <__d2b+0xb4>)
 800a84c:	f240 310a 	movw	r1, #778	; 0x30a
 800a850:	f000 fb60 	bl	800af14 <__assert_func>
 800a854:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a858:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a85c:	bb35      	cbnz	r5, 800a8ac <__d2b+0x7c>
 800a85e:	2e00      	cmp	r6, #0
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	d028      	beq.n	800a8b6 <__d2b+0x86>
 800a864:	4668      	mov	r0, sp
 800a866:	9600      	str	r6, [sp, #0]
 800a868:	f7ff fd06 	bl	800a278 <__lo0bits>
 800a86c:	9900      	ldr	r1, [sp, #0]
 800a86e:	b300      	cbz	r0, 800a8b2 <__d2b+0x82>
 800a870:	9a01      	ldr	r2, [sp, #4]
 800a872:	f1c0 0320 	rsb	r3, r0, #32
 800a876:	fa02 f303 	lsl.w	r3, r2, r3
 800a87a:	430b      	orrs	r3, r1
 800a87c:	40c2      	lsrs	r2, r0
 800a87e:	6163      	str	r3, [r4, #20]
 800a880:	9201      	str	r2, [sp, #4]
 800a882:	9b01      	ldr	r3, [sp, #4]
 800a884:	61a3      	str	r3, [r4, #24]
 800a886:	2b00      	cmp	r3, #0
 800a888:	bf14      	ite	ne
 800a88a:	2202      	movne	r2, #2
 800a88c:	2201      	moveq	r2, #1
 800a88e:	6122      	str	r2, [r4, #16]
 800a890:	b1d5      	cbz	r5, 800a8c8 <__d2b+0x98>
 800a892:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a896:	4405      	add	r5, r0
 800a898:	f8c9 5000 	str.w	r5, [r9]
 800a89c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8a0:	f8c8 0000 	str.w	r0, [r8]
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	b003      	add	sp, #12
 800a8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8b0:	e7d5      	b.n	800a85e <__d2b+0x2e>
 800a8b2:	6161      	str	r1, [r4, #20]
 800a8b4:	e7e5      	b.n	800a882 <__d2b+0x52>
 800a8b6:	a801      	add	r0, sp, #4
 800a8b8:	f7ff fcde 	bl	800a278 <__lo0bits>
 800a8bc:	9b01      	ldr	r3, [sp, #4]
 800a8be:	6163      	str	r3, [r4, #20]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	6122      	str	r2, [r4, #16]
 800a8c4:	3020      	adds	r0, #32
 800a8c6:	e7e3      	b.n	800a890 <__d2b+0x60>
 800a8c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8d0:	f8c9 0000 	str.w	r0, [r9]
 800a8d4:	6918      	ldr	r0, [r3, #16]
 800a8d6:	f7ff fcaf 	bl	800a238 <__hi0bits>
 800a8da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8de:	e7df      	b.n	800a8a0 <__d2b+0x70>
 800a8e0:	0800d098 	.word	0x0800d098
 800a8e4:	0800d13b 	.word	0x0800d13b

0800a8e8 <__ratio>:
 800a8e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	4688      	mov	r8, r1
 800a8ee:	4669      	mov	r1, sp
 800a8f0:	4681      	mov	r9, r0
 800a8f2:	f7ff ff4d 	bl	800a790 <__b2d>
 800a8f6:	a901      	add	r1, sp, #4
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	ec55 4b10 	vmov	r4, r5, d0
 800a8fe:	f7ff ff47 	bl	800a790 <__b2d>
 800a902:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a906:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a90a:	eba3 0c02 	sub.w	ip, r3, r2
 800a90e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a912:	1a9b      	subs	r3, r3, r2
 800a914:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a918:	ec51 0b10 	vmov	r0, r1, d0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	bfd6      	itet	le
 800a920:	460a      	movle	r2, r1
 800a922:	462a      	movgt	r2, r5
 800a924:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a928:	468b      	mov	fp, r1
 800a92a:	462f      	mov	r7, r5
 800a92c:	bfd4      	ite	le
 800a92e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a932:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a936:	4620      	mov	r0, r4
 800a938:	ee10 2a10 	vmov	r2, s0
 800a93c:	465b      	mov	r3, fp
 800a93e:	4639      	mov	r1, r7
 800a940:	f7f5 ffa4 	bl	800088c <__aeabi_ddiv>
 800a944:	ec41 0b10 	vmov	d0, r0, r1
 800a948:	b003      	add	sp, #12
 800a94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a950 <_mprec_log10>:
 800a950:	2817      	cmp	r0, #23
 800a952:	b5d0      	push	{r4, r6, r7, lr}
 800a954:	4604      	mov	r4, r0
 800a956:	dc07      	bgt.n	800a968 <_mprec_log10+0x18>
 800a958:	4809      	ldr	r0, [pc, #36]	; (800a980 <_mprec_log10+0x30>)
 800a95a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800a95e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a962:	ec41 0b10 	vmov	d0, r0, r1
 800a966:	bdd0      	pop	{r4, r6, r7, pc}
 800a968:	4906      	ldr	r1, [pc, #24]	; (800a984 <_mprec_log10+0x34>)
 800a96a:	4f07      	ldr	r7, [pc, #28]	; (800a988 <_mprec_log10+0x38>)
 800a96c:	2000      	movs	r0, #0
 800a96e:	2600      	movs	r6, #0
 800a970:	4632      	mov	r2, r6
 800a972:	463b      	mov	r3, r7
 800a974:	f7f5 fe60 	bl	8000638 <__aeabi_dmul>
 800a978:	3c01      	subs	r4, #1
 800a97a:	d1f9      	bne.n	800a970 <_mprec_log10+0x20>
 800a97c:	e7f1      	b.n	800a962 <_mprec_log10+0x12>
 800a97e:	bf00      	nop
 800a980:	0800d1c0 	.word	0x0800d1c0
 800a984:	3ff00000 	.word	0x3ff00000
 800a988:	40240000 	.word	0x40240000

0800a98c <__copybits>:
 800a98c:	3901      	subs	r1, #1
 800a98e:	b570      	push	{r4, r5, r6, lr}
 800a990:	1149      	asrs	r1, r1, #5
 800a992:	6914      	ldr	r4, [r2, #16]
 800a994:	3101      	adds	r1, #1
 800a996:	f102 0314 	add.w	r3, r2, #20
 800a99a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a99e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9a2:	1f05      	subs	r5, r0, #4
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	d30c      	bcc.n	800a9c2 <__copybits+0x36>
 800a9a8:	1aa3      	subs	r3, r4, r2
 800a9aa:	3b11      	subs	r3, #17
 800a9ac:	f023 0303 	bic.w	r3, r3, #3
 800a9b0:	3211      	adds	r2, #17
 800a9b2:	42a2      	cmp	r2, r4
 800a9b4:	bf88      	it	hi
 800a9b6:	2300      	movhi	r3, #0
 800a9b8:	4418      	add	r0, r3
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	4288      	cmp	r0, r1
 800a9be:	d305      	bcc.n	800a9cc <__copybits+0x40>
 800a9c0:	bd70      	pop	{r4, r5, r6, pc}
 800a9c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9ca:	e7eb      	b.n	800a9a4 <__copybits+0x18>
 800a9cc:	f840 3b04 	str.w	r3, [r0], #4
 800a9d0:	e7f4      	b.n	800a9bc <__copybits+0x30>

0800a9d2 <__any_on>:
 800a9d2:	f100 0214 	add.w	r2, r0, #20
 800a9d6:	6900      	ldr	r0, [r0, #16]
 800a9d8:	114b      	asrs	r3, r1, #5
 800a9da:	4298      	cmp	r0, r3
 800a9dc:	b510      	push	{r4, lr}
 800a9de:	db11      	blt.n	800aa04 <__any_on+0x32>
 800a9e0:	dd0a      	ble.n	800a9f8 <__any_on+0x26>
 800a9e2:	f011 011f 	ands.w	r1, r1, #31
 800a9e6:	d007      	beq.n	800a9f8 <__any_on+0x26>
 800a9e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a9ec:	fa24 f001 	lsr.w	r0, r4, r1
 800a9f0:	fa00 f101 	lsl.w	r1, r0, r1
 800a9f4:	428c      	cmp	r4, r1
 800a9f6:	d10b      	bne.n	800aa10 <__any_on+0x3e>
 800a9f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d803      	bhi.n	800aa08 <__any_on+0x36>
 800aa00:	2000      	movs	r0, #0
 800aa02:	bd10      	pop	{r4, pc}
 800aa04:	4603      	mov	r3, r0
 800aa06:	e7f7      	b.n	800a9f8 <__any_on+0x26>
 800aa08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa0c:	2900      	cmp	r1, #0
 800aa0e:	d0f5      	beq.n	800a9fc <__any_on+0x2a>
 800aa10:	2001      	movs	r0, #1
 800aa12:	e7f6      	b.n	800aa02 <__any_on+0x30>

0800aa14 <_calloc_r>:
 800aa14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa16:	fba1 2402 	umull	r2, r4, r1, r2
 800aa1a:	b94c      	cbnz	r4, 800aa30 <_calloc_r+0x1c>
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	9201      	str	r2, [sp, #4]
 800aa20:	f000 f82e 	bl	800aa80 <_malloc_r>
 800aa24:	9a01      	ldr	r2, [sp, #4]
 800aa26:	4605      	mov	r5, r0
 800aa28:	b930      	cbnz	r0, 800aa38 <_calloc_r+0x24>
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	b003      	add	sp, #12
 800aa2e:	bd30      	pop	{r4, r5, pc}
 800aa30:	220c      	movs	r2, #12
 800aa32:	6002      	str	r2, [r0, #0]
 800aa34:	2500      	movs	r5, #0
 800aa36:	e7f8      	b.n	800aa2a <_calloc_r+0x16>
 800aa38:	4621      	mov	r1, r4
 800aa3a:	f7fe f807 	bl	8008a4c <memset>
 800aa3e:	e7f4      	b.n	800aa2a <_calloc_r+0x16>

0800aa40 <sbrk_aligned>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	4e0e      	ldr	r6, [pc, #56]	; (800aa7c <sbrk_aligned+0x3c>)
 800aa44:	460c      	mov	r4, r1
 800aa46:	6831      	ldr	r1, [r6, #0]
 800aa48:	4605      	mov	r5, r0
 800aa4a:	b911      	cbnz	r1, 800aa52 <sbrk_aligned+0x12>
 800aa4c:	f000 fa28 	bl	800aea0 <_sbrk_r>
 800aa50:	6030      	str	r0, [r6, #0]
 800aa52:	4621      	mov	r1, r4
 800aa54:	4628      	mov	r0, r5
 800aa56:	f000 fa23 	bl	800aea0 <_sbrk_r>
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	d00a      	beq.n	800aa74 <sbrk_aligned+0x34>
 800aa5e:	1cc4      	adds	r4, r0, #3
 800aa60:	f024 0403 	bic.w	r4, r4, #3
 800aa64:	42a0      	cmp	r0, r4
 800aa66:	d007      	beq.n	800aa78 <sbrk_aligned+0x38>
 800aa68:	1a21      	subs	r1, r4, r0
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f000 fa18 	bl	800aea0 <_sbrk_r>
 800aa70:	3001      	adds	r0, #1
 800aa72:	d101      	bne.n	800aa78 <sbrk_aligned+0x38>
 800aa74:	f04f 34ff 	mov.w	r4, #4294967295
 800aa78:	4620      	mov	r0, r4
 800aa7a:	bd70      	pop	{r4, r5, r6, pc}
 800aa7c:	20000958 	.word	0x20000958

0800aa80 <_malloc_r>:
 800aa80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa84:	1ccd      	adds	r5, r1, #3
 800aa86:	f025 0503 	bic.w	r5, r5, #3
 800aa8a:	3508      	adds	r5, #8
 800aa8c:	2d0c      	cmp	r5, #12
 800aa8e:	bf38      	it	cc
 800aa90:	250c      	movcc	r5, #12
 800aa92:	2d00      	cmp	r5, #0
 800aa94:	4607      	mov	r7, r0
 800aa96:	db01      	blt.n	800aa9c <_malloc_r+0x1c>
 800aa98:	42a9      	cmp	r1, r5
 800aa9a:	d905      	bls.n	800aaa8 <_malloc_r+0x28>
 800aa9c:	230c      	movs	r3, #12
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	2600      	movs	r6, #0
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa8:	4e2e      	ldr	r6, [pc, #184]	; (800ab64 <_malloc_r+0xe4>)
 800aaaa:	f001 f8e5 	bl	800bc78 <__malloc_lock>
 800aaae:	6833      	ldr	r3, [r6, #0]
 800aab0:	461c      	mov	r4, r3
 800aab2:	bb34      	cbnz	r4, 800ab02 <_malloc_r+0x82>
 800aab4:	4629      	mov	r1, r5
 800aab6:	4638      	mov	r0, r7
 800aab8:	f7ff ffc2 	bl	800aa40 <sbrk_aligned>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	4604      	mov	r4, r0
 800aac0:	d14d      	bne.n	800ab5e <_malloc_r+0xde>
 800aac2:	6834      	ldr	r4, [r6, #0]
 800aac4:	4626      	mov	r6, r4
 800aac6:	2e00      	cmp	r6, #0
 800aac8:	d140      	bne.n	800ab4c <_malloc_r+0xcc>
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	4631      	mov	r1, r6
 800aace:	4638      	mov	r0, r7
 800aad0:	eb04 0803 	add.w	r8, r4, r3
 800aad4:	f000 f9e4 	bl	800aea0 <_sbrk_r>
 800aad8:	4580      	cmp	r8, r0
 800aada:	d13a      	bne.n	800ab52 <_malloc_r+0xd2>
 800aadc:	6821      	ldr	r1, [r4, #0]
 800aade:	3503      	adds	r5, #3
 800aae0:	1a6d      	subs	r5, r5, r1
 800aae2:	f025 0503 	bic.w	r5, r5, #3
 800aae6:	3508      	adds	r5, #8
 800aae8:	2d0c      	cmp	r5, #12
 800aaea:	bf38      	it	cc
 800aaec:	250c      	movcc	r5, #12
 800aaee:	4629      	mov	r1, r5
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	f7ff ffa5 	bl	800aa40 <sbrk_aligned>
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	d02b      	beq.n	800ab52 <_malloc_r+0xd2>
 800aafa:	6823      	ldr	r3, [r4, #0]
 800aafc:	442b      	add	r3, r5
 800aafe:	6023      	str	r3, [r4, #0]
 800ab00:	e00e      	b.n	800ab20 <_malloc_r+0xa0>
 800ab02:	6822      	ldr	r2, [r4, #0]
 800ab04:	1b52      	subs	r2, r2, r5
 800ab06:	d41e      	bmi.n	800ab46 <_malloc_r+0xc6>
 800ab08:	2a0b      	cmp	r2, #11
 800ab0a:	d916      	bls.n	800ab3a <_malloc_r+0xba>
 800ab0c:	1961      	adds	r1, r4, r5
 800ab0e:	42a3      	cmp	r3, r4
 800ab10:	6025      	str	r5, [r4, #0]
 800ab12:	bf18      	it	ne
 800ab14:	6059      	strne	r1, [r3, #4]
 800ab16:	6863      	ldr	r3, [r4, #4]
 800ab18:	bf08      	it	eq
 800ab1a:	6031      	streq	r1, [r6, #0]
 800ab1c:	5162      	str	r2, [r4, r5]
 800ab1e:	604b      	str	r3, [r1, #4]
 800ab20:	4638      	mov	r0, r7
 800ab22:	f104 060b 	add.w	r6, r4, #11
 800ab26:	f001 f8ad 	bl	800bc84 <__malloc_unlock>
 800ab2a:	f026 0607 	bic.w	r6, r6, #7
 800ab2e:	1d23      	adds	r3, r4, #4
 800ab30:	1af2      	subs	r2, r6, r3
 800ab32:	d0b6      	beq.n	800aaa2 <_malloc_r+0x22>
 800ab34:	1b9b      	subs	r3, r3, r6
 800ab36:	50a3      	str	r3, [r4, r2]
 800ab38:	e7b3      	b.n	800aaa2 <_malloc_r+0x22>
 800ab3a:	6862      	ldr	r2, [r4, #4]
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	bf0c      	ite	eq
 800ab40:	6032      	streq	r2, [r6, #0]
 800ab42:	605a      	strne	r2, [r3, #4]
 800ab44:	e7ec      	b.n	800ab20 <_malloc_r+0xa0>
 800ab46:	4623      	mov	r3, r4
 800ab48:	6864      	ldr	r4, [r4, #4]
 800ab4a:	e7b2      	b.n	800aab2 <_malloc_r+0x32>
 800ab4c:	4634      	mov	r4, r6
 800ab4e:	6876      	ldr	r6, [r6, #4]
 800ab50:	e7b9      	b.n	800aac6 <_malloc_r+0x46>
 800ab52:	230c      	movs	r3, #12
 800ab54:	603b      	str	r3, [r7, #0]
 800ab56:	4638      	mov	r0, r7
 800ab58:	f001 f894 	bl	800bc84 <__malloc_unlock>
 800ab5c:	e7a1      	b.n	800aaa2 <_malloc_r+0x22>
 800ab5e:	6025      	str	r5, [r4, #0]
 800ab60:	e7de      	b.n	800ab20 <_malloc_r+0xa0>
 800ab62:	bf00      	nop
 800ab64:	20000954 	.word	0x20000954

0800ab68 <_printf_common>:
 800ab68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6c:	4616      	mov	r6, r2
 800ab6e:	4699      	mov	r9, r3
 800ab70:	688a      	ldr	r2, [r1, #8]
 800ab72:	690b      	ldr	r3, [r1, #16]
 800ab74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	bfb8      	it	lt
 800ab7c:	4613      	movlt	r3, r2
 800ab7e:	6033      	str	r3, [r6, #0]
 800ab80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab84:	4607      	mov	r7, r0
 800ab86:	460c      	mov	r4, r1
 800ab88:	b10a      	cbz	r2, 800ab8e <_printf_common+0x26>
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	6033      	str	r3, [r6, #0]
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	0699      	lsls	r1, r3, #26
 800ab92:	bf42      	ittt	mi
 800ab94:	6833      	ldrmi	r3, [r6, #0]
 800ab96:	3302      	addmi	r3, #2
 800ab98:	6033      	strmi	r3, [r6, #0]
 800ab9a:	6825      	ldr	r5, [r4, #0]
 800ab9c:	f015 0506 	ands.w	r5, r5, #6
 800aba0:	d106      	bne.n	800abb0 <_printf_common+0x48>
 800aba2:	f104 0a19 	add.w	sl, r4, #25
 800aba6:	68e3      	ldr	r3, [r4, #12]
 800aba8:	6832      	ldr	r2, [r6, #0]
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	42ab      	cmp	r3, r5
 800abae:	dc26      	bgt.n	800abfe <_printf_common+0x96>
 800abb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abb4:	1e13      	subs	r3, r2, #0
 800abb6:	6822      	ldr	r2, [r4, #0]
 800abb8:	bf18      	it	ne
 800abba:	2301      	movne	r3, #1
 800abbc:	0692      	lsls	r2, r2, #26
 800abbe:	d42b      	bmi.n	800ac18 <_printf_common+0xb0>
 800abc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abc4:	4649      	mov	r1, r9
 800abc6:	4638      	mov	r0, r7
 800abc8:	47c0      	blx	r8
 800abca:	3001      	adds	r0, #1
 800abcc:	d01e      	beq.n	800ac0c <_printf_common+0xa4>
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	68e5      	ldr	r5, [r4, #12]
 800abd2:	6832      	ldr	r2, [r6, #0]
 800abd4:	f003 0306 	and.w	r3, r3, #6
 800abd8:	2b04      	cmp	r3, #4
 800abda:	bf08      	it	eq
 800abdc:	1aad      	subeq	r5, r5, r2
 800abde:	68a3      	ldr	r3, [r4, #8]
 800abe0:	6922      	ldr	r2, [r4, #16]
 800abe2:	bf0c      	ite	eq
 800abe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abe8:	2500      	movne	r5, #0
 800abea:	4293      	cmp	r3, r2
 800abec:	bfc4      	itt	gt
 800abee:	1a9b      	subgt	r3, r3, r2
 800abf0:	18ed      	addgt	r5, r5, r3
 800abf2:	2600      	movs	r6, #0
 800abf4:	341a      	adds	r4, #26
 800abf6:	42b5      	cmp	r5, r6
 800abf8:	d11a      	bne.n	800ac30 <_printf_common+0xc8>
 800abfa:	2000      	movs	r0, #0
 800abfc:	e008      	b.n	800ac10 <_printf_common+0xa8>
 800abfe:	2301      	movs	r3, #1
 800ac00:	4652      	mov	r2, sl
 800ac02:	4649      	mov	r1, r9
 800ac04:	4638      	mov	r0, r7
 800ac06:	47c0      	blx	r8
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d103      	bne.n	800ac14 <_printf_common+0xac>
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac14:	3501      	adds	r5, #1
 800ac16:	e7c6      	b.n	800aba6 <_printf_common+0x3e>
 800ac18:	18e1      	adds	r1, r4, r3
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	2030      	movs	r0, #48	; 0x30
 800ac1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac22:	4422      	add	r2, r4
 800ac24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac2c:	3302      	adds	r3, #2
 800ac2e:	e7c7      	b.n	800abc0 <_printf_common+0x58>
 800ac30:	2301      	movs	r3, #1
 800ac32:	4622      	mov	r2, r4
 800ac34:	4649      	mov	r1, r9
 800ac36:	4638      	mov	r0, r7
 800ac38:	47c0      	blx	r8
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	d0e6      	beq.n	800ac0c <_printf_common+0xa4>
 800ac3e:	3601      	adds	r6, #1
 800ac40:	e7d9      	b.n	800abf6 <_printf_common+0x8e>
	...

0800ac44 <_printf_i>:
 800ac44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	7e0f      	ldrb	r7, [r1, #24]
 800ac4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac4c:	2f78      	cmp	r7, #120	; 0x78
 800ac4e:	4691      	mov	r9, r2
 800ac50:	4680      	mov	r8, r0
 800ac52:	460c      	mov	r4, r1
 800ac54:	469a      	mov	sl, r3
 800ac56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac5a:	d807      	bhi.n	800ac6c <_printf_i+0x28>
 800ac5c:	2f62      	cmp	r7, #98	; 0x62
 800ac5e:	d80a      	bhi.n	800ac76 <_printf_i+0x32>
 800ac60:	2f00      	cmp	r7, #0
 800ac62:	f000 80d8 	beq.w	800ae16 <_printf_i+0x1d2>
 800ac66:	2f58      	cmp	r7, #88	; 0x58
 800ac68:	f000 80a3 	beq.w	800adb2 <_printf_i+0x16e>
 800ac6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac74:	e03a      	b.n	800acec <_printf_i+0xa8>
 800ac76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac7a:	2b15      	cmp	r3, #21
 800ac7c:	d8f6      	bhi.n	800ac6c <_printf_i+0x28>
 800ac7e:	a101      	add	r1, pc, #4	; (adr r1, 800ac84 <_printf_i+0x40>)
 800ac80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac84:	0800acdd 	.word	0x0800acdd
 800ac88:	0800acf1 	.word	0x0800acf1
 800ac8c:	0800ac6d 	.word	0x0800ac6d
 800ac90:	0800ac6d 	.word	0x0800ac6d
 800ac94:	0800ac6d 	.word	0x0800ac6d
 800ac98:	0800ac6d 	.word	0x0800ac6d
 800ac9c:	0800acf1 	.word	0x0800acf1
 800aca0:	0800ac6d 	.word	0x0800ac6d
 800aca4:	0800ac6d 	.word	0x0800ac6d
 800aca8:	0800ac6d 	.word	0x0800ac6d
 800acac:	0800ac6d 	.word	0x0800ac6d
 800acb0:	0800adfd 	.word	0x0800adfd
 800acb4:	0800ad21 	.word	0x0800ad21
 800acb8:	0800addf 	.word	0x0800addf
 800acbc:	0800ac6d 	.word	0x0800ac6d
 800acc0:	0800ac6d 	.word	0x0800ac6d
 800acc4:	0800ae1f 	.word	0x0800ae1f
 800acc8:	0800ac6d 	.word	0x0800ac6d
 800accc:	0800ad21 	.word	0x0800ad21
 800acd0:	0800ac6d 	.word	0x0800ac6d
 800acd4:	0800ac6d 	.word	0x0800ac6d
 800acd8:	0800ade7 	.word	0x0800ade7
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	1d1a      	adds	r2, r3, #4
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	602a      	str	r2, [r5, #0]
 800ace4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ace8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acec:	2301      	movs	r3, #1
 800acee:	e0a3      	b.n	800ae38 <_printf_i+0x1f4>
 800acf0:	6820      	ldr	r0, [r4, #0]
 800acf2:	6829      	ldr	r1, [r5, #0]
 800acf4:	0606      	lsls	r6, r0, #24
 800acf6:	f101 0304 	add.w	r3, r1, #4
 800acfa:	d50a      	bpl.n	800ad12 <_printf_i+0xce>
 800acfc:	680e      	ldr	r6, [r1, #0]
 800acfe:	602b      	str	r3, [r5, #0]
 800ad00:	2e00      	cmp	r6, #0
 800ad02:	da03      	bge.n	800ad0c <_printf_i+0xc8>
 800ad04:	232d      	movs	r3, #45	; 0x2d
 800ad06:	4276      	negs	r6, r6
 800ad08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad0c:	485e      	ldr	r0, [pc, #376]	; (800ae88 <_printf_i+0x244>)
 800ad0e:	230a      	movs	r3, #10
 800ad10:	e019      	b.n	800ad46 <_printf_i+0x102>
 800ad12:	680e      	ldr	r6, [r1, #0]
 800ad14:	602b      	str	r3, [r5, #0]
 800ad16:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad1a:	bf18      	it	ne
 800ad1c:	b236      	sxthne	r6, r6
 800ad1e:	e7ef      	b.n	800ad00 <_printf_i+0xbc>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	6820      	ldr	r0, [r4, #0]
 800ad24:	1d19      	adds	r1, r3, #4
 800ad26:	6029      	str	r1, [r5, #0]
 800ad28:	0601      	lsls	r1, r0, #24
 800ad2a:	d501      	bpl.n	800ad30 <_printf_i+0xec>
 800ad2c:	681e      	ldr	r6, [r3, #0]
 800ad2e:	e002      	b.n	800ad36 <_printf_i+0xf2>
 800ad30:	0646      	lsls	r6, r0, #25
 800ad32:	d5fb      	bpl.n	800ad2c <_printf_i+0xe8>
 800ad34:	881e      	ldrh	r6, [r3, #0]
 800ad36:	4854      	ldr	r0, [pc, #336]	; (800ae88 <_printf_i+0x244>)
 800ad38:	2f6f      	cmp	r7, #111	; 0x6f
 800ad3a:	bf0c      	ite	eq
 800ad3c:	2308      	moveq	r3, #8
 800ad3e:	230a      	movne	r3, #10
 800ad40:	2100      	movs	r1, #0
 800ad42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad46:	6865      	ldr	r5, [r4, #4]
 800ad48:	60a5      	str	r5, [r4, #8]
 800ad4a:	2d00      	cmp	r5, #0
 800ad4c:	bfa2      	ittt	ge
 800ad4e:	6821      	ldrge	r1, [r4, #0]
 800ad50:	f021 0104 	bicge.w	r1, r1, #4
 800ad54:	6021      	strge	r1, [r4, #0]
 800ad56:	b90e      	cbnz	r6, 800ad5c <_printf_i+0x118>
 800ad58:	2d00      	cmp	r5, #0
 800ad5a:	d04d      	beq.n	800adf8 <_printf_i+0x1b4>
 800ad5c:	4615      	mov	r5, r2
 800ad5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad62:	fb03 6711 	mls	r7, r3, r1, r6
 800ad66:	5dc7      	ldrb	r7, [r0, r7]
 800ad68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad6c:	4637      	mov	r7, r6
 800ad6e:	42bb      	cmp	r3, r7
 800ad70:	460e      	mov	r6, r1
 800ad72:	d9f4      	bls.n	800ad5e <_printf_i+0x11a>
 800ad74:	2b08      	cmp	r3, #8
 800ad76:	d10b      	bne.n	800ad90 <_printf_i+0x14c>
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	07de      	lsls	r6, r3, #31
 800ad7c:	d508      	bpl.n	800ad90 <_printf_i+0x14c>
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	6861      	ldr	r1, [r4, #4]
 800ad82:	4299      	cmp	r1, r3
 800ad84:	bfde      	ittt	le
 800ad86:	2330      	movle	r3, #48	; 0x30
 800ad88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad90:	1b52      	subs	r2, r2, r5
 800ad92:	6122      	str	r2, [r4, #16]
 800ad94:	f8cd a000 	str.w	sl, [sp]
 800ad98:	464b      	mov	r3, r9
 800ad9a:	aa03      	add	r2, sp, #12
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4640      	mov	r0, r8
 800ada0:	f7ff fee2 	bl	800ab68 <_printf_common>
 800ada4:	3001      	adds	r0, #1
 800ada6:	d14c      	bne.n	800ae42 <_printf_i+0x1fe>
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	b004      	add	sp, #16
 800adae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb2:	4835      	ldr	r0, [pc, #212]	; (800ae88 <_printf_i+0x244>)
 800adb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800adb8:	6829      	ldr	r1, [r5, #0]
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	f851 6b04 	ldr.w	r6, [r1], #4
 800adc0:	6029      	str	r1, [r5, #0]
 800adc2:	061d      	lsls	r5, r3, #24
 800adc4:	d514      	bpl.n	800adf0 <_printf_i+0x1ac>
 800adc6:	07df      	lsls	r7, r3, #31
 800adc8:	bf44      	itt	mi
 800adca:	f043 0320 	orrmi.w	r3, r3, #32
 800adce:	6023      	strmi	r3, [r4, #0]
 800add0:	b91e      	cbnz	r6, 800adda <_printf_i+0x196>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	f023 0320 	bic.w	r3, r3, #32
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	2310      	movs	r3, #16
 800addc:	e7b0      	b.n	800ad40 <_printf_i+0xfc>
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	f043 0320 	orr.w	r3, r3, #32
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	2378      	movs	r3, #120	; 0x78
 800ade8:	4828      	ldr	r0, [pc, #160]	; (800ae8c <_printf_i+0x248>)
 800adea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800adee:	e7e3      	b.n	800adb8 <_printf_i+0x174>
 800adf0:	0659      	lsls	r1, r3, #25
 800adf2:	bf48      	it	mi
 800adf4:	b2b6      	uxthmi	r6, r6
 800adf6:	e7e6      	b.n	800adc6 <_printf_i+0x182>
 800adf8:	4615      	mov	r5, r2
 800adfa:	e7bb      	b.n	800ad74 <_printf_i+0x130>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	6826      	ldr	r6, [r4, #0]
 800ae00:	6961      	ldr	r1, [r4, #20]
 800ae02:	1d18      	adds	r0, r3, #4
 800ae04:	6028      	str	r0, [r5, #0]
 800ae06:	0635      	lsls	r5, r6, #24
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	d501      	bpl.n	800ae10 <_printf_i+0x1cc>
 800ae0c:	6019      	str	r1, [r3, #0]
 800ae0e:	e002      	b.n	800ae16 <_printf_i+0x1d2>
 800ae10:	0670      	lsls	r0, r6, #25
 800ae12:	d5fb      	bpl.n	800ae0c <_printf_i+0x1c8>
 800ae14:	8019      	strh	r1, [r3, #0]
 800ae16:	2300      	movs	r3, #0
 800ae18:	6123      	str	r3, [r4, #16]
 800ae1a:	4615      	mov	r5, r2
 800ae1c:	e7ba      	b.n	800ad94 <_printf_i+0x150>
 800ae1e:	682b      	ldr	r3, [r5, #0]
 800ae20:	1d1a      	adds	r2, r3, #4
 800ae22:	602a      	str	r2, [r5, #0]
 800ae24:	681d      	ldr	r5, [r3, #0]
 800ae26:	6862      	ldr	r2, [r4, #4]
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f7f5 f9f8 	bl	8000220 <memchr>
 800ae30:	b108      	cbz	r0, 800ae36 <_printf_i+0x1f2>
 800ae32:	1b40      	subs	r0, r0, r5
 800ae34:	6060      	str	r0, [r4, #4]
 800ae36:	6863      	ldr	r3, [r4, #4]
 800ae38:	6123      	str	r3, [r4, #16]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae40:	e7a8      	b.n	800ad94 <_printf_i+0x150>
 800ae42:	6923      	ldr	r3, [r4, #16]
 800ae44:	462a      	mov	r2, r5
 800ae46:	4649      	mov	r1, r9
 800ae48:	4640      	mov	r0, r8
 800ae4a:	47d0      	blx	sl
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	d0ab      	beq.n	800ada8 <_printf_i+0x164>
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	079b      	lsls	r3, r3, #30
 800ae54:	d413      	bmi.n	800ae7e <_printf_i+0x23a>
 800ae56:	68e0      	ldr	r0, [r4, #12]
 800ae58:	9b03      	ldr	r3, [sp, #12]
 800ae5a:	4298      	cmp	r0, r3
 800ae5c:	bfb8      	it	lt
 800ae5e:	4618      	movlt	r0, r3
 800ae60:	e7a4      	b.n	800adac <_printf_i+0x168>
 800ae62:	2301      	movs	r3, #1
 800ae64:	4632      	mov	r2, r6
 800ae66:	4649      	mov	r1, r9
 800ae68:	4640      	mov	r0, r8
 800ae6a:	47d0      	blx	sl
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d09b      	beq.n	800ada8 <_printf_i+0x164>
 800ae70:	3501      	adds	r5, #1
 800ae72:	68e3      	ldr	r3, [r4, #12]
 800ae74:	9903      	ldr	r1, [sp, #12]
 800ae76:	1a5b      	subs	r3, r3, r1
 800ae78:	42ab      	cmp	r3, r5
 800ae7a:	dcf2      	bgt.n	800ae62 <_printf_i+0x21e>
 800ae7c:	e7eb      	b.n	800ae56 <_printf_i+0x212>
 800ae7e:	2500      	movs	r5, #0
 800ae80:	f104 0619 	add.w	r6, r4, #25
 800ae84:	e7f5      	b.n	800ae72 <_printf_i+0x22e>
 800ae86:	bf00      	nop
 800ae88:	0800d294 	.word	0x0800d294
 800ae8c:	0800d2a5 	.word	0x0800d2a5

0800ae90 <nan>:
 800ae90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae98 <nan+0x8>
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	00000000 	.word	0x00000000
 800ae9c:	7ff80000 	.word	0x7ff80000

0800aea0 <_sbrk_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d06      	ldr	r5, [pc, #24]	; (800aebc <_sbrk_r+0x1c>)
 800aea4:	2300      	movs	r3, #0
 800aea6:	4604      	mov	r4, r0
 800aea8:	4608      	mov	r0, r1
 800aeaa:	602b      	str	r3, [r5, #0]
 800aeac:	f7f7 fc98 	bl	80027e0 <_sbrk>
 800aeb0:	1c43      	adds	r3, r0, #1
 800aeb2:	d102      	bne.n	800aeba <_sbrk_r+0x1a>
 800aeb4:	682b      	ldr	r3, [r5, #0]
 800aeb6:	b103      	cbz	r3, 800aeba <_sbrk_r+0x1a>
 800aeb8:	6023      	str	r3, [r4, #0]
 800aeba:	bd38      	pop	{r3, r4, r5, pc}
 800aebc:	2000095c 	.word	0x2000095c

0800aec0 <strcpy>:
 800aec0:	4603      	mov	r3, r0
 800aec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aec6:	f803 2b01 	strb.w	r2, [r3], #1
 800aeca:	2a00      	cmp	r2, #0
 800aecc:	d1f9      	bne.n	800aec2 <strcpy+0x2>
 800aece:	4770      	bx	lr

0800aed0 <strncmp>:
 800aed0:	b510      	push	{r4, lr}
 800aed2:	b17a      	cbz	r2, 800aef4 <strncmp+0x24>
 800aed4:	4603      	mov	r3, r0
 800aed6:	3901      	subs	r1, #1
 800aed8:	1884      	adds	r4, r0, r2
 800aeda:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aede:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aee2:	4290      	cmp	r0, r2
 800aee4:	d101      	bne.n	800aeea <strncmp+0x1a>
 800aee6:	42a3      	cmp	r3, r4
 800aee8:	d101      	bne.n	800aeee <strncmp+0x1e>
 800aeea:	1a80      	subs	r0, r0, r2
 800aeec:	bd10      	pop	{r4, pc}
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d1f3      	bne.n	800aeda <strncmp+0xa>
 800aef2:	e7fa      	b.n	800aeea <strncmp+0x1a>
 800aef4:	4610      	mov	r0, r2
 800aef6:	e7f9      	b.n	800aeec <strncmp+0x1c>

0800aef8 <__ascii_wctomb>:
 800aef8:	b149      	cbz	r1, 800af0e <__ascii_wctomb+0x16>
 800aefa:	2aff      	cmp	r2, #255	; 0xff
 800aefc:	bf85      	ittet	hi
 800aefe:	238a      	movhi	r3, #138	; 0x8a
 800af00:	6003      	strhi	r3, [r0, #0]
 800af02:	700a      	strbls	r2, [r1, #0]
 800af04:	f04f 30ff 	movhi.w	r0, #4294967295
 800af08:	bf98      	it	ls
 800af0a:	2001      	movls	r0, #1
 800af0c:	4770      	bx	lr
 800af0e:	4608      	mov	r0, r1
 800af10:	4770      	bx	lr
	...

0800af14 <__assert_func>:
 800af14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af16:	4614      	mov	r4, r2
 800af18:	461a      	mov	r2, r3
 800af1a:	4b09      	ldr	r3, [pc, #36]	; (800af40 <__assert_func+0x2c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4605      	mov	r5, r0
 800af20:	68d8      	ldr	r0, [r3, #12]
 800af22:	b14c      	cbz	r4, 800af38 <__assert_func+0x24>
 800af24:	4b07      	ldr	r3, [pc, #28]	; (800af44 <__assert_func+0x30>)
 800af26:	9100      	str	r1, [sp, #0]
 800af28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af2c:	4906      	ldr	r1, [pc, #24]	; (800af48 <__assert_func+0x34>)
 800af2e:	462b      	mov	r3, r5
 800af30:	f000 fe88 	bl	800bc44 <fiprintf>
 800af34:	f001 f912 	bl	800c15c <abort>
 800af38:	4b04      	ldr	r3, [pc, #16]	; (800af4c <__assert_func+0x38>)
 800af3a:	461c      	mov	r4, r3
 800af3c:	e7f3      	b.n	800af26 <__assert_func+0x12>
 800af3e:	bf00      	nop
 800af40:	2000001c 	.word	0x2000001c
 800af44:	0800d2b6 	.word	0x0800d2b6
 800af48:	0800d2c3 	.word	0x0800d2c3
 800af4c:	0800d2f1 	.word	0x0800d2f1

0800af50 <quorem>:
 800af50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	6903      	ldr	r3, [r0, #16]
 800af56:	690c      	ldr	r4, [r1, #16]
 800af58:	42a3      	cmp	r3, r4
 800af5a:	4607      	mov	r7, r0
 800af5c:	f2c0 8081 	blt.w	800b062 <quorem+0x112>
 800af60:	3c01      	subs	r4, #1
 800af62:	f101 0814 	add.w	r8, r1, #20
 800af66:	f100 0514 	add.w	r5, r0, #20
 800af6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af78:	3301      	adds	r3, #1
 800af7a:	429a      	cmp	r2, r3
 800af7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af84:	fbb2 f6f3 	udiv	r6, r2, r3
 800af88:	d331      	bcc.n	800afee <quorem+0x9e>
 800af8a:	f04f 0e00 	mov.w	lr, #0
 800af8e:	4640      	mov	r0, r8
 800af90:	46ac      	mov	ip, r5
 800af92:	46f2      	mov	sl, lr
 800af94:	f850 2b04 	ldr.w	r2, [r0], #4
 800af98:	b293      	uxth	r3, r2
 800af9a:	fb06 e303 	mla	r3, r6, r3, lr
 800af9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	ebaa 0303 	sub.w	r3, sl, r3
 800afa8:	f8dc a000 	ldr.w	sl, [ip]
 800afac:	0c12      	lsrs	r2, r2, #16
 800afae:	fa13 f38a 	uxtah	r3, r3, sl
 800afb2:	fb06 e202 	mla	r2, r6, r2, lr
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	9b00      	ldr	r3, [sp, #0]
 800afba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afbe:	b292      	uxth	r2, r2
 800afc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800afc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afc8:	f8bd 3000 	ldrh.w	r3, [sp]
 800afcc:	4581      	cmp	r9, r0
 800afce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afd2:	f84c 3b04 	str.w	r3, [ip], #4
 800afd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800afda:	d2db      	bcs.n	800af94 <quorem+0x44>
 800afdc:	f855 300b 	ldr.w	r3, [r5, fp]
 800afe0:	b92b      	cbnz	r3, 800afee <quorem+0x9e>
 800afe2:	9b01      	ldr	r3, [sp, #4]
 800afe4:	3b04      	subs	r3, #4
 800afe6:	429d      	cmp	r5, r3
 800afe8:	461a      	mov	r2, r3
 800afea:	d32e      	bcc.n	800b04a <quorem+0xfa>
 800afec:	613c      	str	r4, [r7, #16]
 800afee:	4638      	mov	r0, r7
 800aff0:	f7ff fafc 	bl	800a5ec <__mcmp>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	db24      	blt.n	800b042 <quorem+0xf2>
 800aff8:	3601      	adds	r6, #1
 800affa:	4628      	mov	r0, r5
 800affc:	f04f 0c00 	mov.w	ip, #0
 800b000:	f858 2b04 	ldr.w	r2, [r8], #4
 800b004:	f8d0 e000 	ldr.w	lr, [r0]
 800b008:	b293      	uxth	r3, r2
 800b00a:	ebac 0303 	sub.w	r3, ip, r3
 800b00e:	0c12      	lsrs	r2, r2, #16
 800b010:	fa13 f38e 	uxtah	r3, r3, lr
 800b014:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b018:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b022:	45c1      	cmp	r9, r8
 800b024:	f840 3b04 	str.w	r3, [r0], #4
 800b028:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b02c:	d2e8      	bcs.n	800b000 <quorem+0xb0>
 800b02e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b036:	b922      	cbnz	r2, 800b042 <quorem+0xf2>
 800b038:	3b04      	subs	r3, #4
 800b03a:	429d      	cmp	r5, r3
 800b03c:	461a      	mov	r2, r3
 800b03e:	d30a      	bcc.n	800b056 <quorem+0x106>
 800b040:	613c      	str	r4, [r7, #16]
 800b042:	4630      	mov	r0, r6
 800b044:	b003      	add	sp, #12
 800b046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04a:	6812      	ldr	r2, [r2, #0]
 800b04c:	3b04      	subs	r3, #4
 800b04e:	2a00      	cmp	r2, #0
 800b050:	d1cc      	bne.n	800afec <quorem+0x9c>
 800b052:	3c01      	subs	r4, #1
 800b054:	e7c7      	b.n	800afe6 <quorem+0x96>
 800b056:	6812      	ldr	r2, [r2, #0]
 800b058:	3b04      	subs	r3, #4
 800b05a:	2a00      	cmp	r2, #0
 800b05c:	d1f0      	bne.n	800b040 <quorem+0xf0>
 800b05e:	3c01      	subs	r4, #1
 800b060:	e7eb      	b.n	800b03a <quorem+0xea>
 800b062:	2000      	movs	r0, #0
 800b064:	e7ee      	b.n	800b044 <quorem+0xf4>
	...

0800b068 <_dtoa_r>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	ed2d 8b04 	vpush	{d8-d9}
 800b070:	ec57 6b10 	vmov	r6, r7, d0
 800b074:	b093      	sub	sp, #76	; 0x4c
 800b076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b078:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b07c:	9106      	str	r1, [sp, #24]
 800b07e:	ee10 aa10 	vmov	sl, s0
 800b082:	4604      	mov	r4, r0
 800b084:	9209      	str	r2, [sp, #36]	; 0x24
 800b086:	930c      	str	r3, [sp, #48]	; 0x30
 800b088:	46bb      	mov	fp, r7
 800b08a:	b975      	cbnz	r5, 800b0aa <_dtoa_r+0x42>
 800b08c:	2010      	movs	r0, #16
 800b08e:	f000 fdeb 	bl	800bc68 <malloc>
 800b092:	4602      	mov	r2, r0
 800b094:	6260      	str	r0, [r4, #36]	; 0x24
 800b096:	b920      	cbnz	r0, 800b0a2 <_dtoa_r+0x3a>
 800b098:	4ba7      	ldr	r3, [pc, #668]	; (800b338 <_dtoa_r+0x2d0>)
 800b09a:	21ea      	movs	r1, #234	; 0xea
 800b09c:	48a7      	ldr	r0, [pc, #668]	; (800b33c <_dtoa_r+0x2d4>)
 800b09e:	f7ff ff39 	bl	800af14 <__assert_func>
 800b0a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b0a6:	6005      	str	r5, [r0, #0]
 800b0a8:	60c5      	str	r5, [r0, #12]
 800b0aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ac:	6819      	ldr	r1, [r3, #0]
 800b0ae:	b151      	cbz	r1, 800b0c6 <_dtoa_r+0x5e>
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	604a      	str	r2, [r1, #4]
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	4093      	lsls	r3, r2
 800b0b8:	608b      	str	r3, [r1, #8]
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f7ff f80a 	bl	800a0d4 <_Bfree>
 800b0c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	1e3b      	subs	r3, r7, #0
 800b0c8:	bfaa      	itet	ge
 800b0ca:	2300      	movge	r3, #0
 800b0cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b0d0:	f8c8 3000 	strge.w	r3, [r8]
 800b0d4:	4b9a      	ldr	r3, [pc, #616]	; (800b340 <_dtoa_r+0x2d8>)
 800b0d6:	bfbc      	itt	lt
 800b0d8:	2201      	movlt	r2, #1
 800b0da:	f8c8 2000 	strlt.w	r2, [r8]
 800b0de:	ea33 030b 	bics.w	r3, r3, fp
 800b0e2:	d11b      	bne.n	800b11c <_dtoa_r+0xb4>
 800b0e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0f0:	4333      	orrs	r3, r6
 800b0f2:	f000 8592 	beq.w	800bc1a <_dtoa_r+0xbb2>
 800b0f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0f8:	b963      	cbnz	r3, 800b114 <_dtoa_r+0xac>
 800b0fa:	4b92      	ldr	r3, [pc, #584]	; (800b344 <_dtoa_r+0x2dc>)
 800b0fc:	e022      	b.n	800b144 <_dtoa_r+0xdc>
 800b0fe:	4b92      	ldr	r3, [pc, #584]	; (800b348 <_dtoa_r+0x2e0>)
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	3308      	adds	r3, #8
 800b104:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b106:	6013      	str	r3, [r2, #0]
 800b108:	9801      	ldr	r0, [sp, #4]
 800b10a:	b013      	add	sp, #76	; 0x4c
 800b10c:	ecbd 8b04 	vpop	{d8-d9}
 800b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b114:	4b8b      	ldr	r3, [pc, #556]	; (800b344 <_dtoa_r+0x2dc>)
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	3303      	adds	r3, #3
 800b11a:	e7f3      	b.n	800b104 <_dtoa_r+0x9c>
 800b11c:	2200      	movs	r2, #0
 800b11e:	2300      	movs	r3, #0
 800b120:	4650      	mov	r0, sl
 800b122:	4659      	mov	r1, fp
 800b124:	f7f5 fcf0 	bl	8000b08 <__aeabi_dcmpeq>
 800b128:	ec4b ab19 	vmov	d9, sl, fp
 800b12c:	4680      	mov	r8, r0
 800b12e:	b158      	cbz	r0, 800b148 <_dtoa_r+0xe0>
 800b130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b132:	2301      	movs	r3, #1
 800b134:	6013      	str	r3, [r2, #0]
 800b136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 856b 	beq.w	800bc14 <_dtoa_r+0xbac>
 800b13e:	4883      	ldr	r0, [pc, #524]	; (800b34c <_dtoa_r+0x2e4>)
 800b140:	6018      	str	r0, [r3, #0]
 800b142:	1e43      	subs	r3, r0, #1
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	e7df      	b.n	800b108 <_dtoa_r+0xa0>
 800b148:	ec4b ab10 	vmov	d0, sl, fp
 800b14c:	aa10      	add	r2, sp, #64	; 0x40
 800b14e:	a911      	add	r1, sp, #68	; 0x44
 800b150:	4620      	mov	r0, r4
 800b152:	f7ff fb6d 	bl	800a830 <__d2b>
 800b156:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b15a:	ee08 0a10 	vmov	s16, r0
 800b15e:	2d00      	cmp	r5, #0
 800b160:	f000 8084 	beq.w	800b26c <_dtoa_r+0x204>
 800b164:	ee19 3a90 	vmov	r3, s19
 800b168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b16c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b170:	4656      	mov	r6, sl
 800b172:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b176:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b17a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b17e:	4b74      	ldr	r3, [pc, #464]	; (800b350 <_dtoa_r+0x2e8>)
 800b180:	2200      	movs	r2, #0
 800b182:	4630      	mov	r0, r6
 800b184:	4639      	mov	r1, r7
 800b186:	f7f5 f89f 	bl	80002c8 <__aeabi_dsub>
 800b18a:	a365      	add	r3, pc, #404	; (adr r3, 800b320 <_dtoa_r+0x2b8>)
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f7f5 fa52 	bl	8000638 <__aeabi_dmul>
 800b194:	a364      	add	r3, pc, #400	; (adr r3, 800b328 <_dtoa_r+0x2c0>)
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	f7f5 f897 	bl	80002cc <__adddf3>
 800b19e:	4606      	mov	r6, r0
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	460f      	mov	r7, r1
 800b1a4:	f7f5 f9de 	bl	8000564 <__aeabi_i2d>
 800b1a8:	a361      	add	r3, pc, #388	; (adr r3, 800b330 <_dtoa_r+0x2c8>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	f7f5 fa43 	bl	8000638 <__aeabi_dmul>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	f7f5 f887 	bl	80002cc <__adddf3>
 800b1be:	4606      	mov	r6, r0
 800b1c0:	460f      	mov	r7, r1
 800b1c2:	f7f5 fcd3 	bl	8000b6c <__aeabi_d2iz>
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	9000      	str	r0, [sp, #0]
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	4639      	mov	r1, r7
 800b1d0:	f7f5 fca4 	bl	8000b1c <__aeabi_dcmplt>
 800b1d4:	b150      	cbz	r0, 800b1ec <_dtoa_r+0x184>
 800b1d6:	9800      	ldr	r0, [sp, #0]
 800b1d8:	f7f5 f9c4 	bl	8000564 <__aeabi_i2d>
 800b1dc:	4632      	mov	r2, r6
 800b1de:	463b      	mov	r3, r7
 800b1e0:	f7f5 fc92 	bl	8000b08 <__aeabi_dcmpeq>
 800b1e4:	b910      	cbnz	r0, 800b1ec <_dtoa_r+0x184>
 800b1e6:	9b00      	ldr	r3, [sp, #0]
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	9300      	str	r3, [sp, #0]
 800b1ec:	9b00      	ldr	r3, [sp, #0]
 800b1ee:	2b16      	cmp	r3, #22
 800b1f0:	d85a      	bhi.n	800b2a8 <_dtoa_r+0x240>
 800b1f2:	9a00      	ldr	r2, [sp, #0]
 800b1f4:	4b57      	ldr	r3, [pc, #348]	; (800b354 <_dtoa_r+0x2ec>)
 800b1f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	ec51 0b19 	vmov	r0, r1, d9
 800b202:	f7f5 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 800b206:	2800      	cmp	r0, #0
 800b208:	d050      	beq.n	800b2ac <_dtoa_r+0x244>
 800b20a:	9b00      	ldr	r3, [sp, #0]
 800b20c:	3b01      	subs	r3, #1
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	2300      	movs	r3, #0
 800b212:	930b      	str	r3, [sp, #44]	; 0x2c
 800b214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b216:	1b5d      	subs	r5, r3, r5
 800b218:	1e6b      	subs	r3, r5, #1
 800b21a:	9305      	str	r3, [sp, #20]
 800b21c:	bf45      	ittet	mi
 800b21e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b222:	9304      	strmi	r3, [sp, #16]
 800b224:	2300      	movpl	r3, #0
 800b226:	2300      	movmi	r3, #0
 800b228:	bf4c      	ite	mi
 800b22a:	9305      	strmi	r3, [sp, #20]
 800b22c:	9304      	strpl	r3, [sp, #16]
 800b22e:	9b00      	ldr	r3, [sp, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	db3d      	blt.n	800b2b0 <_dtoa_r+0x248>
 800b234:	9b05      	ldr	r3, [sp, #20]
 800b236:	9a00      	ldr	r2, [sp, #0]
 800b238:	920a      	str	r2, [sp, #40]	; 0x28
 800b23a:	4413      	add	r3, r2
 800b23c:	9305      	str	r3, [sp, #20]
 800b23e:	2300      	movs	r3, #0
 800b240:	9307      	str	r3, [sp, #28]
 800b242:	9b06      	ldr	r3, [sp, #24]
 800b244:	2b09      	cmp	r3, #9
 800b246:	f200 8089 	bhi.w	800b35c <_dtoa_r+0x2f4>
 800b24a:	2b05      	cmp	r3, #5
 800b24c:	bfc4      	itt	gt
 800b24e:	3b04      	subgt	r3, #4
 800b250:	9306      	strgt	r3, [sp, #24]
 800b252:	9b06      	ldr	r3, [sp, #24]
 800b254:	f1a3 0302 	sub.w	r3, r3, #2
 800b258:	bfcc      	ite	gt
 800b25a:	2500      	movgt	r5, #0
 800b25c:	2501      	movle	r5, #1
 800b25e:	2b03      	cmp	r3, #3
 800b260:	f200 8087 	bhi.w	800b372 <_dtoa_r+0x30a>
 800b264:	e8df f003 	tbb	[pc, r3]
 800b268:	59383a2d 	.word	0x59383a2d
 800b26c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b270:	441d      	add	r5, r3
 800b272:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b276:	2b20      	cmp	r3, #32
 800b278:	bfc1      	itttt	gt
 800b27a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b27e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b282:	fa0b f303 	lslgt.w	r3, fp, r3
 800b286:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b28a:	bfda      	itte	le
 800b28c:	f1c3 0320 	rsble	r3, r3, #32
 800b290:	fa06 f003 	lslle.w	r0, r6, r3
 800b294:	4318      	orrgt	r0, r3
 800b296:	f7f5 f955 	bl	8000544 <__aeabi_ui2d>
 800b29a:	2301      	movs	r3, #1
 800b29c:	4606      	mov	r6, r0
 800b29e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b2a2:	3d01      	subs	r5, #1
 800b2a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b2a6:	e76a      	b.n	800b17e <_dtoa_r+0x116>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e7b2      	b.n	800b212 <_dtoa_r+0x1aa>
 800b2ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800b2ae:	e7b1      	b.n	800b214 <_dtoa_r+0x1ac>
 800b2b0:	9b04      	ldr	r3, [sp, #16]
 800b2b2:	9a00      	ldr	r2, [sp, #0]
 800b2b4:	1a9b      	subs	r3, r3, r2
 800b2b6:	9304      	str	r3, [sp, #16]
 800b2b8:	4253      	negs	r3, r2
 800b2ba:	9307      	str	r3, [sp, #28]
 800b2bc:	2300      	movs	r3, #0
 800b2be:	930a      	str	r3, [sp, #40]	; 0x28
 800b2c0:	e7bf      	b.n	800b242 <_dtoa_r+0x1da>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	9308      	str	r3, [sp, #32]
 800b2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	dc55      	bgt.n	800b378 <_dtoa_r+0x310>
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b2d6:	e00c      	b.n	800b2f2 <_dtoa_r+0x28a>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e7f3      	b.n	800b2c4 <_dtoa_r+0x25c>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2e0:	9308      	str	r3, [sp, #32]
 800b2e2:	9b00      	ldr	r3, [sp, #0]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	9302      	str	r3, [sp, #8]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	9303      	str	r3, [sp, #12]
 800b2ee:	bfb8      	it	lt
 800b2f0:	2301      	movlt	r3, #1
 800b2f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	6042      	str	r2, [r0, #4]
 800b2f8:	2204      	movs	r2, #4
 800b2fa:	f102 0614 	add.w	r6, r2, #20
 800b2fe:	429e      	cmp	r6, r3
 800b300:	6841      	ldr	r1, [r0, #4]
 800b302:	d93d      	bls.n	800b380 <_dtoa_r+0x318>
 800b304:	4620      	mov	r0, r4
 800b306:	f7fe fea5 	bl	800a054 <_Balloc>
 800b30a:	9001      	str	r0, [sp, #4]
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d13b      	bne.n	800b388 <_dtoa_r+0x320>
 800b310:	4b11      	ldr	r3, [pc, #68]	; (800b358 <_dtoa_r+0x2f0>)
 800b312:	4602      	mov	r2, r0
 800b314:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b318:	e6c0      	b.n	800b09c <_dtoa_r+0x34>
 800b31a:	2301      	movs	r3, #1
 800b31c:	e7df      	b.n	800b2de <_dtoa_r+0x276>
 800b31e:	bf00      	nop
 800b320:	636f4361 	.word	0x636f4361
 800b324:	3fd287a7 	.word	0x3fd287a7
 800b328:	8b60c8b3 	.word	0x8b60c8b3
 800b32c:	3fc68a28 	.word	0x3fc68a28
 800b330:	509f79fb 	.word	0x509f79fb
 800b334:	3fd34413 	.word	0x3fd34413
 800b338:	0800d124 	.word	0x0800d124
 800b33c:	0800d402 	.word	0x0800d402
 800b340:	7ff00000 	.word	0x7ff00000
 800b344:	0800d3fc 	.word	0x0800d3fc
 800b348:	0800d3f3 	.word	0x0800d3f3
 800b34c:	0800d401 	.word	0x0800d401
 800b350:	3ff80000 	.word	0x3ff80000
 800b354:	0800d1c0 	.word	0x0800d1c0
 800b358:	0800d098 	.word	0x0800d098
 800b35c:	2501      	movs	r5, #1
 800b35e:	2300      	movs	r3, #0
 800b360:	9306      	str	r3, [sp, #24]
 800b362:	9508      	str	r5, [sp, #32]
 800b364:	f04f 33ff 	mov.w	r3, #4294967295
 800b368:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b36c:	2200      	movs	r2, #0
 800b36e:	2312      	movs	r3, #18
 800b370:	e7b0      	b.n	800b2d4 <_dtoa_r+0x26c>
 800b372:	2301      	movs	r3, #1
 800b374:	9308      	str	r3, [sp, #32]
 800b376:	e7f5      	b.n	800b364 <_dtoa_r+0x2fc>
 800b378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b37e:	e7b8      	b.n	800b2f2 <_dtoa_r+0x28a>
 800b380:	3101      	adds	r1, #1
 800b382:	6041      	str	r1, [r0, #4]
 800b384:	0052      	lsls	r2, r2, #1
 800b386:	e7b8      	b.n	800b2fa <_dtoa_r+0x292>
 800b388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b38a:	9a01      	ldr	r2, [sp, #4]
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	9b03      	ldr	r3, [sp, #12]
 800b390:	2b0e      	cmp	r3, #14
 800b392:	f200 809d 	bhi.w	800b4d0 <_dtoa_r+0x468>
 800b396:	2d00      	cmp	r5, #0
 800b398:	f000 809a 	beq.w	800b4d0 <_dtoa_r+0x468>
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	dd32      	ble.n	800b408 <_dtoa_r+0x3a0>
 800b3a2:	4ab7      	ldr	r2, [pc, #732]	; (800b680 <_dtoa_r+0x618>)
 800b3a4:	f003 030f 	and.w	r3, r3, #15
 800b3a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3b0:	9b00      	ldr	r3, [sp, #0]
 800b3b2:	05d8      	lsls	r0, r3, #23
 800b3b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b3b8:	d516      	bpl.n	800b3e8 <_dtoa_r+0x380>
 800b3ba:	4bb2      	ldr	r3, [pc, #712]	; (800b684 <_dtoa_r+0x61c>)
 800b3bc:	ec51 0b19 	vmov	r0, r1, d9
 800b3c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3c4:	f7f5 fa62 	bl	800088c <__aeabi_ddiv>
 800b3c8:	f007 070f 	and.w	r7, r7, #15
 800b3cc:	4682      	mov	sl, r0
 800b3ce:	468b      	mov	fp, r1
 800b3d0:	2503      	movs	r5, #3
 800b3d2:	4eac      	ldr	r6, [pc, #688]	; (800b684 <_dtoa_r+0x61c>)
 800b3d4:	b957      	cbnz	r7, 800b3ec <_dtoa_r+0x384>
 800b3d6:	4642      	mov	r2, r8
 800b3d8:	464b      	mov	r3, r9
 800b3da:	4650      	mov	r0, sl
 800b3dc:	4659      	mov	r1, fp
 800b3de:	f7f5 fa55 	bl	800088c <__aeabi_ddiv>
 800b3e2:	4682      	mov	sl, r0
 800b3e4:	468b      	mov	fp, r1
 800b3e6:	e028      	b.n	800b43a <_dtoa_r+0x3d2>
 800b3e8:	2502      	movs	r5, #2
 800b3ea:	e7f2      	b.n	800b3d2 <_dtoa_r+0x36a>
 800b3ec:	07f9      	lsls	r1, r7, #31
 800b3ee:	d508      	bpl.n	800b402 <_dtoa_r+0x39a>
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3f8:	f7f5 f91e 	bl	8000638 <__aeabi_dmul>
 800b3fc:	3501      	adds	r5, #1
 800b3fe:	4680      	mov	r8, r0
 800b400:	4689      	mov	r9, r1
 800b402:	107f      	asrs	r7, r7, #1
 800b404:	3608      	adds	r6, #8
 800b406:	e7e5      	b.n	800b3d4 <_dtoa_r+0x36c>
 800b408:	f000 809b 	beq.w	800b542 <_dtoa_r+0x4da>
 800b40c:	9b00      	ldr	r3, [sp, #0]
 800b40e:	4f9d      	ldr	r7, [pc, #628]	; (800b684 <_dtoa_r+0x61c>)
 800b410:	425e      	negs	r6, r3
 800b412:	4b9b      	ldr	r3, [pc, #620]	; (800b680 <_dtoa_r+0x618>)
 800b414:	f006 020f 	and.w	r2, r6, #15
 800b418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	ec51 0b19 	vmov	r0, r1, d9
 800b424:	f7f5 f908 	bl	8000638 <__aeabi_dmul>
 800b428:	1136      	asrs	r6, r6, #4
 800b42a:	4682      	mov	sl, r0
 800b42c:	468b      	mov	fp, r1
 800b42e:	2300      	movs	r3, #0
 800b430:	2502      	movs	r5, #2
 800b432:	2e00      	cmp	r6, #0
 800b434:	d17a      	bne.n	800b52c <_dtoa_r+0x4c4>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1d3      	bne.n	800b3e2 <_dtoa_r+0x37a>
 800b43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 8082 	beq.w	800b546 <_dtoa_r+0x4de>
 800b442:	4b91      	ldr	r3, [pc, #580]	; (800b688 <_dtoa_r+0x620>)
 800b444:	2200      	movs	r2, #0
 800b446:	4650      	mov	r0, sl
 800b448:	4659      	mov	r1, fp
 800b44a:	f7f5 fb67 	bl	8000b1c <__aeabi_dcmplt>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d079      	beq.n	800b546 <_dtoa_r+0x4de>
 800b452:	9b03      	ldr	r3, [sp, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d076      	beq.n	800b546 <_dtoa_r+0x4de>
 800b458:	9b02      	ldr	r3, [sp, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	dd36      	ble.n	800b4cc <_dtoa_r+0x464>
 800b45e:	9b00      	ldr	r3, [sp, #0]
 800b460:	4650      	mov	r0, sl
 800b462:	4659      	mov	r1, fp
 800b464:	1e5f      	subs	r7, r3, #1
 800b466:	2200      	movs	r2, #0
 800b468:	4b88      	ldr	r3, [pc, #544]	; (800b68c <_dtoa_r+0x624>)
 800b46a:	f7f5 f8e5 	bl	8000638 <__aeabi_dmul>
 800b46e:	9e02      	ldr	r6, [sp, #8]
 800b470:	4682      	mov	sl, r0
 800b472:	468b      	mov	fp, r1
 800b474:	3501      	adds	r5, #1
 800b476:	4628      	mov	r0, r5
 800b478:	f7f5 f874 	bl	8000564 <__aeabi_i2d>
 800b47c:	4652      	mov	r2, sl
 800b47e:	465b      	mov	r3, fp
 800b480:	f7f5 f8da 	bl	8000638 <__aeabi_dmul>
 800b484:	4b82      	ldr	r3, [pc, #520]	; (800b690 <_dtoa_r+0x628>)
 800b486:	2200      	movs	r2, #0
 800b488:	f7f4 ff20 	bl	80002cc <__adddf3>
 800b48c:	46d0      	mov	r8, sl
 800b48e:	46d9      	mov	r9, fp
 800b490:	4682      	mov	sl, r0
 800b492:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b496:	2e00      	cmp	r6, #0
 800b498:	d158      	bne.n	800b54c <_dtoa_r+0x4e4>
 800b49a:	4b7e      	ldr	r3, [pc, #504]	; (800b694 <_dtoa_r+0x62c>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	4640      	mov	r0, r8
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	f7f4 ff11 	bl	80002c8 <__aeabi_dsub>
 800b4a6:	4652      	mov	r2, sl
 800b4a8:	465b      	mov	r3, fp
 800b4aa:	4680      	mov	r8, r0
 800b4ac:	4689      	mov	r9, r1
 800b4ae:	f7f5 fb53 	bl	8000b58 <__aeabi_dcmpgt>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	f040 8295 	bne.w	800b9e2 <_dtoa_r+0x97a>
 800b4b8:	4652      	mov	r2, sl
 800b4ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b4be:	4640      	mov	r0, r8
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	f7f5 fb2b 	bl	8000b1c <__aeabi_dcmplt>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	f040 8289 	bne.w	800b9de <_dtoa_r+0x976>
 800b4cc:	ec5b ab19 	vmov	sl, fp, d9
 800b4d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f2c0 8148 	blt.w	800b768 <_dtoa_r+0x700>
 800b4d8:	9a00      	ldr	r2, [sp, #0]
 800b4da:	2a0e      	cmp	r2, #14
 800b4dc:	f300 8144 	bgt.w	800b768 <_dtoa_r+0x700>
 800b4e0:	4b67      	ldr	r3, [pc, #412]	; (800b680 <_dtoa_r+0x618>)
 800b4e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f280 80d5 	bge.w	800b69c <_dtoa_r+0x634>
 800b4f2:	9b03      	ldr	r3, [sp, #12]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f300 80d1 	bgt.w	800b69c <_dtoa_r+0x634>
 800b4fa:	f040 826f 	bne.w	800b9dc <_dtoa_r+0x974>
 800b4fe:	4b65      	ldr	r3, [pc, #404]	; (800b694 <_dtoa_r+0x62c>)
 800b500:	2200      	movs	r2, #0
 800b502:	4640      	mov	r0, r8
 800b504:	4649      	mov	r1, r9
 800b506:	f7f5 f897 	bl	8000638 <__aeabi_dmul>
 800b50a:	4652      	mov	r2, sl
 800b50c:	465b      	mov	r3, fp
 800b50e:	f7f5 fb19 	bl	8000b44 <__aeabi_dcmpge>
 800b512:	9e03      	ldr	r6, [sp, #12]
 800b514:	4637      	mov	r7, r6
 800b516:	2800      	cmp	r0, #0
 800b518:	f040 8245 	bne.w	800b9a6 <_dtoa_r+0x93e>
 800b51c:	9d01      	ldr	r5, [sp, #4]
 800b51e:	2331      	movs	r3, #49	; 0x31
 800b520:	f805 3b01 	strb.w	r3, [r5], #1
 800b524:	9b00      	ldr	r3, [sp, #0]
 800b526:	3301      	adds	r3, #1
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	e240      	b.n	800b9ae <_dtoa_r+0x946>
 800b52c:	07f2      	lsls	r2, r6, #31
 800b52e:	d505      	bpl.n	800b53c <_dtoa_r+0x4d4>
 800b530:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b534:	f7f5 f880 	bl	8000638 <__aeabi_dmul>
 800b538:	3501      	adds	r5, #1
 800b53a:	2301      	movs	r3, #1
 800b53c:	1076      	asrs	r6, r6, #1
 800b53e:	3708      	adds	r7, #8
 800b540:	e777      	b.n	800b432 <_dtoa_r+0x3ca>
 800b542:	2502      	movs	r5, #2
 800b544:	e779      	b.n	800b43a <_dtoa_r+0x3d2>
 800b546:	9f00      	ldr	r7, [sp, #0]
 800b548:	9e03      	ldr	r6, [sp, #12]
 800b54a:	e794      	b.n	800b476 <_dtoa_r+0x40e>
 800b54c:	9901      	ldr	r1, [sp, #4]
 800b54e:	4b4c      	ldr	r3, [pc, #304]	; (800b680 <_dtoa_r+0x618>)
 800b550:	4431      	add	r1, r6
 800b552:	910d      	str	r1, [sp, #52]	; 0x34
 800b554:	9908      	ldr	r1, [sp, #32]
 800b556:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b55a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b55e:	2900      	cmp	r1, #0
 800b560:	d043      	beq.n	800b5ea <_dtoa_r+0x582>
 800b562:	494d      	ldr	r1, [pc, #308]	; (800b698 <_dtoa_r+0x630>)
 800b564:	2000      	movs	r0, #0
 800b566:	f7f5 f991 	bl	800088c <__aeabi_ddiv>
 800b56a:	4652      	mov	r2, sl
 800b56c:	465b      	mov	r3, fp
 800b56e:	f7f4 feab 	bl	80002c8 <__aeabi_dsub>
 800b572:	9d01      	ldr	r5, [sp, #4]
 800b574:	4682      	mov	sl, r0
 800b576:	468b      	mov	fp, r1
 800b578:	4649      	mov	r1, r9
 800b57a:	4640      	mov	r0, r8
 800b57c:	f7f5 faf6 	bl	8000b6c <__aeabi_d2iz>
 800b580:	4606      	mov	r6, r0
 800b582:	f7f4 ffef 	bl	8000564 <__aeabi_i2d>
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	4640      	mov	r0, r8
 800b58c:	4649      	mov	r1, r9
 800b58e:	f7f4 fe9b 	bl	80002c8 <__aeabi_dsub>
 800b592:	3630      	adds	r6, #48	; 0x30
 800b594:	f805 6b01 	strb.w	r6, [r5], #1
 800b598:	4652      	mov	r2, sl
 800b59a:	465b      	mov	r3, fp
 800b59c:	4680      	mov	r8, r0
 800b59e:	4689      	mov	r9, r1
 800b5a0:	f7f5 fabc 	bl	8000b1c <__aeabi_dcmplt>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d163      	bne.n	800b670 <_dtoa_r+0x608>
 800b5a8:	4642      	mov	r2, r8
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	4936      	ldr	r1, [pc, #216]	; (800b688 <_dtoa_r+0x620>)
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	f7f4 fe8a 	bl	80002c8 <__aeabi_dsub>
 800b5b4:	4652      	mov	r2, sl
 800b5b6:	465b      	mov	r3, fp
 800b5b8:	f7f5 fab0 	bl	8000b1c <__aeabi_dcmplt>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	f040 80b5 	bne.w	800b72c <_dtoa_r+0x6c4>
 800b5c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5c4:	429d      	cmp	r5, r3
 800b5c6:	d081      	beq.n	800b4cc <_dtoa_r+0x464>
 800b5c8:	4b30      	ldr	r3, [pc, #192]	; (800b68c <_dtoa_r+0x624>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	4650      	mov	r0, sl
 800b5ce:	4659      	mov	r1, fp
 800b5d0:	f7f5 f832 	bl	8000638 <__aeabi_dmul>
 800b5d4:	4b2d      	ldr	r3, [pc, #180]	; (800b68c <_dtoa_r+0x624>)
 800b5d6:	4682      	mov	sl, r0
 800b5d8:	468b      	mov	fp, r1
 800b5da:	4640      	mov	r0, r8
 800b5dc:	4649      	mov	r1, r9
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f7f5 f82a 	bl	8000638 <__aeabi_dmul>
 800b5e4:	4680      	mov	r8, r0
 800b5e6:	4689      	mov	r9, r1
 800b5e8:	e7c6      	b.n	800b578 <_dtoa_r+0x510>
 800b5ea:	4650      	mov	r0, sl
 800b5ec:	4659      	mov	r1, fp
 800b5ee:	f7f5 f823 	bl	8000638 <__aeabi_dmul>
 800b5f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5f4:	9d01      	ldr	r5, [sp, #4]
 800b5f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5f8:	4682      	mov	sl, r0
 800b5fa:	468b      	mov	fp, r1
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	4640      	mov	r0, r8
 800b600:	f7f5 fab4 	bl	8000b6c <__aeabi_d2iz>
 800b604:	4606      	mov	r6, r0
 800b606:	f7f4 ffad 	bl	8000564 <__aeabi_i2d>
 800b60a:	3630      	adds	r6, #48	; 0x30
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	4640      	mov	r0, r8
 800b612:	4649      	mov	r1, r9
 800b614:	f7f4 fe58 	bl	80002c8 <__aeabi_dsub>
 800b618:	f805 6b01 	strb.w	r6, [r5], #1
 800b61c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b61e:	429d      	cmp	r5, r3
 800b620:	4680      	mov	r8, r0
 800b622:	4689      	mov	r9, r1
 800b624:	f04f 0200 	mov.w	r2, #0
 800b628:	d124      	bne.n	800b674 <_dtoa_r+0x60c>
 800b62a:	4b1b      	ldr	r3, [pc, #108]	; (800b698 <_dtoa_r+0x630>)
 800b62c:	4650      	mov	r0, sl
 800b62e:	4659      	mov	r1, fp
 800b630:	f7f4 fe4c 	bl	80002cc <__adddf3>
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	4640      	mov	r0, r8
 800b63a:	4649      	mov	r1, r9
 800b63c:	f7f5 fa8c 	bl	8000b58 <__aeabi_dcmpgt>
 800b640:	2800      	cmp	r0, #0
 800b642:	d173      	bne.n	800b72c <_dtoa_r+0x6c4>
 800b644:	4652      	mov	r2, sl
 800b646:	465b      	mov	r3, fp
 800b648:	4913      	ldr	r1, [pc, #76]	; (800b698 <_dtoa_r+0x630>)
 800b64a:	2000      	movs	r0, #0
 800b64c:	f7f4 fe3c 	bl	80002c8 <__aeabi_dsub>
 800b650:	4602      	mov	r2, r0
 800b652:	460b      	mov	r3, r1
 800b654:	4640      	mov	r0, r8
 800b656:	4649      	mov	r1, r9
 800b658:	f7f5 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	f43f af35 	beq.w	800b4cc <_dtoa_r+0x464>
 800b662:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b664:	1e6b      	subs	r3, r5, #1
 800b666:	930f      	str	r3, [sp, #60]	; 0x3c
 800b668:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b66c:	2b30      	cmp	r3, #48	; 0x30
 800b66e:	d0f8      	beq.n	800b662 <_dtoa_r+0x5fa>
 800b670:	9700      	str	r7, [sp, #0]
 800b672:	e049      	b.n	800b708 <_dtoa_r+0x6a0>
 800b674:	4b05      	ldr	r3, [pc, #20]	; (800b68c <_dtoa_r+0x624>)
 800b676:	f7f4 ffdf 	bl	8000638 <__aeabi_dmul>
 800b67a:	4680      	mov	r8, r0
 800b67c:	4689      	mov	r9, r1
 800b67e:	e7bd      	b.n	800b5fc <_dtoa_r+0x594>
 800b680:	0800d1c0 	.word	0x0800d1c0
 800b684:	0800d198 	.word	0x0800d198
 800b688:	3ff00000 	.word	0x3ff00000
 800b68c:	40240000 	.word	0x40240000
 800b690:	401c0000 	.word	0x401c0000
 800b694:	40140000 	.word	0x40140000
 800b698:	3fe00000 	.word	0x3fe00000
 800b69c:	9d01      	ldr	r5, [sp, #4]
 800b69e:	4656      	mov	r6, sl
 800b6a0:	465f      	mov	r7, fp
 800b6a2:	4642      	mov	r2, r8
 800b6a4:	464b      	mov	r3, r9
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	f7f5 f8ef 	bl	800088c <__aeabi_ddiv>
 800b6ae:	f7f5 fa5d 	bl	8000b6c <__aeabi_d2iz>
 800b6b2:	4682      	mov	sl, r0
 800b6b4:	f7f4 ff56 	bl	8000564 <__aeabi_i2d>
 800b6b8:	4642      	mov	r2, r8
 800b6ba:	464b      	mov	r3, r9
 800b6bc:	f7f4 ffbc 	bl	8000638 <__aeabi_dmul>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b6cc:	f7f4 fdfc 	bl	80002c8 <__aeabi_dsub>
 800b6d0:	f805 6b01 	strb.w	r6, [r5], #1
 800b6d4:	9e01      	ldr	r6, [sp, #4]
 800b6d6:	9f03      	ldr	r7, [sp, #12]
 800b6d8:	1bae      	subs	r6, r5, r6
 800b6da:	42b7      	cmp	r7, r6
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	d135      	bne.n	800b74e <_dtoa_r+0x6e6>
 800b6e2:	f7f4 fdf3 	bl	80002cc <__adddf3>
 800b6e6:	4642      	mov	r2, r8
 800b6e8:	464b      	mov	r3, r9
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	460f      	mov	r7, r1
 800b6ee:	f7f5 fa33 	bl	8000b58 <__aeabi_dcmpgt>
 800b6f2:	b9d0      	cbnz	r0, 800b72a <_dtoa_r+0x6c2>
 800b6f4:	4642      	mov	r2, r8
 800b6f6:	464b      	mov	r3, r9
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	4639      	mov	r1, r7
 800b6fc:	f7f5 fa04 	bl	8000b08 <__aeabi_dcmpeq>
 800b700:	b110      	cbz	r0, 800b708 <_dtoa_r+0x6a0>
 800b702:	f01a 0f01 	tst.w	sl, #1
 800b706:	d110      	bne.n	800b72a <_dtoa_r+0x6c2>
 800b708:	4620      	mov	r0, r4
 800b70a:	ee18 1a10 	vmov	r1, s16
 800b70e:	f7fe fce1 	bl	800a0d4 <_Bfree>
 800b712:	2300      	movs	r3, #0
 800b714:	9800      	ldr	r0, [sp, #0]
 800b716:	702b      	strb	r3, [r5, #0]
 800b718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b71a:	3001      	adds	r0, #1
 800b71c:	6018      	str	r0, [r3, #0]
 800b71e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b720:	2b00      	cmp	r3, #0
 800b722:	f43f acf1 	beq.w	800b108 <_dtoa_r+0xa0>
 800b726:	601d      	str	r5, [r3, #0]
 800b728:	e4ee      	b.n	800b108 <_dtoa_r+0xa0>
 800b72a:	9f00      	ldr	r7, [sp, #0]
 800b72c:	462b      	mov	r3, r5
 800b72e:	461d      	mov	r5, r3
 800b730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b734:	2a39      	cmp	r2, #57	; 0x39
 800b736:	d106      	bne.n	800b746 <_dtoa_r+0x6de>
 800b738:	9a01      	ldr	r2, [sp, #4]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d1f7      	bne.n	800b72e <_dtoa_r+0x6c6>
 800b73e:	9901      	ldr	r1, [sp, #4]
 800b740:	2230      	movs	r2, #48	; 0x30
 800b742:	3701      	adds	r7, #1
 800b744:	700a      	strb	r2, [r1, #0]
 800b746:	781a      	ldrb	r2, [r3, #0]
 800b748:	3201      	adds	r2, #1
 800b74a:	701a      	strb	r2, [r3, #0]
 800b74c:	e790      	b.n	800b670 <_dtoa_r+0x608>
 800b74e:	4ba6      	ldr	r3, [pc, #664]	; (800b9e8 <_dtoa_r+0x980>)
 800b750:	2200      	movs	r2, #0
 800b752:	f7f4 ff71 	bl	8000638 <__aeabi_dmul>
 800b756:	2200      	movs	r2, #0
 800b758:	2300      	movs	r3, #0
 800b75a:	4606      	mov	r6, r0
 800b75c:	460f      	mov	r7, r1
 800b75e:	f7f5 f9d3 	bl	8000b08 <__aeabi_dcmpeq>
 800b762:	2800      	cmp	r0, #0
 800b764:	d09d      	beq.n	800b6a2 <_dtoa_r+0x63a>
 800b766:	e7cf      	b.n	800b708 <_dtoa_r+0x6a0>
 800b768:	9a08      	ldr	r2, [sp, #32]
 800b76a:	2a00      	cmp	r2, #0
 800b76c:	f000 80d7 	beq.w	800b91e <_dtoa_r+0x8b6>
 800b770:	9a06      	ldr	r2, [sp, #24]
 800b772:	2a01      	cmp	r2, #1
 800b774:	f300 80ba 	bgt.w	800b8ec <_dtoa_r+0x884>
 800b778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b77a:	2a00      	cmp	r2, #0
 800b77c:	f000 80b2 	beq.w	800b8e4 <_dtoa_r+0x87c>
 800b780:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b784:	9e07      	ldr	r6, [sp, #28]
 800b786:	9d04      	ldr	r5, [sp, #16]
 800b788:	9a04      	ldr	r2, [sp, #16]
 800b78a:	441a      	add	r2, r3
 800b78c:	9204      	str	r2, [sp, #16]
 800b78e:	9a05      	ldr	r2, [sp, #20]
 800b790:	2101      	movs	r1, #1
 800b792:	441a      	add	r2, r3
 800b794:	4620      	mov	r0, r4
 800b796:	9205      	str	r2, [sp, #20]
 800b798:	f7fe fd9e 	bl	800a2d8 <__i2b>
 800b79c:	4607      	mov	r7, r0
 800b79e:	2d00      	cmp	r5, #0
 800b7a0:	dd0c      	ble.n	800b7bc <_dtoa_r+0x754>
 800b7a2:	9b05      	ldr	r3, [sp, #20]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	dd09      	ble.n	800b7bc <_dtoa_r+0x754>
 800b7a8:	42ab      	cmp	r3, r5
 800b7aa:	9a04      	ldr	r2, [sp, #16]
 800b7ac:	bfa8      	it	ge
 800b7ae:	462b      	movge	r3, r5
 800b7b0:	1ad2      	subs	r2, r2, r3
 800b7b2:	9204      	str	r2, [sp, #16]
 800b7b4:	9a05      	ldr	r2, [sp, #20]
 800b7b6:	1aed      	subs	r5, r5, r3
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	9305      	str	r3, [sp, #20]
 800b7bc:	9b07      	ldr	r3, [sp, #28]
 800b7be:	b31b      	cbz	r3, 800b808 <_dtoa_r+0x7a0>
 800b7c0:	9b08      	ldr	r3, [sp, #32]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 80af 	beq.w	800b926 <_dtoa_r+0x8be>
 800b7c8:	2e00      	cmp	r6, #0
 800b7ca:	dd13      	ble.n	800b7f4 <_dtoa_r+0x78c>
 800b7cc:	4639      	mov	r1, r7
 800b7ce:	4632      	mov	r2, r6
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f7fe fe41 	bl	800a458 <__pow5mult>
 800b7d6:	ee18 2a10 	vmov	r2, s16
 800b7da:	4601      	mov	r1, r0
 800b7dc:	4607      	mov	r7, r0
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f7fe fd90 	bl	800a304 <__multiply>
 800b7e4:	ee18 1a10 	vmov	r1, s16
 800b7e8:	4680      	mov	r8, r0
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f7fe fc72 	bl	800a0d4 <_Bfree>
 800b7f0:	ee08 8a10 	vmov	s16, r8
 800b7f4:	9b07      	ldr	r3, [sp, #28]
 800b7f6:	1b9a      	subs	r2, r3, r6
 800b7f8:	d006      	beq.n	800b808 <_dtoa_r+0x7a0>
 800b7fa:	ee18 1a10 	vmov	r1, s16
 800b7fe:	4620      	mov	r0, r4
 800b800:	f7fe fe2a 	bl	800a458 <__pow5mult>
 800b804:	ee08 0a10 	vmov	s16, r0
 800b808:	2101      	movs	r1, #1
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7fe fd64 	bl	800a2d8 <__i2b>
 800b810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b812:	2b00      	cmp	r3, #0
 800b814:	4606      	mov	r6, r0
 800b816:	f340 8088 	ble.w	800b92a <_dtoa_r+0x8c2>
 800b81a:	461a      	mov	r2, r3
 800b81c:	4601      	mov	r1, r0
 800b81e:	4620      	mov	r0, r4
 800b820:	f7fe fe1a 	bl	800a458 <__pow5mult>
 800b824:	9b06      	ldr	r3, [sp, #24]
 800b826:	2b01      	cmp	r3, #1
 800b828:	4606      	mov	r6, r0
 800b82a:	f340 8081 	ble.w	800b930 <_dtoa_r+0x8c8>
 800b82e:	f04f 0800 	mov.w	r8, #0
 800b832:	6933      	ldr	r3, [r6, #16]
 800b834:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b838:	6918      	ldr	r0, [r3, #16]
 800b83a:	f7fe fcfd 	bl	800a238 <__hi0bits>
 800b83e:	f1c0 0020 	rsb	r0, r0, #32
 800b842:	9b05      	ldr	r3, [sp, #20]
 800b844:	4418      	add	r0, r3
 800b846:	f010 001f 	ands.w	r0, r0, #31
 800b84a:	f000 8092 	beq.w	800b972 <_dtoa_r+0x90a>
 800b84e:	f1c0 0320 	rsb	r3, r0, #32
 800b852:	2b04      	cmp	r3, #4
 800b854:	f340 808a 	ble.w	800b96c <_dtoa_r+0x904>
 800b858:	f1c0 001c 	rsb	r0, r0, #28
 800b85c:	9b04      	ldr	r3, [sp, #16]
 800b85e:	4403      	add	r3, r0
 800b860:	9304      	str	r3, [sp, #16]
 800b862:	9b05      	ldr	r3, [sp, #20]
 800b864:	4403      	add	r3, r0
 800b866:	4405      	add	r5, r0
 800b868:	9305      	str	r3, [sp, #20]
 800b86a:	9b04      	ldr	r3, [sp, #16]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	dd07      	ble.n	800b880 <_dtoa_r+0x818>
 800b870:	ee18 1a10 	vmov	r1, s16
 800b874:	461a      	mov	r2, r3
 800b876:	4620      	mov	r0, r4
 800b878:	f7fe fe48 	bl	800a50c <__lshift>
 800b87c:	ee08 0a10 	vmov	s16, r0
 800b880:	9b05      	ldr	r3, [sp, #20]
 800b882:	2b00      	cmp	r3, #0
 800b884:	dd05      	ble.n	800b892 <_dtoa_r+0x82a>
 800b886:	4631      	mov	r1, r6
 800b888:	461a      	mov	r2, r3
 800b88a:	4620      	mov	r0, r4
 800b88c:	f7fe fe3e 	bl	800a50c <__lshift>
 800b890:	4606      	mov	r6, r0
 800b892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b894:	2b00      	cmp	r3, #0
 800b896:	d06e      	beq.n	800b976 <_dtoa_r+0x90e>
 800b898:	ee18 0a10 	vmov	r0, s16
 800b89c:	4631      	mov	r1, r6
 800b89e:	f7fe fea5 	bl	800a5ec <__mcmp>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	da67      	bge.n	800b976 <_dtoa_r+0x90e>
 800b8a6:	9b00      	ldr	r3, [sp, #0]
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	ee18 1a10 	vmov	r1, s16
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	220a      	movs	r2, #10
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f7fe fc2f 	bl	800a118 <__multadd>
 800b8ba:	9b08      	ldr	r3, [sp, #32]
 800b8bc:	ee08 0a10 	vmov	s16, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 81b1 	beq.w	800bc28 <_dtoa_r+0xbc0>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	4639      	mov	r1, r7
 800b8ca:	220a      	movs	r2, #10
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f7fe fc23 	bl	800a118 <__multadd>
 800b8d2:	9b02      	ldr	r3, [sp, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	4607      	mov	r7, r0
 800b8d8:	f300 808e 	bgt.w	800b9f8 <_dtoa_r+0x990>
 800b8dc:	9b06      	ldr	r3, [sp, #24]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	dc51      	bgt.n	800b986 <_dtoa_r+0x91e>
 800b8e2:	e089      	b.n	800b9f8 <_dtoa_r+0x990>
 800b8e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8ea:	e74b      	b.n	800b784 <_dtoa_r+0x71c>
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	1e5e      	subs	r6, r3, #1
 800b8f0:	9b07      	ldr	r3, [sp, #28]
 800b8f2:	42b3      	cmp	r3, r6
 800b8f4:	bfbf      	itttt	lt
 800b8f6:	9b07      	ldrlt	r3, [sp, #28]
 800b8f8:	9607      	strlt	r6, [sp, #28]
 800b8fa:	1af2      	sublt	r2, r6, r3
 800b8fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b8fe:	bfb6      	itet	lt
 800b900:	189b      	addlt	r3, r3, r2
 800b902:	1b9e      	subge	r6, r3, r6
 800b904:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	bfb8      	it	lt
 800b90a:	2600      	movlt	r6, #0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	bfb7      	itett	lt
 800b910:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b914:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b918:	1a9d      	sublt	r5, r3, r2
 800b91a:	2300      	movlt	r3, #0
 800b91c:	e734      	b.n	800b788 <_dtoa_r+0x720>
 800b91e:	9e07      	ldr	r6, [sp, #28]
 800b920:	9d04      	ldr	r5, [sp, #16]
 800b922:	9f08      	ldr	r7, [sp, #32]
 800b924:	e73b      	b.n	800b79e <_dtoa_r+0x736>
 800b926:	9a07      	ldr	r2, [sp, #28]
 800b928:	e767      	b.n	800b7fa <_dtoa_r+0x792>
 800b92a:	9b06      	ldr	r3, [sp, #24]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	dc18      	bgt.n	800b962 <_dtoa_r+0x8fa>
 800b930:	f1ba 0f00 	cmp.w	sl, #0
 800b934:	d115      	bne.n	800b962 <_dtoa_r+0x8fa>
 800b936:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b93a:	b993      	cbnz	r3, 800b962 <_dtoa_r+0x8fa>
 800b93c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b940:	0d1b      	lsrs	r3, r3, #20
 800b942:	051b      	lsls	r3, r3, #20
 800b944:	b183      	cbz	r3, 800b968 <_dtoa_r+0x900>
 800b946:	9b04      	ldr	r3, [sp, #16]
 800b948:	3301      	adds	r3, #1
 800b94a:	9304      	str	r3, [sp, #16]
 800b94c:	9b05      	ldr	r3, [sp, #20]
 800b94e:	3301      	adds	r3, #1
 800b950:	9305      	str	r3, [sp, #20]
 800b952:	f04f 0801 	mov.w	r8, #1
 800b956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f47f af6a 	bne.w	800b832 <_dtoa_r+0x7ca>
 800b95e:	2001      	movs	r0, #1
 800b960:	e76f      	b.n	800b842 <_dtoa_r+0x7da>
 800b962:	f04f 0800 	mov.w	r8, #0
 800b966:	e7f6      	b.n	800b956 <_dtoa_r+0x8ee>
 800b968:	4698      	mov	r8, r3
 800b96a:	e7f4      	b.n	800b956 <_dtoa_r+0x8ee>
 800b96c:	f43f af7d 	beq.w	800b86a <_dtoa_r+0x802>
 800b970:	4618      	mov	r0, r3
 800b972:	301c      	adds	r0, #28
 800b974:	e772      	b.n	800b85c <_dtoa_r+0x7f4>
 800b976:	9b03      	ldr	r3, [sp, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	dc37      	bgt.n	800b9ec <_dtoa_r+0x984>
 800b97c:	9b06      	ldr	r3, [sp, #24]
 800b97e:	2b02      	cmp	r3, #2
 800b980:	dd34      	ble.n	800b9ec <_dtoa_r+0x984>
 800b982:	9b03      	ldr	r3, [sp, #12]
 800b984:	9302      	str	r3, [sp, #8]
 800b986:	9b02      	ldr	r3, [sp, #8]
 800b988:	b96b      	cbnz	r3, 800b9a6 <_dtoa_r+0x93e>
 800b98a:	4631      	mov	r1, r6
 800b98c:	2205      	movs	r2, #5
 800b98e:	4620      	mov	r0, r4
 800b990:	f7fe fbc2 	bl	800a118 <__multadd>
 800b994:	4601      	mov	r1, r0
 800b996:	4606      	mov	r6, r0
 800b998:	ee18 0a10 	vmov	r0, s16
 800b99c:	f7fe fe26 	bl	800a5ec <__mcmp>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	f73f adbb 	bgt.w	800b51c <_dtoa_r+0x4b4>
 800b9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a8:	9d01      	ldr	r5, [sp, #4]
 800b9aa:	43db      	mvns	r3, r3
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	f04f 0800 	mov.w	r8, #0
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f7fe fb8d 	bl	800a0d4 <_Bfree>
 800b9ba:	2f00      	cmp	r7, #0
 800b9bc:	f43f aea4 	beq.w	800b708 <_dtoa_r+0x6a0>
 800b9c0:	f1b8 0f00 	cmp.w	r8, #0
 800b9c4:	d005      	beq.n	800b9d2 <_dtoa_r+0x96a>
 800b9c6:	45b8      	cmp	r8, r7
 800b9c8:	d003      	beq.n	800b9d2 <_dtoa_r+0x96a>
 800b9ca:	4641      	mov	r1, r8
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f7fe fb81 	bl	800a0d4 <_Bfree>
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f7fe fb7d 	bl	800a0d4 <_Bfree>
 800b9da:	e695      	b.n	800b708 <_dtoa_r+0x6a0>
 800b9dc:	2600      	movs	r6, #0
 800b9de:	4637      	mov	r7, r6
 800b9e0:	e7e1      	b.n	800b9a6 <_dtoa_r+0x93e>
 800b9e2:	9700      	str	r7, [sp, #0]
 800b9e4:	4637      	mov	r7, r6
 800b9e6:	e599      	b.n	800b51c <_dtoa_r+0x4b4>
 800b9e8:	40240000 	.word	0x40240000
 800b9ec:	9b08      	ldr	r3, [sp, #32]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 80ca 	beq.w	800bb88 <_dtoa_r+0xb20>
 800b9f4:	9b03      	ldr	r3, [sp, #12]
 800b9f6:	9302      	str	r3, [sp, #8]
 800b9f8:	2d00      	cmp	r5, #0
 800b9fa:	dd05      	ble.n	800ba08 <_dtoa_r+0x9a0>
 800b9fc:	4639      	mov	r1, r7
 800b9fe:	462a      	mov	r2, r5
 800ba00:	4620      	mov	r0, r4
 800ba02:	f7fe fd83 	bl	800a50c <__lshift>
 800ba06:	4607      	mov	r7, r0
 800ba08:	f1b8 0f00 	cmp.w	r8, #0
 800ba0c:	d05b      	beq.n	800bac6 <_dtoa_r+0xa5e>
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	4620      	mov	r0, r4
 800ba12:	f7fe fb1f 	bl	800a054 <_Balloc>
 800ba16:	4605      	mov	r5, r0
 800ba18:	b928      	cbnz	r0, 800ba26 <_dtoa_r+0x9be>
 800ba1a:	4b87      	ldr	r3, [pc, #540]	; (800bc38 <_dtoa_r+0xbd0>)
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba22:	f7ff bb3b 	b.w	800b09c <_dtoa_r+0x34>
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	3202      	adds	r2, #2
 800ba2a:	0092      	lsls	r2, r2, #2
 800ba2c:	f107 010c 	add.w	r1, r7, #12
 800ba30:	300c      	adds	r0, #12
 800ba32:	f7fc fffd 	bl	8008a30 <memcpy>
 800ba36:	2201      	movs	r2, #1
 800ba38:	4629      	mov	r1, r5
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f7fe fd66 	bl	800a50c <__lshift>
 800ba40:	9b01      	ldr	r3, [sp, #4]
 800ba42:	f103 0901 	add.w	r9, r3, #1
 800ba46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	9305      	str	r3, [sp, #20]
 800ba4e:	f00a 0301 	and.w	r3, sl, #1
 800ba52:	46b8      	mov	r8, r7
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	4607      	mov	r7, r0
 800ba58:	4631      	mov	r1, r6
 800ba5a:	ee18 0a10 	vmov	r0, s16
 800ba5e:	f7ff fa77 	bl	800af50 <quorem>
 800ba62:	4641      	mov	r1, r8
 800ba64:	9002      	str	r0, [sp, #8]
 800ba66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba6a:	ee18 0a10 	vmov	r0, s16
 800ba6e:	f7fe fdbd 	bl	800a5ec <__mcmp>
 800ba72:	463a      	mov	r2, r7
 800ba74:	9003      	str	r0, [sp, #12]
 800ba76:	4631      	mov	r1, r6
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f7fe fdd3 	bl	800a624 <__mdiff>
 800ba7e:	68c2      	ldr	r2, [r0, #12]
 800ba80:	f109 3bff 	add.w	fp, r9, #4294967295
 800ba84:	4605      	mov	r5, r0
 800ba86:	bb02      	cbnz	r2, 800baca <_dtoa_r+0xa62>
 800ba88:	4601      	mov	r1, r0
 800ba8a:	ee18 0a10 	vmov	r0, s16
 800ba8e:	f7fe fdad 	bl	800a5ec <__mcmp>
 800ba92:	4602      	mov	r2, r0
 800ba94:	4629      	mov	r1, r5
 800ba96:	4620      	mov	r0, r4
 800ba98:	9207      	str	r2, [sp, #28]
 800ba9a:	f7fe fb1b 	bl	800a0d4 <_Bfree>
 800ba9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800baa2:	ea43 0102 	orr.w	r1, r3, r2
 800baa6:	9b04      	ldr	r3, [sp, #16]
 800baa8:	430b      	orrs	r3, r1
 800baaa:	464d      	mov	r5, r9
 800baac:	d10f      	bne.n	800bace <_dtoa_r+0xa66>
 800baae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bab2:	d02a      	beq.n	800bb0a <_dtoa_r+0xaa2>
 800bab4:	9b03      	ldr	r3, [sp, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dd02      	ble.n	800bac0 <_dtoa_r+0xa58>
 800baba:	9b02      	ldr	r3, [sp, #8]
 800babc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bac0:	f88b a000 	strb.w	sl, [fp]
 800bac4:	e775      	b.n	800b9b2 <_dtoa_r+0x94a>
 800bac6:	4638      	mov	r0, r7
 800bac8:	e7ba      	b.n	800ba40 <_dtoa_r+0x9d8>
 800baca:	2201      	movs	r2, #1
 800bacc:	e7e2      	b.n	800ba94 <_dtoa_r+0xa2c>
 800bace:	9b03      	ldr	r3, [sp, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	db04      	blt.n	800bade <_dtoa_r+0xa76>
 800bad4:	9906      	ldr	r1, [sp, #24]
 800bad6:	430b      	orrs	r3, r1
 800bad8:	9904      	ldr	r1, [sp, #16]
 800bada:	430b      	orrs	r3, r1
 800badc:	d122      	bne.n	800bb24 <_dtoa_r+0xabc>
 800bade:	2a00      	cmp	r2, #0
 800bae0:	ddee      	ble.n	800bac0 <_dtoa_r+0xa58>
 800bae2:	ee18 1a10 	vmov	r1, s16
 800bae6:	2201      	movs	r2, #1
 800bae8:	4620      	mov	r0, r4
 800baea:	f7fe fd0f 	bl	800a50c <__lshift>
 800baee:	4631      	mov	r1, r6
 800baf0:	ee08 0a10 	vmov	s16, r0
 800baf4:	f7fe fd7a 	bl	800a5ec <__mcmp>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	dc03      	bgt.n	800bb04 <_dtoa_r+0xa9c>
 800bafc:	d1e0      	bne.n	800bac0 <_dtoa_r+0xa58>
 800bafe:	f01a 0f01 	tst.w	sl, #1
 800bb02:	d0dd      	beq.n	800bac0 <_dtoa_r+0xa58>
 800bb04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb08:	d1d7      	bne.n	800baba <_dtoa_r+0xa52>
 800bb0a:	2339      	movs	r3, #57	; 0x39
 800bb0c:	f88b 3000 	strb.w	r3, [fp]
 800bb10:	462b      	mov	r3, r5
 800bb12:	461d      	mov	r5, r3
 800bb14:	3b01      	subs	r3, #1
 800bb16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb1a:	2a39      	cmp	r2, #57	; 0x39
 800bb1c:	d071      	beq.n	800bc02 <_dtoa_r+0xb9a>
 800bb1e:	3201      	adds	r2, #1
 800bb20:	701a      	strb	r2, [r3, #0]
 800bb22:	e746      	b.n	800b9b2 <_dtoa_r+0x94a>
 800bb24:	2a00      	cmp	r2, #0
 800bb26:	dd07      	ble.n	800bb38 <_dtoa_r+0xad0>
 800bb28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb2c:	d0ed      	beq.n	800bb0a <_dtoa_r+0xaa2>
 800bb2e:	f10a 0301 	add.w	r3, sl, #1
 800bb32:	f88b 3000 	strb.w	r3, [fp]
 800bb36:	e73c      	b.n	800b9b2 <_dtoa_r+0x94a>
 800bb38:	9b05      	ldr	r3, [sp, #20]
 800bb3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bb3e:	4599      	cmp	r9, r3
 800bb40:	d047      	beq.n	800bbd2 <_dtoa_r+0xb6a>
 800bb42:	ee18 1a10 	vmov	r1, s16
 800bb46:	2300      	movs	r3, #0
 800bb48:	220a      	movs	r2, #10
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	f7fe fae4 	bl	800a118 <__multadd>
 800bb50:	45b8      	cmp	r8, r7
 800bb52:	ee08 0a10 	vmov	s16, r0
 800bb56:	f04f 0300 	mov.w	r3, #0
 800bb5a:	f04f 020a 	mov.w	r2, #10
 800bb5e:	4641      	mov	r1, r8
 800bb60:	4620      	mov	r0, r4
 800bb62:	d106      	bne.n	800bb72 <_dtoa_r+0xb0a>
 800bb64:	f7fe fad8 	bl	800a118 <__multadd>
 800bb68:	4680      	mov	r8, r0
 800bb6a:	4607      	mov	r7, r0
 800bb6c:	f109 0901 	add.w	r9, r9, #1
 800bb70:	e772      	b.n	800ba58 <_dtoa_r+0x9f0>
 800bb72:	f7fe fad1 	bl	800a118 <__multadd>
 800bb76:	4639      	mov	r1, r7
 800bb78:	4680      	mov	r8, r0
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	220a      	movs	r2, #10
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f7fe faca 	bl	800a118 <__multadd>
 800bb84:	4607      	mov	r7, r0
 800bb86:	e7f1      	b.n	800bb6c <_dtoa_r+0xb04>
 800bb88:	9b03      	ldr	r3, [sp, #12]
 800bb8a:	9302      	str	r3, [sp, #8]
 800bb8c:	9d01      	ldr	r5, [sp, #4]
 800bb8e:	ee18 0a10 	vmov	r0, s16
 800bb92:	4631      	mov	r1, r6
 800bb94:	f7ff f9dc 	bl	800af50 <quorem>
 800bb98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb9c:	9b01      	ldr	r3, [sp, #4]
 800bb9e:	f805 ab01 	strb.w	sl, [r5], #1
 800bba2:	1aea      	subs	r2, r5, r3
 800bba4:	9b02      	ldr	r3, [sp, #8]
 800bba6:	4293      	cmp	r3, r2
 800bba8:	dd09      	ble.n	800bbbe <_dtoa_r+0xb56>
 800bbaa:	ee18 1a10 	vmov	r1, s16
 800bbae:	2300      	movs	r3, #0
 800bbb0:	220a      	movs	r2, #10
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f7fe fab0 	bl	800a118 <__multadd>
 800bbb8:	ee08 0a10 	vmov	s16, r0
 800bbbc:	e7e7      	b.n	800bb8e <_dtoa_r+0xb26>
 800bbbe:	9b02      	ldr	r3, [sp, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bfc8      	it	gt
 800bbc4:	461d      	movgt	r5, r3
 800bbc6:	9b01      	ldr	r3, [sp, #4]
 800bbc8:	bfd8      	it	le
 800bbca:	2501      	movle	r5, #1
 800bbcc:	441d      	add	r5, r3
 800bbce:	f04f 0800 	mov.w	r8, #0
 800bbd2:	ee18 1a10 	vmov	r1, s16
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	4620      	mov	r0, r4
 800bbda:	f7fe fc97 	bl	800a50c <__lshift>
 800bbde:	4631      	mov	r1, r6
 800bbe0:	ee08 0a10 	vmov	s16, r0
 800bbe4:	f7fe fd02 	bl	800a5ec <__mcmp>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	dc91      	bgt.n	800bb10 <_dtoa_r+0xaa8>
 800bbec:	d102      	bne.n	800bbf4 <_dtoa_r+0xb8c>
 800bbee:	f01a 0f01 	tst.w	sl, #1
 800bbf2:	d18d      	bne.n	800bb10 <_dtoa_r+0xaa8>
 800bbf4:	462b      	mov	r3, r5
 800bbf6:	461d      	mov	r5, r3
 800bbf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbfc:	2a30      	cmp	r2, #48	; 0x30
 800bbfe:	d0fa      	beq.n	800bbf6 <_dtoa_r+0xb8e>
 800bc00:	e6d7      	b.n	800b9b2 <_dtoa_r+0x94a>
 800bc02:	9a01      	ldr	r2, [sp, #4]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d184      	bne.n	800bb12 <_dtoa_r+0xaaa>
 800bc08:	9b00      	ldr	r3, [sp, #0]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	2331      	movs	r3, #49	; 0x31
 800bc10:	7013      	strb	r3, [r2, #0]
 800bc12:	e6ce      	b.n	800b9b2 <_dtoa_r+0x94a>
 800bc14:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <_dtoa_r+0xbd4>)
 800bc16:	f7ff ba95 	b.w	800b144 <_dtoa_r+0xdc>
 800bc1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f47f aa6e 	bne.w	800b0fe <_dtoa_r+0x96>
 800bc22:	4b07      	ldr	r3, [pc, #28]	; (800bc40 <_dtoa_r+0xbd8>)
 800bc24:	f7ff ba8e 	b.w	800b144 <_dtoa_r+0xdc>
 800bc28:	9b02      	ldr	r3, [sp, #8]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	dcae      	bgt.n	800bb8c <_dtoa_r+0xb24>
 800bc2e:	9b06      	ldr	r3, [sp, #24]
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	f73f aea8 	bgt.w	800b986 <_dtoa_r+0x91e>
 800bc36:	e7a9      	b.n	800bb8c <_dtoa_r+0xb24>
 800bc38:	0800d098 	.word	0x0800d098
 800bc3c:	0800d400 	.word	0x0800d400
 800bc40:	0800d3f3 	.word	0x0800d3f3

0800bc44 <fiprintf>:
 800bc44:	b40e      	push	{r1, r2, r3}
 800bc46:	b503      	push	{r0, r1, lr}
 800bc48:	4601      	mov	r1, r0
 800bc4a:	ab03      	add	r3, sp, #12
 800bc4c:	4805      	ldr	r0, [pc, #20]	; (800bc64 <fiprintf+0x20>)
 800bc4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc52:	6800      	ldr	r0, [r0, #0]
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	f000 f891 	bl	800bd7c <_vfiprintf_r>
 800bc5a:	b002      	add	sp, #8
 800bc5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc60:	b003      	add	sp, #12
 800bc62:	4770      	bx	lr
 800bc64:	2000001c 	.word	0x2000001c

0800bc68 <malloc>:
 800bc68:	4b02      	ldr	r3, [pc, #8]	; (800bc74 <malloc+0xc>)
 800bc6a:	4601      	mov	r1, r0
 800bc6c:	6818      	ldr	r0, [r3, #0]
 800bc6e:	f7fe bf07 	b.w	800aa80 <_malloc_r>
 800bc72:	bf00      	nop
 800bc74:	2000001c 	.word	0x2000001c

0800bc78 <__malloc_lock>:
 800bc78:	4801      	ldr	r0, [pc, #4]	; (800bc80 <__malloc_lock+0x8>)
 800bc7a:	f000 bc2f 	b.w	800c4dc <__retarget_lock_acquire_recursive>
 800bc7e:	bf00      	nop
 800bc80:	20000960 	.word	0x20000960

0800bc84 <__malloc_unlock>:
 800bc84:	4801      	ldr	r0, [pc, #4]	; (800bc8c <__malloc_unlock+0x8>)
 800bc86:	f000 bc2a 	b.w	800c4de <__retarget_lock_release_recursive>
 800bc8a:	bf00      	nop
 800bc8c:	20000960 	.word	0x20000960

0800bc90 <_free_r>:
 800bc90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc92:	2900      	cmp	r1, #0
 800bc94:	d044      	beq.n	800bd20 <_free_r+0x90>
 800bc96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc9a:	9001      	str	r0, [sp, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f1a1 0404 	sub.w	r4, r1, #4
 800bca2:	bfb8      	it	lt
 800bca4:	18e4      	addlt	r4, r4, r3
 800bca6:	f7ff ffe7 	bl	800bc78 <__malloc_lock>
 800bcaa:	4a1e      	ldr	r2, [pc, #120]	; (800bd24 <_free_r+0x94>)
 800bcac:	9801      	ldr	r0, [sp, #4]
 800bcae:	6813      	ldr	r3, [r2, #0]
 800bcb0:	b933      	cbnz	r3, 800bcc0 <_free_r+0x30>
 800bcb2:	6063      	str	r3, [r4, #4]
 800bcb4:	6014      	str	r4, [r2, #0]
 800bcb6:	b003      	add	sp, #12
 800bcb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcbc:	f7ff bfe2 	b.w	800bc84 <__malloc_unlock>
 800bcc0:	42a3      	cmp	r3, r4
 800bcc2:	d908      	bls.n	800bcd6 <_free_r+0x46>
 800bcc4:	6825      	ldr	r5, [r4, #0]
 800bcc6:	1961      	adds	r1, r4, r5
 800bcc8:	428b      	cmp	r3, r1
 800bcca:	bf01      	itttt	eq
 800bccc:	6819      	ldreq	r1, [r3, #0]
 800bcce:	685b      	ldreq	r3, [r3, #4]
 800bcd0:	1949      	addeq	r1, r1, r5
 800bcd2:	6021      	streq	r1, [r4, #0]
 800bcd4:	e7ed      	b.n	800bcb2 <_free_r+0x22>
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	b10b      	cbz	r3, 800bce0 <_free_r+0x50>
 800bcdc:	42a3      	cmp	r3, r4
 800bcde:	d9fa      	bls.n	800bcd6 <_free_r+0x46>
 800bce0:	6811      	ldr	r1, [r2, #0]
 800bce2:	1855      	adds	r5, r2, r1
 800bce4:	42a5      	cmp	r5, r4
 800bce6:	d10b      	bne.n	800bd00 <_free_r+0x70>
 800bce8:	6824      	ldr	r4, [r4, #0]
 800bcea:	4421      	add	r1, r4
 800bcec:	1854      	adds	r4, r2, r1
 800bcee:	42a3      	cmp	r3, r4
 800bcf0:	6011      	str	r1, [r2, #0]
 800bcf2:	d1e0      	bne.n	800bcb6 <_free_r+0x26>
 800bcf4:	681c      	ldr	r4, [r3, #0]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	6053      	str	r3, [r2, #4]
 800bcfa:	4421      	add	r1, r4
 800bcfc:	6011      	str	r1, [r2, #0]
 800bcfe:	e7da      	b.n	800bcb6 <_free_r+0x26>
 800bd00:	d902      	bls.n	800bd08 <_free_r+0x78>
 800bd02:	230c      	movs	r3, #12
 800bd04:	6003      	str	r3, [r0, #0]
 800bd06:	e7d6      	b.n	800bcb6 <_free_r+0x26>
 800bd08:	6825      	ldr	r5, [r4, #0]
 800bd0a:	1961      	adds	r1, r4, r5
 800bd0c:	428b      	cmp	r3, r1
 800bd0e:	bf04      	itt	eq
 800bd10:	6819      	ldreq	r1, [r3, #0]
 800bd12:	685b      	ldreq	r3, [r3, #4]
 800bd14:	6063      	str	r3, [r4, #4]
 800bd16:	bf04      	itt	eq
 800bd18:	1949      	addeq	r1, r1, r5
 800bd1a:	6021      	streq	r1, [r4, #0]
 800bd1c:	6054      	str	r4, [r2, #4]
 800bd1e:	e7ca      	b.n	800bcb6 <_free_r+0x26>
 800bd20:	b003      	add	sp, #12
 800bd22:	bd30      	pop	{r4, r5, pc}
 800bd24:	20000954 	.word	0x20000954

0800bd28 <__sfputc_r>:
 800bd28:	6893      	ldr	r3, [r2, #8]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	b410      	push	{r4}
 800bd30:	6093      	str	r3, [r2, #8]
 800bd32:	da08      	bge.n	800bd46 <__sfputc_r+0x1e>
 800bd34:	6994      	ldr	r4, [r2, #24]
 800bd36:	42a3      	cmp	r3, r4
 800bd38:	db01      	blt.n	800bd3e <__sfputc_r+0x16>
 800bd3a:	290a      	cmp	r1, #10
 800bd3c:	d103      	bne.n	800bd46 <__sfputc_r+0x1e>
 800bd3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd42:	f000 b94b 	b.w	800bfdc <__swbuf_r>
 800bd46:	6813      	ldr	r3, [r2, #0]
 800bd48:	1c58      	adds	r0, r3, #1
 800bd4a:	6010      	str	r0, [r2, #0]
 800bd4c:	7019      	strb	r1, [r3, #0]
 800bd4e:	4608      	mov	r0, r1
 800bd50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <__sfputs_r>:
 800bd56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd58:	4606      	mov	r6, r0
 800bd5a:	460f      	mov	r7, r1
 800bd5c:	4614      	mov	r4, r2
 800bd5e:	18d5      	adds	r5, r2, r3
 800bd60:	42ac      	cmp	r4, r5
 800bd62:	d101      	bne.n	800bd68 <__sfputs_r+0x12>
 800bd64:	2000      	movs	r0, #0
 800bd66:	e007      	b.n	800bd78 <__sfputs_r+0x22>
 800bd68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd6c:	463a      	mov	r2, r7
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f7ff ffda 	bl	800bd28 <__sfputc_r>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d1f3      	bne.n	800bd60 <__sfputs_r+0xa>
 800bd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd7c <_vfiprintf_r>:
 800bd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd80:	460d      	mov	r5, r1
 800bd82:	b09d      	sub	sp, #116	; 0x74
 800bd84:	4614      	mov	r4, r2
 800bd86:	4698      	mov	r8, r3
 800bd88:	4606      	mov	r6, r0
 800bd8a:	b118      	cbz	r0, 800bd94 <_vfiprintf_r+0x18>
 800bd8c:	6983      	ldr	r3, [r0, #24]
 800bd8e:	b90b      	cbnz	r3, 800bd94 <_vfiprintf_r+0x18>
 800bd90:	f000 fb06 	bl	800c3a0 <__sinit>
 800bd94:	4b89      	ldr	r3, [pc, #548]	; (800bfbc <_vfiprintf_r+0x240>)
 800bd96:	429d      	cmp	r5, r3
 800bd98:	d11b      	bne.n	800bdd2 <_vfiprintf_r+0x56>
 800bd9a:	6875      	ldr	r5, [r6, #4]
 800bd9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd9e:	07d9      	lsls	r1, r3, #31
 800bda0:	d405      	bmi.n	800bdae <_vfiprintf_r+0x32>
 800bda2:	89ab      	ldrh	r3, [r5, #12]
 800bda4:	059a      	lsls	r2, r3, #22
 800bda6:	d402      	bmi.n	800bdae <_vfiprintf_r+0x32>
 800bda8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdaa:	f000 fb97 	bl	800c4dc <__retarget_lock_acquire_recursive>
 800bdae:	89ab      	ldrh	r3, [r5, #12]
 800bdb0:	071b      	lsls	r3, r3, #28
 800bdb2:	d501      	bpl.n	800bdb8 <_vfiprintf_r+0x3c>
 800bdb4:	692b      	ldr	r3, [r5, #16]
 800bdb6:	b9eb      	cbnz	r3, 800bdf4 <_vfiprintf_r+0x78>
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f000 f960 	bl	800c080 <__swsetup_r>
 800bdc0:	b1c0      	cbz	r0, 800bdf4 <_vfiprintf_r+0x78>
 800bdc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdc4:	07dc      	lsls	r4, r3, #31
 800bdc6:	d50e      	bpl.n	800bde6 <_vfiprintf_r+0x6a>
 800bdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdcc:	b01d      	add	sp, #116	; 0x74
 800bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd2:	4b7b      	ldr	r3, [pc, #492]	; (800bfc0 <_vfiprintf_r+0x244>)
 800bdd4:	429d      	cmp	r5, r3
 800bdd6:	d101      	bne.n	800bddc <_vfiprintf_r+0x60>
 800bdd8:	68b5      	ldr	r5, [r6, #8]
 800bdda:	e7df      	b.n	800bd9c <_vfiprintf_r+0x20>
 800bddc:	4b79      	ldr	r3, [pc, #484]	; (800bfc4 <_vfiprintf_r+0x248>)
 800bdde:	429d      	cmp	r5, r3
 800bde0:	bf08      	it	eq
 800bde2:	68f5      	ldreq	r5, [r6, #12]
 800bde4:	e7da      	b.n	800bd9c <_vfiprintf_r+0x20>
 800bde6:	89ab      	ldrh	r3, [r5, #12]
 800bde8:	0598      	lsls	r0, r3, #22
 800bdea:	d4ed      	bmi.n	800bdc8 <_vfiprintf_r+0x4c>
 800bdec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdee:	f000 fb76 	bl	800c4de <__retarget_lock_release_recursive>
 800bdf2:	e7e9      	b.n	800bdc8 <_vfiprintf_r+0x4c>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf8:	2320      	movs	r3, #32
 800bdfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800be02:	2330      	movs	r3, #48	; 0x30
 800be04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bfc8 <_vfiprintf_r+0x24c>
 800be08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be0c:	f04f 0901 	mov.w	r9, #1
 800be10:	4623      	mov	r3, r4
 800be12:	469a      	mov	sl, r3
 800be14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be18:	b10a      	cbz	r2, 800be1e <_vfiprintf_r+0xa2>
 800be1a:	2a25      	cmp	r2, #37	; 0x25
 800be1c:	d1f9      	bne.n	800be12 <_vfiprintf_r+0x96>
 800be1e:	ebba 0b04 	subs.w	fp, sl, r4
 800be22:	d00b      	beq.n	800be3c <_vfiprintf_r+0xc0>
 800be24:	465b      	mov	r3, fp
 800be26:	4622      	mov	r2, r4
 800be28:	4629      	mov	r1, r5
 800be2a:	4630      	mov	r0, r6
 800be2c:	f7ff ff93 	bl	800bd56 <__sfputs_r>
 800be30:	3001      	adds	r0, #1
 800be32:	f000 80aa 	beq.w	800bf8a <_vfiprintf_r+0x20e>
 800be36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be38:	445a      	add	r2, fp
 800be3a:	9209      	str	r2, [sp, #36]	; 0x24
 800be3c:	f89a 3000 	ldrb.w	r3, [sl]
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 80a2 	beq.w	800bf8a <_vfiprintf_r+0x20e>
 800be46:	2300      	movs	r3, #0
 800be48:	f04f 32ff 	mov.w	r2, #4294967295
 800be4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be50:	f10a 0a01 	add.w	sl, sl, #1
 800be54:	9304      	str	r3, [sp, #16]
 800be56:	9307      	str	r3, [sp, #28]
 800be58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be5c:	931a      	str	r3, [sp, #104]	; 0x68
 800be5e:	4654      	mov	r4, sl
 800be60:	2205      	movs	r2, #5
 800be62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be66:	4858      	ldr	r0, [pc, #352]	; (800bfc8 <_vfiprintf_r+0x24c>)
 800be68:	f7f4 f9da 	bl	8000220 <memchr>
 800be6c:	9a04      	ldr	r2, [sp, #16]
 800be6e:	b9d8      	cbnz	r0, 800bea8 <_vfiprintf_r+0x12c>
 800be70:	06d1      	lsls	r1, r2, #27
 800be72:	bf44      	itt	mi
 800be74:	2320      	movmi	r3, #32
 800be76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be7a:	0713      	lsls	r3, r2, #28
 800be7c:	bf44      	itt	mi
 800be7e:	232b      	movmi	r3, #43	; 0x2b
 800be80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be84:	f89a 3000 	ldrb.w	r3, [sl]
 800be88:	2b2a      	cmp	r3, #42	; 0x2a
 800be8a:	d015      	beq.n	800beb8 <_vfiprintf_r+0x13c>
 800be8c:	9a07      	ldr	r2, [sp, #28]
 800be8e:	4654      	mov	r4, sl
 800be90:	2000      	movs	r0, #0
 800be92:	f04f 0c0a 	mov.w	ip, #10
 800be96:	4621      	mov	r1, r4
 800be98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be9c:	3b30      	subs	r3, #48	; 0x30
 800be9e:	2b09      	cmp	r3, #9
 800bea0:	d94e      	bls.n	800bf40 <_vfiprintf_r+0x1c4>
 800bea2:	b1b0      	cbz	r0, 800bed2 <_vfiprintf_r+0x156>
 800bea4:	9207      	str	r2, [sp, #28]
 800bea6:	e014      	b.n	800bed2 <_vfiprintf_r+0x156>
 800bea8:	eba0 0308 	sub.w	r3, r0, r8
 800beac:	fa09 f303 	lsl.w	r3, r9, r3
 800beb0:	4313      	orrs	r3, r2
 800beb2:	9304      	str	r3, [sp, #16]
 800beb4:	46a2      	mov	sl, r4
 800beb6:	e7d2      	b.n	800be5e <_vfiprintf_r+0xe2>
 800beb8:	9b03      	ldr	r3, [sp, #12]
 800beba:	1d19      	adds	r1, r3, #4
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	9103      	str	r1, [sp, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	bfbb      	ittet	lt
 800bec4:	425b      	neglt	r3, r3
 800bec6:	f042 0202 	orrlt.w	r2, r2, #2
 800beca:	9307      	strge	r3, [sp, #28]
 800becc:	9307      	strlt	r3, [sp, #28]
 800bece:	bfb8      	it	lt
 800bed0:	9204      	strlt	r2, [sp, #16]
 800bed2:	7823      	ldrb	r3, [r4, #0]
 800bed4:	2b2e      	cmp	r3, #46	; 0x2e
 800bed6:	d10c      	bne.n	800bef2 <_vfiprintf_r+0x176>
 800bed8:	7863      	ldrb	r3, [r4, #1]
 800beda:	2b2a      	cmp	r3, #42	; 0x2a
 800bedc:	d135      	bne.n	800bf4a <_vfiprintf_r+0x1ce>
 800bede:	9b03      	ldr	r3, [sp, #12]
 800bee0:	1d1a      	adds	r2, r3, #4
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	9203      	str	r2, [sp, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	bfb8      	it	lt
 800beea:	f04f 33ff 	movlt.w	r3, #4294967295
 800beee:	3402      	adds	r4, #2
 800bef0:	9305      	str	r3, [sp, #20]
 800bef2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bfd8 <_vfiprintf_r+0x25c>
 800bef6:	7821      	ldrb	r1, [r4, #0]
 800bef8:	2203      	movs	r2, #3
 800befa:	4650      	mov	r0, sl
 800befc:	f7f4 f990 	bl	8000220 <memchr>
 800bf00:	b140      	cbz	r0, 800bf14 <_vfiprintf_r+0x198>
 800bf02:	2340      	movs	r3, #64	; 0x40
 800bf04:	eba0 000a 	sub.w	r0, r0, sl
 800bf08:	fa03 f000 	lsl.w	r0, r3, r0
 800bf0c:	9b04      	ldr	r3, [sp, #16]
 800bf0e:	4303      	orrs	r3, r0
 800bf10:	3401      	adds	r4, #1
 800bf12:	9304      	str	r3, [sp, #16]
 800bf14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf18:	482c      	ldr	r0, [pc, #176]	; (800bfcc <_vfiprintf_r+0x250>)
 800bf1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf1e:	2206      	movs	r2, #6
 800bf20:	f7f4 f97e 	bl	8000220 <memchr>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d03f      	beq.n	800bfa8 <_vfiprintf_r+0x22c>
 800bf28:	4b29      	ldr	r3, [pc, #164]	; (800bfd0 <_vfiprintf_r+0x254>)
 800bf2a:	bb1b      	cbnz	r3, 800bf74 <_vfiprintf_r+0x1f8>
 800bf2c:	9b03      	ldr	r3, [sp, #12]
 800bf2e:	3307      	adds	r3, #7
 800bf30:	f023 0307 	bic.w	r3, r3, #7
 800bf34:	3308      	adds	r3, #8
 800bf36:	9303      	str	r3, [sp, #12]
 800bf38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf3a:	443b      	add	r3, r7
 800bf3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf3e:	e767      	b.n	800be10 <_vfiprintf_r+0x94>
 800bf40:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf44:	460c      	mov	r4, r1
 800bf46:	2001      	movs	r0, #1
 800bf48:	e7a5      	b.n	800be96 <_vfiprintf_r+0x11a>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	3401      	adds	r4, #1
 800bf4e:	9305      	str	r3, [sp, #20]
 800bf50:	4619      	mov	r1, r3
 800bf52:	f04f 0c0a 	mov.w	ip, #10
 800bf56:	4620      	mov	r0, r4
 800bf58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf5c:	3a30      	subs	r2, #48	; 0x30
 800bf5e:	2a09      	cmp	r2, #9
 800bf60:	d903      	bls.n	800bf6a <_vfiprintf_r+0x1ee>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d0c5      	beq.n	800bef2 <_vfiprintf_r+0x176>
 800bf66:	9105      	str	r1, [sp, #20]
 800bf68:	e7c3      	b.n	800bef2 <_vfiprintf_r+0x176>
 800bf6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf6e:	4604      	mov	r4, r0
 800bf70:	2301      	movs	r3, #1
 800bf72:	e7f0      	b.n	800bf56 <_vfiprintf_r+0x1da>
 800bf74:	ab03      	add	r3, sp, #12
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	462a      	mov	r2, r5
 800bf7a:	4b16      	ldr	r3, [pc, #88]	; (800bfd4 <_vfiprintf_r+0x258>)
 800bf7c:	a904      	add	r1, sp, #16
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f3af 8000 	nop.w
 800bf84:	4607      	mov	r7, r0
 800bf86:	1c78      	adds	r0, r7, #1
 800bf88:	d1d6      	bne.n	800bf38 <_vfiprintf_r+0x1bc>
 800bf8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf8c:	07d9      	lsls	r1, r3, #31
 800bf8e:	d405      	bmi.n	800bf9c <_vfiprintf_r+0x220>
 800bf90:	89ab      	ldrh	r3, [r5, #12]
 800bf92:	059a      	lsls	r2, r3, #22
 800bf94:	d402      	bmi.n	800bf9c <_vfiprintf_r+0x220>
 800bf96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf98:	f000 faa1 	bl	800c4de <__retarget_lock_release_recursive>
 800bf9c:	89ab      	ldrh	r3, [r5, #12]
 800bf9e:	065b      	lsls	r3, r3, #25
 800bfa0:	f53f af12 	bmi.w	800bdc8 <_vfiprintf_r+0x4c>
 800bfa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfa6:	e711      	b.n	800bdcc <_vfiprintf_r+0x50>
 800bfa8:	ab03      	add	r3, sp, #12
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	462a      	mov	r2, r5
 800bfae:	4b09      	ldr	r3, [pc, #36]	; (800bfd4 <_vfiprintf_r+0x258>)
 800bfb0:	a904      	add	r1, sp, #16
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f7fe fe46 	bl	800ac44 <_printf_i>
 800bfb8:	e7e4      	b.n	800bf84 <_vfiprintf_r+0x208>
 800bfba:	bf00      	nop
 800bfbc:	0800d490 	.word	0x0800d490
 800bfc0:	0800d4b0 	.word	0x0800d4b0
 800bfc4:	0800d470 	.word	0x0800d470
 800bfc8:	0800d45d 	.word	0x0800d45d
 800bfcc:	0800d467 	.word	0x0800d467
 800bfd0:	00000000 	.word	0x00000000
 800bfd4:	0800bd57 	.word	0x0800bd57
 800bfd8:	0800d463 	.word	0x0800d463

0800bfdc <__swbuf_r>:
 800bfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfde:	460e      	mov	r6, r1
 800bfe0:	4614      	mov	r4, r2
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	b118      	cbz	r0, 800bfee <__swbuf_r+0x12>
 800bfe6:	6983      	ldr	r3, [r0, #24]
 800bfe8:	b90b      	cbnz	r3, 800bfee <__swbuf_r+0x12>
 800bfea:	f000 f9d9 	bl	800c3a0 <__sinit>
 800bfee:	4b21      	ldr	r3, [pc, #132]	; (800c074 <__swbuf_r+0x98>)
 800bff0:	429c      	cmp	r4, r3
 800bff2:	d12b      	bne.n	800c04c <__swbuf_r+0x70>
 800bff4:	686c      	ldr	r4, [r5, #4]
 800bff6:	69a3      	ldr	r3, [r4, #24]
 800bff8:	60a3      	str	r3, [r4, #8]
 800bffa:	89a3      	ldrh	r3, [r4, #12]
 800bffc:	071a      	lsls	r2, r3, #28
 800bffe:	d52f      	bpl.n	800c060 <__swbuf_r+0x84>
 800c000:	6923      	ldr	r3, [r4, #16]
 800c002:	b36b      	cbz	r3, 800c060 <__swbuf_r+0x84>
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	6820      	ldr	r0, [r4, #0]
 800c008:	1ac0      	subs	r0, r0, r3
 800c00a:	6963      	ldr	r3, [r4, #20]
 800c00c:	b2f6      	uxtb	r6, r6
 800c00e:	4283      	cmp	r3, r0
 800c010:	4637      	mov	r7, r6
 800c012:	dc04      	bgt.n	800c01e <__swbuf_r+0x42>
 800c014:	4621      	mov	r1, r4
 800c016:	4628      	mov	r0, r5
 800c018:	f000 f92e 	bl	800c278 <_fflush_r>
 800c01c:	bb30      	cbnz	r0, 800c06c <__swbuf_r+0x90>
 800c01e:	68a3      	ldr	r3, [r4, #8]
 800c020:	3b01      	subs	r3, #1
 800c022:	60a3      	str	r3, [r4, #8]
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	6022      	str	r2, [r4, #0]
 800c02a:	701e      	strb	r6, [r3, #0]
 800c02c:	6963      	ldr	r3, [r4, #20]
 800c02e:	3001      	adds	r0, #1
 800c030:	4283      	cmp	r3, r0
 800c032:	d004      	beq.n	800c03e <__swbuf_r+0x62>
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	07db      	lsls	r3, r3, #31
 800c038:	d506      	bpl.n	800c048 <__swbuf_r+0x6c>
 800c03a:	2e0a      	cmp	r6, #10
 800c03c:	d104      	bne.n	800c048 <__swbuf_r+0x6c>
 800c03e:	4621      	mov	r1, r4
 800c040:	4628      	mov	r0, r5
 800c042:	f000 f919 	bl	800c278 <_fflush_r>
 800c046:	b988      	cbnz	r0, 800c06c <__swbuf_r+0x90>
 800c048:	4638      	mov	r0, r7
 800c04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c04c:	4b0a      	ldr	r3, [pc, #40]	; (800c078 <__swbuf_r+0x9c>)
 800c04e:	429c      	cmp	r4, r3
 800c050:	d101      	bne.n	800c056 <__swbuf_r+0x7a>
 800c052:	68ac      	ldr	r4, [r5, #8]
 800c054:	e7cf      	b.n	800bff6 <__swbuf_r+0x1a>
 800c056:	4b09      	ldr	r3, [pc, #36]	; (800c07c <__swbuf_r+0xa0>)
 800c058:	429c      	cmp	r4, r3
 800c05a:	bf08      	it	eq
 800c05c:	68ec      	ldreq	r4, [r5, #12]
 800c05e:	e7ca      	b.n	800bff6 <__swbuf_r+0x1a>
 800c060:	4621      	mov	r1, r4
 800c062:	4628      	mov	r0, r5
 800c064:	f000 f80c 	bl	800c080 <__swsetup_r>
 800c068:	2800      	cmp	r0, #0
 800c06a:	d0cb      	beq.n	800c004 <__swbuf_r+0x28>
 800c06c:	f04f 37ff 	mov.w	r7, #4294967295
 800c070:	e7ea      	b.n	800c048 <__swbuf_r+0x6c>
 800c072:	bf00      	nop
 800c074:	0800d490 	.word	0x0800d490
 800c078:	0800d4b0 	.word	0x0800d4b0
 800c07c:	0800d470 	.word	0x0800d470

0800c080 <__swsetup_r>:
 800c080:	4b32      	ldr	r3, [pc, #200]	; (800c14c <__swsetup_r+0xcc>)
 800c082:	b570      	push	{r4, r5, r6, lr}
 800c084:	681d      	ldr	r5, [r3, #0]
 800c086:	4606      	mov	r6, r0
 800c088:	460c      	mov	r4, r1
 800c08a:	b125      	cbz	r5, 800c096 <__swsetup_r+0x16>
 800c08c:	69ab      	ldr	r3, [r5, #24]
 800c08e:	b913      	cbnz	r3, 800c096 <__swsetup_r+0x16>
 800c090:	4628      	mov	r0, r5
 800c092:	f000 f985 	bl	800c3a0 <__sinit>
 800c096:	4b2e      	ldr	r3, [pc, #184]	; (800c150 <__swsetup_r+0xd0>)
 800c098:	429c      	cmp	r4, r3
 800c09a:	d10f      	bne.n	800c0bc <__swsetup_r+0x3c>
 800c09c:	686c      	ldr	r4, [r5, #4]
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0a4:	0719      	lsls	r1, r3, #28
 800c0a6:	d42c      	bmi.n	800c102 <__swsetup_r+0x82>
 800c0a8:	06dd      	lsls	r5, r3, #27
 800c0aa:	d411      	bmi.n	800c0d0 <__swsetup_r+0x50>
 800c0ac:	2309      	movs	r3, #9
 800c0ae:	6033      	str	r3, [r6, #0]
 800c0b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c0b4:	81a3      	strh	r3, [r4, #12]
 800c0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ba:	e03e      	b.n	800c13a <__swsetup_r+0xba>
 800c0bc:	4b25      	ldr	r3, [pc, #148]	; (800c154 <__swsetup_r+0xd4>)
 800c0be:	429c      	cmp	r4, r3
 800c0c0:	d101      	bne.n	800c0c6 <__swsetup_r+0x46>
 800c0c2:	68ac      	ldr	r4, [r5, #8]
 800c0c4:	e7eb      	b.n	800c09e <__swsetup_r+0x1e>
 800c0c6:	4b24      	ldr	r3, [pc, #144]	; (800c158 <__swsetup_r+0xd8>)
 800c0c8:	429c      	cmp	r4, r3
 800c0ca:	bf08      	it	eq
 800c0cc:	68ec      	ldreq	r4, [r5, #12]
 800c0ce:	e7e6      	b.n	800c09e <__swsetup_r+0x1e>
 800c0d0:	0758      	lsls	r0, r3, #29
 800c0d2:	d512      	bpl.n	800c0fa <__swsetup_r+0x7a>
 800c0d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0d6:	b141      	cbz	r1, 800c0ea <__swsetup_r+0x6a>
 800c0d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0dc:	4299      	cmp	r1, r3
 800c0de:	d002      	beq.n	800c0e6 <__swsetup_r+0x66>
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f7ff fdd5 	bl	800bc90 <_free_r>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	6363      	str	r3, [r4, #52]	; 0x34
 800c0ea:	89a3      	ldrh	r3, [r4, #12]
 800c0ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	6063      	str	r3, [r4, #4]
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	f043 0308 	orr.w	r3, r3, #8
 800c100:	81a3      	strh	r3, [r4, #12]
 800c102:	6923      	ldr	r3, [r4, #16]
 800c104:	b94b      	cbnz	r3, 800c11a <__swsetup_r+0x9a>
 800c106:	89a3      	ldrh	r3, [r4, #12]
 800c108:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c10c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c110:	d003      	beq.n	800c11a <__swsetup_r+0x9a>
 800c112:	4621      	mov	r1, r4
 800c114:	4630      	mov	r0, r6
 800c116:	f000 fa09 	bl	800c52c <__smakebuf_r>
 800c11a:	89a0      	ldrh	r0, [r4, #12]
 800c11c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c120:	f010 0301 	ands.w	r3, r0, #1
 800c124:	d00a      	beq.n	800c13c <__swsetup_r+0xbc>
 800c126:	2300      	movs	r3, #0
 800c128:	60a3      	str	r3, [r4, #8]
 800c12a:	6963      	ldr	r3, [r4, #20]
 800c12c:	425b      	negs	r3, r3
 800c12e:	61a3      	str	r3, [r4, #24]
 800c130:	6923      	ldr	r3, [r4, #16]
 800c132:	b943      	cbnz	r3, 800c146 <__swsetup_r+0xc6>
 800c134:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c138:	d1ba      	bne.n	800c0b0 <__swsetup_r+0x30>
 800c13a:	bd70      	pop	{r4, r5, r6, pc}
 800c13c:	0781      	lsls	r1, r0, #30
 800c13e:	bf58      	it	pl
 800c140:	6963      	ldrpl	r3, [r4, #20]
 800c142:	60a3      	str	r3, [r4, #8]
 800c144:	e7f4      	b.n	800c130 <__swsetup_r+0xb0>
 800c146:	2000      	movs	r0, #0
 800c148:	e7f7      	b.n	800c13a <__swsetup_r+0xba>
 800c14a:	bf00      	nop
 800c14c:	2000001c 	.word	0x2000001c
 800c150:	0800d490 	.word	0x0800d490
 800c154:	0800d4b0 	.word	0x0800d4b0
 800c158:	0800d470 	.word	0x0800d470

0800c15c <abort>:
 800c15c:	b508      	push	{r3, lr}
 800c15e:	2006      	movs	r0, #6
 800c160:	f000 fa4c 	bl	800c5fc <raise>
 800c164:	2001      	movs	r0, #1
 800c166:	f7f6 fac3 	bl	80026f0 <_exit>
	...

0800c16c <__sflush_r>:
 800c16c:	898a      	ldrh	r2, [r1, #12]
 800c16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c172:	4605      	mov	r5, r0
 800c174:	0710      	lsls	r0, r2, #28
 800c176:	460c      	mov	r4, r1
 800c178:	d458      	bmi.n	800c22c <__sflush_r+0xc0>
 800c17a:	684b      	ldr	r3, [r1, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	dc05      	bgt.n	800c18c <__sflush_r+0x20>
 800c180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c182:	2b00      	cmp	r3, #0
 800c184:	dc02      	bgt.n	800c18c <__sflush_r+0x20>
 800c186:	2000      	movs	r0, #0
 800c188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c18c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c18e:	2e00      	cmp	r6, #0
 800c190:	d0f9      	beq.n	800c186 <__sflush_r+0x1a>
 800c192:	2300      	movs	r3, #0
 800c194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c198:	682f      	ldr	r7, [r5, #0]
 800c19a:	602b      	str	r3, [r5, #0]
 800c19c:	d032      	beq.n	800c204 <__sflush_r+0x98>
 800c19e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1a0:	89a3      	ldrh	r3, [r4, #12]
 800c1a2:	075a      	lsls	r2, r3, #29
 800c1a4:	d505      	bpl.n	800c1b2 <__sflush_r+0x46>
 800c1a6:	6863      	ldr	r3, [r4, #4]
 800c1a8:	1ac0      	subs	r0, r0, r3
 800c1aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1ac:	b10b      	cbz	r3, 800c1b2 <__sflush_r+0x46>
 800c1ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1b0:	1ac0      	subs	r0, r0, r3
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1b8:	6a21      	ldr	r1, [r4, #32]
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	47b0      	blx	r6
 800c1be:	1c43      	adds	r3, r0, #1
 800c1c0:	89a3      	ldrh	r3, [r4, #12]
 800c1c2:	d106      	bne.n	800c1d2 <__sflush_r+0x66>
 800c1c4:	6829      	ldr	r1, [r5, #0]
 800c1c6:	291d      	cmp	r1, #29
 800c1c8:	d82c      	bhi.n	800c224 <__sflush_r+0xb8>
 800c1ca:	4a2a      	ldr	r2, [pc, #168]	; (800c274 <__sflush_r+0x108>)
 800c1cc:	40ca      	lsrs	r2, r1
 800c1ce:	07d6      	lsls	r6, r2, #31
 800c1d0:	d528      	bpl.n	800c224 <__sflush_r+0xb8>
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	6062      	str	r2, [r4, #4]
 800c1d6:	04d9      	lsls	r1, r3, #19
 800c1d8:	6922      	ldr	r2, [r4, #16]
 800c1da:	6022      	str	r2, [r4, #0]
 800c1dc:	d504      	bpl.n	800c1e8 <__sflush_r+0x7c>
 800c1de:	1c42      	adds	r2, r0, #1
 800c1e0:	d101      	bne.n	800c1e6 <__sflush_r+0x7a>
 800c1e2:	682b      	ldr	r3, [r5, #0]
 800c1e4:	b903      	cbnz	r3, 800c1e8 <__sflush_r+0x7c>
 800c1e6:	6560      	str	r0, [r4, #84]	; 0x54
 800c1e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1ea:	602f      	str	r7, [r5, #0]
 800c1ec:	2900      	cmp	r1, #0
 800c1ee:	d0ca      	beq.n	800c186 <__sflush_r+0x1a>
 800c1f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1f4:	4299      	cmp	r1, r3
 800c1f6:	d002      	beq.n	800c1fe <__sflush_r+0x92>
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f7ff fd49 	bl	800bc90 <_free_r>
 800c1fe:	2000      	movs	r0, #0
 800c200:	6360      	str	r0, [r4, #52]	; 0x34
 800c202:	e7c1      	b.n	800c188 <__sflush_r+0x1c>
 800c204:	6a21      	ldr	r1, [r4, #32]
 800c206:	2301      	movs	r3, #1
 800c208:	4628      	mov	r0, r5
 800c20a:	47b0      	blx	r6
 800c20c:	1c41      	adds	r1, r0, #1
 800c20e:	d1c7      	bne.n	800c1a0 <__sflush_r+0x34>
 800c210:	682b      	ldr	r3, [r5, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d0c4      	beq.n	800c1a0 <__sflush_r+0x34>
 800c216:	2b1d      	cmp	r3, #29
 800c218:	d001      	beq.n	800c21e <__sflush_r+0xb2>
 800c21a:	2b16      	cmp	r3, #22
 800c21c:	d101      	bne.n	800c222 <__sflush_r+0xb6>
 800c21e:	602f      	str	r7, [r5, #0]
 800c220:	e7b1      	b.n	800c186 <__sflush_r+0x1a>
 800c222:	89a3      	ldrh	r3, [r4, #12]
 800c224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c228:	81a3      	strh	r3, [r4, #12]
 800c22a:	e7ad      	b.n	800c188 <__sflush_r+0x1c>
 800c22c:	690f      	ldr	r7, [r1, #16]
 800c22e:	2f00      	cmp	r7, #0
 800c230:	d0a9      	beq.n	800c186 <__sflush_r+0x1a>
 800c232:	0793      	lsls	r3, r2, #30
 800c234:	680e      	ldr	r6, [r1, #0]
 800c236:	bf08      	it	eq
 800c238:	694b      	ldreq	r3, [r1, #20]
 800c23a:	600f      	str	r7, [r1, #0]
 800c23c:	bf18      	it	ne
 800c23e:	2300      	movne	r3, #0
 800c240:	eba6 0807 	sub.w	r8, r6, r7
 800c244:	608b      	str	r3, [r1, #8]
 800c246:	f1b8 0f00 	cmp.w	r8, #0
 800c24a:	dd9c      	ble.n	800c186 <__sflush_r+0x1a>
 800c24c:	6a21      	ldr	r1, [r4, #32]
 800c24e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c250:	4643      	mov	r3, r8
 800c252:	463a      	mov	r2, r7
 800c254:	4628      	mov	r0, r5
 800c256:	47b0      	blx	r6
 800c258:	2800      	cmp	r0, #0
 800c25a:	dc06      	bgt.n	800c26a <__sflush_r+0xfe>
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c262:	81a3      	strh	r3, [r4, #12]
 800c264:	f04f 30ff 	mov.w	r0, #4294967295
 800c268:	e78e      	b.n	800c188 <__sflush_r+0x1c>
 800c26a:	4407      	add	r7, r0
 800c26c:	eba8 0800 	sub.w	r8, r8, r0
 800c270:	e7e9      	b.n	800c246 <__sflush_r+0xda>
 800c272:	bf00      	nop
 800c274:	20400001 	.word	0x20400001

0800c278 <_fflush_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	690b      	ldr	r3, [r1, #16]
 800c27c:	4605      	mov	r5, r0
 800c27e:	460c      	mov	r4, r1
 800c280:	b913      	cbnz	r3, 800c288 <_fflush_r+0x10>
 800c282:	2500      	movs	r5, #0
 800c284:	4628      	mov	r0, r5
 800c286:	bd38      	pop	{r3, r4, r5, pc}
 800c288:	b118      	cbz	r0, 800c292 <_fflush_r+0x1a>
 800c28a:	6983      	ldr	r3, [r0, #24]
 800c28c:	b90b      	cbnz	r3, 800c292 <_fflush_r+0x1a>
 800c28e:	f000 f887 	bl	800c3a0 <__sinit>
 800c292:	4b14      	ldr	r3, [pc, #80]	; (800c2e4 <_fflush_r+0x6c>)
 800c294:	429c      	cmp	r4, r3
 800c296:	d11b      	bne.n	800c2d0 <_fflush_r+0x58>
 800c298:	686c      	ldr	r4, [r5, #4]
 800c29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d0ef      	beq.n	800c282 <_fflush_r+0xa>
 800c2a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2a4:	07d0      	lsls	r0, r2, #31
 800c2a6:	d404      	bmi.n	800c2b2 <_fflush_r+0x3a>
 800c2a8:	0599      	lsls	r1, r3, #22
 800c2aa:	d402      	bmi.n	800c2b2 <_fflush_r+0x3a>
 800c2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ae:	f000 f915 	bl	800c4dc <__retarget_lock_acquire_recursive>
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	4621      	mov	r1, r4
 800c2b6:	f7ff ff59 	bl	800c16c <__sflush_r>
 800c2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2bc:	07da      	lsls	r2, r3, #31
 800c2be:	4605      	mov	r5, r0
 800c2c0:	d4e0      	bmi.n	800c284 <_fflush_r+0xc>
 800c2c2:	89a3      	ldrh	r3, [r4, #12]
 800c2c4:	059b      	lsls	r3, r3, #22
 800c2c6:	d4dd      	bmi.n	800c284 <_fflush_r+0xc>
 800c2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ca:	f000 f908 	bl	800c4de <__retarget_lock_release_recursive>
 800c2ce:	e7d9      	b.n	800c284 <_fflush_r+0xc>
 800c2d0:	4b05      	ldr	r3, [pc, #20]	; (800c2e8 <_fflush_r+0x70>)
 800c2d2:	429c      	cmp	r4, r3
 800c2d4:	d101      	bne.n	800c2da <_fflush_r+0x62>
 800c2d6:	68ac      	ldr	r4, [r5, #8]
 800c2d8:	e7df      	b.n	800c29a <_fflush_r+0x22>
 800c2da:	4b04      	ldr	r3, [pc, #16]	; (800c2ec <_fflush_r+0x74>)
 800c2dc:	429c      	cmp	r4, r3
 800c2de:	bf08      	it	eq
 800c2e0:	68ec      	ldreq	r4, [r5, #12]
 800c2e2:	e7da      	b.n	800c29a <_fflush_r+0x22>
 800c2e4:	0800d490 	.word	0x0800d490
 800c2e8:	0800d4b0 	.word	0x0800d4b0
 800c2ec:	0800d470 	.word	0x0800d470

0800c2f0 <std>:
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	b510      	push	{r4, lr}
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	e9c0 3300 	strd	r3, r3, [r0]
 800c2fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2fe:	6083      	str	r3, [r0, #8]
 800c300:	8181      	strh	r1, [r0, #12]
 800c302:	6643      	str	r3, [r0, #100]	; 0x64
 800c304:	81c2      	strh	r2, [r0, #14]
 800c306:	6183      	str	r3, [r0, #24]
 800c308:	4619      	mov	r1, r3
 800c30a:	2208      	movs	r2, #8
 800c30c:	305c      	adds	r0, #92	; 0x5c
 800c30e:	f7fc fb9d 	bl	8008a4c <memset>
 800c312:	4b05      	ldr	r3, [pc, #20]	; (800c328 <std+0x38>)
 800c314:	6263      	str	r3, [r4, #36]	; 0x24
 800c316:	4b05      	ldr	r3, [pc, #20]	; (800c32c <std+0x3c>)
 800c318:	62a3      	str	r3, [r4, #40]	; 0x28
 800c31a:	4b05      	ldr	r3, [pc, #20]	; (800c330 <std+0x40>)
 800c31c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c31e:	4b05      	ldr	r3, [pc, #20]	; (800c334 <std+0x44>)
 800c320:	6224      	str	r4, [r4, #32]
 800c322:	6323      	str	r3, [r4, #48]	; 0x30
 800c324:	bd10      	pop	{r4, pc}
 800c326:	bf00      	nop
 800c328:	0800c635 	.word	0x0800c635
 800c32c:	0800c657 	.word	0x0800c657
 800c330:	0800c68f 	.word	0x0800c68f
 800c334:	0800c6b3 	.word	0x0800c6b3

0800c338 <_cleanup_r>:
 800c338:	4901      	ldr	r1, [pc, #4]	; (800c340 <_cleanup_r+0x8>)
 800c33a:	f000 b8af 	b.w	800c49c <_fwalk_reent>
 800c33e:	bf00      	nop
 800c340:	0800c279 	.word	0x0800c279

0800c344 <__sfmoreglue>:
 800c344:	b570      	push	{r4, r5, r6, lr}
 800c346:	2268      	movs	r2, #104	; 0x68
 800c348:	1e4d      	subs	r5, r1, #1
 800c34a:	4355      	muls	r5, r2
 800c34c:	460e      	mov	r6, r1
 800c34e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c352:	f7fe fb95 	bl	800aa80 <_malloc_r>
 800c356:	4604      	mov	r4, r0
 800c358:	b140      	cbz	r0, 800c36c <__sfmoreglue+0x28>
 800c35a:	2100      	movs	r1, #0
 800c35c:	e9c0 1600 	strd	r1, r6, [r0]
 800c360:	300c      	adds	r0, #12
 800c362:	60a0      	str	r0, [r4, #8]
 800c364:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c368:	f7fc fb70 	bl	8008a4c <memset>
 800c36c:	4620      	mov	r0, r4
 800c36e:	bd70      	pop	{r4, r5, r6, pc}

0800c370 <__sfp_lock_acquire>:
 800c370:	4801      	ldr	r0, [pc, #4]	; (800c378 <__sfp_lock_acquire+0x8>)
 800c372:	f000 b8b3 	b.w	800c4dc <__retarget_lock_acquire_recursive>
 800c376:	bf00      	nop
 800c378:	20000961 	.word	0x20000961

0800c37c <__sfp_lock_release>:
 800c37c:	4801      	ldr	r0, [pc, #4]	; (800c384 <__sfp_lock_release+0x8>)
 800c37e:	f000 b8ae 	b.w	800c4de <__retarget_lock_release_recursive>
 800c382:	bf00      	nop
 800c384:	20000961 	.word	0x20000961

0800c388 <__sinit_lock_acquire>:
 800c388:	4801      	ldr	r0, [pc, #4]	; (800c390 <__sinit_lock_acquire+0x8>)
 800c38a:	f000 b8a7 	b.w	800c4dc <__retarget_lock_acquire_recursive>
 800c38e:	bf00      	nop
 800c390:	20000962 	.word	0x20000962

0800c394 <__sinit_lock_release>:
 800c394:	4801      	ldr	r0, [pc, #4]	; (800c39c <__sinit_lock_release+0x8>)
 800c396:	f000 b8a2 	b.w	800c4de <__retarget_lock_release_recursive>
 800c39a:	bf00      	nop
 800c39c:	20000962 	.word	0x20000962

0800c3a0 <__sinit>:
 800c3a0:	b510      	push	{r4, lr}
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	f7ff fff0 	bl	800c388 <__sinit_lock_acquire>
 800c3a8:	69a3      	ldr	r3, [r4, #24]
 800c3aa:	b11b      	cbz	r3, 800c3b4 <__sinit+0x14>
 800c3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3b0:	f7ff bff0 	b.w	800c394 <__sinit_lock_release>
 800c3b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c3b8:	6523      	str	r3, [r4, #80]	; 0x50
 800c3ba:	4b13      	ldr	r3, [pc, #76]	; (800c408 <__sinit+0x68>)
 800c3bc:	4a13      	ldr	r2, [pc, #76]	; (800c40c <__sinit+0x6c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c3c2:	42a3      	cmp	r3, r4
 800c3c4:	bf04      	itt	eq
 800c3c6:	2301      	moveq	r3, #1
 800c3c8:	61a3      	streq	r3, [r4, #24]
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f000 f820 	bl	800c410 <__sfp>
 800c3d0:	6060      	str	r0, [r4, #4]
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 f81c 	bl	800c410 <__sfp>
 800c3d8:	60a0      	str	r0, [r4, #8]
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 f818 	bl	800c410 <__sfp>
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	60e0      	str	r0, [r4, #12]
 800c3e4:	2104      	movs	r1, #4
 800c3e6:	6860      	ldr	r0, [r4, #4]
 800c3e8:	f7ff ff82 	bl	800c2f0 <std>
 800c3ec:	68a0      	ldr	r0, [r4, #8]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	2109      	movs	r1, #9
 800c3f2:	f7ff ff7d 	bl	800c2f0 <std>
 800c3f6:	68e0      	ldr	r0, [r4, #12]
 800c3f8:	2202      	movs	r2, #2
 800c3fa:	2112      	movs	r1, #18
 800c3fc:	f7ff ff78 	bl	800c2f0 <std>
 800c400:	2301      	movs	r3, #1
 800c402:	61a3      	str	r3, [r4, #24]
 800c404:	e7d2      	b.n	800c3ac <__sinit+0xc>
 800c406:	bf00      	nop
 800c408:	0800d03c 	.word	0x0800d03c
 800c40c:	0800c339 	.word	0x0800c339

0800c410 <__sfp>:
 800c410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c412:	4607      	mov	r7, r0
 800c414:	f7ff ffac 	bl	800c370 <__sfp_lock_acquire>
 800c418:	4b1e      	ldr	r3, [pc, #120]	; (800c494 <__sfp+0x84>)
 800c41a:	681e      	ldr	r6, [r3, #0]
 800c41c:	69b3      	ldr	r3, [r6, #24]
 800c41e:	b913      	cbnz	r3, 800c426 <__sfp+0x16>
 800c420:	4630      	mov	r0, r6
 800c422:	f7ff ffbd 	bl	800c3a0 <__sinit>
 800c426:	3648      	adds	r6, #72	; 0x48
 800c428:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	d503      	bpl.n	800c438 <__sfp+0x28>
 800c430:	6833      	ldr	r3, [r6, #0]
 800c432:	b30b      	cbz	r3, 800c478 <__sfp+0x68>
 800c434:	6836      	ldr	r6, [r6, #0]
 800c436:	e7f7      	b.n	800c428 <__sfp+0x18>
 800c438:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c43c:	b9d5      	cbnz	r5, 800c474 <__sfp+0x64>
 800c43e:	4b16      	ldr	r3, [pc, #88]	; (800c498 <__sfp+0x88>)
 800c440:	60e3      	str	r3, [r4, #12]
 800c442:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c446:	6665      	str	r5, [r4, #100]	; 0x64
 800c448:	f000 f847 	bl	800c4da <__retarget_lock_init_recursive>
 800c44c:	f7ff ff96 	bl	800c37c <__sfp_lock_release>
 800c450:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c454:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c458:	6025      	str	r5, [r4, #0]
 800c45a:	61a5      	str	r5, [r4, #24]
 800c45c:	2208      	movs	r2, #8
 800c45e:	4629      	mov	r1, r5
 800c460:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c464:	f7fc faf2 	bl	8008a4c <memset>
 800c468:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c46c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c470:	4620      	mov	r0, r4
 800c472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c474:	3468      	adds	r4, #104	; 0x68
 800c476:	e7d9      	b.n	800c42c <__sfp+0x1c>
 800c478:	2104      	movs	r1, #4
 800c47a:	4638      	mov	r0, r7
 800c47c:	f7ff ff62 	bl	800c344 <__sfmoreglue>
 800c480:	4604      	mov	r4, r0
 800c482:	6030      	str	r0, [r6, #0]
 800c484:	2800      	cmp	r0, #0
 800c486:	d1d5      	bne.n	800c434 <__sfp+0x24>
 800c488:	f7ff ff78 	bl	800c37c <__sfp_lock_release>
 800c48c:	230c      	movs	r3, #12
 800c48e:	603b      	str	r3, [r7, #0]
 800c490:	e7ee      	b.n	800c470 <__sfp+0x60>
 800c492:	bf00      	nop
 800c494:	0800d03c 	.word	0x0800d03c
 800c498:	ffff0001 	.word	0xffff0001

0800c49c <_fwalk_reent>:
 800c49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4a0:	4606      	mov	r6, r0
 800c4a2:	4688      	mov	r8, r1
 800c4a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4a8:	2700      	movs	r7, #0
 800c4aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4ae:	f1b9 0901 	subs.w	r9, r9, #1
 800c4b2:	d505      	bpl.n	800c4c0 <_fwalk_reent+0x24>
 800c4b4:	6824      	ldr	r4, [r4, #0]
 800c4b6:	2c00      	cmp	r4, #0
 800c4b8:	d1f7      	bne.n	800c4aa <_fwalk_reent+0xe>
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c0:	89ab      	ldrh	r3, [r5, #12]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d907      	bls.n	800c4d6 <_fwalk_reent+0x3a>
 800c4c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	d003      	beq.n	800c4d6 <_fwalk_reent+0x3a>
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	47c0      	blx	r8
 800c4d4:	4307      	orrs	r7, r0
 800c4d6:	3568      	adds	r5, #104	; 0x68
 800c4d8:	e7e9      	b.n	800c4ae <_fwalk_reent+0x12>

0800c4da <__retarget_lock_init_recursive>:
 800c4da:	4770      	bx	lr

0800c4dc <__retarget_lock_acquire_recursive>:
 800c4dc:	4770      	bx	lr

0800c4de <__retarget_lock_release_recursive>:
 800c4de:	4770      	bx	lr

0800c4e0 <__swhatbuf_r>:
 800c4e0:	b570      	push	{r4, r5, r6, lr}
 800c4e2:	460e      	mov	r6, r1
 800c4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4e8:	2900      	cmp	r1, #0
 800c4ea:	b096      	sub	sp, #88	; 0x58
 800c4ec:	4614      	mov	r4, r2
 800c4ee:	461d      	mov	r5, r3
 800c4f0:	da08      	bge.n	800c504 <__swhatbuf_r+0x24>
 800c4f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	602a      	str	r2, [r5, #0]
 800c4fa:	061a      	lsls	r2, r3, #24
 800c4fc:	d410      	bmi.n	800c520 <__swhatbuf_r+0x40>
 800c4fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c502:	e00e      	b.n	800c522 <__swhatbuf_r+0x42>
 800c504:	466a      	mov	r2, sp
 800c506:	f000 f8fb 	bl	800c700 <_fstat_r>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	dbf1      	blt.n	800c4f2 <__swhatbuf_r+0x12>
 800c50e:	9a01      	ldr	r2, [sp, #4]
 800c510:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c514:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c518:	425a      	negs	r2, r3
 800c51a:	415a      	adcs	r2, r3
 800c51c:	602a      	str	r2, [r5, #0]
 800c51e:	e7ee      	b.n	800c4fe <__swhatbuf_r+0x1e>
 800c520:	2340      	movs	r3, #64	; 0x40
 800c522:	2000      	movs	r0, #0
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	b016      	add	sp, #88	; 0x58
 800c528:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c52c <__smakebuf_r>:
 800c52c:	898b      	ldrh	r3, [r1, #12]
 800c52e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c530:	079d      	lsls	r5, r3, #30
 800c532:	4606      	mov	r6, r0
 800c534:	460c      	mov	r4, r1
 800c536:	d507      	bpl.n	800c548 <__smakebuf_r+0x1c>
 800c538:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c53c:	6023      	str	r3, [r4, #0]
 800c53e:	6123      	str	r3, [r4, #16]
 800c540:	2301      	movs	r3, #1
 800c542:	6163      	str	r3, [r4, #20]
 800c544:	b002      	add	sp, #8
 800c546:	bd70      	pop	{r4, r5, r6, pc}
 800c548:	ab01      	add	r3, sp, #4
 800c54a:	466a      	mov	r2, sp
 800c54c:	f7ff ffc8 	bl	800c4e0 <__swhatbuf_r>
 800c550:	9900      	ldr	r1, [sp, #0]
 800c552:	4605      	mov	r5, r0
 800c554:	4630      	mov	r0, r6
 800c556:	f7fe fa93 	bl	800aa80 <_malloc_r>
 800c55a:	b948      	cbnz	r0, 800c570 <__smakebuf_r+0x44>
 800c55c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c560:	059a      	lsls	r2, r3, #22
 800c562:	d4ef      	bmi.n	800c544 <__smakebuf_r+0x18>
 800c564:	f023 0303 	bic.w	r3, r3, #3
 800c568:	f043 0302 	orr.w	r3, r3, #2
 800c56c:	81a3      	strh	r3, [r4, #12]
 800c56e:	e7e3      	b.n	800c538 <__smakebuf_r+0xc>
 800c570:	4b0d      	ldr	r3, [pc, #52]	; (800c5a8 <__smakebuf_r+0x7c>)
 800c572:	62b3      	str	r3, [r6, #40]	; 0x28
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	6020      	str	r0, [r4, #0]
 800c578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c57c:	81a3      	strh	r3, [r4, #12]
 800c57e:	9b00      	ldr	r3, [sp, #0]
 800c580:	6163      	str	r3, [r4, #20]
 800c582:	9b01      	ldr	r3, [sp, #4]
 800c584:	6120      	str	r0, [r4, #16]
 800c586:	b15b      	cbz	r3, 800c5a0 <__smakebuf_r+0x74>
 800c588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c58c:	4630      	mov	r0, r6
 800c58e:	f000 f8c9 	bl	800c724 <_isatty_r>
 800c592:	b128      	cbz	r0, 800c5a0 <__smakebuf_r+0x74>
 800c594:	89a3      	ldrh	r3, [r4, #12]
 800c596:	f023 0303 	bic.w	r3, r3, #3
 800c59a:	f043 0301 	orr.w	r3, r3, #1
 800c59e:	81a3      	strh	r3, [r4, #12]
 800c5a0:	89a0      	ldrh	r0, [r4, #12]
 800c5a2:	4305      	orrs	r5, r0
 800c5a4:	81a5      	strh	r5, [r4, #12]
 800c5a6:	e7cd      	b.n	800c544 <__smakebuf_r+0x18>
 800c5a8:	0800c339 	.word	0x0800c339

0800c5ac <_raise_r>:
 800c5ac:	291f      	cmp	r1, #31
 800c5ae:	b538      	push	{r3, r4, r5, lr}
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	460d      	mov	r5, r1
 800c5b4:	d904      	bls.n	800c5c0 <_raise_r+0x14>
 800c5b6:	2316      	movs	r3, #22
 800c5b8:	6003      	str	r3, [r0, #0]
 800c5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c5be:	bd38      	pop	{r3, r4, r5, pc}
 800c5c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5c2:	b112      	cbz	r2, 800c5ca <_raise_r+0x1e>
 800c5c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5c8:	b94b      	cbnz	r3, 800c5de <_raise_r+0x32>
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f000 f830 	bl	800c630 <_getpid_r>
 800c5d0:	462a      	mov	r2, r5
 800c5d2:	4601      	mov	r1, r0
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5da:	f000 b817 	b.w	800c60c <_kill_r>
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d00a      	beq.n	800c5f8 <_raise_r+0x4c>
 800c5e2:	1c59      	adds	r1, r3, #1
 800c5e4:	d103      	bne.n	800c5ee <_raise_r+0x42>
 800c5e6:	2316      	movs	r3, #22
 800c5e8:	6003      	str	r3, [r0, #0]
 800c5ea:	2001      	movs	r0, #1
 800c5ec:	e7e7      	b.n	800c5be <_raise_r+0x12>
 800c5ee:	2400      	movs	r4, #0
 800c5f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	4798      	blx	r3
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	e7e0      	b.n	800c5be <_raise_r+0x12>

0800c5fc <raise>:
 800c5fc:	4b02      	ldr	r3, [pc, #8]	; (800c608 <raise+0xc>)
 800c5fe:	4601      	mov	r1, r0
 800c600:	6818      	ldr	r0, [r3, #0]
 800c602:	f7ff bfd3 	b.w	800c5ac <_raise_r>
 800c606:	bf00      	nop
 800c608:	2000001c 	.word	0x2000001c

0800c60c <_kill_r>:
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	4d07      	ldr	r5, [pc, #28]	; (800c62c <_kill_r+0x20>)
 800c610:	2300      	movs	r3, #0
 800c612:	4604      	mov	r4, r0
 800c614:	4608      	mov	r0, r1
 800c616:	4611      	mov	r1, r2
 800c618:	602b      	str	r3, [r5, #0]
 800c61a:	f7f6 f859 	bl	80026d0 <_kill>
 800c61e:	1c43      	adds	r3, r0, #1
 800c620:	d102      	bne.n	800c628 <_kill_r+0x1c>
 800c622:	682b      	ldr	r3, [r5, #0]
 800c624:	b103      	cbz	r3, 800c628 <_kill_r+0x1c>
 800c626:	6023      	str	r3, [r4, #0]
 800c628:	bd38      	pop	{r3, r4, r5, pc}
 800c62a:	bf00      	nop
 800c62c:	2000095c 	.word	0x2000095c

0800c630 <_getpid_r>:
 800c630:	f7f6 b846 	b.w	80026c0 <_getpid>

0800c634 <__sread>:
 800c634:	b510      	push	{r4, lr}
 800c636:	460c      	mov	r4, r1
 800c638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c63c:	f000 f894 	bl	800c768 <_read_r>
 800c640:	2800      	cmp	r0, #0
 800c642:	bfab      	itete	ge
 800c644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c646:	89a3      	ldrhlt	r3, [r4, #12]
 800c648:	181b      	addge	r3, r3, r0
 800c64a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c64e:	bfac      	ite	ge
 800c650:	6563      	strge	r3, [r4, #84]	; 0x54
 800c652:	81a3      	strhlt	r3, [r4, #12]
 800c654:	bd10      	pop	{r4, pc}

0800c656 <__swrite>:
 800c656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c65a:	461f      	mov	r7, r3
 800c65c:	898b      	ldrh	r3, [r1, #12]
 800c65e:	05db      	lsls	r3, r3, #23
 800c660:	4605      	mov	r5, r0
 800c662:	460c      	mov	r4, r1
 800c664:	4616      	mov	r6, r2
 800c666:	d505      	bpl.n	800c674 <__swrite+0x1e>
 800c668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c66c:	2302      	movs	r3, #2
 800c66e:	2200      	movs	r2, #0
 800c670:	f000 f868 	bl	800c744 <_lseek_r>
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c67a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c67e:	81a3      	strh	r3, [r4, #12]
 800c680:	4632      	mov	r2, r6
 800c682:	463b      	mov	r3, r7
 800c684:	4628      	mov	r0, r5
 800c686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c68a:	f000 b817 	b.w	800c6bc <_write_r>

0800c68e <__sseek>:
 800c68e:	b510      	push	{r4, lr}
 800c690:	460c      	mov	r4, r1
 800c692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c696:	f000 f855 	bl	800c744 <_lseek_r>
 800c69a:	1c43      	adds	r3, r0, #1
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	bf15      	itete	ne
 800c6a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c6a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c6a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c6aa:	81a3      	strheq	r3, [r4, #12]
 800c6ac:	bf18      	it	ne
 800c6ae:	81a3      	strhne	r3, [r4, #12]
 800c6b0:	bd10      	pop	{r4, pc}

0800c6b2 <__sclose>:
 800c6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6b6:	f000 b813 	b.w	800c6e0 <_close_r>
	...

0800c6bc <_write_r>:
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	4d07      	ldr	r5, [pc, #28]	; (800c6dc <_write_r+0x20>)
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	4608      	mov	r0, r1
 800c6c4:	4611      	mov	r1, r2
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	602a      	str	r2, [r5, #0]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	f7f6 f837 	bl	800273e <_write>
 800c6d0:	1c43      	adds	r3, r0, #1
 800c6d2:	d102      	bne.n	800c6da <_write_r+0x1e>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	b103      	cbz	r3, 800c6da <_write_r+0x1e>
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	bd38      	pop	{r3, r4, r5, pc}
 800c6dc:	2000095c 	.word	0x2000095c

0800c6e0 <_close_r>:
 800c6e0:	b538      	push	{r3, r4, r5, lr}
 800c6e2:	4d06      	ldr	r5, [pc, #24]	; (800c6fc <_close_r+0x1c>)
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	4608      	mov	r0, r1
 800c6ea:	602b      	str	r3, [r5, #0]
 800c6ec:	f7f6 f843 	bl	8002776 <_close>
 800c6f0:	1c43      	adds	r3, r0, #1
 800c6f2:	d102      	bne.n	800c6fa <_close_r+0x1a>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	b103      	cbz	r3, 800c6fa <_close_r+0x1a>
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
 800c6fc:	2000095c 	.word	0x2000095c

0800c700 <_fstat_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	4d07      	ldr	r5, [pc, #28]	; (800c720 <_fstat_r+0x20>)
 800c704:	2300      	movs	r3, #0
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	4611      	mov	r1, r2
 800c70c:	602b      	str	r3, [r5, #0]
 800c70e:	f7f6 f83e 	bl	800278e <_fstat>
 800c712:	1c43      	adds	r3, r0, #1
 800c714:	d102      	bne.n	800c71c <_fstat_r+0x1c>
 800c716:	682b      	ldr	r3, [r5, #0]
 800c718:	b103      	cbz	r3, 800c71c <_fstat_r+0x1c>
 800c71a:	6023      	str	r3, [r4, #0]
 800c71c:	bd38      	pop	{r3, r4, r5, pc}
 800c71e:	bf00      	nop
 800c720:	2000095c 	.word	0x2000095c

0800c724 <_isatty_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4d06      	ldr	r5, [pc, #24]	; (800c740 <_isatty_r+0x1c>)
 800c728:	2300      	movs	r3, #0
 800c72a:	4604      	mov	r4, r0
 800c72c:	4608      	mov	r0, r1
 800c72e:	602b      	str	r3, [r5, #0]
 800c730:	f7f6 f83d 	bl	80027ae <_isatty>
 800c734:	1c43      	adds	r3, r0, #1
 800c736:	d102      	bne.n	800c73e <_isatty_r+0x1a>
 800c738:	682b      	ldr	r3, [r5, #0]
 800c73a:	b103      	cbz	r3, 800c73e <_isatty_r+0x1a>
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	bd38      	pop	{r3, r4, r5, pc}
 800c740:	2000095c 	.word	0x2000095c

0800c744 <_lseek_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	4d07      	ldr	r5, [pc, #28]	; (800c764 <_lseek_r+0x20>)
 800c748:	4604      	mov	r4, r0
 800c74a:	4608      	mov	r0, r1
 800c74c:	4611      	mov	r1, r2
 800c74e:	2200      	movs	r2, #0
 800c750:	602a      	str	r2, [r5, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	f7f6 f836 	bl	80027c4 <_lseek>
 800c758:	1c43      	adds	r3, r0, #1
 800c75a:	d102      	bne.n	800c762 <_lseek_r+0x1e>
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	b103      	cbz	r3, 800c762 <_lseek_r+0x1e>
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	bd38      	pop	{r3, r4, r5, pc}
 800c764:	2000095c 	.word	0x2000095c

0800c768 <_read_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	4d07      	ldr	r5, [pc, #28]	; (800c788 <_read_r+0x20>)
 800c76c:	4604      	mov	r4, r0
 800c76e:	4608      	mov	r0, r1
 800c770:	4611      	mov	r1, r2
 800c772:	2200      	movs	r2, #0
 800c774:	602a      	str	r2, [r5, #0]
 800c776:	461a      	mov	r2, r3
 800c778:	f7f5 ffc4 	bl	8002704 <_read>
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	d102      	bne.n	800c786 <_read_r+0x1e>
 800c780:	682b      	ldr	r3, [r5, #0]
 800c782:	b103      	cbz	r3, 800c786 <_read_r+0x1e>
 800c784:	6023      	str	r3, [r4, #0]
 800c786:	bd38      	pop	{r3, r4, r5, pc}
 800c788:	2000095c 	.word	0x2000095c

0800c78c <round>:
 800c78c:	ec51 0b10 	vmov	r0, r1, d0
 800c790:	b570      	push	{r4, r5, r6, lr}
 800c792:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c796:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c79a:	2c13      	cmp	r4, #19
 800c79c:	ee10 2a10 	vmov	r2, s0
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	dc19      	bgt.n	800c7d8 <round+0x4c>
 800c7a4:	2c00      	cmp	r4, #0
 800c7a6:	da09      	bge.n	800c7bc <round+0x30>
 800c7a8:	3401      	adds	r4, #1
 800c7aa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c7ae:	d103      	bne.n	800c7b8 <round+0x2c>
 800c7b0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c7b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	e028      	b.n	800c80e <round+0x82>
 800c7bc:	4d15      	ldr	r5, [pc, #84]	; (800c814 <round+0x88>)
 800c7be:	4125      	asrs	r5, r4
 800c7c0:	ea01 0605 	and.w	r6, r1, r5
 800c7c4:	4332      	orrs	r2, r6
 800c7c6:	d00e      	beq.n	800c7e6 <round+0x5a>
 800c7c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c7cc:	fa42 f404 	asr.w	r4, r2, r4
 800c7d0:	4423      	add	r3, r4
 800c7d2:	ea23 0305 	bic.w	r3, r3, r5
 800c7d6:	e7ef      	b.n	800c7b8 <round+0x2c>
 800c7d8:	2c33      	cmp	r4, #51	; 0x33
 800c7da:	dd07      	ble.n	800c7ec <round+0x60>
 800c7dc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c7e0:	d101      	bne.n	800c7e6 <round+0x5a>
 800c7e2:	f7f3 fd73 	bl	80002cc <__adddf3>
 800c7e6:	ec41 0b10 	vmov	d0, r0, r1
 800c7ea:	bd70      	pop	{r4, r5, r6, pc}
 800c7ec:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c7f0:	f04f 35ff 	mov.w	r5, #4294967295
 800c7f4:	40f5      	lsrs	r5, r6
 800c7f6:	4228      	tst	r0, r5
 800c7f8:	d0f5      	beq.n	800c7e6 <round+0x5a>
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c800:	fa01 f404 	lsl.w	r4, r1, r4
 800c804:	1912      	adds	r2, r2, r4
 800c806:	bf28      	it	cs
 800c808:	185b      	addcs	r3, r3, r1
 800c80a:	ea22 0205 	bic.w	r2, r2, r5
 800c80e:	4619      	mov	r1, r3
 800c810:	4610      	mov	r0, r2
 800c812:	e7e8      	b.n	800c7e6 <round+0x5a>
 800c814:	000fffff 	.word	0x000fffff

0800c818 <_init>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	bf00      	nop
 800c81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81e:	bc08      	pop	{r3}
 800c820:	469e      	mov	lr, r3
 800c822:	4770      	bx	lr

0800c824 <_fini>:
 800c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c826:	bf00      	nop
 800c828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82a:	bc08      	pop	{r3}
 800c82c:	469e      	mov	lr, r3
 800c82e:	4770      	bx	lr
