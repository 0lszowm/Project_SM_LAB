
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca0  0800c990  0800c990  0001c990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d630  0800d630  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d630  0800d630  0001d630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d638  0800d638  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d638  0800d638  0001d638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d63c  0800d63c  0001d63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b4  200001f0  0800d830  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  0800d830  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3c5  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f2  00000000  00000000  0003a5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0003ded8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f14  00000000  00000000  00040728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8e0  00000000  00000000  0006963c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9795  00000000  00000000  00084f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e6b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b14  00000000  00000000  0017e704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c978 	.word	0x0800c978

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c978 	.word	0x0800c978

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b9aa 	b.w	8001008 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f83c 	bl	8000d38 <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_d2lz>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	f7ff ff21 	bl	8000b1c <__aeabi_dcmplt>
 8000cda:	b928      	cbnz	r0, 8000ce8 <__aeabi_d2lz+0x1c>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce4:	f000 b80a 	b.w	8000cfc <__aeabi_d2ulz>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cee:	f000 f805 	bl	8000cfc <__aeabi_d2ulz>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop

08000cfc <__aeabi_d2ulz>:
 8000cfc:	b5d0      	push	{r4, r6, r7, lr}
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__aeabi_d2ulz+0x34>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	4606      	mov	r6, r0
 8000d04:	460f      	mov	r7, r1
 8000d06:	f7ff fc97 	bl	8000638 <__aeabi_dmul>
 8000d0a:	f7ff ff57 	bl	8000bbc <__aeabi_d2uiz>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fc18 	bl	8000544 <__aeabi_ui2d>
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <__aeabi_d2ulz+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f7ff fc8e 	bl	8000638 <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f7ff fad0 	bl	80002c8 <__aeabi_dsub>
 8000d28:	f7ff ff48 	bl	8000bbc <__aeabi_d2uiz>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d30:	3df00000 	.word	0x3df00000
 8000d34:	41f00000 	.word	0x41f00000

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468e      	mov	lr, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d14d      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d46:	428a      	cmp	r2, r1
 8000d48:	4694      	mov	ip, r2
 8000d4a:	d969      	bls.n	8000e20 <__udivmoddi4+0xe8>
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	b152      	cbz	r2, 8000d68 <__udivmoddi4+0x30>
 8000d52:	fa01 f302 	lsl.w	r3, r1, r2
 8000d56:	f1c2 0120 	rsb	r1, r2, #32
 8000d5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d62:	ea41 0e03 	orr.w	lr, r1, r3
 8000d66:	4094      	lsls	r4, r2
 8000d68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d6c:	0c21      	lsrs	r1, r4, #16
 8000d6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d72:	fa1f f78c 	uxth.w	r7, ip
 8000d76:	fb08 e316 	mls	r3, r8, r6, lr
 8000d7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7e:	fb06 f107 	mul.w	r1, r6, r7
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8e:	f080 811f 	bcs.w	8000fd0 <__udivmoddi4+0x298>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 811c 	bls.w	8000fd0 <__udivmoddi4+0x298>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dac:	fb00 f707 	mul.w	r7, r0, r7
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x92>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	f080 810a 	bcs.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc0:	42a7      	cmp	r7, r4
 8000dc2:	f240 8107 	bls.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dce:	1be4      	subs	r4, r4, r7
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	b11d      	cbz	r5, 8000ddc <__udivmoddi4+0xa4>
 8000dd4:	40d4      	lsrs	r4, r2
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0xc2>
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	f000 80ef 	beq.w	8000fca <__udivmoddi4+0x292>
 8000dec:	2600      	movs	r6, #0
 8000dee:	e9c5 0100 	strd	r0, r1, [r5]
 8000df2:	4630      	mov	r0, r6
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	fab3 f683 	clz	r6, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d14a      	bne.n	8000e98 <__udivmoddi4+0x160>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xd4>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 80f9 	bhi.w	8000ffe <__udivmoddi4+0x2c6>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	469e      	mov	lr, r3
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e0      	beq.n	8000ddc <__udivmoddi4+0xa4>
 8000e1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1e:	e7dd      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000e20:	b902      	cbnz	r2, 8000e24 <__udivmoddi4+0xec>
 8000e22:	deff      	udf	#255	; 0xff
 8000e24:	fab2 f282 	clz	r2, r2
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	f040 8092 	bne.w	8000f52 <__udivmoddi4+0x21a>
 8000e2e:	eba1 010c 	sub.w	r1, r1, ip
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	2601      	movs	r6, #1
 8000e3c:	0c20      	lsrs	r0, r4, #16
 8000e3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e42:	fb07 1113 	mls	r1, r7, r3, r1
 8000e46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4a:	fb0e f003 	mul.w	r0, lr, r3
 8000e4e:	4288      	cmp	r0, r1
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x12c>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x12a>
 8000e5c:	4288      	cmp	r0, r1
 8000e5e:	f200 80cb 	bhi.w	8000ff8 <__udivmoddi4+0x2c0>
 8000e62:	4643      	mov	r3, r8
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e74:	fb0e fe00 	mul.w	lr, lr, r0
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x156>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e84:	d202      	bcs.n	8000e8c <__udivmoddi4+0x154>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f200 80bb 	bhi.w	8001002 <__udivmoddi4+0x2ca>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	eba4 040e 	sub.w	r4, r4, lr
 8000e92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e96:	e79c      	b.n	8000dd2 <__udivmoddi4+0x9a>
 8000e98:	f1c6 0720 	rsb	r7, r6, #32
 8000e9c:	40b3      	lsls	r3, r6
 8000e9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000eae:	431c      	orrs	r4, r3
 8000eb0:	40f9      	lsrs	r1, r7
 8000eb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ebe:	0c20      	lsrs	r0, r4, #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed6:	d90b      	bls.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee0:	f080 8088 	bcs.w	8000ff4 <__udivmoddi4+0x2bc>
 8000ee4:	4288      	cmp	r0, r1
 8000ee6:	f240 8085 	bls.w	8000ff4 <__udivmoddi4+0x2bc>
 8000eea:	f1a8 0802 	sub.w	r8, r8, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef8:	fb09 1110 	mls	r1, r9, r0, r1
 8000efc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f04:	458e      	cmp	lr, r1
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x1e2>
 8000f08:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f10:	d26c      	bcs.n	8000fec <__udivmoddi4+0x2b4>
 8000f12:	458e      	cmp	lr, r1
 8000f14:	d96a      	bls.n	8000fec <__udivmoddi4+0x2b4>
 8000f16:	3802      	subs	r0, #2
 8000f18:	4461      	add	r1, ip
 8000f1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f22:	eba1 010e 	sub.w	r1, r1, lr
 8000f26:	42a1      	cmp	r1, r4
 8000f28:	46c8      	mov	r8, r9
 8000f2a:	46a6      	mov	lr, r4
 8000f2c:	d356      	bcc.n	8000fdc <__udivmoddi4+0x2a4>
 8000f2e:	d053      	beq.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f30:	b15d      	cbz	r5, 8000f4a <__udivmoddi4+0x212>
 8000f32:	ebb3 0208 	subs.w	r2, r3, r8
 8000f36:	eb61 010e 	sbc.w	r1, r1, lr
 8000f3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f42:	40f1      	lsrs	r1, r6
 8000f44:	431f      	orrs	r7, r3
 8000f46:	e9c5 7100 	strd	r7, r1, [r5]
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	f1c2 0320 	rsb	r3, r2, #32
 8000f56:	40d8      	lsrs	r0, r3
 8000f58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f60:	4091      	lsls	r1, r2
 8000f62:	4301      	orrs	r1, r0
 8000f64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f68:	fa1f fe8c 	uxth.w	lr, ip
 8000f6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f70:	fb07 3610 	mls	r6, r7, r0, r3
 8000f74:	0c0b      	lsrs	r3, r1, #16
 8000f76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7e:	429e      	cmp	r6, r3
 8000f80:	fa04 f402 	lsl.w	r4, r4, r2
 8000f84:	d908      	bls.n	8000f98 <__udivmoddi4+0x260>
 8000f86:	eb1c 0303 	adds.w	r3, ip, r3
 8000f8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8e:	d22f      	bcs.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f90:	429e      	cmp	r6, r3
 8000f92:	d92d      	bls.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f94:	3802      	subs	r0, #2
 8000f96:	4463      	add	r3, ip
 8000f98:	1b9b      	subs	r3, r3, r6
 8000f9a:	b289      	uxth	r1, r1
 8000f9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fa0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fac:	428b      	cmp	r3, r1
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x28a>
 8000fb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb8:	d216      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	d914      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fbe:	3e02      	subs	r6, #2
 8000fc0:	4461      	add	r1, ip
 8000fc2:	1ac9      	subs	r1, r1, r3
 8000fc4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc8:	e738      	b.n	8000e3c <__udivmoddi4+0x104>
 8000fca:	462e      	mov	r6, r5
 8000fcc:	4628      	mov	r0, r5
 8000fce:	e705      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	e6e3      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	e6f8      	b.n	8000dca <__udivmoddi4+0x92>
 8000fd8:	454b      	cmp	r3, r9
 8000fda:	d2a9      	bcs.n	8000f30 <__udivmoddi4+0x1f8>
 8000fdc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	e7a3      	b.n	8000f30 <__udivmoddi4+0x1f8>
 8000fe8:	4646      	mov	r6, r8
 8000fea:	e7ea      	b.n	8000fc2 <__udivmoddi4+0x28a>
 8000fec:	4620      	mov	r0, r4
 8000fee:	e794      	b.n	8000f1a <__udivmoddi4+0x1e2>
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	e7d1      	b.n	8000f98 <__udivmoddi4+0x260>
 8000ff4:	46d0      	mov	r8, sl
 8000ff6:	e77b      	b.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ff8:	3b02      	subs	r3, #2
 8000ffa:	4461      	add	r1, ip
 8000ffc:	e732      	b.n	8000e64 <__udivmoddi4+0x12c>
 8000ffe:	4630      	mov	r0, r6
 8001000:	e709      	b.n	8000e16 <__udivmoddi4+0xde>
 8001002:	4464      	add	r4, ip
 8001004:	3802      	subs	r0, #2
 8001006:	e742      	b.n	8000e8e <__udivmoddi4+0x156>

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MCP9808_Init>:
 * write bit.
 *
 * @param hi2c A pointer to the I2C handler.
 * @param addr Address of MCP9808 on I2C bus (default 0x18).
 */
void MCP9808_Init(I2C_HandleTypeDef *hi2c, uint8_t addr) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
	mcp9808.hi2c = hi2c;
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <MCP9808_Init+0x30>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
	mcp9808.address = addr << 1;
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <MCP9808_Init+0x30>)
 8001026:	711a      	strb	r2, [r3, #4]
	mcp9808.resolution = MCP9808_VeryHigh_Res;
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <MCP9808_Init+0x30>)
 800102a:	2203      	movs	r2, #3
 800102c:	715a      	strb	r2, [r3, #5]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000020c 	.word	0x2000020c

08001040 <MCP9808_Write>:
 *
 * @param _reg Pointer to a register.
 * @param value The data on which to send.
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Write(MCP9808_REG_TypeDef *_reg, uint8_t *value) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	uint8_t reg[] = {*_reg, *value};
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	733b      	strb	r3, [r7, #12]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MCP9808_Write+0x40>)
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MCP9808_Write+0x40>)
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	b299      	uxth	r1, r3
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	f003 f8c2 	bl	80041f4 <HAL_I2C_Master_Transmit>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
			reg, sizeof(reg), HAL_MAX_DELAY);

	return res;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000020c 	.word	0x2000020c

08001084 <MCP9808_Read>:
 * @param _reg Pointer to a register.
 * @param buf A pointer to a buffer to store the response in.
 * @param buf_size The size of the buffer (n values).
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Read(MCP9808_REG_TypeDef *_reg, uint8_t *buf, uint8_t buf_size) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af02      	add	r7, sp, #8
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	71fb      	strb	r3, [r7, #7]

	uint8_t reg[1] = {*_reg};
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MCP9808_Read+0x70>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MCP9808_Read+0x70>)
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	f107 0214 	add.w	r2, r7, #20
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	f003 f8a1 	bl	80041f4 <HAL_I2C_Master_Transmit>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
			reg, sizeof(reg), HAL_MAX_DELAY);


	if(res != HAL_OK){
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MCP9808_Read+0x3c>
		return res;
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	e014      	b.n	80010ea <MCP9808_Read+0x66>
	}

	res = HAL_I2C_Master_Receive(mcp9808.hi2c, mcp9808.address, buf, buf_size, HAL_MAX_DELAY);
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MCP9808_Read+0x70>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MCP9808_Read+0x70>)
 80010c6:	791b      	ldrb	r3, [r3, #4]
 80010c8:	b299      	uxth	r1, r3
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	9200      	str	r2, [sp, #0]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	f003 f981 	bl	80043dc <HAL_I2C_Master_Receive>
 80010da:	4603      	mov	r3, r0
 80010dc:	75fb      	strb	r3, [r7, #23]

	if(res != HAL_OK){
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MCP9808_Read+0x64>
		return res;
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	e000      	b.n	80010ea <MCP9808_Read+0x66>
	}

	return res;
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000020c 	.word	0x2000020c

080010f8 <MCP9808_MeasureTemperature>:
 *
 * @param temperature A pointer to a temperature float to store a returned
 * value from.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_MeasureTemperature(float *temperature) {
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	MCP9808_REG_TypeDef reg = MCP9808_T_AMBIENT_REG;
 8001100:	2305      	movs	r3, #5
 8001102:	733b      	strb	r3, [r7, #12]
	uint8_t buf[2];
	HAL_StatusTypeDef res = MCP9808_Read(&reg, buf, sizeof(buf));
 8001104:	f107 0108 	add.w	r1, r7, #8
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2202      	movs	r2, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffb8 	bl	8001084 <MCP9808_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d162      	bne.n	80011e4 <MCP9808_MeasureTemperature+0xec>
		uint8_t upper = buf[0];
 800111e:	7a3b      	ldrb	r3, [r7, #8]
 8001120:	73bb      	strb	r3, [r7, #14]
		upper &= 0x1F;
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	73bb      	strb	r3, [r7, #14]
		uint8_t lower = buf[1];
 800112a:	7a7b      	ldrb	r3, [r7, #9]
 800112c:	737b      	strb	r3, [r7, #13]

		if((upper & 0x10) == 0x10) {
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b00      	cmp	r3, #0
 8001136:	d030      	beq.n	800119a <MCP9808_MeasureTemperature+0xa2>
			upper &= 0x0F;
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	73bb      	strb	r3, [r7, #14]
			*temperature = 256 - (upper * 16.0) + (lower / 16.0);
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa0e 	bl	8000564 <__aeabi_i2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 800114e:	f7ff fa73 	bl	8000638 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4926      	ldr	r1, [pc, #152]	; (80011f4 <MCP9808_MeasureTemperature+0xfc>)
 800115c:	f7ff f8b4 	bl	80002c8 <__aeabi_dsub>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9fa 	bl	8000564 <__aeabi_i2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 8001176:	f7ff fb89 	bl	800088c <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f8a3 	bl	80002cc <__adddf3>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fd35 	bl	8000bfc <__aeabi_d2f>
 8001192:	4602      	mov	r2, r0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e024      	b.n	80011e4 <MCP9808_MeasureTemperature+0xec>
		} else {
			*temperature = (upper * 16.0) + (lower / 16.0);
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9e1 	bl	8000564 <__aeabi_i2d>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 80011a8:	f7ff fa46 	bl	8000638 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4614      	mov	r4, r2
 80011b2:	461d      	mov	r5, r3
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9d4 	bl	8000564 <__aeabi_i2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 80011c2:	f7ff fb63 	bl	800088c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f87d 	bl	80002cc <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fd0f 	bl	8000bfc <__aeabi_d2f>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	601a      	str	r2, [r3, #0]
		}
	}

	return res;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bdb0      	pop	{r4, r5, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40300000 	.word	0x40300000
 80011f4:	40700000 	.word	0x40700000

080011f8 <MCP9808_SetResolution>:
 * VeryHigh = 0.0625 (slowest 250 ms)
 *
 * @param resolution Desired resolution to switch to.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_SetResolution(MCP9808_Resolution_TypeDef resolution) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]

	MCP9808_REG_TypeDef reg = MCP9808_RESOLUTION_REG;
 8001202:	2308      	movs	r3, #8
 8001204:	73bb      	strb	r3, [r7, #14]
	uint8_t value = resolution & 0x03;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef res = MCP9808_Write(&reg, &value);
 8001210:	f107 020d 	add.w	r2, r7, #13
 8001214:	f107 030e 	add.w	r3, r7, #14
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff10 	bl	8001040 <MCP9808_Write>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <MCP9808_SetResolution+0x38>
		mcp9808.resolution = resolution;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <MCP9808_SetResolution+0x44>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	7153      	strb	r3, [r2, #5]
	}

	return res;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000020c 	.word	0x2000020c

08001240 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af04      	add	r7, sp, #16
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	2301      	movs	r3, #1
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	2200      	movs	r2, #0
 800126c:	2178      	movs	r1, #120	; 0x78
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <ssd1306_WriteCommand+0x2c>)
 8001270:	f003 f9aa 	bl	80045c8 <HAL_I2C_Mem_Write>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000664 	.word	0x20000664

08001280 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af04      	add	r7, sp, #16
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	f04f 32ff 	mov.w	r2, #4294967295
 8001292:	9202      	str	r2, [sp, #8]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	2178      	movs	r1, #120	; 0x78
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <ssd1306_WriteData+0x30>)
 80012a2:	f003 f991 	bl	80045c8 <HAL_I2C_Mem_Write>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000664 	.word	0x20000664

080012b4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80012b8:	f7ff ffc2 	bl	8001240 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80012bc:	2064      	movs	r0, #100	; 0x64
 80012be:	f001 ff69 	bl	8003194 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f9da 	bl	800167c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80012c8:	2020      	movs	r0, #32
 80012ca:	f7ff ffc1 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ffbe 	bl	8001250 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012d4:	20b0      	movs	r0, #176	; 0xb0
 80012d6:	f7ff ffbb 	bl	8001250 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012da:	20c8      	movs	r0, #200	; 0xc8
 80012dc:	f7ff ffb8 	bl	8001250 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ffb5 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012e6:	2010      	movs	r0, #16
 80012e8:	f7ff ffb2 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012ec:	2040      	movs	r0, #64	; 0x40
 80012ee:	f7ff ffaf 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012f2:	20ff      	movs	r0, #255	; 0xff
 80012f4:	f000 f9ae 	bl	8001654 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012f8:	20a1      	movs	r0, #161	; 0xa1
 80012fa:	f7ff ffa9 	bl	8001250 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012fe:	20a6      	movs	r0, #166	; 0xa6
 8001300:	f7ff ffa6 	bl	8001250 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001304:	20a8      	movs	r0, #168	; 0xa8
 8001306:	f7ff ffa3 	bl	8001250 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800130a:	203f      	movs	r0, #63	; 0x3f
 800130c:	f7ff ffa0 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001310:	20a4      	movs	r0, #164	; 0xa4
 8001312:	f7ff ff9d 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001316:	20d3      	movs	r0, #211	; 0xd3
 8001318:	f7ff ff9a 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ff97 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001322:	20d5      	movs	r0, #213	; 0xd5
 8001324:	f7ff ff94 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001328:	20f0      	movs	r0, #240	; 0xf0
 800132a:	f7ff ff91 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800132e:	20d9      	movs	r0, #217	; 0xd9
 8001330:	f7ff ff8e 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001334:	2022      	movs	r0, #34	; 0x22
 8001336:	f7ff ff8b 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800133a:	20da      	movs	r0, #218	; 0xda
 800133c:	f7ff ff88 	bl	8001250 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001340:	2012      	movs	r0, #18
 8001342:	f7ff ff85 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001346:	20db      	movs	r0, #219	; 0xdb
 8001348:	f7ff ff82 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800134c:	2020      	movs	r0, #32
 800134e:	f7ff ff7f 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001352:	208d      	movs	r0, #141	; 0x8d
 8001354:	f7ff ff7c 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001358:	2014      	movs	r0, #20
 800135a:	f7ff ff79 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800135e:	2001      	movs	r0, #1
 8001360:	f000 f98c 	bl	800167c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f80f 	bl	8001388 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800136a:	f000 f831 	bl	80013d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <ssd1306_Init+0xd0>)
 8001370:	2200      	movs	r2, #0
 8001372:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <ssd1306_Init+0xd0>)
 8001376:	2200      	movs	r2, #0
 8001378:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800137a:	4b02      	ldr	r3, [pc, #8]	; (8001384 <ssd1306_Init+0xd0>)
 800137c:	2201      	movs	r2, #1
 800137e:	711a      	strb	r2, [r3, #4]
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000614 	.word	0x20000614

08001388 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e00d      	b.n	80013b4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <ssd1306_Fill+0x1a>
 800139e:	2100      	movs	r1, #0
 80013a0:	e000      	b.n	80013a4 <ssd1306_Fill+0x1c>
 80013a2:	21ff      	movs	r1, #255	; 0xff
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <ssd1306_Fill+0x44>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	460a      	mov	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d3ed      	bcc.n	8001398 <ssd1306_Fill+0x10>
    }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000214 	.word	0x20000214

080013d0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e016      	b.n	800140a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3b50      	subs	r3, #80	; 0x50
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff34 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff ff31 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013ee:	2010      	movs	r0, #16
 80013f0:	f7ff ff2e 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	01db      	lsls	r3, r3, #7
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <ssd1306_UpdateScreen+0x4c>)
 80013fa:	4413      	add	r3, r2
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff3e 	bl	8001280 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	3301      	adds	r3, #1
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b07      	cmp	r3, #7
 800140e:	d9e5      	bls.n	80013dc <ssd1306_UpdateScreen+0xc>
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000214 	.word	0x20000214

08001420 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	460b      	mov	r3, r1
 800142c:	71bb      	strb	r3, [r7, #6]
 800142e:	4613      	mov	r3, r2
 8001430:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db3d      	blt.n	80014b6 <ssd1306_DrawPixel+0x96>
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	2b3f      	cmp	r3, #63	; 0x3f
 800143e:	d83a      	bhi.n	80014b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001440:	797b      	ldrb	r3, [r7, #5]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11a      	bne.n	800147c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	4603      	mov	r3, r0
 8001450:	01db      	lsls	r3, r3, #7
 8001452:	4413      	add	r3, r2
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	b25a      	sxtb	r2, r3
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	b25b      	sxtb	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b259      	sxtb	r1, r3
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	4603      	mov	r3, r0
 8001470:	01db      	lsls	r3, r3, #7
 8001472:	4413      	add	r3, r2
 8001474:	b2c9      	uxtb	r1, r1
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 8001478:	54d1      	strb	r1, [r2, r3]
 800147a:	e01d      	b.n	80014b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	4603      	mov	r3, r0
 8001486:	01db      	lsls	r3, r3, #7
 8001488:	4413      	add	r3, r2
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	b25a      	sxtb	r2, r3
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	b25b      	sxtb	r3, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	b259      	sxtb	r1, r3
 80014a6:	79fa      	ldrb	r2, [r7, #7]
 80014a8:	4603      	mov	r3, r0
 80014aa:	01db      	lsls	r3, r3, #7
 80014ac:	4413      	add	r3, r2
 80014ae:	b2c9      	uxtb	r1, r1
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 80014b2:	54d1      	strb	r1, [r2, r3]
 80014b4:	e000      	b.n	80014b8 <ssd1306_DrawPixel+0x98>
        return;
 80014b6:	bf00      	nop
    }
}
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000214 	.word	0x20000214

080014c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4604      	mov	r4, r0
 80014d0:	1d38      	adds	r0, r7, #4
 80014d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80014d6:	461a      	mov	r2, r3
 80014d8:	4623      	mov	r3, r4
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	4613      	mov	r3, r2
 80014de:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b1f      	cmp	r3, #31
 80014e4:	d902      	bls.n	80014ec <ssd1306_WriteChar+0x24>
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b7e      	cmp	r3, #126	; 0x7e
 80014ea:	d901      	bls.n	80014f0 <ssd1306_WriteChar+0x28>
        return 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e06d      	b.n	80015cc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	793b      	ldrb	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	2b80      	cmp	r3, #128	; 0x80
 80014fc:	dc06      	bgt.n	800150c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001500:	885b      	ldrh	r3, [r3, #2]
 8001502:	461a      	mov	r2, r3
 8001504:	797b      	ldrb	r3, [r7, #5]
 8001506:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001508:	2b40      	cmp	r3, #64	; 0x40
 800150a:	dd01      	ble.n	8001510 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800150c:	2300      	movs	r3, #0
 800150e:	e05d      	b.n	80015cc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	e04c      	b.n	80015b0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3b20      	subs	r3, #32
 800151c:	7979      	ldrb	r1, [r7, #5]
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4619      	mov	r1, r3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	440b      	add	r3, r1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e034      	b.n	80015a0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d012      	beq.n	800156c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b2d8      	uxtb	r0, r3
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001556:	885b      	ldrh	r3, [r3, #2]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4413      	add	r3, r2
 8001560:	b2db      	uxtb	r3, r3
 8001562:	7bba      	ldrb	r2, [r7, #14]
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff ff5b 	bl	8001420 <ssd1306_DrawPixel>
 800156a:	e016      	b.n	800159a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b2d8      	uxtb	r0, r3
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b2d9      	uxtb	r1, r3
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	f7ff ff43 	bl	8001420 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	3301      	adds	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	793b      	ldrb	r3, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d3c5      	bcc.n	8001536 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	797b      	ldrb	r3, [r7, #5]
 80015b2:	461a      	mov	r2, r3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d3ad      	bcc.n	8001516 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80015c8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	20000614 	.word	0x20000614

080015d8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	1d38      	adds	r0, r7, #4
 80015e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80015e6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80015e8:	e012      	b.n	8001610 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	7818      	ldrb	r0, [r3, #0]
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	1d3a      	adds	r2, r7, #4
 80015f2:	ca06      	ldmia	r2, {r1, r2}
 80015f4:	f7ff ff68 	bl	80014c8 <ssd1306_WriteChar>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d002      	beq.n	800160a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	e008      	b.n	800161c <ssd1306_WriteString+0x44>
        }
        str++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e8      	bne.n	80015ea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	781b      	ldrb	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	460a      	mov	r2, r1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	4613      	mov	r3, r2
 8001632:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <ssd1306_SetCursor+0x2c>)
 800163a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <ssd1306_SetCursor+0x2c>)
 8001642:	805a      	strh	r2, [r3, #2]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000614 	.word	0x20000614

08001654 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800165e:	2381      	movs	r3, #129	; 0x81
 8001660:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fdf3 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fdef 	bl	8001250 <ssd1306_WriteCommand>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800168c:	23af      	movs	r3, #175	; 0xaf
 800168e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <ssd1306_SetDisplayOn+0x38>)
 8001692:	2201      	movs	r2, #1
 8001694:	715a      	strb	r2, [r3, #5]
 8001696:	e004      	b.n	80016a2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001698:	23ae      	movs	r3, #174	; 0xae
 800169a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <ssd1306_SetDisplayOn+0x38>)
 800169e:	2200      	movs	r2, #0
 80016a0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fdd3 	bl	8001250 <ssd1306_WriteCommand>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000614 	.word	0x20000614

080016b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_ADC1_Init+0x98>)
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_ADC1_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_ADC1_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_ADC1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f8:	4a17      	ldr	r2, [pc, #92]	; (8001758 <MX_ADC1_Init+0xa0>)
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_ADC1_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_ADC1_Init+0x98>)
 8001704:	2201      	movs	r2, #1
 8001706:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_ADC1_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_ADC1_Init+0x98>)
 8001712:	2201      	movs	r2, #1
 8001714:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <MX_ADC1_Init+0x98>)
 8001718:	f001 fd60 	bl	80031dc <HAL_ADC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001722:	f000 ff13 	bl	800254c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001726:	2303      	movs	r3, #3
 8001728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800172a:	2301      	movs	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_ADC1_Init+0x98>)
 8001738:	f001 fefa 	bl	8003530 <HAL_ADC_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001742:	f000 ff03 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000061c 	.word	0x2000061c
 8001754:	40012000 	.word	0x40012000
 8001758:	0f000001 	.word	0x0f000001

0800175c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <HAL_ADC_MspInit+0x74>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d123      	bne.n	80017c6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ae:	2308      	movs	r3, #8
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b2:	2303      	movs	r3, #3
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_ADC_MspInit+0x7c>)
 80017c2:	f002 faa9 	bl	8003d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40012000 	.word	0x40012000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	; 0x38
 80017e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <MX_GPIO_Init+0x268>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a93      	ldr	r2, [pc, #588]	; (8001a44 <MX_GPIO_Init+0x268>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800180a:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <MX_GPIO_Init+0x268>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a8d      	ldr	r2, [pc, #564]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a87      	ldr	r2, [pc, #540]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b85      	ldr	r3, [pc, #532]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b82      	ldr	r3, [pc, #520]	; (8001a44 <MX_GPIO_Init+0x268>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a81      	ldr	r2, [pc, #516]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b7f      	ldr	r3, [pc, #508]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a7b      	ldr	r2, [pc, #492]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b79      	ldr	r3, [pc, #484]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <MX_GPIO_Init+0x268>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001870:	f043 0310 	orr.w	r3, r3, #16
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	4b70      	ldr	r3, [pc, #448]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a6f      	ldr	r2, [pc, #444]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800189a:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <MX_GPIO_Init+0x268>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a69      	ldr	r2, [pc, #420]	; (8001a44 <MX_GPIO_Init+0x268>)
 80018a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <MX_GPIO_Init+0x268>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80018b8:	4863      	ldr	r0, [pc, #396]	; (8001a48 <MX_GPIO_Init+0x26c>)
 80018ba:	f002 fbf1 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2140      	movs	r1, #64	; 0x40
 80018c2:	4862      	ldr	r0, [pc, #392]	; (8001a4c <MX_GPIO_Init+0x270>)
 80018c4:	f002 fbec 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ce:	4860      	ldr	r0, [pc, #384]	; (8001a50 <MX_GPIO_Init+0x274>)
 80018d0:	f002 fbe6 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4859      	ldr	r0, [pc, #356]	; (8001a50 <MX_GPIO_Init+0x274>)
 80018ec:	f002 fa14 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018f0:	2332      	movs	r3, #50	; 0x32
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001900:	230b      	movs	r3, #11
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4851      	ldr	r0, [pc, #324]	; (8001a50 <MX_GPIO_Init+0x274>)
 800190c:	f002 fa04 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001910:	2386      	movs	r3, #134	; 0x86
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001920:	230b      	movs	r3, #11
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	4619      	mov	r1, r3
 800192a:	484a      	ldr	r0, [pc, #296]	; (8001a54 <MX_GPIO_Init+0x278>)
 800192c:	f002 f9f4 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001930:	f244 0381 	movw	r3, #16513	; 0x4081
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	483f      	ldr	r0, [pc, #252]	; (8001a48 <MX_GPIO_Init+0x26c>)
 800194a:	f002 f9e5 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800194e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001960:	230b      	movs	r3, #11
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	4837      	ldr	r0, [pc, #220]	; (8001a48 <MX_GPIO_Init+0x26c>)
 800196c:	f002 f9d4 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001970:	2340      	movs	r3, #64	; 0x40
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4831      	ldr	r0, [pc, #196]	; (8001a4c <MX_GPIO_Init+0x270>)
 8001988:	f002 f9c6 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	4619      	mov	r1, r3
 800199e:	482b      	ldr	r0, [pc, #172]	; (8001a4c <MX_GPIO_Init+0x270>)
 80019a0:	f002 f9ba 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = przycisk1_Pin|przycisk0_Pin;
 80019a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	4825      	ldr	r0, [pc, #148]	; (8001a50 <MX_GPIO_Init+0x274>)
 80019ba:	f002 f9ad 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019d0:	230a      	movs	r3, #10
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <MX_GPIO_Init+0x278>)
 80019dc:	f002 f99c 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	4817      	ldr	r0, [pc, #92]	; (8001a54 <MX_GPIO_Init+0x278>)
 80019f6:	f002 f98f 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = wentylator_Pin;
 80019fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(wentylator_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	4619      	mov	r1, r3
 8001a12:	480f      	ldr	r0, [pc, #60]	; (8001a50 <MX_GPIO_Init+0x274>)
 8001a14:	f002 f980 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a2a:	230b      	movs	r3, #11
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_GPIO_Init+0x270>)
 8001a36:	f002 f96f 	bl	8003d18 <HAL_GPIO_Init>

}
 8001a3a:	bf00      	nop
 8001a3c:	3738      	adds	r7, #56	; 0x38
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020000 	.word	0x40020000

08001a58 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <MX_I2C2_Init+0x78>)
 8001a60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00501FE4;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <MX_I2C2_Init+0x7c>)
 8001a66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a92:	480e      	ldr	r0, [pc, #56]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a94:	f002 fb1e 	bl	80040d4 <HAL_I2C_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a9e:	f000 fd55 	bl	800254c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <MX_I2C2_Init+0x74>)
 8001aa6:	f003 f963 	bl	8004d70 <HAL_I2CEx_ConfigAnalogFilter>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ab0:	f000 fd4c 	bl	800254c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_I2C2_Init+0x74>)
 8001ab8:	f003 f9a5 	bl	8004e06 <HAL_I2CEx_ConfigDigitalFilter>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ac2:	f000 fd43 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000664 	.word	0x20000664
 8001ad0:	40005800 	.word	0x40005800
 8001ad4:	00501fe4 	.word	0x00501fe4

08001ad8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <MX_I2C4_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <MX_I2C4_Init+0x7c>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001b12:	480e      	ldr	r0, [pc, #56]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b14:	f002 fade 	bl	80040d4 <HAL_I2C_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001b1e:	f000 fd15 	bl	800254c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b26:	f003 f923 	bl	8004d70 <HAL_I2CEx_ConfigAnalogFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001b30:	f000 fd0c 	bl	800254c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001b34:	2100      	movs	r1, #0
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b38:	f003 f965 	bl	8004e06 <HAL_I2CEx_ConfigDigitalFilter>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f000 fd03 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200006b8 	.word	0x200006b8
 8001b50:	40006000 	.word	0x40006000
 8001b54:	20404768 	.word	0x20404768

08001b58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0ac      	sub	sp, #176	; 0xb0
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	2284      	movs	r2, #132	; 0x84
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f007 f817 	bl	8008bac <memset>
  if(i2cHandle->Instance==I2C2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a44      	ldr	r2, [pc, #272]	; (8001c94 <HAL_I2C_MspInit+0x13c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d13d      	bne.n	8001c04 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 feab 	bl	80058f4 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001ba4:	f000 fcd2 	bl	800254c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a3a      	ldr	r2, [pc, #232]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bae:	f043 0320 	orr.w	r3, r3, #32
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc6:	2312      	movs	r3, #18
 8001bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001be2:	4619      	mov	r1, r3
 8001be4:	482d      	ldr	r0, [pc, #180]	; (8001c9c <HAL_I2C_MspInit+0x144>)
 8001be6:	f002 f897 	bl	8003d18 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bea:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001c02:	e042      	b.n	8001c8a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <HAL_I2C_MspInit+0x148>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d13d      	bne.n	8001c8a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 fe68 	bl	80058f4 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001c2a:	f000 fc8f 	bl	800254c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001c60:	2304      	movs	r3, #4
 8001c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <HAL_I2C_MspInit+0x144>)
 8001c6e:	f002 f853 	bl	8003d18 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
}
 8001c8a:	bf00      	nop
 8001c8c:	37b0      	adds	r7, #176	; 0xb0
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40005800 	.word	0x40005800
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40021400 	.word	0x40021400
 8001ca0:	40006000 	.word	0x40006000

08001ca4 <grzanie_on_off>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

bool grzanie_on_off() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(przycisk0_GPIO_Port, przycisk0_Pin) == GPIO_PIN_SET){
 8001ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <grzanie_on_off+0x20>)
 8001cae:	f002 f9df 	bl	8004070 <HAL_GPIO_ReadPin>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <grzanie_on_off+0x18>
		return true;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <grzanie_on_off+0x1a>
	}
	else{
		return false;
 8001cbc:	2300      	movs	r3, #0
	}
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020800 	.word	0x40020800

08001cc8 <auto_manual_on_off>:

bool auto_manual_on_off() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(przycisk1_GPIO_Port, przycisk1_Pin) == GPIO_PIN_SET){
 8001ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <auto_manual_on_off+0x20>)
 8001cd2:	f002 f9cd 	bl	8004070 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <auto_manual_on_off+0x18>
		return true;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <auto_manual_on_off+0x1a>
	}
	else{
		return false;
 8001ce0:	2300      	movs	r3, #0
	}
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40020800 	.word	0x40020800

08001cec <HAL_UART_RxCpltCallback>:

// Z tym gównem też chyba jest coś nie tak
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart3, received_data, 3); // Tu włącza sie to gowno znowu :)
	if(auto_manual_on_off()){
 8001cf4:	f7ff ffe8 	bl	8001cc8 <auto_manual_on_off>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d02d      	beq.n	8001d5a <HAL_UART_RxCpltCallback+0x6e>
		if(atof(received_data)>50){
 8001cfe:	4819      	ldr	r0, [pc, #100]	; (8001d64 <HAL_UART_RxCpltCallback+0x78>)
 8001d00:	f006 fef4 	bl	8008aec <atof>
 8001d04:	ec51 0b10 	vmov	r0, r1, d0
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_UART_RxCpltCallback+0x7c>)
 8001d0e:	f7fe ff23 	bl	8000b58 <__aeabi_dcmpgt>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_UART_RxCpltCallback+0x34>
			zadana_temperatura = 50;
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_UART_RxCpltCallback+0x80>)
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <HAL_UART_RxCpltCallback+0x84>)
 8001d1c:	601a      	str	r2, [r3, #0]
		}
		else{
			zadana_temperatura = atof(received_data);
		}
	}
}
 8001d1e:	e01c      	b.n	8001d5a <HAL_UART_RxCpltCallback+0x6e>
		else if(atof(received_data)<20){
 8001d20:	4810      	ldr	r0, [pc, #64]	; (8001d64 <HAL_UART_RxCpltCallback+0x78>)
 8001d22:	f006 fee3 	bl	8008aec <atof>
 8001d26:	ec51 0b10 	vmov	r0, r1, d0
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_UART_RxCpltCallback+0x88>)
 8001d30:	f7fe fef4 	bl	8000b1c <__aeabi_dcmplt>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_UART_RxCpltCallback+0x56>
			zadana_temperatura = 20;
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_UART_RxCpltCallback+0x80>)
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_UART_RxCpltCallback+0x8c>)
 8001d3e:	601a      	str	r2, [r3, #0]
}
 8001d40:	e00b      	b.n	8001d5a <HAL_UART_RxCpltCallback+0x6e>
			zadana_temperatura = atof(received_data);
 8001d42:	4808      	ldr	r0, [pc, #32]	; (8001d64 <HAL_UART_RxCpltCallback+0x78>)
 8001d44:	f006 fed2 	bl	8008aec <atof>
 8001d48:	ec53 2b10 	vmov	r2, r3, d0
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f7fe ff54 	bl	8000bfc <__aeabi_d2f>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <HAL_UART_RxCpltCallback+0x80>)
 8001d58:	6013      	str	r3, [r2, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000070c 	.word	0x2000070c
 8001d68:	40490000 	.word	0x40490000
 8001d6c:	2000071c 	.word	0x2000071c
 8001d70:	42480000 	.word	0x42480000
 8001d74:	40340000 	.word	0x40340000
 8001d78:	41a00000 	.word	0x41a00000

08001d7c <zadajnik>:

float zadajnik() {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001d82:	4813      	ldr	r0, [pc, #76]	; (8001dd0 <zadajnik+0x54>)
 8001d84:	f001 fa6e 	bl	8003264 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	4810      	ldr	r0, [pc, #64]	; (8001dd0 <zadajnik+0x54>)
 8001d8e:	f001 fb37 	bl	8003400 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8001d92:	480f      	ldr	r0, [pc, #60]	; (8001dd0 <zadajnik+0x54>)
 8001d94:	f001 fbbf 	bl	8003516 <HAL_ADC_GetValue>
 8001d98:	6078      	str	r0, [r7, #4]
	float ser = (1.0f * value /4095.0f)*30+20;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da4:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001dd4 <zadajnik+0x58>
 8001da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dac:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001db8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dbc:	edc7 7a00 	vstr	s15, [r7]
	return ser;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	ee07 3a90 	vmov	s15, r3
}
 8001dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000061c 	.word	0x2000061c
 8001dd4:	457ff000 	.word	0x457ff000

08001dd8 <wentyl>:

void wentyl(){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
	float blad = zadana_temperatura - akutalna_temperatura;
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <wentyl+0x68>)
 8001de0:	ed93 7a00 	vldr	s14, [r3]
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <wentyl+0x6c>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dee:	edc7 7a01 	vstr	s15, [r7, #4]
	float hist = -0.5;
 8001df2:	f04f 433f 	mov.w	r3, #3204448256	; 0xbf000000
 8001df6:	603b      	str	r3, [r7, #0]
	if (blad<=hist){
 8001df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dfc:	edd7 7a00 	vldr	s15, [r7]
 8001e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	d805      	bhi.n	8001e16 <wentyl+0x3e>
		HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_SET);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e10:	480d      	ldr	r0, [pc, #52]	; (8001e48 <wentyl+0x70>)
 8001e12:	f002 f945 	bl	80040a0 <HAL_GPIO_WritePin>
	}
	if (blad>-0.125){
 8001e16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1a:	eebc 7a00 	vmov.f32	s14, #192	; 0xbe000000 -0.125
 8001e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	dc00      	bgt.n	8001e2a <wentyl+0x52>
		HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
	}
}
 8001e28:	e005      	b.n	8001e36 <wentyl+0x5e>
		HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e30:	4805      	ldr	r0, [pc, #20]	; (8001e48 <wentyl+0x70>)
 8001e32:	f002 f935 	bl	80040a0 <HAL_GPIO_WritePin>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000071c 	.word	0x2000071c
 8001e44:	20000710 	.word	0x20000710
 8001e48:	40020800 	.word	0x40020800

08001e4c <change_current_duty_cycle>:

// Jakbym miał powiedzieć gdzie sie wypierdoli ten kod to wlasnie tutaj
void change_current_duty_cycle(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t current_duty_cycle)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	4613      	mov	r3, r2
 8001e58:	80fb      	strh	r3, [r7, #6]
    // calculate the new pulse value
    uint32_t pulse = ((htim->Init.Period+1) * current_duty_cycle) / 1000;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	88fa      	ldrh	r2, [r7, #6]
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <change_current_duty_cycle+0x88>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	099b      	lsrs	r3, r3, #6
 8001e6e:	617b      	str	r3, [r7, #20]
    // update the capture/compare register
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d104      	bne.n	8001e80 <change_current_duty_cycle+0x34>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e7e:	e023      	b.n	8001ec8 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d104      	bne.n	8001e90 <change_current_duty_cycle+0x44>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e8e:	e01b      	b.n	8001ec8 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d104      	bne.n	8001ea0 <change_current_duty_cycle+0x54>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001e9e:	e013      	b.n	8001ec8 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d104      	bne.n	8001eb0 <change_current_duty_cycle+0x64>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001eae:	e00b      	b.n	8001ec8 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d104      	bne.n	8001ec0 <change_current_duty_cycle+0x74>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001ebe:	e003      	b.n	8001ec8 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001ec8:	bf00      	nop
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	10624dd3 	.word	0x10624dd3

08001ed8 <wyswietlacz>:

void wyswietlacz(){
 8001ed8:	b5b0      	push	{r4, r5, r7, lr}
 8001eda:	b0a2      	sub	sp, #136	; 0x88
 8001edc:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff fa52 	bl	8001388 <ssd1306_Fill>
	uint8_t y = 0; // ktora linia wyswietlacza
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char temp_buf[6];
	gcvt(akutalna_temperatura, 6, temp_buf);
 8001eea:	4ba8      	ldr	r3, [pc, #672]	; (800218c <wyswietlacz+0x2b4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fb4a 	bl	8000588 <__aeabi_f2d>
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	460d      	mov	r5, r1
 8001ef8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001efc:	4619      	mov	r1, r3
 8001efe:	2006      	movs	r0, #6
 8001f00:	ec45 4b10 	vmov	d0, r4, r5
 8001f04:	f006 fdf6 	bl	8008af4 <gcvt>
	ssd1306_SetCursor(2, y);
 8001f08:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	2002      	movs	r0, #2
 8001f10:	f7ff fb88 	bl	8001624 <ssd1306_SetCursor>
	char buf0[20] = "Temperatura:";
 8001f14:	4b9e      	ldr	r3, [pc, #632]	; (8002190 <wyswietlacz+0x2b8>)
 8001f16:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001f1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f1c:	c407      	stmia	r4!, {r0, r1, r2}
 8001f1e:	7023      	strb	r3, [r4, #0]
 8001f20:	f107 0371 	add.w	r3, r7, #113	; 0x71
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f8c3 2003 	str.w	r2, [r3, #3]
	ssd1306_WriteString(strcat(buf0, temp_buf), Font_7x10, White);
 8001f2c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001f30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f006 fe40 	bl	8008bbc <strcat>
 8001f3c:	4a95      	ldr	r2, [pc, #596]	; (8002194 <wyswietlacz+0x2bc>)
 8001f3e:	2301      	movs	r3, #1
 8001f40:	ca06      	ldmia	r2, {r1, r2}
 8001f42:	f7ff fb49 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001f46:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001f4a:	330a      	adds	r3, #10
 8001f4c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char set_buf[6];
	gcvt(zadana_temperatura, 4, set_buf);
 8001f50:	4b91      	ldr	r3, [pc, #580]	; (8002198 <wyswietlacz+0x2c0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fb17 	bl	8000588 <__aeabi_f2d>
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	460d      	mov	r5, r1
 8001f5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f62:	4619      	mov	r1, r3
 8001f64:	2004      	movs	r0, #4
 8001f66:	ec45 4b10 	vmov	d0, r4, r5
 8001f6a:	f006 fdc3 	bl	8008af4 <gcvt>
	ssd1306_SetCursor(2, y);
 8001f6e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001f72:	4619      	mov	r1, r3
 8001f74:	2002      	movs	r0, #2
 8001f76:	f7ff fb55 	bl	8001624 <ssd1306_SetCursor>
	char buf1[20] = "Nastawa:";
 8001f7a:	4a88      	ldr	r2, [pc, #544]	; (800219c <wyswietlacz+0x2c4>)
 8001f7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f80:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f82:	c303      	stmia	r3!, {r0, r1}
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	f107 0351 	add.w	r3, r7, #81	; 0x51
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	f8c3 2007 	str.w	r2, [r3, #7]
	ssd1306_WriteString(strcat(buf1, set_buf), Font_7x10, White);
 8001f94:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f006 fe0c 	bl	8008bbc <strcat>
 8001fa4:	4a7b      	ldr	r2, [pc, #492]	; (8002194 <wyswietlacz+0x2bc>)
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	ca06      	ldmia	r2, {r1, r2}
 8001faa:	f7ff fb15 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001fae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001fb2:	330a      	adds	r3, #10
 8001fb4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	float duty_cl = sterowanie/10.0f;
 8001fb8:	4b79      	ldr	r3, [pc, #484]	; (80021a0 <wyswietlacz+0x2c8>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fcc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	char duty_buf[6];
	gcvt(duty_cl, 3, duty_buf);
 8001fd0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001fd4:	f7fe fad8 	bl	8000588 <__aeabi_f2d>
 8001fd8:	4604      	mov	r4, r0
 8001fda:	460d      	mov	r5, r1
 8001fdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	2003      	movs	r0, #3
 8001fe4:	ec45 4b10 	vmov	d0, r4, r5
 8001fe8:	f006 fd84 	bl	8008af4 <gcvt>
	ssd1306_SetCursor(2, y);
 8001fec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f7ff fb16 	bl	8001624 <ssd1306_SetCursor>
	char buf2[20] = "PWM: ";
 8001ff8:	4a6a      	ldr	r2, [pc, #424]	; (80021a4 <wyswietlacz+0x2cc>)
 8001ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ffe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002002:	6018      	str	r0, [r3, #0]
 8002004:	3304      	adds	r3, #4
 8002006:	8019      	strh	r1, [r3, #0]
 8002008:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	819a      	strh	r2, [r3, #12]
	strcat(buf2, duty_buf);
 8002016:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800201a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f006 fdcb 	bl	8008bbc <strcat>
	ssd1306_WriteString(strcat(buf2, "%"), Font_7x10, White);
 8002026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe f8f0 	bl	8000210 <strlen>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002038:	4413      	add	r3, r2
 800203a:	495b      	ldr	r1, [pc, #364]	; (80021a8 <wyswietlacz+0x2d0>)
 800203c:	461a      	mov	r2, r3
 800203e:	460b      	mov	r3, r1
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	8013      	strh	r3, [r2, #0]
 8002044:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002048:	4a52      	ldr	r2, [pc, #328]	; (8002194 <wyswietlacz+0x2bc>)
 800204a:	2301      	movs	r3, #1
 800204c:	ca06      	ldmia	r2, {r1, r2}
 800204e:	f7ff fac3 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8002052:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002056:	330a      	adds	r3, #10
 8002058:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	ssd1306_SetCursor(2, y);
 800205c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002060:	4619      	mov	r1, r3
 8002062:	2002      	movs	r0, #2
 8002064:	f7ff fade 	bl	8001624 <ssd1306_SetCursor>
	char buf3[20] = "Dziala: ";
 8002068:	4a50      	ldr	r2, [pc, #320]	; (80021ac <wyswietlacz+0x2d4>)
 800206a:	f107 0318 	add.w	r3, r7, #24
 800206e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002070:	c303      	stmia	r3!, {r0, r1}
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	f8c3 2007 	str.w	r2, [r3, #7]
	if(grzanie_on_off()){
 8002082:	f7ff fe0f 	bl	8001ca4 <grzanie_on_off>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d014      	beq.n	80020b6 <wyswietlacz+0x1de>
		ssd1306_WriteString(strcat(buf3, "TAK"), Font_7x10, White);
 800208c:	f107 0318 	add.w	r3, r7, #24
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe f8bd 	bl	8000210 <strlen>
 8002096:	4603      	mov	r3, r0
 8002098:	461a      	mov	r2, r3
 800209a:	f107 0318 	add.w	r3, r7, #24
 800209e:	4413      	add	r3, r2
 80020a0:	4a43      	ldr	r2, [pc, #268]	; (80021b0 <wyswietlacz+0x2d8>)
 80020a2:	6810      	ldr	r0, [r2, #0]
 80020a4:	6018      	str	r0, [r3, #0]
 80020a6:	f107 0018 	add.w	r0, r7, #24
 80020aa:	4a3a      	ldr	r2, [pc, #232]	; (8002194 <wyswietlacz+0x2bc>)
 80020ac:	2301      	movs	r3, #1
 80020ae:	ca06      	ldmia	r2, {r1, r2}
 80020b0:	f7ff fa92 	bl	80015d8 <ssd1306_WriteString>
 80020b4:	e013      	b.n	80020de <wyswietlacz+0x206>
	}
	else{
		ssd1306_WriteString(strcat(buf3, "NIE"), Font_7x10, White);
 80020b6:	f107 0318 	add.w	r3, r7, #24
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe f8a8 	bl	8000210 <strlen>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	4413      	add	r3, r2
 80020ca:	4a3a      	ldr	r2, [pc, #232]	; (80021b4 <wyswietlacz+0x2dc>)
 80020cc:	6810      	ldr	r0, [r2, #0]
 80020ce:	6018      	str	r0, [r3, #0]
 80020d0:	f107 0018 	add.w	r0, r7, #24
 80020d4:	4a2f      	ldr	r2, [pc, #188]	; (8002194 <wyswietlacz+0x2bc>)
 80020d6:	2301      	movs	r3, #1
 80020d8:	ca06      	ldmia	r2, {r1, r2}
 80020da:	f7ff fa7d 	bl	80015d8 <ssd1306_WriteString>
	}
	y += 10;
 80020de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80020e2:	330a      	adds	r3, #10
 80020e4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	ssd1306_SetCursor(2, y);
 80020e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80020ec:	4619      	mov	r1, r3
 80020ee:	2002      	movs	r0, #2
 80020f0:	f7ff fa98 	bl	8001624 <ssd1306_SetCursor>
		char buf6[20] = "Tryb: ";
 80020f4:	4a30      	ldr	r2, [pc, #192]	; (80021b8 <wyswietlacz+0x2e0>)
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020fc:	6018      	str	r0, [r3, #0]
 80020fe:	3304      	adds	r3, #4
 8002100:	8019      	strh	r1, [r3, #0]
 8002102:	3302      	adds	r3, #2
 8002104:	0c0a      	lsrs	r2, r1, #16
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	f107 030b 	add.w	r3, r7, #11
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	731a      	strb	r2, [r3, #12]
		if(auto_manual_on_off()){
 8002116:	f7ff fdd7 	bl	8001cc8 <auto_manual_on_off>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d014      	beq.n	800214a <wyswietlacz+0x272>
			ssd1306_WriteString(strcat(buf6, "AUTOMAT"), Font_7x10, White);
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe f874 	bl	8000210 <strlen>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	4413      	add	r3, r2
 8002130:	4922      	ldr	r1, [pc, #136]	; (80021bc <wyswietlacz+0x2e4>)
 8002132:	461a      	mov	r2, r3
 8002134:	460b      	mov	r3, r1
 8002136:	cb03      	ldmia	r3!, {r0, r1}
 8002138:	6010      	str	r0, [r2, #0]
 800213a:	6051      	str	r1, [r2, #4]
 800213c:	1d38      	adds	r0, r7, #4
 800213e:	4a15      	ldr	r2, [pc, #84]	; (8002194 <wyswietlacz+0x2bc>)
 8002140:	2301      	movs	r3, #1
 8002142:	ca06      	ldmia	r2, {r1, r2}
 8002144:	f7ff fa48 	bl	80015d8 <ssd1306_WriteString>
 8002148:	e014      	b.n	8002174 <wyswietlacz+0x29c>
		}
		else{
			ssd1306_WriteString(strcat(buf6, "MANUAL"), Font_7x10, White);
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe f85f 	bl	8000210 <strlen>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	4413      	add	r3, r2
 800215a:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <wyswietlacz+0x2e8>)
 800215c:	6810      	ldr	r0, [r2, #0]
 800215e:	6018      	str	r0, [r3, #0]
 8002160:	8891      	ldrh	r1, [r2, #4]
 8002162:	7992      	ldrb	r2, [r2, #6]
 8002164:	8099      	strh	r1, [r3, #4]
 8002166:	719a      	strb	r2, [r3, #6]
 8002168:	1d38      	adds	r0, r7, #4
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <wyswietlacz+0x2bc>)
 800216c:	2301      	movs	r3, #1
 800216e:	ca06      	ldmia	r2, {r1, r2}
 8002170:	f7ff fa32 	bl	80015d8 <ssd1306_WriteString>
		}
		y += 10;
 8002174:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002178:	330a      	adds	r3, #10
 800217a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87


	ssd1306_UpdateScreen();
 800217e:	f7ff f927 	bl	80013d0 <ssd1306_UpdateScreen>
}
 8002182:	bf00      	nop
 8002184:	3788      	adds	r7, #136	; 0x88
 8002186:	46bd      	mov	sp, r7
 8002188:	bdb0      	pop	{r4, r5, r7, pc}
 800218a:	bf00      	nop
 800218c:	20000710 	.word	0x20000710
 8002190:	0800c9ac 	.word	0x0800c9ac
 8002194:	20000000 	.word	0x20000000
 8002198:	2000071c 	.word	0x2000071c
 800219c:	0800c9c0 	.word	0x0800c9c0
 80021a0:	2000071a 	.word	0x2000071a
 80021a4:	0800c9d4 	.word	0x0800c9d4
 80021a8:	0800c990 	.word	0x0800c990
 80021ac:	0800c9e8 	.word	0x0800c9e8
 80021b0:	0800c994 	.word	0x0800c994
 80021b4:	0800c998 	.word	0x0800c998
 80021b8:	0800c9fc 	.word	0x0800c9fc
 80021bc:	0800c99c 	.word	0x0800c99c
 80021c0:	0800c9a4 	.word	0x0800c9a4

080021c4 <transmit_data>:

void transmit_data(float current_temp, float set_temp){
 80021c4:	b5b0      	push	{r4, r5, r7, lr}
 80021c6:	b09c      	sub	sp, #112	; 0x70
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80021ce:	edc7 0a00 	vstr	s1, [r7]
    char data_buf[100];
    gcvt(current_temp, 6, data_buf); // convertuje float na string
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe f9d8 	bl	8000588 <__aeabi_f2d>
 80021d8:	4604      	mov	r4, r0
 80021da:	460d      	mov	r5, r1
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	4619      	mov	r1, r3
 80021e2:	2006      	movs	r0, #6
 80021e4:	ec45 4b10 	vmov	d0, r4, r5
 80021e8:	f006 fc84 	bl	8008af4 <gcvt>
    strcat(data_buf, ";"); // dodaje srednik
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f80d 	bl	8000210 <strlen>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	f107 030c 	add.w	r3, r7, #12
 80021fe:	4413      	add	r3, r2
 8002200:	491f      	ldr	r1, [pc, #124]	; (8002280 <transmit_data+0xbc>)
 8002202:	461a      	mov	r2, r3
 8002204:	460b      	mov	r3, r1
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	8013      	strh	r3, [r2, #0]
    //gcvt(set_temp, 6, data_buf+strlen(data_buf)); // dodaje set_temp do stringa
    gcvt(sterowanie/1.0f, 6, data_buf+strlen(data_buf));
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <transmit_data+0xc0>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002216:	ee17 0a90 	vmov	r0, s15
 800221a:	f7fe f9b5 	bl	8000588 <__aeabi_f2d>
 800221e:	4604      	mov	r4, r0
 8002220:	460d      	mov	r5, r1
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4618      	mov	r0, r3
 8002228:	f7fd fff2 	bl	8000210 <strlen>
 800222c:	4602      	mov	r2, r0
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	4413      	add	r3, r2
 8002234:	4619      	mov	r1, r3
 8002236:	2006      	movs	r0, #6
 8002238:	ec45 4b10 	vmov	d0, r4, r5
 800223c:	f006 fc5a 	bl	8008af4 <gcvt>
    strcat(data_buf, "\r\n");
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	4618      	mov	r0, r3
 8002246:	f7fd ffe3 	bl	8000210 <strlen>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	4413      	add	r3, r2
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <transmit_data+0xc4>)
 8002256:	8811      	ldrh	r1, [r2, #0]
 8002258:	7892      	ldrb	r2, [r2, #2]
 800225a:	8019      	strh	r1, [r3, #0]
 800225c:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart3, data_buf, strlen(data_buf), 100);
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	4618      	mov	r0, r3
 8002264:	f7fd ffd4 	bl	8000210 <strlen>
 8002268:	4603      	mov	r3, r0
 800226a:	b29a      	uxth	r2, r3
 800226c:	f107 010c 	add.w	r1, r7, #12
 8002270:	2364      	movs	r3, #100	; 0x64
 8002272:	4806      	ldr	r0, [pc, #24]	; (800228c <transmit_data+0xc8>)
 8002274:	f005 f9ac 	bl	80075d0 <HAL_UART_Transmit>
}
 8002278:	bf00      	nop
 800227a:	3770      	adds	r7, #112	; 0x70
 800227c:	46bd      	mov	sp, r7
 800227e:	bdb0      	pop	{r4, r5, r7, pc}
 8002280:	0800ca10 	.word	0x0800ca10
 8002284:	2000071a 	.word	0x2000071a
 8002288:	0800ca14 	.word	0x0800ca14
 800228c:	20000908 	.word	0x20000908

08002290 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ // If the interrupt is from timer 2 - 10Hz
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a0:	d10f      	bne.n	80022c2 <HAL_TIM_PeriodElapsedCallback+0x32>
		transmit_data(akutalna_temperatura, value);
 80022a2:	4b37      	ldr	r3, [pc, #220]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80022aa:	ed93 7a00 	vldr	s14, [r3]
 80022ae:	eef0 0a47 	vmov.f32	s1, s14
 80022b2:	eeb0 0a67 	vmov.f32	s0, s15
 80022b6:	f7ff ff85 	bl	80021c4 <transmit_data>
		current_duty_cycle = sterowanie;
 80022ba:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80022bc:	881a      	ldrh	r2, [r3, #0]
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80022c0:	801a      	strh	r2, [r3, #0]
	}
	if(htim->Instance == TIM3){ // If the interrupt is from timer 3 - 2Hz
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a32      	ldr	r2, [pc, #200]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d104      	bne.n	80022d6 <HAL_TIM_PeriodElapsedCallback+0x46>
		//ssd1306_TestAll();
		HAL_UART_Receive_IT(&huart3, received_data, 4);
 80022cc:	2204      	movs	r2, #4
 80022ce:	4931      	ldr	r1, [pc, #196]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80022d0:	4831      	ldr	r0, [pc, #196]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80022d2:	f005 fa00 	bl	80076d6 <HAL_UART_Receive_IT>
	}
	if(htim->Instance == TIM4){ // If the interrupt is from timer 4 - 8Hz
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a30      	ldr	r2, [pc, #192]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d122      	bne.n	8002326 <HAL_TIM_PeriodElapsedCallback+0x96>
		MCP9808_MeasureTemperature(&akutalna_temperatura);
 80022e0:	4827      	ldr	r0, [pc, #156]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80022e2:	f7fe ff09 	bl	80010f8 <MCP9808_MeasureTemperature>
		if(auto_manual_on_off()==false){
 80022e6:	f7ff fcef 	bl	8001cc8 <auto_manual_on_off>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f083 0301 	eor.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d015      	beq.n	8002322 <HAL_TIM_PeriodElapsedCallback+0x92>
			zadana_temperatura = round(zadajnik());
 80022f6:	f7ff fd41 	bl	8001d7c <zadajnik>
 80022fa:	ee10 3a10 	vmov	r3, s0
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f942 	bl	8000588 <__aeabi_f2d>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	ec43 2b10 	vmov	d0, r2, r3
 800230c:	f00a faee 	bl	800c8ec <round>
 8002310:	ec53 2b10 	vmov	r2, r3, d0
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	f7fe fc70 	bl	8000bfc <__aeabi_d2f>
 800231c:	4603      	mov	r3, r0
 800231e:	4a20      	ldr	r2, [pc, #128]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002320:	6013      	str	r3, [r2, #0]
		}
		wyswietlacz();
 8002322:	f7ff fdd9 	bl	8001ed8 <wyswietlacz>
	}
	if(htim->Instance == TIM12){ // If the interrupt is from timer 12 - ~83.3kHz
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d123      	bne.n	8002378 <HAL_TIM_PeriodElapsedCallback+0xe8>
			if(grzanie_on_off()){
 8002330:	f7ff fcb8 	bl	8001ca4 <grzanie_on_off>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d012      	beq.n	8002360 <HAL_TIM_PeriodElapsedCallback+0xd0>
				sterowanie = pid_calculate(zadana_temperatura, akutalna_temperatura);
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	eef0 0a47 	vmov.f32	s1, s14
 800234a:	eeb0 0a67 	vmov.f32	s0, s15
 800234e:	f000 f929 	bl	80025a4 <pid_calculate>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002358:	801a      	strh	r2, [r3, #0]
				wentyl();
 800235a:	f7ff fd3d 	bl	8001dd8 <wentyl>
 800235e:	e004      	b.n	800236a <HAL_TIM_PeriodElapsedCallback+0xda>
			}
			else{
				sterowanie = 0;
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002362:	2200      	movs	r2, #0
 8002364:	801a      	strh	r2, [r3, #0]
				wentyl();
 8002366:	f7ff fd37 	bl	8001dd8 <wentyl>
			}
			change_current_duty_cycle(&htim1, TIM_CHANNEL_1, sterowanie);
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	2100      	movs	r1, #0
 8002372:	480d      	ldr	r0, [pc, #52]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002374:	f7ff fd6a 	bl	8001e4c <change_current_duty_cycle>
		}

}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000710 	.word	0x20000710
 8002384:	20000714 	.word	0x20000714
 8002388:	2000071a 	.word	0x2000071a
 800238c:	20000718 	.word	0x20000718
 8002390:	40000400 	.word	0x40000400
 8002394:	2000070c 	.word	0x2000070c
 8002398:	20000908 	.word	0x20000908
 800239c:	40000800 	.word	0x40000800
 80023a0:	2000071c 	.word	0x2000071c
 80023a4:	40001800 	.word	0x40001800
 80023a8:	20000740 	.word	0x20000740

080023ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b0:	f000 fe93 	bl	80030da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b4:	f000 f85c 	bl	8002470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023b8:	f7ff fa10 	bl	80017dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80023bc:	f000 fdcc 	bl	8002f58 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80023c0:	f7ff fb4a 	bl	8001a58 <MX_I2C2_Init>
  MX_TIM2_Init();
 80023c4:	f000 fb60 	bl	8002a88 <MX_TIM2_Init>
  MX_TIM3_Init();
 80023c8:	f000 fbac 	bl	8002b24 <MX_TIM3_Init>
  MX_TIM4_Init();
 80023cc:	f000 fbfa 	bl	8002bc4 <MX_TIM4_Init>
  MX_I2C4_Init();
 80023d0:	f7ff fb82 	bl	8001ad8 <MX_I2C4_Init>
  MX_ADC1_Init();
 80023d4:	f7ff f970 	bl	80016b8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80023d8:	f000 fac8 	bl	800296c <MX_TIM1_Init>
  MX_TIM8_Init();
 80023dc:	f000 fc42 	bl	8002c64 <MX_TIM8_Init>
  MX_TIM12_Init();
 80023e0:	f000 fc94 	bl	8002d0c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_TestAll();
  ssd1306_Init(); // Inicjalizacja wyświetlacza
 80023e4:	f7fe ff66 	bl	80012b4 <ssd1306_Init>
  MCP9808_Init(&hi2c4, 0x18); // inicjalizacja sensora temperatury
 80023e8:	2118      	movs	r1, #24
 80023ea:	4816      	ldr	r0, [pc, #88]	; (8002444 <main+0x98>)
 80023ec:	f7fe fe0e 	bl	800100c <MCP9808_Init>
  // Tutej nastawiają się dokładności czujnika temperatury :))))
  MCP9808_SetResolution(MCP9808_High_Res);  ///> High 0.125 (130 ms)
 80023f0:	2002      	movs	r0, #2
 80023f2:	f7fe ff01 	bl	80011f8 <MCP9808_SetResolution>
  pid_init(kp, ki, kd);  // tutaj inicjalizuje i nastawia się wartości PID
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <main+0x9c>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <main+0xa0>)
 80023fe:	ed93 7a00 	vldr	s14, [r3]
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <main+0xa4>)
 8002404:	edd3 6a00 	vldr	s13, [r3]
 8002408:	eeb0 1a66 	vmov.f32	s2, s13
 800240c:	eef0 0a47 	vmov.f32	s1, s14
 8002410:	eeb0 0a67 	vmov.f32	s0, s15
 8002414:	f000 f8a0 	bl	8002558 <pid_init>

  HAL_UART_Receive_IT(&huart3, received_data, 4);
 8002418:	2204      	movs	r2, #4
 800241a:	490e      	ldr	r1, [pc, #56]	; (8002454 <main+0xa8>)
 800241c:	480e      	ldr	r0, [pc, #56]	; (8002458 <main+0xac>)
 800241e:	f005 f95a 	bl	80076d6 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002422:	2100      	movs	r1, #0
 8002424:	480d      	ldr	r0, [pc, #52]	; (800245c <main+0xb0>)
 8002426:	f003 ff7d 	bl	8006324 <HAL_TIM_PWM_Start>

// te niżej najlepiej jak beda na koncu // tak powiedzial szef
  HAL_TIM_Base_Start_IT(&htim2);
 800242a:	480d      	ldr	r0, [pc, #52]	; (8002460 <main+0xb4>)
 800242c:	f003 feaa 	bl	8006184 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002430:	480c      	ldr	r0, [pc, #48]	; (8002464 <main+0xb8>)
 8002432:	f003 fea7 	bl	8006184 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002436:	480c      	ldr	r0, [pc, #48]	; (8002468 <main+0xbc>)
 8002438:	f003 fea4 	bl	8006184 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim12);
 800243c:	480b      	ldr	r0, [pc, #44]	; (800246c <main+0xc0>)
 800243e:	f003 fea1 	bl	8006184 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002442:	e7fe      	b.n	8002442 <main+0x96>
 8002444:	200006b8 	.word	0x200006b8
 8002448:	20000008 	.word	0x20000008
 800244c:	2000000c 	.word	0x2000000c
 8002450:	20000720 	.word	0x20000720
 8002454:	2000070c 	.word	0x2000070c
 8002458:	20000908 	.word	0x20000908
 800245c:	20000740 	.word	0x20000740
 8002460:	2000078c 	.word	0x2000078c
 8002464:	200007d8 	.word	0x200007d8
 8002468:	20000824 	.word	0x20000824
 800246c:	200008bc 	.word	0x200008bc

08002470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b094      	sub	sp, #80	; 0x50
 8002474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002476:	f107 0320 	add.w	r3, r7, #32
 800247a:	2230      	movs	r2, #48	; 0x30
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f006 fb94 	bl	8008bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002484:	f107 030c 	add.w	r3, r7, #12
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002494:	f002 fd04 	bl	8004ea0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <SystemClock_Config+0xd4>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	4a29      	ldr	r2, [pc, #164]	; (8002544 <SystemClock_Config+0xd4>)
 800249e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a2:	6413      	str	r3, [r2, #64]	; 0x40
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <SystemClock_Config+0xd4>)
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b0:	4b25      	ldr	r3, [pc, #148]	; (8002548 <SystemClock_Config+0xd8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a24      	ldr	r2, [pc, #144]	; (8002548 <SystemClock_Config+0xd8>)
 80024b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <SystemClock_Config+0xd8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024c8:	2301      	movs	r3, #1
 80024ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d2:	2302      	movs	r3, #2
 80024d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024dc:	2304      	movs	r3, #4
 80024de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80024e0:	23d8      	movs	r3, #216	; 0xd8
 80024e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024e4:	2302      	movs	r3, #2
 80024e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80024e8:	2309      	movs	r3, #9
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ec:	f107 0320 	add.w	r3, r7, #32
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 fd35 	bl	8004f60 <HAL_RCC_OscConfig>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80024fc:	f000 f826 	bl	800254c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002500:	f002 fcde 	bl	8004ec0 <HAL_PWREx_EnableOverDrive>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800250a:	f000 f81f 	bl	800254c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250e:	230f      	movs	r3, #15
 8002510:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002512:	2302      	movs	r3, #2
 8002514:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800251a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800251e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002520:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002524:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	2107      	movs	r1, #7
 800252c:	4618      	mov	r0, r3
 800252e:	f002 ffbb 	bl	80054a8 <HAL_RCC_ClockConfig>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002538:	f000 f808 	bl	800254c <Error_Handler>
  }
}
 800253c:	bf00      	nop
 800253e:	3750      	adds	r7, #80	; 0x50
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40023800 	.word	0x40023800
 8002548:	40007000 	.word	0x40007000

0800254c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002550:	b672      	cpsid	i
}
 8002552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002554:	e7fe      	b.n	8002554 <Error_Handler+0x8>
	...

08002558 <pid_init>:
};

static struct pid_params pid_params;

void pid_init(float kp, float ki, float kd)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002562:	edc7 0a02 	vstr	s1, [r7, #8]
 8002566:	ed87 1a01 	vstr	s2, [r7, #4]
	pid_params.kp = kp;
 800256a:	4a0d      	ldr	r2, [pc, #52]	; (80025a0 <pid_init+0x48>)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6013      	str	r3, [r2, #0]
	pid_params.ki = ki;
 8002570:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <pid_init+0x48>)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	6053      	str	r3, [r2, #4]
	pid_params.kd = kd;
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <pid_init+0x48>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6093      	str	r3, [r2, #8]
	pid_params.err = 0;
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <pid_init+0x48>)
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
	pid_params.err_sum = 0;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <pid_init+0x48>)
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
	pid_params.err_last = 0;
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <pid_init+0x48>)
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	615a      	str	r2, [r3, #20]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	20000724 	.word	0x20000724

080025a4 <pid_calculate>:

uint16_t pid_calculate(float set_val, float read_val)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80025ae:	edc7 0a00 	vstr	s1, [r7]
	float err_d, u;
	uint16_t u_ext;

	pid_params.err = set_val - read_val;
 80025b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80025b6:	edd7 7a00 	vldr	s15, [r7]
 80025ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025be:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <pid_calculate+0xfc>)
 80025c0:	edc3 7a03 	vstr	s15, [r3, #12]
	pid_params.err_sum += pid_params.err;
 80025c4:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <pid_calculate+0xfc>)
 80025c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80025ca:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <pid_calculate+0xfc>)
 80025cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80025d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d4:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <pid_calculate+0xfc>)
 80025d6:	edc3 7a04 	vstr	s15, [r3, #16]

	if (pid_params.err_sum > ERR_SUM_MAX) {
 80025da:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <pid_calculate+0xfc>)
 80025dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80025e0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80026a4 <pid_calculate+0x100>
 80025e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	dd03      	ble.n	80025f6 <pid_calculate+0x52>
		pid_params.err_sum = ERR_SUM_MAX;
 80025ee:	4b2c      	ldr	r3, [pc, #176]	; (80026a0 <pid_calculate+0xfc>)
 80025f0:	4a2d      	ldr	r2, [pc, #180]	; (80026a8 <pid_calculate+0x104>)
 80025f2:	611a      	str	r2, [r3, #16]
 80025f4:	e00c      	b.n	8002610 <pid_calculate+0x6c>
	} else if (pid_params.err_sum < -ERR_SUM_MAX) {
 80025f6:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <pid_calculate+0xfc>)
 80025f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80025fc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80026ac <pid_calculate+0x108>
 8002600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002608:	d502      	bpl.n	8002610 <pid_calculate+0x6c>
		pid_params.err_sum = -ERR_SUM_MAX;
 800260a:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <pid_calculate+0xfc>)
 800260c:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <pid_calculate+0x10c>)
 800260e:	611a      	str	r2, [r3, #16]
	}

	err_d = pid_params.err_last - pid_params.err;
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <pid_calculate+0xfc>)
 8002612:	ed93 7a05 	vldr	s14, [r3, #20]
 8002616:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <pid_calculate+0xfc>)
 8002618:	edd3 7a03 	vldr	s15, [r3, #12]
 800261c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002620:	edc7 7a04 	vstr	s15, [r7, #16]
	pid_params.err_last = pid_params.err;
 8002624:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <pid_calculate+0xfc>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <pid_calculate+0xfc>)
 800262a:	6153      	str	r3, [r2, #20]
	u = pid_params.kp * pid_params.err + pid_params.ki * pid_params.err_sum
 800262c:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <pid_calculate+0xfc>)
 800262e:	ed93 7a00 	vldr	s14, [r3]
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <pid_calculate+0xfc>)
 8002634:	edd3 7a03 	vldr	s15, [r3, #12]
 8002638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <pid_calculate+0xfc>)
 800263e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <pid_calculate+0xfc>)
 8002644:	edd3 7a04 	vldr	s15, [r3, #16]
 8002648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800264c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid_params.kd * err_d;
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <pid_calculate+0xfc>)
 8002652:	edd3 6a02 	vldr	s13, [r3, #8]
 8002656:	edd7 7a04 	vldr	s15, [r7, #16]
 800265a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	u = pid_params.kp * pid_params.err + pid_params.ki * pid_params.err_sum
 800265e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002662:	edc7 7a03 	vstr	s15, [r7, #12]
	u_ext = round(u);
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f7fd ff8e 	bl	8000588 <__aeabi_f2d>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	ec43 2b10 	vmov	d0, r2, r3
 8002674:	f00a f93a 	bl	800c8ec <round>
 8002678:	ec53 2b10 	vmov	r2, r3, d0
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	f7fe fa9c 	bl	8000bbc <__aeabi_d2uiz>
 8002684:	4603      	mov	r3, r0
 8002686:	82fb      	strh	r3, [r7, #22]
	if(u_ext>1000){
 8002688:	8afb      	ldrh	r3, [r7, #22]
 800268a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800268e:	d902      	bls.n	8002696 <pid_calculate+0xf2>
		u_ext = 1000;
 8002690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002694:	82fb      	strh	r3, [r7, #22]
	}
	else if(u_ext<0){
		u_ext = 0;
	}
	return u_ext;
 8002696:	8afb      	ldrh	r3, [r7, #22]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000724 	.word	0x20000724
 80026a4:	459c4000 	.word	0x459c4000
 80026a8:	459c4000 	.word	0x459c4000
 80026ac:	c59c4000 	.word	0xc59c4000
 80026b0:	c59c4000 	.word	0xc59c4000

080026b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <HAL_MspInit+0x44>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <HAL_MspInit+0x44>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_MspInit+0x44>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_MspInit+0x44>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <HAL_MspInit+0x44>)
 80026d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026dc:	6453      	str	r3, [r2, #68]	; 0x44
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_MspInit+0x44>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <NMI_Handler+0x4>

08002702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <HardFault_Handler+0x4>

08002708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270c:	e7fe      	b.n	800270c <MemManage_Handler+0x4>

0800270e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <BusFault_Handler+0x4>

08002714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <UsageFault_Handler+0x4>

0800271a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002748:	f000 fd04 	bl	8003154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <TIM2_IRQHandler+0x10>)
 8002756:	f003 fedf 	bl	8006518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000078c 	.word	0x2000078c

08002764 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <TIM3_IRQHandler+0x10>)
 800276a:	f003 fed5 	bl	8006518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200007d8 	.word	0x200007d8

08002778 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <TIM4_IRQHandler+0x10>)
 800277e:	f003 fecb 	bl	8006518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000824 	.word	0x20000824

0800278c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <USART3_IRQHandler+0x10>)
 8002792:	f004 ffe5 	bl	8007760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000908 	.word	0x20000908

080027a0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80027a4:	4803      	ldr	r0, [pc, #12]	; (80027b4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80027a6:	f003 feb7 	bl	8006518 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80027aa:	4803      	ldr	r0, [pc, #12]	; (80027b8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80027ac:	f003 feb4 	bl	8006518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000870 	.word	0x20000870
 80027b8:	200008bc 	.word	0x200008bc

080027bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return 1;
 80027c0:	2301      	movs	r3, #1
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_kill>:

int _kill(int pid, int sig)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027d6:	f006 f9b1 	bl	8008b3c <__errno>
 80027da:	4603      	mov	r3, r0
 80027dc:	2216      	movs	r2, #22
 80027de:	601a      	str	r2, [r3, #0]
  return -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_exit>:

void _exit (int status)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffe7 	bl	80027cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80027fe:	e7fe      	b.n	80027fe <_exit+0x12>

08002800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e00a      	b.n	8002828 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002812:	f3af 8000 	nop.w
 8002816:	4601      	mov	r1, r0
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	b2ca      	uxtb	r2, r1
 8002820:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	dbf0      	blt.n	8002812 <_read+0x12>
  }

  return len;
 8002830:	687b      	ldr	r3, [r7, #4]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e009      	b.n	8002860 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	60ba      	str	r2, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	dbf1      	blt.n	800284c <_write+0x12>
  }
  return len;
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_close>:

int _close(int file)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800289a:	605a      	str	r2, [r3, #4]
  return 0;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <_isatty>:

int _isatty(int file)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <_sbrk+0x5c>)
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <_sbrk+0x60>)
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <_sbrk+0x64>)
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <_sbrk+0x68>)
 80028fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <_sbrk+0x64>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	429a      	cmp	r2, r3
 800290a:	d207      	bcs.n	800291c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800290c:	f006 f916 	bl	8008b3c <__errno>
 8002910:	4603      	mov	r3, r0
 8002912:	220c      	movs	r2, #12
 8002914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	e009      	b.n	8002930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <_sbrk+0x64>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <_sbrk+0x64>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <_sbrk+0x64>)
 800292c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20050000 	.word	0x20050000
 800293c:	00000400 	.word	0x00000400
 8002940:	2000073c 	.word	0x2000073c
 8002944:	200009a8 	.word	0x200009a8

08002948 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <SystemInit+0x20>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	4a05      	ldr	r2, [pc, #20]	; (8002968 <SystemInit+0x20>)
 8002954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b096      	sub	sp, #88	; 0x58
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002972:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800297e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	611a      	str	r2, [r3, #16]
 800298e:	615a      	str	r2, [r3, #20]
 8002990:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	222c      	movs	r2, #44	; 0x2c
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f006 f907 	bl	8008bac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800299e:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <MX_TIM1_Init+0x114>)
 80029a0:	4a38      	ldr	r2, [pc, #224]	; (8002a84 <MX_TIM1_Init+0x118>)
 80029a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 80029a4:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <MX_TIM1_Init+0x114>)
 80029a6:	226b      	movs	r2, #107	; 0x6b
 80029a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029aa:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <MX_TIM1_Init+0x114>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80029b0:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <MX_TIM1_Init+0x114>)
 80029b2:	2263      	movs	r2, #99	; 0x63
 80029b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b6:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <MX_TIM1_Init+0x114>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029bc:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <MX_TIM1_Init+0x114>)
 80029be:	2200      	movs	r2, #0
 80029c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <MX_TIM1_Init+0x114>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029c8:	482d      	ldr	r0, [pc, #180]	; (8002a80 <MX_TIM1_Init+0x114>)
 80029ca:	f003 fc53 	bl	8006274 <HAL_TIM_PWM_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80029d4:	f7ff fdba 	bl	800254c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029e8:	4619      	mov	r1, r3
 80029ea:	4825      	ldr	r0, [pc, #148]	; (8002a80 <MX_TIM1_Init+0x114>)
 80029ec:	f004 fc78 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80029f6:	f7ff fda9 	bl	800254c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029fa:	2360      	movs	r3, #96	; 0x60
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a02:	2300      	movs	r3, #0
 8002a04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a06:	2300      	movs	r3, #0
 8002a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4818      	ldr	r0, [pc, #96]	; (8002a80 <MX_TIM1_Init+0x114>)
 8002a20:	f003 fe9a 	bl	8006758 <HAL_TIM_PWM_ConfigChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002a2a:	f7ff fd8f 	bl	800254c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4807      	ldr	r0, [pc, #28]	; (8002a80 <MX_TIM1_Init+0x114>)
 8002a64:	f004 fcca 	bl	80073fc <HAL_TIMEx_ConfigBreakDeadTime>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002a6e:	f7ff fd6d 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a72:	4803      	ldr	r0, [pc, #12]	; (8002a80 <MX_TIM1_Init+0x114>)
 8002a74:	f000 fa38 	bl	8002ee8 <HAL_TIM_MspPostInit>

}
 8002a78:	bf00      	nop
 8002a7a:	3758      	adds	r7, #88	; 0x58
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000740 	.word	0x20000740
 8002a84:	40010000 	.word	0x40010000

08002a88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8e:	f107 0310 	add.w	r3, r7, #16
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <MX_TIM2_Init+0x98>)
 8002aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10799;
 8002aae:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <MX_TIM2_Init+0x98>)
 8002ab0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002ab4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <MX_TIM2_Init+0x98>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <MX_TIM2_Init+0x98>)
 8002abe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ac2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <MX_TIM2_Init+0x98>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <MX_TIM2_Init+0x98>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ad0:	4813      	ldr	r0, [pc, #76]	; (8002b20 <MX_TIM2_Init+0x98>)
 8002ad2:	f003 faff 	bl	80060d4 <HAL_TIM_Base_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002adc:	f7ff fd36 	bl	800254c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ae6:	f107 0310 	add.w	r3, r7, #16
 8002aea:	4619      	mov	r1, r3
 8002aec:	480c      	ldr	r0, [pc, #48]	; (8002b20 <MX_TIM2_Init+0x98>)
 8002aee:	f003 ff47 	bl	8006980 <HAL_TIM_ConfigClockSource>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002af8:	f7ff fd28 	bl	800254c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4805      	ldr	r0, [pc, #20]	; (8002b20 <MX_TIM2_Init+0x98>)
 8002b0a:	f004 fbe9 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002b14:	f7ff fd1a 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b18:	bf00      	nop
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	2000078c 	.word	0x2000078c

08002b24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <MX_TIM3_Init+0x98>)
 8002b44:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <MX_TIM3_Init+0x9c>)
 8002b46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <MX_TIM3_Init+0x98>)
 8002b4a:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002b4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b50:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <MX_TIM3_Init+0x98>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8002b56:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <MX_TIM3_Init+0x98>)
 8002b58:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <MX_TIM3_Init+0x98>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b64:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <MX_TIM3_Init+0x98>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b6a:	4814      	ldr	r0, [pc, #80]	; (8002bbc <MX_TIM3_Init+0x98>)
 8002b6c:	f003 fab2 	bl	80060d4 <HAL_TIM_Base_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002b76:	f7ff fce9 	bl	800254c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b80:	f107 0310 	add.w	r3, r7, #16
 8002b84:	4619      	mov	r1, r3
 8002b86:	480d      	ldr	r0, [pc, #52]	; (8002bbc <MX_TIM3_Init+0x98>)
 8002b88:	f003 fefa 	bl	8006980 <HAL_TIM_ConfigClockSource>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002b92:	f7ff fcdb 	bl	800254c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4806      	ldr	r0, [pc, #24]	; (8002bbc <MX_TIM3_Init+0x98>)
 8002ba4:	f004 fb9c 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002bae:	f7ff fccd 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200007d8 	.word	0x200007d8
 8002bc0:	40000400 	.word	0x40000400

08002bc4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bca:	f107 0310 	add.w	r3, r7, #16
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <MX_TIM4_Init+0x98>)
 8002be4:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <MX_TIM4_Init+0x9c>)
 8002be6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10799;
 8002be8:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <MX_TIM4_Init+0x98>)
 8002bea:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002bee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <MX_TIM4_Init+0x98>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1249;
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <MX_TIM4_Init+0x98>)
 8002bf8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002bfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfe:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <MX_TIM4_Init+0x98>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c04:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <MX_TIM4_Init+0x98>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c0a:	4814      	ldr	r0, [pc, #80]	; (8002c5c <MX_TIM4_Init+0x98>)
 8002c0c:	f003 fa62 	bl	80060d4 <HAL_TIM_Base_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002c16:	f7ff fc99 	bl	800254c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c20:	f107 0310 	add.w	r3, r7, #16
 8002c24:	4619      	mov	r1, r3
 8002c26:	480d      	ldr	r0, [pc, #52]	; (8002c5c <MX_TIM4_Init+0x98>)
 8002c28:	f003 feaa 	bl	8006980 <HAL_TIM_ConfigClockSource>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002c32:	f7ff fc8b 	bl	800254c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4806      	ldr	r0, [pc, #24]	; (8002c5c <MX_TIM4_Init+0x98>)
 8002c44:	f004 fb4c 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002c4e:	f7ff fc7d 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000824 	.word	0x20000824
 8002c60:	40000800 	.word	0x40000800

08002c64 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c6a:	f107 0310 	add.w	r3, r7, #16
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <MX_TIM8_Init+0xa0>)
 8002c84:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <MX_TIM8_Init+0xa4>)
 8002c86:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 107;
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <MX_TIM8_Init+0xa0>)
 8002c8a:	226b      	movs	r2, #107	; 0x6b
 8002c8c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <MX_TIM8_Init+0xa0>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <MX_TIM8_Init+0xa0>)
 8002c96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <MX_TIM8_Init+0xa0>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ca2:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <MX_TIM8_Init+0xa0>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <MX_TIM8_Init+0xa0>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002cae:	4815      	ldr	r0, [pc, #84]	; (8002d04 <MX_TIM8_Init+0xa0>)
 8002cb0:	f003 fa10 	bl	80060d4 <HAL_TIM_Base_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002cba:	f7ff fc47 	bl	800254c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	4619      	mov	r1, r3
 8002cca:	480e      	ldr	r0, [pc, #56]	; (8002d04 <MX_TIM8_Init+0xa0>)
 8002ccc:	f003 fe58 	bl	8006980 <HAL_TIM_ConfigClockSource>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002cd6:	f7ff fc39 	bl	800254c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4806      	ldr	r0, [pc, #24]	; (8002d04 <MX_TIM8_Init+0xa0>)
 8002cec:	f004 faf8 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002cf6:	f7ff fc29 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002cfa:	bf00      	nop
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000870 	.word	0x20000870
 8002d08:	40010400 	.word	0x40010400

08002d0c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d12:	463b      	mov	r3, r7
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <MX_TIM12_Init+0x6c>)
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <MX_TIM12_Init+0x70>)
 8002d22:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1295;
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <MX_TIM12_Init+0x6c>)
 8002d26:	f240 520f 	movw	r2, #1295	; 0x50f
 8002d2a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <MX_TIM12_Init+0x6c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_TIM12_Init+0x6c>)
 8002d34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d38:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <MX_TIM12_Init+0x6c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d40:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <MX_TIM12_Init+0x6c>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002d46:	480c      	ldr	r0, [pc, #48]	; (8002d78 <MX_TIM12_Init+0x6c>)
 8002d48:	f003 f9c4 	bl	80060d4 <HAL_TIM_Base_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8002d52:	f7ff fbfb 	bl	800254c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002d5c:	463b      	mov	r3, r7
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4805      	ldr	r0, [pc, #20]	; (8002d78 <MX_TIM12_Init+0x6c>)
 8002d62:	f003 fe0d 	bl	8006980 <HAL_TIM_ConfigClockSource>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8002d6c:	f7ff fbee 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	200008bc 	.word	0x200008bc
 8002d7c:	40001800 	.word	0x40001800

08002d80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <HAL_TIM_PWM_MspInit+0x38>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10b      	bne.n	8002daa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <HAL_TIM_PWM_MspInit+0x3c>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <HAL_TIM_PWM_MspInit+0x3c>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <HAL_TIM_PWM_MspInit+0x3c>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd0:	d114      	bne.n	8002dfc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dd2:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a3f      	ldr	r2, [pc, #252]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002dea:	2200      	movs	r2, #0
 8002dec:	2100      	movs	r1, #0
 8002dee:	201c      	movs	r0, #28
 8002df0:	f000 fec9 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002df4:	201c      	movs	r0, #28
 8002df6:	f000 fee2 	bl	8003bbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002dfa:	e066      	b.n	8002eca <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM3)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a35      	ldr	r2, [pc, #212]	; (8002ed8 <HAL_TIM_Base_MspInit+0x118>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d114      	bne.n	8002e30 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e06:	4b33      	ldr	r3, [pc, #204]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a32      	ldr	r2, [pc, #200]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
 8002e12:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2100      	movs	r1, #0
 8002e22:	201d      	movs	r0, #29
 8002e24:	f000 feaf 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e28:	201d      	movs	r0, #29
 8002e2a:	f000 fec8 	bl	8003bbe <HAL_NVIC_EnableIRQ>
}
 8002e2e:	e04c      	b.n	8002eca <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM4)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a29      	ldr	r2, [pc, #164]	; (8002edc <HAL_TIM_Base_MspInit+0x11c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d114      	bne.n	8002e64 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e3a:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a25      	ldr	r2, [pc, #148]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002e40:	f043 0304 	orr.w	r3, r3, #4
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	201e      	movs	r0, #30
 8002e58:	f000 fe95 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e5c:	201e      	movs	r0, #30
 8002e5e:	f000 feae 	bl	8003bbe <HAL_NVIC_EnableIRQ>
}
 8002e62:	e032      	b.n	8002eca <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM8)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_TIM_Base_MspInit+0x120>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d114      	bne.n	8002e98 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	202b      	movs	r0, #43	; 0x2b
 8002e8c:	f000 fe7b 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002e90:	202b      	movs	r0, #43	; 0x2b
 8002e92:	f000 fe94 	bl	8003bbe <HAL_NVIC_EnableIRQ>
}
 8002e96:	e018      	b.n	8002eca <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM12)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <HAL_TIM_Base_MspInit+0x124>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d113      	bne.n	8002eca <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_TIM_Base_MspInit+0x114>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	202b      	movs	r0, #43	; 0x2b
 8002ec0:	f000 fe61 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002ec4:	202b      	movs	r0, #43	; 0x2b
 8002ec6:	f000 fe7a 	bl	8003bbe <HAL_NVIC_EnableIRQ>
}
 8002eca:	bf00      	nop
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40000400 	.word	0x40000400
 8002edc:	40000800 	.word	0x40000800
 8002ee0:	40010400 	.word	0x40010400
 8002ee4:	40001800 	.word	0x40001800

08002ee8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_TIM_MspPostInit+0x64>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d11c      	bne.n	8002f44 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_TIM_MspPostInit+0x68>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <HAL_TIM_MspPostInit+0x68>)
 8002f10:	f043 0310 	orr.w	r3, r3, #16
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_TIM_MspPostInit+0x68>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f34:	2301      	movs	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f38:	f107 030c 	add.w	r3, r7, #12
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4805      	ldr	r0, [pc, #20]	; (8002f54 <HAL_TIM_MspPostInit+0x6c>)
 8002f40:	f000 feea 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f44:	bf00      	nop
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40021000 	.word	0x40021000

08002f58 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <MX_USART3_UART_Init+0x58>)
 8002f5e:	4a15      	ldr	r2, [pc, #84]	; (8002fb4 <MX_USART3_UART_Init+0x5c>)
 8002f60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <MX_USART3_UART_Init+0x58>)
 8002f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <MX_USART3_UART_Init+0x58>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <MX_USART3_UART_Init+0x58>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f76:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <MX_USART3_UART_Init+0x58>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <MX_USART3_UART_Init+0x58>)
 8002f7e:	220c      	movs	r2, #12
 8002f80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <MX_USART3_UART_Init+0x58>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <MX_USART3_UART_Init+0x58>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f8e:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <MX_USART3_UART_Init+0x58>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <MX_USART3_UART_Init+0x58>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f9a:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <MX_USART3_UART_Init+0x58>)
 8002f9c:	f004 faca 	bl	8007534 <HAL_UART_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002fa6:	f7ff fad1 	bl	800254c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000908 	.word	0x20000908
 8002fb4:	40004800 	.word	0x40004800

08002fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b0aa      	sub	sp, #168	; 0xa8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fd0:	f107 0310 	add.w	r3, r7, #16
 8002fd4:	2284      	movs	r2, #132	; 0x84
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f005 fde7 	bl	8008bac <memset>
  if(uartHandle->Instance==USART3)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a26      	ldr	r2, [pc, #152]	; (800307c <HAL_UART_MspInit+0xc4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d144      	bne.n	8003072 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff2:	f107 0310 	add.w	r3, r7, #16
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f002 fc7c 	bl	80058f4 <HAL_RCCEx_PeriphCLKConfig>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003002:	f7ff faa3 	bl	800254c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003006:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <HAL_UART_MspInit+0xc8>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <HAL_UART_MspInit+0xc8>)
 800300c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003010:	6413      	str	r3, [r2, #64]	; 0x40
 8003012:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_UART_MspInit+0xc8>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <HAL_UART_MspInit+0xc8>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a17      	ldr	r2, [pc, #92]	; (8003080 <HAL_UART_MspInit+0xc8>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <HAL_UART_MspInit+0xc8>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003036:	f44f 7340 	mov.w	r3, #768	; 0x300
 800303a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
 8003040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003044:	2301      	movs	r3, #1
 8003046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304a:	2303      	movs	r3, #3
 800304c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003050:	2307      	movs	r3, #7
 8003052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003056:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800305a:	4619      	mov	r1, r3
 800305c:	4809      	ldr	r0, [pc, #36]	; (8003084 <HAL_UART_MspInit+0xcc>)
 800305e:	f000 fe5b 	bl	8003d18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	2027      	movs	r0, #39	; 0x27
 8003068:	f000 fd8d 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800306c:	2027      	movs	r0, #39	; 0x27
 800306e:	f000 fda6 	bl	8003bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003072:	bf00      	nop
 8003074:	37a8      	adds	r7, #168	; 0xa8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40004800 	.word	0x40004800
 8003080:	40023800 	.word	0x40023800
 8003084:	40020c00 	.word	0x40020c00

08003088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800308c:	480d      	ldr	r0, [pc, #52]	; (80030c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800308e:	490e      	ldr	r1, [pc, #56]	; (80030c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003090:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003094:	e002      	b.n	800309c <LoopCopyDataInit>

08003096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800309a:	3304      	adds	r3, #4

0800309c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800309c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800309e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a0:	d3f9      	bcc.n	8003096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030a2:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030a4:	4c0b      	ldr	r4, [pc, #44]	; (80030d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a8:	e001      	b.n	80030ae <LoopFillZerobss>

080030aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030ac:	3204      	adds	r2, #4

080030ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b0:	d3fb      	bcc.n	80030aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030b2:	f7ff fc49 	bl	8002948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030b6:	f005 fd47 	bl	8008b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ba:	f7ff f977 	bl	80023ac <main>
  bx  lr    
 80030be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80030c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030c8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80030cc:	0800d640 	.word	0x0800d640
  ldr r2, =_sbss
 80030d0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80030d4:	200009a4 	.word	0x200009a4

080030d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030d8:	e7fe      	b.n	80030d8 <ADC_IRQHandler>

080030da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030de:	2003      	movs	r0, #3
 80030e0:	f000 fd46 	bl	8003b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030e4:	2000      	movs	r0, #0
 80030e6:	f000 f805 	bl	80030f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ea:	f7ff fae3 	bl	80026b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_InitTick+0x54>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_InitTick+0x58>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	4619      	mov	r1, r3
 8003106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800310a:	fbb3 f3f1 	udiv	r3, r3, r1
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fd61 	bl	8003bda <HAL_SYSTICK_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e00e      	b.n	8003140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b0f      	cmp	r3, #15
 8003126:	d80a      	bhi.n	800313e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003128:	2200      	movs	r2, #0
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	f000 fd29 	bl	8003b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003134:	4a06      	ldr	r2, [pc, #24]	; (8003150 <HAL_InitTick+0x5c>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	e000      	b.n	8003140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000010 	.word	0x20000010
 800314c:	20000018 	.word	0x20000018
 8003150:	20000014 	.word	0x20000014

08003154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_IncTick+0x20>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_IncTick+0x24>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4413      	add	r3, r2
 8003164:	4a04      	ldr	r2, [pc, #16]	; (8003178 <HAL_IncTick+0x24>)
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000018 	.word	0x20000018
 8003178:	20000990 	.word	0x20000990

0800317c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return uwTick;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_GetTick+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000990 	.word	0x20000990

08003194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7ff ffee 	bl	800317c <HAL_GetTick>
 80031a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d005      	beq.n	80031ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_Delay+0x44>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031ba:	bf00      	nop
 80031bc:	f7ff ffde 	bl	800317c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d8f7      	bhi.n	80031bc <HAL_Delay+0x28>
  {
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000018 	.word	0x20000018

080031dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e031      	b.n	8003256 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fe faae 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <HAL_ADC_Init+0x84>)
 8003220:	4013      	ands	r3, r2
 8003222:	f043 0202 	orr.w	r2, r3, #2
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fad6 	bl	80037dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
 8003246:	e001      	b.n	800324c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	ffffeefd 	.word	0xffffeefd

08003264 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_ADC_Start+0x1a>
 800327a:	2302      	movs	r3, #2
 800327c:	e0ad      	b.n	80033da <HAL_ADC_Start+0x176>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d018      	beq.n	80032c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80032a4:	4b50      	ldr	r3, [pc, #320]	; (80033e8 <HAL_ADC_Start+0x184>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a50      	ldr	r2, [pc, #320]	; (80033ec <HAL_ADC_Start+0x188>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	0c9a      	lsrs	r2, r3, #18
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80032b8:	e002      	b.n	80032c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3b01      	subs	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f9      	bne.n	80032ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d175      	bne.n	80033c0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d8:	4b45      	ldr	r3, [pc, #276]	; (80033f0 <HAL_ADC_Start+0x18c>)
 80032da:	4013      	ands	r3, r2
 80032dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800330a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800330e:	d106      	bne.n	800331e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f023 0206 	bic.w	r2, r3, #6
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
 800331c:	e002      	b.n	8003324 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003334:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003336:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <HAL_ADC_Start+0x190>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d143      	bne.n	80033d8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	e03a      	b.n	80033d8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <HAL_ADC_Start+0x194>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d10e      	bne.n	800338a <HAL_ADC_Start+0x126>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d107      	bne.n	800338a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003388:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HAL_ADC_Start+0x190>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d120      	bne.n	80033d8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a18      	ldr	r2, [pc, #96]	; (80033fc <HAL_ADC_Start+0x198>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d11b      	bne.n	80033d8 <HAL_ADC_Start+0x174>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d114      	bne.n	80033d8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	e00b      	b.n	80033d8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f043 0210 	orr.w	r2, r3, #16
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000010 	.word	0x20000010
 80033ec:	431bde83 	.word	0x431bde83
 80033f0:	fffff8fe 	.word	0xfffff8fe
 80033f4:	40012300 	.word	0x40012300
 80033f8:	40012000 	.word	0x40012000
 80033fc:	40012200 	.word	0x40012200

08003400 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341c:	d113      	bne.n	8003446 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342c:	d10b      	bne.n	8003446 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f043 0220 	orr.w	r2, r3, #32
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e063      	b.n	800350e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003446:	f7ff fe99 	bl	800317c <HAL_GetTick>
 800344a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800344c:	e021      	b.n	8003492 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d01d      	beq.n	8003492 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_ADC_PollForConversion+0x6c>
 800345c:	f7ff fe8e 	bl	800317c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d212      	bcs.n	8003492 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d00b      	beq.n	8003492 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f043 0204 	orr.w	r2, r3, #4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e03d      	b.n	800350e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d1d6      	bne.n	800344e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0212 	mvn.w	r2, #18
 80034a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d123      	bne.n	800350c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d11f      	bne.n	800350c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d111      	bne.n	800350c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f043 0201 	orr.w	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0x1c>
 8003548:	2302      	movs	r3, #2
 800354a:	e136      	b.n	80037ba <HAL_ADC_ConfigChannel+0x28a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b09      	cmp	r3, #9
 800355a:	d93a      	bls.n	80035d2 <HAL_ADC_ConfigChannel+0xa2>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003564:	d035      	beq.n	80035d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68d9      	ldr	r1, [r3, #12]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	3b1e      	subs	r3, #30
 800357c:	2207      	movs	r2, #7
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	400a      	ands	r2, r1
 800358a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a8d      	ldr	r2, [pc, #564]	; (80037c8 <HAL_ADC_ConfigChannel+0x298>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10a      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68d9      	ldr	r1, [r3, #12]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	061a      	lsls	r2, r3, #24
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035aa:	e035      	b.n	8003618 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68d9      	ldr	r1, [r3, #12]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	4618      	mov	r0, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4403      	add	r3, r0
 80035c4:	3b1e      	subs	r3, #30
 80035c6:	409a      	lsls	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035d0:	e022      	b.n	8003618 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6919      	ldr	r1, [r3, #16]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	2207      	movs	r2, #7
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43da      	mvns	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	400a      	ands	r2, r1
 80035f4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6919      	ldr	r1, [r3, #16]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	4618      	mov	r0, r3
 8003608:	4603      	mov	r3, r0
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4403      	add	r3, r0
 800360e:	409a      	lsls	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b06      	cmp	r3, #6
 800361e:	d824      	bhi.n	800366a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	3b05      	subs	r3, #5
 8003632:	221f      	movs	r2, #31
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43da      	mvns	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	400a      	ands	r2, r1
 8003640:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	4618      	mov	r0, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	3b05      	subs	r3, #5
 800365c:	fa00 f203 	lsl.w	r2, r0, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	635a      	str	r2, [r3, #52]	; 0x34
 8003668:	e04c      	b.n	8003704 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d824      	bhi.n	80036bc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	3b23      	subs	r3, #35	; 0x23
 8003684:	221f      	movs	r2, #31
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	400a      	ands	r2, r1
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	4618      	mov	r0, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	3b23      	subs	r3, #35	; 0x23
 80036ae:	fa00 f203 	lsl.w	r2, r0, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
 80036ba:	e023      	b.n	8003704 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	3b41      	subs	r3, #65	; 0x41
 80036ce:	221f      	movs	r2, #31
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43da      	mvns	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	400a      	ands	r2, r1
 80036dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4618      	mov	r0, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	3b41      	subs	r3, #65	; 0x41
 80036f8:	fa00 f203 	lsl.w	r2, r0, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a30      	ldr	r2, [pc, #192]	; (80037cc <HAL_ADC_ConfigChannel+0x29c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d10a      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x1f4>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003716:	d105      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003718:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800371e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003722:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a28      	ldr	r2, [pc, #160]	; (80037cc <HAL_ADC_ConfigChannel+0x29c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10f      	bne.n	800374e <HAL_ADC_ConfigChannel+0x21e>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b12      	cmp	r3, #18
 8003734:	d10b      	bne.n	800374e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800373c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003740:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003742:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800374c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <HAL_ADC_ConfigChannel+0x29c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d12b      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x280>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <HAL_ADC_ConfigChannel+0x298>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <HAL_ADC_ConfigChannel+0x23a>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b11      	cmp	r3, #17
 8003768:	d122      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800376a:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003770:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003774:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800377c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003780:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <HAL_ADC_ConfigChannel+0x298>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d111      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a11      	ldr	r2, [pc, #68]	; (80037d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0c9a      	lsrs	r2, r3, #18
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80037a2:	e002      	b.n	80037aa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f9      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	10000012 	.word	0x10000012
 80037cc:	40012000 	.word	0x40012000
 80037d0:	40012300 	.word	0x40012300
 80037d4:	20000010 	.word	0x20000010
 80037d8:	431bde83 	.word	0x431bde83

080037dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80037e4:	4b78      	ldr	r3, [pc, #480]	; (80039c8 <ADC_Init+0x1ec>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a77      	ldr	r2, [pc, #476]	; (80039c8 <ADC_Init+0x1ec>)
 80037ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80037ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80037f0:	4b75      	ldr	r3, [pc, #468]	; (80039c8 <ADC_Init+0x1ec>)
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4973      	ldr	r1, [pc, #460]	; (80039c8 <ADC_Init+0x1ec>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800380c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	021a      	lsls	r2, r3, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6899      	ldr	r1, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	4a58      	ldr	r2, [pc, #352]	; (80039cc <ADC_Init+0x1f0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d022      	beq.n	80038b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800387e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6899      	ldr	r1, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6899      	ldr	r1, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	e00f      	b.n	80038d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0202 	bic.w	r2, r2, #2
 80038e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6899      	ldr	r1, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	005a      	lsls	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01b      	beq.n	800393c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003912:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003922:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6859      	ldr	r1, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	3b01      	subs	r3, #1
 8003930:	035a      	lsls	r2, r3, #13
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	e007      	b.n	800394c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800394a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	3b01      	subs	r3, #1
 8003968:	051a      	lsls	r2, r3, #20
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6899      	ldr	r1, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800398e:	025a      	lsls	r2, r3, #9
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6899      	ldr	r1, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	029a      	lsls	r2, r3, #10
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40012300 	.word	0x40012300
 80039cc:	0f000001 	.word	0x0f000001

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <__NVIC_SetPriorityGrouping+0x40>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039fe:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <__NVIC_SetPriorityGrouping+0x40>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	60d3      	str	r3, [r2, #12]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00
 8003a14:	05fa0000 	.word	0x05fa0000

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db0b      	blt.n	8003a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4907      	ldr	r1, [pc, #28]	; (8003a6c <__NVIC_EnableIRQ+0x38>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2001      	movs	r0, #1
 8003a56:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db0a      	blt.n	8003a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	490c      	ldr	r1, [pc, #48]	; (8003abc <__NVIC_SetPriority+0x4c>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	0112      	lsls	r2, r2, #4
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	440b      	add	r3, r1
 8003a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a98:	e00a      	b.n	8003ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4908      	ldr	r1, [pc, #32]	; (8003ac0 <__NVIC_SetPriority+0x50>)
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	0112      	lsls	r2, r2, #4
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	440b      	add	r3, r1
 8003aae:	761a      	strb	r2, [r3, #24]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000e100 	.word	0xe000e100
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f1c3 0307 	rsb	r3, r3, #7
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	bf28      	it	cs
 8003ae2:	2304      	movcs	r3, #4
 8003ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d902      	bls.n	8003af4 <NVIC_EncodePriority+0x30>
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3b03      	subs	r3, #3
 8003af2:	e000      	b.n	8003af6 <NVIC_EncodePriority+0x32>
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	401a      	ands	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	43d9      	mvns	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	4313      	orrs	r3, r2
         );
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b3c:	d301      	bcc.n	8003b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e00f      	b.n	8003b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b42:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <SysTick_Config+0x40>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b4a:	210f      	movs	r1, #15
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	f7ff ff8e 	bl	8003a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <SysTick_Config+0x40>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5a:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <SysTick_Config+0x40>)
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	e000e010 	.word	0xe000e010

08003b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff29 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b98:	f7ff ff3e 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	6978      	ldr	r0, [r7, #20]
 8003ba4:	f7ff ff8e 	bl	8003ac4 <NVIC_EncodePriority>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff5d 	bl	8003a70 <__NVIC_SetPriority>
}
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ff31 	bl	8003a34 <__NVIC_EnableIRQ>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ffa2 	bl	8003b2c <SysTick_Config>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff fabc 	bl	800317c <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d008      	beq.n	8003c24 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e052      	b.n	8003cca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0216 	bic.w	r2, r2, #22
 8003c32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c42:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <HAL_DMA_Abort+0x62>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0208 	bic.w	r2, r2, #8
 8003c62:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c74:	e013      	b.n	8003c9e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c76:	f7ff fa81 	bl	800317c <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d90c      	bls.n	8003c9e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e015      	b.n	8003cca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e4      	bne.n	8003c76 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb0:	223f      	movs	r2, #63	; 0x3f
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2280      	movs	r2, #128	; 0x80
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e00c      	b.n	8003d0a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2205      	movs	r2, #5
 8003cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e175      	b.n	8004024 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d38:	2201      	movs	r2, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	f040 8164 	bne.w	800401e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d005      	beq.n	8003d6e <HAL_GPIO_Init+0x56>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d130      	bne.n	8003dd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003da4:	2201      	movs	r2, #1
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 0201 	and.w	r2, r3, #1
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d017      	beq.n	8003e0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2203      	movs	r2, #3
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d123      	bne.n	8003e60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	08da      	lsrs	r2, r3, #3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3208      	adds	r2, #8
 8003e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	220f      	movs	r2, #15
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	08da      	lsrs	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3208      	adds	r2, #8
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0203 	and.w	r2, r3, #3
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80be 	beq.w	800401e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea2:	4b66      	ldr	r3, [pc, #408]	; (800403c <HAL_GPIO_Init+0x324>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	4a65      	ldr	r2, [pc, #404]	; (800403c <HAL_GPIO_Init+0x324>)
 8003ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eac:	6453      	str	r3, [r2, #68]	; 0x44
 8003eae:	4b63      	ldr	r3, [pc, #396]	; (800403c <HAL_GPIO_Init+0x324>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003eba:	4a61      	ldr	r2, [pc, #388]	; (8004040 <HAL_GPIO_Init+0x328>)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a58      	ldr	r2, [pc, #352]	; (8004044 <HAL_GPIO_Init+0x32c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d037      	beq.n	8003f56 <HAL_GPIO_Init+0x23e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a57      	ldr	r2, [pc, #348]	; (8004048 <HAL_GPIO_Init+0x330>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d031      	beq.n	8003f52 <HAL_GPIO_Init+0x23a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_GPIO_Init+0x334>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d02b      	beq.n	8003f4e <HAL_GPIO_Init+0x236>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a55      	ldr	r2, [pc, #340]	; (8004050 <HAL_GPIO_Init+0x338>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d025      	beq.n	8003f4a <HAL_GPIO_Init+0x232>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a54      	ldr	r2, [pc, #336]	; (8004054 <HAL_GPIO_Init+0x33c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01f      	beq.n	8003f46 <HAL_GPIO_Init+0x22e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a53      	ldr	r2, [pc, #332]	; (8004058 <HAL_GPIO_Init+0x340>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d019      	beq.n	8003f42 <HAL_GPIO_Init+0x22a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a52      	ldr	r2, [pc, #328]	; (800405c <HAL_GPIO_Init+0x344>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <HAL_GPIO_Init+0x226>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a51      	ldr	r2, [pc, #324]	; (8004060 <HAL_GPIO_Init+0x348>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00d      	beq.n	8003f3a <HAL_GPIO_Init+0x222>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a50      	ldr	r2, [pc, #320]	; (8004064 <HAL_GPIO_Init+0x34c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <HAL_GPIO_Init+0x21e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a4f      	ldr	r2, [pc, #316]	; (8004068 <HAL_GPIO_Init+0x350>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_GPIO_Init+0x21a>
 8003f2e:	2309      	movs	r3, #9
 8003f30:	e012      	b.n	8003f58 <HAL_GPIO_Init+0x240>
 8003f32:	230a      	movs	r3, #10
 8003f34:	e010      	b.n	8003f58 <HAL_GPIO_Init+0x240>
 8003f36:	2308      	movs	r3, #8
 8003f38:	e00e      	b.n	8003f58 <HAL_GPIO_Init+0x240>
 8003f3a:	2307      	movs	r3, #7
 8003f3c:	e00c      	b.n	8003f58 <HAL_GPIO_Init+0x240>
 8003f3e:	2306      	movs	r3, #6
 8003f40:	e00a      	b.n	8003f58 <HAL_GPIO_Init+0x240>
 8003f42:	2305      	movs	r3, #5
 8003f44:	e008      	b.n	8003f58 <HAL_GPIO_Init+0x240>
 8003f46:	2304      	movs	r3, #4
 8003f48:	e006      	b.n	8003f58 <HAL_GPIO_Init+0x240>
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e004      	b.n	8003f58 <HAL_GPIO_Init+0x240>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e002      	b.n	8003f58 <HAL_GPIO_Init+0x240>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <HAL_GPIO_Init+0x240>
 8003f56:	2300      	movs	r3, #0
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	f002 0203 	and.w	r2, r2, #3
 8003f5e:	0092      	lsls	r2, r2, #2
 8003f60:	4093      	lsls	r3, r2
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f68:	4935      	ldr	r1, [pc, #212]	; (8004040 <HAL_GPIO_Init+0x328>)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	3302      	adds	r3, #2
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f76:	4b3d      	ldr	r3, [pc, #244]	; (800406c <HAL_GPIO_Init+0x354>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f9a:	4a34      	ldr	r2, [pc, #208]	; (800406c <HAL_GPIO_Init+0x354>)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fa0:	4b32      	ldr	r3, [pc, #200]	; (800406c <HAL_GPIO_Init+0x354>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fc4:	4a29      	ldr	r2, [pc, #164]	; (800406c <HAL_GPIO_Init+0x354>)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fca:	4b28      	ldr	r3, [pc, #160]	; (800406c <HAL_GPIO_Init+0x354>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fee:	4a1f      	ldr	r2, [pc, #124]	; (800406c <HAL_GPIO_Init+0x354>)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ff4:	4b1d      	ldr	r3, [pc, #116]	; (800406c <HAL_GPIO_Init+0x354>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_GPIO_Init+0x354>)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3301      	adds	r3, #1
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	2b0f      	cmp	r3, #15
 8004028:	f67f ae86 	bls.w	8003d38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3724      	adds	r7, #36	; 0x24
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	40013800 	.word	0x40013800
 8004044:	40020000 	.word	0x40020000
 8004048:	40020400 	.word	0x40020400
 800404c:	40020800 	.word	0x40020800
 8004050:	40020c00 	.word	0x40020c00
 8004054:	40021000 	.word	0x40021000
 8004058:	40021400 	.word	0x40021400
 800405c:	40021800 	.word	0x40021800
 8004060:	40021c00 	.word	0x40021c00
 8004064:	40022000 	.word	0x40022000
 8004068:	40022400 	.word	0x40022400
 800406c:	40013c00 	.word	0x40013c00

08004070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	887b      	ldrh	r3, [r7, #2]
 8004082:	4013      	ands	r3, r2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
 800408c:	e001      	b.n	8004092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
 80040ac:	4613      	mov	r3, r2
 80040ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040b0:	787b      	ldrb	r3, [r7, #1]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040bc:	e003      	b.n	80040c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040be:	887b      	ldrh	r3, [r7, #2]
 80040c0:	041a      	lsls	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	619a      	str	r2, [r3, #24]
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e07f      	b.n	80041e6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fd fd2c 	bl	8001b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2224      	movs	r2, #36	; 0x24
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0201 	bic.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004124:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004134:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d107      	bne.n	800414e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	e006      	b.n	800415c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800415a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d104      	bne.n	800416e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800416c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <HAL_I2C_Init+0x11c>)
 800417a:	430b      	orrs	r3, r1
 800417c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800418c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69d9      	ldr	r1, [r3, #28]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	02008000 	.word	0x02008000

080041f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	461a      	mov	r2, r3
 8004200:	460b      	mov	r3, r1
 8004202:	817b      	strh	r3, [r7, #10]
 8004204:	4613      	mov	r3, r2
 8004206:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b20      	cmp	r3, #32
 8004212:	f040 80da 	bne.w	80043ca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_I2C_Master_Transmit+0x30>
 8004220:	2302      	movs	r3, #2
 8004222:	e0d3      	b.n	80043cc <HAL_I2C_Master_Transmit+0x1d8>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800422c:	f7fe ffa6 	bl	800317c <HAL_GetTick>
 8004230:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	2319      	movs	r3, #25
 8004238:	2201      	movs	r2, #1
 800423a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fb4e 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0be      	b.n	80043cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2221      	movs	r2, #33	; 0x21
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2210      	movs	r2, #16
 800425a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	893a      	ldrh	r2, [r7, #8]
 800426e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	2bff      	cmp	r3, #255	; 0xff
 800427e:	d90e      	bls.n	800429e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	22ff      	movs	r2, #255	; 0xff
 8004284:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	b2da      	uxtb	r2, r3
 800428c:	8979      	ldrh	r1, [r7, #10]
 800428e:	4b51      	ldr	r3, [pc, #324]	; (80043d4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fd38 	bl	8004d0c <I2C_TransferConfig>
 800429c:	e06c      	b.n	8004378 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	8979      	ldrh	r1, [r7, #10]
 80042b0:	4b48      	ldr	r3, [pc, #288]	; (80043d4 <HAL_I2C_Master_Transmit+0x1e0>)
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fd27 	bl	8004d0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80042be:	e05b      	b.n	8004378 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	6a39      	ldr	r1, [r7, #32]
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fb4b 	bl	8004960 <I2C_WaitOnTXISFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e07b      	b.n	80043cc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d034      	beq.n	8004378 <HAL_I2C_Master_Transmit+0x184>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	2b00      	cmp	r3, #0
 8004314:	d130      	bne.n	8004378 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	2200      	movs	r2, #0
 800431e:	2180      	movs	r1, #128	; 0x80
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 fadd 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e04d      	b.n	80043cc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	2bff      	cmp	r3, #255	; 0xff
 8004338:	d90e      	bls.n	8004358 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	22ff      	movs	r2, #255	; 0xff
 800433e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	b2da      	uxtb	r2, r3
 8004346:	8979      	ldrh	r1, [r7, #10]
 8004348:	2300      	movs	r3, #0
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fcdb 	bl	8004d0c <I2C_TransferConfig>
 8004356:	e00f      	b.n	8004378 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	b2da      	uxtb	r2, r3
 8004368:	8979      	ldrh	r1, [r7, #10]
 800436a:	2300      	movs	r3, #0
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fcca 	bl	8004d0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d19e      	bne.n	80042c0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	6a39      	ldr	r1, [r7, #32]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fb2a 	bl	80049e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e01a      	b.n	80043cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2220      	movs	r2, #32
 800439c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_I2C_Master_Transmit+0x1e4>)
 80043aa:	400b      	ands	r3, r1
 80043ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e000      	b.n	80043cc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80043ca:	2302      	movs	r3, #2
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	80002000 	.word	0x80002000
 80043d8:	fe00e800 	.word	0xfe00e800

080043dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	461a      	mov	r2, r3
 80043e8:	460b      	mov	r3, r1
 80043ea:	817b      	strh	r3, [r7, #10]
 80043ec:	4613      	mov	r3, r2
 80043ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	f040 80db 	bne.w	80045b4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_I2C_Master_Receive+0x30>
 8004408:	2302      	movs	r3, #2
 800440a:	e0d4      	b.n	80045b6 <HAL_I2C_Master_Receive+0x1da>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004414:	f7fe feb2 	bl	800317c <HAL_GetTick>
 8004418:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	2319      	movs	r3, #25
 8004420:	2201      	movs	r2, #1
 8004422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fa5a 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e0bf      	b.n	80045b6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2222      	movs	r2, #34	; 0x22
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2210      	movs	r2, #16
 8004442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	893a      	ldrh	r2, [r7, #8]
 8004456:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	2bff      	cmp	r3, #255	; 0xff
 8004466:	d90e      	bls.n	8004486 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	22ff      	movs	r2, #255	; 0xff
 800446c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004472:	b2da      	uxtb	r2, r3
 8004474:	8979      	ldrh	r1, [r7, #10]
 8004476:	4b52      	ldr	r3, [pc, #328]	; (80045c0 <HAL_I2C_Master_Receive+0x1e4>)
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 fc44 	bl	8004d0c <I2C_TransferConfig>
 8004484:	e06d      	b.n	8004562 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004494:	b2da      	uxtb	r2, r3
 8004496:	8979      	ldrh	r1, [r7, #10]
 8004498:	4b49      	ldr	r3, [pc, #292]	; (80045c0 <HAL_I2C_Master_Receive+0x1e4>)
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fc33 	bl	8004d0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80044a6:	e05c      	b.n	8004562 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	6a39      	ldr	r1, [r7, #32]
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fad3 	bl	8004a58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e07c      	b.n	80045b6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d034      	beq.n	8004562 <HAL_I2C_Master_Receive+0x186>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d130      	bne.n	8004562 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	2200      	movs	r2, #0
 8004508:	2180      	movs	r1, #128	; 0x80
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f9e8 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e04d      	b.n	80045b6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451e:	b29b      	uxth	r3, r3
 8004520:	2bff      	cmp	r3, #255	; 0xff
 8004522:	d90e      	bls.n	8004542 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	22ff      	movs	r2, #255	; 0xff
 8004528:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452e:	b2da      	uxtb	r2, r3
 8004530:	8979      	ldrh	r1, [r7, #10]
 8004532:	2300      	movs	r3, #0
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fbe6 	bl	8004d0c <I2C_TransferConfig>
 8004540:	e00f      	b.n	8004562 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004550:	b2da      	uxtb	r2, r3
 8004552:	8979      	ldrh	r1, [r7, #10]
 8004554:	2300      	movs	r3, #0
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fbd5 	bl	8004d0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d19d      	bne.n	80044a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	6a39      	ldr	r1, [r7, #32]
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fa35 	bl	80049e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e01a      	b.n	80045b6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2220      	movs	r2, #32
 8004586:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6859      	ldr	r1, [r3, #4]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <HAL_I2C_Master_Receive+0x1e8>)
 8004594:	400b      	ands	r3, r1
 8004596:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	80002400 	.word	0x80002400
 80045c4:	fe00e800 	.word	0xfe00e800

080045c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	4608      	mov	r0, r1
 80045d2:	4611      	mov	r1, r2
 80045d4:	461a      	mov	r2, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	817b      	strh	r3, [r7, #10]
 80045da:	460b      	mov	r3, r1
 80045dc:	813b      	strh	r3, [r7, #8]
 80045de:	4613      	mov	r3, r2
 80045e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	f040 80f9 	bne.w	80047e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_I2C_Mem_Write+0x34>
 80045f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0ed      	b.n	80047e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_I2C_Mem_Write+0x4e>
 8004612:	2302      	movs	r3, #2
 8004614:	e0e6      	b.n	80047e4 <HAL_I2C_Mem_Write+0x21c>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800461e:	f7fe fdad 	bl	800317c <HAL_GetTick>
 8004622:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2319      	movs	r3, #25
 800462a:	2201      	movs	r2, #1
 800462c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f955 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0d1      	b.n	80047e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2221      	movs	r2, #33	; 0x21
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2240      	movs	r2, #64	; 0x40
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a3a      	ldr	r2, [r7, #32]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004668:	88f8      	ldrh	r0, [r7, #6]
 800466a:	893a      	ldrh	r2, [r7, #8]
 800466c:	8979      	ldrh	r1, [r7, #10]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	4603      	mov	r3, r0
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f8b9 	bl	80047f0 <I2C_RequestMemoryWrite>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0a9      	b.n	80047e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2bff      	cmp	r3, #255	; 0xff
 8004698:	d90e      	bls.n	80046b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	22ff      	movs	r2, #255	; 0xff
 800469e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	8979      	ldrh	r1, [r7, #10]
 80046a8:	2300      	movs	r3, #0
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fb2b 	bl	8004d0c <I2C_TransferConfig>
 80046b6:	e00f      	b.n	80046d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	8979      	ldrh	r1, [r7, #10]
 80046ca:	2300      	movs	r3, #0
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fb1a 	bl	8004d0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f93f 	bl	8004960 <I2C_WaitOnTXISFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e07b      	b.n	80047e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d034      	beq.n	8004790 <HAL_I2C_Mem_Write+0x1c8>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	2b00      	cmp	r3, #0
 800472c:	d130      	bne.n	8004790 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	2200      	movs	r2, #0
 8004736:	2180      	movs	r1, #128	; 0x80
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f8d1 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e04d      	b.n	80047e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	2bff      	cmp	r3, #255	; 0xff
 8004750:	d90e      	bls.n	8004770 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	22ff      	movs	r2, #255	; 0xff
 8004756:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	b2da      	uxtb	r2, r3
 800475e:	8979      	ldrh	r1, [r7, #10]
 8004760:	2300      	movs	r3, #0
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 facf 	bl	8004d0c <I2C_TransferConfig>
 800476e:	e00f      	b.n	8004790 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477e:	b2da      	uxtb	r2, r3
 8004780:	8979      	ldrh	r1, [r7, #10]
 8004782:	2300      	movs	r3, #0
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fabe 	bl	8004d0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d19e      	bne.n	80046d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f91e 	bl	80049e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e01a      	b.n	80047e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2220      	movs	r2, #32
 80047b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_I2C_Mem_Write+0x224>)
 80047c2:	400b      	ands	r3, r1
 80047c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e000      	b.n	80047e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	fe00e800 	.word	0xfe00e800

080047f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	817b      	strh	r3, [r7, #10]
 8004802:	460b      	mov	r3, r1
 8004804:	813b      	strh	r3, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	8979      	ldrh	r1, [r7, #10]
 8004810:	4b20      	ldr	r3, [pc, #128]	; (8004894 <I2C_RequestMemoryWrite+0xa4>)
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 fa77 	bl	8004d0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	69b9      	ldr	r1, [r7, #24]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f89c 	bl	8004960 <I2C_WaitOnTXISFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e02c      	b.n	800488c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004838:	893b      	ldrh	r3, [r7, #8]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	629a      	str	r2, [r3, #40]	; 0x28
 8004842:	e015      	b.n	8004870 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004844:	893b      	ldrh	r3, [r7, #8]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	b29b      	uxth	r3, r3
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	69b9      	ldr	r1, [r7, #24]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f882 	bl	8004960 <I2C_WaitOnTXISFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e012      	b.n	800488c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004866:	893b      	ldrh	r3, [r7, #8]
 8004868:	b2da      	uxtb	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2200      	movs	r2, #0
 8004878:	2180      	movs	r1, #128	; 0x80
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f830 	bl	80048e0 <I2C_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	80002000 	.word	0x80002000

08004898 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d103      	bne.n	80048b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2200      	movs	r2, #0
 80048b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d007      	beq.n	80048d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	619a      	str	r2, [r3, #24]
  }
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f0:	e022      	b.n	8004938 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d01e      	beq.n	8004938 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fa:	f7fe fc3f 	bl	800317c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d113      	bne.n	8004938 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e00f      	b.n	8004958 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4013      	ands	r3, r2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	429a      	cmp	r2, r3
 8004954:	d0cd      	beq.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800496c:	e02c      	b.n	80049c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f8ea 	bl	8004b4c <I2C_IsErrorOccurred>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e02a      	b.n	80049d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004988:	d01e      	beq.n	80049c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498a:	f7fe fbf7 	bl	800317c <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	d302      	bcc.n	80049a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d113      	bne.n	80049c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e007      	b.n	80049d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d1cb      	bne.n	800496e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049ec:	e028      	b.n	8004a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f8aa 	bl	8004b4c <I2C_IsErrorOccurred>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e026      	b.n	8004a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a02:	f7fe fbbb 	bl	800317c <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d302      	bcc.n	8004a18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d113      	bne.n	8004a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e007      	b.n	8004a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d1cf      	bne.n	80049ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a64:	e064      	b.n	8004b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f86e 	bl	8004b4c <I2C_IsErrorOccurred>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e062      	b.n	8004b40 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d138      	bne.n	8004afa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d105      	bne.n	8004aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e04e      	b.n	8004b40 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d107      	bne.n	8004ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2210      	movs	r2, #16
 8004ab6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2204      	movs	r2, #4
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44
 8004abe:	e002      	b.n	8004ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2220      	movs	r2, #32
 8004acc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6859      	ldr	r1, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004ada:	400b      	ands	r3, r1
 8004adc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e022      	b.n	8004b40 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afa:	f7fe fb3f 	bl	800317c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10f      	bne.n	8004b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b14:	f043 0220 	orr.w	r2, r3, #32
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e007      	b.n	8004b40 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d193      	bne.n	8004a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	fe00e800 	.word	0xfe00e800

08004b4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d068      	beq.n	8004c4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2210      	movs	r2, #16
 8004b7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b80:	e049      	b.n	8004c16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d045      	beq.n	8004c16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b8a:	f7fe faf7 	bl	800317c <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <I2C_IsErrorOccurred+0x54>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d13a      	bne.n	8004c16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004baa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc2:	d121      	bne.n	8004c08 <I2C_IsErrorOccurred+0xbc>
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bca:	d01d      	beq.n	8004c08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d01a      	beq.n	8004c08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004be0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004be2:	f7fe facb 	bl	800317c <HAL_GetTick>
 8004be6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004be8:	e00e      	b.n	8004c08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004bea:	f7fe fac7 	bl	800317c <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b19      	cmp	r3, #25
 8004bf6:	d907      	bls.n	8004c08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	f043 0320 	orr.w	r3, r3, #32
 8004bfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004c06:	e006      	b.n	8004c16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d1e9      	bne.n	8004bea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d003      	beq.n	8004c2c <I2C_IsErrorOccurred+0xe0>
 8004c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0aa      	beq.n	8004b82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	f043 0304 	orr.w	r3, r3, #4
 8004c42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00b      	beq.n	8004c96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f043 0308 	orr.w	r3, r3, #8
 8004c84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	f043 0302 	orr.w	r3, r3, #2
 8004ca6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01c      	beq.n	8004cfa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff fde9 	bl	8004898 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <I2C_IsErrorOccurred+0x1bc>)
 8004cd2:	400b      	ands	r3, r1
 8004cd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3728      	adds	r7, #40	; 0x28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	fe00e800 	.word	0xfe00e800

08004d0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	817b      	strh	r3, [r7, #10]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d1e:	897b      	ldrh	r3, [r7, #10]
 8004d20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d24:	7a7b      	ldrb	r3, [r7, #9]
 8004d26:	041b      	lsls	r3, r3, #16
 8004d28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	0d5b      	lsrs	r3, r3, #21
 8004d46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004d4a:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <I2C_TransferConfig+0x60>)
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	ea02 0103 	and.w	r1, r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	03ff63ff 	.word	0x03ff63ff

08004d70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d138      	bne.n	8004df8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e032      	b.n	8004dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2224      	movs	r2, #36	; 0x24
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	e000      	b.n	8004dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004df8:	2302      	movs	r3, #2
  }
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d139      	bne.n	8004e90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e033      	b.n	8004e92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2224      	movs	r2, #36	; 0x24
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eae:	6013      	str	r3, [r2, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40007000 	.word	0x40007000

08004ec0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004eca:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed6:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ee2:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1d      	ldr	r2, [pc, #116]	; (8004f5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004eee:	f7fe f945 	bl	800317c <HAL_GetTick>
 8004ef2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ef4:	e009      	b.n	8004f0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ef6:	f7fe f941 	bl	800317c <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f04:	d901      	bls.n	8004f0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e022      	b.n	8004f50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f0a:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f16:	d1ee      	bne.n	8004ef6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f24:	f7fe f92a 	bl	800317c <HAL_GetTick>
 8004f28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f2a:	e009      	b.n	8004f40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f2c:	f7fe f926 	bl	800317c <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f3a:	d901      	bls.n	8004f40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e007      	b.n	8004f50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f4c:	d1ee      	bne.n	8004f2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40007000 	.word	0x40007000

08004f60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e291      	b.n	800549a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8087 	beq.w	8005092 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f84:	4b96      	ldr	r3, [pc, #600]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d00c      	beq.n	8004faa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f90:	4b93      	ldr	r3, [pc, #588]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 030c 	and.w	r3, r3, #12
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d112      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x62>
 8004f9c:	4b90      	ldr	r3, [pc, #576]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004faa:	4b8d      	ldr	r3, [pc, #564]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d06c      	beq.n	8005090 <HAL_RCC_OscConfig+0x130>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d168      	bne.n	8005090 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e26b      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fca:	d106      	bne.n	8004fda <HAL_RCC_OscConfig+0x7a>
 8004fcc:	4b84      	ldr	r3, [pc, #528]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a83      	ldr	r2, [pc, #524]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8004fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	e02e      	b.n	8005038 <HAL_RCC_OscConfig+0xd8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10c      	bne.n	8004ffc <HAL_RCC_OscConfig+0x9c>
 8004fe2:	4b7f      	ldr	r3, [pc, #508]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a7e      	ldr	r2, [pc, #504]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8004fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	4b7c      	ldr	r3, [pc, #496]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a7b      	ldr	r2, [pc, #492]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8004ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e01d      	b.n	8005038 <HAL_RCC_OscConfig+0xd8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0xc0>
 8005006:	4b76      	ldr	r3, [pc, #472]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a75      	ldr	r2, [pc, #468]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 800500c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b73      	ldr	r3, [pc, #460]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a72      	ldr	r2, [pc, #456]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e00b      	b.n	8005038 <HAL_RCC_OscConfig+0xd8>
 8005020:	4b6f      	ldr	r3, [pc, #444]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a6e      	ldr	r2, [pc, #440]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b6c      	ldr	r3, [pc, #432]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a6b      	ldr	r2, [pc, #428]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d013      	beq.n	8005068 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fe f89c 	bl	800317c <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005048:	f7fe f898 	bl	800317c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e21f      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	4b61      	ldr	r3, [pc, #388]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0xe8>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fe f888 	bl	800317c <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005070:	f7fe f884 	bl	800317c <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e20b      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005082:	4b57      	ldr	r3, [pc, #348]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x110>
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d069      	beq.n	8005172 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800509e:	4b50      	ldr	r3, [pc, #320]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050aa:	4b4d      	ldr	r3, [pc, #308]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d11c      	bne.n	80050f0 <HAL_RCC_OscConfig+0x190>
 80050b6:	4b4a      	ldr	r3, [pc, #296]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d116      	bne.n	80050f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c2:	4b47      	ldr	r3, [pc, #284]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_RCC_OscConfig+0x17a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d001      	beq.n	80050da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e1df      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050da:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	493d      	ldr	r1, [pc, #244]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ee:	e040      	b.n	8005172 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d023      	beq.n	8005140 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f8:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a38      	ldr	r2, [pc, #224]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fe f83a 	bl	800317c <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510c:	f7fe f836 	bl	800317c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e1bd      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511e:	4b30      	ldr	r3, [pc, #192]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512a:	4b2d      	ldr	r3, [pc, #180]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4929      	ldr	r1, [pc, #164]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]
 800513e:	e018      	b.n	8005172 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005140:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a26      	ldr	r2, [pc, #152]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fe f816 	bl	800317c <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005154:	f7fe f812 	bl	800317c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e199      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005166:	4b1e      	ldr	r3, [pc, #120]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d038      	beq.n	80051f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d019      	beq.n	80051ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005186:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 8005188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518a:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 800518c:	f043 0301 	orr.w	r3, r3, #1
 8005190:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005192:	f7fd fff3 	bl	800317c <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800519a:	f7fd ffef 	bl	800317c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e176      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ac:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 80051ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x23a>
 80051b8:	e01a      	b.n	80051f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 80051bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051be:	4a08      	ldr	r2, [pc, #32]	; (80051e0 <HAL_RCC_OscConfig+0x280>)
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c6:	f7fd ffd9 	bl	800317c <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051cc:	e00a      	b.n	80051e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ce:	f7fd ffd5 	bl	800317c <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d903      	bls.n	80051e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e15c      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
 80051e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e4:	4b91      	ldr	r3, [pc, #580]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80051e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1ee      	bne.n	80051ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80a4 	beq.w	8005346 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fe:	4b8b      	ldr	r3, [pc, #556]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10d      	bne.n	8005226 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800520a:	4b88      	ldr	r3, [pc, #544]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	4a87      	ldr	r2, [pc, #540]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005214:	6413      	str	r3, [r2, #64]	; 0x40
 8005216:	4b85      	ldr	r3, [pc, #532]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005222:	2301      	movs	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005226:	4b82      	ldr	r3, [pc, #520]	; (8005430 <HAL_RCC_OscConfig+0x4d0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d118      	bne.n	8005264 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005232:	4b7f      	ldr	r3, [pc, #508]	; (8005430 <HAL_RCC_OscConfig+0x4d0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a7e      	ldr	r2, [pc, #504]	; (8005430 <HAL_RCC_OscConfig+0x4d0>)
 8005238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523e:	f7fd ff9d 	bl	800317c <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005246:	f7fd ff99 	bl	800317c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b64      	cmp	r3, #100	; 0x64
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e120      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005258:	4b75      	ldr	r3, [pc, #468]	; (8005430 <HAL_RCC_OscConfig+0x4d0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d106      	bne.n	800527a <HAL_RCC_OscConfig+0x31a>
 800526c:	4b6f      	ldr	r3, [pc, #444]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	4a6e      	ldr	r2, [pc, #440]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	6713      	str	r3, [r2, #112]	; 0x70
 8005278:	e02d      	b.n	80052d6 <HAL_RCC_OscConfig+0x376>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10c      	bne.n	800529c <HAL_RCC_OscConfig+0x33c>
 8005282:	4b6a      	ldr	r3, [pc, #424]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005286:	4a69      	ldr	r2, [pc, #420]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005288:	f023 0301 	bic.w	r3, r3, #1
 800528c:	6713      	str	r3, [r2, #112]	; 0x70
 800528e:	4b67      	ldr	r3, [pc, #412]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	4a66      	ldr	r2, [pc, #408]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005294:	f023 0304 	bic.w	r3, r3, #4
 8005298:	6713      	str	r3, [r2, #112]	; 0x70
 800529a:	e01c      	b.n	80052d6 <HAL_RCC_OscConfig+0x376>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b05      	cmp	r3, #5
 80052a2:	d10c      	bne.n	80052be <HAL_RCC_OscConfig+0x35e>
 80052a4:	4b61      	ldr	r3, [pc, #388]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	4a60      	ldr	r2, [pc, #384]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80052aa:	f043 0304 	orr.w	r3, r3, #4
 80052ae:	6713      	str	r3, [r2, #112]	; 0x70
 80052b0:	4b5e      	ldr	r3, [pc, #376]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	4a5d      	ldr	r2, [pc, #372]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	6713      	str	r3, [r2, #112]	; 0x70
 80052bc:	e00b      	b.n	80052d6 <HAL_RCC_OscConfig+0x376>
 80052be:	4b5b      	ldr	r3, [pc, #364]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	4a5a      	ldr	r2, [pc, #360]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ca:	4b58      	ldr	r3, [pc, #352]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	4a57      	ldr	r2, [pc, #348]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d015      	beq.n	800530a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052de:	f7fd ff4d 	bl	800317c <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e4:	e00a      	b.n	80052fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e6:	f7fd ff49 	bl	800317c <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e0ce      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fc:	4b4b      	ldr	r3, [pc, #300]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0ee      	beq.n	80052e6 <HAL_RCC_OscConfig+0x386>
 8005308:	e014      	b.n	8005334 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530a:	f7fd ff37 	bl	800317c <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005310:	e00a      	b.n	8005328 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005312:	f7fd ff33 	bl	800317c <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0b8      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005328:	4b40      	ldr	r3, [pc, #256]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ee      	bne.n	8005312 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4b3c      	ldr	r3, [pc, #240]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	4a3b      	ldr	r2, [pc, #236]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005344:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 80a4 	beq.w	8005498 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005350:	4b36      	ldr	r3, [pc, #216]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	2b08      	cmp	r3, #8
 800535a:	d06b      	beq.n	8005434 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d149      	bne.n	80053f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005364:	4b31      	ldr	r3, [pc, #196]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a30      	ldr	r2, [pc, #192]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 800536a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800536e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fd ff04 	bl	800317c <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005378:	f7fd ff00 	bl	800317c <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e087      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	4b28      	ldr	r3, [pc, #160]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69da      	ldr	r2, [r3, #28]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	019b      	lsls	r3, r3, #6
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	3b01      	subs	r3, #1
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	061b      	lsls	r3, r3, #24
 80053ba:	4313      	orrs	r3, r2
 80053bc:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80053be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c4:	4b19      	ldr	r3, [pc, #100]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a18      	ldr	r2, [pc, #96]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80053ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fd fed4 	bl	800317c <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fd fed0 	bl	800317c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e057      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ea:	4b10      	ldr	r3, [pc, #64]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x478>
 80053f6:	e04f      	b.n	8005498 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f8:	4b0c      	ldr	r3, [pc, #48]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a0b      	ldr	r2, [pc, #44]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 80053fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fd feba 	bl	800317c <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540c:	f7fd feb6 	bl	800317c <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e03d      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541e:	4b03      	ldr	r3, [pc, #12]	; (800542c <HAL_RCC_OscConfig+0x4cc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0x4ac>
 800542a:	e035      	b.n	8005498 <HAL_RCC_OscConfig+0x538>
 800542c:	40023800 	.word	0x40023800
 8005430:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005434:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <HAL_RCC_OscConfig+0x544>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d028      	beq.n	8005494 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800544c:	429a      	cmp	r2, r3
 800544e:	d121      	bne.n	8005494 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545a:	429a      	cmp	r2, r3
 800545c:	d11a      	bne.n	8005494 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005464:	4013      	ands	r3, r2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800546a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800546c:	4293      	cmp	r3, r2
 800546e:	d111      	bne.n	8005494 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	3b01      	subs	r3, #1
 800547e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005480:	429a      	cmp	r2, r3
 8005482:	d107      	bne.n	8005494 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005490:	429a      	cmp	r2, r3
 8005492:	d001      	beq.n	8005498 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40023800 	.word	0x40023800

080054a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0d0      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054c0:	4b6a      	ldr	r3, [pc, #424]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d910      	bls.n	80054f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ce:	4b67      	ldr	r3, [pc, #412]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f023 020f 	bic.w	r2, r3, #15
 80054d6:	4965      	ldr	r1, [pc, #404]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	4b63      	ldr	r3, [pc, #396]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0b8      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d020      	beq.n	800553e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005508:	4b59      	ldr	r3, [pc, #356]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4a58      	ldr	r2, [pc, #352]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 800550e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005512:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005520:	4b53      	ldr	r3, [pc, #332]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	4a52      	ldr	r2, [pc, #328]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 8005526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800552a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800552c:	4b50      	ldr	r3, [pc, #320]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	494d      	ldr	r1, [pc, #308]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 800553a:	4313      	orrs	r3, r2
 800553c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d040      	beq.n	80055cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d107      	bne.n	8005562 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005552:	4b47      	ldr	r3, [pc, #284]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d115      	bne.n	800558a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e07f      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d107      	bne.n	800557a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800556a:	4b41      	ldr	r3, [pc, #260]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e073      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557a:	4b3d      	ldr	r3, [pc, #244]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e06b      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800558a:	4b39      	ldr	r3, [pc, #228]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f023 0203 	bic.w	r2, r3, #3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4936      	ldr	r1, [pc, #216]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 8005598:	4313      	orrs	r3, r2
 800559a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559c:	f7fd fdee 	bl	800317c <HAL_GetTick>
 80055a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a2:	e00a      	b.n	80055ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a4:	f7fd fdea 	bl	800317c <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e053      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ba:	4b2d      	ldr	r3, [pc, #180]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 020c 	and.w	r2, r3, #12
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d1eb      	bne.n	80055a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055cc:	4b27      	ldr	r3, [pc, #156]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d210      	bcs.n	80055fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055da:	4b24      	ldr	r3, [pc, #144]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f023 020f 	bic.w	r2, r3, #15
 80055e2:	4922      	ldr	r1, [pc, #136]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ea:	4b20      	ldr	r3, [pc, #128]	; (800566c <HAL_RCC_ClockConfig+0x1c4>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e032      	b.n	8005662 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005608:	4b19      	ldr	r3, [pc, #100]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4916      	ldr	r1, [pc, #88]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 8005616:	4313      	orrs	r3, r2
 8005618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005626:	4b12      	ldr	r3, [pc, #72]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	490e      	ldr	r1, [pc, #56]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 8005636:	4313      	orrs	r3, r2
 8005638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800563a:	f000 f821 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 800563e:	4602      	mov	r2, r0
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_RCC_ClockConfig+0x1c8>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	490a      	ldr	r1, [pc, #40]	; (8005674 <HAL_RCC_ClockConfig+0x1cc>)
 800564c:	5ccb      	ldrb	r3, [r1, r3]
 800564e:	fa22 f303 	lsr.w	r3, r2, r3
 8005652:	4a09      	ldr	r2, [pc, #36]	; (8005678 <HAL_RCC_ClockConfig+0x1d0>)
 8005654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005656:	4b09      	ldr	r3, [pc, #36]	; (800567c <HAL_RCC_ClockConfig+0x1d4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f7fd fd4a 	bl	80030f4 <HAL_InitTick>

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40023c00 	.word	0x40023c00
 8005670:	40023800 	.word	0x40023800
 8005674:	0800d184 	.word	0x0800d184
 8005678:	20000010 	.word	0x20000010
 800567c:	20000014 	.word	0x20000014

08005680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005684:	b094      	sub	sp, #80	; 0x50
 8005686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	647b      	str	r3, [r7, #68]	; 0x44
 800568c:	2300      	movs	r3, #0
 800568e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005690:	2300      	movs	r3, #0
 8005692:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005698:	4b79      	ldr	r3, [pc, #484]	; (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 030c 	and.w	r3, r3, #12
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d00d      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0x40>
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	f200 80e1 	bhi.w	800586c <HAL_RCC_GetSysClockFreq+0x1ec>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_RCC_GetSysClockFreq+0x34>
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d003      	beq.n	80056ba <HAL_RCC_GetSysClockFreq+0x3a>
 80056b2:	e0db      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056b4:	4b73      	ldr	r3, [pc, #460]	; (8005884 <HAL_RCC_GetSysClockFreq+0x204>)
 80056b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056b8:	e0db      	b.n	8005872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056ba:	4b73      	ldr	r3, [pc, #460]	; (8005888 <HAL_RCC_GetSysClockFreq+0x208>)
 80056bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056be:	e0d8      	b.n	8005872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056c0:	4b6f      	ldr	r3, [pc, #444]	; (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80056ca:	4b6d      	ldr	r3, [pc, #436]	; (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d063      	beq.n	800579e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d6:	4b6a      	ldr	r3, [pc, #424]	; (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	099b      	lsrs	r3, r3, #6
 80056dc:	2200      	movs	r2, #0
 80056de:	63bb      	str	r3, [r7, #56]	; 0x38
 80056e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ea:	2300      	movs	r3, #0
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
 80056ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056f2:	4622      	mov	r2, r4
 80056f4:	462b      	mov	r3, r5
 80056f6:	f04f 0000 	mov.w	r0, #0
 80056fa:	f04f 0100 	mov.w	r1, #0
 80056fe:	0159      	lsls	r1, r3, #5
 8005700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005704:	0150      	lsls	r0, r2, #5
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4621      	mov	r1, r4
 800570c:	1a51      	subs	r1, r2, r1
 800570e:	6139      	str	r1, [r7, #16]
 8005710:	4629      	mov	r1, r5
 8005712:	eb63 0301 	sbc.w	r3, r3, r1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005724:	4659      	mov	r1, fp
 8005726:	018b      	lsls	r3, r1, #6
 8005728:	4651      	mov	r1, sl
 800572a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800572e:	4651      	mov	r1, sl
 8005730:	018a      	lsls	r2, r1, #6
 8005732:	4651      	mov	r1, sl
 8005734:	ebb2 0801 	subs.w	r8, r2, r1
 8005738:	4659      	mov	r1, fp
 800573a:	eb63 0901 	sbc.w	r9, r3, r1
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800574a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800574e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005752:	4690      	mov	r8, r2
 8005754:	4699      	mov	r9, r3
 8005756:	4623      	mov	r3, r4
 8005758:	eb18 0303 	adds.w	r3, r8, r3
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	462b      	mov	r3, r5
 8005760:	eb49 0303 	adc.w	r3, r9, r3
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005772:	4629      	mov	r1, r5
 8005774:	024b      	lsls	r3, r1, #9
 8005776:	4621      	mov	r1, r4
 8005778:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800577c:	4621      	mov	r1, r4
 800577e:	024a      	lsls	r2, r1, #9
 8005780:	4610      	mov	r0, r2
 8005782:	4619      	mov	r1, r3
 8005784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005786:	2200      	movs	r2, #0
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
 800578a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800578c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005790:	f7fb fa84 	bl	8000c9c <__aeabi_uldivmod>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4613      	mov	r3, r2
 800579a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800579c:	e058      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800579e:	4b38      	ldr	r3, [pc, #224]	; (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	099b      	lsrs	r3, r3, #6
 80057a4:	2200      	movs	r2, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	4611      	mov	r1, r2
 80057aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ae:	623b      	str	r3, [r7, #32]
 80057b0:	2300      	movs	r3, #0
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
 80057b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	f04f 0000 	mov.w	r0, #0
 80057c0:	f04f 0100 	mov.w	r1, #0
 80057c4:	0159      	lsls	r1, r3, #5
 80057c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ca:	0150      	lsls	r0, r2, #5
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4641      	mov	r1, r8
 80057d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80057d6:	4649      	mov	r1, r9
 80057d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057f0:	ebb2 040a 	subs.w	r4, r2, sl
 80057f4:	eb63 050b 	sbc.w	r5, r3, fp
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	00eb      	lsls	r3, r5, #3
 8005802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005806:	00e2      	lsls	r2, r4, #3
 8005808:	4614      	mov	r4, r2
 800580a:	461d      	mov	r5, r3
 800580c:	4643      	mov	r3, r8
 800580e:	18e3      	adds	r3, r4, r3
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	464b      	mov	r3, r9
 8005814:	eb45 0303 	adc.w	r3, r5, r3
 8005818:	607b      	str	r3, [r7, #4]
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005826:	4629      	mov	r1, r5
 8005828:	028b      	lsls	r3, r1, #10
 800582a:	4621      	mov	r1, r4
 800582c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005830:	4621      	mov	r1, r4
 8005832:	028a      	lsls	r2, r1, #10
 8005834:	4610      	mov	r0, r2
 8005836:	4619      	mov	r1, r3
 8005838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800583a:	2200      	movs	r2, #0
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	61fa      	str	r2, [r7, #28]
 8005840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005844:	f7fb fa2a 	bl	8000c9c <__aeabi_uldivmod>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4613      	mov	r3, r2
 800584e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005850:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <HAL_RCC_GetSysClockFreq+0x200>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	0c1b      	lsrs	r3, r3, #16
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	3301      	adds	r3, #1
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005860:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800586a:	e002      	b.n	8005872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800586c:	4b05      	ldr	r3, [pc, #20]	; (8005884 <HAL_RCC_GetSysClockFreq+0x204>)
 800586e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005874:	4618      	mov	r0, r3
 8005876:	3750      	adds	r7, #80	; 0x50
 8005878:	46bd      	mov	sp, r7
 800587a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800587e:	bf00      	nop
 8005880:	40023800 	.word	0x40023800
 8005884:	00f42400 	.word	0x00f42400
 8005888:	007a1200 	.word	0x007a1200

0800588c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005890:	4b03      	ldr	r3, [pc, #12]	; (80058a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005892:	681b      	ldr	r3, [r3, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000010 	.word	0x20000010

080058a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058a8:	f7ff fff0 	bl	800588c <HAL_RCC_GetHCLKFreq>
 80058ac:	4602      	mov	r2, r0
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	0a9b      	lsrs	r3, r3, #10
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	4903      	ldr	r1, [pc, #12]	; (80058c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ba:	5ccb      	ldrb	r3, [r1, r3]
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40023800 	.word	0x40023800
 80058c8:	0800d194 	.word	0x0800d194

080058cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058d0:	f7ff ffdc 	bl	800588c <HAL_RCC_GetHCLKFreq>
 80058d4:	4602      	mov	r2, r0
 80058d6:	4b05      	ldr	r3, [pc, #20]	; (80058ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	0b5b      	lsrs	r3, r3, #13
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	4903      	ldr	r1, [pc, #12]	; (80058f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058e2:	5ccb      	ldrb	r3, [r1, r3]
 80058e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40023800 	.word	0x40023800
 80058f0:	0800d194 	.word	0x0800d194

080058f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d012      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800591c:	4b69      	ldr	r3, [pc, #420]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4a68      	ldr	r2, [pc, #416]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005922:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005926:	6093      	str	r3, [r2, #8]
 8005928:	4b66      	ldr	r3, [pc, #408]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	4964      	ldr	r1, [pc, #400]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800593e:	2301      	movs	r3, #1
 8005940:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d017      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800594e:	4b5d      	ldr	r3, [pc, #372]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595c:	4959      	ldr	r1, [pc, #356]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800596c:	d101      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800596e:	2301      	movs	r3, #1
 8005970:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800597a:	2301      	movs	r3, #1
 800597c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d017      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800598a:	4b4e      	ldr	r3, [pc, #312]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005990:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	494a      	ldr	r1, [pc, #296]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059a8:	d101      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80059aa:	2301      	movs	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80059b6:	2301      	movs	r3, #1
 80059b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80059c6:	2301      	movs	r3, #1
 80059c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 808b 	beq.w	8005aee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059d8:	4b3a      	ldr	r3, [pc, #232]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	4a39      	ldr	r2, [pc, #228]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e2:	6413      	str	r3, [r2, #64]	; 0x40
 80059e4:	4b37      	ldr	r3, [pc, #220]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059f0:	4b35      	ldr	r3, [pc, #212]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a34      	ldr	r2, [pc, #208]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059fc:	f7fd fbbe 	bl	800317c <HAL_GetTick>
 8005a00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a04:	f7fd fbba 	bl	800317c <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b64      	cmp	r3, #100	; 0x64
 8005a10:	d901      	bls.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e357      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a16:	4b2c      	ldr	r3, [pc, #176]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f0      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a22:	4b28      	ldr	r3, [pc, #160]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d035      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d02e      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a40:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a4a:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a56:	4b1b      	ldr	r3, [pc, #108]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5a:	4a1a      	ldr	r2, [pc, #104]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005a62:	4a18      	ldr	r2, [pc, #96]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a68:	4b16      	ldr	r3, [pc, #88]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d114      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fd fb82 	bl	800317c <HAL_GetTick>
 8005a78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a7a:	e00a      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a7c:	f7fd fb7e 	bl	800317c <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e319      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a92:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0ee      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aaa:	d111      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005aac:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ab8:	4b04      	ldr	r3, [pc, #16]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005aba:	400b      	ands	r3, r1
 8005abc:	4901      	ldr	r1, [pc, #4]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
 8005ac2:	e00b      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	40007000 	.word	0x40007000
 8005acc:	0ffffcff 	.word	0x0ffffcff
 8005ad0:	4baa      	ldr	r3, [pc, #680]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	4aa9      	ldr	r2, [pc, #676]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ada:	6093      	str	r3, [r2, #8]
 8005adc:	4ba7      	ldr	r3, [pc, #668]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ade:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae8:	49a4      	ldr	r1, [pc, #656]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d010      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005afa:	4ba0      	ldr	r3, [pc, #640]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b00:	4a9e      	ldr	r2, [pc, #632]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b0a:	4b9c      	ldr	r3, [pc, #624]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	4999      	ldr	r1, [pc, #612]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b28:	4b94      	ldr	r3, [pc, #592]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b36:	4991      	ldr	r1, [pc, #580]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b4a:	4b8c      	ldr	r3, [pc, #560]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b58:	4988      	ldr	r1, [pc, #544]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b6c:	4b83      	ldr	r3, [pc, #524]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b7a:	4980      	ldr	r1, [pc, #512]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b8e:	4b7b      	ldr	r3, [pc, #492]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9c:	4977      	ldr	r1, [pc, #476]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bb0:	4b72      	ldr	r3, [pc, #456]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb6:	f023 0203 	bic.w	r2, r3, #3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	496f      	ldr	r1, [pc, #444]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bd2:	4b6a      	ldr	r3, [pc, #424]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd8:	f023 020c 	bic.w	r2, r3, #12
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be0:	4966      	ldr	r1, [pc, #408]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bf4:	4b61      	ldr	r3, [pc, #388]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c02:	495e      	ldr	r1, [pc, #376]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c16:	4b59      	ldr	r3, [pc, #356]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c24:	4955      	ldr	r1, [pc, #340]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c38:	4b50      	ldr	r3, [pc, #320]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c46:	494d      	ldr	r1, [pc, #308]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005c5a:	4b48      	ldr	r3, [pc, #288]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c68:	4944      	ldr	r1, [pc, #272]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c7c:	4b3f      	ldr	r3, [pc, #252]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8a:	493c      	ldr	r1, [pc, #240]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005c9e:	4b37      	ldr	r3, [pc, #220]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cac:	4933      	ldr	r1, [pc, #204]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005cc0:	4b2e      	ldr	r3, [pc, #184]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cce:	492b      	ldr	r1, [pc, #172]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d011      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ce2:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf0:	4922      	ldr	r1, [pc, #136]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d00:	d101      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005d02:	2301      	movs	r3, #1
 8005d04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005d12:	2301      	movs	r3, #1
 8005d14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d30:	4912      	ldr	r1, [pc, #72]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d44:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d54:	4909      	ldr	r1, [pc, #36]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d006      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80d9 	beq.w	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d70:	4b02      	ldr	r3, [pc, #8]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a01      	ldr	r2, [pc, #4]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d7a:	e001      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d82:	f7fd f9fb 	bl	800317c <HAL_GetTick>
 8005d86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d88:	e008      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d8a:	f7fd f9f7 	bl	800317c <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b64      	cmp	r3, #100	; 0x64
 8005d96:	d901      	bls.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e194      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d9c:	4b6c      	ldr	r3, [pc, #432]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1f0      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d021      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d11d      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005dbc:	4b64      	ldr	r3, [pc, #400]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc2:	0c1b      	lsrs	r3, r3, #16
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dca:	4b61      	ldr	r3, [pc, #388]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd0:	0e1b      	lsrs	r3, r3, #24
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	019a      	lsls	r2, r3, #6
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	041b      	lsls	r3, r3, #16
 8005de2:	431a      	orrs	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	061b      	lsls	r3, r3, #24
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	071b      	lsls	r3, r3, #28
 8005df0:	4957      	ldr	r1, [pc, #348]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e0c:	d00a      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d02e      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e22:	d129      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e24:	4b4a      	ldr	r3, [pc, #296]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2a:	0c1b      	lsrs	r3, r3, #16
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e32:	4b47      	ldr	r3, [pc, #284]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e38:	0f1b      	lsrs	r3, r3, #28
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	019a      	lsls	r2, r3, #6
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	041b      	lsls	r3, r3, #16
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	061b      	lsls	r3, r3, #24
 8005e52:	431a      	orrs	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	071b      	lsls	r3, r3, #28
 8005e58:	493d      	ldr	r1, [pc, #244]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e60:	4b3b      	ldr	r3, [pc, #236]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e66:	f023 021f 	bic.w	r2, r3, #31
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	4937      	ldr	r1, [pc, #220]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01d      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e84:	4b32      	ldr	r3, [pc, #200]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8a:	0e1b      	lsrs	r3, r3, #24
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e92:	4b2f      	ldr	r3, [pc, #188]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e98:	0f1b      	lsrs	r3, r3, #28
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	019a      	lsls	r2, r3, #6
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	041b      	lsls	r3, r3, #16
 8005eac:	431a      	orrs	r2, r3
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	061b      	lsls	r3, r3, #24
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	071b      	lsls	r3, r3, #28
 8005eb8:	4925      	ldr	r1, [pc, #148]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d011      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	019a      	lsls	r2, r3, #6
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	041b      	lsls	r3, r3, #16
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	061b      	lsls	r3, r3, #24
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	071b      	lsls	r3, r3, #28
 8005ee8:	4919      	ldr	r1, [pc, #100]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ef0:	4b17      	ldr	r3, [pc, #92]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a16      	ldr	r2, [pc, #88]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ef6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005efc:	f7fd f93e 	bl	800317c <HAL_GetTick>
 8005f00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f04:	f7fd f93a 	bl	800317c <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b64      	cmp	r3, #100	; 0x64
 8005f10:	d901      	bls.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e0d7      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f16:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	f040 80cd 	bne.w	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f36:	f7fd f921 	bl	800317c <HAL_GetTick>
 8005f3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f3e:	f7fd f91d 	bl	800317c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b64      	cmp	r3, #100	; 0x64
 8005f4a:	d903      	bls.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e0ba      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005f50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f54:	4b5e      	ldr	r3, [pc, #376]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f60:	d0ed      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d02e      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d12a      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f8a:	4b51      	ldr	r3, [pc, #324]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f98:	4b4d      	ldr	r3, [pc, #308]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9e:	0f1b      	lsrs	r3, r3, #28
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	019a      	lsls	r2, r3, #6
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	041b      	lsls	r3, r3, #16
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	061b      	lsls	r3, r3, #24
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	071b      	lsls	r3, r3, #28
 8005fbe:	4944      	ldr	r1, [pc, #272]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005fc6:	4b42      	ldr	r3, [pc, #264]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	493d      	ldr	r1, [pc, #244]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d022      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ff4:	d11d      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ff6:	4b36      	ldr	r3, [pc, #216]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	0e1b      	lsrs	r3, r3, #24
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006004:	4b32      	ldr	r3, [pc, #200]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600a:	0f1b      	lsrs	r3, r3, #28
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	019a      	lsls	r2, r3, #6
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	431a      	orrs	r2, r3
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	061b      	lsls	r3, r3, #24
 8006024:	431a      	orrs	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	071b      	lsls	r3, r3, #28
 800602a:	4929      	ldr	r1, [pc, #164]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d028      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800603e:	4b24      	ldr	r3, [pc, #144]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006044:	0e1b      	lsrs	r3, r3, #24
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800604c:	4b20      	ldr	r3, [pc, #128]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	0c1b      	lsrs	r3, r3, #16
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	019a      	lsls	r2, r3, #6
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	431a      	orrs	r2, r3
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	061b      	lsls	r3, r3, #24
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	071b      	lsls	r3, r3, #28
 8006072:	4917      	ldr	r1, [pc, #92]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006074:	4313      	orrs	r3, r2
 8006076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800607a:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800607c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006080:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	4911      	ldr	r1, [pc, #68]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006090:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a0e      	ldr	r2, [pc, #56]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800609c:	f7fd f86e 	bl	800317c <HAL_GetTick>
 80060a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80060a4:	f7fd f86a 	bl	800317c <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b64      	cmp	r3, #100	; 0x64
 80060b0:	d901      	bls.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e007      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060b6:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c2:	d1ef      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3720      	adds	r7, #32
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40023800 	.word	0x40023800

080060d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e049      	b.n	800617a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fc fe60 	bl	8002dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f000 fd26 	bl	8006b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	d001      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e054      	b.n	8006246 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a26      	ldr	r2, [pc, #152]	; (8006254 <HAL_TIM_Base_Start_IT+0xd0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d022      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c6:	d01d      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a22      	ldr	r2, [pc, #136]	; (8006258 <HAL_TIM_Base_Start_IT+0xd4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d018      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a21      	ldr	r2, [pc, #132]	; (800625c <HAL_TIM_Base_Start_IT+0xd8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d013      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1f      	ldr	r2, [pc, #124]	; (8006260 <HAL_TIM_Base_Start_IT+0xdc>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00e      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1e      	ldr	r2, [pc, #120]	; (8006264 <HAL_TIM_Base_Start_IT+0xe0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d009      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1c      	ldr	r2, [pc, #112]	; (8006268 <HAL_TIM_Base_Start_IT+0xe4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1b      	ldr	r2, [pc, #108]	; (800626c <HAL_TIM_Base_Start_IT+0xe8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d115      	bne.n	8006230 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	4b19      	ldr	r3, [pc, #100]	; (8006270 <HAL_TIM_Base_Start_IT+0xec>)
 800620c:	4013      	ands	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b06      	cmp	r3, #6
 8006214:	d015      	beq.n	8006242 <HAL_TIM_Base_Start_IT+0xbe>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621c:	d011      	beq.n	8006242 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0201 	orr.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622e:	e008      	b.n	8006242 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	e000      	b.n	8006244 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40010000 	.word	0x40010000
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	40010400 	.word	0x40010400
 8006268:	40014000 	.word	0x40014000
 800626c:	40001800 	.word	0x40001800
 8006270:	00010007 	.word	0x00010007

08006274 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e049      	b.n	800631a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fc fd70 	bl	8002d80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	4610      	mov	r0, r2
 80062b4:	f000 fc56 	bl	8006b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d109      	bne.n	8006348 <HAL_TIM_PWM_Start+0x24>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b01      	cmp	r3, #1
 800633e:	bf14      	ite	ne
 8006340:	2301      	movne	r3, #1
 8006342:	2300      	moveq	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	e03c      	b.n	80063c2 <HAL_TIM_PWM_Start+0x9e>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2b04      	cmp	r3, #4
 800634c:	d109      	bne.n	8006362 <HAL_TIM_PWM_Start+0x3e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b01      	cmp	r3, #1
 8006358:	bf14      	ite	ne
 800635a:	2301      	movne	r3, #1
 800635c:	2300      	moveq	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	e02f      	b.n	80063c2 <HAL_TIM_PWM_Start+0x9e>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d109      	bne.n	800637c <HAL_TIM_PWM_Start+0x58>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	bf14      	ite	ne
 8006374:	2301      	movne	r3, #1
 8006376:	2300      	moveq	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	e022      	b.n	80063c2 <HAL_TIM_PWM_Start+0x9e>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b0c      	cmp	r3, #12
 8006380:	d109      	bne.n	8006396 <HAL_TIM_PWM_Start+0x72>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	bf14      	ite	ne
 800638e:	2301      	movne	r3, #1
 8006390:	2300      	moveq	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	e015      	b.n	80063c2 <HAL_TIM_PWM_Start+0x9e>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b10      	cmp	r3, #16
 800639a:	d109      	bne.n	80063b0 <HAL_TIM_PWM_Start+0x8c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	bf14      	ite	ne
 80063a8:	2301      	movne	r3, #1
 80063aa:	2300      	moveq	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e008      	b.n	80063c2 <HAL_TIM_PWM_Start+0x9e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	bf14      	ite	ne
 80063bc:	2301      	movne	r3, #1
 80063be:	2300      	moveq	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e092      	b.n	80064f0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d104      	bne.n	80063da <HAL_TIM_PWM_Start+0xb6>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d8:	e023      	b.n	8006422 <HAL_TIM_PWM_Start+0xfe>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d104      	bne.n	80063ea <HAL_TIM_PWM_Start+0xc6>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e8:	e01b      	b.n	8006422 <HAL_TIM_PWM_Start+0xfe>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d104      	bne.n	80063fa <HAL_TIM_PWM_Start+0xd6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063f8:	e013      	b.n	8006422 <HAL_TIM_PWM_Start+0xfe>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b0c      	cmp	r3, #12
 80063fe:	d104      	bne.n	800640a <HAL_TIM_PWM_Start+0xe6>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006408:	e00b      	b.n	8006422 <HAL_TIM_PWM_Start+0xfe>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b10      	cmp	r3, #16
 800640e:	d104      	bne.n	800641a <HAL_TIM_PWM_Start+0xf6>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006418:	e003      	b.n	8006422 <HAL_TIM_PWM_Start+0xfe>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2201      	movs	r2, #1
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 ff32 	bl	8007294 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a30      	ldr	r2, [pc, #192]	; (80064f8 <HAL_TIM_PWM_Start+0x1d4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d004      	beq.n	8006444 <HAL_TIM_PWM_Start+0x120>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a2f      	ldr	r2, [pc, #188]	; (80064fc <HAL_TIM_PWM_Start+0x1d8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d101      	bne.n	8006448 <HAL_TIM_PWM_Start+0x124>
 8006444:	2301      	movs	r3, #1
 8006446:	e000      	b.n	800644a <HAL_TIM_PWM_Start+0x126>
 8006448:	2300      	movs	r3, #0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d007      	beq.n	800645e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800645c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a25      	ldr	r2, [pc, #148]	; (80064f8 <HAL_TIM_PWM_Start+0x1d4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_TIM_PWM_Start+0x18a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006470:	d01d      	beq.n	80064ae <HAL_TIM_PWM_Start+0x18a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a22      	ldr	r2, [pc, #136]	; (8006500 <HAL_TIM_PWM_Start+0x1dc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_TIM_PWM_Start+0x18a>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a20      	ldr	r2, [pc, #128]	; (8006504 <HAL_TIM_PWM_Start+0x1e0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_TIM_PWM_Start+0x18a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1f      	ldr	r2, [pc, #124]	; (8006508 <HAL_TIM_PWM_Start+0x1e4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_TIM_PWM_Start+0x18a>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a19      	ldr	r2, [pc, #100]	; (80064fc <HAL_TIM_PWM_Start+0x1d8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_TIM_PWM_Start+0x18a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a1b      	ldr	r2, [pc, #108]	; (800650c <HAL_TIM_PWM_Start+0x1e8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_TIM_PWM_Start+0x18a>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a19      	ldr	r2, [pc, #100]	; (8006510 <HAL_TIM_PWM_Start+0x1ec>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d115      	bne.n	80064da <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	4b17      	ldr	r3, [pc, #92]	; (8006514 <HAL_TIM_PWM_Start+0x1f0>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b06      	cmp	r3, #6
 80064be:	d015      	beq.n	80064ec <HAL_TIM_PWM_Start+0x1c8>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c6:	d011      	beq.n	80064ec <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d8:	e008      	b.n	80064ec <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0201 	orr.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e000      	b.n	80064ee <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40010000 	.word	0x40010000
 80064fc:	40010400 	.word	0x40010400
 8006500:	40000400 	.word	0x40000400
 8006504:	40000800 	.word	0x40000800
 8006508:	40000c00 	.word	0x40000c00
 800650c:	40014000 	.word	0x40014000
 8006510:	40001800 	.word	0x40001800
 8006514:	00010007 	.word	0x00010007

08006518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b02      	cmp	r3, #2
 800652c:	d122      	bne.n	8006574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b02      	cmp	r3, #2
 800653a:	d11b      	bne.n	8006574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0202 	mvn.w	r2, #2
 8006544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fae4 	bl	8006b28 <HAL_TIM_IC_CaptureCallback>
 8006560:	e005      	b.n	800656e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fad6 	bl	8006b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fae7 	bl	8006b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b04      	cmp	r3, #4
 8006580:	d122      	bne.n	80065c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b04      	cmp	r3, #4
 800658e:	d11b      	bne.n	80065c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0204 	mvn.w	r2, #4
 8006598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 faba 	bl	8006b28 <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 faac 	bl	8006b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fabd 	bl	8006b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d122      	bne.n	800661c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d11b      	bne.n	800661c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0208 	mvn.w	r2, #8
 80065ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2204      	movs	r2, #4
 80065f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fa90 	bl	8006b28 <HAL_TIM_IC_CaptureCallback>
 8006608:	e005      	b.n	8006616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa82 	bl	8006b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fa93 	bl	8006b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0310 	and.w	r3, r3, #16
 8006626:	2b10      	cmp	r3, #16
 8006628:	d122      	bne.n	8006670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0310 	and.w	r3, r3, #16
 8006634:	2b10      	cmp	r3, #16
 8006636:	d11b      	bne.n	8006670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0210 	mvn.w	r2, #16
 8006640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2208      	movs	r2, #8
 8006646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fa66 	bl	8006b28 <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fa58 	bl	8006b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fa69 	bl	8006b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d10e      	bne.n	800669c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b01      	cmp	r3, #1
 800668a:	d107      	bne.n	800669c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0201 	mvn.w	r2, #1
 8006694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fb fdfa 	bl	8002290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b80      	cmp	r3, #128	; 0x80
 80066a8:	d10e      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b4:	2b80      	cmp	r3, #128	; 0x80
 80066b6:	d107      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 ff22 	bl	800750c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d6:	d10e      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e2:	2b80      	cmp	r3, #128	; 0x80
 80066e4:	d107      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 ff15 	bl	8007520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d10e      	bne.n	8006722 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b40      	cmp	r3, #64	; 0x40
 8006710:	d107      	bne.n	8006722 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800671a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fa17 	bl	8006b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b20      	cmp	r3, #32
 800672e:	d10e      	bne.n	800674e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b20      	cmp	r3, #32
 800673c:	d107      	bne.n	800674e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f06f 0220 	mvn.w	r2, #32
 8006746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fed5 	bl	80074f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800674e:	bf00      	nop
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006772:	2302      	movs	r3, #2
 8006774:	e0ff      	b.n	8006976 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b14      	cmp	r3, #20
 8006782:	f200 80f0 	bhi.w	8006966 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006786:	a201      	add	r2, pc, #4	; (adr r2, 800678c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678c:	080067e1 	.word	0x080067e1
 8006790:	08006967 	.word	0x08006967
 8006794:	08006967 	.word	0x08006967
 8006798:	08006967 	.word	0x08006967
 800679c:	08006821 	.word	0x08006821
 80067a0:	08006967 	.word	0x08006967
 80067a4:	08006967 	.word	0x08006967
 80067a8:	08006967 	.word	0x08006967
 80067ac:	08006863 	.word	0x08006863
 80067b0:	08006967 	.word	0x08006967
 80067b4:	08006967 	.word	0x08006967
 80067b8:	08006967 	.word	0x08006967
 80067bc:	080068a3 	.word	0x080068a3
 80067c0:	08006967 	.word	0x08006967
 80067c4:	08006967 	.word	0x08006967
 80067c8:	08006967 	.word	0x08006967
 80067cc:	080068e5 	.word	0x080068e5
 80067d0:	08006967 	.word	0x08006967
 80067d4:	08006967 	.word	0x08006967
 80067d8:	08006967 	.word	0x08006967
 80067dc:	08006925 	.word	0x08006925
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fa5c 	bl	8006ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0208 	orr.w	r2, r2, #8
 80067fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0204 	bic.w	r2, r2, #4
 800680a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6999      	ldr	r1, [r3, #24]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	619a      	str	r2, [r3, #24]
      break;
 800681e:	e0a5      	b.n	800696c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	4618      	mov	r0, r3
 8006828:	f000 faae 	bl	8006d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800683a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699a      	ldr	r2, [r3, #24]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800684a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6999      	ldr	r1, [r3, #24]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	021a      	lsls	r2, r3, #8
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	619a      	str	r2, [r3, #24]
      break;
 8006860:	e084      	b.n	800696c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fb05 	bl	8006e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0208 	orr.w	r2, r2, #8
 800687c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0204 	bic.w	r2, r2, #4
 800688c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69d9      	ldr	r1, [r3, #28]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	61da      	str	r2, [r3, #28]
      break;
 80068a0:	e064      	b.n	800696c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fb5b 	bl	8006f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69da      	ldr	r2, [r3, #28]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69d9      	ldr	r1, [r3, #28]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	021a      	lsls	r2, r3, #8
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	61da      	str	r2, [r3, #28]
      break;
 80068e2:	e043      	b.n	800696c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fb92 	bl	8007014 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0208 	orr.w	r2, r2, #8
 80068fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0204 	bic.w	r2, r2, #4
 800690e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	691a      	ldr	r2, [r3, #16]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006922:	e023      	b.n	800696c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fbc4 	bl	80070b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800693e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	021a      	lsls	r2, r3, #8
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006964:	e002      	b.n	800696c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	75fb      	strb	r3, [r7, #23]
      break;
 800696a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006974:	7dfb      	ldrb	r3, [r7, #23]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop

08006980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_TIM_ConfigClockSource+0x1c>
 8006998:	2302      	movs	r3, #2
 800699a:	e0b4      	b.n	8006b06 <HAL_TIM_ConfigClockSource+0x186>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	4b56      	ldr	r3, [pc, #344]	; (8006b10 <HAL_TIM_ConfigClockSource+0x190>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d4:	d03e      	beq.n	8006a54 <HAL_TIM_ConfigClockSource+0xd4>
 80069d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069da:	f200 8087 	bhi.w	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 80069de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e2:	f000 8086 	beq.w	8006af2 <HAL_TIM_ConfigClockSource+0x172>
 80069e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ea:	d87f      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 80069ec:	2b70      	cmp	r3, #112	; 0x70
 80069ee:	d01a      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0xa6>
 80069f0:	2b70      	cmp	r3, #112	; 0x70
 80069f2:	d87b      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 80069f4:	2b60      	cmp	r3, #96	; 0x60
 80069f6:	d050      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x11a>
 80069f8:	2b60      	cmp	r3, #96	; 0x60
 80069fa:	d877      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 80069fc:	2b50      	cmp	r3, #80	; 0x50
 80069fe:	d03c      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0xfa>
 8006a00:	2b50      	cmp	r3, #80	; 0x50
 8006a02:	d873      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 8006a04:	2b40      	cmp	r3, #64	; 0x40
 8006a06:	d058      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x13a>
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d86f      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 8006a0c:	2b30      	cmp	r3, #48	; 0x30
 8006a0e:	d064      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x15a>
 8006a10:	2b30      	cmp	r3, #48	; 0x30
 8006a12:	d86b      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d060      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x15a>
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d867      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d05c      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x15a>
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d05a      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x15a>
 8006a24:	e062      	b.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	6899      	ldr	r1, [r3, #8]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f000 fc0d 	bl	8007254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	609a      	str	r2, [r3, #8]
      break;
 8006a52:	e04f      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	6899      	ldr	r1, [r3, #8]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f000 fbf6 	bl	8007254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a76:	609a      	str	r2, [r3, #8]
      break;
 8006a78:	e03c      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	6859      	ldr	r1, [r3, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f000 fb6a 	bl	8007160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2150      	movs	r1, #80	; 0x50
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fbc3 	bl	800721e <TIM_ITRx_SetConfig>
      break;
 8006a98:	e02c      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6859      	ldr	r1, [r3, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f000 fb89 	bl	80071be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2160      	movs	r1, #96	; 0x60
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fbb3 	bl	800721e <TIM_ITRx_SetConfig>
      break;
 8006ab8:	e01c      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f000 fb4a 	bl	8007160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2140      	movs	r1, #64	; 0x40
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fba3 	bl	800721e <TIM_ITRx_SetConfig>
      break;
 8006ad8:	e00c      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f000 fb9a 	bl	800721e <TIM_ITRx_SetConfig>
      break;
 8006aea:	e003      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	73fb      	strb	r3, [r7, #15]
      break;
 8006af0:	e000      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	fffeff88 	.word	0xfffeff88

08006b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a40      	ldr	r2, [pc, #256]	; (8006c78 <TIM_Base_SetConfig+0x114>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d013      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b82:	d00f      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a3d      	ldr	r2, [pc, #244]	; (8006c7c <TIM_Base_SetConfig+0x118>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00b      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a3c      	ldr	r2, [pc, #240]	; (8006c80 <TIM_Base_SetConfig+0x11c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d007      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a3b      	ldr	r2, [pc, #236]	; (8006c84 <TIM_Base_SetConfig+0x120>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3a      	ldr	r2, [pc, #232]	; (8006c88 <TIM_Base_SetConfig+0x124>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d108      	bne.n	8006bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a2f      	ldr	r2, [pc, #188]	; (8006c78 <TIM_Base_SetConfig+0x114>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d02b      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc4:	d027      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2c      	ldr	r2, [pc, #176]	; (8006c7c <TIM_Base_SetConfig+0x118>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d023      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2b      	ldr	r2, [pc, #172]	; (8006c80 <TIM_Base_SetConfig+0x11c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d01f      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <TIM_Base_SetConfig+0x120>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d01b      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a29      	ldr	r2, [pc, #164]	; (8006c88 <TIM_Base_SetConfig+0x124>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d017      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a28      	ldr	r2, [pc, #160]	; (8006c8c <TIM_Base_SetConfig+0x128>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a27      	ldr	r2, [pc, #156]	; (8006c90 <TIM_Base_SetConfig+0x12c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00f      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a26      	ldr	r2, [pc, #152]	; (8006c94 <TIM_Base_SetConfig+0x130>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00b      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a25      	ldr	r2, [pc, #148]	; (8006c98 <TIM_Base_SetConfig+0x134>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a24      	ldr	r2, [pc, #144]	; (8006c9c <TIM_Base_SetConfig+0x138>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a23      	ldr	r2, [pc, #140]	; (8006ca0 <TIM_Base_SetConfig+0x13c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d108      	bne.n	8006c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a0a      	ldr	r2, [pc, #40]	; (8006c78 <TIM_Base_SetConfig+0x114>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_Base_SetConfig+0xf8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a0c      	ldr	r2, [pc, #48]	; (8006c88 <TIM_Base_SetConfig+0x124>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d103      	bne.n	8006c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	615a      	str	r2, [r3, #20]
}
 8006c6a:	bf00      	nop
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40000400 	.word	0x40000400
 8006c80:	40000800 	.word	0x40000800
 8006c84:	40000c00 	.word	0x40000c00
 8006c88:	40010400 	.word	0x40010400
 8006c8c:	40014000 	.word	0x40014000
 8006c90:	40014400 	.word	0x40014400
 8006c94:	40014800 	.word	0x40014800
 8006c98:	40001800 	.word	0x40001800
 8006c9c:	40001c00 	.word	0x40001c00
 8006ca0:	40002000 	.word	0x40002000

08006ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f023 0201 	bic.w	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4b2b      	ldr	r3, [pc, #172]	; (8006d7c <TIM_OC1_SetConfig+0xd8>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f023 0302 	bic.w	r3, r3, #2
 8006cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a21      	ldr	r2, [pc, #132]	; (8006d80 <TIM_OC1_SetConfig+0xdc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_OC1_SetConfig+0x64>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a20      	ldr	r2, [pc, #128]	; (8006d84 <TIM_OC1_SetConfig+0xe0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d10c      	bne.n	8006d22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 0308 	bic.w	r3, r3, #8
 8006d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 0304 	bic.w	r3, r3, #4
 8006d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a16      	ldr	r2, [pc, #88]	; (8006d80 <TIM_OC1_SetConfig+0xdc>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d003      	beq.n	8006d32 <TIM_OC1_SetConfig+0x8e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a15      	ldr	r2, [pc, #84]	; (8006d84 <TIM_OC1_SetConfig+0xe0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d111      	bne.n	8006d56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	621a      	str	r2, [r3, #32]
}
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	fffeff8f 	.word	0xfffeff8f
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40010400 	.word	0x40010400

08006d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f023 0210 	bic.w	r2, r3, #16
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4b2e      	ldr	r3, [pc, #184]	; (8006e6c <TIM_OC2_SetConfig+0xe4>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	021b      	lsls	r3, r3, #8
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f023 0320 	bic.w	r3, r3, #32
 8006dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a23      	ldr	r2, [pc, #140]	; (8006e70 <TIM_OC2_SetConfig+0xe8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d003      	beq.n	8006df0 <TIM_OC2_SetConfig+0x68>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a22      	ldr	r2, [pc, #136]	; (8006e74 <TIM_OC2_SetConfig+0xec>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d10d      	bne.n	8006e0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a18      	ldr	r2, [pc, #96]	; (8006e70 <TIM_OC2_SetConfig+0xe8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <TIM_OC2_SetConfig+0x94>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a17      	ldr	r2, [pc, #92]	; (8006e74 <TIM_OC2_SetConfig+0xec>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d113      	bne.n	8006e44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	621a      	str	r2, [r3, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	feff8fff 	.word	0xfeff8fff
 8006e70:	40010000 	.word	0x40010000
 8006e74:	40010400 	.word	0x40010400

08006e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4b2d      	ldr	r3, [pc, #180]	; (8006f58 <TIM_OC3_SetConfig+0xe0>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0303 	bic.w	r3, r3, #3
 8006eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	021b      	lsls	r3, r3, #8
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a22      	ldr	r2, [pc, #136]	; (8006f5c <TIM_OC3_SetConfig+0xe4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d003      	beq.n	8006ede <TIM_OC3_SetConfig+0x66>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a21      	ldr	r2, [pc, #132]	; (8006f60 <TIM_OC3_SetConfig+0xe8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d10d      	bne.n	8006efa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	021b      	lsls	r3, r3, #8
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a17      	ldr	r2, [pc, #92]	; (8006f5c <TIM_OC3_SetConfig+0xe4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d003      	beq.n	8006f0a <TIM_OC3_SetConfig+0x92>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a16      	ldr	r2, [pc, #88]	; (8006f60 <TIM_OC3_SetConfig+0xe8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d113      	bne.n	8006f32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	621a      	str	r2, [r3, #32]
}
 8006f4c:	bf00      	nop
 8006f4e:	371c      	adds	r7, #28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	fffeff8f 	.word	0xfffeff8f
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40010400 	.word	0x40010400

08006f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4b1e      	ldr	r3, [pc, #120]	; (8007008 <TIM_OC4_SetConfig+0xa4>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	031b      	lsls	r3, r3, #12
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a13      	ldr	r2, [pc, #76]	; (800700c <TIM_OC4_SetConfig+0xa8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_OC4_SetConfig+0x68>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a12      	ldr	r2, [pc, #72]	; (8007010 <TIM_OC4_SetConfig+0xac>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d109      	bne.n	8006fe0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	019b      	lsls	r3, r3, #6
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	feff8fff 	.word	0xfeff8fff
 800700c:	40010000 	.word	0x40010000
 8007010:	40010400 	.word	0x40010400

08007014 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4b1b      	ldr	r3, [pc, #108]	; (80070ac <TIM_OC5_SetConfig+0x98>)
 8007040:	4013      	ands	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007054:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	041b      	lsls	r3, r3, #16
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a12      	ldr	r2, [pc, #72]	; (80070b0 <TIM_OC5_SetConfig+0x9c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d003      	beq.n	8007072 <TIM_OC5_SetConfig+0x5e>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a11      	ldr	r2, [pc, #68]	; (80070b4 <TIM_OC5_SetConfig+0xa0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d109      	bne.n	8007086 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007078:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	621a      	str	r2, [r3, #32]
}
 80070a0:	bf00      	nop
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	fffeff8f 	.word	0xfffeff8f
 80070b0:	40010000 	.word	0x40010000
 80070b4:	40010400 	.word	0x40010400

080070b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4b1c      	ldr	r3, [pc, #112]	; (8007154 <TIM_OC6_SetConfig+0x9c>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	021b      	lsls	r3, r3, #8
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	051b      	lsls	r3, r3, #20
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a13      	ldr	r2, [pc, #76]	; (8007158 <TIM_OC6_SetConfig+0xa0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d003      	beq.n	8007118 <TIM_OC6_SetConfig+0x60>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a12      	ldr	r2, [pc, #72]	; (800715c <TIM_OC6_SetConfig+0xa4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d109      	bne.n	800712c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800711e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	029b      	lsls	r3, r3, #10
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	4313      	orrs	r3, r2
 800712a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	621a      	str	r2, [r3, #32]
}
 8007146:	bf00      	nop
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	feff8fff 	.word	0xfeff8fff
 8007158:	40010000 	.word	0x40010000
 800715c:	40010400 	.word	0x40010400

08007160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	f023 0201 	bic.w	r2, r3, #1
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800718a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	4313      	orrs	r3, r2
 8007194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f023 030a 	bic.w	r3, r3, #10
 800719c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	621a      	str	r2, [r3, #32]
}
 80071b2:	bf00      	nop
 80071b4:	371c      	adds	r7, #28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071be:	b480      	push	{r7}
 80071c0:	b087      	sub	sp, #28
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f023 0210 	bic.w	r2, r3, #16
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	031b      	lsls	r3, r3, #12
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	4313      	orrs	r3, r2
 8007204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	621a      	str	r2, [r3, #32]
}
 8007212:	bf00      	nop
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800721e:	b480      	push	{r7}
 8007220:	b085      	sub	sp, #20
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	f043 0307 	orr.w	r3, r3, #7
 8007240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	609a      	str	r2, [r3, #8]
}
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800726e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	021a      	lsls	r2, r3, #8
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	431a      	orrs	r2, r3
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4313      	orrs	r3, r2
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	609a      	str	r2, [r3, #8]
}
 8007288:	bf00      	nop
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f003 031f 	and.w	r3, r3, #31
 80072a6:	2201      	movs	r2, #1
 80072a8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a1a      	ldr	r2, [r3, #32]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	43db      	mvns	r3, r3
 80072b6:	401a      	ands	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a1a      	ldr	r2, [r3, #32]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	fa01 f303 	lsl.w	r3, r1, r3
 80072cc:	431a      	orrs	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	621a      	str	r2, [r3, #32]
}
 80072d2:	bf00      	nop
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
	...

080072e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e06d      	b.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a30      	ldr	r2, [pc, #192]	; (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d004      	beq.n	800732c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a2f      	ldr	r2, [pc, #188]	; (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d108      	bne.n	800733e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007332:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007344:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a20      	ldr	r2, [pc, #128]	; (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d022      	beq.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d01d      	beq.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1d      	ldr	r2, [pc, #116]	; (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d018      	beq.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1c      	ldr	r2, [pc, #112]	; (80073ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d013      	beq.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1a      	ldr	r2, [pc, #104]	; (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00e      	beq.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a15      	ldr	r2, [pc, #84]	; (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d009      	beq.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a16      	ldr	r2, [pc, #88]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a15      	ldr	r2, [pc, #84]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d10c      	bne.n	80073c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	40010000 	.word	0x40010000
 80073e4:	40010400 	.word	0x40010400
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	40000c00 	.word	0x40000c00
 80073f4:	40014000 	.word	0x40014000
 80073f8:	40001800 	.word	0x40001800

080073fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007414:	2302      	movs	r3, #2
 8007416:	e065      	b.n	80074e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	4313      	orrs	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	041b      	lsls	r3, r3, #16
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a16      	ldr	r2, [pc, #88]	; (80074f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d004      	beq.n	80074a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a14      	ldr	r2, [pc, #80]	; (80074f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d115      	bne.n	80074d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	051b      	lsls	r3, r3, #20
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	40010000 	.word	0x40010000
 80074f4:	40010400 	.word	0x40010400

080074f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e040      	b.n	80075c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fb fd2e 	bl	8002fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2224      	movs	r2, #36	; 0x24
 8007560:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0201 	bic.w	r2, r2, #1
 8007570:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fbe6 	bl	8007d44 <UART_SetConfig>
 8007578:	4603      	mov	r3, r0
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e022      	b.n	80075c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fe3e 	bl	800820c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800759e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0201 	orr.w	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fec5 	bl	8008350 <UART_CheckIdleState>
 80075c6:	4603      	mov	r3, r0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	; 0x28
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d171      	bne.n	80076cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <HAL_UART_Transmit+0x24>
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e06a      	b.n	80076ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2221      	movs	r2, #33	; 0x21
 8007604:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007606:	f7fb fdb9 	bl	800317c <HAL_GetTick>
 800760a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	88fa      	ldrh	r2, [r7, #6]
 8007610:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	88fa      	ldrh	r2, [r7, #6]
 8007618:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007624:	d108      	bne.n	8007638 <HAL_UART_Transmit+0x68>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	61bb      	str	r3, [r7, #24]
 8007636:	e003      	b.n	8007640 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007640:	e02c      	b.n	800769c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2200      	movs	r2, #0
 800764a:	2180      	movs	r1, #128	; 0x80
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 feb6 	bl	80083be <UART_WaitOnFlagUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e038      	b.n	80076ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10b      	bne.n	800767a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007670:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	3302      	adds	r3, #2
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	e007      	b.n	800768a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	781a      	ldrb	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	3301      	adds	r3, #1
 8007688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007690:	b29b      	uxth	r3, r3
 8007692:	3b01      	subs	r3, #1
 8007694:	b29a      	uxth	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1cc      	bne.n	8007642 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2200      	movs	r2, #0
 80076b0:	2140      	movs	r1, #64	; 0x40
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fe83 	bl	80083be <UART_WaitOnFlagUntilTimeout>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e005      	b.n	80076ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2220      	movs	r2, #32
 80076c6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	e000      	b.n	80076ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80076cc:	2302      	movs	r3, #2
  }
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3720      	adds	r7, #32
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b08a      	sub	sp, #40	; 0x28
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	4613      	mov	r3, r2
 80076e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d132      	bne.n	8007754 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <HAL_UART_Receive_IT+0x24>
 80076f4:	88fb      	ldrh	r3, [r7, #6]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e02b      	b.n	8007756 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d018      	beq.n	8007744 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	613b      	str	r3, [r7, #16]
   return(result);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	623b      	str	r3, [r7, #32]
 8007732:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	69f9      	ldr	r1, [r7, #28]
 8007736:	6a3a      	ldr	r2, [r7, #32]
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	61bb      	str	r3, [r7, #24]
   return(result);
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e6      	bne.n	8007712 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007744:	88fb      	ldrh	r3, [r7, #6]
 8007746:	461a      	mov	r2, r3
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fefe 	bl	800854c <UART_Start_Receive_IT>
 8007750:	4603      	mov	r3, r0
 8007752:	e000      	b.n	8007756 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007754:	2302      	movs	r3, #2
  }
}
 8007756:	4618      	mov	r0, r3
 8007758:	3728      	adds	r7, #40	; 0x28
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b0ba      	sub	sp, #232	; 0xe8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800778a:	f640 030f 	movw	r3, #2063	; 0x80f
 800778e:	4013      	ands	r3, r2
 8007790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d115      	bne.n	80077c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a0:	f003 0320 	and.w	r3, r3, #32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00f      	beq.n	80077c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d009      	beq.n	80077c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8297 	beq.w	8007cec <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
      }
      return;
 80077c6:	e291      	b.n	8007cec <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8117 	beq.w	8007a00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80077d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80077de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80077e2:	4b85      	ldr	r3, [pc, #532]	; (80079f8 <HAL_UART_IRQHandler+0x298>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 810a 	beq.w	8007a00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d011      	beq.n	800781c <HAL_UART_IRQHandler+0xbc>
 80077f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2201      	movs	r2, #1
 800780a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007812:	f043 0201 	orr.w	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800781c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d011      	beq.n	800784c <HAL_UART_IRQHandler+0xec>
 8007828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2202      	movs	r2, #2
 800783a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007842:	f043 0204 	orr.w	r2, r3, #4
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800784c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d011      	beq.n	800787c <HAL_UART_IRQHandler+0x11c>
 8007858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00b      	beq.n	800787c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2204      	movs	r2, #4
 800786a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007872:	f043 0202 	orr.w	r2, r3, #2
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800787c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d017      	beq.n	80078b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b00      	cmp	r3, #0
 8007892:	d105      	bne.n	80078a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007898:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2208      	movs	r2, #8
 80078a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ae:	f043 0208 	orr.w	r2, r3, #8
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d012      	beq.n	80078ea <HAL_UART_IRQHandler+0x18a>
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00c      	beq.n	80078ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078e0:	f043 0220 	orr.w	r2, r3, #32
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 81fd 	beq.w	8007cf0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80078f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00d      	beq.n	800791e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007924:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007932:	2b40      	cmp	r3, #64	; 0x40
 8007934:	d005      	beq.n	8007942 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800793a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800793e:	2b00      	cmp	r3, #0
 8007940:	d04f      	beq.n	80079e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fec8 	bl	80086d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007952:	2b40      	cmp	r3, #64	; 0x40
 8007954:	d141      	bne.n	80079da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800796c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3308      	adds	r3, #8
 800797e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007982:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800798e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800799a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1d9      	bne.n	8007956 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d013      	beq.n	80079d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ae:	4a13      	ldr	r2, [pc, #76]	; (80079fc <HAL_UART_IRQHandler+0x29c>)
 80079b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fc f98b 	bl	8003cd2 <HAL_DMA_Abort_IT>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d017      	beq.n	80079f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079cc:	4610      	mov	r0, r2
 80079ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d0:	e00f      	b.n	80079f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f9a0 	bl	8007d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d8:	e00b      	b.n	80079f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f99c 	bl	8007d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e0:	e007      	b.n	80079f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f998 	bl	8007d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80079f0:	e17e      	b.n	8007cf0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f2:	bf00      	nop
    return;
 80079f4:	e17c      	b.n	8007cf0 <HAL_UART_IRQHandler+0x590>
 80079f6:	bf00      	nop
 80079f8:	04000120 	.word	0x04000120
 80079fc:	080087a1 	.word	0x080087a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	f040 814c 	bne.w	8007ca2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a0e:	f003 0310 	and.w	r3, r3, #16
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 8145 	beq.w	8007ca2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a1c:	f003 0310 	and.w	r3, r3, #16
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 813e 	beq.w	8007ca2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2210      	movs	r2, #16
 8007a2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	f040 80b6 	bne.w	8007baa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8150 	beq.w	8007cf4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	f080 8148 	bcs.w	8007cf4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a78:	f000 8086 	beq.w	8007b88 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007aaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1da      	bne.n	8007a7c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007aea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007aee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e1      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e3      	bne.n	8007b02 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b58:	f023 0310 	bic.w	r3, r3, #16
 8007b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e4      	bne.n	8007b48 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fc f835 	bl	8003bf2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f8c2 	bl	8007d2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ba8:	e0a4      	b.n	8007cf4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 8096 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8091 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8007bfa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e4      	bne.n	8007bd6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3308      	adds	r3, #8
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	f023 0301 	bic.w	r3, r3, #1
 8007c22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c30:	633a      	str	r2, [r7, #48]	; 0x30
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e3      	bne.n	8007c0c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f023 0310 	bic.w	r3, r3, #16
 8007c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	69b9      	ldr	r1, [r7, #24]
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	617b      	str	r3, [r7, #20]
   return(result);
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e4      	bne.n	8007c58 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2202      	movs	r2, #2
 8007c92:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f846 	bl	8007d2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ca0:	e02a      	b.n	8007cf8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00e      	beq.n	8007ccc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d008      	beq.n	8007ccc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d01c      	beq.n	8007cfc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
    }
    return;
 8007cca:	e017      	b.n	8007cfc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d012      	beq.n	8007cfe <HAL_UART_IRQHandler+0x59e>
 8007cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00c      	beq.n	8007cfe <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fd71 	bl	80087cc <UART_EndTransmit_IT>
    return;
 8007cea:	e008      	b.n	8007cfe <HAL_UART_IRQHandler+0x59e>
      return;
 8007cec:	bf00      	nop
 8007cee:	e006      	b.n	8007cfe <HAL_UART_IRQHandler+0x59e>
    return;
 8007cf0:	bf00      	nop
 8007cf2:	e004      	b.n	8007cfe <HAL_UART_IRQHandler+0x59e>
      return;
 8007cf4:	bf00      	nop
 8007cf6:	e002      	b.n	8007cfe <HAL_UART_IRQHandler+0x59e>
      return;
 8007cf8:	bf00      	nop
 8007cfa:	e000      	b.n	8007cfe <HAL_UART_IRQHandler+0x59e>
    return;
 8007cfc:	bf00      	nop
  }

}
 8007cfe:	37e8      	adds	r7, #232	; 0xe8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4ba6      	ldr	r3, [pc, #664]	; (8008008 <UART_SetConfig+0x2c4>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	6812      	ldr	r2, [r2, #0]
 8007d76:	6979      	ldr	r1, [r7, #20]
 8007d78:	430b      	orrs	r3, r1
 8007d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a94      	ldr	r2, [pc, #592]	; (800800c <UART_SetConfig+0x2c8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d120      	bne.n	8007e02 <UART_SetConfig+0xbe>
 8007dc0:	4b93      	ldr	r3, [pc, #588]	; (8008010 <UART_SetConfig+0x2cc>)
 8007dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d816      	bhi.n	8007dfc <UART_SetConfig+0xb8>
 8007dce:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <UART_SetConfig+0x90>)
 8007dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd4:	08007de5 	.word	0x08007de5
 8007dd8:	08007df1 	.word	0x08007df1
 8007ddc:	08007deb 	.word	0x08007deb
 8007de0:	08007df7 	.word	0x08007df7
 8007de4:	2301      	movs	r3, #1
 8007de6:	77fb      	strb	r3, [r7, #31]
 8007de8:	e150      	b.n	800808c <UART_SetConfig+0x348>
 8007dea:	2302      	movs	r3, #2
 8007dec:	77fb      	strb	r3, [r7, #31]
 8007dee:	e14d      	b.n	800808c <UART_SetConfig+0x348>
 8007df0:	2304      	movs	r3, #4
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e14a      	b.n	800808c <UART_SetConfig+0x348>
 8007df6:	2308      	movs	r3, #8
 8007df8:	77fb      	strb	r3, [r7, #31]
 8007dfa:	e147      	b.n	800808c <UART_SetConfig+0x348>
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	77fb      	strb	r3, [r7, #31]
 8007e00:	e144      	b.n	800808c <UART_SetConfig+0x348>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a83      	ldr	r2, [pc, #524]	; (8008014 <UART_SetConfig+0x2d0>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d132      	bne.n	8007e72 <UART_SetConfig+0x12e>
 8007e0c:	4b80      	ldr	r3, [pc, #512]	; (8008010 <UART_SetConfig+0x2cc>)
 8007e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e12:	f003 030c 	and.w	r3, r3, #12
 8007e16:	2b0c      	cmp	r3, #12
 8007e18:	d828      	bhi.n	8007e6c <UART_SetConfig+0x128>
 8007e1a:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <UART_SetConfig+0xdc>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e55 	.word	0x08007e55
 8007e24:	08007e6d 	.word	0x08007e6d
 8007e28:	08007e6d 	.word	0x08007e6d
 8007e2c:	08007e6d 	.word	0x08007e6d
 8007e30:	08007e61 	.word	0x08007e61
 8007e34:	08007e6d 	.word	0x08007e6d
 8007e38:	08007e6d 	.word	0x08007e6d
 8007e3c:	08007e6d 	.word	0x08007e6d
 8007e40:	08007e5b 	.word	0x08007e5b
 8007e44:	08007e6d 	.word	0x08007e6d
 8007e48:	08007e6d 	.word	0x08007e6d
 8007e4c:	08007e6d 	.word	0x08007e6d
 8007e50:	08007e67 	.word	0x08007e67
 8007e54:	2300      	movs	r3, #0
 8007e56:	77fb      	strb	r3, [r7, #31]
 8007e58:	e118      	b.n	800808c <UART_SetConfig+0x348>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	77fb      	strb	r3, [r7, #31]
 8007e5e:	e115      	b.n	800808c <UART_SetConfig+0x348>
 8007e60:	2304      	movs	r3, #4
 8007e62:	77fb      	strb	r3, [r7, #31]
 8007e64:	e112      	b.n	800808c <UART_SetConfig+0x348>
 8007e66:	2308      	movs	r3, #8
 8007e68:	77fb      	strb	r3, [r7, #31]
 8007e6a:	e10f      	b.n	800808c <UART_SetConfig+0x348>
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	77fb      	strb	r3, [r7, #31]
 8007e70:	e10c      	b.n	800808c <UART_SetConfig+0x348>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a68      	ldr	r2, [pc, #416]	; (8008018 <UART_SetConfig+0x2d4>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d120      	bne.n	8007ebe <UART_SetConfig+0x17a>
 8007e7c:	4b64      	ldr	r3, [pc, #400]	; (8008010 <UART_SetConfig+0x2cc>)
 8007e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e86:	2b30      	cmp	r3, #48	; 0x30
 8007e88:	d013      	beq.n	8007eb2 <UART_SetConfig+0x16e>
 8007e8a:	2b30      	cmp	r3, #48	; 0x30
 8007e8c:	d814      	bhi.n	8007eb8 <UART_SetConfig+0x174>
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	d009      	beq.n	8007ea6 <UART_SetConfig+0x162>
 8007e92:	2b20      	cmp	r3, #32
 8007e94:	d810      	bhi.n	8007eb8 <UART_SetConfig+0x174>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <UART_SetConfig+0x15c>
 8007e9a:	2b10      	cmp	r3, #16
 8007e9c:	d006      	beq.n	8007eac <UART_SetConfig+0x168>
 8007e9e:	e00b      	b.n	8007eb8 <UART_SetConfig+0x174>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	77fb      	strb	r3, [r7, #31]
 8007ea4:	e0f2      	b.n	800808c <UART_SetConfig+0x348>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	77fb      	strb	r3, [r7, #31]
 8007eaa:	e0ef      	b.n	800808c <UART_SetConfig+0x348>
 8007eac:	2304      	movs	r3, #4
 8007eae:	77fb      	strb	r3, [r7, #31]
 8007eb0:	e0ec      	b.n	800808c <UART_SetConfig+0x348>
 8007eb2:	2308      	movs	r3, #8
 8007eb4:	77fb      	strb	r3, [r7, #31]
 8007eb6:	e0e9      	b.n	800808c <UART_SetConfig+0x348>
 8007eb8:	2310      	movs	r3, #16
 8007eba:	77fb      	strb	r3, [r7, #31]
 8007ebc:	e0e6      	b.n	800808c <UART_SetConfig+0x348>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a56      	ldr	r2, [pc, #344]	; (800801c <UART_SetConfig+0x2d8>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d120      	bne.n	8007f0a <UART_SetConfig+0x1c6>
 8007ec8:	4b51      	ldr	r3, [pc, #324]	; (8008010 <UART_SetConfig+0x2cc>)
 8007eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ece:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ed4:	d013      	beq.n	8007efe <UART_SetConfig+0x1ba>
 8007ed6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ed8:	d814      	bhi.n	8007f04 <UART_SetConfig+0x1c0>
 8007eda:	2b80      	cmp	r3, #128	; 0x80
 8007edc:	d009      	beq.n	8007ef2 <UART_SetConfig+0x1ae>
 8007ede:	2b80      	cmp	r3, #128	; 0x80
 8007ee0:	d810      	bhi.n	8007f04 <UART_SetConfig+0x1c0>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <UART_SetConfig+0x1a8>
 8007ee6:	2b40      	cmp	r3, #64	; 0x40
 8007ee8:	d006      	beq.n	8007ef8 <UART_SetConfig+0x1b4>
 8007eea:	e00b      	b.n	8007f04 <UART_SetConfig+0x1c0>
 8007eec:	2300      	movs	r3, #0
 8007eee:	77fb      	strb	r3, [r7, #31]
 8007ef0:	e0cc      	b.n	800808c <UART_SetConfig+0x348>
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	77fb      	strb	r3, [r7, #31]
 8007ef6:	e0c9      	b.n	800808c <UART_SetConfig+0x348>
 8007ef8:	2304      	movs	r3, #4
 8007efa:	77fb      	strb	r3, [r7, #31]
 8007efc:	e0c6      	b.n	800808c <UART_SetConfig+0x348>
 8007efe:	2308      	movs	r3, #8
 8007f00:	77fb      	strb	r3, [r7, #31]
 8007f02:	e0c3      	b.n	800808c <UART_SetConfig+0x348>
 8007f04:	2310      	movs	r3, #16
 8007f06:	77fb      	strb	r3, [r7, #31]
 8007f08:	e0c0      	b.n	800808c <UART_SetConfig+0x348>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a44      	ldr	r2, [pc, #272]	; (8008020 <UART_SetConfig+0x2dc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d125      	bne.n	8007f60 <UART_SetConfig+0x21c>
 8007f14:	4b3e      	ldr	r3, [pc, #248]	; (8008010 <UART_SetConfig+0x2cc>)
 8007f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f22:	d017      	beq.n	8007f54 <UART_SetConfig+0x210>
 8007f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f28:	d817      	bhi.n	8007f5a <UART_SetConfig+0x216>
 8007f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f2e:	d00b      	beq.n	8007f48 <UART_SetConfig+0x204>
 8007f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f34:	d811      	bhi.n	8007f5a <UART_SetConfig+0x216>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <UART_SetConfig+0x1fe>
 8007f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f3e:	d006      	beq.n	8007f4e <UART_SetConfig+0x20a>
 8007f40:	e00b      	b.n	8007f5a <UART_SetConfig+0x216>
 8007f42:	2300      	movs	r3, #0
 8007f44:	77fb      	strb	r3, [r7, #31]
 8007f46:	e0a1      	b.n	800808c <UART_SetConfig+0x348>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	77fb      	strb	r3, [r7, #31]
 8007f4c:	e09e      	b.n	800808c <UART_SetConfig+0x348>
 8007f4e:	2304      	movs	r3, #4
 8007f50:	77fb      	strb	r3, [r7, #31]
 8007f52:	e09b      	b.n	800808c <UART_SetConfig+0x348>
 8007f54:	2308      	movs	r3, #8
 8007f56:	77fb      	strb	r3, [r7, #31]
 8007f58:	e098      	b.n	800808c <UART_SetConfig+0x348>
 8007f5a:	2310      	movs	r3, #16
 8007f5c:	77fb      	strb	r3, [r7, #31]
 8007f5e:	e095      	b.n	800808c <UART_SetConfig+0x348>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a2f      	ldr	r2, [pc, #188]	; (8008024 <UART_SetConfig+0x2e0>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d125      	bne.n	8007fb6 <UART_SetConfig+0x272>
 8007f6a:	4b29      	ldr	r3, [pc, #164]	; (8008010 <UART_SetConfig+0x2cc>)
 8007f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f78:	d017      	beq.n	8007faa <UART_SetConfig+0x266>
 8007f7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f7e:	d817      	bhi.n	8007fb0 <UART_SetConfig+0x26c>
 8007f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f84:	d00b      	beq.n	8007f9e <UART_SetConfig+0x25a>
 8007f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f8a:	d811      	bhi.n	8007fb0 <UART_SetConfig+0x26c>
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <UART_SetConfig+0x254>
 8007f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f94:	d006      	beq.n	8007fa4 <UART_SetConfig+0x260>
 8007f96:	e00b      	b.n	8007fb0 <UART_SetConfig+0x26c>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e076      	b.n	800808c <UART_SetConfig+0x348>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	77fb      	strb	r3, [r7, #31]
 8007fa2:	e073      	b.n	800808c <UART_SetConfig+0x348>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	77fb      	strb	r3, [r7, #31]
 8007fa8:	e070      	b.n	800808c <UART_SetConfig+0x348>
 8007faa:	2308      	movs	r3, #8
 8007fac:	77fb      	strb	r3, [r7, #31]
 8007fae:	e06d      	b.n	800808c <UART_SetConfig+0x348>
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	77fb      	strb	r3, [r7, #31]
 8007fb4:	e06a      	b.n	800808c <UART_SetConfig+0x348>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a1b      	ldr	r2, [pc, #108]	; (8008028 <UART_SetConfig+0x2e4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d138      	bne.n	8008032 <UART_SetConfig+0x2ee>
 8007fc0:	4b13      	ldr	r3, [pc, #76]	; (8008010 <UART_SetConfig+0x2cc>)
 8007fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007fca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fce:	d017      	beq.n	8008000 <UART_SetConfig+0x2bc>
 8007fd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fd4:	d82a      	bhi.n	800802c <UART_SetConfig+0x2e8>
 8007fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fda:	d00b      	beq.n	8007ff4 <UART_SetConfig+0x2b0>
 8007fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe0:	d824      	bhi.n	800802c <UART_SetConfig+0x2e8>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <UART_SetConfig+0x2aa>
 8007fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fea:	d006      	beq.n	8007ffa <UART_SetConfig+0x2b6>
 8007fec:	e01e      	b.n	800802c <UART_SetConfig+0x2e8>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	77fb      	strb	r3, [r7, #31]
 8007ff2:	e04b      	b.n	800808c <UART_SetConfig+0x348>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e048      	b.n	800808c <UART_SetConfig+0x348>
 8007ffa:	2304      	movs	r3, #4
 8007ffc:	77fb      	strb	r3, [r7, #31]
 8007ffe:	e045      	b.n	800808c <UART_SetConfig+0x348>
 8008000:	2308      	movs	r3, #8
 8008002:	77fb      	strb	r3, [r7, #31]
 8008004:	e042      	b.n	800808c <UART_SetConfig+0x348>
 8008006:	bf00      	nop
 8008008:	efff69f3 	.word	0xefff69f3
 800800c:	40011000 	.word	0x40011000
 8008010:	40023800 	.word	0x40023800
 8008014:	40004400 	.word	0x40004400
 8008018:	40004800 	.word	0x40004800
 800801c:	40004c00 	.word	0x40004c00
 8008020:	40005000 	.word	0x40005000
 8008024:	40011400 	.word	0x40011400
 8008028:	40007800 	.word	0x40007800
 800802c:	2310      	movs	r3, #16
 800802e:	77fb      	strb	r3, [r7, #31]
 8008030:	e02c      	b.n	800808c <UART_SetConfig+0x348>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a72      	ldr	r2, [pc, #456]	; (8008200 <UART_SetConfig+0x4bc>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d125      	bne.n	8008088 <UART_SetConfig+0x344>
 800803c:	4b71      	ldr	r3, [pc, #452]	; (8008204 <UART_SetConfig+0x4c0>)
 800803e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008042:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008046:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800804a:	d017      	beq.n	800807c <UART_SetConfig+0x338>
 800804c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008050:	d817      	bhi.n	8008082 <UART_SetConfig+0x33e>
 8008052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008056:	d00b      	beq.n	8008070 <UART_SetConfig+0x32c>
 8008058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800805c:	d811      	bhi.n	8008082 <UART_SetConfig+0x33e>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <UART_SetConfig+0x326>
 8008062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008066:	d006      	beq.n	8008076 <UART_SetConfig+0x332>
 8008068:	e00b      	b.n	8008082 <UART_SetConfig+0x33e>
 800806a:	2300      	movs	r3, #0
 800806c:	77fb      	strb	r3, [r7, #31]
 800806e:	e00d      	b.n	800808c <UART_SetConfig+0x348>
 8008070:	2302      	movs	r3, #2
 8008072:	77fb      	strb	r3, [r7, #31]
 8008074:	e00a      	b.n	800808c <UART_SetConfig+0x348>
 8008076:	2304      	movs	r3, #4
 8008078:	77fb      	strb	r3, [r7, #31]
 800807a:	e007      	b.n	800808c <UART_SetConfig+0x348>
 800807c:	2308      	movs	r3, #8
 800807e:	77fb      	strb	r3, [r7, #31]
 8008080:	e004      	b.n	800808c <UART_SetConfig+0x348>
 8008082:	2310      	movs	r3, #16
 8008084:	77fb      	strb	r3, [r7, #31]
 8008086:	e001      	b.n	800808c <UART_SetConfig+0x348>
 8008088:	2310      	movs	r3, #16
 800808a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008094:	d15b      	bne.n	800814e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008096:	7ffb      	ldrb	r3, [r7, #31]
 8008098:	2b08      	cmp	r3, #8
 800809a:	d828      	bhi.n	80080ee <UART_SetConfig+0x3aa>
 800809c:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <UART_SetConfig+0x360>)
 800809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a2:	bf00      	nop
 80080a4:	080080c9 	.word	0x080080c9
 80080a8:	080080d1 	.word	0x080080d1
 80080ac:	080080d9 	.word	0x080080d9
 80080b0:	080080ef 	.word	0x080080ef
 80080b4:	080080df 	.word	0x080080df
 80080b8:	080080ef 	.word	0x080080ef
 80080bc:	080080ef 	.word	0x080080ef
 80080c0:	080080ef 	.word	0x080080ef
 80080c4:	080080e7 	.word	0x080080e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080c8:	f7fd fbec 	bl	80058a4 <HAL_RCC_GetPCLK1Freq>
 80080cc:	61b8      	str	r0, [r7, #24]
        break;
 80080ce:	e013      	b.n	80080f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080d0:	f7fd fbfc 	bl	80058cc <HAL_RCC_GetPCLK2Freq>
 80080d4:	61b8      	str	r0, [r7, #24]
        break;
 80080d6:	e00f      	b.n	80080f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080d8:	4b4b      	ldr	r3, [pc, #300]	; (8008208 <UART_SetConfig+0x4c4>)
 80080da:	61bb      	str	r3, [r7, #24]
        break;
 80080dc:	e00c      	b.n	80080f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080de:	f7fd facf 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 80080e2:	61b8      	str	r0, [r7, #24]
        break;
 80080e4:	e008      	b.n	80080f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ea:	61bb      	str	r3, [r7, #24]
        break;
 80080ec:	e004      	b.n	80080f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	77bb      	strb	r3, [r7, #30]
        break;
 80080f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d074      	beq.n	80081e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	005a      	lsls	r2, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	085b      	lsrs	r3, r3, #1
 8008108:	441a      	add	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008112:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	2b0f      	cmp	r3, #15
 8008118:	d916      	bls.n	8008148 <UART_SetConfig+0x404>
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008120:	d212      	bcs.n	8008148 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	b29b      	uxth	r3, r3
 8008126:	f023 030f 	bic.w	r3, r3, #15
 800812a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	085b      	lsrs	r3, r3, #1
 8008130:	b29b      	uxth	r3, r3
 8008132:	f003 0307 	and.w	r3, r3, #7
 8008136:	b29a      	uxth	r2, r3
 8008138:	89fb      	ldrh	r3, [r7, #14]
 800813a:	4313      	orrs	r3, r2
 800813c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	89fa      	ldrh	r2, [r7, #14]
 8008144:	60da      	str	r2, [r3, #12]
 8008146:	e04f      	b.n	80081e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	77bb      	strb	r3, [r7, #30]
 800814c:	e04c      	b.n	80081e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800814e:	7ffb      	ldrb	r3, [r7, #31]
 8008150:	2b08      	cmp	r3, #8
 8008152:	d828      	bhi.n	80081a6 <UART_SetConfig+0x462>
 8008154:	a201      	add	r2, pc, #4	; (adr r2, 800815c <UART_SetConfig+0x418>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	08008181 	.word	0x08008181
 8008160:	08008189 	.word	0x08008189
 8008164:	08008191 	.word	0x08008191
 8008168:	080081a7 	.word	0x080081a7
 800816c:	08008197 	.word	0x08008197
 8008170:	080081a7 	.word	0x080081a7
 8008174:	080081a7 	.word	0x080081a7
 8008178:	080081a7 	.word	0x080081a7
 800817c:	0800819f 	.word	0x0800819f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008180:	f7fd fb90 	bl	80058a4 <HAL_RCC_GetPCLK1Freq>
 8008184:	61b8      	str	r0, [r7, #24]
        break;
 8008186:	e013      	b.n	80081b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008188:	f7fd fba0 	bl	80058cc <HAL_RCC_GetPCLK2Freq>
 800818c:	61b8      	str	r0, [r7, #24]
        break;
 800818e:	e00f      	b.n	80081b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008190:	4b1d      	ldr	r3, [pc, #116]	; (8008208 <UART_SetConfig+0x4c4>)
 8008192:	61bb      	str	r3, [r7, #24]
        break;
 8008194:	e00c      	b.n	80081b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008196:	f7fd fa73 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 800819a:	61b8      	str	r0, [r7, #24]
        break;
 800819c:	e008      	b.n	80081b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800819e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a2:	61bb      	str	r3, [r7, #24]
        break;
 80081a4:	e004      	b.n	80081b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	77bb      	strb	r3, [r7, #30]
        break;
 80081ae:	bf00      	nop
    }

    if (pclk != 0U)
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d018      	beq.n	80081e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	085a      	lsrs	r2, r3, #1
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	441a      	add	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2b0f      	cmp	r3, #15
 80081ce:	d909      	bls.n	80081e4 <UART_SetConfig+0x4a0>
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d6:	d205      	bcs.n	80081e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	b29a      	uxth	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60da      	str	r2, [r3, #12]
 80081e2:	e001      	b.n	80081e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80081f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3720      	adds	r7, #32
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	40007c00 	.word	0x40007c00
 8008204:	40023800 	.word	0x40023800
 8008208:	00f42400 	.word	0x00f42400

0800820c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00a      	beq.n	800827a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	f003 0310 	and.w	r3, r3, #16
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00a      	beq.n	80082be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01a      	beq.n	8008322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830a:	d10a      	bne.n	8008322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	605a      	str	r2, [r3, #4]
  }
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af02      	add	r7, sp, #8
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008360:	f7fa ff0c 	bl	800317c <HAL_GetTick>
 8008364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	2b08      	cmp	r3, #8
 8008372:	d10e      	bne.n	8008392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f81b 	bl	80083be <UART_WaitOnFlagUntilTimeout>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e011      	b.n	80083b6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2220      	movs	r2, #32
 800839c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b09c      	sub	sp, #112	; 0x70
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	4613      	mov	r3, r2
 80083cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ce:	e0a7      	b.n	8008520 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d6:	f000 80a3 	beq.w	8008520 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083da:	f7fa fecf 	bl	800317c <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d302      	bcc.n	80083f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80083ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d13f      	bne.n	8008470 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008404:	667b      	str	r3, [r7, #100]	; 0x64
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800840e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008410:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800841c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e6      	bne.n	80083f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	f023 0301 	bic.w	r3, r3, #1
 8008438:	663b      	str	r3, [r7, #96]	; 0x60
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3308      	adds	r3, #8
 8008440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008442:	64ba      	str	r2, [r7, #72]	; 0x48
 8008444:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e5      	bne.n	8008422 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2220      	movs	r2, #32
 800845a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2220      	movs	r2, #32
 8008460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e068      	b.n	8008542 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	d050      	beq.n	8008520 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800848c:	d148      	bne.n	8008520 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008496:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b6:	637b      	str	r3, [r7, #52]	; 0x34
 80084b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e6      	bne.n	8008498 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3308      	adds	r3, #8
 80084d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	613b      	str	r3, [r7, #16]
   return(result);
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f023 0301 	bic.w	r3, r3, #1
 80084e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084ea:	623a      	str	r2, [r7, #32]
 80084ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	69f9      	ldr	r1, [r7, #28]
 80084f0:	6a3a      	ldr	r2, [r7, #32]
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e5      	bne.n	80084ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2220      	movs	r2, #32
 8008502:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2220      	movs	r2, #32
 8008508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2220      	movs	r2, #32
 8008510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e010      	b.n	8008542 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	69da      	ldr	r2, [r3, #28]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	4013      	ands	r3, r2
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	429a      	cmp	r2, r3
 800852e:	bf0c      	ite	eq
 8008530:	2301      	moveq	r3, #1
 8008532:	2300      	movne	r3, #0
 8008534:	b2db      	uxtb	r3, r3
 8008536:	461a      	mov	r2, r3
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	429a      	cmp	r2, r3
 800853c:	f43f af48 	beq.w	80083d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3770      	adds	r7, #112	; 0x70
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
	...

0800854c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800854c:	b480      	push	{r7}
 800854e:	b097      	sub	sp, #92	; 0x5c
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	88fa      	ldrh	r2, [r7, #6]
 8008564:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	88fa      	ldrh	r2, [r7, #6]
 800856c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800857e:	d10e      	bne.n	800859e <UART_Start_Receive_IT+0x52>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d105      	bne.n	8008594 <UART_Start_Receive_IT+0x48>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800858e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008592:	e02d      	b.n	80085f0 <UART_Start_Receive_IT+0xa4>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	22ff      	movs	r2, #255	; 0xff
 8008598:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800859c:	e028      	b.n	80085f0 <UART_Start_Receive_IT+0xa4>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10d      	bne.n	80085c2 <UART_Start_Receive_IT+0x76>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d104      	bne.n	80085b8 <UART_Start_Receive_IT+0x6c>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	22ff      	movs	r2, #255	; 0xff
 80085b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085b6:	e01b      	b.n	80085f0 <UART_Start_Receive_IT+0xa4>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	227f      	movs	r2, #127	; 0x7f
 80085bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085c0:	e016      	b.n	80085f0 <UART_Start_Receive_IT+0xa4>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085ca:	d10d      	bne.n	80085e8 <UART_Start_Receive_IT+0x9c>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d104      	bne.n	80085de <UART_Start_Receive_IT+0x92>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	227f      	movs	r2, #127	; 0x7f
 80085d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085dc:	e008      	b.n	80085f0 <UART_Start_Receive_IT+0xa4>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	223f      	movs	r2, #63	; 0x3f
 80085e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085e6:	e003      	b.n	80085f0 <UART_Start_Receive_IT+0xa4>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2222      	movs	r2, #34	; 0x22
 80085fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3308      	adds	r3, #8
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	f043 0301 	orr.w	r3, r3, #1
 8008616:	657b      	str	r3, [r7, #84]	; 0x54
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3308      	adds	r3, #8
 800861e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008620:	64ba      	str	r2, [r7, #72]	; 0x48
 8008622:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800862e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e5      	bne.n	8008600 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800863c:	d107      	bne.n	800864e <UART_Start_Receive_IT+0x102>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d103      	bne.n	800864e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4a21      	ldr	r2, [pc, #132]	; (80086d0 <UART_Start_Receive_IT+0x184>)
 800864a:	669a      	str	r2, [r3, #104]	; 0x68
 800864c:	e002      	b.n	8008654 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4a20      	ldr	r2, [pc, #128]	; (80086d4 <UART_Start_Receive_IT+0x188>)
 8008652:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d019      	beq.n	8008690 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008670:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800867a:	637b      	str	r3, [r7, #52]	; 0x34
 800867c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e6      	bne.n	800865c <UART_Start_Receive_IT+0x110>
 800868e:	e018      	b.n	80086c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	e853 3f00 	ldrex	r3, [r3]
 800869c:	613b      	str	r3, [r7, #16]
   return(result);
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	f043 0320 	orr.w	r3, r3, #32
 80086a4:	653b      	str	r3, [r7, #80]	; 0x50
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ae:	623b      	str	r3, [r7, #32]
 80086b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	69f9      	ldr	r1, [r7, #28]
 80086b4:	6a3a      	ldr	r2, [r7, #32]
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e6      	bne.n	8008690 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	375c      	adds	r7, #92	; 0x5c
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	08008987 	.word	0x08008987
 80086d4:	08008821 	.word	0x08008821

080086d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086d8:	b480      	push	{r7}
 80086da:	b095      	sub	sp, #84	; 0x54
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008700:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008704:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e6      	bne.n	80086e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3308      	adds	r3, #8
 8008718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	61fb      	str	r3, [r7, #28]
   return(result);
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	f023 0301 	bic.w	r3, r3, #1
 8008728:	64bb      	str	r3, [r7, #72]	; 0x48
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3308      	adds	r3, #8
 8008730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008732:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008734:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e5      	bne.n	8008712 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800874a:	2b01      	cmp	r3, #1
 800874c:	d118      	bne.n	8008780 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	e853 3f00 	ldrex	r3, [r3]
 800875a:	60bb      	str	r3, [r7, #8]
   return(result);
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f023 0310 	bic.w	r3, r3, #16
 8008762:	647b      	str	r3, [r7, #68]	; 0x44
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	461a      	mov	r2, r3
 800876a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	6979      	ldr	r1, [r7, #20]
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	613b      	str	r3, [r7, #16]
   return(result);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e6      	bne.n	800874e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2220      	movs	r2, #32
 8008784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008794:	bf00      	nop
 8008796:	3754      	adds	r7, #84	; 0x54
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff faaa 	bl	8007d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087c4:	bf00      	nop
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e8:	61fb      	str	r3, [r7, #28]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	61bb      	str	r3, [r7, #24]
 80087f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	6979      	ldr	r1, [r7, #20]
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e6      	bne.n	80087d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2220      	movs	r2, #32
 800880a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff fa76 	bl	8007d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008818:	bf00      	nop
 800881a:	3720      	adds	r7, #32
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b096      	sub	sp, #88	; 0x58
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800882e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008838:	2b22      	cmp	r3, #34	; 0x22
 800883a:	f040 8098 	bne.w	800896e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008848:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800884c:	b2d9      	uxtb	r1, r3
 800884e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008852:	b2da      	uxtb	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008858:	400a      	ands	r2, r1
 800885a:	b2d2      	uxtb	r2, r2
 800885c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d17b      	bne.n	800897e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888e:	e853 3f00 	ldrex	r3, [r3]
 8008892:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008896:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800889a:	653b      	str	r3, [r7, #80]	; 0x50
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a4:	647b      	str	r3, [r7, #68]	; 0x44
 80088a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e6      	bne.n	8008886 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3308      	adds	r3, #8
 80088be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	623b      	str	r3, [r7, #32]
   return(result);
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	f023 0301 	bic.w	r3, r3, #1
 80088ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3308      	adds	r3, #8
 80088d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088d8:	633a      	str	r2, [r7, #48]	; 0x30
 80088da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e5      	bne.n	80088b8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2220      	movs	r2, #32
 80088f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008904:	2b01      	cmp	r3, #1
 8008906:	d12e      	bne.n	8008966 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	60fb      	str	r3, [r7, #12]
   return(result);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 0310 	bic.w	r3, r3, #16
 8008922:	64bb      	str	r3, [r7, #72]	; 0x48
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	461a      	mov	r2, r3
 800892a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800892c:	61fb      	str	r3, [r7, #28]
 800892e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008930:	69b9      	ldr	r1, [r7, #24]
 8008932:	69fa      	ldr	r2, [r7, #28]
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	617b      	str	r3, [r7, #20]
   return(result);
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e6      	bne.n	800890e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	f003 0310 	and.w	r3, r3, #16
 800894a:	2b10      	cmp	r3, #16
 800894c:	d103      	bne.n	8008956 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2210      	movs	r2, #16
 8008954:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff f9e4 	bl	8007d2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008964:	e00b      	b.n	800897e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7f9 f9c0 	bl	8001cec <HAL_UART_RxCpltCallback>
}
 800896c:	e007      	b.n	800897e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	699a      	ldr	r2, [r3, #24]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f042 0208 	orr.w	r2, r2, #8
 800897c:	619a      	str	r2, [r3, #24]
}
 800897e:	bf00      	nop
 8008980:	3758      	adds	r7, #88	; 0x58
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b096      	sub	sp, #88	; 0x58
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008994:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800899e:	2b22      	cmp	r3, #34	; 0x22
 80089a0:	f040 8098 	bne.w	8008ad4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80089b4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80089b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089bc:	4013      	ands	r3, r2
 80089be:	b29a      	uxth	r2, r3
 80089c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c8:	1c9a      	adds	r2, r3, #2
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3b01      	subs	r3, #1
 80089d8:	b29a      	uxth	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d17b      	bne.n	8008ae4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a12:	e841 2300 	strex	r3, r2, [r1]
 8008a16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1e6      	bne.n	80089ec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3308      	adds	r3, #8
 8008a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f023 0301 	bic.w	r3, r3, #1
 8008a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3308      	adds	r3, #8
 8008a3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a46:	e841 2300 	strex	r3, r2, [r1]
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1e5      	bne.n	8008a1e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2220      	movs	r2, #32
 8008a56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d12e      	bne.n	8008acc <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f023 0310 	bic.w	r3, r3, #16
 8008a88:	647b      	str	r3, [r7, #68]	; 0x44
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a92:	61bb      	str	r3, [r7, #24]
 8008a94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6979      	ldr	r1, [r7, #20]
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e6      	bne.n	8008a74 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	f003 0310 	and.w	r3, r3, #16
 8008ab0:	2b10      	cmp	r3, #16
 8008ab2:	d103      	bne.n	8008abc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2210      	movs	r2, #16
 8008aba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff f931 	bl	8007d2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aca:	e00b      	b.n	8008ae4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7f9 f90d 	bl	8001cec <HAL_UART_RxCpltCallback>
}
 8008ad2:	e007      	b.n	8008ae4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	699a      	ldr	r2, [r3, #24]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f042 0208 	orr.w	r2, r2, #8
 8008ae2:	619a      	str	r2, [r3, #24]
}
 8008ae4:	bf00      	nop
 8008ae6:	3758      	adds	r7, #88	; 0x58
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <atof>:
 8008aec:	2100      	movs	r1, #0
 8008aee:	f000 be99 	b.w	8009824 <strtod>
	...

08008af4 <gcvt>:
 8008af4:	b530      	push	{r4, r5, lr}
 8008af6:	2200      	movs	r2, #0
 8008af8:	b085      	sub	sp, #20
 8008afa:	460c      	mov	r4, r1
 8008afc:	4605      	mov	r5, r0
 8008afe:	2300      	movs	r3, #0
 8008b00:	ec51 0b10 	vmov	r0, r1, d0
 8008b04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b08:	f7f8 f808 	bl	8000b1c <__aeabi_dcmplt>
 8008b0c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008b10:	4622      	mov	r2, r4
 8008b12:	b118      	cbz	r0, 8008b1c <gcvt+0x28>
 8008b14:	232d      	movs	r3, #45	; 0x2d
 8008b16:	f802 3b01 	strb.w	r3, [r2], #1
 8008b1a:	3d01      	subs	r5, #1
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4806      	ldr	r0, [pc, #24]	; (8008b38 <gcvt+0x44>)
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	4629      	mov	r1, r5
 8008b24:	2367      	movs	r3, #103	; 0x67
 8008b26:	6800      	ldr	r0, [r0, #0]
 8008b28:	f000 ff02 	bl	8009930 <_gcvt>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	bf14      	ite	ne
 8008b30:	4620      	movne	r0, r4
 8008b32:	2000      	moveq	r0, #0
 8008b34:	b005      	add	sp, #20
 8008b36:	bd30      	pop	{r4, r5, pc}
 8008b38:	2000001c 	.word	0x2000001c

08008b3c <__errno>:
 8008b3c:	4b01      	ldr	r3, [pc, #4]	; (8008b44 <__errno+0x8>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	2000001c 	.word	0x2000001c

08008b48 <__libc_init_array>:
 8008b48:	b570      	push	{r4, r5, r6, lr}
 8008b4a:	4d0d      	ldr	r5, [pc, #52]	; (8008b80 <__libc_init_array+0x38>)
 8008b4c:	4c0d      	ldr	r4, [pc, #52]	; (8008b84 <__libc_init_array+0x3c>)
 8008b4e:	1b64      	subs	r4, r4, r5
 8008b50:	10a4      	asrs	r4, r4, #2
 8008b52:	2600      	movs	r6, #0
 8008b54:	42a6      	cmp	r6, r4
 8008b56:	d109      	bne.n	8008b6c <__libc_init_array+0x24>
 8008b58:	4d0b      	ldr	r5, [pc, #44]	; (8008b88 <__libc_init_array+0x40>)
 8008b5a:	4c0c      	ldr	r4, [pc, #48]	; (8008b8c <__libc_init_array+0x44>)
 8008b5c:	f003 ff0c 	bl	800c978 <_init>
 8008b60:	1b64      	subs	r4, r4, r5
 8008b62:	10a4      	asrs	r4, r4, #2
 8008b64:	2600      	movs	r6, #0
 8008b66:	42a6      	cmp	r6, r4
 8008b68:	d105      	bne.n	8008b76 <__libc_init_array+0x2e>
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b70:	4798      	blx	r3
 8008b72:	3601      	adds	r6, #1
 8008b74:	e7ee      	b.n	8008b54 <__libc_init_array+0xc>
 8008b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7a:	4798      	blx	r3
 8008b7c:	3601      	adds	r6, #1
 8008b7e:	e7f2      	b.n	8008b66 <__libc_init_array+0x1e>
 8008b80:	0800d638 	.word	0x0800d638
 8008b84:	0800d638 	.word	0x0800d638
 8008b88:	0800d638 	.word	0x0800d638
 8008b8c:	0800d63c 	.word	0x0800d63c

08008b90 <memcpy>:
 8008b90:	440a      	add	r2, r1
 8008b92:	4291      	cmp	r1, r2
 8008b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b98:	d100      	bne.n	8008b9c <memcpy+0xc>
 8008b9a:	4770      	bx	lr
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ba6:	4291      	cmp	r1, r2
 8008ba8:	d1f9      	bne.n	8008b9e <memcpy+0xe>
 8008baa:	bd10      	pop	{r4, pc}

08008bac <memset>:
 8008bac:	4402      	add	r2, r0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d100      	bne.n	8008bb6 <memset+0xa>
 8008bb4:	4770      	bx	lr
 8008bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bba:	e7f9      	b.n	8008bb0 <memset+0x4>

08008bbc <strcat>:
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	7814      	ldrb	r4, [r2, #0]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	3201      	adds	r2, #1
 8008bc6:	2c00      	cmp	r4, #0
 8008bc8:	d1fa      	bne.n	8008bc0 <strcat+0x4>
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	d1f9      	bne.n	8008bcc <strcat+0x10>
 8008bd8:	bd10      	pop	{r4, pc}

08008bda <sulp>:
 8008bda:	b570      	push	{r4, r5, r6, lr}
 8008bdc:	4604      	mov	r4, r0
 8008bde:	460d      	mov	r5, r1
 8008be0:	ec45 4b10 	vmov	d0, r4, r5
 8008be4:	4616      	mov	r6, r2
 8008be6:	f001 fe57 	bl	800a898 <__ulp>
 8008bea:	ec51 0b10 	vmov	r0, r1, d0
 8008bee:	b17e      	cbz	r6, 8008c10 <sulp+0x36>
 8008bf0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bf4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	dd09      	ble.n	8008c10 <sulp+0x36>
 8008bfc:	051b      	lsls	r3, r3, #20
 8008bfe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c02:	2400      	movs	r4, #0
 8008c04:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c08:	4622      	mov	r2, r4
 8008c0a:	462b      	mov	r3, r5
 8008c0c:	f7f7 fd14 	bl	8000638 <__aeabi_dmul>
 8008c10:	bd70      	pop	{r4, r5, r6, pc}
 8008c12:	0000      	movs	r0, r0
 8008c14:	0000      	movs	r0, r0
	...

08008c18 <_strtod_l>:
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	ed2d 8b02 	vpush	{d8}
 8008c20:	b09d      	sub	sp, #116	; 0x74
 8008c22:	461f      	mov	r7, r3
 8008c24:	2300      	movs	r3, #0
 8008c26:	9318      	str	r3, [sp, #96]	; 0x60
 8008c28:	4ba2      	ldr	r3, [pc, #648]	; (8008eb4 <_strtod_l+0x29c>)
 8008c2a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	9305      	str	r3, [sp, #20]
 8008c30:	4604      	mov	r4, r0
 8008c32:	4618      	mov	r0, r3
 8008c34:	4688      	mov	r8, r1
 8008c36:	f7f7 faeb 	bl	8000210 <strlen>
 8008c3a:	f04f 0a00 	mov.w	sl, #0
 8008c3e:	4605      	mov	r5, r0
 8008c40:	f04f 0b00 	mov.w	fp, #0
 8008c44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	2a2b      	cmp	r2, #43	; 0x2b
 8008c4e:	d04e      	beq.n	8008cee <_strtod_l+0xd6>
 8008c50:	d83b      	bhi.n	8008cca <_strtod_l+0xb2>
 8008c52:	2a0d      	cmp	r2, #13
 8008c54:	d834      	bhi.n	8008cc0 <_strtod_l+0xa8>
 8008c56:	2a08      	cmp	r2, #8
 8008c58:	d834      	bhi.n	8008cc4 <_strtod_l+0xac>
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	d03e      	beq.n	8008cdc <_strtod_l+0xc4>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	930a      	str	r3, [sp, #40]	; 0x28
 8008c62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008c64:	7833      	ldrb	r3, [r6, #0]
 8008c66:	2b30      	cmp	r3, #48	; 0x30
 8008c68:	f040 80b0 	bne.w	8008dcc <_strtod_l+0x1b4>
 8008c6c:	7873      	ldrb	r3, [r6, #1]
 8008c6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c72:	2b58      	cmp	r3, #88	; 0x58
 8008c74:	d168      	bne.n	8008d48 <_strtod_l+0x130>
 8008c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	ab18      	add	r3, sp, #96	; 0x60
 8008c7c:	9702      	str	r7, [sp, #8]
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	4a8d      	ldr	r2, [pc, #564]	; (8008eb8 <_strtod_l+0x2a0>)
 8008c82:	ab19      	add	r3, sp, #100	; 0x64
 8008c84:	a917      	add	r1, sp, #92	; 0x5c
 8008c86:	4620      	mov	r0, r4
 8008c88:	f000 ff7a 	bl	8009b80 <__gethex>
 8008c8c:	f010 0707 	ands.w	r7, r0, #7
 8008c90:	4605      	mov	r5, r0
 8008c92:	d005      	beq.n	8008ca0 <_strtod_l+0x88>
 8008c94:	2f06      	cmp	r7, #6
 8008c96:	d12c      	bne.n	8008cf2 <_strtod_l+0xda>
 8008c98:	3601      	adds	r6, #1
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008ca0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f040 8590 	bne.w	80097c8 <_strtod_l+0xbb0>
 8008ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008caa:	b1eb      	cbz	r3, 8008ce8 <_strtod_l+0xd0>
 8008cac:	4652      	mov	r2, sl
 8008cae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008cb2:	ec43 2b10 	vmov	d0, r2, r3
 8008cb6:	b01d      	add	sp, #116	; 0x74
 8008cb8:	ecbd 8b02 	vpop	{d8}
 8008cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc0:	2a20      	cmp	r2, #32
 8008cc2:	d1cc      	bne.n	8008c5e <_strtod_l+0x46>
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008cc8:	e7be      	b.n	8008c48 <_strtod_l+0x30>
 8008cca:	2a2d      	cmp	r2, #45	; 0x2d
 8008ccc:	d1c7      	bne.n	8008c5e <_strtod_l+0x46>
 8008cce:	2201      	movs	r2, #1
 8008cd0:	920a      	str	r2, [sp, #40]	; 0x28
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cd6:	785b      	ldrb	r3, [r3, #1]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1c2      	bne.n	8008c62 <_strtod_l+0x4a>
 8008cdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cde:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f040 856e 	bne.w	80097c4 <_strtod_l+0xbac>
 8008ce8:	4652      	mov	r2, sl
 8008cea:	465b      	mov	r3, fp
 8008cec:	e7e1      	b.n	8008cb2 <_strtod_l+0x9a>
 8008cee:	2200      	movs	r2, #0
 8008cf0:	e7ee      	b.n	8008cd0 <_strtod_l+0xb8>
 8008cf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008cf4:	b13a      	cbz	r2, 8008d06 <_strtod_l+0xee>
 8008cf6:	2135      	movs	r1, #53	; 0x35
 8008cf8:	a81a      	add	r0, sp, #104	; 0x68
 8008cfa:	f001 fef7 	bl	800aaec <__copybits>
 8008cfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d00:	4620      	mov	r0, r4
 8008d02:	f001 fa97 	bl	800a234 <_Bfree>
 8008d06:	3f01      	subs	r7, #1
 8008d08:	2f04      	cmp	r7, #4
 8008d0a:	d806      	bhi.n	8008d1a <_strtod_l+0x102>
 8008d0c:	e8df f007 	tbb	[pc, r7]
 8008d10:	1714030a 	.word	0x1714030a
 8008d14:	0a          	.byte	0x0a
 8008d15:	00          	.byte	0x00
 8008d16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008d1a:	0728      	lsls	r0, r5, #28
 8008d1c:	d5c0      	bpl.n	8008ca0 <_strtod_l+0x88>
 8008d1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008d22:	e7bd      	b.n	8008ca0 <_strtod_l+0x88>
 8008d24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008d28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d36:	e7f0      	b.n	8008d1a <_strtod_l+0x102>
 8008d38:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008ebc <_strtod_l+0x2a4>
 8008d3c:	e7ed      	b.n	8008d1a <_strtod_l+0x102>
 8008d3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008d42:	f04f 3aff 	mov.w	sl, #4294967295
 8008d46:	e7e8      	b.n	8008d1a <_strtod_l+0x102>
 8008d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b30      	cmp	r3, #48	; 0x30
 8008d52:	d0f9      	beq.n	8008d48 <_strtod_l+0x130>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d0a3      	beq.n	8008ca0 <_strtod_l+0x88>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	f04f 0900 	mov.w	r9, #0
 8008d5e:	9304      	str	r3, [sp, #16]
 8008d60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d62:	9308      	str	r3, [sp, #32]
 8008d64:	f8cd 901c 	str.w	r9, [sp, #28]
 8008d68:	464f      	mov	r7, r9
 8008d6a:	220a      	movs	r2, #10
 8008d6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008d6e:	7806      	ldrb	r6, [r0, #0]
 8008d70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d74:	b2d9      	uxtb	r1, r3
 8008d76:	2909      	cmp	r1, #9
 8008d78:	d92a      	bls.n	8008dd0 <_strtod_l+0x1b8>
 8008d7a:	9905      	ldr	r1, [sp, #20]
 8008d7c:	462a      	mov	r2, r5
 8008d7e:	f002 f957 	bl	800b030 <strncmp>
 8008d82:	b398      	cbz	r0, 8008dec <_strtod_l+0x1d4>
 8008d84:	2000      	movs	r0, #0
 8008d86:	4632      	mov	r2, r6
 8008d88:	463d      	mov	r5, r7
 8008d8a:	9005      	str	r0, [sp, #20]
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2a65      	cmp	r2, #101	; 0x65
 8008d90:	d001      	beq.n	8008d96 <_strtod_l+0x17e>
 8008d92:	2a45      	cmp	r2, #69	; 0x45
 8008d94:	d118      	bne.n	8008dc8 <_strtod_l+0x1b0>
 8008d96:	b91d      	cbnz	r5, 8008da0 <_strtod_l+0x188>
 8008d98:	9a04      	ldr	r2, [sp, #16]
 8008d9a:	4302      	orrs	r2, r0
 8008d9c:	d09e      	beq.n	8008cdc <_strtod_l+0xc4>
 8008d9e:	2500      	movs	r5, #0
 8008da0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008da4:	f108 0201 	add.w	r2, r8, #1
 8008da8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008daa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008dae:	2a2b      	cmp	r2, #43	; 0x2b
 8008db0:	d075      	beq.n	8008e9e <_strtod_l+0x286>
 8008db2:	2a2d      	cmp	r2, #45	; 0x2d
 8008db4:	d07b      	beq.n	8008eae <_strtod_l+0x296>
 8008db6:	f04f 0c00 	mov.w	ip, #0
 8008dba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008dbe:	2909      	cmp	r1, #9
 8008dc0:	f240 8082 	bls.w	8008ec8 <_strtod_l+0x2b0>
 8008dc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008dc8:	2600      	movs	r6, #0
 8008dca:	e09d      	b.n	8008f08 <_strtod_l+0x2f0>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	e7c4      	b.n	8008d5a <_strtod_l+0x142>
 8008dd0:	2f08      	cmp	r7, #8
 8008dd2:	bfd8      	it	le
 8008dd4:	9907      	ldrle	r1, [sp, #28]
 8008dd6:	f100 0001 	add.w	r0, r0, #1
 8008dda:	bfda      	itte	le
 8008ddc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008de0:	9307      	strle	r3, [sp, #28]
 8008de2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008de6:	3701      	adds	r7, #1
 8008de8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008dea:	e7bf      	b.n	8008d6c <_strtod_l+0x154>
 8008dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dee:	195a      	adds	r2, r3, r5
 8008df0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008df2:	5d5a      	ldrb	r2, [r3, r5]
 8008df4:	2f00      	cmp	r7, #0
 8008df6:	d037      	beq.n	8008e68 <_strtod_l+0x250>
 8008df8:	9005      	str	r0, [sp, #20]
 8008dfa:	463d      	mov	r5, r7
 8008dfc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e00:	2b09      	cmp	r3, #9
 8008e02:	d912      	bls.n	8008e2a <_strtod_l+0x212>
 8008e04:	2301      	movs	r3, #1
 8008e06:	e7c2      	b.n	8008d8e <_strtod_l+0x176>
 8008e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e0e:	785a      	ldrb	r2, [r3, #1]
 8008e10:	3001      	adds	r0, #1
 8008e12:	2a30      	cmp	r2, #48	; 0x30
 8008e14:	d0f8      	beq.n	8008e08 <_strtod_l+0x1f0>
 8008e16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e1a:	2b08      	cmp	r3, #8
 8008e1c:	f200 84d9 	bhi.w	80097d2 <_strtod_l+0xbba>
 8008e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e22:	9005      	str	r0, [sp, #20]
 8008e24:	2000      	movs	r0, #0
 8008e26:	9308      	str	r3, [sp, #32]
 8008e28:	4605      	mov	r5, r0
 8008e2a:	3a30      	subs	r2, #48	; 0x30
 8008e2c:	f100 0301 	add.w	r3, r0, #1
 8008e30:	d014      	beq.n	8008e5c <_strtod_l+0x244>
 8008e32:	9905      	ldr	r1, [sp, #20]
 8008e34:	4419      	add	r1, r3
 8008e36:	9105      	str	r1, [sp, #20]
 8008e38:	462b      	mov	r3, r5
 8008e3a:	eb00 0e05 	add.w	lr, r0, r5
 8008e3e:	210a      	movs	r1, #10
 8008e40:	4573      	cmp	r3, lr
 8008e42:	d113      	bne.n	8008e6c <_strtod_l+0x254>
 8008e44:	182b      	adds	r3, r5, r0
 8008e46:	2b08      	cmp	r3, #8
 8008e48:	f105 0501 	add.w	r5, r5, #1
 8008e4c:	4405      	add	r5, r0
 8008e4e:	dc1c      	bgt.n	8008e8a <_strtod_l+0x272>
 8008e50:	9907      	ldr	r1, [sp, #28]
 8008e52:	230a      	movs	r3, #10
 8008e54:	fb03 2301 	mla	r3, r3, r1, r2
 8008e58:	9307      	str	r3, [sp, #28]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e5e:	1c51      	adds	r1, r2, #1
 8008e60:	9117      	str	r1, [sp, #92]	; 0x5c
 8008e62:	7852      	ldrb	r2, [r2, #1]
 8008e64:	4618      	mov	r0, r3
 8008e66:	e7c9      	b.n	8008dfc <_strtod_l+0x1e4>
 8008e68:	4638      	mov	r0, r7
 8008e6a:	e7d2      	b.n	8008e12 <_strtod_l+0x1fa>
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	dc04      	bgt.n	8008e7a <_strtod_l+0x262>
 8008e70:	9e07      	ldr	r6, [sp, #28]
 8008e72:	434e      	muls	r6, r1
 8008e74:	9607      	str	r6, [sp, #28]
 8008e76:	3301      	adds	r3, #1
 8008e78:	e7e2      	b.n	8008e40 <_strtod_l+0x228>
 8008e7a:	f103 0c01 	add.w	ip, r3, #1
 8008e7e:	f1bc 0f10 	cmp.w	ip, #16
 8008e82:	bfd8      	it	le
 8008e84:	fb01 f909 	mulle.w	r9, r1, r9
 8008e88:	e7f5      	b.n	8008e76 <_strtod_l+0x25e>
 8008e8a:	2d10      	cmp	r5, #16
 8008e8c:	bfdc      	itt	le
 8008e8e:	230a      	movle	r3, #10
 8008e90:	fb03 2909 	mlale	r9, r3, r9, r2
 8008e94:	e7e1      	b.n	8008e5a <_strtod_l+0x242>
 8008e96:	2300      	movs	r3, #0
 8008e98:	9305      	str	r3, [sp, #20]
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e77c      	b.n	8008d98 <_strtod_l+0x180>
 8008e9e:	f04f 0c00 	mov.w	ip, #0
 8008ea2:	f108 0202 	add.w	r2, r8, #2
 8008ea6:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ea8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008eac:	e785      	b.n	8008dba <_strtod_l+0x1a2>
 8008eae:	f04f 0c01 	mov.w	ip, #1
 8008eb2:	e7f6      	b.n	8008ea2 <_strtod_l+0x28a>
 8008eb4:	0800d270 	.word	0x0800d270
 8008eb8:	0800d1a8 	.word	0x0800d1a8
 8008ebc:	7ff00000 	.word	0x7ff00000
 8008ec0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ec2:	1c51      	adds	r1, r2, #1
 8008ec4:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ec6:	7852      	ldrb	r2, [r2, #1]
 8008ec8:	2a30      	cmp	r2, #48	; 0x30
 8008eca:	d0f9      	beq.n	8008ec0 <_strtod_l+0x2a8>
 8008ecc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ed0:	2908      	cmp	r1, #8
 8008ed2:	f63f af79 	bhi.w	8008dc8 <_strtod_l+0x1b0>
 8008ed6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008eda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008edc:	9206      	str	r2, [sp, #24]
 8008ede:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ee0:	1c51      	adds	r1, r2, #1
 8008ee2:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ee4:	7852      	ldrb	r2, [r2, #1]
 8008ee6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008eea:	2e09      	cmp	r6, #9
 8008eec:	d937      	bls.n	8008f5e <_strtod_l+0x346>
 8008eee:	9e06      	ldr	r6, [sp, #24]
 8008ef0:	1b89      	subs	r1, r1, r6
 8008ef2:	2908      	cmp	r1, #8
 8008ef4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008ef8:	dc02      	bgt.n	8008f00 <_strtod_l+0x2e8>
 8008efa:	4576      	cmp	r6, lr
 8008efc:	bfa8      	it	ge
 8008efe:	4676      	movge	r6, lr
 8008f00:	f1bc 0f00 	cmp.w	ip, #0
 8008f04:	d000      	beq.n	8008f08 <_strtod_l+0x2f0>
 8008f06:	4276      	negs	r6, r6
 8008f08:	2d00      	cmp	r5, #0
 8008f0a:	d14d      	bne.n	8008fa8 <_strtod_l+0x390>
 8008f0c:	9904      	ldr	r1, [sp, #16]
 8008f0e:	4301      	orrs	r1, r0
 8008f10:	f47f aec6 	bne.w	8008ca0 <_strtod_l+0x88>
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f47f aee1 	bne.w	8008cdc <_strtod_l+0xc4>
 8008f1a:	2a69      	cmp	r2, #105	; 0x69
 8008f1c:	d027      	beq.n	8008f6e <_strtod_l+0x356>
 8008f1e:	dc24      	bgt.n	8008f6a <_strtod_l+0x352>
 8008f20:	2a49      	cmp	r2, #73	; 0x49
 8008f22:	d024      	beq.n	8008f6e <_strtod_l+0x356>
 8008f24:	2a4e      	cmp	r2, #78	; 0x4e
 8008f26:	f47f aed9 	bne.w	8008cdc <_strtod_l+0xc4>
 8008f2a:	499f      	ldr	r1, [pc, #636]	; (80091a8 <_strtod_l+0x590>)
 8008f2c:	a817      	add	r0, sp, #92	; 0x5c
 8008f2e:	f001 f87f 	bl	800a030 <__match>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	f43f aed2 	beq.w	8008cdc <_strtod_l+0xc4>
 8008f38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b28      	cmp	r3, #40	; 0x28
 8008f3e:	d12d      	bne.n	8008f9c <_strtod_l+0x384>
 8008f40:	499a      	ldr	r1, [pc, #616]	; (80091ac <_strtod_l+0x594>)
 8008f42:	aa1a      	add	r2, sp, #104	; 0x68
 8008f44:	a817      	add	r0, sp, #92	; 0x5c
 8008f46:	f001 f887 	bl	800a058 <__hexnan>
 8008f4a:	2805      	cmp	r0, #5
 8008f4c:	d126      	bne.n	8008f9c <_strtod_l+0x384>
 8008f4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008f54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008f58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008f5c:	e6a0      	b.n	8008ca0 <_strtod_l+0x88>
 8008f5e:	210a      	movs	r1, #10
 8008f60:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008f64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008f68:	e7b9      	b.n	8008ede <_strtod_l+0x2c6>
 8008f6a:	2a6e      	cmp	r2, #110	; 0x6e
 8008f6c:	e7db      	b.n	8008f26 <_strtod_l+0x30e>
 8008f6e:	4990      	ldr	r1, [pc, #576]	; (80091b0 <_strtod_l+0x598>)
 8008f70:	a817      	add	r0, sp, #92	; 0x5c
 8008f72:	f001 f85d 	bl	800a030 <__match>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	f43f aeb0 	beq.w	8008cdc <_strtod_l+0xc4>
 8008f7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f7e:	498d      	ldr	r1, [pc, #564]	; (80091b4 <_strtod_l+0x59c>)
 8008f80:	3b01      	subs	r3, #1
 8008f82:	a817      	add	r0, sp, #92	; 0x5c
 8008f84:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f86:	f001 f853 	bl	800a030 <__match>
 8008f8a:	b910      	cbnz	r0, 8008f92 <_strtod_l+0x37a>
 8008f8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f8e:	3301      	adds	r3, #1
 8008f90:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f92:	f8df b230 	ldr.w	fp, [pc, #560]	; 80091c4 <_strtod_l+0x5ac>
 8008f96:	f04f 0a00 	mov.w	sl, #0
 8008f9a:	e681      	b.n	8008ca0 <_strtod_l+0x88>
 8008f9c:	4886      	ldr	r0, [pc, #536]	; (80091b8 <_strtod_l+0x5a0>)
 8008f9e:	f002 f827 	bl	800aff0 <nan>
 8008fa2:	ec5b ab10 	vmov	sl, fp, d0
 8008fa6:	e67b      	b.n	8008ca0 <_strtod_l+0x88>
 8008fa8:	9b05      	ldr	r3, [sp, #20]
 8008faa:	9807      	ldr	r0, [sp, #28]
 8008fac:	1af3      	subs	r3, r6, r3
 8008fae:	2f00      	cmp	r7, #0
 8008fb0:	bf08      	it	eq
 8008fb2:	462f      	moveq	r7, r5
 8008fb4:	2d10      	cmp	r5, #16
 8008fb6:	9306      	str	r3, [sp, #24]
 8008fb8:	46a8      	mov	r8, r5
 8008fba:	bfa8      	it	ge
 8008fbc:	f04f 0810 	movge.w	r8, #16
 8008fc0:	f7f7 fac0 	bl	8000544 <__aeabi_ui2d>
 8008fc4:	2d09      	cmp	r5, #9
 8008fc6:	4682      	mov	sl, r0
 8008fc8:	468b      	mov	fp, r1
 8008fca:	dd13      	ble.n	8008ff4 <_strtod_l+0x3dc>
 8008fcc:	4b7b      	ldr	r3, [pc, #492]	; (80091bc <_strtod_l+0x5a4>)
 8008fce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008fd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008fd6:	f7f7 fb2f 	bl	8000638 <__aeabi_dmul>
 8008fda:	4682      	mov	sl, r0
 8008fdc:	4648      	mov	r0, r9
 8008fde:	468b      	mov	fp, r1
 8008fe0:	f7f7 fab0 	bl	8000544 <__aeabi_ui2d>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4650      	mov	r0, sl
 8008fea:	4659      	mov	r1, fp
 8008fec:	f7f7 f96e 	bl	80002cc <__adddf3>
 8008ff0:	4682      	mov	sl, r0
 8008ff2:	468b      	mov	fp, r1
 8008ff4:	2d0f      	cmp	r5, #15
 8008ff6:	dc38      	bgt.n	800906a <_strtod_l+0x452>
 8008ff8:	9b06      	ldr	r3, [sp, #24]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f43f ae50 	beq.w	8008ca0 <_strtod_l+0x88>
 8009000:	dd24      	ble.n	800904c <_strtod_l+0x434>
 8009002:	2b16      	cmp	r3, #22
 8009004:	dc0b      	bgt.n	800901e <_strtod_l+0x406>
 8009006:	496d      	ldr	r1, [pc, #436]	; (80091bc <_strtod_l+0x5a4>)
 8009008:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800900c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009010:	4652      	mov	r2, sl
 8009012:	465b      	mov	r3, fp
 8009014:	f7f7 fb10 	bl	8000638 <__aeabi_dmul>
 8009018:	4682      	mov	sl, r0
 800901a:	468b      	mov	fp, r1
 800901c:	e640      	b.n	8008ca0 <_strtod_l+0x88>
 800901e:	9a06      	ldr	r2, [sp, #24]
 8009020:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009024:	4293      	cmp	r3, r2
 8009026:	db20      	blt.n	800906a <_strtod_l+0x452>
 8009028:	4c64      	ldr	r4, [pc, #400]	; (80091bc <_strtod_l+0x5a4>)
 800902a:	f1c5 050f 	rsb	r5, r5, #15
 800902e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009032:	4652      	mov	r2, sl
 8009034:	465b      	mov	r3, fp
 8009036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800903a:	f7f7 fafd 	bl	8000638 <__aeabi_dmul>
 800903e:	9b06      	ldr	r3, [sp, #24]
 8009040:	1b5d      	subs	r5, r3, r5
 8009042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009046:	e9d4 2300 	ldrd	r2, r3, [r4]
 800904a:	e7e3      	b.n	8009014 <_strtod_l+0x3fc>
 800904c:	9b06      	ldr	r3, [sp, #24]
 800904e:	3316      	adds	r3, #22
 8009050:	db0b      	blt.n	800906a <_strtod_l+0x452>
 8009052:	9b05      	ldr	r3, [sp, #20]
 8009054:	1b9e      	subs	r6, r3, r6
 8009056:	4b59      	ldr	r3, [pc, #356]	; (80091bc <_strtod_l+0x5a4>)
 8009058:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800905c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009060:	4650      	mov	r0, sl
 8009062:	4659      	mov	r1, fp
 8009064:	f7f7 fc12 	bl	800088c <__aeabi_ddiv>
 8009068:	e7d6      	b.n	8009018 <_strtod_l+0x400>
 800906a:	9b06      	ldr	r3, [sp, #24]
 800906c:	eba5 0808 	sub.w	r8, r5, r8
 8009070:	4498      	add	r8, r3
 8009072:	f1b8 0f00 	cmp.w	r8, #0
 8009076:	dd74      	ble.n	8009162 <_strtod_l+0x54a>
 8009078:	f018 030f 	ands.w	r3, r8, #15
 800907c:	d00a      	beq.n	8009094 <_strtod_l+0x47c>
 800907e:	494f      	ldr	r1, [pc, #316]	; (80091bc <_strtod_l+0x5a4>)
 8009080:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009084:	4652      	mov	r2, sl
 8009086:	465b      	mov	r3, fp
 8009088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800908c:	f7f7 fad4 	bl	8000638 <__aeabi_dmul>
 8009090:	4682      	mov	sl, r0
 8009092:	468b      	mov	fp, r1
 8009094:	f038 080f 	bics.w	r8, r8, #15
 8009098:	d04f      	beq.n	800913a <_strtod_l+0x522>
 800909a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800909e:	dd22      	ble.n	80090e6 <_strtod_l+0x4ce>
 80090a0:	2500      	movs	r5, #0
 80090a2:	462e      	mov	r6, r5
 80090a4:	9507      	str	r5, [sp, #28]
 80090a6:	9505      	str	r5, [sp, #20]
 80090a8:	2322      	movs	r3, #34	; 0x22
 80090aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80091c4 <_strtod_l+0x5ac>
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	f04f 0a00 	mov.w	sl, #0
 80090b4:	9b07      	ldr	r3, [sp, #28]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f43f adf2 	beq.w	8008ca0 <_strtod_l+0x88>
 80090bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090be:	4620      	mov	r0, r4
 80090c0:	f001 f8b8 	bl	800a234 <_Bfree>
 80090c4:	9905      	ldr	r1, [sp, #20]
 80090c6:	4620      	mov	r0, r4
 80090c8:	f001 f8b4 	bl	800a234 <_Bfree>
 80090cc:	4631      	mov	r1, r6
 80090ce:	4620      	mov	r0, r4
 80090d0:	f001 f8b0 	bl	800a234 <_Bfree>
 80090d4:	9907      	ldr	r1, [sp, #28]
 80090d6:	4620      	mov	r0, r4
 80090d8:	f001 f8ac 	bl	800a234 <_Bfree>
 80090dc:	4629      	mov	r1, r5
 80090de:	4620      	mov	r0, r4
 80090e0:	f001 f8a8 	bl	800a234 <_Bfree>
 80090e4:	e5dc      	b.n	8008ca0 <_strtod_l+0x88>
 80090e6:	4b36      	ldr	r3, [pc, #216]	; (80091c0 <_strtod_l+0x5a8>)
 80090e8:	9304      	str	r3, [sp, #16]
 80090ea:	2300      	movs	r3, #0
 80090ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80090f0:	4650      	mov	r0, sl
 80090f2:	4659      	mov	r1, fp
 80090f4:	4699      	mov	r9, r3
 80090f6:	f1b8 0f01 	cmp.w	r8, #1
 80090fa:	dc21      	bgt.n	8009140 <_strtod_l+0x528>
 80090fc:	b10b      	cbz	r3, 8009102 <_strtod_l+0x4ea>
 80090fe:	4682      	mov	sl, r0
 8009100:	468b      	mov	fp, r1
 8009102:	4b2f      	ldr	r3, [pc, #188]	; (80091c0 <_strtod_l+0x5a8>)
 8009104:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009108:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800910c:	4652      	mov	r2, sl
 800910e:	465b      	mov	r3, fp
 8009110:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009114:	f7f7 fa90 	bl	8000638 <__aeabi_dmul>
 8009118:	4b2a      	ldr	r3, [pc, #168]	; (80091c4 <_strtod_l+0x5ac>)
 800911a:	460a      	mov	r2, r1
 800911c:	400b      	ands	r3, r1
 800911e:	492a      	ldr	r1, [pc, #168]	; (80091c8 <_strtod_l+0x5b0>)
 8009120:	428b      	cmp	r3, r1
 8009122:	4682      	mov	sl, r0
 8009124:	d8bc      	bhi.n	80090a0 <_strtod_l+0x488>
 8009126:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800912a:	428b      	cmp	r3, r1
 800912c:	bf86      	itte	hi
 800912e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80091cc <_strtod_l+0x5b4>
 8009132:	f04f 3aff 	movhi.w	sl, #4294967295
 8009136:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800913a:	2300      	movs	r3, #0
 800913c:	9304      	str	r3, [sp, #16]
 800913e:	e084      	b.n	800924a <_strtod_l+0x632>
 8009140:	f018 0f01 	tst.w	r8, #1
 8009144:	d005      	beq.n	8009152 <_strtod_l+0x53a>
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f7f7 fa74 	bl	8000638 <__aeabi_dmul>
 8009150:	2301      	movs	r3, #1
 8009152:	9a04      	ldr	r2, [sp, #16]
 8009154:	3208      	adds	r2, #8
 8009156:	f109 0901 	add.w	r9, r9, #1
 800915a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800915e:	9204      	str	r2, [sp, #16]
 8009160:	e7c9      	b.n	80090f6 <_strtod_l+0x4de>
 8009162:	d0ea      	beq.n	800913a <_strtod_l+0x522>
 8009164:	f1c8 0800 	rsb	r8, r8, #0
 8009168:	f018 020f 	ands.w	r2, r8, #15
 800916c:	d00a      	beq.n	8009184 <_strtod_l+0x56c>
 800916e:	4b13      	ldr	r3, [pc, #76]	; (80091bc <_strtod_l+0x5a4>)
 8009170:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009174:	4650      	mov	r0, sl
 8009176:	4659      	mov	r1, fp
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f7f7 fb86 	bl	800088c <__aeabi_ddiv>
 8009180:	4682      	mov	sl, r0
 8009182:	468b      	mov	fp, r1
 8009184:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009188:	d0d7      	beq.n	800913a <_strtod_l+0x522>
 800918a:	f1b8 0f1f 	cmp.w	r8, #31
 800918e:	dd1f      	ble.n	80091d0 <_strtod_l+0x5b8>
 8009190:	2500      	movs	r5, #0
 8009192:	462e      	mov	r6, r5
 8009194:	9507      	str	r5, [sp, #28]
 8009196:	9505      	str	r5, [sp, #20]
 8009198:	2322      	movs	r3, #34	; 0x22
 800919a:	f04f 0a00 	mov.w	sl, #0
 800919e:	f04f 0b00 	mov.w	fp, #0
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	e786      	b.n	80090b4 <_strtod_l+0x49c>
 80091a6:	bf00      	nop
 80091a8:	0800d1a3 	.word	0x0800d1a3
 80091ac:	0800d1bc 	.word	0x0800d1bc
 80091b0:	0800d1a0 	.word	0x0800d1a0
 80091b4:	0800d556 	.word	0x0800d556
 80091b8:	0800d451 	.word	0x0800d451
 80091bc:	0800d320 	.word	0x0800d320
 80091c0:	0800d2f8 	.word	0x0800d2f8
 80091c4:	7ff00000 	.word	0x7ff00000
 80091c8:	7ca00000 	.word	0x7ca00000
 80091cc:	7fefffff 	.word	0x7fefffff
 80091d0:	f018 0310 	ands.w	r3, r8, #16
 80091d4:	bf18      	it	ne
 80091d6:	236a      	movne	r3, #106	; 0x6a
 80091d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009588 <_strtod_l+0x970>
 80091dc:	9304      	str	r3, [sp, #16]
 80091de:	4650      	mov	r0, sl
 80091e0:	4659      	mov	r1, fp
 80091e2:	2300      	movs	r3, #0
 80091e4:	f018 0f01 	tst.w	r8, #1
 80091e8:	d004      	beq.n	80091f4 <_strtod_l+0x5dc>
 80091ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80091ee:	f7f7 fa23 	bl	8000638 <__aeabi_dmul>
 80091f2:	2301      	movs	r3, #1
 80091f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80091f8:	f109 0908 	add.w	r9, r9, #8
 80091fc:	d1f2      	bne.n	80091e4 <_strtod_l+0x5cc>
 80091fe:	b10b      	cbz	r3, 8009204 <_strtod_l+0x5ec>
 8009200:	4682      	mov	sl, r0
 8009202:	468b      	mov	fp, r1
 8009204:	9b04      	ldr	r3, [sp, #16]
 8009206:	b1c3      	cbz	r3, 800923a <_strtod_l+0x622>
 8009208:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800920c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009210:	2b00      	cmp	r3, #0
 8009212:	4659      	mov	r1, fp
 8009214:	dd11      	ble.n	800923a <_strtod_l+0x622>
 8009216:	2b1f      	cmp	r3, #31
 8009218:	f340 8124 	ble.w	8009464 <_strtod_l+0x84c>
 800921c:	2b34      	cmp	r3, #52	; 0x34
 800921e:	bfde      	ittt	le
 8009220:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009224:	f04f 33ff 	movle.w	r3, #4294967295
 8009228:	fa03 f202 	lslle.w	r2, r3, r2
 800922c:	f04f 0a00 	mov.w	sl, #0
 8009230:	bfcc      	ite	gt
 8009232:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009236:	ea02 0b01 	andle.w	fp, r2, r1
 800923a:	2200      	movs	r2, #0
 800923c:	2300      	movs	r3, #0
 800923e:	4650      	mov	r0, sl
 8009240:	4659      	mov	r1, fp
 8009242:	f7f7 fc61 	bl	8000b08 <__aeabi_dcmpeq>
 8009246:	2800      	cmp	r0, #0
 8009248:	d1a2      	bne.n	8009190 <_strtod_l+0x578>
 800924a:	9b07      	ldr	r3, [sp, #28]
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	9908      	ldr	r1, [sp, #32]
 8009250:	462b      	mov	r3, r5
 8009252:	463a      	mov	r2, r7
 8009254:	4620      	mov	r0, r4
 8009256:	f001 f855 	bl	800a304 <__s2b>
 800925a:	9007      	str	r0, [sp, #28]
 800925c:	2800      	cmp	r0, #0
 800925e:	f43f af1f 	beq.w	80090a0 <_strtod_l+0x488>
 8009262:	9b05      	ldr	r3, [sp, #20]
 8009264:	1b9e      	subs	r6, r3, r6
 8009266:	9b06      	ldr	r3, [sp, #24]
 8009268:	2b00      	cmp	r3, #0
 800926a:	bfb4      	ite	lt
 800926c:	4633      	movlt	r3, r6
 800926e:	2300      	movge	r3, #0
 8009270:	930c      	str	r3, [sp, #48]	; 0x30
 8009272:	9b06      	ldr	r3, [sp, #24]
 8009274:	2500      	movs	r5, #0
 8009276:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800927a:	9312      	str	r3, [sp, #72]	; 0x48
 800927c:	462e      	mov	r6, r5
 800927e:	9b07      	ldr	r3, [sp, #28]
 8009280:	4620      	mov	r0, r4
 8009282:	6859      	ldr	r1, [r3, #4]
 8009284:	f000 ff96 	bl	800a1b4 <_Balloc>
 8009288:	9005      	str	r0, [sp, #20]
 800928a:	2800      	cmp	r0, #0
 800928c:	f43f af0c 	beq.w	80090a8 <_strtod_l+0x490>
 8009290:	9b07      	ldr	r3, [sp, #28]
 8009292:	691a      	ldr	r2, [r3, #16]
 8009294:	3202      	adds	r2, #2
 8009296:	f103 010c 	add.w	r1, r3, #12
 800929a:	0092      	lsls	r2, r2, #2
 800929c:	300c      	adds	r0, #12
 800929e:	f7ff fc77 	bl	8008b90 <memcpy>
 80092a2:	ec4b ab10 	vmov	d0, sl, fp
 80092a6:	aa1a      	add	r2, sp, #104	; 0x68
 80092a8:	a919      	add	r1, sp, #100	; 0x64
 80092aa:	4620      	mov	r0, r4
 80092ac:	f001 fb70 	bl	800a990 <__d2b>
 80092b0:	ec4b ab18 	vmov	d8, sl, fp
 80092b4:	9018      	str	r0, [sp, #96]	; 0x60
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f43f aef6 	beq.w	80090a8 <_strtod_l+0x490>
 80092bc:	2101      	movs	r1, #1
 80092be:	4620      	mov	r0, r4
 80092c0:	f001 f8ba 	bl	800a438 <__i2b>
 80092c4:	4606      	mov	r6, r0
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f43f aeee 	beq.w	80090a8 <_strtod_l+0x490>
 80092cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092ce:	9904      	ldr	r1, [sp, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	bfab      	itete	ge
 80092d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80092d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80092d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80092da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80092de:	bfac      	ite	ge
 80092e0:	eb03 0902 	addge.w	r9, r3, r2
 80092e4:	1ad7      	sublt	r7, r2, r3
 80092e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80092e8:	eba3 0801 	sub.w	r8, r3, r1
 80092ec:	4490      	add	r8, r2
 80092ee:	4ba1      	ldr	r3, [pc, #644]	; (8009574 <_strtod_l+0x95c>)
 80092f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80092f4:	4598      	cmp	r8, r3
 80092f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092fa:	f280 80c7 	bge.w	800948c <_strtod_l+0x874>
 80092fe:	eba3 0308 	sub.w	r3, r3, r8
 8009302:	2b1f      	cmp	r3, #31
 8009304:	eba2 0203 	sub.w	r2, r2, r3
 8009308:	f04f 0101 	mov.w	r1, #1
 800930c:	f300 80b1 	bgt.w	8009472 <_strtod_l+0x85a>
 8009310:	fa01 f303 	lsl.w	r3, r1, r3
 8009314:	930d      	str	r3, [sp, #52]	; 0x34
 8009316:	2300      	movs	r3, #0
 8009318:	9308      	str	r3, [sp, #32]
 800931a:	eb09 0802 	add.w	r8, r9, r2
 800931e:	9b04      	ldr	r3, [sp, #16]
 8009320:	45c1      	cmp	r9, r8
 8009322:	4417      	add	r7, r2
 8009324:	441f      	add	r7, r3
 8009326:	464b      	mov	r3, r9
 8009328:	bfa8      	it	ge
 800932a:	4643      	movge	r3, r8
 800932c:	42bb      	cmp	r3, r7
 800932e:	bfa8      	it	ge
 8009330:	463b      	movge	r3, r7
 8009332:	2b00      	cmp	r3, #0
 8009334:	bfc2      	ittt	gt
 8009336:	eba8 0803 	subgt.w	r8, r8, r3
 800933a:	1aff      	subgt	r7, r7, r3
 800933c:	eba9 0903 	subgt.w	r9, r9, r3
 8009340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009342:	2b00      	cmp	r3, #0
 8009344:	dd17      	ble.n	8009376 <_strtod_l+0x75e>
 8009346:	4631      	mov	r1, r6
 8009348:	461a      	mov	r2, r3
 800934a:	4620      	mov	r0, r4
 800934c:	f001 f934 	bl	800a5b8 <__pow5mult>
 8009350:	4606      	mov	r6, r0
 8009352:	2800      	cmp	r0, #0
 8009354:	f43f aea8 	beq.w	80090a8 <_strtod_l+0x490>
 8009358:	4601      	mov	r1, r0
 800935a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800935c:	4620      	mov	r0, r4
 800935e:	f001 f881 	bl	800a464 <__multiply>
 8009362:	900b      	str	r0, [sp, #44]	; 0x2c
 8009364:	2800      	cmp	r0, #0
 8009366:	f43f ae9f 	beq.w	80090a8 <_strtod_l+0x490>
 800936a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800936c:	4620      	mov	r0, r4
 800936e:	f000 ff61 	bl	800a234 <_Bfree>
 8009372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009374:	9318      	str	r3, [sp, #96]	; 0x60
 8009376:	f1b8 0f00 	cmp.w	r8, #0
 800937a:	f300 808c 	bgt.w	8009496 <_strtod_l+0x87e>
 800937e:	9b06      	ldr	r3, [sp, #24]
 8009380:	2b00      	cmp	r3, #0
 8009382:	dd08      	ble.n	8009396 <_strtod_l+0x77e>
 8009384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009386:	9905      	ldr	r1, [sp, #20]
 8009388:	4620      	mov	r0, r4
 800938a:	f001 f915 	bl	800a5b8 <__pow5mult>
 800938e:	9005      	str	r0, [sp, #20]
 8009390:	2800      	cmp	r0, #0
 8009392:	f43f ae89 	beq.w	80090a8 <_strtod_l+0x490>
 8009396:	2f00      	cmp	r7, #0
 8009398:	dd08      	ble.n	80093ac <_strtod_l+0x794>
 800939a:	9905      	ldr	r1, [sp, #20]
 800939c:	463a      	mov	r2, r7
 800939e:	4620      	mov	r0, r4
 80093a0:	f001 f964 	bl	800a66c <__lshift>
 80093a4:	9005      	str	r0, [sp, #20]
 80093a6:	2800      	cmp	r0, #0
 80093a8:	f43f ae7e 	beq.w	80090a8 <_strtod_l+0x490>
 80093ac:	f1b9 0f00 	cmp.w	r9, #0
 80093b0:	dd08      	ble.n	80093c4 <_strtod_l+0x7ac>
 80093b2:	4631      	mov	r1, r6
 80093b4:	464a      	mov	r2, r9
 80093b6:	4620      	mov	r0, r4
 80093b8:	f001 f958 	bl	800a66c <__lshift>
 80093bc:	4606      	mov	r6, r0
 80093be:	2800      	cmp	r0, #0
 80093c0:	f43f ae72 	beq.w	80090a8 <_strtod_l+0x490>
 80093c4:	9a05      	ldr	r2, [sp, #20]
 80093c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093c8:	4620      	mov	r0, r4
 80093ca:	f001 f9db 	bl	800a784 <__mdiff>
 80093ce:	4605      	mov	r5, r0
 80093d0:	2800      	cmp	r0, #0
 80093d2:	f43f ae69 	beq.w	80090a8 <_strtod_l+0x490>
 80093d6:	68c3      	ldr	r3, [r0, #12]
 80093d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80093da:	2300      	movs	r3, #0
 80093dc:	60c3      	str	r3, [r0, #12]
 80093de:	4631      	mov	r1, r6
 80093e0:	f001 f9b4 	bl	800a74c <__mcmp>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	da60      	bge.n	80094aa <_strtod_l+0x892>
 80093e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ea:	ea53 030a 	orrs.w	r3, r3, sl
 80093ee:	f040 8082 	bne.w	80094f6 <_strtod_l+0x8de>
 80093f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d17d      	bne.n	80094f6 <_strtod_l+0x8de>
 80093fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093fe:	0d1b      	lsrs	r3, r3, #20
 8009400:	051b      	lsls	r3, r3, #20
 8009402:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009406:	d976      	bls.n	80094f6 <_strtod_l+0x8de>
 8009408:	696b      	ldr	r3, [r5, #20]
 800940a:	b913      	cbnz	r3, 8009412 <_strtod_l+0x7fa>
 800940c:	692b      	ldr	r3, [r5, #16]
 800940e:	2b01      	cmp	r3, #1
 8009410:	dd71      	ble.n	80094f6 <_strtod_l+0x8de>
 8009412:	4629      	mov	r1, r5
 8009414:	2201      	movs	r2, #1
 8009416:	4620      	mov	r0, r4
 8009418:	f001 f928 	bl	800a66c <__lshift>
 800941c:	4631      	mov	r1, r6
 800941e:	4605      	mov	r5, r0
 8009420:	f001 f994 	bl	800a74c <__mcmp>
 8009424:	2800      	cmp	r0, #0
 8009426:	dd66      	ble.n	80094f6 <_strtod_l+0x8de>
 8009428:	9904      	ldr	r1, [sp, #16]
 800942a:	4a53      	ldr	r2, [pc, #332]	; (8009578 <_strtod_l+0x960>)
 800942c:	465b      	mov	r3, fp
 800942e:	2900      	cmp	r1, #0
 8009430:	f000 8081 	beq.w	8009536 <_strtod_l+0x91e>
 8009434:	ea02 010b 	and.w	r1, r2, fp
 8009438:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800943c:	dc7b      	bgt.n	8009536 <_strtod_l+0x91e>
 800943e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009442:	f77f aea9 	ble.w	8009198 <_strtod_l+0x580>
 8009446:	4b4d      	ldr	r3, [pc, #308]	; (800957c <_strtod_l+0x964>)
 8009448:	4650      	mov	r0, sl
 800944a:	4659      	mov	r1, fp
 800944c:	2200      	movs	r2, #0
 800944e:	f7f7 f8f3 	bl	8000638 <__aeabi_dmul>
 8009452:	460b      	mov	r3, r1
 8009454:	4303      	orrs	r3, r0
 8009456:	bf08      	it	eq
 8009458:	2322      	moveq	r3, #34	; 0x22
 800945a:	4682      	mov	sl, r0
 800945c:	468b      	mov	fp, r1
 800945e:	bf08      	it	eq
 8009460:	6023      	streq	r3, [r4, #0]
 8009462:	e62b      	b.n	80090bc <_strtod_l+0x4a4>
 8009464:	f04f 32ff 	mov.w	r2, #4294967295
 8009468:	fa02 f303 	lsl.w	r3, r2, r3
 800946c:	ea03 0a0a 	and.w	sl, r3, sl
 8009470:	e6e3      	b.n	800923a <_strtod_l+0x622>
 8009472:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009476:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800947a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800947e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009482:	fa01 f308 	lsl.w	r3, r1, r8
 8009486:	9308      	str	r3, [sp, #32]
 8009488:	910d      	str	r1, [sp, #52]	; 0x34
 800948a:	e746      	b.n	800931a <_strtod_l+0x702>
 800948c:	2300      	movs	r3, #0
 800948e:	9308      	str	r3, [sp, #32]
 8009490:	2301      	movs	r3, #1
 8009492:	930d      	str	r3, [sp, #52]	; 0x34
 8009494:	e741      	b.n	800931a <_strtod_l+0x702>
 8009496:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009498:	4642      	mov	r2, r8
 800949a:	4620      	mov	r0, r4
 800949c:	f001 f8e6 	bl	800a66c <__lshift>
 80094a0:	9018      	str	r0, [sp, #96]	; 0x60
 80094a2:	2800      	cmp	r0, #0
 80094a4:	f47f af6b 	bne.w	800937e <_strtod_l+0x766>
 80094a8:	e5fe      	b.n	80090a8 <_strtod_l+0x490>
 80094aa:	465f      	mov	r7, fp
 80094ac:	d16e      	bne.n	800958c <_strtod_l+0x974>
 80094ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094b4:	b342      	cbz	r2, 8009508 <_strtod_l+0x8f0>
 80094b6:	4a32      	ldr	r2, [pc, #200]	; (8009580 <_strtod_l+0x968>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d128      	bne.n	800950e <_strtod_l+0x8f6>
 80094bc:	9b04      	ldr	r3, [sp, #16]
 80094be:	4651      	mov	r1, sl
 80094c0:	b1eb      	cbz	r3, 80094fe <_strtod_l+0x8e6>
 80094c2:	4b2d      	ldr	r3, [pc, #180]	; (8009578 <_strtod_l+0x960>)
 80094c4:	403b      	ands	r3, r7
 80094c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094ca:	f04f 32ff 	mov.w	r2, #4294967295
 80094ce:	d819      	bhi.n	8009504 <_strtod_l+0x8ec>
 80094d0:	0d1b      	lsrs	r3, r3, #20
 80094d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094d6:	fa02 f303 	lsl.w	r3, r2, r3
 80094da:	4299      	cmp	r1, r3
 80094dc:	d117      	bne.n	800950e <_strtod_l+0x8f6>
 80094de:	4b29      	ldr	r3, [pc, #164]	; (8009584 <_strtod_l+0x96c>)
 80094e0:	429f      	cmp	r7, r3
 80094e2:	d102      	bne.n	80094ea <_strtod_l+0x8d2>
 80094e4:	3101      	adds	r1, #1
 80094e6:	f43f addf 	beq.w	80090a8 <_strtod_l+0x490>
 80094ea:	4b23      	ldr	r3, [pc, #140]	; (8009578 <_strtod_l+0x960>)
 80094ec:	403b      	ands	r3, r7
 80094ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80094f2:	f04f 0a00 	mov.w	sl, #0
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1a4      	bne.n	8009446 <_strtod_l+0x82e>
 80094fc:	e5de      	b.n	80090bc <_strtod_l+0x4a4>
 80094fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009502:	e7ea      	b.n	80094da <_strtod_l+0x8c2>
 8009504:	4613      	mov	r3, r2
 8009506:	e7e8      	b.n	80094da <_strtod_l+0x8c2>
 8009508:	ea53 030a 	orrs.w	r3, r3, sl
 800950c:	d08c      	beq.n	8009428 <_strtod_l+0x810>
 800950e:	9b08      	ldr	r3, [sp, #32]
 8009510:	b1db      	cbz	r3, 800954a <_strtod_l+0x932>
 8009512:	423b      	tst	r3, r7
 8009514:	d0ef      	beq.n	80094f6 <_strtod_l+0x8de>
 8009516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009518:	9a04      	ldr	r2, [sp, #16]
 800951a:	4650      	mov	r0, sl
 800951c:	4659      	mov	r1, fp
 800951e:	b1c3      	cbz	r3, 8009552 <_strtod_l+0x93a>
 8009520:	f7ff fb5b 	bl	8008bda <sulp>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	ec51 0b18 	vmov	r0, r1, d8
 800952c:	f7f6 fece 	bl	80002cc <__adddf3>
 8009530:	4682      	mov	sl, r0
 8009532:	468b      	mov	fp, r1
 8009534:	e7df      	b.n	80094f6 <_strtod_l+0x8de>
 8009536:	4013      	ands	r3, r2
 8009538:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800953c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009540:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009544:	f04f 3aff 	mov.w	sl, #4294967295
 8009548:	e7d5      	b.n	80094f6 <_strtod_l+0x8de>
 800954a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800954c:	ea13 0f0a 	tst.w	r3, sl
 8009550:	e7e0      	b.n	8009514 <_strtod_l+0x8fc>
 8009552:	f7ff fb42 	bl	8008bda <sulp>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	ec51 0b18 	vmov	r0, r1, d8
 800955e:	f7f6 feb3 	bl	80002c8 <__aeabi_dsub>
 8009562:	2200      	movs	r2, #0
 8009564:	2300      	movs	r3, #0
 8009566:	4682      	mov	sl, r0
 8009568:	468b      	mov	fp, r1
 800956a:	f7f7 facd 	bl	8000b08 <__aeabi_dcmpeq>
 800956e:	2800      	cmp	r0, #0
 8009570:	d0c1      	beq.n	80094f6 <_strtod_l+0x8de>
 8009572:	e611      	b.n	8009198 <_strtod_l+0x580>
 8009574:	fffffc02 	.word	0xfffffc02
 8009578:	7ff00000 	.word	0x7ff00000
 800957c:	39500000 	.word	0x39500000
 8009580:	000fffff 	.word	0x000fffff
 8009584:	7fefffff 	.word	0x7fefffff
 8009588:	0800d1d0 	.word	0x0800d1d0
 800958c:	4631      	mov	r1, r6
 800958e:	4628      	mov	r0, r5
 8009590:	f001 fa5a 	bl	800aa48 <__ratio>
 8009594:	ec59 8b10 	vmov	r8, r9, d0
 8009598:	ee10 0a10 	vmov	r0, s0
 800959c:	2200      	movs	r2, #0
 800959e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095a2:	4649      	mov	r1, r9
 80095a4:	f7f7 fac4 	bl	8000b30 <__aeabi_dcmple>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d07a      	beq.n	80096a2 <_strtod_l+0xa8a>
 80095ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d04a      	beq.n	8009648 <_strtod_l+0xa30>
 80095b2:	4b95      	ldr	r3, [pc, #596]	; (8009808 <_strtod_l+0xbf0>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009808 <_strtod_l+0xbf0>
 80095be:	f04f 0800 	mov.w	r8, #0
 80095c2:	4b92      	ldr	r3, [pc, #584]	; (800980c <_strtod_l+0xbf4>)
 80095c4:	403b      	ands	r3, r7
 80095c6:	930d      	str	r3, [sp, #52]	; 0x34
 80095c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095ca:	4b91      	ldr	r3, [pc, #580]	; (8009810 <_strtod_l+0xbf8>)
 80095cc:	429a      	cmp	r2, r3
 80095ce:	f040 80b0 	bne.w	8009732 <_strtod_l+0xb1a>
 80095d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80095da:	ec4b ab10 	vmov	d0, sl, fp
 80095de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095e2:	f001 f959 	bl	800a898 <__ulp>
 80095e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095ea:	ec53 2b10 	vmov	r2, r3, d0
 80095ee:	f7f7 f823 	bl	8000638 <__aeabi_dmul>
 80095f2:	4652      	mov	r2, sl
 80095f4:	465b      	mov	r3, fp
 80095f6:	f7f6 fe69 	bl	80002cc <__adddf3>
 80095fa:	460b      	mov	r3, r1
 80095fc:	4983      	ldr	r1, [pc, #524]	; (800980c <_strtod_l+0xbf4>)
 80095fe:	4a85      	ldr	r2, [pc, #532]	; (8009814 <_strtod_l+0xbfc>)
 8009600:	4019      	ands	r1, r3
 8009602:	4291      	cmp	r1, r2
 8009604:	4682      	mov	sl, r0
 8009606:	d960      	bls.n	80096ca <_strtod_l+0xab2>
 8009608:	ee18 3a90 	vmov	r3, s17
 800960c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009610:	4293      	cmp	r3, r2
 8009612:	d104      	bne.n	800961e <_strtod_l+0xa06>
 8009614:	ee18 3a10 	vmov	r3, s16
 8009618:	3301      	adds	r3, #1
 800961a:	f43f ad45 	beq.w	80090a8 <_strtod_l+0x490>
 800961e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009820 <_strtod_l+0xc08>
 8009622:	f04f 3aff 	mov.w	sl, #4294967295
 8009626:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009628:	4620      	mov	r0, r4
 800962a:	f000 fe03 	bl	800a234 <_Bfree>
 800962e:	9905      	ldr	r1, [sp, #20]
 8009630:	4620      	mov	r0, r4
 8009632:	f000 fdff 	bl	800a234 <_Bfree>
 8009636:	4631      	mov	r1, r6
 8009638:	4620      	mov	r0, r4
 800963a:	f000 fdfb 	bl	800a234 <_Bfree>
 800963e:	4629      	mov	r1, r5
 8009640:	4620      	mov	r0, r4
 8009642:	f000 fdf7 	bl	800a234 <_Bfree>
 8009646:	e61a      	b.n	800927e <_strtod_l+0x666>
 8009648:	f1ba 0f00 	cmp.w	sl, #0
 800964c:	d11b      	bne.n	8009686 <_strtod_l+0xa6e>
 800964e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009652:	b9f3      	cbnz	r3, 8009692 <_strtod_l+0xa7a>
 8009654:	4b6c      	ldr	r3, [pc, #432]	; (8009808 <_strtod_l+0xbf0>)
 8009656:	2200      	movs	r2, #0
 8009658:	4640      	mov	r0, r8
 800965a:	4649      	mov	r1, r9
 800965c:	f7f7 fa5e 	bl	8000b1c <__aeabi_dcmplt>
 8009660:	b9d0      	cbnz	r0, 8009698 <_strtod_l+0xa80>
 8009662:	4640      	mov	r0, r8
 8009664:	4649      	mov	r1, r9
 8009666:	4b6c      	ldr	r3, [pc, #432]	; (8009818 <_strtod_l+0xc00>)
 8009668:	2200      	movs	r2, #0
 800966a:	f7f6 ffe5 	bl	8000638 <__aeabi_dmul>
 800966e:	4680      	mov	r8, r0
 8009670:	4689      	mov	r9, r1
 8009672:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009676:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800967a:	9315      	str	r3, [sp, #84]	; 0x54
 800967c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009680:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009684:	e79d      	b.n	80095c2 <_strtod_l+0x9aa>
 8009686:	f1ba 0f01 	cmp.w	sl, #1
 800968a:	d102      	bne.n	8009692 <_strtod_l+0xa7a>
 800968c:	2f00      	cmp	r7, #0
 800968e:	f43f ad83 	beq.w	8009198 <_strtod_l+0x580>
 8009692:	4b62      	ldr	r3, [pc, #392]	; (800981c <_strtod_l+0xc04>)
 8009694:	2200      	movs	r2, #0
 8009696:	e78e      	b.n	80095b6 <_strtod_l+0x99e>
 8009698:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009818 <_strtod_l+0xc00>
 800969c:	f04f 0800 	mov.w	r8, #0
 80096a0:	e7e7      	b.n	8009672 <_strtod_l+0xa5a>
 80096a2:	4b5d      	ldr	r3, [pc, #372]	; (8009818 <_strtod_l+0xc00>)
 80096a4:	4640      	mov	r0, r8
 80096a6:	4649      	mov	r1, r9
 80096a8:	2200      	movs	r2, #0
 80096aa:	f7f6 ffc5 	bl	8000638 <__aeabi_dmul>
 80096ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096b0:	4680      	mov	r8, r0
 80096b2:	4689      	mov	r9, r1
 80096b4:	b933      	cbnz	r3, 80096c4 <_strtod_l+0xaac>
 80096b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096ba:	900e      	str	r0, [sp, #56]	; 0x38
 80096bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80096be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80096c2:	e7dd      	b.n	8009680 <_strtod_l+0xa68>
 80096c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80096c8:	e7f9      	b.n	80096be <_strtod_l+0xaa6>
 80096ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80096ce:	9b04      	ldr	r3, [sp, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1a8      	bne.n	8009626 <_strtod_l+0xa0e>
 80096d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096da:	0d1b      	lsrs	r3, r3, #20
 80096dc:	051b      	lsls	r3, r3, #20
 80096de:	429a      	cmp	r2, r3
 80096e0:	d1a1      	bne.n	8009626 <_strtod_l+0xa0e>
 80096e2:	4640      	mov	r0, r8
 80096e4:	4649      	mov	r1, r9
 80096e6:	f7f7 faf1 	bl	8000ccc <__aeabi_d2lz>
 80096ea:	f7f6 ff77 	bl	80005dc <__aeabi_l2d>
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	4640      	mov	r0, r8
 80096f4:	4649      	mov	r1, r9
 80096f6:	f7f6 fde7 	bl	80002c8 <__aeabi_dsub>
 80096fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009700:	ea43 030a 	orr.w	r3, r3, sl
 8009704:	4313      	orrs	r3, r2
 8009706:	4680      	mov	r8, r0
 8009708:	4689      	mov	r9, r1
 800970a:	d055      	beq.n	80097b8 <_strtod_l+0xba0>
 800970c:	a336      	add	r3, pc, #216	; (adr r3, 80097e8 <_strtod_l+0xbd0>)
 800970e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009712:	f7f7 fa03 	bl	8000b1c <__aeabi_dcmplt>
 8009716:	2800      	cmp	r0, #0
 8009718:	f47f acd0 	bne.w	80090bc <_strtod_l+0x4a4>
 800971c:	a334      	add	r3, pc, #208	; (adr r3, 80097f0 <_strtod_l+0xbd8>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	4640      	mov	r0, r8
 8009724:	4649      	mov	r1, r9
 8009726:	f7f7 fa17 	bl	8000b58 <__aeabi_dcmpgt>
 800972a:	2800      	cmp	r0, #0
 800972c:	f43f af7b 	beq.w	8009626 <_strtod_l+0xa0e>
 8009730:	e4c4      	b.n	80090bc <_strtod_l+0x4a4>
 8009732:	9b04      	ldr	r3, [sp, #16]
 8009734:	b333      	cbz	r3, 8009784 <_strtod_l+0xb6c>
 8009736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009738:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800973c:	d822      	bhi.n	8009784 <_strtod_l+0xb6c>
 800973e:	a32e      	add	r3, pc, #184	; (adr r3, 80097f8 <_strtod_l+0xbe0>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	4640      	mov	r0, r8
 8009746:	4649      	mov	r1, r9
 8009748:	f7f7 f9f2 	bl	8000b30 <__aeabi_dcmple>
 800974c:	b1a0      	cbz	r0, 8009778 <_strtod_l+0xb60>
 800974e:	4649      	mov	r1, r9
 8009750:	4640      	mov	r0, r8
 8009752:	f7f7 fa33 	bl	8000bbc <__aeabi_d2uiz>
 8009756:	2801      	cmp	r0, #1
 8009758:	bf38      	it	cc
 800975a:	2001      	movcc	r0, #1
 800975c:	f7f6 fef2 	bl	8000544 <__aeabi_ui2d>
 8009760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009762:	4680      	mov	r8, r0
 8009764:	4689      	mov	r9, r1
 8009766:	bb23      	cbnz	r3, 80097b2 <_strtod_l+0xb9a>
 8009768:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800976c:	9010      	str	r0, [sp, #64]	; 0x40
 800976e:	9311      	str	r3, [sp, #68]	; 0x44
 8009770:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009774:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800977c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009780:	1a9b      	subs	r3, r3, r2
 8009782:	9309      	str	r3, [sp, #36]	; 0x24
 8009784:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009788:	eeb0 0a48 	vmov.f32	s0, s16
 800978c:	eef0 0a68 	vmov.f32	s1, s17
 8009790:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009794:	f001 f880 	bl	800a898 <__ulp>
 8009798:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800979c:	ec53 2b10 	vmov	r2, r3, d0
 80097a0:	f7f6 ff4a 	bl	8000638 <__aeabi_dmul>
 80097a4:	ec53 2b18 	vmov	r2, r3, d8
 80097a8:	f7f6 fd90 	bl	80002cc <__adddf3>
 80097ac:	4682      	mov	sl, r0
 80097ae:	468b      	mov	fp, r1
 80097b0:	e78d      	b.n	80096ce <_strtod_l+0xab6>
 80097b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80097b6:	e7db      	b.n	8009770 <_strtod_l+0xb58>
 80097b8:	a311      	add	r3, pc, #68	; (adr r3, 8009800 <_strtod_l+0xbe8>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f7 f9ad 	bl	8000b1c <__aeabi_dcmplt>
 80097c2:	e7b2      	b.n	800972a <_strtod_l+0xb12>
 80097c4:	2300      	movs	r3, #0
 80097c6:	930a      	str	r3, [sp, #40]	; 0x28
 80097c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80097ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097cc:	6013      	str	r3, [r2, #0]
 80097ce:	f7ff ba6b 	b.w	8008ca8 <_strtod_l+0x90>
 80097d2:	2a65      	cmp	r2, #101	; 0x65
 80097d4:	f43f ab5f 	beq.w	8008e96 <_strtod_l+0x27e>
 80097d8:	2a45      	cmp	r2, #69	; 0x45
 80097da:	f43f ab5c 	beq.w	8008e96 <_strtod_l+0x27e>
 80097de:	2301      	movs	r3, #1
 80097e0:	f7ff bb94 	b.w	8008f0c <_strtod_l+0x2f4>
 80097e4:	f3af 8000 	nop.w
 80097e8:	94a03595 	.word	0x94a03595
 80097ec:	3fdfffff 	.word	0x3fdfffff
 80097f0:	35afe535 	.word	0x35afe535
 80097f4:	3fe00000 	.word	0x3fe00000
 80097f8:	ffc00000 	.word	0xffc00000
 80097fc:	41dfffff 	.word	0x41dfffff
 8009800:	94a03595 	.word	0x94a03595
 8009804:	3fcfffff 	.word	0x3fcfffff
 8009808:	3ff00000 	.word	0x3ff00000
 800980c:	7ff00000 	.word	0x7ff00000
 8009810:	7fe00000 	.word	0x7fe00000
 8009814:	7c9fffff 	.word	0x7c9fffff
 8009818:	3fe00000 	.word	0x3fe00000
 800981c:	bff00000 	.word	0xbff00000
 8009820:	7fefffff 	.word	0x7fefffff

08009824 <strtod>:
 8009824:	460a      	mov	r2, r1
 8009826:	4601      	mov	r1, r0
 8009828:	4802      	ldr	r0, [pc, #8]	; (8009834 <strtod+0x10>)
 800982a:	4b03      	ldr	r3, [pc, #12]	; (8009838 <strtod+0x14>)
 800982c:	6800      	ldr	r0, [r0, #0]
 800982e:	f7ff b9f3 	b.w	8008c18 <_strtod_l>
 8009832:	bf00      	nop
 8009834:	2000001c 	.word	0x2000001c
 8009838:	20000084 	.word	0x20000084

0800983c <print_e>:
 800983c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800983e:	b087      	sub	sp, #28
 8009840:	ec43 2b10 	vmov	d0, r2, r3
 8009844:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009846:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800984a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800984c:	ab04      	add	r3, sp, #16
 800984e:	9301      	str	r3, [sp, #4]
 8009850:	ab03      	add	r3, sp, #12
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	1c62      	adds	r2, r4, #1
 8009856:	ab05      	add	r3, sp, #20
 8009858:	460f      	mov	r7, r1
 800985a:	2102      	movs	r1, #2
 800985c:	f001 fcb4 	bl	800b1c8 <_dtoa_r>
 8009860:	9a05      	ldr	r2, [sp, #20]
 8009862:	f242 730f 	movw	r3, #9999	; 0x270f
 8009866:	429a      	cmp	r2, r3
 8009868:	d105      	bne.n	8009876 <print_e+0x3a>
 800986a:	4601      	mov	r1, r0
 800986c:	4638      	mov	r0, r7
 800986e:	f001 fbd7 	bl	800b020 <strcpy>
 8009872:	b007      	add	sp, #28
 8009874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009876:	463b      	mov	r3, r7
 8009878:	7801      	ldrb	r1, [r0, #0]
 800987a:	f803 1b01 	strb.w	r1, [r3], #1
 800987e:	2c00      	cmp	r4, #0
 8009880:	bfc8      	it	gt
 8009882:	2501      	movgt	r5, #1
 8009884:	212e      	movs	r1, #46	; 0x2e
 8009886:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800988a:	b10f      	cbz	r7, 8009890 <print_e+0x54>
 800988c:	2c00      	cmp	r4, #0
 800988e:	dc37      	bgt.n	8009900 <print_e+0xc4>
 8009890:	2e67      	cmp	r6, #103	; 0x67
 8009892:	d046      	beq.n	8009922 <print_e+0xe6>
 8009894:	2e47      	cmp	r6, #71	; 0x47
 8009896:	d046      	beq.n	8009926 <print_e+0xea>
 8009898:	212e      	movs	r1, #46	; 0x2e
 800989a:	2030      	movs	r0, #48	; 0x30
 800989c:	2c00      	cmp	r4, #0
 800989e:	dc38      	bgt.n	8009912 <print_e+0xd6>
 80098a0:	1e51      	subs	r1, r2, #1
 80098a2:	2900      	cmp	r1, #0
 80098a4:	bfb8      	it	lt
 80098a6:	f1c2 0201 	rsblt	r2, r2, #1
 80098aa:	4618      	mov	r0, r3
 80098ac:	9105      	str	r1, [sp, #20]
 80098ae:	bfac      	ite	ge
 80098b0:	222b      	movge	r2, #43	; 0x2b
 80098b2:	9205      	strlt	r2, [sp, #20]
 80098b4:	f800 6b02 	strb.w	r6, [r0], #2
 80098b8:	bfa8      	it	ge
 80098ba:	705a      	strbge	r2, [r3, #1]
 80098bc:	9a05      	ldr	r2, [sp, #20]
 80098be:	bfbc      	itt	lt
 80098c0:	212d      	movlt	r1, #45	; 0x2d
 80098c2:	7059      	strblt	r1, [r3, #1]
 80098c4:	2a63      	cmp	r2, #99	; 0x63
 80098c6:	dd0b      	ble.n	80098e0 <print_e+0xa4>
 80098c8:	2164      	movs	r1, #100	; 0x64
 80098ca:	fb92 f1f1 	sdiv	r1, r2, r1
 80098ce:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80098d2:	1cd8      	adds	r0, r3, #3
 80098d4:	709c      	strb	r4, [r3, #2]
 80098d6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80098da:	fb03 2201 	mla	r2, r3, r1, r2
 80098de:	9205      	str	r2, [sp, #20]
 80098e0:	9b05      	ldr	r3, [sp, #20]
 80098e2:	220a      	movs	r2, #10
 80098e4:	fb93 f2f2 	sdiv	r2, r3, r2
 80098e8:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80098ec:	7001      	strb	r1, [r0, #0]
 80098ee:	f06f 0109 	mvn.w	r1, #9
 80098f2:	fb01 3302 	mla	r3, r1, r2, r3
 80098f6:	3330      	adds	r3, #48	; 0x30
 80098f8:	7043      	strb	r3, [r0, #1]
 80098fa:	2300      	movs	r3, #0
 80098fc:	7083      	strb	r3, [r0, #2]
 80098fe:	e7b8      	b.n	8009872 <print_e+0x36>
 8009900:	b10d      	cbz	r5, 8009906 <print_e+0xca>
 8009902:	f803 1b01 	strb.w	r1, [r3], #1
 8009906:	7805      	ldrb	r5, [r0, #0]
 8009908:	f803 5b01 	strb.w	r5, [r3], #1
 800990c:	3c01      	subs	r4, #1
 800990e:	2500      	movs	r5, #0
 8009910:	e7b9      	b.n	8009886 <print_e+0x4a>
 8009912:	b10d      	cbz	r5, 8009918 <print_e+0xdc>
 8009914:	f803 1b01 	strb.w	r1, [r3], #1
 8009918:	f803 0b01 	strb.w	r0, [r3], #1
 800991c:	3c01      	subs	r4, #1
 800991e:	2500      	movs	r5, #0
 8009920:	e7bc      	b.n	800989c <print_e+0x60>
 8009922:	2665      	movs	r6, #101	; 0x65
 8009924:	e7bc      	b.n	80098a0 <print_e+0x64>
 8009926:	2645      	movs	r6, #69	; 0x45
 8009928:	e7ba      	b.n	80098a0 <print_e+0x64>
 800992a:	0000      	movs	r0, r0
 800992c:	0000      	movs	r0, r0
	...

08009930 <_gcvt>:
 8009930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009934:	ec55 4b10 	vmov	r4, r5, d0
 8009938:	b088      	sub	sp, #32
 800993a:	4681      	mov	r9, r0
 800993c:	4688      	mov	r8, r1
 800993e:	4616      	mov	r6, r2
 8009940:	469a      	mov	sl, r3
 8009942:	ee10 0a10 	vmov	r0, s0
 8009946:	2200      	movs	r2, #0
 8009948:	2300      	movs	r3, #0
 800994a:	4629      	mov	r1, r5
 800994c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800994e:	f7f7 f8e5 	bl	8000b1c <__aeabi_dcmplt>
 8009952:	b110      	cbz	r0, 800995a <_gcvt+0x2a>
 8009954:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009958:	461d      	mov	r5, r3
 800995a:	2200      	movs	r2, #0
 800995c:	2300      	movs	r3, #0
 800995e:	4620      	mov	r0, r4
 8009960:	4629      	mov	r1, r5
 8009962:	f7f7 f8d1 	bl	8000b08 <__aeabi_dcmpeq>
 8009966:	b138      	cbz	r0, 8009978 <_gcvt+0x48>
 8009968:	2330      	movs	r3, #48	; 0x30
 800996a:	7033      	strb	r3, [r6, #0]
 800996c:	2300      	movs	r3, #0
 800996e:	7073      	strb	r3, [r6, #1]
 8009970:	4630      	mov	r0, r6
 8009972:	b008      	add	sp, #32
 8009974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009978:	a34b      	add	r3, pc, #300	; (adr r3, 8009aa8 <_gcvt+0x178>)
 800997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997e:	4620      	mov	r0, r4
 8009980:	4629      	mov	r1, r5
 8009982:	f7f7 f8d5 	bl	8000b30 <__aeabi_dcmple>
 8009986:	b158      	cbz	r0, 80099a0 <_gcvt+0x70>
 8009988:	f108 31ff 	add.w	r1, r8, #4294967295
 800998c:	9100      	str	r1, [sp, #0]
 800998e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8009992:	4622      	mov	r2, r4
 8009994:	462b      	mov	r3, r5
 8009996:	4631      	mov	r1, r6
 8009998:	4648      	mov	r0, r9
 800999a:	f7ff ff4f 	bl	800983c <print_e>
 800999e:	e7e7      	b.n	8009970 <_gcvt+0x40>
 80099a0:	4640      	mov	r0, r8
 80099a2:	f001 f885 	bl	800aab0 <_mprec_log10>
 80099a6:	4622      	mov	r2, r4
 80099a8:	ec51 0b10 	vmov	r0, r1, d0
 80099ac:	462b      	mov	r3, r5
 80099ae:	f7f7 f8bf 	bl	8000b30 <__aeabi_dcmple>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d1e8      	bne.n	8009988 <_gcvt+0x58>
 80099b6:	ab07      	add	r3, sp, #28
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	ab06      	add	r3, sp, #24
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	4642      	mov	r2, r8
 80099c0:	ab05      	add	r3, sp, #20
 80099c2:	ec45 4b10 	vmov	d0, r4, r5
 80099c6:	2102      	movs	r1, #2
 80099c8:	4648      	mov	r0, r9
 80099ca:	f001 fbfd 	bl	800b1c8 <_dtoa_r>
 80099ce:	9a05      	ldr	r2, [sp, #20]
 80099d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d00e      	beq.n	80099f6 <_gcvt+0xc6>
 80099d8:	4633      	mov	r3, r6
 80099da:	44b0      	add	r8, r6
 80099dc:	4605      	mov	r5, r0
 80099de:	f810 1b01 	ldrb.w	r1, [r0], #1
 80099e2:	9c05      	ldr	r4, [sp, #20]
 80099e4:	eba8 0203 	sub.w	r2, r8, r3
 80099e8:	b109      	cbz	r1, 80099ee <_gcvt+0xbe>
 80099ea:	2c00      	cmp	r4, #0
 80099ec:	dc08      	bgt.n	8009a00 <_gcvt+0xd0>
 80099ee:	2100      	movs	r1, #0
 80099f0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80099f4:	e00d      	b.n	8009a12 <_gcvt+0xe2>
 80099f6:	4601      	mov	r1, r0
 80099f8:	4630      	mov	r0, r6
 80099fa:	f001 fb11 	bl	800b020 <strcpy>
 80099fe:	e7b7      	b.n	8009970 <_gcvt+0x40>
 8009a00:	3c01      	subs	r4, #1
 8009a02:	f803 1b01 	strb.w	r1, [r3], #1
 8009a06:	9405      	str	r4, [sp, #20]
 8009a08:	e7e8      	b.n	80099dc <_gcvt+0xac>
 8009a0a:	f803 cb01 	strb.w	ip, [r3], #1
 8009a0e:	3a01      	subs	r2, #1
 8009a10:	2101      	movs	r1, #1
 8009a12:	2c00      	cmp	r4, #0
 8009a14:	4620      	mov	r0, r4
 8009a16:	dc2a      	bgt.n	8009a6e <_gcvt+0x13e>
 8009a18:	b101      	cbz	r1, 8009a1c <_gcvt+0xec>
 8009a1a:	9405      	str	r4, [sp, #20]
 8009a1c:	b90f      	cbnz	r7, 8009a22 <_gcvt+0xf2>
 8009a1e:	7829      	ldrb	r1, [r5, #0]
 8009a20:	b311      	cbz	r1, 8009a68 <_gcvt+0x138>
 8009a22:	42b3      	cmp	r3, r6
 8009a24:	bf04      	itt	eq
 8009a26:	2130      	moveq	r1, #48	; 0x30
 8009a28:	f803 1b01 	strbeq.w	r1, [r3], #1
 8009a2c:	212e      	movs	r1, #46	; 0x2e
 8009a2e:	7019      	strb	r1, [r3, #0]
 8009a30:	9905      	ldr	r1, [sp, #20]
 8009a32:	4618      	mov	r0, r3
 8009a34:	2400      	movs	r4, #0
 8009a36:	eba1 0c03 	sub.w	ip, r1, r3
 8009a3a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8009a3e:	eb1c 0f00 	cmn.w	ip, r0
 8009a42:	d41c      	bmi.n	8009a7e <_gcvt+0x14e>
 8009a44:	2900      	cmp	r1, #0
 8009a46:	f1c1 0000 	rsb	r0, r1, #0
 8009a4a:	bfc8      	it	gt
 8009a4c:	2000      	movgt	r0, #0
 8009a4e:	f100 0c01 	add.w	ip, r0, #1
 8009a52:	4463      	add	r3, ip
 8009a54:	4401      	add	r1, r0
 8009a56:	b104      	cbz	r4, 8009a5a <_gcvt+0x12a>
 8009a58:	9105      	str	r1, [sp, #20]
 8009a5a:	1e69      	subs	r1, r5, #1
 8009a5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a60:	b108      	cbz	r0, 8009a66 <_gcvt+0x136>
 8009a62:	2a00      	cmp	r2, #0
 8009a64:	dc0f      	bgt.n	8009a86 <_gcvt+0x156>
 8009a66:	b9df      	cbnz	r7, 8009aa0 <_gcvt+0x170>
 8009a68:	2200      	movs	r2, #0
 8009a6a:	701a      	strb	r2, [r3, #0]
 8009a6c:	e780      	b.n	8009970 <_gcvt+0x40>
 8009a6e:	2a00      	cmp	r2, #0
 8009a70:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a74:	dcc9      	bgt.n	8009a0a <_gcvt+0xda>
 8009a76:	2900      	cmp	r1, #0
 8009a78:	d0d0      	beq.n	8009a1c <_gcvt+0xec>
 8009a7a:	9005      	str	r0, [sp, #20]
 8009a7c:	e7ce      	b.n	8009a1c <_gcvt+0xec>
 8009a7e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8009a82:	2401      	movs	r4, #1
 8009a84:	e7db      	b.n	8009a3e <_gcvt+0x10e>
 8009a86:	f803 0b01 	strb.w	r0, [r3], #1
 8009a8a:	3a01      	subs	r2, #1
 8009a8c:	e7e6      	b.n	8009a5c <_gcvt+0x12c>
 8009a8e:	f801 5b01 	strb.w	r5, [r1], #1
 8009a92:	1a60      	subs	r0, r4, r1
 8009a94:	2800      	cmp	r0, #0
 8009a96:	dcfa      	bgt.n	8009a8e <_gcvt+0x15e>
 8009a98:	2a00      	cmp	r2, #0
 8009a9a:	bfa8      	it	ge
 8009a9c:	189b      	addge	r3, r3, r2
 8009a9e:	e7e3      	b.n	8009a68 <_gcvt+0x138>
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	189c      	adds	r4, r3, r2
 8009aa4:	2530      	movs	r5, #48	; 0x30
 8009aa6:	e7f4      	b.n	8009a92 <_gcvt+0x162>
 8009aa8:	eb1c432d 	.word	0xeb1c432d
 8009aac:	3f1a36e2 	.word	0x3f1a36e2

08009ab0 <rshift>:
 8009ab0:	6903      	ldr	r3, [r0, #16]
 8009ab2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ab6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009aba:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009abe:	f100 0414 	add.w	r4, r0, #20
 8009ac2:	dd45      	ble.n	8009b50 <rshift+0xa0>
 8009ac4:	f011 011f 	ands.w	r1, r1, #31
 8009ac8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009acc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ad0:	d10c      	bne.n	8009aec <rshift+0x3c>
 8009ad2:	f100 0710 	add.w	r7, r0, #16
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	42b1      	cmp	r1, r6
 8009ada:	d334      	bcc.n	8009b46 <rshift+0x96>
 8009adc:	1a9b      	subs	r3, r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	1eea      	subs	r2, r5, #3
 8009ae2:	4296      	cmp	r6, r2
 8009ae4:	bf38      	it	cc
 8009ae6:	2300      	movcc	r3, #0
 8009ae8:	4423      	add	r3, r4
 8009aea:	e015      	b.n	8009b18 <rshift+0x68>
 8009aec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009af0:	f1c1 0820 	rsb	r8, r1, #32
 8009af4:	40cf      	lsrs	r7, r1
 8009af6:	f105 0e04 	add.w	lr, r5, #4
 8009afa:	46a1      	mov	r9, r4
 8009afc:	4576      	cmp	r6, lr
 8009afe:	46f4      	mov	ip, lr
 8009b00:	d815      	bhi.n	8009b2e <rshift+0x7e>
 8009b02:	1a9a      	subs	r2, r3, r2
 8009b04:	0092      	lsls	r2, r2, #2
 8009b06:	3a04      	subs	r2, #4
 8009b08:	3501      	adds	r5, #1
 8009b0a:	42ae      	cmp	r6, r5
 8009b0c:	bf38      	it	cc
 8009b0e:	2200      	movcc	r2, #0
 8009b10:	18a3      	adds	r3, r4, r2
 8009b12:	50a7      	str	r7, [r4, r2]
 8009b14:	b107      	cbz	r7, 8009b18 <rshift+0x68>
 8009b16:	3304      	adds	r3, #4
 8009b18:	1b1a      	subs	r2, r3, r4
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b20:	bf08      	it	eq
 8009b22:	2300      	moveq	r3, #0
 8009b24:	6102      	str	r2, [r0, #16]
 8009b26:	bf08      	it	eq
 8009b28:	6143      	streq	r3, [r0, #20]
 8009b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b2e:	f8dc c000 	ldr.w	ip, [ip]
 8009b32:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b36:	ea4c 0707 	orr.w	r7, ip, r7
 8009b3a:	f849 7b04 	str.w	r7, [r9], #4
 8009b3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b42:	40cf      	lsrs	r7, r1
 8009b44:	e7da      	b.n	8009afc <rshift+0x4c>
 8009b46:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b4a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b4e:	e7c3      	b.n	8009ad8 <rshift+0x28>
 8009b50:	4623      	mov	r3, r4
 8009b52:	e7e1      	b.n	8009b18 <rshift+0x68>

08009b54 <__hexdig_fun>:
 8009b54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b58:	2b09      	cmp	r3, #9
 8009b5a:	d802      	bhi.n	8009b62 <__hexdig_fun+0xe>
 8009b5c:	3820      	subs	r0, #32
 8009b5e:	b2c0      	uxtb	r0, r0
 8009b60:	4770      	bx	lr
 8009b62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d801      	bhi.n	8009b6e <__hexdig_fun+0x1a>
 8009b6a:	3847      	subs	r0, #71	; 0x47
 8009b6c:	e7f7      	b.n	8009b5e <__hexdig_fun+0xa>
 8009b6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b72:	2b05      	cmp	r3, #5
 8009b74:	d801      	bhi.n	8009b7a <__hexdig_fun+0x26>
 8009b76:	3827      	subs	r0, #39	; 0x27
 8009b78:	e7f1      	b.n	8009b5e <__hexdig_fun+0xa>
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	4770      	bx	lr
	...

08009b80 <__gethex>:
 8009b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	ed2d 8b02 	vpush	{d8}
 8009b88:	b089      	sub	sp, #36	; 0x24
 8009b8a:	ee08 0a10 	vmov	s16, r0
 8009b8e:	9304      	str	r3, [sp, #16]
 8009b90:	4bb4      	ldr	r3, [pc, #720]	; (8009e64 <__gethex+0x2e4>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	4618      	mov	r0, r3
 8009b98:	468b      	mov	fp, r1
 8009b9a:	4690      	mov	r8, r2
 8009b9c:	f7f6 fb38 	bl	8000210 <strlen>
 8009ba0:	9b01      	ldr	r3, [sp, #4]
 8009ba2:	f8db 2000 	ldr.w	r2, [fp]
 8009ba6:	4403      	add	r3, r0
 8009ba8:	4682      	mov	sl, r0
 8009baa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009bae:	9305      	str	r3, [sp, #20]
 8009bb0:	1c93      	adds	r3, r2, #2
 8009bb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009bb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009bba:	32fe      	adds	r2, #254	; 0xfe
 8009bbc:	18d1      	adds	r1, r2, r3
 8009bbe:	461f      	mov	r7, r3
 8009bc0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009bc4:	9100      	str	r1, [sp, #0]
 8009bc6:	2830      	cmp	r0, #48	; 0x30
 8009bc8:	d0f8      	beq.n	8009bbc <__gethex+0x3c>
 8009bca:	f7ff ffc3 	bl	8009b54 <__hexdig_fun>
 8009bce:	4604      	mov	r4, r0
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d13a      	bne.n	8009c4a <__gethex+0xca>
 8009bd4:	9901      	ldr	r1, [sp, #4]
 8009bd6:	4652      	mov	r2, sl
 8009bd8:	4638      	mov	r0, r7
 8009bda:	f001 fa29 	bl	800b030 <strncmp>
 8009bde:	4605      	mov	r5, r0
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d168      	bne.n	8009cb6 <__gethex+0x136>
 8009be4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009be8:	eb07 060a 	add.w	r6, r7, sl
 8009bec:	f7ff ffb2 	bl	8009b54 <__hexdig_fun>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d062      	beq.n	8009cba <__gethex+0x13a>
 8009bf4:	4633      	mov	r3, r6
 8009bf6:	7818      	ldrb	r0, [r3, #0]
 8009bf8:	2830      	cmp	r0, #48	; 0x30
 8009bfa:	461f      	mov	r7, r3
 8009bfc:	f103 0301 	add.w	r3, r3, #1
 8009c00:	d0f9      	beq.n	8009bf6 <__gethex+0x76>
 8009c02:	f7ff ffa7 	bl	8009b54 <__hexdig_fun>
 8009c06:	2301      	movs	r3, #1
 8009c08:	fab0 f480 	clz	r4, r0
 8009c0c:	0964      	lsrs	r4, r4, #5
 8009c0e:	4635      	mov	r5, r6
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	463a      	mov	r2, r7
 8009c14:	4616      	mov	r6, r2
 8009c16:	3201      	adds	r2, #1
 8009c18:	7830      	ldrb	r0, [r6, #0]
 8009c1a:	f7ff ff9b 	bl	8009b54 <__hexdig_fun>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d1f8      	bne.n	8009c14 <__gethex+0x94>
 8009c22:	9901      	ldr	r1, [sp, #4]
 8009c24:	4652      	mov	r2, sl
 8009c26:	4630      	mov	r0, r6
 8009c28:	f001 fa02 	bl	800b030 <strncmp>
 8009c2c:	b980      	cbnz	r0, 8009c50 <__gethex+0xd0>
 8009c2e:	b94d      	cbnz	r5, 8009c44 <__gethex+0xc4>
 8009c30:	eb06 050a 	add.w	r5, r6, sl
 8009c34:	462a      	mov	r2, r5
 8009c36:	4616      	mov	r6, r2
 8009c38:	3201      	adds	r2, #1
 8009c3a:	7830      	ldrb	r0, [r6, #0]
 8009c3c:	f7ff ff8a 	bl	8009b54 <__hexdig_fun>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d1f8      	bne.n	8009c36 <__gethex+0xb6>
 8009c44:	1bad      	subs	r5, r5, r6
 8009c46:	00ad      	lsls	r5, r5, #2
 8009c48:	e004      	b.n	8009c54 <__gethex+0xd4>
 8009c4a:	2400      	movs	r4, #0
 8009c4c:	4625      	mov	r5, r4
 8009c4e:	e7e0      	b.n	8009c12 <__gethex+0x92>
 8009c50:	2d00      	cmp	r5, #0
 8009c52:	d1f7      	bne.n	8009c44 <__gethex+0xc4>
 8009c54:	7833      	ldrb	r3, [r6, #0]
 8009c56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c5a:	2b50      	cmp	r3, #80	; 0x50
 8009c5c:	d13b      	bne.n	8009cd6 <__gethex+0x156>
 8009c5e:	7873      	ldrb	r3, [r6, #1]
 8009c60:	2b2b      	cmp	r3, #43	; 0x2b
 8009c62:	d02c      	beq.n	8009cbe <__gethex+0x13e>
 8009c64:	2b2d      	cmp	r3, #45	; 0x2d
 8009c66:	d02e      	beq.n	8009cc6 <__gethex+0x146>
 8009c68:	1c71      	adds	r1, r6, #1
 8009c6a:	f04f 0900 	mov.w	r9, #0
 8009c6e:	7808      	ldrb	r0, [r1, #0]
 8009c70:	f7ff ff70 	bl	8009b54 <__hexdig_fun>
 8009c74:	1e43      	subs	r3, r0, #1
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b18      	cmp	r3, #24
 8009c7a:	d82c      	bhi.n	8009cd6 <__gethex+0x156>
 8009c7c:	f1a0 0210 	sub.w	r2, r0, #16
 8009c80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c84:	f7ff ff66 	bl	8009b54 <__hexdig_fun>
 8009c88:	1e43      	subs	r3, r0, #1
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2b18      	cmp	r3, #24
 8009c8e:	d91d      	bls.n	8009ccc <__gethex+0x14c>
 8009c90:	f1b9 0f00 	cmp.w	r9, #0
 8009c94:	d000      	beq.n	8009c98 <__gethex+0x118>
 8009c96:	4252      	negs	r2, r2
 8009c98:	4415      	add	r5, r2
 8009c9a:	f8cb 1000 	str.w	r1, [fp]
 8009c9e:	b1e4      	cbz	r4, 8009cda <__gethex+0x15a>
 8009ca0:	9b00      	ldr	r3, [sp, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	bf14      	ite	ne
 8009ca6:	2700      	movne	r7, #0
 8009ca8:	2706      	moveq	r7, #6
 8009caa:	4638      	mov	r0, r7
 8009cac:	b009      	add	sp, #36	; 0x24
 8009cae:	ecbd 8b02 	vpop	{d8}
 8009cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb6:	463e      	mov	r6, r7
 8009cb8:	4625      	mov	r5, r4
 8009cba:	2401      	movs	r4, #1
 8009cbc:	e7ca      	b.n	8009c54 <__gethex+0xd4>
 8009cbe:	f04f 0900 	mov.w	r9, #0
 8009cc2:	1cb1      	adds	r1, r6, #2
 8009cc4:	e7d3      	b.n	8009c6e <__gethex+0xee>
 8009cc6:	f04f 0901 	mov.w	r9, #1
 8009cca:	e7fa      	b.n	8009cc2 <__gethex+0x142>
 8009ccc:	230a      	movs	r3, #10
 8009cce:	fb03 0202 	mla	r2, r3, r2, r0
 8009cd2:	3a10      	subs	r2, #16
 8009cd4:	e7d4      	b.n	8009c80 <__gethex+0x100>
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	e7df      	b.n	8009c9a <__gethex+0x11a>
 8009cda:	1bf3      	subs	r3, r6, r7
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	4621      	mov	r1, r4
 8009ce0:	2b07      	cmp	r3, #7
 8009ce2:	dc0b      	bgt.n	8009cfc <__gethex+0x17c>
 8009ce4:	ee18 0a10 	vmov	r0, s16
 8009ce8:	f000 fa64 	bl	800a1b4 <_Balloc>
 8009cec:	4604      	mov	r4, r0
 8009cee:	b940      	cbnz	r0, 8009d02 <__gethex+0x182>
 8009cf0:	4b5d      	ldr	r3, [pc, #372]	; (8009e68 <__gethex+0x2e8>)
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	21de      	movs	r1, #222	; 0xde
 8009cf6:	485d      	ldr	r0, [pc, #372]	; (8009e6c <__gethex+0x2ec>)
 8009cf8:	f001 f9bc 	bl	800b074 <__assert_func>
 8009cfc:	3101      	adds	r1, #1
 8009cfe:	105b      	asrs	r3, r3, #1
 8009d00:	e7ee      	b.n	8009ce0 <__gethex+0x160>
 8009d02:	f100 0914 	add.w	r9, r0, #20
 8009d06:	f04f 0b00 	mov.w	fp, #0
 8009d0a:	f1ca 0301 	rsb	r3, sl, #1
 8009d0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d12:	f8cd b000 	str.w	fp, [sp]
 8009d16:	9306      	str	r3, [sp, #24]
 8009d18:	42b7      	cmp	r7, r6
 8009d1a:	d340      	bcc.n	8009d9e <__gethex+0x21e>
 8009d1c:	9802      	ldr	r0, [sp, #8]
 8009d1e:	9b00      	ldr	r3, [sp, #0]
 8009d20:	f840 3b04 	str.w	r3, [r0], #4
 8009d24:	eba0 0009 	sub.w	r0, r0, r9
 8009d28:	1080      	asrs	r0, r0, #2
 8009d2a:	0146      	lsls	r6, r0, #5
 8009d2c:	6120      	str	r0, [r4, #16]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 fb32 	bl	800a398 <__hi0bits>
 8009d34:	1a30      	subs	r0, r6, r0
 8009d36:	f8d8 6000 	ldr.w	r6, [r8]
 8009d3a:	42b0      	cmp	r0, r6
 8009d3c:	dd63      	ble.n	8009e06 <__gethex+0x286>
 8009d3e:	1b87      	subs	r7, r0, r6
 8009d40:	4639      	mov	r1, r7
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 fef5 	bl	800ab32 <__any_on>
 8009d48:	4682      	mov	sl, r0
 8009d4a:	b1a8      	cbz	r0, 8009d78 <__gethex+0x1f8>
 8009d4c:	1e7b      	subs	r3, r7, #1
 8009d4e:	1159      	asrs	r1, r3, #5
 8009d50:	f003 021f 	and.w	r2, r3, #31
 8009d54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d58:	f04f 0a01 	mov.w	sl, #1
 8009d5c:	fa0a f202 	lsl.w	r2, sl, r2
 8009d60:	420a      	tst	r2, r1
 8009d62:	d009      	beq.n	8009d78 <__gethex+0x1f8>
 8009d64:	4553      	cmp	r3, sl
 8009d66:	dd05      	ble.n	8009d74 <__gethex+0x1f4>
 8009d68:	1eb9      	subs	r1, r7, #2
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f000 fee1 	bl	800ab32 <__any_on>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	d145      	bne.n	8009e00 <__gethex+0x280>
 8009d74:	f04f 0a02 	mov.w	sl, #2
 8009d78:	4639      	mov	r1, r7
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f7ff fe98 	bl	8009ab0 <rshift>
 8009d80:	443d      	add	r5, r7
 8009d82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d86:	42ab      	cmp	r3, r5
 8009d88:	da4c      	bge.n	8009e24 <__gethex+0x2a4>
 8009d8a:	ee18 0a10 	vmov	r0, s16
 8009d8e:	4621      	mov	r1, r4
 8009d90:	f000 fa50 	bl	800a234 <_Bfree>
 8009d94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d96:	2300      	movs	r3, #0
 8009d98:	6013      	str	r3, [r2, #0]
 8009d9a:	27a3      	movs	r7, #163	; 0xa3
 8009d9c:	e785      	b.n	8009caa <__gethex+0x12a>
 8009d9e:	1e73      	subs	r3, r6, #1
 8009da0:	9a05      	ldr	r2, [sp, #20]
 8009da2:	9303      	str	r3, [sp, #12]
 8009da4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d019      	beq.n	8009de0 <__gethex+0x260>
 8009dac:	f1bb 0f20 	cmp.w	fp, #32
 8009db0:	d107      	bne.n	8009dc2 <__gethex+0x242>
 8009db2:	9b02      	ldr	r3, [sp, #8]
 8009db4:	9a00      	ldr	r2, [sp, #0]
 8009db6:	f843 2b04 	str.w	r2, [r3], #4
 8009dba:	9302      	str	r3, [sp, #8]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	469b      	mov	fp, r3
 8009dc2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009dc6:	f7ff fec5 	bl	8009b54 <__hexdig_fun>
 8009dca:	9b00      	ldr	r3, [sp, #0]
 8009dcc:	f000 000f 	and.w	r0, r0, #15
 8009dd0:	fa00 f00b 	lsl.w	r0, r0, fp
 8009dd4:	4303      	orrs	r3, r0
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	f10b 0b04 	add.w	fp, fp, #4
 8009ddc:	9b03      	ldr	r3, [sp, #12]
 8009dde:	e00d      	b.n	8009dfc <__gethex+0x27c>
 8009de0:	9b03      	ldr	r3, [sp, #12]
 8009de2:	9a06      	ldr	r2, [sp, #24]
 8009de4:	4413      	add	r3, r2
 8009de6:	42bb      	cmp	r3, r7
 8009de8:	d3e0      	bcc.n	8009dac <__gethex+0x22c>
 8009dea:	4618      	mov	r0, r3
 8009dec:	9901      	ldr	r1, [sp, #4]
 8009dee:	9307      	str	r3, [sp, #28]
 8009df0:	4652      	mov	r2, sl
 8009df2:	f001 f91d 	bl	800b030 <strncmp>
 8009df6:	9b07      	ldr	r3, [sp, #28]
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d1d7      	bne.n	8009dac <__gethex+0x22c>
 8009dfc:	461e      	mov	r6, r3
 8009dfe:	e78b      	b.n	8009d18 <__gethex+0x198>
 8009e00:	f04f 0a03 	mov.w	sl, #3
 8009e04:	e7b8      	b.n	8009d78 <__gethex+0x1f8>
 8009e06:	da0a      	bge.n	8009e1e <__gethex+0x29e>
 8009e08:	1a37      	subs	r7, r6, r0
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	ee18 0a10 	vmov	r0, s16
 8009e10:	463a      	mov	r2, r7
 8009e12:	f000 fc2b 	bl	800a66c <__lshift>
 8009e16:	1bed      	subs	r5, r5, r7
 8009e18:	4604      	mov	r4, r0
 8009e1a:	f100 0914 	add.w	r9, r0, #20
 8009e1e:	f04f 0a00 	mov.w	sl, #0
 8009e22:	e7ae      	b.n	8009d82 <__gethex+0x202>
 8009e24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009e28:	42a8      	cmp	r0, r5
 8009e2a:	dd72      	ble.n	8009f12 <__gethex+0x392>
 8009e2c:	1b45      	subs	r5, r0, r5
 8009e2e:	42ae      	cmp	r6, r5
 8009e30:	dc36      	bgt.n	8009ea0 <__gethex+0x320>
 8009e32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d02a      	beq.n	8009e90 <__gethex+0x310>
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d02c      	beq.n	8009e98 <__gethex+0x318>
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d11c      	bne.n	8009e7c <__gethex+0x2fc>
 8009e42:	42ae      	cmp	r6, r5
 8009e44:	d11a      	bne.n	8009e7c <__gethex+0x2fc>
 8009e46:	2e01      	cmp	r6, #1
 8009e48:	d112      	bne.n	8009e70 <__gethex+0x2f0>
 8009e4a:	9a04      	ldr	r2, [sp, #16]
 8009e4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	2301      	movs	r3, #1
 8009e54:	6123      	str	r3, [r4, #16]
 8009e56:	f8c9 3000 	str.w	r3, [r9]
 8009e5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e5c:	2762      	movs	r7, #98	; 0x62
 8009e5e:	601c      	str	r4, [r3, #0]
 8009e60:	e723      	b.n	8009caa <__gethex+0x12a>
 8009e62:	bf00      	nop
 8009e64:	0800d270 	.word	0x0800d270
 8009e68:	0800d1f8 	.word	0x0800d1f8
 8009e6c:	0800d209 	.word	0x0800d209
 8009e70:	1e71      	subs	r1, r6, #1
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 fe5d 	bl	800ab32 <__any_on>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d1e6      	bne.n	8009e4a <__gethex+0x2ca>
 8009e7c:	ee18 0a10 	vmov	r0, s16
 8009e80:	4621      	mov	r1, r4
 8009e82:	f000 f9d7 	bl	800a234 <_Bfree>
 8009e86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e88:	2300      	movs	r3, #0
 8009e8a:	6013      	str	r3, [r2, #0]
 8009e8c:	2750      	movs	r7, #80	; 0x50
 8009e8e:	e70c      	b.n	8009caa <__gethex+0x12a>
 8009e90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1f2      	bne.n	8009e7c <__gethex+0x2fc>
 8009e96:	e7d8      	b.n	8009e4a <__gethex+0x2ca>
 8009e98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1d5      	bne.n	8009e4a <__gethex+0x2ca>
 8009e9e:	e7ed      	b.n	8009e7c <__gethex+0x2fc>
 8009ea0:	1e6f      	subs	r7, r5, #1
 8009ea2:	f1ba 0f00 	cmp.w	sl, #0
 8009ea6:	d131      	bne.n	8009f0c <__gethex+0x38c>
 8009ea8:	b127      	cbz	r7, 8009eb4 <__gethex+0x334>
 8009eaa:	4639      	mov	r1, r7
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 fe40 	bl	800ab32 <__any_on>
 8009eb2:	4682      	mov	sl, r0
 8009eb4:	117b      	asrs	r3, r7, #5
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009ebc:	f007 071f 	and.w	r7, r7, #31
 8009ec0:	fa01 f707 	lsl.w	r7, r1, r7
 8009ec4:	421f      	tst	r7, r3
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	4620      	mov	r0, r4
 8009eca:	bf18      	it	ne
 8009ecc:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ed0:	1b76      	subs	r6, r6, r5
 8009ed2:	f7ff fded 	bl	8009ab0 <rshift>
 8009ed6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009eda:	2702      	movs	r7, #2
 8009edc:	f1ba 0f00 	cmp.w	sl, #0
 8009ee0:	d048      	beq.n	8009f74 <__gethex+0x3f4>
 8009ee2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d015      	beq.n	8009f16 <__gethex+0x396>
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	d017      	beq.n	8009f1e <__gethex+0x39e>
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d109      	bne.n	8009f06 <__gethex+0x386>
 8009ef2:	f01a 0f02 	tst.w	sl, #2
 8009ef6:	d006      	beq.n	8009f06 <__gethex+0x386>
 8009ef8:	f8d9 0000 	ldr.w	r0, [r9]
 8009efc:	ea4a 0a00 	orr.w	sl, sl, r0
 8009f00:	f01a 0f01 	tst.w	sl, #1
 8009f04:	d10e      	bne.n	8009f24 <__gethex+0x3a4>
 8009f06:	f047 0710 	orr.w	r7, r7, #16
 8009f0a:	e033      	b.n	8009f74 <__gethex+0x3f4>
 8009f0c:	f04f 0a01 	mov.w	sl, #1
 8009f10:	e7d0      	b.n	8009eb4 <__gethex+0x334>
 8009f12:	2701      	movs	r7, #1
 8009f14:	e7e2      	b.n	8009edc <__gethex+0x35c>
 8009f16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f18:	f1c3 0301 	rsb	r3, r3, #1
 8009f1c:	9315      	str	r3, [sp, #84]	; 0x54
 8009f1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d0f0      	beq.n	8009f06 <__gethex+0x386>
 8009f24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f28:	f104 0314 	add.w	r3, r4, #20
 8009f2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f34:	f04f 0c00 	mov.w	ip, #0
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f42:	d01c      	beq.n	8009f7e <__gethex+0x3fe>
 8009f44:	3201      	adds	r2, #1
 8009f46:	6002      	str	r2, [r0, #0]
 8009f48:	2f02      	cmp	r7, #2
 8009f4a:	f104 0314 	add.w	r3, r4, #20
 8009f4e:	d13f      	bne.n	8009fd0 <__gethex+0x450>
 8009f50:	f8d8 2000 	ldr.w	r2, [r8]
 8009f54:	3a01      	subs	r2, #1
 8009f56:	42b2      	cmp	r2, r6
 8009f58:	d10a      	bne.n	8009f70 <__gethex+0x3f0>
 8009f5a:	1171      	asrs	r1, r6, #5
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f62:	f006 061f 	and.w	r6, r6, #31
 8009f66:	fa02 f606 	lsl.w	r6, r2, r6
 8009f6a:	421e      	tst	r6, r3
 8009f6c:	bf18      	it	ne
 8009f6e:	4617      	movne	r7, r2
 8009f70:	f047 0720 	orr.w	r7, r7, #32
 8009f74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f76:	601c      	str	r4, [r3, #0]
 8009f78:	9b04      	ldr	r3, [sp, #16]
 8009f7a:	601d      	str	r5, [r3, #0]
 8009f7c:	e695      	b.n	8009caa <__gethex+0x12a>
 8009f7e:	4299      	cmp	r1, r3
 8009f80:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f84:	d8d8      	bhi.n	8009f38 <__gethex+0x3b8>
 8009f86:	68a3      	ldr	r3, [r4, #8]
 8009f88:	459b      	cmp	fp, r3
 8009f8a:	db19      	blt.n	8009fc0 <__gethex+0x440>
 8009f8c:	6861      	ldr	r1, [r4, #4]
 8009f8e:	ee18 0a10 	vmov	r0, s16
 8009f92:	3101      	adds	r1, #1
 8009f94:	f000 f90e 	bl	800a1b4 <_Balloc>
 8009f98:	4681      	mov	r9, r0
 8009f9a:	b918      	cbnz	r0, 8009fa4 <__gethex+0x424>
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	; (800a008 <__gethex+0x488>)
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	2184      	movs	r1, #132	; 0x84
 8009fa2:	e6a8      	b.n	8009cf6 <__gethex+0x176>
 8009fa4:	6922      	ldr	r2, [r4, #16]
 8009fa6:	3202      	adds	r2, #2
 8009fa8:	f104 010c 	add.w	r1, r4, #12
 8009fac:	0092      	lsls	r2, r2, #2
 8009fae:	300c      	adds	r0, #12
 8009fb0:	f7fe fdee 	bl	8008b90 <memcpy>
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	ee18 0a10 	vmov	r0, s16
 8009fba:	f000 f93b 	bl	800a234 <_Bfree>
 8009fbe:	464c      	mov	r4, r9
 8009fc0:	6923      	ldr	r3, [r4, #16]
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fc8:	6122      	str	r2, [r4, #16]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	615a      	str	r2, [r3, #20]
 8009fce:	e7bb      	b.n	8009f48 <__gethex+0x3c8>
 8009fd0:	6922      	ldr	r2, [r4, #16]
 8009fd2:	455a      	cmp	r2, fp
 8009fd4:	dd0b      	ble.n	8009fee <__gethex+0x46e>
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f7ff fd69 	bl	8009ab0 <rshift>
 8009fde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fe2:	3501      	adds	r5, #1
 8009fe4:	42ab      	cmp	r3, r5
 8009fe6:	f6ff aed0 	blt.w	8009d8a <__gethex+0x20a>
 8009fea:	2701      	movs	r7, #1
 8009fec:	e7c0      	b.n	8009f70 <__gethex+0x3f0>
 8009fee:	f016 061f 	ands.w	r6, r6, #31
 8009ff2:	d0fa      	beq.n	8009fea <__gethex+0x46a>
 8009ff4:	4453      	add	r3, sl
 8009ff6:	f1c6 0620 	rsb	r6, r6, #32
 8009ffa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ffe:	f000 f9cb 	bl	800a398 <__hi0bits>
 800a002:	42b0      	cmp	r0, r6
 800a004:	dbe7      	blt.n	8009fd6 <__gethex+0x456>
 800a006:	e7f0      	b.n	8009fea <__gethex+0x46a>
 800a008:	0800d1f8 	.word	0x0800d1f8

0800a00c <L_shift>:
 800a00c:	f1c2 0208 	rsb	r2, r2, #8
 800a010:	0092      	lsls	r2, r2, #2
 800a012:	b570      	push	{r4, r5, r6, lr}
 800a014:	f1c2 0620 	rsb	r6, r2, #32
 800a018:	6843      	ldr	r3, [r0, #4]
 800a01a:	6804      	ldr	r4, [r0, #0]
 800a01c:	fa03 f506 	lsl.w	r5, r3, r6
 800a020:	432c      	orrs	r4, r5
 800a022:	40d3      	lsrs	r3, r2
 800a024:	6004      	str	r4, [r0, #0]
 800a026:	f840 3f04 	str.w	r3, [r0, #4]!
 800a02a:	4288      	cmp	r0, r1
 800a02c:	d3f4      	bcc.n	800a018 <L_shift+0xc>
 800a02e:	bd70      	pop	{r4, r5, r6, pc}

0800a030 <__match>:
 800a030:	b530      	push	{r4, r5, lr}
 800a032:	6803      	ldr	r3, [r0, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a03a:	b914      	cbnz	r4, 800a042 <__match+0x12>
 800a03c:	6003      	str	r3, [r0, #0]
 800a03e:	2001      	movs	r0, #1
 800a040:	bd30      	pop	{r4, r5, pc}
 800a042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a046:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a04a:	2d19      	cmp	r5, #25
 800a04c:	bf98      	it	ls
 800a04e:	3220      	addls	r2, #32
 800a050:	42a2      	cmp	r2, r4
 800a052:	d0f0      	beq.n	800a036 <__match+0x6>
 800a054:	2000      	movs	r0, #0
 800a056:	e7f3      	b.n	800a040 <__match+0x10>

0800a058 <__hexnan>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	680b      	ldr	r3, [r1, #0]
 800a05e:	115e      	asrs	r6, r3, #5
 800a060:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a064:	f013 031f 	ands.w	r3, r3, #31
 800a068:	b087      	sub	sp, #28
 800a06a:	bf18      	it	ne
 800a06c:	3604      	addne	r6, #4
 800a06e:	2500      	movs	r5, #0
 800a070:	1f37      	subs	r7, r6, #4
 800a072:	4690      	mov	r8, r2
 800a074:	6802      	ldr	r2, [r0, #0]
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	4682      	mov	sl, r0
 800a07a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a07e:	46b9      	mov	r9, r7
 800a080:	463c      	mov	r4, r7
 800a082:	9502      	str	r5, [sp, #8]
 800a084:	46ab      	mov	fp, r5
 800a086:	7851      	ldrb	r1, [r2, #1]
 800a088:	1c53      	adds	r3, r2, #1
 800a08a:	9303      	str	r3, [sp, #12]
 800a08c:	b341      	cbz	r1, 800a0e0 <__hexnan+0x88>
 800a08e:	4608      	mov	r0, r1
 800a090:	9205      	str	r2, [sp, #20]
 800a092:	9104      	str	r1, [sp, #16]
 800a094:	f7ff fd5e 	bl	8009b54 <__hexdig_fun>
 800a098:	2800      	cmp	r0, #0
 800a09a:	d14f      	bne.n	800a13c <__hexnan+0xe4>
 800a09c:	9904      	ldr	r1, [sp, #16]
 800a09e:	9a05      	ldr	r2, [sp, #20]
 800a0a0:	2920      	cmp	r1, #32
 800a0a2:	d818      	bhi.n	800a0d6 <__hexnan+0x7e>
 800a0a4:	9b02      	ldr	r3, [sp, #8]
 800a0a6:	459b      	cmp	fp, r3
 800a0a8:	dd13      	ble.n	800a0d2 <__hexnan+0x7a>
 800a0aa:	454c      	cmp	r4, r9
 800a0ac:	d206      	bcs.n	800a0bc <__hexnan+0x64>
 800a0ae:	2d07      	cmp	r5, #7
 800a0b0:	dc04      	bgt.n	800a0bc <__hexnan+0x64>
 800a0b2:	462a      	mov	r2, r5
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f7ff ffa8 	bl	800a00c <L_shift>
 800a0bc:	4544      	cmp	r4, r8
 800a0be:	d950      	bls.n	800a162 <__hexnan+0x10a>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f1a4 0904 	sub.w	r9, r4, #4
 800a0c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0ca:	f8cd b008 	str.w	fp, [sp, #8]
 800a0ce:	464c      	mov	r4, r9
 800a0d0:	461d      	mov	r5, r3
 800a0d2:	9a03      	ldr	r2, [sp, #12]
 800a0d4:	e7d7      	b.n	800a086 <__hexnan+0x2e>
 800a0d6:	2929      	cmp	r1, #41	; 0x29
 800a0d8:	d156      	bne.n	800a188 <__hexnan+0x130>
 800a0da:	3202      	adds	r2, #2
 800a0dc:	f8ca 2000 	str.w	r2, [sl]
 800a0e0:	f1bb 0f00 	cmp.w	fp, #0
 800a0e4:	d050      	beq.n	800a188 <__hexnan+0x130>
 800a0e6:	454c      	cmp	r4, r9
 800a0e8:	d206      	bcs.n	800a0f8 <__hexnan+0xa0>
 800a0ea:	2d07      	cmp	r5, #7
 800a0ec:	dc04      	bgt.n	800a0f8 <__hexnan+0xa0>
 800a0ee:	462a      	mov	r2, r5
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f7ff ff8a 	bl	800a00c <L_shift>
 800a0f8:	4544      	cmp	r4, r8
 800a0fa:	d934      	bls.n	800a166 <__hexnan+0x10e>
 800a0fc:	f1a8 0204 	sub.w	r2, r8, #4
 800a100:	4623      	mov	r3, r4
 800a102:	f853 1b04 	ldr.w	r1, [r3], #4
 800a106:	f842 1f04 	str.w	r1, [r2, #4]!
 800a10a:	429f      	cmp	r7, r3
 800a10c:	d2f9      	bcs.n	800a102 <__hexnan+0xaa>
 800a10e:	1b3b      	subs	r3, r7, r4
 800a110:	f023 0303 	bic.w	r3, r3, #3
 800a114:	3304      	adds	r3, #4
 800a116:	3401      	adds	r4, #1
 800a118:	3e03      	subs	r6, #3
 800a11a:	42b4      	cmp	r4, r6
 800a11c:	bf88      	it	hi
 800a11e:	2304      	movhi	r3, #4
 800a120:	4443      	add	r3, r8
 800a122:	2200      	movs	r2, #0
 800a124:	f843 2b04 	str.w	r2, [r3], #4
 800a128:	429f      	cmp	r7, r3
 800a12a:	d2fb      	bcs.n	800a124 <__hexnan+0xcc>
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	b91b      	cbnz	r3, 800a138 <__hexnan+0xe0>
 800a130:	4547      	cmp	r7, r8
 800a132:	d127      	bne.n	800a184 <__hexnan+0x12c>
 800a134:	2301      	movs	r3, #1
 800a136:	603b      	str	r3, [r7, #0]
 800a138:	2005      	movs	r0, #5
 800a13a:	e026      	b.n	800a18a <__hexnan+0x132>
 800a13c:	3501      	adds	r5, #1
 800a13e:	2d08      	cmp	r5, #8
 800a140:	f10b 0b01 	add.w	fp, fp, #1
 800a144:	dd06      	ble.n	800a154 <__hexnan+0xfc>
 800a146:	4544      	cmp	r4, r8
 800a148:	d9c3      	bls.n	800a0d2 <__hexnan+0x7a>
 800a14a:	2300      	movs	r3, #0
 800a14c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a150:	2501      	movs	r5, #1
 800a152:	3c04      	subs	r4, #4
 800a154:	6822      	ldr	r2, [r4, #0]
 800a156:	f000 000f 	and.w	r0, r0, #15
 800a15a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a15e:	6022      	str	r2, [r4, #0]
 800a160:	e7b7      	b.n	800a0d2 <__hexnan+0x7a>
 800a162:	2508      	movs	r5, #8
 800a164:	e7b5      	b.n	800a0d2 <__hexnan+0x7a>
 800a166:	9b01      	ldr	r3, [sp, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d0df      	beq.n	800a12c <__hexnan+0xd4>
 800a16c:	f04f 32ff 	mov.w	r2, #4294967295
 800a170:	f1c3 0320 	rsb	r3, r3, #32
 800a174:	fa22 f303 	lsr.w	r3, r2, r3
 800a178:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a17c:	401a      	ands	r2, r3
 800a17e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a182:	e7d3      	b.n	800a12c <__hexnan+0xd4>
 800a184:	3f04      	subs	r7, #4
 800a186:	e7d1      	b.n	800a12c <__hexnan+0xd4>
 800a188:	2004      	movs	r0, #4
 800a18a:	b007      	add	sp, #28
 800a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a190 <__ascii_mbtowc>:
 800a190:	b082      	sub	sp, #8
 800a192:	b901      	cbnz	r1, 800a196 <__ascii_mbtowc+0x6>
 800a194:	a901      	add	r1, sp, #4
 800a196:	b142      	cbz	r2, 800a1aa <__ascii_mbtowc+0x1a>
 800a198:	b14b      	cbz	r3, 800a1ae <__ascii_mbtowc+0x1e>
 800a19a:	7813      	ldrb	r3, [r2, #0]
 800a19c:	600b      	str	r3, [r1, #0]
 800a19e:	7812      	ldrb	r2, [r2, #0]
 800a1a0:	1e10      	subs	r0, r2, #0
 800a1a2:	bf18      	it	ne
 800a1a4:	2001      	movne	r0, #1
 800a1a6:	b002      	add	sp, #8
 800a1a8:	4770      	bx	lr
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	e7fb      	b.n	800a1a6 <__ascii_mbtowc+0x16>
 800a1ae:	f06f 0001 	mvn.w	r0, #1
 800a1b2:	e7f8      	b.n	800a1a6 <__ascii_mbtowc+0x16>

0800a1b4 <_Balloc>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	b976      	cbnz	r6, 800a1dc <_Balloc+0x28>
 800a1be:	2010      	movs	r0, #16
 800a1c0:	f001 fe02 	bl	800bdc8 <malloc>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	6260      	str	r0, [r4, #36]	; 0x24
 800a1c8:	b920      	cbnz	r0, 800a1d4 <_Balloc+0x20>
 800a1ca:	4b18      	ldr	r3, [pc, #96]	; (800a22c <_Balloc+0x78>)
 800a1cc:	4818      	ldr	r0, [pc, #96]	; (800a230 <_Balloc+0x7c>)
 800a1ce:	2166      	movs	r1, #102	; 0x66
 800a1d0:	f000 ff50 	bl	800b074 <__assert_func>
 800a1d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1d8:	6006      	str	r6, [r0, #0]
 800a1da:	60c6      	str	r6, [r0, #12]
 800a1dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1de:	68f3      	ldr	r3, [r6, #12]
 800a1e0:	b183      	cbz	r3, 800a204 <_Balloc+0x50>
 800a1e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1ea:	b9b8      	cbnz	r0, 800a21c <_Balloc+0x68>
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	fa01 f605 	lsl.w	r6, r1, r5
 800a1f2:	1d72      	adds	r2, r6, #5
 800a1f4:	0092      	lsls	r2, r2, #2
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f000 fcbc 	bl	800ab74 <_calloc_r>
 800a1fc:	b160      	cbz	r0, 800a218 <_Balloc+0x64>
 800a1fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a202:	e00e      	b.n	800a222 <_Balloc+0x6e>
 800a204:	2221      	movs	r2, #33	; 0x21
 800a206:	2104      	movs	r1, #4
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 fcb3 	bl	800ab74 <_calloc_r>
 800a20e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a210:	60f0      	str	r0, [r6, #12]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e4      	bne.n	800a1e2 <_Balloc+0x2e>
 800a218:	2000      	movs	r0, #0
 800a21a:	bd70      	pop	{r4, r5, r6, pc}
 800a21c:	6802      	ldr	r2, [r0, #0]
 800a21e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a222:	2300      	movs	r3, #0
 800a224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a228:	e7f7      	b.n	800a21a <_Balloc+0x66>
 800a22a:	bf00      	nop
 800a22c:	0800d284 	.word	0x0800d284
 800a230:	0800d29b 	.word	0x0800d29b

0800a234 <_Bfree>:
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a238:	4605      	mov	r5, r0
 800a23a:	460c      	mov	r4, r1
 800a23c:	b976      	cbnz	r6, 800a25c <_Bfree+0x28>
 800a23e:	2010      	movs	r0, #16
 800a240:	f001 fdc2 	bl	800bdc8 <malloc>
 800a244:	4602      	mov	r2, r0
 800a246:	6268      	str	r0, [r5, #36]	; 0x24
 800a248:	b920      	cbnz	r0, 800a254 <_Bfree+0x20>
 800a24a:	4b09      	ldr	r3, [pc, #36]	; (800a270 <_Bfree+0x3c>)
 800a24c:	4809      	ldr	r0, [pc, #36]	; (800a274 <_Bfree+0x40>)
 800a24e:	218a      	movs	r1, #138	; 0x8a
 800a250:	f000 ff10 	bl	800b074 <__assert_func>
 800a254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a258:	6006      	str	r6, [r0, #0]
 800a25a:	60c6      	str	r6, [r0, #12]
 800a25c:	b13c      	cbz	r4, 800a26e <_Bfree+0x3a>
 800a25e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a260:	6862      	ldr	r2, [r4, #4]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a268:	6021      	str	r1, [r4, #0]
 800a26a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a26e:	bd70      	pop	{r4, r5, r6, pc}
 800a270:	0800d284 	.word	0x0800d284
 800a274:	0800d29b 	.word	0x0800d29b

0800a278 <__multadd>:
 800a278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27c:	690d      	ldr	r5, [r1, #16]
 800a27e:	4607      	mov	r7, r0
 800a280:	460c      	mov	r4, r1
 800a282:	461e      	mov	r6, r3
 800a284:	f101 0c14 	add.w	ip, r1, #20
 800a288:	2000      	movs	r0, #0
 800a28a:	f8dc 3000 	ldr.w	r3, [ip]
 800a28e:	b299      	uxth	r1, r3
 800a290:	fb02 6101 	mla	r1, r2, r1, r6
 800a294:	0c1e      	lsrs	r6, r3, #16
 800a296:	0c0b      	lsrs	r3, r1, #16
 800a298:	fb02 3306 	mla	r3, r2, r6, r3
 800a29c:	b289      	uxth	r1, r1
 800a29e:	3001      	adds	r0, #1
 800a2a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2a4:	4285      	cmp	r5, r0
 800a2a6:	f84c 1b04 	str.w	r1, [ip], #4
 800a2aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2ae:	dcec      	bgt.n	800a28a <__multadd+0x12>
 800a2b0:	b30e      	cbz	r6, 800a2f6 <__multadd+0x7e>
 800a2b2:	68a3      	ldr	r3, [r4, #8]
 800a2b4:	42ab      	cmp	r3, r5
 800a2b6:	dc19      	bgt.n	800a2ec <__multadd+0x74>
 800a2b8:	6861      	ldr	r1, [r4, #4]
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	3101      	adds	r1, #1
 800a2be:	f7ff ff79 	bl	800a1b4 <_Balloc>
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <__multadd+0x5a>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	4b0c      	ldr	r3, [pc, #48]	; (800a2fc <__multadd+0x84>)
 800a2ca:	480d      	ldr	r0, [pc, #52]	; (800a300 <__multadd+0x88>)
 800a2cc:	21b5      	movs	r1, #181	; 0xb5
 800a2ce:	f000 fed1 	bl	800b074 <__assert_func>
 800a2d2:	6922      	ldr	r2, [r4, #16]
 800a2d4:	3202      	adds	r2, #2
 800a2d6:	f104 010c 	add.w	r1, r4, #12
 800a2da:	0092      	lsls	r2, r2, #2
 800a2dc:	300c      	adds	r0, #12
 800a2de:	f7fe fc57 	bl	8008b90 <memcpy>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7ff ffa5 	bl	800a234 <_Bfree>
 800a2ea:	4644      	mov	r4, r8
 800a2ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2f0:	3501      	adds	r5, #1
 800a2f2:	615e      	str	r6, [r3, #20]
 800a2f4:	6125      	str	r5, [r4, #16]
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2fc:	0800d1f8 	.word	0x0800d1f8
 800a300:	0800d29b 	.word	0x0800d29b

0800a304 <__s2b>:
 800a304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a308:	460c      	mov	r4, r1
 800a30a:	4615      	mov	r5, r2
 800a30c:	461f      	mov	r7, r3
 800a30e:	2209      	movs	r2, #9
 800a310:	3308      	adds	r3, #8
 800a312:	4606      	mov	r6, r0
 800a314:	fb93 f3f2 	sdiv	r3, r3, r2
 800a318:	2100      	movs	r1, #0
 800a31a:	2201      	movs	r2, #1
 800a31c:	429a      	cmp	r2, r3
 800a31e:	db09      	blt.n	800a334 <__s2b+0x30>
 800a320:	4630      	mov	r0, r6
 800a322:	f7ff ff47 	bl	800a1b4 <_Balloc>
 800a326:	b940      	cbnz	r0, 800a33a <__s2b+0x36>
 800a328:	4602      	mov	r2, r0
 800a32a:	4b19      	ldr	r3, [pc, #100]	; (800a390 <__s2b+0x8c>)
 800a32c:	4819      	ldr	r0, [pc, #100]	; (800a394 <__s2b+0x90>)
 800a32e:	21ce      	movs	r1, #206	; 0xce
 800a330:	f000 fea0 	bl	800b074 <__assert_func>
 800a334:	0052      	lsls	r2, r2, #1
 800a336:	3101      	adds	r1, #1
 800a338:	e7f0      	b.n	800a31c <__s2b+0x18>
 800a33a:	9b08      	ldr	r3, [sp, #32]
 800a33c:	6143      	str	r3, [r0, #20]
 800a33e:	2d09      	cmp	r5, #9
 800a340:	f04f 0301 	mov.w	r3, #1
 800a344:	6103      	str	r3, [r0, #16]
 800a346:	dd16      	ble.n	800a376 <__s2b+0x72>
 800a348:	f104 0909 	add.w	r9, r4, #9
 800a34c:	46c8      	mov	r8, r9
 800a34e:	442c      	add	r4, r5
 800a350:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a354:	4601      	mov	r1, r0
 800a356:	3b30      	subs	r3, #48	; 0x30
 800a358:	220a      	movs	r2, #10
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7ff ff8c 	bl	800a278 <__multadd>
 800a360:	45a0      	cmp	r8, r4
 800a362:	d1f5      	bne.n	800a350 <__s2b+0x4c>
 800a364:	f1a5 0408 	sub.w	r4, r5, #8
 800a368:	444c      	add	r4, r9
 800a36a:	1b2d      	subs	r5, r5, r4
 800a36c:	1963      	adds	r3, r4, r5
 800a36e:	42bb      	cmp	r3, r7
 800a370:	db04      	blt.n	800a37c <__s2b+0x78>
 800a372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a376:	340a      	adds	r4, #10
 800a378:	2509      	movs	r5, #9
 800a37a:	e7f6      	b.n	800a36a <__s2b+0x66>
 800a37c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a380:	4601      	mov	r1, r0
 800a382:	3b30      	subs	r3, #48	; 0x30
 800a384:	220a      	movs	r2, #10
 800a386:	4630      	mov	r0, r6
 800a388:	f7ff ff76 	bl	800a278 <__multadd>
 800a38c:	e7ee      	b.n	800a36c <__s2b+0x68>
 800a38e:	bf00      	nop
 800a390:	0800d1f8 	.word	0x0800d1f8
 800a394:	0800d29b 	.word	0x0800d29b

0800a398 <__hi0bits>:
 800a398:	0c03      	lsrs	r3, r0, #16
 800a39a:	041b      	lsls	r3, r3, #16
 800a39c:	b9d3      	cbnz	r3, 800a3d4 <__hi0bits+0x3c>
 800a39e:	0400      	lsls	r0, r0, #16
 800a3a0:	2310      	movs	r3, #16
 800a3a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3a6:	bf04      	itt	eq
 800a3a8:	0200      	lsleq	r0, r0, #8
 800a3aa:	3308      	addeq	r3, #8
 800a3ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3b0:	bf04      	itt	eq
 800a3b2:	0100      	lsleq	r0, r0, #4
 800a3b4:	3304      	addeq	r3, #4
 800a3b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3ba:	bf04      	itt	eq
 800a3bc:	0080      	lsleq	r0, r0, #2
 800a3be:	3302      	addeq	r3, #2
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	db05      	blt.n	800a3d0 <__hi0bits+0x38>
 800a3c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3c8:	f103 0301 	add.w	r3, r3, #1
 800a3cc:	bf08      	it	eq
 800a3ce:	2320      	moveq	r3, #32
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	4770      	bx	lr
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	e7e4      	b.n	800a3a2 <__hi0bits+0xa>

0800a3d8 <__lo0bits>:
 800a3d8:	6803      	ldr	r3, [r0, #0]
 800a3da:	f013 0207 	ands.w	r2, r3, #7
 800a3de:	4601      	mov	r1, r0
 800a3e0:	d00b      	beq.n	800a3fa <__lo0bits+0x22>
 800a3e2:	07da      	lsls	r2, r3, #31
 800a3e4:	d423      	bmi.n	800a42e <__lo0bits+0x56>
 800a3e6:	0798      	lsls	r0, r3, #30
 800a3e8:	bf49      	itett	mi
 800a3ea:	085b      	lsrmi	r3, r3, #1
 800a3ec:	089b      	lsrpl	r3, r3, #2
 800a3ee:	2001      	movmi	r0, #1
 800a3f0:	600b      	strmi	r3, [r1, #0]
 800a3f2:	bf5c      	itt	pl
 800a3f4:	600b      	strpl	r3, [r1, #0]
 800a3f6:	2002      	movpl	r0, #2
 800a3f8:	4770      	bx	lr
 800a3fa:	b298      	uxth	r0, r3
 800a3fc:	b9a8      	cbnz	r0, 800a42a <__lo0bits+0x52>
 800a3fe:	0c1b      	lsrs	r3, r3, #16
 800a400:	2010      	movs	r0, #16
 800a402:	b2da      	uxtb	r2, r3
 800a404:	b90a      	cbnz	r2, 800a40a <__lo0bits+0x32>
 800a406:	3008      	adds	r0, #8
 800a408:	0a1b      	lsrs	r3, r3, #8
 800a40a:	071a      	lsls	r2, r3, #28
 800a40c:	bf04      	itt	eq
 800a40e:	091b      	lsreq	r3, r3, #4
 800a410:	3004      	addeq	r0, #4
 800a412:	079a      	lsls	r2, r3, #30
 800a414:	bf04      	itt	eq
 800a416:	089b      	lsreq	r3, r3, #2
 800a418:	3002      	addeq	r0, #2
 800a41a:	07da      	lsls	r2, r3, #31
 800a41c:	d403      	bmi.n	800a426 <__lo0bits+0x4e>
 800a41e:	085b      	lsrs	r3, r3, #1
 800a420:	f100 0001 	add.w	r0, r0, #1
 800a424:	d005      	beq.n	800a432 <__lo0bits+0x5a>
 800a426:	600b      	str	r3, [r1, #0]
 800a428:	4770      	bx	lr
 800a42a:	4610      	mov	r0, r2
 800a42c:	e7e9      	b.n	800a402 <__lo0bits+0x2a>
 800a42e:	2000      	movs	r0, #0
 800a430:	4770      	bx	lr
 800a432:	2020      	movs	r0, #32
 800a434:	4770      	bx	lr
	...

0800a438 <__i2b>:
 800a438:	b510      	push	{r4, lr}
 800a43a:	460c      	mov	r4, r1
 800a43c:	2101      	movs	r1, #1
 800a43e:	f7ff feb9 	bl	800a1b4 <_Balloc>
 800a442:	4602      	mov	r2, r0
 800a444:	b928      	cbnz	r0, 800a452 <__i2b+0x1a>
 800a446:	4b05      	ldr	r3, [pc, #20]	; (800a45c <__i2b+0x24>)
 800a448:	4805      	ldr	r0, [pc, #20]	; (800a460 <__i2b+0x28>)
 800a44a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a44e:	f000 fe11 	bl	800b074 <__assert_func>
 800a452:	2301      	movs	r3, #1
 800a454:	6144      	str	r4, [r0, #20]
 800a456:	6103      	str	r3, [r0, #16]
 800a458:	bd10      	pop	{r4, pc}
 800a45a:	bf00      	nop
 800a45c:	0800d1f8 	.word	0x0800d1f8
 800a460:	0800d29b 	.word	0x0800d29b

0800a464 <__multiply>:
 800a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a468:	4691      	mov	r9, r2
 800a46a:	690a      	ldr	r2, [r1, #16]
 800a46c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a470:	429a      	cmp	r2, r3
 800a472:	bfb8      	it	lt
 800a474:	460b      	movlt	r3, r1
 800a476:	460c      	mov	r4, r1
 800a478:	bfbc      	itt	lt
 800a47a:	464c      	movlt	r4, r9
 800a47c:	4699      	movlt	r9, r3
 800a47e:	6927      	ldr	r7, [r4, #16]
 800a480:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a484:	68a3      	ldr	r3, [r4, #8]
 800a486:	6861      	ldr	r1, [r4, #4]
 800a488:	eb07 060a 	add.w	r6, r7, sl
 800a48c:	42b3      	cmp	r3, r6
 800a48e:	b085      	sub	sp, #20
 800a490:	bfb8      	it	lt
 800a492:	3101      	addlt	r1, #1
 800a494:	f7ff fe8e 	bl	800a1b4 <_Balloc>
 800a498:	b930      	cbnz	r0, 800a4a8 <__multiply+0x44>
 800a49a:	4602      	mov	r2, r0
 800a49c:	4b44      	ldr	r3, [pc, #272]	; (800a5b0 <__multiply+0x14c>)
 800a49e:	4845      	ldr	r0, [pc, #276]	; (800a5b4 <__multiply+0x150>)
 800a4a0:	f240 115d 	movw	r1, #349	; 0x15d
 800a4a4:	f000 fde6 	bl	800b074 <__assert_func>
 800a4a8:	f100 0514 	add.w	r5, r0, #20
 800a4ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4b0:	462b      	mov	r3, r5
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	4543      	cmp	r3, r8
 800a4b6:	d321      	bcc.n	800a4fc <__multiply+0x98>
 800a4b8:	f104 0314 	add.w	r3, r4, #20
 800a4bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a4c0:	f109 0314 	add.w	r3, r9, #20
 800a4c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a4c8:	9202      	str	r2, [sp, #8]
 800a4ca:	1b3a      	subs	r2, r7, r4
 800a4cc:	3a15      	subs	r2, #21
 800a4ce:	f022 0203 	bic.w	r2, r2, #3
 800a4d2:	3204      	adds	r2, #4
 800a4d4:	f104 0115 	add.w	r1, r4, #21
 800a4d8:	428f      	cmp	r7, r1
 800a4da:	bf38      	it	cc
 800a4dc:	2204      	movcc	r2, #4
 800a4de:	9201      	str	r2, [sp, #4]
 800a4e0:	9a02      	ldr	r2, [sp, #8]
 800a4e2:	9303      	str	r3, [sp, #12]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d80c      	bhi.n	800a502 <__multiply+0x9e>
 800a4e8:	2e00      	cmp	r6, #0
 800a4ea:	dd03      	ble.n	800a4f4 <__multiply+0x90>
 800a4ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d05a      	beq.n	800a5aa <__multiply+0x146>
 800a4f4:	6106      	str	r6, [r0, #16]
 800a4f6:	b005      	add	sp, #20
 800a4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fc:	f843 2b04 	str.w	r2, [r3], #4
 800a500:	e7d8      	b.n	800a4b4 <__multiply+0x50>
 800a502:	f8b3 a000 	ldrh.w	sl, [r3]
 800a506:	f1ba 0f00 	cmp.w	sl, #0
 800a50a:	d024      	beq.n	800a556 <__multiply+0xf2>
 800a50c:	f104 0e14 	add.w	lr, r4, #20
 800a510:	46a9      	mov	r9, r5
 800a512:	f04f 0c00 	mov.w	ip, #0
 800a516:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a51a:	f8d9 1000 	ldr.w	r1, [r9]
 800a51e:	fa1f fb82 	uxth.w	fp, r2
 800a522:	b289      	uxth	r1, r1
 800a524:	fb0a 110b 	mla	r1, sl, fp, r1
 800a528:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a52c:	f8d9 2000 	ldr.w	r2, [r9]
 800a530:	4461      	add	r1, ip
 800a532:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a536:	fb0a c20b 	mla	r2, sl, fp, ip
 800a53a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a53e:	b289      	uxth	r1, r1
 800a540:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a544:	4577      	cmp	r7, lr
 800a546:	f849 1b04 	str.w	r1, [r9], #4
 800a54a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a54e:	d8e2      	bhi.n	800a516 <__multiply+0xb2>
 800a550:	9a01      	ldr	r2, [sp, #4]
 800a552:	f845 c002 	str.w	ip, [r5, r2]
 800a556:	9a03      	ldr	r2, [sp, #12]
 800a558:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a55c:	3304      	adds	r3, #4
 800a55e:	f1b9 0f00 	cmp.w	r9, #0
 800a562:	d020      	beq.n	800a5a6 <__multiply+0x142>
 800a564:	6829      	ldr	r1, [r5, #0]
 800a566:	f104 0c14 	add.w	ip, r4, #20
 800a56a:	46ae      	mov	lr, r5
 800a56c:	f04f 0a00 	mov.w	sl, #0
 800a570:	f8bc b000 	ldrh.w	fp, [ip]
 800a574:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a578:	fb09 220b 	mla	r2, r9, fp, r2
 800a57c:	4492      	add	sl, r2
 800a57e:	b289      	uxth	r1, r1
 800a580:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a584:	f84e 1b04 	str.w	r1, [lr], #4
 800a588:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a58c:	f8be 1000 	ldrh.w	r1, [lr]
 800a590:	0c12      	lsrs	r2, r2, #16
 800a592:	fb09 1102 	mla	r1, r9, r2, r1
 800a596:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a59a:	4567      	cmp	r7, ip
 800a59c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5a0:	d8e6      	bhi.n	800a570 <__multiply+0x10c>
 800a5a2:	9a01      	ldr	r2, [sp, #4]
 800a5a4:	50a9      	str	r1, [r5, r2]
 800a5a6:	3504      	adds	r5, #4
 800a5a8:	e79a      	b.n	800a4e0 <__multiply+0x7c>
 800a5aa:	3e01      	subs	r6, #1
 800a5ac:	e79c      	b.n	800a4e8 <__multiply+0x84>
 800a5ae:	bf00      	nop
 800a5b0:	0800d1f8 	.word	0x0800d1f8
 800a5b4:	0800d29b 	.word	0x0800d29b

0800a5b8 <__pow5mult>:
 800a5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5bc:	4615      	mov	r5, r2
 800a5be:	f012 0203 	ands.w	r2, r2, #3
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	460f      	mov	r7, r1
 800a5c6:	d007      	beq.n	800a5d8 <__pow5mult+0x20>
 800a5c8:	4c25      	ldr	r4, [pc, #148]	; (800a660 <__pow5mult+0xa8>)
 800a5ca:	3a01      	subs	r2, #1
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5d2:	f7ff fe51 	bl	800a278 <__multadd>
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	10ad      	asrs	r5, r5, #2
 800a5da:	d03d      	beq.n	800a658 <__pow5mult+0xa0>
 800a5dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a5de:	b97c      	cbnz	r4, 800a600 <__pow5mult+0x48>
 800a5e0:	2010      	movs	r0, #16
 800a5e2:	f001 fbf1 	bl	800bdc8 <malloc>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	6270      	str	r0, [r6, #36]	; 0x24
 800a5ea:	b928      	cbnz	r0, 800a5f8 <__pow5mult+0x40>
 800a5ec:	4b1d      	ldr	r3, [pc, #116]	; (800a664 <__pow5mult+0xac>)
 800a5ee:	481e      	ldr	r0, [pc, #120]	; (800a668 <__pow5mult+0xb0>)
 800a5f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a5f4:	f000 fd3e 	bl	800b074 <__assert_func>
 800a5f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5fc:	6004      	str	r4, [r0, #0]
 800a5fe:	60c4      	str	r4, [r0, #12]
 800a600:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a604:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a608:	b94c      	cbnz	r4, 800a61e <__pow5mult+0x66>
 800a60a:	f240 2171 	movw	r1, #625	; 0x271
 800a60e:	4630      	mov	r0, r6
 800a610:	f7ff ff12 	bl	800a438 <__i2b>
 800a614:	2300      	movs	r3, #0
 800a616:	f8c8 0008 	str.w	r0, [r8, #8]
 800a61a:	4604      	mov	r4, r0
 800a61c:	6003      	str	r3, [r0, #0]
 800a61e:	f04f 0900 	mov.w	r9, #0
 800a622:	07eb      	lsls	r3, r5, #31
 800a624:	d50a      	bpl.n	800a63c <__pow5mult+0x84>
 800a626:	4639      	mov	r1, r7
 800a628:	4622      	mov	r2, r4
 800a62a:	4630      	mov	r0, r6
 800a62c:	f7ff ff1a 	bl	800a464 <__multiply>
 800a630:	4639      	mov	r1, r7
 800a632:	4680      	mov	r8, r0
 800a634:	4630      	mov	r0, r6
 800a636:	f7ff fdfd 	bl	800a234 <_Bfree>
 800a63a:	4647      	mov	r7, r8
 800a63c:	106d      	asrs	r5, r5, #1
 800a63e:	d00b      	beq.n	800a658 <__pow5mult+0xa0>
 800a640:	6820      	ldr	r0, [r4, #0]
 800a642:	b938      	cbnz	r0, 800a654 <__pow5mult+0x9c>
 800a644:	4622      	mov	r2, r4
 800a646:	4621      	mov	r1, r4
 800a648:	4630      	mov	r0, r6
 800a64a:	f7ff ff0b 	bl	800a464 <__multiply>
 800a64e:	6020      	str	r0, [r4, #0]
 800a650:	f8c0 9000 	str.w	r9, [r0]
 800a654:	4604      	mov	r4, r0
 800a656:	e7e4      	b.n	800a622 <__pow5mult+0x6a>
 800a658:	4638      	mov	r0, r7
 800a65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a65e:	bf00      	nop
 800a660:	0800d3e8 	.word	0x0800d3e8
 800a664:	0800d284 	.word	0x0800d284
 800a668:	0800d29b 	.word	0x0800d29b

0800a66c <__lshift>:
 800a66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a670:	460c      	mov	r4, r1
 800a672:	6849      	ldr	r1, [r1, #4]
 800a674:	6923      	ldr	r3, [r4, #16]
 800a676:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a67a:	68a3      	ldr	r3, [r4, #8]
 800a67c:	4607      	mov	r7, r0
 800a67e:	4691      	mov	r9, r2
 800a680:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a684:	f108 0601 	add.w	r6, r8, #1
 800a688:	42b3      	cmp	r3, r6
 800a68a:	db0b      	blt.n	800a6a4 <__lshift+0x38>
 800a68c:	4638      	mov	r0, r7
 800a68e:	f7ff fd91 	bl	800a1b4 <_Balloc>
 800a692:	4605      	mov	r5, r0
 800a694:	b948      	cbnz	r0, 800a6aa <__lshift+0x3e>
 800a696:	4602      	mov	r2, r0
 800a698:	4b2a      	ldr	r3, [pc, #168]	; (800a744 <__lshift+0xd8>)
 800a69a:	482b      	ldr	r0, [pc, #172]	; (800a748 <__lshift+0xdc>)
 800a69c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6a0:	f000 fce8 	bl	800b074 <__assert_func>
 800a6a4:	3101      	adds	r1, #1
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	e7ee      	b.n	800a688 <__lshift+0x1c>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	f100 0114 	add.w	r1, r0, #20
 800a6b0:	f100 0210 	add.w	r2, r0, #16
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	4553      	cmp	r3, sl
 800a6b8:	db37      	blt.n	800a72a <__lshift+0xbe>
 800a6ba:	6920      	ldr	r0, [r4, #16]
 800a6bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6c0:	f104 0314 	add.w	r3, r4, #20
 800a6c4:	f019 091f 	ands.w	r9, r9, #31
 800a6c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a6d0:	d02f      	beq.n	800a732 <__lshift+0xc6>
 800a6d2:	f1c9 0e20 	rsb	lr, r9, #32
 800a6d6:	468a      	mov	sl, r1
 800a6d8:	f04f 0c00 	mov.w	ip, #0
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	fa02 f209 	lsl.w	r2, r2, r9
 800a6e2:	ea42 020c 	orr.w	r2, r2, ip
 800a6e6:	f84a 2b04 	str.w	r2, [sl], #4
 800a6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ee:	4298      	cmp	r0, r3
 800a6f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a6f4:	d8f2      	bhi.n	800a6dc <__lshift+0x70>
 800a6f6:	1b03      	subs	r3, r0, r4
 800a6f8:	3b15      	subs	r3, #21
 800a6fa:	f023 0303 	bic.w	r3, r3, #3
 800a6fe:	3304      	adds	r3, #4
 800a700:	f104 0215 	add.w	r2, r4, #21
 800a704:	4290      	cmp	r0, r2
 800a706:	bf38      	it	cc
 800a708:	2304      	movcc	r3, #4
 800a70a:	f841 c003 	str.w	ip, [r1, r3]
 800a70e:	f1bc 0f00 	cmp.w	ip, #0
 800a712:	d001      	beq.n	800a718 <__lshift+0xac>
 800a714:	f108 0602 	add.w	r6, r8, #2
 800a718:	3e01      	subs	r6, #1
 800a71a:	4638      	mov	r0, r7
 800a71c:	612e      	str	r6, [r5, #16]
 800a71e:	4621      	mov	r1, r4
 800a720:	f7ff fd88 	bl	800a234 <_Bfree>
 800a724:	4628      	mov	r0, r5
 800a726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a72a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a72e:	3301      	adds	r3, #1
 800a730:	e7c1      	b.n	800a6b6 <__lshift+0x4a>
 800a732:	3904      	subs	r1, #4
 800a734:	f853 2b04 	ldr.w	r2, [r3], #4
 800a738:	f841 2f04 	str.w	r2, [r1, #4]!
 800a73c:	4298      	cmp	r0, r3
 800a73e:	d8f9      	bhi.n	800a734 <__lshift+0xc8>
 800a740:	e7ea      	b.n	800a718 <__lshift+0xac>
 800a742:	bf00      	nop
 800a744:	0800d1f8 	.word	0x0800d1f8
 800a748:	0800d29b 	.word	0x0800d29b

0800a74c <__mcmp>:
 800a74c:	b530      	push	{r4, r5, lr}
 800a74e:	6902      	ldr	r2, [r0, #16]
 800a750:	690c      	ldr	r4, [r1, #16]
 800a752:	1b12      	subs	r2, r2, r4
 800a754:	d10e      	bne.n	800a774 <__mcmp+0x28>
 800a756:	f100 0314 	add.w	r3, r0, #20
 800a75a:	3114      	adds	r1, #20
 800a75c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a760:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a764:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a768:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a76c:	42a5      	cmp	r5, r4
 800a76e:	d003      	beq.n	800a778 <__mcmp+0x2c>
 800a770:	d305      	bcc.n	800a77e <__mcmp+0x32>
 800a772:	2201      	movs	r2, #1
 800a774:	4610      	mov	r0, r2
 800a776:	bd30      	pop	{r4, r5, pc}
 800a778:	4283      	cmp	r3, r0
 800a77a:	d3f3      	bcc.n	800a764 <__mcmp+0x18>
 800a77c:	e7fa      	b.n	800a774 <__mcmp+0x28>
 800a77e:	f04f 32ff 	mov.w	r2, #4294967295
 800a782:	e7f7      	b.n	800a774 <__mcmp+0x28>

0800a784 <__mdiff>:
 800a784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	460c      	mov	r4, r1
 800a78a:	4606      	mov	r6, r0
 800a78c:	4611      	mov	r1, r2
 800a78e:	4620      	mov	r0, r4
 800a790:	4690      	mov	r8, r2
 800a792:	f7ff ffdb 	bl	800a74c <__mcmp>
 800a796:	1e05      	subs	r5, r0, #0
 800a798:	d110      	bne.n	800a7bc <__mdiff+0x38>
 800a79a:	4629      	mov	r1, r5
 800a79c:	4630      	mov	r0, r6
 800a79e:	f7ff fd09 	bl	800a1b4 <_Balloc>
 800a7a2:	b930      	cbnz	r0, 800a7b2 <__mdiff+0x2e>
 800a7a4:	4b3a      	ldr	r3, [pc, #232]	; (800a890 <__mdiff+0x10c>)
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	f240 2132 	movw	r1, #562	; 0x232
 800a7ac:	4839      	ldr	r0, [pc, #228]	; (800a894 <__mdiff+0x110>)
 800a7ae:	f000 fc61 	bl	800b074 <__assert_func>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7bc:	bfa4      	itt	ge
 800a7be:	4643      	movge	r3, r8
 800a7c0:	46a0      	movge	r8, r4
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7c8:	bfa6      	itte	ge
 800a7ca:	461c      	movge	r4, r3
 800a7cc:	2500      	movge	r5, #0
 800a7ce:	2501      	movlt	r5, #1
 800a7d0:	f7ff fcf0 	bl	800a1b4 <_Balloc>
 800a7d4:	b920      	cbnz	r0, 800a7e0 <__mdiff+0x5c>
 800a7d6:	4b2e      	ldr	r3, [pc, #184]	; (800a890 <__mdiff+0x10c>)
 800a7d8:	4602      	mov	r2, r0
 800a7da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a7de:	e7e5      	b.n	800a7ac <__mdiff+0x28>
 800a7e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7e4:	6926      	ldr	r6, [r4, #16]
 800a7e6:	60c5      	str	r5, [r0, #12]
 800a7e8:	f104 0914 	add.w	r9, r4, #20
 800a7ec:	f108 0514 	add.w	r5, r8, #20
 800a7f0:	f100 0e14 	add.w	lr, r0, #20
 800a7f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a7f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a7fc:	f108 0210 	add.w	r2, r8, #16
 800a800:	46f2      	mov	sl, lr
 800a802:	2100      	movs	r1, #0
 800a804:	f859 3b04 	ldr.w	r3, [r9], #4
 800a808:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a80c:	fa1f f883 	uxth.w	r8, r3
 800a810:	fa11 f18b 	uxtah	r1, r1, fp
 800a814:	0c1b      	lsrs	r3, r3, #16
 800a816:	eba1 0808 	sub.w	r8, r1, r8
 800a81a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a81e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a822:	fa1f f888 	uxth.w	r8, r8
 800a826:	1419      	asrs	r1, r3, #16
 800a828:	454e      	cmp	r6, r9
 800a82a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a82e:	f84a 3b04 	str.w	r3, [sl], #4
 800a832:	d8e7      	bhi.n	800a804 <__mdiff+0x80>
 800a834:	1b33      	subs	r3, r6, r4
 800a836:	3b15      	subs	r3, #21
 800a838:	f023 0303 	bic.w	r3, r3, #3
 800a83c:	3304      	adds	r3, #4
 800a83e:	3415      	adds	r4, #21
 800a840:	42a6      	cmp	r6, r4
 800a842:	bf38      	it	cc
 800a844:	2304      	movcc	r3, #4
 800a846:	441d      	add	r5, r3
 800a848:	4473      	add	r3, lr
 800a84a:	469e      	mov	lr, r3
 800a84c:	462e      	mov	r6, r5
 800a84e:	4566      	cmp	r6, ip
 800a850:	d30e      	bcc.n	800a870 <__mdiff+0xec>
 800a852:	f10c 0203 	add.w	r2, ip, #3
 800a856:	1b52      	subs	r2, r2, r5
 800a858:	f022 0203 	bic.w	r2, r2, #3
 800a85c:	3d03      	subs	r5, #3
 800a85e:	45ac      	cmp	ip, r5
 800a860:	bf38      	it	cc
 800a862:	2200      	movcc	r2, #0
 800a864:	441a      	add	r2, r3
 800a866:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a86a:	b17b      	cbz	r3, 800a88c <__mdiff+0x108>
 800a86c:	6107      	str	r7, [r0, #16]
 800a86e:	e7a3      	b.n	800a7b8 <__mdiff+0x34>
 800a870:	f856 8b04 	ldr.w	r8, [r6], #4
 800a874:	fa11 f288 	uxtah	r2, r1, r8
 800a878:	1414      	asrs	r4, r2, #16
 800a87a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a87e:	b292      	uxth	r2, r2
 800a880:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a884:	f84e 2b04 	str.w	r2, [lr], #4
 800a888:	1421      	asrs	r1, r4, #16
 800a88a:	e7e0      	b.n	800a84e <__mdiff+0xca>
 800a88c:	3f01      	subs	r7, #1
 800a88e:	e7ea      	b.n	800a866 <__mdiff+0xe2>
 800a890:	0800d1f8 	.word	0x0800d1f8
 800a894:	0800d29b 	.word	0x0800d29b

0800a898 <__ulp>:
 800a898:	b082      	sub	sp, #8
 800a89a:	ed8d 0b00 	vstr	d0, [sp]
 800a89e:	9b01      	ldr	r3, [sp, #4]
 800a8a0:	4912      	ldr	r1, [pc, #72]	; (800a8ec <__ulp+0x54>)
 800a8a2:	4019      	ands	r1, r3
 800a8a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a8a8:	2900      	cmp	r1, #0
 800a8aa:	dd05      	ble.n	800a8b8 <__ulp+0x20>
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	ec43 2b10 	vmov	d0, r2, r3
 800a8b4:	b002      	add	sp, #8
 800a8b6:	4770      	bx	lr
 800a8b8:	4249      	negs	r1, r1
 800a8ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a8be:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a8c2:	f04f 0200 	mov.w	r2, #0
 800a8c6:	f04f 0300 	mov.w	r3, #0
 800a8ca:	da04      	bge.n	800a8d6 <__ulp+0x3e>
 800a8cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a8d0:	fa41 f300 	asr.w	r3, r1, r0
 800a8d4:	e7ec      	b.n	800a8b0 <__ulp+0x18>
 800a8d6:	f1a0 0114 	sub.w	r1, r0, #20
 800a8da:	291e      	cmp	r1, #30
 800a8dc:	bfda      	itte	le
 800a8de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a8e2:	fa20 f101 	lsrle.w	r1, r0, r1
 800a8e6:	2101      	movgt	r1, #1
 800a8e8:	460a      	mov	r2, r1
 800a8ea:	e7e1      	b.n	800a8b0 <__ulp+0x18>
 800a8ec:	7ff00000 	.word	0x7ff00000

0800a8f0 <__b2d>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	6905      	ldr	r5, [r0, #16]
 800a8f4:	f100 0714 	add.w	r7, r0, #20
 800a8f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a8fc:	1f2e      	subs	r6, r5, #4
 800a8fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a902:	4620      	mov	r0, r4
 800a904:	f7ff fd48 	bl	800a398 <__hi0bits>
 800a908:	f1c0 0320 	rsb	r3, r0, #32
 800a90c:	280a      	cmp	r0, #10
 800a90e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a98c <__b2d+0x9c>
 800a912:	600b      	str	r3, [r1, #0]
 800a914:	dc14      	bgt.n	800a940 <__b2d+0x50>
 800a916:	f1c0 0e0b 	rsb	lr, r0, #11
 800a91a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a91e:	42b7      	cmp	r7, r6
 800a920:	ea41 030c 	orr.w	r3, r1, ip
 800a924:	bf34      	ite	cc
 800a926:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a92a:	2100      	movcs	r1, #0
 800a92c:	3015      	adds	r0, #21
 800a92e:	fa04 f000 	lsl.w	r0, r4, r0
 800a932:	fa21 f10e 	lsr.w	r1, r1, lr
 800a936:	ea40 0201 	orr.w	r2, r0, r1
 800a93a:	ec43 2b10 	vmov	d0, r2, r3
 800a93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a940:	42b7      	cmp	r7, r6
 800a942:	bf3a      	itte	cc
 800a944:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a948:	f1a5 0608 	subcc.w	r6, r5, #8
 800a94c:	2100      	movcs	r1, #0
 800a94e:	380b      	subs	r0, #11
 800a950:	d017      	beq.n	800a982 <__b2d+0x92>
 800a952:	f1c0 0c20 	rsb	ip, r0, #32
 800a956:	fa04 f500 	lsl.w	r5, r4, r0
 800a95a:	42be      	cmp	r6, r7
 800a95c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a960:	ea45 0504 	orr.w	r5, r5, r4
 800a964:	bf8c      	ite	hi
 800a966:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a96a:	2400      	movls	r4, #0
 800a96c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a970:	fa01 f000 	lsl.w	r0, r1, r0
 800a974:	fa24 f40c 	lsr.w	r4, r4, ip
 800a978:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a97c:	ea40 0204 	orr.w	r2, r0, r4
 800a980:	e7db      	b.n	800a93a <__b2d+0x4a>
 800a982:	ea44 030c 	orr.w	r3, r4, ip
 800a986:	460a      	mov	r2, r1
 800a988:	e7d7      	b.n	800a93a <__b2d+0x4a>
 800a98a:	bf00      	nop
 800a98c:	3ff00000 	.word	0x3ff00000

0800a990 <__d2b>:
 800a990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a994:	4689      	mov	r9, r1
 800a996:	2101      	movs	r1, #1
 800a998:	ec57 6b10 	vmov	r6, r7, d0
 800a99c:	4690      	mov	r8, r2
 800a99e:	f7ff fc09 	bl	800a1b4 <_Balloc>
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	b930      	cbnz	r0, 800a9b4 <__d2b+0x24>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	4b25      	ldr	r3, [pc, #148]	; (800aa40 <__d2b+0xb0>)
 800a9aa:	4826      	ldr	r0, [pc, #152]	; (800aa44 <__d2b+0xb4>)
 800a9ac:	f240 310a 	movw	r1, #778	; 0x30a
 800a9b0:	f000 fb60 	bl	800b074 <__assert_func>
 800a9b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a9b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9bc:	bb35      	cbnz	r5, 800aa0c <__d2b+0x7c>
 800a9be:	2e00      	cmp	r6, #0
 800a9c0:	9301      	str	r3, [sp, #4]
 800a9c2:	d028      	beq.n	800aa16 <__d2b+0x86>
 800a9c4:	4668      	mov	r0, sp
 800a9c6:	9600      	str	r6, [sp, #0]
 800a9c8:	f7ff fd06 	bl	800a3d8 <__lo0bits>
 800a9cc:	9900      	ldr	r1, [sp, #0]
 800a9ce:	b300      	cbz	r0, 800aa12 <__d2b+0x82>
 800a9d0:	9a01      	ldr	r2, [sp, #4]
 800a9d2:	f1c0 0320 	rsb	r3, r0, #32
 800a9d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9da:	430b      	orrs	r3, r1
 800a9dc:	40c2      	lsrs	r2, r0
 800a9de:	6163      	str	r3, [r4, #20]
 800a9e0:	9201      	str	r2, [sp, #4]
 800a9e2:	9b01      	ldr	r3, [sp, #4]
 800a9e4:	61a3      	str	r3, [r4, #24]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bf14      	ite	ne
 800a9ea:	2202      	movne	r2, #2
 800a9ec:	2201      	moveq	r2, #1
 800a9ee:	6122      	str	r2, [r4, #16]
 800a9f0:	b1d5      	cbz	r5, 800aa28 <__d2b+0x98>
 800a9f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a9f6:	4405      	add	r5, r0
 800a9f8:	f8c9 5000 	str.w	r5, [r9]
 800a9fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa00:	f8c8 0000 	str.w	r0, [r8]
 800aa04:	4620      	mov	r0, r4
 800aa06:	b003      	add	sp, #12
 800aa08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa10:	e7d5      	b.n	800a9be <__d2b+0x2e>
 800aa12:	6161      	str	r1, [r4, #20]
 800aa14:	e7e5      	b.n	800a9e2 <__d2b+0x52>
 800aa16:	a801      	add	r0, sp, #4
 800aa18:	f7ff fcde 	bl	800a3d8 <__lo0bits>
 800aa1c:	9b01      	ldr	r3, [sp, #4]
 800aa1e:	6163      	str	r3, [r4, #20]
 800aa20:	2201      	movs	r2, #1
 800aa22:	6122      	str	r2, [r4, #16]
 800aa24:	3020      	adds	r0, #32
 800aa26:	e7e3      	b.n	800a9f0 <__d2b+0x60>
 800aa28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa30:	f8c9 0000 	str.w	r0, [r9]
 800aa34:	6918      	ldr	r0, [r3, #16]
 800aa36:	f7ff fcaf 	bl	800a398 <__hi0bits>
 800aa3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa3e:	e7df      	b.n	800aa00 <__d2b+0x70>
 800aa40:	0800d1f8 	.word	0x0800d1f8
 800aa44:	0800d29b 	.word	0x0800d29b

0800aa48 <__ratio>:
 800aa48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	4688      	mov	r8, r1
 800aa4e:	4669      	mov	r1, sp
 800aa50:	4681      	mov	r9, r0
 800aa52:	f7ff ff4d 	bl	800a8f0 <__b2d>
 800aa56:	a901      	add	r1, sp, #4
 800aa58:	4640      	mov	r0, r8
 800aa5a:	ec55 4b10 	vmov	r4, r5, d0
 800aa5e:	f7ff ff47 	bl	800a8f0 <__b2d>
 800aa62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa6a:	eba3 0c02 	sub.w	ip, r3, r2
 800aa6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa72:	1a9b      	subs	r3, r3, r2
 800aa74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aa78:	ec51 0b10 	vmov	r0, r1, d0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	bfd6      	itet	le
 800aa80:	460a      	movle	r2, r1
 800aa82:	462a      	movgt	r2, r5
 800aa84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa88:	468b      	mov	fp, r1
 800aa8a:	462f      	mov	r7, r5
 800aa8c:	bfd4      	ite	le
 800aa8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aa92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa96:	4620      	mov	r0, r4
 800aa98:	ee10 2a10 	vmov	r2, s0
 800aa9c:	465b      	mov	r3, fp
 800aa9e:	4639      	mov	r1, r7
 800aaa0:	f7f5 fef4 	bl	800088c <__aeabi_ddiv>
 800aaa4:	ec41 0b10 	vmov	d0, r0, r1
 800aaa8:	b003      	add	sp, #12
 800aaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800aab0 <_mprec_log10>:
 800aab0:	2817      	cmp	r0, #23
 800aab2:	b5d0      	push	{r4, r6, r7, lr}
 800aab4:	4604      	mov	r4, r0
 800aab6:	dc07      	bgt.n	800aac8 <_mprec_log10+0x18>
 800aab8:	4809      	ldr	r0, [pc, #36]	; (800aae0 <_mprec_log10+0x30>)
 800aaba:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800aabe:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aac2:	ec41 0b10 	vmov	d0, r0, r1
 800aac6:	bdd0      	pop	{r4, r6, r7, pc}
 800aac8:	4906      	ldr	r1, [pc, #24]	; (800aae4 <_mprec_log10+0x34>)
 800aaca:	4f07      	ldr	r7, [pc, #28]	; (800aae8 <_mprec_log10+0x38>)
 800aacc:	2000      	movs	r0, #0
 800aace:	2600      	movs	r6, #0
 800aad0:	4632      	mov	r2, r6
 800aad2:	463b      	mov	r3, r7
 800aad4:	f7f5 fdb0 	bl	8000638 <__aeabi_dmul>
 800aad8:	3c01      	subs	r4, #1
 800aada:	d1f9      	bne.n	800aad0 <_mprec_log10+0x20>
 800aadc:	e7f1      	b.n	800aac2 <_mprec_log10+0x12>
 800aade:	bf00      	nop
 800aae0:	0800d320 	.word	0x0800d320
 800aae4:	3ff00000 	.word	0x3ff00000
 800aae8:	40240000 	.word	0x40240000

0800aaec <__copybits>:
 800aaec:	3901      	subs	r1, #1
 800aaee:	b570      	push	{r4, r5, r6, lr}
 800aaf0:	1149      	asrs	r1, r1, #5
 800aaf2:	6914      	ldr	r4, [r2, #16]
 800aaf4:	3101      	adds	r1, #1
 800aaf6:	f102 0314 	add.w	r3, r2, #20
 800aafa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aafe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab02:	1f05      	subs	r5, r0, #4
 800ab04:	42a3      	cmp	r3, r4
 800ab06:	d30c      	bcc.n	800ab22 <__copybits+0x36>
 800ab08:	1aa3      	subs	r3, r4, r2
 800ab0a:	3b11      	subs	r3, #17
 800ab0c:	f023 0303 	bic.w	r3, r3, #3
 800ab10:	3211      	adds	r2, #17
 800ab12:	42a2      	cmp	r2, r4
 800ab14:	bf88      	it	hi
 800ab16:	2300      	movhi	r3, #0
 800ab18:	4418      	add	r0, r3
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	4288      	cmp	r0, r1
 800ab1e:	d305      	bcc.n	800ab2c <__copybits+0x40>
 800ab20:	bd70      	pop	{r4, r5, r6, pc}
 800ab22:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab26:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab2a:	e7eb      	b.n	800ab04 <__copybits+0x18>
 800ab2c:	f840 3b04 	str.w	r3, [r0], #4
 800ab30:	e7f4      	b.n	800ab1c <__copybits+0x30>

0800ab32 <__any_on>:
 800ab32:	f100 0214 	add.w	r2, r0, #20
 800ab36:	6900      	ldr	r0, [r0, #16]
 800ab38:	114b      	asrs	r3, r1, #5
 800ab3a:	4298      	cmp	r0, r3
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	db11      	blt.n	800ab64 <__any_on+0x32>
 800ab40:	dd0a      	ble.n	800ab58 <__any_on+0x26>
 800ab42:	f011 011f 	ands.w	r1, r1, #31
 800ab46:	d007      	beq.n	800ab58 <__any_on+0x26>
 800ab48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab4c:	fa24 f001 	lsr.w	r0, r4, r1
 800ab50:	fa00 f101 	lsl.w	r1, r0, r1
 800ab54:	428c      	cmp	r4, r1
 800ab56:	d10b      	bne.n	800ab70 <__any_on+0x3e>
 800ab58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d803      	bhi.n	800ab68 <__any_on+0x36>
 800ab60:	2000      	movs	r0, #0
 800ab62:	bd10      	pop	{r4, pc}
 800ab64:	4603      	mov	r3, r0
 800ab66:	e7f7      	b.n	800ab58 <__any_on+0x26>
 800ab68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab6c:	2900      	cmp	r1, #0
 800ab6e:	d0f5      	beq.n	800ab5c <__any_on+0x2a>
 800ab70:	2001      	movs	r0, #1
 800ab72:	e7f6      	b.n	800ab62 <__any_on+0x30>

0800ab74 <_calloc_r>:
 800ab74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab76:	fba1 2402 	umull	r2, r4, r1, r2
 800ab7a:	b94c      	cbnz	r4, 800ab90 <_calloc_r+0x1c>
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	9201      	str	r2, [sp, #4]
 800ab80:	f000 f82e 	bl	800abe0 <_malloc_r>
 800ab84:	9a01      	ldr	r2, [sp, #4]
 800ab86:	4605      	mov	r5, r0
 800ab88:	b930      	cbnz	r0, 800ab98 <_calloc_r+0x24>
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	b003      	add	sp, #12
 800ab8e:	bd30      	pop	{r4, r5, pc}
 800ab90:	220c      	movs	r2, #12
 800ab92:	6002      	str	r2, [r0, #0]
 800ab94:	2500      	movs	r5, #0
 800ab96:	e7f8      	b.n	800ab8a <_calloc_r+0x16>
 800ab98:	4621      	mov	r1, r4
 800ab9a:	f7fe f807 	bl	8008bac <memset>
 800ab9e:	e7f4      	b.n	800ab8a <_calloc_r+0x16>

0800aba0 <sbrk_aligned>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	4e0e      	ldr	r6, [pc, #56]	; (800abdc <sbrk_aligned+0x3c>)
 800aba4:	460c      	mov	r4, r1
 800aba6:	6831      	ldr	r1, [r6, #0]
 800aba8:	4605      	mov	r5, r0
 800abaa:	b911      	cbnz	r1, 800abb2 <sbrk_aligned+0x12>
 800abac:	f000 fa28 	bl	800b000 <_sbrk_r>
 800abb0:	6030      	str	r0, [r6, #0]
 800abb2:	4621      	mov	r1, r4
 800abb4:	4628      	mov	r0, r5
 800abb6:	f000 fa23 	bl	800b000 <_sbrk_r>
 800abba:	1c43      	adds	r3, r0, #1
 800abbc:	d00a      	beq.n	800abd4 <sbrk_aligned+0x34>
 800abbe:	1cc4      	adds	r4, r0, #3
 800abc0:	f024 0403 	bic.w	r4, r4, #3
 800abc4:	42a0      	cmp	r0, r4
 800abc6:	d007      	beq.n	800abd8 <sbrk_aligned+0x38>
 800abc8:	1a21      	subs	r1, r4, r0
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 fa18 	bl	800b000 <_sbrk_r>
 800abd0:	3001      	adds	r0, #1
 800abd2:	d101      	bne.n	800abd8 <sbrk_aligned+0x38>
 800abd4:	f04f 34ff 	mov.w	r4, #4294967295
 800abd8:	4620      	mov	r0, r4
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	20000998 	.word	0x20000998

0800abe0 <_malloc_r>:
 800abe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe4:	1ccd      	adds	r5, r1, #3
 800abe6:	f025 0503 	bic.w	r5, r5, #3
 800abea:	3508      	adds	r5, #8
 800abec:	2d0c      	cmp	r5, #12
 800abee:	bf38      	it	cc
 800abf0:	250c      	movcc	r5, #12
 800abf2:	2d00      	cmp	r5, #0
 800abf4:	4607      	mov	r7, r0
 800abf6:	db01      	blt.n	800abfc <_malloc_r+0x1c>
 800abf8:	42a9      	cmp	r1, r5
 800abfa:	d905      	bls.n	800ac08 <_malloc_r+0x28>
 800abfc:	230c      	movs	r3, #12
 800abfe:	603b      	str	r3, [r7, #0]
 800ac00:	2600      	movs	r6, #0
 800ac02:	4630      	mov	r0, r6
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	4e2e      	ldr	r6, [pc, #184]	; (800acc4 <_malloc_r+0xe4>)
 800ac0a:	f001 f8e5 	bl	800bdd8 <__malloc_lock>
 800ac0e:	6833      	ldr	r3, [r6, #0]
 800ac10:	461c      	mov	r4, r3
 800ac12:	bb34      	cbnz	r4, 800ac62 <_malloc_r+0x82>
 800ac14:	4629      	mov	r1, r5
 800ac16:	4638      	mov	r0, r7
 800ac18:	f7ff ffc2 	bl	800aba0 <sbrk_aligned>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	4604      	mov	r4, r0
 800ac20:	d14d      	bne.n	800acbe <_malloc_r+0xde>
 800ac22:	6834      	ldr	r4, [r6, #0]
 800ac24:	4626      	mov	r6, r4
 800ac26:	2e00      	cmp	r6, #0
 800ac28:	d140      	bne.n	800acac <_malloc_r+0xcc>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	4631      	mov	r1, r6
 800ac2e:	4638      	mov	r0, r7
 800ac30:	eb04 0803 	add.w	r8, r4, r3
 800ac34:	f000 f9e4 	bl	800b000 <_sbrk_r>
 800ac38:	4580      	cmp	r8, r0
 800ac3a:	d13a      	bne.n	800acb2 <_malloc_r+0xd2>
 800ac3c:	6821      	ldr	r1, [r4, #0]
 800ac3e:	3503      	adds	r5, #3
 800ac40:	1a6d      	subs	r5, r5, r1
 800ac42:	f025 0503 	bic.w	r5, r5, #3
 800ac46:	3508      	adds	r5, #8
 800ac48:	2d0c      	cmp	r5, #12
 800ac4a:	bf38      	it	cc
 800ac4c:	250c      	movcc	r5, #12
 800ac4e:	4629      	mov	r1, r5
 800ac50:	4638      	mov	r0, r7
 800ac52:	f7ff ffa5 	bl	800aba0 <sbrk_aligned>
 800ac56:	3001      	adds	r0, #1
 800ac58:	d02b      	beq.n	800acb2 <_malloc_r+0xd2>
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	442b      	add	r3, r5
 800ac5e:	6023      	str	r3, [r4, #0]
 800ac60:	e00e      	b.n	800ac80 <_malloc_r+0xa0>
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	1b52      	subs	r2, r2, r5
 800ac66:	d41e      	bmi.n	800aca6 <_malloc_r+0xc6>
 800ac68:	2a0b      	cmp	r2, #11
 800ac6a:	d916      	bls.n	800ac9a <_malloc_r+0xba>
 800ac6c:	1961      	adds	r1, r4, r5
 800ac6e:	42a3      	cmp	r3, r4
 800ac70:	6025      	str	r5, [r4, #0]
 800ac72:	bf18      	it	ne
 800ac74:	6059      	strne	r1, [r3, #4]
 800ac76:	6863      	ldr	r3, [r4, #4]
 800ac78:	bf08      	it	eq
 800ac7a:	6031      	streq	r1, [r6, #0]
 800ac7c:	5162      	str	r2, [r4, r5]
 800ac7e:	604b      	str	r3, [r1, #4]
 800ac80:	4638      	mov	r0, r7
 800ac82:	f104 060b 	add.w	r6, r4, #11
 800ac86:	f001 f8ad 	bl	800bde4 <__malloc_unlock>
 800ac8a:	f026 0607 	bic.w	r6, r6, #7
 800ac8e:	1d23      	adds	r3, r4, #4
 800ac90:	1af2      	subs	r2, r6, r3
 800ac92:	d0b6      	beq.n	800ac02 <_malloc_r+0x22>
 800ac94:	1b9b      	subs	r3, r3, r6
 800ac96:	50a3      	str	r3, [r4, r2]
 800ac98:	e7b3      	b.n	800ac02 <_malloc_r+0x22>
 800ac9a:	6862      	ldr	r2, [r4, #4]
 800ac9c:	42a3      	cmp	r3, r4
 800ac9e:	bf0c      	ite	eq
 800aca0:	6032      	streq	r2, [r6, #0]
 800aca2:	605a      	strne	r2, [r3, #4]
 800aca4:	e7ec      	b.n	800ac80 <_malloc_r+0xa0>
 800aca6:	4623      	mov	r3, r4
 800aca8:	6864      	ldr	r4, [r4, #4]
 800acaa:	e7b2      	b.n	800ac12 <_malloc_r+0x32>
 800acac:	4634      	mov	r4, r6
 800acae:	6876      	ldr	r6, [r6, #4]
 800acb0:	e7b9      	b.n	800ac26 <_malloc_r+0x46>
 800acb2:	230c      	movs	r3, #12
 800acb4:	603b      	str	r3, [r7, #0]
 800acb6:	4638      	mov	r0, r7
 800acb8:	f001 f894 	bl	800bde4 <__malloc_unlock>
 800acbc:	e7a1      	b.n	800ac02 <_malloc_r+0x22>
 800acbe:	6025      	str	r5, [r4, #0]
 800acc0:	e7de      	b.n	800ac80 <_malloc_r+0xa0>
 800acc2:	bf00      	nop
 800acc4:	20000994 	.word	0x20000994

0800acc8 <_printf_common>:
 800acc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800accc:	4616      	mov	r6, r2
 800acce:	4699      	mov	r9, r3
 800acd0:	688a      	ldr	r2, [r1, #8]
 800acd2:	690b      	ldr	r3, [r1, #16]
 800acd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acd8:	4293      	cmp	r3, r2
 800acda:	bfb8      	it	lt
 800acdc:	4613      	movlt	r3, r2
 800acde:	6033      	str	r3, [r6, #0]
 800ace0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ace4:	4607      	mov	r7, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	b10a      	cbz	r2, 800acee <_printf_common+0x26>
 800acea:	3301      	adds	r3, #1
 800acec:	6033      	str	r3, [r6, #0]
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	0699      	lsls	r1, r3, #26
 800acf2:	bf42      	ittt	mi
 800acf4:	6833      	ldrmi	r3, [r6, #0]
 800acf6:	3302      	addmi	r3, #2
 800acf8:	6033      	strmi	r3, [r6, #0]
 800acfa:	6825      	ldr	r5, [r4, #0]
 800acfc:	f015 0506 	ands.w	r5, r5, #6
 800ad00:	d106      	bne.n	800ad10 <_printf_common+0x48>
 800ad02:	f104 0a19 	add.w	sl, r4, #25
 800ad06:	68e3      	ldr	r3, [r4, #12]
 800ad08:	6832      	ldr	r2, [r6, #0]
 800ad0a:	1a9b      	subs	r3, r3, r2
 800ad0c:	42ab      	cmp	r3, r5
 800ad0e:	dc26      	bgt.n	800ad5e <_printf_common+0x96>
 800ad10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad14:	1e13      	subs	r3, r2, #0
 800ad16:	6822      	ldr	r2, [r4, #0]
 800ad18:	bf18      	it	ne
 800ad1a:	2301      	movne	r3, #1
 800ad1c:	0692      	lsls	r2, r2, #26
 800ad1e:	d42b      	bmi.n	800ad78 <_printf_common+0xb0>
 800ad20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad24:	4649      	mov	r1, r9
 800ad26:	4638      	mov	r0, r7
 800ad28:	47c0      	blx	r8
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d01e      	beq.n	800ad6c <_printf_common+0xa4>
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	68e5      	ldr	r5, [r4, #12]
 800ad32:	6832      	ldr	r2, [r6, #0]
 800ad34:	f003 0306 	and.w	r3, r3, #6
 800ad38:	2b04      	cmp	r3, #4
 800ad3a:	bf08      	it	eq
 800ad3c:	1aad      	subeq	r5, r5, r2
 800ad3e:	68a3      	ldr	r3, [r4, #8]
 800ad40:	6922      	ldr	r2, [r4, #16]
 800ad42:	bf0c      	ite	eq
 800ad44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad48:	2500      	movne	r5, #0
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	bfc4      	itt	gt
 800ad4e:	1a9b      	subgt	r3, r3, r2
 800ad50:	18ed      	addgt	r5, r5, r3
 800ad52:	2600      	movs	r6, #0
 800ad54:	341a      	adds	r4, #26
 800ad56:	42b5      	cmp	r5, r6
 800ad58:	d11a      	bne.n	800ad90 <_printf_common+0xc8>
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	e008      	b.n	800ad70 <_printf_common+0xa8>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	4652      	mov	r2, sl
 800ad62:	4649      	mov	r1, r9
 800ad64:	4638      	mov	r0, r7
 800ad66:	47c0      	blx	r8
 800ad68:	3001      	adds	r0, #1
 800ad6a:	d103      	bne.n	800ad74 <_printf_common+0xac>
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad74:	3501      	adds	r5, #1
 800ad76:	e7c6      	b.n	800ad06 <_printf_common+0x3e>
 800ad78:	18e1      	adds	r1, r4, r3
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	2030      	movs	r0, #48	; 0x30
 800ad7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad82:	4422      	add	r2, r4
 800ad84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad8c:	3302      	adds	r3, #2
 800ad8e:	e7c7      	b.n	800ad20 <_printf_common+0x58>
 800ad90:	2301      	movs	r3, #1
 800ad92:	4622      	mov	r2, r4
 800ad94:	4649      	mov	r1, r9
 800ad96:	4638      	mov	r0, r7
 800ad98:	47c0      	blx	r8
 800ad9a:	3001      	adds	r0, #1
 800ad9c:	d0e6      	beq.n	800ad6c <_printf_common+0xa4>
 800ad9e:	3601      	adds	r6, #1
 800ada0:	e7d9      	b.n	800ad56 <_printf_common+0x8e>
	...

0800ada4 <_printf_i>:
 800ada4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ada8:	7e0f      	ldrb	r7, [r1, #24]
 800adaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800adac:	2f78      	cmp	r7, #120	; 0x78
 800adae:	4691      	mov	r9, r2
 800adb0:	4680      	mov	r8, r0
 800adb2:	460c      	mov	r4, r1
 800adb4:	469a      	mov	sl, r3
 800adb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800adba:	d807      	bhi.n	800adcc <_printf_i+0x28>
 800adbc:	2f62      	cmp	r7, #98	; 0x62
 800adbe:	d80a      	bhi.n	800add6 <_printf_i+0x32>
 800adc0:	2f00      	cmp	r7, #0
 800adc2:	f000 80d8 	beq.w	800af76 <_printf_i+0x1d2>
 800adc6:	2f58      	cmp	r7, #88	; 0x58
 800adc8:	f000 80a3 	beq.w	800af12 <_printf_i+0x16e>
 800adcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800add0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800add4:	e03a      	b.n	800ae4c <_printf_i+0xa8>
 800add6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adda:	2b15      	cmp	r3, #21
 800addc:	d8f6      	bhi.n	800adcc <_printf_i+0x28>
 800adde:	a101      	add	r1, pc, #4	; (adr r1, 800ade4 <_printf_i+0x40>)
 800ade0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ade4:	0800ae3d 	.word	0x0800ae3d
 800ade8:	0800ae51 	.word	0x0800ae51
 800adec:	0800adcd 	.word	0x0800adcd
 800adf0:	0800adcd 	.word	0x0800adcd
 800adf4:	0800adcd 	.word	0x0800adcd
 800adf8:	0800adcd 	.word	0x0800adcd
 800adfc:	0800ae51 	.word	0x0800ae51
 800ae00:	0800adcd 	.word	0x0800adcd
 800ae04:	0800adcd 	.word	0x0800adcd
 800ae08:	0800adcd 	.word	0x0800adcd
 800ae0c:	0800adcd 	.word	0x0800adcd
 800ae10:	0800af5d 	.word	0x0800af5d
 800ae14:	0800ae81 	.word	0x0800ae81
 800ae18:	0800af3f 	.word	0x0800af3f
 800ae1c:	0800adcd 	.word	0x0800adcd
 800ae20:	0800adcd 	.word	0x0800adcd
 800ae24:	0800af7f 	.word	0x0800af7f
 800ae28:	0800adcd 	.word	0x0800adcd
 800ae2c:	0800ae81 	.word	0x0800ae81
 800ae30:	0800adcd 	.word	0x0800adcd
 800ae34:	0800adcd 	.word	0x0800adcd
 800ae38:	0800af47 	.word	0x0800af47
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	1d1a      	adds	r2, r3, #4
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	602a      	str	r2, [r5, #0]
 800ae44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e0a3      	b.n	800af98 <_printf_i+0x1f4>
 800ae50:	6820      	ldr	r0, [r4, #0]
 800ae52:	6829      	ldr	r1, [r5, #0]
 800ae54:	0606      	lsls	r6, r0, #24
 800ae56:	f101 0304 	add.w	r3, r1, #4
 800ae5a:	d50a      	bpl.n	800ae72 <_printf_i+0xce>
 800ae5c:	680e      	ldr	r6, [r1, #0]
 800ae5e:	602b      	str	r3, [r5, #0]
 800ae60:	2e00      	cmp	r6, #0
 800ae62:	da03      	bge.n	800ae6c <_printf_i+0xc8>
 800ae64:	232d      	movs	r3, #45	; 0x2d
 800ae66:	4276      	negs	r6, r6
 800ae68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae6c:	485e      	ldr	r0, [pc, #376]	; (800afe8 <_printf_i+0x244>)
 800ae6e:	230a      	movs	r3, #10
 800ae70:	e019      	b.n	800aea6 <_printf_i+0x102>
 800ae72:	680e      	ldr	r6, [r1, #0]
 800ae74:	602b      	str	r3, [r5, #0]
 800ae76:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae7a:	bf18      	it	ne
 800ae7c:	b236      	sxthne	r6, r6
 800ae7e:	e7ef      	b.n	800ae60 <_printf_i+0xbc>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	6820      	ldr	r0, [r4, #0]
 800ae84:	1d19      	adds	r1, r3, #4
 800ae86:	6029      	str	r1, [r5, #0]
 800ae88:	0601      	lsls	r1, r0, #24
 800ae8a:	d501      	bpl.n	800ae90 <_printf_i+0xec>
 800ae8c:	681e      	ldr	r6, [r3, #0]
 800ae8e:	e002      	b.n	800ae96 <_printf_i+0xf2>
 800ae90:	0646      	lsls	r6, r0, #25
 800ae92:	d5fb      	bpl.n	800ae8c <_printf_i+0xe8>
 800ae94:	881e      	ldrh	r6, [r3, #0]
 800ae96:	4854      	ldr	r0, [pc, #336]	; (800afe8 <_printf_i+0x244>)
 800ae98:	2f6f      	cmp	r7, #111	; 0x6f
 800ae9a:	bf0c      	ite	eq
 800ae9c:	2308      	moveq	r3, #8
 800ae9e:	230a      	movne	r3, #10
 800aea0:	2100      	movs	r1, #0
 800aea2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aea6:	6865      	ldr	r5, [r4, #4]
 800aea8:	60a5      	str	r5, [r4, #8]
 800aeaa:	2d00      	cmp	r5, #0
 800aeac:	bfa2      	ittt	ge
 800aeae:	6821      	ldrge	r1, [r4, #0]
 800aeb0:	f021 0104 	bicge.w	r1, r1, #4
 800aeb4:	6021      	strge	r1, [r4, #0]
 800aeb6:	b90e      	cbnz	r6, 800aebc <_printf_i+0x118>
 800aeb8:	2d00      	cmp	r5, #0
 800aeba:	d04d      	beq.n	800af58 <_printf_i+0x1b4>
 800aebc:	4615      	mov	r5, r2
 800aebe:	fbb6 f1f3 	udiv	r1, r6, r3
 800aec2:	fb03 6711 	mls	r7, r3, r1, r6
 800aec6:	5dc7      	ldrb	r7, [r0, r7]
 800aec8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aecc:	4637      	mov	r7, r6
 800aece:	42bb      	cmp	r3, r7
 800aed0:	460e      	mov	r6, r1
 800aed2:	d9f4      	bls.n	800aebe <_printf_i+0x11a>
 800aed4:	2b08      	cmp	r3, #8
 800aed6:	d10b      	bne.n	800aef0 <_printf_i+0x14c>
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	07de      	lsls	r6, r3, #31
 800aedc:	d508      	bpl.n	800aef0 <_printf_i+0x14c>
 800aede:	6923      	ldr	r3, [r4, #16]
 800aee0:	6861      	ldr	r1, [r4, #4]
 800aee2:	4299      	cmp	r1, r3
 800aee4:	bfde      	ittt	le
 800aee6:	2330      	movle	r3, #48	; 0x30
 800aee8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aeec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aef0:	1b52      	subs	r2, r2, r5
 800aef2:	6122      	str	r2, [r4, #16]
 800aef4:	f8cd a000 	str.w	sl, [sp]
 800aef8:	464b      	mov	r3, r9
 800aefa:	aa03      	add	r2, sp, #12
 800aefc:	4621      	mov	r1, r4
 800aefe:	4640      	mov	r0, r8
 800af00:	f7ff fee2 	bl	800acc8 <_printf_common>
 800af04:	3001      	adds	r0, #1
 800af06:	d14c      	bne.n	800afa2 <_printf_i+0x1fe>
 800af08:	f04f 30ff 	mov.w	r0, #4294967295
 800af0c:	b004      	add	sp, #16
 800af0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af12:	4835      	ldr	r0, [pc, #212]	; (800afe8 <_printf_i+0x244>)
 800af14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800af18:	6829      	ldr	r1, [r5, #0]
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800af20:	6029      	str	r1, [r5, #0]
 800af22:	061d      	lsls	r5, r3, #24
 800af24:	d514      	bpl.n	800af50 <_printf_i+0x1ac>
 800af26:	07df      	lsls	r7, r3, #31
 800af28:	bf44      	itt	mi
 800af2a:	f043 0320 	orrmi.w	r3, r3, #32
 800af2e:	6023      	strmi	r3, [r4, #0]
 800af30:	b91e      	cbnz	r6, 800af3a <_printf_i+0x196>
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	f023 0320 	bic.w	r3, r3, #32
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	2310      	movs	r3, #16
 800af3c:	e7b0      	b.n	800aea0 <_printf_i+0xfc>
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	f043 0320 	orr.w	r3, r3, #32
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	2378      	movs	r3, #120	; 0x78
 800af48:	4828      	ldr	r0, [pc, #160]	; (800afec <_printf_i+0x248>)
 800af4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af4e:	e7e3      	b.n	800af18 <_printf_i+0x174>
 800af50:	0659      	lsls	r1, r3, #25
 800af52:	bf48      	it	mi
 800af54:	b2b6      	uxthmi	r6, r6
 800af56:	e7e6      	b.n	800af26 <_printf_i+0x182>
 800af58:	4615      	mov	r5, r2
 800af5a:	e7bb      	b.n	800aed4 <_printf_i+0x130>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	6826      	ldr	r6, [r4, #0]
 800af60:	6961      	ldr	r1, [r4, #20]
 800af62:	1d18      	adds	r0, r3, #4
 800af64:	6028      	str	r0, [r5, #0]
 800af66:	0635      	lsls	r5, r6, #24
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	d501      	bpl.n	800af70 <_printf_i+0x1cc>
 800af6c:	6019      	str	r1, [r3, #0]
 800af6e:	e002      	b.n	800af76 <_printf_i+0x1d2>
 800af70:	0670      	lsls	r0, r6, #25
 800af72:	d5fb      	bpl.n	800af6c <_printf_i+0x1c8>
 800af74:	8019      	strh	r1, [r3, #0]
 800af76:	2300      	movs	r3, #0
 800af78:	6123      	str	r3, [r4, #16]
 800af7a:	4615      	mov	r5, r2
 800af7c:	e7ba      	b.n	800aef4 <_printf_i+0x150>
 800af7e:	682b      	ldr	r3, [r5, #0]
 800af80:	1d1a      	adds	r2, r3, #4
 800af82:	602a      	str	r2, [r5, #0]
 800af84:	681d      	ldr	r5, [r3, #0]
 800af86:	6862      	ldr	r2, [r4, #4]
 800af88:	2100      	movs	r1, #0
 800af8a:	4628      	mov	r0, r5
 800af8c:	f7f5 f948 	bl	8000220 <memchr>
 800af90:	b108      	cbz	r0, 800af96 <_printf_i+0x1f2>
 800af92:	1b40      	subs	r0, r0, r5
 800af94:	6060      	str	r0, [r4, #4]
 800af96:	6863      	ldr	r3, [r4, #4]
 800af98:	6123      	str	r3, [r4, #16]
 800af9a:	2300      	movs	r3, #0
 800af9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afa0:	e7a8      	b.n	800aef4 <_printf_i+0x150>
 800afa2:	6923      	ldr	r3, [r4, #16]
 800afa4:	462a      	mov	r2, r5
 800afa6:	4649      	mov	r1, r9
 800afa8:	4640      	mov	r0, r8
 800afaa:	47d0      	blx	sl
 800afac:	3001      	adds	r0, #1
 800afae:	d0ab      	beq.n	800af08 <_printf_i+0x164>
 800afb0:	6823      	ldr	r3, [r4, #0]
 800afb2:	079b      	lsls	r3, r3, #30
 800afb4:	d413      	bmi.n	800afde <_printf_i+0x23a>
 800afb6:	68e0      	ldr	r0, [r4, #12]
 800afb8:	9b03      	ldr	r3, [sp, #12]
 800afba:	4298      	cmp	r0, r3
 800afbc:	bfb8      	it	lt
 800afbe:	4618      	movlt	r0, r3
 800afc0:	e7a4      	b.n	800af0c <_printf_i+0x168>
 800afc2:	2301      	movs	r3, #1
 800afc4:	4632      	mov	r2, r6
 800afc6:	4649      	mov	r1, r9
 800afc8:	4640      	mov	r0, r8
 800afca:	47d0      	blx	sl
 800afcc:	3001      	adds	r0, #1
 800afce:	d09b      	beq.n	800af08 <_printf_i+0x164>
 800afd0:	3501      	adds	r5, #1
 800afd2:	68e3      	ldr	r3, [r4, #12]
 800afd4:	9903      	ldr	r1, [sp, #12]
 800afd6:	1a5b      	subs	r3, r3, r1
 800afd8:	42ab      	cmp	r3, r5
 800afda:	dcf2      	bgt.n	800afc2 <_printf_i+0x21e>
 800afdc:	e7eb      	b.n	800afb6 <_printf_i+0x212>
 800afde:	2500      	movs	r5, #0
 800afe0:	f104 0619 	add.w	r6, r4, #25
 800afe4:	e7f5      	b.n	800afd2 <_printf_i+0x22e>
 800afe6:	bf00      	nop
 800afe8:	0800d3f4 	.word	0x0800d3f4
 800afec:	0800d405 	.word	0x0800d405

0800aff0 <nan>:
 800aff0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aff8 <nan+0x8>
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	00000000 	.word	0x00000000
 800affc:	7ff80000 	.word	0x7ff80000

0800b000 <_sbrk_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	4d06      	ldr	r5, [pc, #24]	; (800b01c <_sbrk_r+0x1c>)
 800b004:	2300      	movs	r3, #0
 800b006:	4604      	mov	r4, r0
 800b008:	4608      	mov	r0, r1
 800b00a:	602b      	str	r3, [r5, #0]
 800b00c:	f7f7 fc66 	bl	80028dc <_sbrk>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_sbrk_r+0x1a>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	b103      	cbz	r3, 800b01a <_sbrk_r+0x1a>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	2000099c 	.word	0x2000099c

0800b020 <strcpy>:
 800b020:	4603      	mov	r3, r0
 800b022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b026:	f803 2b01 	strb.w	r2, [r3], #1
 800b02a:	2a00      	cmp	r2, #0
 800b02c:	d1f9      	bne.n	800b022 <strcpy+0x2>
 800b02e:	4770      	bx	lr

0800b030 <strncmp>:
 800b030:	b510      	push	{r4, lr}
 800b032:	b17a      	cbz	r2, 800b054 <strncmp+0x24>
 800b034:	4603      	mov	r3, r0
 800b036:	3901      	subs	r1, #1
 800b038:	1884      	adds	r4, r0, r2
 800b03a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b03e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b042:	4290      	cmp	r0, r2
 800b044:	d101      	bne.n	800b04a <strncmp+0x1a>
 800b046:	42a3      	cmp	r3, r4
 800b048:	d101      	bne.n	800b04e <strncmp+0x1e>
 800b04a:	1a80      	subs	r0, r0, r2
 800b04c:	bd10      	pop	{r4, pc}
 800b04e:	2800      	cmp	r0, #0
 800b050:	d1f3      	bne.n	800b03a <strncmp+0xa>
 800b052:	e7fa      	b.n	800b04a <strncmp+0x1a>
 800b054:	4610      	mov	r0, r2
 800b056:	e7f9      	b.n	800b04c <strncmp+0x1c>

0800b058 <__ascii_wctomb>:
 800b058:	b149      	cbz	r1, 800b06e <__ascii_wctomb+0x16>
 800b05a:	2aff      	cmp	r2, #255	; 0xff
 800b05c:	bf85      	ittet	hi
 800b05e:	238a      	movhi	r3, #138	; 0x8a
 800b060:	6003      	strhi	r3, [r0, #0]
 800b062:	700a      	strbls	r2, [r1, #0]
 800b064:	f04f 30ff 	movhi.w	r0, #4294967295
 800b068:	bf98      	it	ls
 800b06a:	2001      	movls	r0, #1
 800b06c:	4770      	bx	lr
 800b06e:	4608      	mov	r0, r1
 800b070:	4770      	bx	lr
	...

0800b074 <__assert_func>:
 800b074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b076:	4614      	mov	r4, r2
 800b078:	461a      	mov	r2, r3
 800b07a:	4b09      	ldr	r3, [pc, #36]	; (800b0a0 <__assert_func+0x2c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4605      	mov	r5, r0
 800b080:	68d8      	ldr	r0, [r3, #12]
 800b082:	b14c      	cbz	r4, 800b098 <__assert_func+0x24>
 800b084:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <__assert_func+0x30>)
 800b086:	9100      	str	r1, [sp, #0]
 800b088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b08c:	4906      	ldr	r1, [pc, #24]	; (800b0a8 <__assert_func+0x34>)
 800b08e:	462b      	mov	r3, r5
 800b090:	f000 fe88 	bl	800bda4 <fiprintf>
 800b094:	f001 f912 	bl	800c2bc <abort>
 800b098:	4b04      	ldr	r3, [pc, #16]	; (800b0ac <__assert_func+0x38>)
 800b09a:	461c      	mov	r4, r3
 800b09c:	e7f3      	b.n	800b086 <__assert_func+0x12>
 800b09e:	bf00      	nop
 800b0a0:	2000001c 	.word	0x2000001c
 800b0a4:	0800d416 	.word	0x0800d416
 800b0a8:	0800d423 	.word	0x0800d423
 800b0ac:	0800d451 	.word	0x0800d451

0800b0b0 <quorem>:
 800b0b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	6903      	ldr	r3, [r0, #16]
 800b0b6:	690c      	ldr	r4, [r1, #16]
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	f2c0 8081 	blt.w	800b1c2 <quorem+0x112>
 800b0c0:	3c01      	subs	r4, #1
 800b0c2:	f101 0814 	add.w	r8, r1, #20
 800b0c6:	f100 0514 	add.w	r5, r0, #20
 800b0ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0ce:	9301      	str	r3, [sp, #4]
 800b0d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b0e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0e8:	d331      	bcc.n	800b14e <quorem+0x9e>
 800b0ea:	f04f 0e00 	mov.w	lr, #0
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	46ac      	mov	ip, r5
 800b0f2:	46f2      	mov	sl, lr
 800b0f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b0f8:	b293      	uxth	r3, r2
 800b0fa:	fb06 e303 	mla	r3, r6, r3, lr
 800b0fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b102:	b29b      	uxth	r3, r3
 800b104:	ebaa 0303 	sub.w	r3, sl, r3
 800b108:	f8dc a000 	ldr.w	sl, [ip]
 800b10c:	0c12      	lsrs	r2, r2, #16
 800b10e:	fa13 f38a 	uxtah	r3, r3, sl
 800b112:	fb06 e202 	mla	r2, r6, r2, lr
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	9b00      	ldr	r3, [sp, #0]
 800b11a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b11e:	b292      	uxth	r2, r2
 800b120:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b128:	f8bd 3000 	ldrh.w	r3, [sp]
 800b12c:	4581      	cmp	r9, r0
 800b12e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b132:	f84c 3b04 	str.w	r3, [ip], #4
 800b136:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b13a:	d2db      	bcs.n	800b0f4 <quorem+0x44>
 800b13c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b140:	b92b      	cbnz	r3, 800b14e <quorem+0x9e>
 800b142:	9b01      	ldr	r3, [sp, #4]
 800b144:	3b04      	subs	r3, #4
 800b146:	429d      	cmp	r5, r3
 800b148:	461a      	mov	r2, r3
 800b14a:	d32e      	bcc.n	800b1aa <quorem+0xfa>
 800b14c:	613c      	str	r4, [r7, #16]
 800b14e:	4638      	mov	r0, r7
 800b150:	f7ff fafc 	bl	800a74c <__mcmp>
 800b154:	2800      	cmp	r0, #0
 800b156:	db24      	blt.n	800b1a2 <quorem+0xf2>
 800b158:	3601      	adds	r6, #1
 800b15a:	4628      	mov	r0, r5
 800b15c:	f04f 0c00 	mov.w	ip, #0
 800b160:	f858 2b04 	ldr.w	r2, [r8], #4
 800b164:	f8d0 e000 	ldr.w	lr, [r0]
 800b168:	b293      	uxth	r3, r2
 800b16a:	ebac 0303 	sub.w	r3, ip, r3
 800b16e:	0c12      	lsrs	r2, r2, #16
 800b170:	fa13 f38e 	uxtah	r3, r3, lr
 800b174:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b182:	45c1      	cmp	r9, r8
 800b184:	f840 3b04 	str.w	r3, [r0], #4
 800b188:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b18c:	d2e8      	bcs.n	800b160 <quorem+0xb0>
 800b18e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b196:	b922      	cbnz	r2, 800b1a2 <quorem+0xf2>
 800b198:	3b04      	subs	r3, #4
 800b19a:	429d      	cmp	r5, r3
 800b19c:	461a      	mov	r2, r3
 800b19e:	d30a      	bcc.n	800b1b6 <quorem+0x106>
 800b1a0:	613c      	str	r4, [r7, #16]
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	b003      	add	sp, #12
 800b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1aa:	6812      	ldr	r2, [r2, #0]
 800b1ac:	3b04      	subs	r3, #4
 800b1ae:	2a00      	cmp	r2, #0
 800b1b0:	d1cc      	bne.n	800b14c <quorem+0x9c>
 800b1b2:	3c01      	subs	r4, #1
 800b1b4:	e7c7      	b.n	800b146 <quorem+0x96>
 800b1b6:	6812      	ldr	r2, [r2, #0]
 800b1b8:	3b04      	subs	r3, #4
 800b1ba:	2a00      	cmp	r2, #0
 800b1bc:	d1f0      	bne.n	800b1a0 <quorem+0xf0>
 800b1be:	3c01      	subs	r4, #1
 800b1c0:	e7eb      	b.n	800b19a <quorem+0xea>
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	e7ee      	b.n	800b1a4 <quorem+0xf4>
	...

0800b1c8 <_dtoa_r>:
 800b1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	ed2d 8b04 	vpush	{d8-d9}
 800b1d0:	ec57 6b10 	vmov	r6, r7, d0
 800b1d4:	b093      	sub	sp, #76	; 0x4c
 800b1d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b1dc:	9106      	str	r1, [sp, #24]
 800b1de:	ee10 aa10 	vmov	sl, s0
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b1e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b1e8:	46bb      	mov	fp, r7
 800b1ea:	b975      	cbnz	r5, 800b20a <_dtoa_r+0x42>
 800b1ec:	2010      	movs	r0, #16
 800b1ee:	f000 fdeb 	bl	800bdc8 <malloc>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	6260      	str	r0, [r4, #36]	; 0x24
 800b1f6:	b920      	cbnz	r0, 800b202 <_dtoa_r+0x3a>
 800b1f8:	4ba7      	ldr	r3, [pc, #668]	; (800b498 <_dtoa_r+0x2d0>)
 800b1fa:	21ea      	movs	r1, #234	; 0xea
 800b1fc:	48a7      	ldr	r0, [pc, #668]	; (800b49c <_dtoa_r+0x2d4>)
 800b1fe:	f7ff ff39 	bl	800b074 <__assert_func>
 800b202:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b206:	6005      	str	r5, [r0, #0]
 800b208:	60c5      	str	r5, [r0, #12]
 800b20a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b20c:	6819      	ldr	r1, [r3, #0]
 800b20e:	b151      	cbz	r1, 800b226 <_dtoa_r+0x5e>
 800b210:	685a      	ldr	r2, [r3, #4]
 800b212:	604a      	str	r2, [r1, #4]
 800b214:	2301      	movs	r3, #1
 800b216:	4093      	lsls	r3, r2
 800b218:	608b      	str	r3, [r1, #8]
 800b21a:	4620      	mov	r0, r4
 800b21c:	f7ff f80a 	bl	800a234 <_Bfree>
 800b220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	1e3b      	subs	r3, r7, #0
 800b228:	bfaa      	itet	ge
 800b22a:	2300      	movge	r3, #0
 800b22c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b230:	f8c8 3000 	strge.w	r3, [r8]
 800b234:	4b9a      	ldr	r3, [pc, #616]	; (800b4a0 <_dtoa_r+0x2d8>)
 800b236:	bfbc      	itt	lt
 800b238:	2201      	movlt	r2, #1
 800b23a:	f8c8 2000 	strlt.w	r2, [r8]
 800b23e:	ea33 030b 	bics.w	r3, r3, fp
 800b242:	d11b      	bne.n	800b27c <_dtoa_r+0xb4>
 800b244:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b246:	f242 730f 	movw	r3, #9999	; 0x270f
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b250:	4333      	orrs	r3, r6
 800b252:	f000 8592 	beq.w	800bd7a <_dtoa_r+0xbb2>
 800b256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b258:	b963      	cbnz	r3, 800b274 <_dtoa_r+0xac>
 800b25a:	4b92      	ldr	r3, [pc, #584]	; (800b4a4 <_dtoa_r+0x2dc>)
 800b25c:	e022      	b.n	800b2a4 <_dtoa_r+0xdc>
 800b25e:	4b92      	ldr	r3, [pc, #584]	; (800b4a8 <_dtoa_r+0x2e0>)
 800b260:	9301      	str	r3, [sp, #4]
 800b262:	3308      	adds	r3, #8
 800b264:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b266:	6013      	str	r3, [r2, #0]
 800b268:	9801      	ldr	r0, [sp, #4]
 800b26a:	b013      	add	sp, #76	; 0x4c
 800b26c:	ecbd 8b04 	vpop	{d8-d9}
 800b270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b274:	4b8b      	ldr	r3, [pc, #556]	; (800b4a4 <_dtoa_r+0x2dc>)
 800b276:	9301      	str	r3, [sp, #4]
 800b278:	3303      	adds	r3, #3
 800b27a:	e7f3      	b.n	800b264 <_dtoa_r+0x9c>
 800b27c:	2200      	movs	r2, #0
 800b27e:	2300      	movs	r3, #0
 800b280:	4650      	mov	r0, sl
 800b282:	4659      	mov	r1, fp
 800b284:	f7f5 fc40 	bl	8000b08 <__aeabi_dcmpeq>
 800b288:	ec4b ab19 	vmov	d9, sl, fp
 800b28c:	4680      	mov	r8, r0
 800b28e:	b158      	cbz	r0, 800b2a8 <_dtoa_r+0xe0>
 800b290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b292:	2301      	movs	r3, #1
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 856b 	beq.w	800bd74 <_dtoa_r+0xbac>
 800b29e:	4883      	ldr	r0, [pc, #524]	; (800b4ac <_dtoa_r+0x2e4>)
 800b2a0:	6018      	str	r0, [r3, #0]
 800b2a2:	1e43      	subs	r3, r0, #1
 800b2a4:	9301      	str	r3, [sp, #4]
 800b2a6:	e7df      	b.n	800b268 <_dtoa_r+0xa0>
 800b2a8:	ec4b ab10 	vmov	d0, sl, fp
 800b2ac:	aa10      	add	r2, sp, #64	; 0x40
 800b2ae:	a911      	add	r1, sp, #68	; 0x44
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f7ff fb6d 	bl	800a990 <__d2b>
 800b2b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b2ba:	ee08 0a10 	vmov	s16, r0
 800b2be:	2d00      	cmp	r5, #0
 800b2c0:	f000 8084 	beq.w	800b3cc <_dtoa_r+0x204>
 800b2c4:	ee19 3a90 	vmov	r3, s19
 800b2c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b2d0:	4656      	mov	r6, sl
 800b2d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b2d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b2da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b2de:	4b74      	ldr	r3, [pc, #464]	; (800b4b0 <_dtoa_r+0x2e8>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	4639      	mov	r1, r7
 800b2e6:	f7f4 ffef 	bl	80002c8 <__aeabi_dsub>
 800b2ea:	a365      	add	r3, pc, #404	; (adr r3, 800b480 <_dtoa_r+0x2b8>)
 800b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f0:	f7f5 f9a2 	bl	8000638 <__aeabi_dmul>
 800b2f4:	a364      	add	r3, pc, #400	; (adr r3, 800b488 <_dtoa_r+0x2c0>)
 800b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fa:	f7f4 ffe7 	bl	80002cc <__adddf3>
 800b2fe:	4606      	mov	r6, r0
 800b300:	4628      	mov	r0, r5
 800b302:	460f      	mov	r7, r1
 800b304:	f7f5 f92e 	bl	8000564 <__aeabi_i2d>
 800b308:	a361      	add	r3, pc, #388	; (adr r3, 800b490 <_dtoa_r+0x2c8>)
 800b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30e:	f7f5 f993 	bl	8000638 <__aeabi_dmul>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	4630      	mov	r0, r6
 800b318:	4639      	mov	r1, r7
 800b31a:	f7f4 ffd7 	bl	80002cc <__adddf3>
 800b31e:	4606      	mov	r6, r0
 800b320:	460f      	mov	r7, r1
 800b322:	f7f5 fc23 	bl	8000b6c <__aeabi_d2iz>
 800b326:	2200      	movs	r2, #0
 800b328:	9000      	str	r0, [sp, #0]
 800b32a:	2300      	movs	r3, #0
 800b32c:	4630      	mov	r0, r6
 800b32e:	4639      	mov	r1, r7
 800b330:	f7f5 fbf4 	bl	8000b1c <__aeabi_dcmplt>
 800b334:	b150      	cbz	r0, 800b34c <_dtoa_r+0x184>
 800b336:	9800      	ldr	r0, [sp, #0]
 800b338:	f7f5 f914 	bl	8000564 <__aeabi_i2d>
 800b33c:	4632      	mov	r2, r6
 800b33e:	463b      	mov	r3, r7
 800b340:	f7f5 fbe2 	bl	8000b08 <__aeabi_dcmpeq>
 800b344:	b910      	cbnz	r0, 800b34c <_dtoa_r+0x184>
 800b346:	9b00      	ldr	r3, [sp, #0]
 800b348:	3b01      	subs	r3, #1
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	9b00      	ldr	r3, [sp, #0]
 800b34e:	2b16      	cmp	r3, #22
 800b350:	d85a      	bhi.n	800b408 <_dtoa_r+0x240>
 800b352:	9a00      	ldr	r2, [sp, #0]
 800b354:	4b57      	ldr	r3, [pc, #348]	; (800b4b4 <_dtoa_r+0x2ec>)
 800b356:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	ec51 0b19 	vmov	r0, r1, d9
 800b362:	f7f5 fbdb 	bl	8000b1c <__aeabi_dcmplt>
 800b366:	2800      	cmp	r0, #0
 800b368:	d050      	beq.n	800b40c <_dtoa_r+0x244>
 800b36a:	9b00      	ldr	r3, [sp, #0]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	2300      	movs	r3, #0
 800b372:	930b      	str	r3, [sp, #44]	; 0x2c
 800b374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b376:	1b5d      	subs	r5, r3, r5
 800b378:	1e6b      	subs	r3, r5, #1
 800b37a:	9305      	str	r3, [sp, #20]
 800b37c:	bf45      	ittet	mi
 800b37e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b382:	9304      	strmi	r3, [sp, #16]
 800b384:	2300      	movpl	r3, #0
 800b386:	2300      	movmi	r3, #0
 800b388:	bf4c      	ite	mi
 800b38a:	9305      	strmi	r3, [sp, #20]
 800b38c:	9304      	strpl	r3, [sp, #16]
 800b38e:	9b00      	ldr	r3, [sp, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	db3d      	blt.n	800b410 <_dtoa_r+0x248>
 800b394:	9b05      	ldr	r3, [sp, #20]
 800b396:	9a00      	ldr	r2, [sp, #0]
 800b398:	920a      	str	r2, [sp, #40]	; 0x28
 800b39a:	4413      	add	r3, r2
 800b39c:	9305      	str	r3, [sp, #20]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	9307      	str	r3, [sp, #28]
 800b3a2:	9b06      	ldr	r3, [sp, #24]
 800b3a4:	2b09      	cmp	r3, #9
 800b3a6:	f200 8089 	bhi.w	800b4bc <_dtoa_r+0x2f4>
 800b3aa:	2b05      	cmp	r3, #5
 800b3ac:	bfc4      	itt	gt
 800b3ae:	3b04      	subgt	r3, #4
 800b3b0:	9306      	strgt	r3, [sp, #24]
 800b3b2:	9b06      	ldr	r3, [sp, #24]
 800b3b4:	f1a3 0302 	sub.w	r3, r3, #2
 800b3b8:	bfcc      	ite	gt
 800b3ba:	2500      	movgt	r5, #0
 800b3bc:	2501      	movle	r5, #1
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	f200 8087 	bhi.w	800b4d2 <_dtoa_r+0x30a>
 800b3c4:	e8df f003 	tbb	[pc, r3]
 800b3c8:	59383a2d 	.word	0x59383a2d
 800b3cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b3d0:	441d      	add	r5, r3
 800b3d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b3d6:	2b20      	cmp	r3, #32
 800b3d8:	bfc1      	itttt	gt
 800b3da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b3de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b3e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b3e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b3ea:	bfda      	itte	le
 800b3ec:	f1c3 0320 	rsble	r3, r3, #32
 800b3f0:	fa06 f003 	lslle.w	r0, r6, r3
 800b3f4:	4318      	orrgt	r0, r3
 800b3f6:	f7f5 f8a5 	bl	8000544 <__aeabi_ui2d>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	4606      	mov	r6, r0
 800b3fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b402:	3d01      	subs	r5, #1
 800b404:	930e      	str	r3, [sp, #56]	; 0x38
 800b406:	e76a      	b.n	800b2de <_dtoa_r+0x116>
 800b408:	2301      	movs	r3, #1
 800b40a:	e7b2      	b.n	800b372 <_dtoa_r+0x1aa>
 800b40c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b40e:	e7b1      	b.n	800b374 <_dtoa_r+0x1ac>
 800b410:	9b04      	ldr	r3, [sp, #16]
 800b412:	9a00      	ldr	r2, [sp, #0]
 800b414:	1a9b      	subs	r3, r3, r2
 800b416:	9304      	str	r3, [sp, #16]
 800b418:	4253      	negs	r3, r2
 800b41a:	9307      	str	r3, [sp, #28]
 800b41c:	2300      	movs	r3, #0
 800b41e:	930a      	str	r3, [sp, #40]	; 0x28
 800b420:	e7bf      	b.n	800b3a2 <_dtoa_r+0x1da>
 800b422:	2300      	movs	r3, #0
 800b424:	9308      	str	r3, [sp, #32]
 800b426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	dc55      	bgt.n	800b4d8 <_dtoa_r+0x310>
 800b42c:	2301      	movs	r3, #1
 800b42e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b432:	461a      	mov	r2, r3
 800b434:	9209      	str	r2, [sp, #36]	; 0x24
 800b436:	e00c      	b.n	800b452 <_dtoa_r+0x28a>
 800b438:	2301      	movs	r3, #1
 800b43a:	e7f3      	b.n	800b424 <_dtoa_r+0x25c>
 800b43c:	2300      	movs	r3, #0
 800b43e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b440:	9308      	str	r3, [sp, #32]
 800b442:	9b00      	ldr	r3, [sp, #0]
 800b444:	4413      	add	r3, r2
 800b446:	9302      	str	r3, [sp, #8]
 800b448:	3301      	adds	r3, #1
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	9303      	str	r3, [sp, #12]
 800b44e:	bfb8      	it	lt
 800b450:	2301      	movlt	r3, #1
 800b452:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b454:	2200      	movs	r2, #0
 800b456:	6042      	str	r2, [r0, #4]
 800b458:	2204      	movs	r2, #4
 800b45a:	f102 0614 	add.w	r6, r2, #20
 800b45e:	429e      	cmp	r6, r3
 800b460:	6841      	ldr	r1, [r0, #4]
 800b462:	d93d      	bls.n	800b4e0 <_dtoa_r+0x318>
 800b464:	4620      	mov	r0, r4
 800b466:	f7fe fea5 	bl	800a1b4 <_Balloc>
 800b46a:	9001      	str	r0, [sp, #4]
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d13b      	bne.n	800b4e8 <_dtoa_r+0x320>
 800b470:	4b11      	ldr	r3, [pc, #68]	; (800b4b8 <_dtoa_r+0x2f0>)
 800b472:	4602      	mov	r2, r0
 800b474:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b478:	e6c0      	b.n	800b1fc <_dtoa_r+0x34>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e7df      	b.n	800b43e <_dtoa_r+0x276>
 800b47e:	bf00      	nop
 800b480:	636f4361 	.word	0x636f4361
 800b484:	3fd287a7 	.word	0x3fd287a7
 800b488:	8b60c8b3 	.word	0x8b60c8b3
 800b48c:	3fc68a28 	.word	0x3fc68a28
 800b490:	509f79fb 	.word	0x509f79fb
 800b494:	3fd34413 	.word	0x3fd34413
 800b498:	0800d284 	.word	0x0800d284
 800b49c:	0800d562 	.word	0x0800d562
 800b4a0:	7ff00000 	.word	0x7ff00000
 800b4a4:	0800d55c 	.word	0x0800d55c
 800b4a8:	0800d553 	.word	0x0800d553
 800b4ac:	0800d561 	.word	0x0800d561
 800b4b0:	3ff80000 	.word	0x3ff80000
 800b4b4:	0800d320 	.word	0x0800d320
 800b4b8:	0800d1f8 	.word	0x0800d1f8
 800b4bc:	2501      	movs	r5, #1
 800b4be:	2300      	movs	r3, #0
 800b4c0:	9306      	str	r3, [sp, #24]
 800b4c2:	9508      	str	r5, [sp, #32]
 800b4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2312      	movs	r3, #18
 800b4d0:	e7b0      	b.n	800b434 <_dtoa_r+0x26c>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	9308      	str	r3, [sp, #32]
 800b4d6:	e7f5      	b.n	800b4c4 <_dtoa_r+0x2fc>
 800b4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4de:	e7b8      	b.n	800b452 <_dtoa_r+0x28a>
 800b4e0:	3101      	adds	r1, #1
 800b4e2:	6041      	str	r1, [r0, #4]
 800b4e4:	0052      	lsls	r2, r2, #1
 800b4e6:	e7b8      	b.n	800b45a <_dtoa_r+0x292>
 800b4e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4ea:	9a01      	ldr	r2, [sp, #4]
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	2b0e      	cmp	r3, #14
 800b4f2:	f200 809d 	bhi.w	800b630 <_dtoa_r+0x468>
 800b4f6:	2d00      	cmp	r5, #0
 800b4f8:	f000 809a 	beq.w	800b630 <_dtoa_r+0x468>
 800b4fc:	9b00      	ldr	r3, [sp, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	dd32      	ble.n	800b568 <_dtoa_r+0x3a0>
 800b502:	4ab7      	ldr	r2, [pc, #732]	; (800b7e0 <_dtoa_r+0x618>)
 800b504:	f003 030f 	and.w	r3, r3, #15
 800b508:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b50c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b510:	9b00      	ldr	r3, [sp, #0]
 800b512:	05d8      	lsls	r0, r3, #23
 800b514:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b518:	d516      	bpl.n	800b548 <_dtoa_r+0x380>
 800b51a:	4bb2      	ldr	r3, [pc, #712]	; (800b7e4 <_dtoa_r+0x61c>)
 800b51c:	ec51 0b19 	vmov	r0, r1, d9
 800b520:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b524:	f7f5 f9b2 	bl	800088c <__aeabi_ddiv>
 800b528:	f007 070f 	and.w	r7, r7, #15
 800b52c:	4682      	mov	sl, r0
 800b52e:	468b      	mov	fp, r1
 800b530:	2503      	movs	r5, #3
 800b532:	4eac      	ldr	r6, [pc, #688]	; (800b7e4 <_dtoa_r+0x61c>)
 800b534:	b957      	cbnz	r7, 800b54c <_dtoa_r+0x384>
 800b536:	4642      	mov	r2, r8
 800b538:	464b      	mov	r3, r9
 800b53a:	4650      	mov	r0, sl
 800b53c:	4659      	mov	r1, fp
 800b53e:	f7f5 f9a5 	bl	800088c <__aeabi_ddiv>
 800b542:	4682      	mov	sl, r0
 800b544:	468b      	mov	fp, r1
 800b546:	e028      	b.n	800b59a <_dtoa_r+0x3d2>
 800b548:	2502      	movs	r5, #2
 800b54a:	e7f2      	b.n	800b532 <_dtoa_r+0x36a>
 800b54c:	07f9      	lsls	r1, r7, #31
 800b54e:	d508      	bpl.n	800b562 <_dtoa_r+0x39a>
 800b550:	4640      	mov	r0, r8
 800b552:	4649      	mov	r1, r9
 800b554:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b558:	f7f5 f86e 	bl	8000638 <__aeabi_dmul>
 800b55c:	3501      	adds	r5, #1
 800b55e:	4680      	mov	r8, r0
 800b560:	4689      	mov	r9, r1
 800b562:	107f      	asrs	r7, r7, #1
 800b564:	3608      	adds	r6, #8
 800b566:	e7e5      	b.n	800b534 <_dtoa_r+0x36c>
 800b568:	f000 809b 	beq.w	800b6a2 <_dtoa_r+0x4da>
 800b56c:	9b00      	ldr	r3, [sp, #0]
 800b56e:	4f9d      	ldr	r7, [pc, #628]	; (800b7e4 <_dtoa_r+0x61c>)
 800b570:	425e      	negs	r6, r3
 800b572:	4b9b      	ldr	r3, [pc, #620]	; (800b7e0 <_dtoa_r+0x618>)
 800b574:	f006 020f 	and.w	r2, r6, #15
 800b578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	ec51 0b19 	vmov	r0, r1, d9
 800b584:	f7f5 f858 	bl	8000638 <__aeabi_dmul>
 800b588:	1136      	asrs	r6, r6, #4
 800b58a:	4682      	mov	sl, r0
 800b58c:	468b      	mov	fp, r1
 800b58e:	2300      	movs	r3, #0
 800b590:	2502      	movs	r5, #2
 800b592:	2e00      	cmp	r6, #0
 800b594:	d17a      	bne.n	800b68c <_dtoa_r+0x4c4>
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1d3      	bne.n	800b542 <_dtoa_r+0x37a>
 800b59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 8082 	beq.w	800b6a6 <_dtoa_r+0x4de>
 800b5a2:	4b91      	ldr	r3, [pc, #580]	; (800b7e8 <_dtoa_r+0x620>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4650      	mov	r0, sl
 800b5a8:	4659      	mov	r1, fp
 800b5aa:	f7f5 fab7 	bl	8000b1c <__aeabi_dcmplt>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d079      	beq.n	800b6a6 <_dtoa_r+0x4de>
 800b5b2:	9b03      	ldr	r3, [sp, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d076      	beq.n	800b6a6 <_dtoa_r+0x4de>
 800b5b8:	9b02      	ldr	r3, [sp, #8]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	dd36      	ble.n	800b62c <_dtoa_r+0x464>
 800b5be:	9b00      	ldr	r3, [sp, #0]
 800b5c0:	4650      	mov	r0, sl
 800b5c2:	4659      	mov	r1, fp
 800b5c4:	1e5f      	subs	r7, r3, #1
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	4b88      	ldr	r3, [pc, #544]	; (800b7ec <_dtoa_r+0x624>)
 800b5ca:	f7f5 f835 	bl	8000638 <__aeabi_dmul>
 800b5ce:	9e02      	ldr	r6, [sp, #8]
 800b5d0:	4682      	mov	sl, r0
 800b5d2:	468b      	mov	fp, r1
 800b5d4:	3501      	adds	r5, #1
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	f7f4 ffc4 	bl	8000564 <__aeabi_i2d>
 800b5dc:	4652      	mov	r2, sl
 800b5de:	465b      	mov	r3, fp
 800b5e0:	f7f5 f82a 	bl	8000638 <__aeabi_dmul>
 800b5e4:	4b82      	ldr	r3, [pc, #520]	; (800b7f0 <_dtoa_r+0x628>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f7f4 fe70 	bl	80002cc <__adddf3>
 800b5ec:	46d0      	mov	r8, sl
 800b5ee:	46d9      	mov	r9, fp
 800b5f0:	4682      	mov	sl, r0
 800b5f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b5f6:	2e00      	cmp	r6, #0
 800b5f8:	d158      	bne.n	800b6ac <_dtoa_r+0x4e4>
 800b5fa:	4b7e      	ldr	r3, [pc, #504]	; (800b7f4 <_dtoa_r+0x62c>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4640      	mov	r0, r8
 800b600:	4649      	mov	r1, r9
 800b602:	f7f4 fe61 	bl	80002c8 <__aeabi_dsub>
 800b606:	4652      	mov	r2, sl
 800b608:	465b      	mov	r3, fp
 800b60a:	4680      	mov	r8, r0
 800b60c:	4689      	mov	r9, r1
 800b60e:	f7f5 faa3 	bl	8000b58 <__aeabi_dcmpgt>
 800b612:	2800      	cmp	r0, #0
 800b614:	f040 8295 	bne.w	800bb42 <_dtoa_r+0x97a>
 800b618:	4652      	mov	r2, sl
 800b61a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b61e:	4640      	mov	r0, r8
 800b620:	4649      	mov	r1, r9
 800b622:	f7f5 fa7b 	bl	8000b1c <__aeabi_dcmplt>
 800b626:	2800      	cmp	r0, #0
 800b628:	f040 8289 	bne.w	800bb3e <_dtoa_r+0x976>
 800b62c:	ec5b ab19 	vmov	sl, fp, d9
 800b630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b632:	2b00      	cmp	r3, #0
 800b634:	f2c0 8148 	blt.w	800b8c8 <_dtoa_r+0x700>
 800b638:	9a00      	ldr	r2, [sp, #0]
 800b63a:	2a0e      	cmp	r2, #14
 800b63c:	f300 8144 	bgt.w	800b8c8 <_dtoa_r+0x700>
 800b640:	4b67      	ldr	r3, [pc, #412]	; (800b7e0 <_dtoa_r+0x618>)
 800b642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b646:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f280 80d5 	bge.w	800b7fc <_dtoa_r+0x634>
 800b652:	9b03      	ldr	r3, [sp, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	f300 80d1 	bgt.w	800b7fc <_dtoa_r+0x634>
 800b65a:	f040 826f 	bne.w	800bb3c <_dtoa_r+0x974>
 800b65e:	4b65      	ldr	r3, [pc, #404]	; (800b7f4 <_dtoa_r+0x62c>)
 800b660:	2200      	movs	r2, #0
 800b662:	4640      	mov	r0, r8
 800b664:	4649      	mov	r1, r9
 800b666:	f7f4 ffe7 	bl	8000638 <__aeabi_dmul>
 800b66a:	4652      	mov	r2, sl
 800b66c:	465b      	mov	r3, fp
 800b66e:	f7f5 fa69 	bl	8000b44 <__aeabi_dcmpge>
 800b672:	9e03      	ldr	r6, [sp, #12]
 800b674:	4637      	mov	r7, r6
 800b676:	2800      	cmp	r0, #0
 800b678:	f040 8245 	bne.w	800bb06 <_dtoa_r+0x93e>
 800b67c:	9d01      	ldr	r5, [sp, #4]
 800b67e:	2331      	movs	r3, #49	; 0x31
 800b680:	f805 3b01 	strb.w	r3, [r5], #1
 800b684:	9b00      	ldr	r3, [sp, #0]
 800b686:	3301      	adds	r3, #1
 800b688:	9300      	str	r3, [sp, #0]
 800b68a:	e240      	b.n	800bb0e <_dtoa_r+0x946>
 800b68c:	07f2      	lsls	r2, r6, #31
 800b68e:	d505      	bpl.n	800b69c <_dtoa_r+0x4d4>
 800b690:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b694:	f7f4 ffd0 	bl	8000638 <__aeabi_dmul>
 800b698:	3501      	adds	r5, #1
 800b69a:	2301      	movs	r3, #1
 800b69c:	1076      	asrs	r6, r6, #1
 800b69e:	3708      	adds	r7, #8
 800b6a0:	e777      	b.n	800b592 <_dtoa_r+0x3ca>
 800b6a2:	2502      	movs	r5, #2
 800b6a4:	e779      	b.n	800b59a <_dtoa_r+0x3d2>
 800b6a6:	9f00      	ldr	r7, [sp, #0]
 800b6a8:	9e03      	ldr	r6, [sp, #12]
 800b6aa:	e794      	b.n	800b5d6 <_dtoa_r+0x40e>
 800b6ac:	9901      	ldr	r1, [sp, #4]
 800b6ae:	4b4c      	ldr	r3, [pc, #304]	; (800b7e0 <_dtoa_r+0x618>)
 800b6b0:	4431      	add	r1, r6
 800b6b2:	910d      	str	r1, [sp, #52]	; 0x34
 800b6b4:	9908      	ldr	r1, [sp, #32]
 800b6b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b6ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6be:	2900      	cmp	r1, #0
 800b6c0:	d043      	beq.n	800b74a <_dtoa_r+0x582>
 800b6c2:	494d      	ldr	r1, [pc, #308]	; (800b7f8 <_dtoa_r+0x630>)
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	f7f5 f8e1 	bl	800088c <__aeabi_ddiv>
 800b6ca:	4652      	mov	r2, sl
 800b6cc:	465b      	mov	r3, fp
 800b6ce:	f7f4 fdfb 	bl	80002c8 <__aeabi_dsub>
 800b6d2:	9d01      	ldr	r5, [sp, #4]
 800b6d4:	4682      	mov	sl, r0
 800b6d6:	468b      	mov	fp, r1
 800b6d8:	4649      	mov	r1, r9
 800b6da:	4640      	mov	r0, r8
 800b6dc:	f7f5 fa46 	bl	8000b6c <__aeabi_d2iz>
 800b6e0:	4606      	mov	r6, r0
 800b6e2:	f7f4 ff3f 	bl	8000564 <__aeabi_i2d>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4640      	mov	r0, r8
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	f7f4 fdeb 	bl	80002c8 <__aeabi_dsub>
 800b6f2:	3630      	adds	r6, #48	; 0x30
 800b6f4:	f805 6b01 	strb.w	r6, [r5], #1
 800b6f8:	4652      	mov	r2, sl
 800b6fa:	465b      	mov	r3, fp
 800b6fc:	4680      	mov	r8, r0
 800b6fe:	4689      	mov	r9, r1
 800b700:	f7f5 fa0c 	bl	8000b1c <__aeabi_dcmplt>
 800b704:	2800      	cmp	r0, #0
 800b706:	d163      	bne.n	800b7d0 <_dtoa_r+0x608>
 800b708:	4642      	mov	r2, r8
 800b70a:	464b      	mov	r3, r9
 800b70c:	4936      	ldr	r1, [pc, #216]	; (800b7e8 <_dtoa_r+0x620>)
 800b70e:	2000      	movs	r0, #0
 800b710:	f7f4 fdda 	bl	80002c8 <__aeabi_dsub>
 800b714:	4652      	mov	r2, sl
 800b716:	465b      	mov	r3, fp
 800b718:	f7f5 fa00 	bl	8000b1c <__aeabi_dcmplt>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	f040 80b5 	bne.w	800b88c <_dtoa_r+0x6c4>
 800b722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b724:	429d      	cmp	r5, r3
 800b726:	d081      	beq.n	800b62c <_dtoa_r+0x464>
 800b728:	4b30      	ldr	r3, [pc, #192]	; (800b7ec <_dtoa_r+0x624>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	4650      	mov	r0, sl
 800b72e:	4659      	mov	r1, fp
 800b730:	f7f4 ff82 	bl	8000638 <__aeabi_dmul>
 800b734:	4b2d      	ldr	r3, [pc, #180]	; (800b7ec <_dtoa_r+0x624>)
 800b736:	4682      	mov	sl, r0
 800b738:	468b      	mov	fp, r1
 800b73a:	4640      	mov	r0, r8
 800b73c:	4649      	mov	r1, r9
 800b73e:	2200      	movs	r2, #0
 800b740:	f7f4 ff7a 	bl	8000638 <__aeabi_dmul>
 800b744:	4680      	mov	r8, r0
 800b746:	4689      	mov	r9, r1
 800b748:	e7c6      	b.n	800b6d8 <_dtoa_r+0x510>
 800b74a:	4650      	mov	r0, sl
 800b74c:	4659      	mov	r1, fp
 800b74e:	f7f4 ff73 	bl	8000638 <__aeabi_dmul>
 800b752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b754:	9d01      	ldr	r5, [sp, #4]
 800b756:	930f      	str	r3, [sp, #60]	; 0x3c
 800b758:	4682      	mov	sl, r0
 800b75a:	468b      	mov	fp, r1
 800b75c:	4649      	mov	r1, r9
 800b75e:	4640      	mov	r0, r8
 800b760:	f7f5 fa04 	bl	8000b6c <__aeabi_d2iz>
 800b764:	4606      	mov	r6, r0
 800b766:	f7f4 fefd 	bl	8000564 <__aeabi_i2d>
 800b76a:	3630      	adds	r6, #48	; 0x30
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	4640      	mov	r0, r8
 800b772:	4649      	mov	r1, r9
 800b774:	f7f4 fda8 	bl	80002c8 <__aeabi_dsub>
 800b778:	f805 6b01 	strb.w	r6, [r5], #1
 800b77c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b77e:	429d      	cmp	r5, r3
 800b780:	4680      	mov	r8, r0
 800b782:	4689      	mov	r9, r1
 800b784:	f04f 0200 	mov.w	r2, #0
 800b788:	d124      	bne.n	800b7d4 <_dtoa_r+0x60c>
 800b78a:	4b1b      	ldr	r3, [pc, #108]	; (800b7f8 <_dtoa_r+0x630>)
 800b78c:	4650      	mov	r0, sl
 800b78e:	4659      	mov	r1, fp
 800b790:	f7f4 fd9c 	bl	80002cc <__adddf3>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	4640      	mov	r0, r8
 800b79a:	4649      	mov	r1, r9
 800b79c:	f7f5 f9dc 	bl	8000b58 <__aeabi_dcmpgt>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d173      	bne.n	800b88c <_dtoa_r+0x6c4>
 800b7a4:	4652      	mov	r2, sl
 800b7a6:	465b      	mov	r3, fp
 800b7a8:	4913      	ldr	r1, [pc, #76]	; (800b7f8 <_dtoa_r+0x630>)
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	f7f4 fd8c 	bl	80002c8 <__aeabi_dsub>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	4649      	mov	r1, r9
 800b7b8:	f7f5 f9b0 	bl	8000b1c <__aeabi_dcmplt>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	f43f af35 	beq.w	800b62c <_dtoa_r+0x464>
 800b7c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b7c4:	1e6b      	subs	r3, r5, #1
 800b7c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b7cc:	2b30      	cmp	r3, #48	; 0x30
 800b7ce:	d0f8      	beq.n	800b7c2 <_dtoa_r+0x5fa>
 800b7d0:	9700      	str	r7, [sp, #0]
 800b7d2:	e049      	b.n	800b868 <_dtoa_r+0x6a0>
 800b7d4:	4b05      	ldr	r3, [pc, #20]	; (800b7ec <_dtoa_r+0x624>)
 800b7d6:	f7f4 ff2f 	bl	8000638 <__aeabi_dmul>
 800b7da:	4680      	mov	r8, r0
 800b7dc:	4689      	mov	r9, r1
 800b7de:	e7bd      	b.n	800b75c <_dtoa_r+0x594>
 800b7e0:	0800d320 	.word	0x0800d320
 800b7e4:	0800d2f8 	.word	0x0800d2f8
 800b7e8:	3ff00000 	.word	0x3ff00000
 800b7ec:	40240000 	.word	0x40240000
 800b7f0:	401c0000 	.word	0x401c0000
 800b7f4:	40140000 	.word	0x40140000
 800b7f8:	3fe00000 	.word	0x3fe00000
 800b7fc:	9d01      	ldr	r5, [sp, #4]
 800b7fe:	4656      	mov	r6, sl
 800b800:	465f      	mov	r7, fp
 800b802:	4642      	mov	r2, r8
 800b804:	464b      	mov	r3, r9
 800b806:	4630      	mov	r0, r6
 800b808:	4639      	mov	r1, r7
 800b80a:	f7f5 f83f 	bl	800088c <__aeabi_ddiv>
 800b80e:	f7f5 f9ad 	bl	8000b6c <__aeabi_d2iz>
 800b812:	4682      	mov	sl, r0
 800b814:	f7f4 fea6 	bl	8000564 <__aeabi_i2d>
 800b818:	4642      	mov	r2, r8
 800b81a:	464b      	mov	r3, r9
 800b81c:	f7f4 ff0c 	bl	8000638 <__aeabi_dmul>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	4630      	mov	r0, r6
 800b826:	4639      	mov	r1, r7
 800b828:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b82c:	f7f4 fd4c 	bl	80002c8 <__aeabi_dsub>
 800b830:	f805 6b01 	strb.w	r6, [r5], #1
 800b834:	9e01      	ldr	r6, [sp, #4]
 800b836:	9f03      	ldr	r7, [sp, #12]
 800b838:	1bae      	subs	r6, r5, r6
 800b83a:	42b7      	cmp	r7, r6
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	d135      	bne.n	800b8ae <_dtoa_r+0x6e6>
 800b842:	f7f4 fd43 	bl	80002cc <__adddf3>
 800b846:	4642      	mov	r2, r8
 800b848:	464b      	mov	r3, r9
 800b84a:	4606      	mov	r6, r0
 800b84c:	460f      	mov	r7, r1
 800b84e:	f7f5 f983 	bl	8000b58 <__aeabi_dcmpgt>
 800b852:	b9d0      	cbnz	r0, 800b88a <_dtoa_r+0x6c2>
 800b854:	4642      	mov	r2, r8
 800b856:	464b      	mov	r3, r9
 800b858:	4630      	mov	r0, r6
 800b85a:	4639      	mov	r1, r7
 800b85c:	f7f5 f954 	bl	8000b08 <__aeabi_dcmpeq>
 800b860:	b110      	cbz	r0, 800b868 <_dtoa_r+0x6a0>
 800b862:	f01a 0f01 	tst.w	sl, #1
 800b866:	d110      	bne.n	800b88a <_dtoa_r+0x6c2>
 800b868:	4620      	mov	r0, r4
 800b86a:	ee18 1a10 	vmov	r1, s16
 800b86e:	f7fe fce1 	bl	800a234 <_Bfree>
 800b872:	2300      	movs	r3, #0
 800b874:	9800      	ldr	r0, [sp, #0]
 800b876:	702b      	strb	r3, [r5, #0]
 800b878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b87a:	3001      	adds	r0, #1
 800b87c:	6018      	str	r0, [r3, #0]
 800b87e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b880:	2b00      	cmp	r3, #0
 800b882:	f43f acf1 	beq.w	800b268 <_dtoa_r+0xa0>
 800b886:	601d      	str	r5, [r3, #0]
 800b888:	e4ee      	b.n	800b268 <_dtoa_r+0xa0>
 800b88a:	9f00      	ldr	r7, [sp, #0]
 800b88c:	462b      	mov	r3, r5
 800b88e:	461d      	mov	r5, r3
 800b890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b894:	2a39      	cmp	r2, #57	; 0x39
 800b896:	d106      	bne.n	800b8a6 <_dtoa_r+0x6de>
 800b898:	9a01      	ldr	r2, [sp, #4]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d1f7      	bne.n	800b88e <_dtoa_r+0x6c6>
 800b89e:	9901      	ldr	r1, [sp, #4]
 800b8a0:	2230      	movs	r2, #48	; 0x30
 800b8a2:	3701      	adds	r7, #1
 800b8a4:	700a      	strb	r2, [r1, #0]
 800b8a6:	781a      	ldrb	r2, [r3, #0]
 800b8a8:	3201      	adds	r2, #1
 800b8aa:	701a      	strb	r2, [r3, #0]
 800b8ac:	e790      	b.n	800b7d0 <_dtoa_r+0x608>
 800b8ae:	4ba6      	ldr	r3, [pc, #664]	; (800bb48 <_dtoa_r+0x980>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f7f4 fec1 	bl	8000638 <__aeabi_dmul>
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	460f      	mov	r7, r1
 800b8be:	f7f5 f923 	bl	8000b08 <__aeabi_dcmpeq>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d09d      	beq.n	800b802 <_dtoa_r+0x63a>
 800b8c6:	e7cf      	b.n	800b868 <_dtoa_r+0x6a0>
 800b8c8:	9a08      	ldr	r2, [sp, #32]
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	f000 80d7 	beq.w	800ba7e <_dtoa_r+0x8b6>
 800b8d0:	9a06      	ldr	r2, [sp, #24]
 800b8d2:	2a01      	cmp	r2, #1
 800b8d4:	f300 80ba 	bgt.w	800ba4c <_dtoa_r+0x884>
 800b8d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8da:	2a00      	cmp	r2, #0
 800b8dc:	f000 80b2 	beq.w	800ba44 <_dtoa_r+0x87c>
 800b8e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b8e4:	9e07      	ldr	r6, [sp, #28]
 800b8e6:	9d04      	ldr	r5, [sp, #16]
 800b8e8:	9a04      	ldr	r2, [sp, #16]
 800b8ea:	441a      	add	r2, r3
 800b8ec:	9204      	str	r2, [sp, #16]
 800b8ee:	9a05      	ldr	r2, [sp, #20]
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	441a      	add	r2, r3
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	9205      	str	r2, [sp, #20]
 800b8f8:	f7fe fd9e 	bl	800a438 <__i2b>
 800b8fc:	4607      	mov	r7, r0
 800b8fe:	2d00      	cmp	r5, #0
 800b900:	dd0c      	ble.n	800b91c <_dtoa_r+0x754>
 800b902:	9b05      	ldr	r3, [sp, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	dd09      	ble.n	800b91c <_dtoa_r+0x754>
 800b908:	42ab      	cmp	r3, r5
 800b90a:	9a04      	ldr	r2, [sp, #16]
 800b90c:	bfa8      	it	ge
 800b90e:	462b      	movge	r3, r5
 800b910:	1ad2      	subs	r2, r2, r3
 800b912:	9204      	str	r2, [sp, #16]
 800b914:	9a05      	ldr	r2, [sp, #20]
 800b916:	1aed      	subs	r5, r5, r3
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	9305      	str	r3, [sp, #20]
 800b91c:	9b07      	ldr	r3, [sp, #28]
 800b91e:	b31b      	cbz	r3, 800b968 <_dtoa_r+0x7a0>
 800b920:	9b08      	ldr	r3, [sp, #32]
 800b922:	2b00      	cmp	r3, #0
 800b924:	f000 80af 	beq.w	800ba86 <_dtoa_r+0x8be>
 800b928:	2e00      	cmp	r6, #0
 800b92a:	dd13      	ble.n	800b954 <_dtoa_r+0x78c>
 800b92c:	4639      	mov	r1, r7
 800b92e:	4632      	mov	r2, r6
 800b930:	4620      	mov	r0, r4
 800b932:	f7fe fe41 	bl	800a5b8 <__pow5mult>
 800b936:	ee18 2a10 	vmov	r2, s16
 800b93a:	4601      	mov	r1, r0
 800b93c:	4607      	mov	r7, r0
 800b93e:	4620      	mov	r0, r4
 800b940:	f7fe fd90 	bl	800a464 <__multiply>
 800b944:	ee18 1a10 	vmov	r1, s16
 800b948:	4680      	mov	r8, r0
 800b94a:	4620      	mov	r0, r4
 800b94c:	f7fe fc72 	bl	800a234 <_Bfree>
 800b950:	ee08 8a10 	vmov	s16, r8
 800b954:	9b07      	ldr	r3, [sp, #28]
 800b956:	1b9a      	subs	r2, r3, r6
 800b958:	d006      	beq.n	800b968 <_dtoa_r+0x7a0>
 800b95a:	ee18 1a10 	vmov	r1, s16
 800b95e:	4620      	mov	r0, r4
 800b960:	f7fe fe2a 	bl	800a5b8 <__pow5mult>
 800b964:	ee08 0a10 	vmov	s16, r0
 800b968:	2101      	movs	r1, #1
 800b96a:	4620      	mov	r0, r4
 800b96c:	f7fe fd64 	bl	800a438 <__i2b>
 800b970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b972:	2b00      	cmp	r3, #0
 800b974:	4606      	mov	r6, r0
 800b976:	f340 8088 	ble.w	800ba8a <_dtoa_r+0x8c2>
 800b97a:	461a      	mov	r2, r3
 800b97c:	4601      	mov	r1, r0
 800b97e:	4620      	mov	r0, r4
 800b980:	f7fe fe1a 	bl	800a5b8 <__pow5mult>
 800b984:	9b06      	ldr	r3, [sp, #24]
 800b986:	2b01      	cmp	r3, #1
 800b988:	4606      	mov	r6, r0
 800b98a:	f340 8081 	ble.w	800ba90 <_dtoa_r+0x8c8>
 800b98e:	f04f 0800 	mov.w	r8, #0
 800b992:	6933      	ldr	r3, [r6, #16]
 800b994:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b998:	6918      	ldr	r0, [r3, #16]
 800b99a:	f7fe fcfd 	bl	800a398 <__hi0bits>
 800b99e:	f1c0 0020 	rsb	r0, r0, #32
 800b9a2:	9b05      	ldr	r3, [sp, #20]
 800b9a4:	4418      	add	r0, r3
 800b9a6:	f010 001f 	ands.w	r0, r0, #31
 800b9aa:	f000 8092 	beq.w	800bad2 <_dtoa_r+0x90a>
 800b9ae:	f1c0 0320 	rsb	r3, r0, #32
 800b9b2:	2b04      	cmp	r3, #4
 800b9b4:	f340 808a 	ble.w	800bacc <_dtoa_r+0x904>
 800b9b8:	f1c0 001c 	rsb	r0, r0, #28
 800b9bc:	9b04      	ldr	r3, [sp, #16]
 800b9be:	4403      	add	r3, r0
 800b9c0:	9304      	str	r3, [sp, #16]
 800b9c2:	9b05      	ldr	r3, [sp, #20]
 800b9c4:	4403      	add	r3, r0
 800b9c6:	4405      	add	r5, r0
 800b9c8:	9305      	str	r3, [sp, #20]
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	dd07      	ble.n	800b9e0 <_dtoa_r+0x818>
 800b9d0:	ee18 1a10 	vmov	r1, s16
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f7fe fe48 	bl	800a66c <__lshift>
 800b9dc:	ee08 0a10 	vmov	s16, r0
 800b9e0:	9b05      	ldr	r3, [sp, #20]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	dd05      	ble.n	800b9f2 <_dtoa_r+0x82a>
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f7fe fe3e 	bl	800a66c <__lshift>
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d06e      	beq.n	800bad6 <_dtoa_r+0x90e>
 800b9f8:	ee18 0a10 	vmov	r0, s16
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	f7fe fea5 	bl	800a74c <__mcmp>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	da67      	bge.n	800bad6 <_dtoa_r+0x90e>
 800ba06:	9b00      	ldr	r3, [sp, #0]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	ee18 1a10 	vmov	r1, s16
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	220a      	movs	r2, #10
 800ba12:	2300      	movs	r3, #0
 800ba14:	4620      	mov	r0, r4
 800ba16:	f7fe fc2f 	bl	800a278 <__multadd>
 800ba1a:	9b08      	ldr	r3, [sp, #32]
 800ba1c:	ee08 0a10 	vmov	s16, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f000 81b1 	beq.w	800bd88 <_dtoa_r+0xbc0>
 800ba26:	2300      	movs	r3, #0
 800ba28:	4639      	mov	r1, r7
 800ba2a:	220a      	movs	r2, #10
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7fe fc23 	bl	800a278 <__multadd>
 800ba32:	9b02      	ldr	r3, [sp, #8]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	4607      	mov	r7, r0
 800ba38:	f300 808e 	bgt.w	800bb58 <_dtoa_r+0x990>
 800ba3c:	9b06      	ldr	r3, [sp, #24]
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	dc51      	bgt.n	800bae6 <_dtoa_r+0x91e>
 800ba42:	e089      	b.n	800bb58 <_dtoa_r+0x990>
 800ba44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba4a:	e74b      	b.n	800b8e4 <_dtoa_r+0x71c>
 800ba4c:	9b03      	ldr	r3, [sp, #12]
 800ba4e:	1e5e      	subs	r6, r3, #1
 800ba50:	9b07      	ldr	r3, [sp, #28]
 800ba52:	42b3      	cmp	r3, r6
 800ba54:	bfbf      	itttt	lt
 800ba56:	9b07      	ldrlt	r3, [sp, #28]
 800ba58:	9607      	strlt	r6, [sp, #28]
 800ba5a:	1af2      	sublt	r2, r6, r3
 800ba5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ba5e:	bfb6      	itet	lt
 800ba60:	189b      	addlt	r3, r3, r2
 800ba62:	1b9e      	subge	r6, r3, r6
 800ba64:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ba66:	9b03      	ldr	r3, [sp, #12]
 800ba68:	bfb8      	it	lt
 800ba6a:	2600      	movlt	r6, #0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	bfb7      	itett	lt
 800ba70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ba74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ba78:	1a9d      	sublt	r5, r3, r2
 800ba7a:	2300      	movlt	r3, #0
 800ba7c:	e734      	b.n	800b8e8 <_dtoa_r+0x720>
 800ba7e:	9e07      	ldr	r6, [sp, #28]
 800ba80:	9d04      	ldr	r5, [sp, #16]
 800ba82:	9f08      	ldr	r7, [sp, #32]
 800ba84:	e73b      	b.n	800b8fe <_dtoa_r+0x736>
 800ba86:	9a07      	ldr	r2, [sp, #28]
 800ba88:	e767      	b.n	800b95a <_dtoa_r+0x792>
 800ba8a:	9b06      	ldr	r3, [sp, #24]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	dc18      	bgt.n	800bac2 <_dtoa_r+0x8fa>
 800ba90:	f1ba 0f00 	cmp.w	sl, #0
 800ba94:	d115      	bne.n	800bac2 <_dtoa_r+0x8fa>
 800ba96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba9a:	b993      	cbnz	r3, 800bac2 <_dtoa_r+0x8fa>
 800ba9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800baa0:	0d1b      	lsrs	r3, r3, #20
 800baa2:	051b      	lsls	r3, r3, #20
 800baa4:	b183      	cbz	r3, 800bac8 <_dtoa_r+0x900>
 800baa6:	9b04      	ldr	r3, [sp, #16]
 800baa8:	3301      	adds	r3, #1
 800baaa:	9304      	str	r3, [sp, #16]
 800baac:	9b05      	ldr	r3, [sp, #20]
 800baae:	3301      	adds	r3, #1
 800bab0:	9305      	str	r3, [sp, #20]
 800bab2:	f04f 0801 	mov.w	r8, #1
 800bab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f47f af6a 	bne.w	800b992 <_dtoa_r+0x7ca>
 800babe:	2001      	movs	r0, #1
 800bac0:	e76f      	b.n	800b9a2 <_dtoa_r+0x7da>
 800bac2:	f04f 0800 	mov.w	r8, #0
 800bac6:	e7f6      	b.n	800bab6 <_dtoa_r+0x8ee>
 800bac8:	4698      	mov	r8, r3
 800baca:	e7f4      	b.n	800bab6 <_dtoa_r+0x8ee>
 800bacc:	f43f af7d 	beq.w	800b9ca <_dtoa_r+0x802>
 800bad0:	4618      	mov	r0, r3
 800bad2:	301c      	adds	r0, #28
 800bad4:	e772      	b.n	800b9bc <_dtoa_r+0x7f4>
 800bad6:	9b03      	ldr	r3, [sp, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	dc37      	bgt.n	800bb4c <_dtoa_r+0x984>
 800badc:	9b06      	ldr	r3, [sp, #24]
 800bade:	2b02      	cmp	r3, #2
 800bae0:	dd34      	ble.n	800bb4c <_dtoa_r+0x984>
 800bae2:	9b03      	ldr	r3, [sp, #12]
 800bae4:	9302      	str	r3, [sp, #8]
 800bae6:	9b02      	ldr	r3, [sp, #8]
 800bae8:	b96b      	cbnz	r3, 800bb06 <_dtoa_r+0x93e>
 800baea:	4631      	mov	r1, r6
 800baec:	2205      	movs	r2, #5
 800baee:	4620      	mov	r0, r4
 800baf0:	f7fe fbc2 	bl	800a278 <__multadd>
 800baf4:	4601      	mov	r1, r0
 800baf6:	4606      	mov	r6, r0
 800baf8:	ee18 0a10 	vmov	r0, s16
 800bafc:	f7fe fe26 	bl	800a74c <__mcmp>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	f73f adbb 	bgt.w	800b67c <_dtoa_r+0x4b4>
 800bb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb08:	9d01      	ldr	r5, [sp, #4]
 800bb0a:	43db      	mvns	r3, r3
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	f04f 0800 	mov.w	r8, #0
 800bb12:	4631      	mov	r1, r6
 800bb14:	4620      	mov	r0, r4
 800bb16:	f7fe fb8d 	bl	800a234 <_Bfree>
 800bb1a:	2f00      	cmp	r7, #0
 800bb1c:	f43f aea4 	beq.w	800b868 <_dtoa_r+0x6a0>
 800bb20:	f1b8 0f00 	cmp.w	r8, #0
 800bb24:	d005      	beq.n	800bb32 <_dtoa_r+0x96a>
 800bb26:	45b8      	cmp	r8, r7
 800bb28:	d003      	beq.n	800bb32 <_dtoa_r+0x96a>
 800bb2a:	4641      	mov	r1, r8
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f7fe fb81 	bl	800a234 <_Bfree>
 800bb32:	4639      	mov	r1, r7
 800bb34:	4620      	mov	r0, r4
 800bb36:	f7fe fb7d 	bl	800a234 <_Bfree>
 800bb3a:	e695      	b.n	800b868 <_dtoa_r+0x6a0>
 800bb3c:	2600      	movs	r6, #0
 800bb3e:	4637      	mov	r7, r6
 800bb40:	e7e1      	b.n	800bb06 <_dtoa_r+0x93e>
 800bb42:	9700      	str	r7, [sp, #0]
 800bb44:	4637      	mov	r7, r6
 800bb46:	e599      	b.n	800b67c <_dtoa_r+0x4b4>
 800bb48:	40240000 	.word	0x40240000
 800bb4c:	9b08      	ldr	r3, [sp, #32]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f000 80ca 	beq.w	800bce8 <_dtoa_r+0xb20>
 800bb54:	9b03      	ldr	r3, [sp, #12]
 800bb56:	9302      	str	r3, [sp, #8]
 800bb58:	2d00      	cmp	r5, #0
 800bb5a:	dd05      	ble.n	800bb68 <_dtoa_r+0x9a0>
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	462a      	mov	r2, r5
 800bb60:	4620      	mov	r0, r4
 800bb62:	f7fe fd83 	bl	800a66c <__lshift>
 800bb66:	4607      	mov	r7, r0
 800bb68:	f1b8 0f00 	cmp.w	r8, #0
 800bb6c:	d05b      	beq.n	800bc26 <_dtoa_r+0xa5e>
 800bb6e:	6879      	ldr	r1, [r7, #4]
 800bb70:	4620      	mov	r0, r4
 800bb72:	f7fe fb1f 	bl	800a1b4 <_Balloc>
 800bb76:	4605      	mov	r5, r0
 800bb78:	b928      	cbnz	r0, 800bb86 <_dtoa_r+0x9be>
 800bb7a:	4b87      	ldr	r3, [pc, #540]	; (800bd98 <_dtoa_r+0xbd0>)
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bb82:	f7ff bb3b 	b.w	800b1fc <_dtoa_r+0x34>
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	3202      	adds	r2, #2
 800bb8a:	0092      	lsls	r2, r2, #2
 800bb8c:	f107 010c 	add.w	r1, r7, #12
 800bb90:	300c      	adds	r0, #12
 800bb92:	f7fc fffd 	bl	8008b90 <memcpy>
 800bb96:	2201      	movs	r2, #1
 800bb98:	4629      	mov	r1, r5
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f7fe fd66 	bl	800a66c <__lshift>
 800bba0:	9b01      	ldr	r3, [sp, #4]
 800bba2:	f103 0901 	add.w	r9, r3, #1
 800bba6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bbaa:	4413      	add	r3, r2
 800bbac:	9305      	str	r3, [sp, #20]
 800bbae:	f00a 0301 	and.w	r3, sl, #1
 800bbb2:	46b8      	mov	r8, r7
 800bbb4:	9304      	str	r3, [sp, #16]
 800bbb6:	4607      	mov	r7, r0
 800bbb8:	4631      	mov	r1, r6
 800bbba:	ee18 0a10 	vmov	r0, s16
 800bbbe:	f7ff fa77 	bl	800b0b0 <quorem>
 800bbc2:	4641      	mov	r1, r8
 800bbc4:	9002      	str	r0, [sp, #8]
 800bbc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bbca:	ee18 0a10 	vmov	r0, s16
 800bbce:	f7fe fdbd 	bl	800a74c <__mcmp>
 800bbd2:	463a      	mov	r2, r7
 800bbd4:	9003      	str	r0, [sp, #12]
 800bbd6:	4631      	mov	r1, r6
 800bbd8:	4620      	mov	r0, r4
 800bbda:	f7fe fdd3 	bl	800a784 <__mdiff>
 800bbde:	68c2      	ldr	r2, [r0, #12]
 800bbe0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	bb02      	cbnz	r2, 800bc2a <_dtoa_r+0xa62>
 800bbe8:	4601      	mov	r1, r0
 800bbea:	ee18 0a10 	vmov	r0, s16
 800bbee:	f7fe fdad 	bl	800a74c <__mcmp>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	9207      	str	r2, [sp, #28]
 800bbfa:	f7fe fb1b 	bl	800a234 <_Bfree>
 800bbfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bc02:	ea43 0102 	orr.w	r1, r3, r2
 800bc06:	9b04      	ldr	r3, [sp, #16]
 800bc08:	430b      	orrs	r3, r1
 800bc0a:	464d      	mov	r5, r9
 800bc0c:	d10f      	bne.n	800bc2e <_dtoa_r+0xa66>
 800bc0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc12:	d02a      	beq.n	800bc6a <_dtoa_r+0xaa2>
 800bc14:	9b03      	ldr	r3, [sp, #12]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	dd02      	ble.n	800bc20 <_dtoa_r+0xa58>
 800bc1a:	9b02      	ldr	r3, [sp, #8]
 800bc1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bc20:	f88b a000 	strb.w	sl, [fp]
 800bc24:	e775      	b.n	800bb12 <_dtoa_r+0x94a>
 800bc26:	4638      	mov	r0, r7
 800bc28:	e7ba      	b.n	800bba0 <_dtoa_r+0x9d8>
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	e7e2      	b.n	800bbf4 <_dtoa_r+0xa2c>
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	db04      	blt.n	800bc3e <_dtoa_r+0xa76>
 800bc34:	9906      	ldr	r1, [sp, #24]
 800bc36:	430b      	orrs	r3, r1
 800bc38:	9904      	ldr	r1, [sp, #16]
 800bc3a:	430b      	orrs	r3, r1
 800bc3c:	d122      	bne.n	800bc84 <_dtoa_r+0xabc>
 800bc3e:	2a00      	cmp	r2, #0
 800bc40:	ddee      	ble.n	800bc20 <_dtoa_r+0xa58>
 800bc42:	ee18 1a10 	vmov	r1, s16
 800bc46:	2201      	movs	r2, #1
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f7fe fd0f 	bl	800a66c <__lshift>
 800bc4e:	4631      	mov	r1, r6
 800bc50:	ee08 0a10 	vmov	s16, r0
 800bc54:	f7fe fd7a 	bl	800a74c <__mcmp>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	dc03      	bgt.n	800bc64 <_dtoa_r+0xa9c>
 800bc5c:	d1e0      	bne.n	800bc20 <_dtoa_r+0xa58>
 800bc5e:	f01a 0f01 	tst.w	sl, #1
 800bc62:	d0dd      	beq.n	800bc20 <_dtoa_r+0xa58>
 800bc64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc68:	d1d7      	bne.n	800bc1a <_dtoa_r+0xa52>
 800bc6a:	2339      	movs	r3, #57	; 0x39
 800bc6c:	f88b 3000 	strb.w	r3, [fp]
 800bc70:	462b      	mov	r3, r5
 800bc72:	461d      	mov	r5, r3
 800bc74:	3b01      	subs	r3, #1
 800bc76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bc7a:	2a39      	cmp	r2, #57	; 0x39
 800bc7c:	d071      	beq.n	800bd62 <_dtoa_r+0xb9a>
 800bc7e:	3201      	adds	r2, #1
 800bc80:	701a      	strb	r2, [r3, #0]
 800bc82:	e746      	b.n	800bb12 <_dtoa_r+0x94a>
 800bc84:	2a00      	cmp	r2, #0
 800bc86:	dd07      	ble.n	800bc98 <_dtoa_r+0xad0>
 800bc88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc8c:	d0ed      	beq.n	800bc6a <_dtoa_r+0xaa2>
 800bc8e:	f10a 0301 	add.w	r3, sl, #1
 800bc92:	f88b 3000 	strb.w	r3, [fp]
 800bc96:	e73c      	b.n	800bb12 <_dtoa_r+0x94a>
 800bc98:	9b05      	ldr	r3, [sp, #20]
 800bc9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bc9e:	4599      	cmp	r9, r3
 800bca0:	d047      	beq.n	800bd32 <_dtoa_r+0xb6a>
 800bca2:	ee18 1a10 	vmov	r1, s16
 800bca6:	2300      	movs	r3, #0
 800bca8:	220a      	movs	r2, #10
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f7fe fae4 	bl	800a278 <__multadd>
 800bcb0:	45b8      	cmp	r8, r7
 800bcb2:	ee08 0a10 	vmov	s16, r0
 800bcb6:	f04f 0300 	mov.w	r3, #0
 800bcba:	f04f 020a 	mov.w	r2, #10
 800bcbe:	4641      	mov	r1, r8
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	d106      	bne.n	800bcd2 <_dtoa_r+0xb0a>
 800bcc4:	f7fe fad8 	bl	800a278 <__multadd>
 800bcc8:	4680      	mov	r8, r0
 800bcca:	4607      	mov	r7, r0
 800bccc:	f109 0901 	add.w	r9, r9, #1
 800bcd0:	e772      	b.n	800bbb8 <_dtoa_r+0x9f0>
 800bcd2:	f7fe fad1 	bl	800a278 <__multadd>
 800bcd6:	4639      	mov	r1, r7
 800bcd8:	4680      	mov	r8, r0
 800bcda:	2300      	movs	r3, #0
 800bcdc:	220a      	movs	r2, #10
 800bcde:	4620      	mov	r0, r4
 800bce0:	f7fe faca 	bl	800a278 <__multadd>
 800bce4:	4607      	mov	r7, r0
 800bce6:	e7f1      	b.n	800bccc <_dtoa_r+0xb04>
 800bce8:	9b03      	ldr	r3, [sp, #12]
 800bcea:	9302      	str	r3, [sp, #8]
 800bcec:	9d01      	ldr	r5, [sp, #4]
 800bcee:	ee18 0a10 	vmov	r0, s16
 800bcf2:	4631      	mov	r1, r6
 800bcf4:	f7ff f9dc 	bl	800b0b0 <quorem>
 800bcf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	f805 ab01 	strb.w	sl, [r5], #1
 800bd02:	1aea      	subs	r2, r5, r3
 800bd04:	9b02      	ldr	r3, [sp, #8]
 800bd06:	4293      	cmp	r3, r2
 800bd08:	dd09      	ble.n	800bd1e <_dtoa_r+0xb56>
 800bd0a:	ee18 1a10 	vmov	r1, s16
 800bd0e:	2300      	movs	r3, #0
 800bd10:	220a      	movs	r2, #10
 800bd12:	4620      	mov	r0, r4
 800bd14:	f7fe fab0 	bl	800a278 <__multadd>
 800bd18:	ee08 0a10 	vmov	s16, r0
 800bd1c:	e7e7      	b.n	800bcee <_dtoa_r+0xb26>
 800bd1e:	9b02      	ldr	r3, [sp, #8]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	bfc8      	it	gt
 800bd24:	461d      	movgt	r5, r3
 800bd26:	9b01      	ldr	r3, [sp, #4]
 800bd28:	bfd8      	it	le
 800bd2a:	2501      	movle	r5, #1
 800bd2c:	441d      	add	r5, r3
 800bd2e:	f04f 0800 	mov.w	r8, #0
 800bd32:	ee18 1a10 	vmov	r1, s16
 800bd36:	2201      	movs	r2, #1
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f7fe fc97 	bl	800a66c <__lshift>
 800bd3e:	4631      	mov	r1, r6
 800bd40:	ee08 0a10 	vmov	s16, r0
 800bd44:	f7fe fd02 	bl	800a74c <__mcmp>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	dc91      	bgt.n	800bc70 <_dtoa_r+0xaa8>
 800bd4c:	d102      	bne.n	800bd54 <_dtoa_r+0xb8c>
 800bd4e:	f01a 0f01 	tst.w	sl, #1
 800bd52:	d18d      	bne.n	800bc70 <_dtoa_r+0xaa8>
 800bd54:	462b      	mov	r3, r5
 800bd56:	461d      	mov	r5, r3
 800bd58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd5c:	2a30      	cmp	r2, #48	; 0x30
 800bd5e:	d0fa      	beq.n	800bd56 <_dtoa_r+0xb8e>
 800bd60:	e6d7      	b.n	800bb12 <_dtoa_r+0x94a>
 800bd62:	9a01      	ldr	r2, [sp, #4]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d184      	bne.n	800bc72 <_dtoa_r+0xaaa>
 800bd68:	9b00      	ldr	r3, [sp, #0]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	2331      	movs	r3, #49	; 0x31
 800bd70:	7013      	strb	r3, [r2, #0]
 800bd72:	e6ce      	b.n	800bb12 <_dtoa_r+0x94a>
 800bd74:	4b09      	ldr	r3, [pc, #36]	; (800bd9c <_dtoa_r+0xbd4>)
 800bd76:	f7ff ba95 	b.w	800b2a4 <_dtoa_r+0xdc>
 800bd7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f47f aa6e 	bne.w	800b25e <_dtoa_r+0x96>
 800bd82:	4b07      	ldr	r3, [pc, #28]	; (800bda0 <_dtoa_r+0xbd8>)
 800bd84:	f7ff ba8e 	b.w	800b2a4 <_dtoa_r+0xdc>
 800bd88:	9b02      	ldr	r3, [sp, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	dcae      	bgt.n	800bcec <_dtoa_r+0xb24>
 800bd8e:	9b06      	ldr	r3, [sp, #24]
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	f73f aea8 	bgt.w	800bae6 <_dtoa_r+0x91e>
 800bd96:	e7a9      	b.n	800bcec <_dtoa_r+0xb24>
 800bd98:	0800d1f8 	.word	0x0800d1f8
 800bd9c:	0800d560 	.word	0x0800d560
 800bda0:	0800d553 	.word	0x0800d553

0800bda4 <fiprintf>:
 800bda4:	b40e      	push	{r1, r2, r3}
 800bda6:	b503      	push	{r0, r1, lr}
 800bda8:	4601      	mov	r1, r0
 800bdaa:	ab03      	add	r3, sp, #12
 800bdac:	4805      	ldr	r0, [pc, #20]	; (800bdc4 <fiprintf+0x20>)
 800bdae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb2:	6800      	ldr	r0, [r0, #0]
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	f000 f891 	bl	800bedc <_vfiprintf_r>
 800bdba:	b002      	add	sp, #8
 800bdbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdc0:	b003      	add	sp, #12
 800bdc2:	4770      	bx	lr
 800bdc4:	2000001c 	.word	0x2000001c

0800bdc8 <malloc>:
 800bdc8:	4b02      	ldr	r3, [pc, #8]	; (800bdd4 <malloc+0xc>)
 800bdca:	4601      	mov	r1, r0
 800bdcc:	6818      	ldr	r0, [r3, #0]
 800bdce:	f7fe bf07 	b.w	800abe0 <_malloc_r>
 800bdd2:	bf00      	nop
 800bdd4:	2000001c 	.word	0x2000001c

0800bdd8 <__malloc_lock>:
 800bdd8:	4801      	ldr	r0, [pc, #4]	; (800bde0 <__malloc_lock+0x8>)
 800bdda:	f000 bc2f 	b.w	800c63c <__retarget_lock_acquire_recursive>
 800bdde:	bf00      	nop
 800bde0:	200009a0 	.word	0x200009a0

0800bde4 <__malloc_unlock>:
 800bde4:	4801      	ldr	r0, [pc, #4]	; (800bdec <__malloc_unlock+0x8>)
 800bde6:	f000 bc2a 	b.w	800c63e <__retarget_lock_release_recursive>
 800bdea:	bf00      	nop
 800bdec:	200009a0 	.word	0x200009a0

0800bdf0 <_free_r>:
 800bdf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdf2:	2900      	cmp	r1, #0
 800bdf4:	d044      	beq.n	800be80 <_free_r+0x90>
 800bdf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdfa:	9001      	str	r0, [sp, #4]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f1a1 0404 	sub.w	r4, r1, #4
 800be02:	bfb8      	it	lt
 800be04:	18e4      	addlt	r4, r4, r3
 800be06:	f7ff ffe7 	bl	800bdd8 <__malloc_lock>
 800be0a:	4a1e      	ldr	r2, [pc, #120]	; (800be84 <_free_r+0x94>)
 800be0c:	9801      	ldr	r0, [sp, #4]
 800be0e:	6813      	ldr	r3, [r2, #0]
 800be10:	b933      	cbnz	r3, 800be20 <_free_r+0x30>
 800be12:	6063      	str	r3, [r4, #4]
 800be14:	6014      	str	r4, [r2, #0]
 800be16:	b003      	add	sp, #12
 800be18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be1c:	f7ff bfe2 	b.w	800bde4 <__malloc_unlock>
 800be20:	42a3      	cmp	r3, r4
 800be22:	d908      	bls.n	800be36 <_free_r+0x46>
 800be24:	6825      	ldr	r5, [r4, #0]
 800be26:	1961      	adds	r1, r4, r5
 800be28:	428b      	cmp	r3, r1
 800be2a:	bf01      	itttt	eq
 800be2c:	6819      	ldreq	r1, [r3, #0]
 800be2e:	685b      	ldreq	r3, [r3, #4]
 800be30:	1949      	addeq	r1, r1, r5
 800be32:	6021      	streq	r1, [r4, #0]
 800be34:	e7ed      	b.n	800be12 <_free_r+0x22>
 800be36:	461a      	mov	r2, r3
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	b10b      	cbz	r3, 800be40 <_free_r+0x50>
 800be3c:	42a3      	cmp	r3, r4
 800be3e:	d9fa      	bls.n	800be36 <_free_r+0x46>
 800be40:	6811      	ldr	r1, [r2, #0]
 800be42:	1855      	adds	r5, r2, r1
 800be44:	42a5      	cmp	r5, r4
 800be46:	d10b      	bne.n	800be60 <_free_r+0x70>
 800be48:	6824      	ldr	r4, [r4, #0]
 800be4a:	4421      	add	r1, r4
 800be4c:	1854      	adds	r4, r2, r1
 800be4e:	42a3      	cmp	r3, r4
 800be50:	6011      	str	r1, [r2, #0]
 800be52:	d1e0      	bne.n	800be16 <_free_r+0x26>
 800be54:	681c      	ldr	r4, [r3, #0]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	6053      	str	r3, [r2, #4]
 800be5a:	4421      	add	r1, r4
 800be5c:	6011      	str	r1, [r2, #0]
 800be5e:	e7da      	b.n	800be16 <_free_r+0x26>
 800be60:	d902      	bls.n	800be68 <_free_r+0x78>
 800be62:	230c      	movs	r3, #12
 800be64:	6003      	str	r3, [r0, #0]
 800be66:	e7d6      	b.n	800be16 <_free_r+0x26>
 800be68:	6825      	ldr	r5, [r4, #0]
 800be6a:	1961      	adds	r1, r4, r5
 800be6c:	428b      	cmp	r3, r1
 800be6e:	bf04      	itt	eq
 800be70:	6819      	ldreq	r1, [r3, #0]
 800be72:	685b      	ldreq	r3, [r3, #4]
 800be74:	6063      	str	r3, [r4, #4]
 800be76:	bf04      	itt	eq
 800be78:	1949      	addeq	r1, r1, r5
 800be7a:	6021      	streq	r1, [r4, #0]
 800be7c:	6054      	str	r4, [r2, #4]
 800be7e:	e7ca      	b.n	800be16 <_free_r+0x26>
 800be80:	b003      	add	sp, #12
 800be82:	bd30      	pop	{r4, r5, pc}
 800be84:	20000994 	.word	0x20000994

0800be88 <__sfputc_r>:
 800be88:	6893      	ldr	r3, [r2, #8]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	b410      	push	{r4}
 800be90:	6093      	str	r3, [r2, #8]
 800be92:	da08      	bge.n	800bea6 <__sfputc_r+0x1e>
 800be94:	6994      	ldr	r4, [r2, #24]
 800be96:	42a3      	cmp	r3, r4
 800be98:	db01      	blt.n	800be9e <__sfputc_r+0x16>
 800be9a:	290a      	cmp	r1, #10
 800be9c:	d103      	bne.n	800bea6 <__sfputc_r+0x1e>
 800be9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bea2:	f000 b94b 	b.w	800c13c <__swbuf_r>
 800bea6:	6813      	ldr	r3, [r2, #0]
 800bea8:	1c58      	adds	r0, r3, #1
 800beaa:	6010      	str	r0, [r2, #0]
 800beac:	7019      	strb	r1, [r3, #0]
 800beae:	4608      	mov	r0, r1
 800beb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <__sfputs_r>:
 800beb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb8:	4606      	mov	r6, r0
 800beba:	460f      	mov	r7, r1
 800bebc:	4614      	mov	r4, r2
 800bebe:	18d5      	adds	r5, r2, r3
 800bec0:	42ac      	cmp	r4, r5
 800bec2:	d101      	bne.n	800bec8 <__sfputs_r+0x12>
 800bec4:	2000      	movs	r0, #0
 800bec6:	e007      	b.n	800bed8 <__sfputs_r+0x22>
 800bec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800becc:	463a      	mov	r2, r7
 800bece:	4630      	mov	r0, r6
 800bed0:	f7ff ffda 	bl	800be88 <__sfputc_r>
 800bed4:	1c43      	adds	r3, r0, #1
 800bed6:	d1f3      	bne.n	800bec0 <__sfputs_r+0xa>
 800bed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bedc <_vfiprintf_r>:
 800bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee0:	460d      	mov	r5, r1
 800bee2:	b09d      	sub	sp, #116	; 0x74
 800bee4:	4614      	mov	r4, r2
 800bee6:	4698      	mov	r8, r3
 800bee8:	4606      	mov	r6, r0
 800beea:	b118      	cbz	r0, 800bef4 <_vfiprintf_r+0x18>
 800beec:	6983      	ldr	r3, [r0, #24]
 800beee:	b90b      	cbnz	r3, 800bef4 <_vfiprintf_r+0x18>
 800bef0:	f000 fb06 	bl	800c500 <__sinit>
 800bef4:	4b89      	ldr	r3, [pc, #548]	; (800c11c <_vfiprintf_r+0x240>)
 800bef6:	429d      	cmp	r5, r3
 800bef8:	d11b      	bne.n	800bf32 <_vfiprintf_r+0x56>
 800befa:	6875      	ldr	r5, [r6, #4]
 800befc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800befe:	07d9      	lsls	r1, r3, #31
 800bf00:	d405      	bmi.n	800bf0e <_vfiprintf_r+0x32>
 800bf02:	89ab      	ldrh	r3, [r5, #12]
 800bf04:	059a      	lsls	r2, r3, #22
 800bf06:	d402      	bmi.n	800bf0e <_vfiprintf_r+0x32>
 800bf08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf0a:	f000 fb97 	bl	800c63c <__retarget_lock_acquire_recursive>
 800bf0e:	89ab      	ldrh	r3, [r5, #12]
 800bf10:	071b      	lsls	r3, r3, #28
 800bf12:	d501      	bpl.n	800bf18 <_vfiprintf_r+0x3c>
 800bf14:	692b      	ldr	r3, [r5, #16]
 800bf16:	b9eb      	cbnz	r3, 800bf54 <_vfiprintf_r+0x78>
 800bf18:	4629      	mov	r1, r5
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	f000 f960 	bl	800c1e0 <__swsetup_r>
 800bf20:	b1c0      	cbz	r0, 800bf54 <_vfiprintf_r+0x78>
 800bf22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf24:	07dc      	lsls	r4, r3, #31
 800bf26:	d50e      	bpl.n	800bf46 <_vfiprintf_r+0x6a>
 800bf28:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2c:	b01d      	add	sp, #116	; 0x74
 800bf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf32:	4b7b      	ldr	r3, [pc, #492]	; (800c120 <_vfiprintf_r+0x244>)
 800bf34:	429d      	cmp	r5, r3
 800bf36:	d101      	bne.n	800bf3c <_vfiprintf_r+0x60>
 800bf38:	68b5      	ldr	r5, [r6, #8]
 800bf3a:	e7df      	b.n	800befc <_vfiprintf_r+0x20>
 800bf3c:	4b79      	ldr	r3, [pc, #484]	; (800c124 <_vfiprintf_r+0x248>)
 800bf3e:	429d      	cmp	r5, r3
 800bf40:	bf08      	it	eq
 800bf42:	68f5      	ldreq	r5, [r6, #12]
 800bf44:	e7da      	b.n	800befc <_vfiprintf_r+0x20>
 800bf46:	89ab      	ldrh	r3, [r5, #12]
 800bf48:	0598      	lsls	r0, r3, #22
 800bf4a:	d4ed      	bmi.n	800bf28 <_vfiprintf_r+0x4c>
 800bf4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf4e:	f000 fb76 	bl	800c63e <__retarget_lock_release_recursive>
 800bf52:	e7e9      	b.n	800bf28 <_vfiprintf_r+0x4c>
 800bf54:	2300      	movs	r3, #0
 800bf56:	9309      	str	r3, [sp, #36]	; 0x24
 800bf58:	2320      	movs	r3, #32
 800bf5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf62:	2330      	movs	r3, #48	; 0x30
 800bf64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c128 <_vfiprintf_r+0x24c>
 800bf68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf6c:	f04f 0901 	mov.w	r9, #1
 800bf70:	4623      	mov	r3, r4
 800bf72:	469a      	mov	sl, r3
 800bf74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf78:	b10a      	cbz	r2, 800bf7e <_vfiprintf_r+0xa2>
 800bf7a:	2a25      	cmp	r2, #37	; 0x25
 800bf7c:	d1f9      	bne.n	800bf72 <_vfiprintf_r+0x96>
 800bf7e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf82:	d00b      	beq.n	800bf9c <_vfiprintf_r+0xc0>
 800bf84:	465b      	mov	r3, fp
 800bf86:	4622      	mov	r2, r4
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7ff ff93 	bl	800beb6 <__sfputs_r>
 800bf90:	3001      	adds	r0, #1
 800bf92:	f000 80aa 	beq.w	800c0ea <_vfiprintf_r+0x20e>
 800bf96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf98:	445a      	add	r2, fp
 800bf9a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf9c:	f89a 3000 	ldrb.w	r3, [sl]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f000 80a2 	beq.w	800c0ea <_vfiprintf_r+0x20e>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfb0:	f10a 0a01 	add.w	sl, sl, #1
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	9307      	str	r3, [sp, #28]
 800bfb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfbc:	931a      	str	r3, [sp, #104]	; 0x68
 800bfbe:	4654      	mov	r4, sl
 800bfc0:	2205      	movs	r2, #5
 800bfc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc6:	4858      	ldr	r0, [pc, #352]	; (800c128 <_vfiprintf_r+0x24c>)
 800bfc8:	f7f4 f92a 	bl	8000220 <memchr>
 800bfcc:	9a04      	ldr	r2, [sp, #16]
 800bfce:	b9d8      	cbnz	r0, 800c008 <_vfiprintf_r+0x12c>
 800bfd0:	06d1      	lsls	r1, r2, #27
 800bfd2:	bf44      	itt	mi
 800bfd4:	2320      	movmi	r3, #32
 800bfd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfda:	0713      	lsls	r3, r2, #28
 800bfdc:	bf44      	itt	mi
 800bfde:	232b      	movmi	r3, #43	; 0x2b
 800bfe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfe4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfea:	d015      	beq.n	800c018 <_vfiprintf_r+0x13c>
 800bfec:	9a07      	ldr	r2, [sp, #28]
 800bfee:	4654      	mov	r4, sl
 800bff0:	2000      	movs	r0, #0
 800bff2:	f04f 0c0a 	mov.w	ip, #10
 800bff6:	4621      	mov	r1, r4
 800bff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bffc:	3b30      	subs	r3, #48	; 0x30
 800bffe:	2b09      	cmp	r3, #9
 800c000:	d94e      	bls.n	800c0a0 <_vfiprintf_r+0x1c4>
 800c002:	b1b0      	cbz	r0, 800c032 <_vfiprintf_r+0x156>
 800c004:	9207      	str	r2, [sp, #28]
 800c006:	e014      	b.n	800c032 <_vfiprintf_r+0x156>
 800c008:	eba0 0308 	sub.w	r3, r0, r8
 800c00c:	fa09 f303 	lsl.w	r3, r9, r3
 800c010:	4313      	orrs	r3, r2
 800c012:	9304      	str	r3, [sp, #16]
 800c014:	46a2      	mov	sl, r4
 800c016:	e7d2      	b.n	800bfbe <_vfiprintf_r+0xe2>
 800c018:	9b03      	ldr	r3, [sp, #12]
 800c01a:	1d19      	adds	r1, r3, #4
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	9103      	str	r1, [sp, #12]
 800c020:	2b00      	cmp	r3, #0
 800c022:	bfbb      	ittet	lt
 800c024:	425b      	neglt	r3, r3
 800c026:	f042 0202 	orrlt.w	r2, r2, #2
 800c02a:	9307      	strge	r3, [sp, #28]
 800c02c:	9307      	strlt	r3, [sp, #28]
 800c02e:	bfb8      	it	lt
 800c030:	9204      	strlt	r2, [sp, #16]
 800c032:	7823      	ldrb	r3, [r4, #0]
 800c034:	2b2e      	cmp	r3, #46	; 0x2e
 800c036:	d10c      	bne.n	800c052 <_vfiprintf_r+0x176>
 800c038:	7863      	ldrb	r3, [r4, #1]
 800c03a:	2b2a      	cmp	r3, #42	; 0x2a
 800c03c:	d135      	bne.n	800c0aa <_vfiprintf_r+0x1ce>
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	1d1a      	adds	r2, r3, #4
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	9203      	str	r2, [sp, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	bfb8      	it	lt
 800c04a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c04e:	3402      	adds	r4, #2
 800c050:	9305      	str	r3, [sp, #20]
 800c052:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c138 <_vfiprintf_r+0x25c>
 800c056:	7821      	ldrb	r1, [r4, #0]
 800c058:	2203      	movs	r2, #3
 800c05a:	4650      	mov	r0, sl
 800c05c:	f7f4 f8e0 	bl	8000220 <memchr>
 800c060:	b140      	cbz	r0, 800c074 <_vfiprintf_r+0x198>
 800c062:	2340      	movs	r3, #64	; 0x40
 800c064:	eba0 000a 	sub.w	r0, r0, sl
 800c068:	fa03 f000 	lsl.w	r0, r3, r0
 800c06c:	9b04      	ldr	r3, [sp, #16]
 800c06e:	4303      	orrs	r3, r0
 800c070:	3401      	adds	r4, #1
 800c072:	9304      	str	r3, [sp, #16]
 800c074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c078:	482c      	ldr	r0, [pc, #176]	; (800c12c <_vfiprintf_r+0x250>)
 800c07a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c07e:	2206      	movs	r2, #6
 800c080:	f7f4 f8ce 	bl	8000220 <memchr>
 800c084:	2800      	cmp	r0, #0
 800c086:	d03f      	beq.n	800c108 <_vfiprintf_r+0x22c>
 800c088:	4b29      	ldr	r3, [pc, #164]	; (800c130 <_vfiprintf_r+0x254>)
 800c08a:	bb1b      	cbnz	r3, 800c0d4 <_vfiprintf_r+0x1f8>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	3307      	adds	r3, #7
 800c090:	f023 0307 	bic.w	r3, r3, #7
 800c094:	3308      	adds	r3, #8
 800c096:	9303      	str	r3, [sp, #12]
 800c098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c09a:	443b      	add	r3, r7
 800c09c:	9309      	str	r3, [sp, #36]	; 0x24
 800c09e:	e767      	b.n	800bf70 <_vfiprintf_r+0x94>
 800c0a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	e7a5      	b.n	800bff6 <_vfiprintf_r+0x11a>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	3401      	adds	r4, #1
 800c0ae:	9305      	str	r3, [sp, #20]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	f04f 0c0a 	mov.w	ip, #10
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0bc:	3a30      	subs	r2, #48	; 0x30
 800c0be:	2a09      	cmp	r2, #9
 800c0c0:	d903      	bls.n	800c0ca <_vfiprintf_r+0x1ee>
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d0c5      	beq.n	800c052 <_vfiprintf_r+0x176>
 800c0c6:	9105      	str	r1, [sp, #20]
 800c0c8:	e7c3      	b.n	800c052 <_vfiprintf_r+0x176>
 800c0ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e7f0      	b.n	800c0b6 <_vfiprintf_r+0x1da>
 800c0d4:	ab03      	add	r3, sp, #12
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	462a      	mov	r2, r5
 800c0da:	4b16      	ldr	r3, [pc, #88]	; (800c134 <_vfiprintf_r+0x258>)
 800c0dc:	a904      	add	r1, sp, #16
 800c0de:	4630      	mov	r0, r6
 800c0e0:	f3af 8000 	nop.w
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	1c78      	adds	r0, r7, #1
 800c0e8:	d1d6      	bne.n	800c098 <_vfiprintf_r+0x1bc>
 800c0ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0ec:	07d9      	lsls	r1, r3, #31
 800c0ee:	d405      	bmi.n	800c0fc <_vfiprintf_r+0x220>
 800c0f0:	89ab      	ldrh	r3, [r5, #12]
 800c0f2:	059a      	lsls	r2, r3, #22
 800c0f4:	d402      	bmi.n	800c0fc <_vfiprintf_r+0x220>
 800c0f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0f8:	f000 faa1 	bl	800c63e <__retarget_lock_release_recursive>
 800c0fc:	89ab      	ldrh	r3, [r5, #12]
 800c0fe:	065b      	lsls	r3, r3, #25
 800c100:	f53f af12 	bmi.w	800bf28 <_vfiprintf_r+0x4c>
 800c104:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c106:	e711      	b.n	800bf2c <_vfiprintf_r+0x50>
 800c108:	ab03      	add	r3, sp, #12
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	462a      	mov	r2, r5
 800c10e:	4b09      	ldr	r3, [pc, #36]	; (800c134 <_vfiprintf_r+0x258>)
 800c110:	a904      	add	r1, sp, #16
 800c112:	4630      	mov	r0, r6
 800c114:	f7fe fe46 	bl	800ada4 <_printf_i>
 800c118:	e7e4      	b.n	800c0e4 <_vfiprintf_r+0x208>
 800c11a:	bf00      	nop
 800c11c:	0800d5f0 	.word	0x0800d5f0
 800c120:	0800d610 	.word	0x0800d610
 800c124:	0800d5d0 	.word	0x0800d5d0
 800c128:	0800d5bd 	.word	0x0800d5bd
 800c12c:	0800d5c7 	.word	0x0800d5c7
 800c130:	00000000 	.word	0x00000000
 800c134:	0800beb7 	.word	0x0800beb7
 800c138:	0800d5c3 	.word	0x0800d5c3

0800c13c <__swbuf_r>:
 800c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13e:	460e      	mov	r6, r1
 800c140:	4614      	mov	r4, r2
 800c142:	4605      	mov	r5, r0
 800c144:	b118      	cbz	r0, 800c14e <__swbuf_r+0x12>
 800c146:	6983      	ldr	r3, [r0, #24]
 800c148:	b90b      	cbnz	r3, 800c14e <__swbuf_r+0x12>
 800c14a:	f000 f9d9 	bl	800c500 <__sinit>
 800c14e:	4b21      	ldr	r3, [pc, #132]	; (800c1d4 <__swbuf_r+0x98>)
 800c150:	429c      	cmp	r4, r3
 800c152:	d12b      	bne.n	800c1ac <__swbuf_r+0x70>
 800c154:	686c      	ldr	r4, [r5, #4]
 800c156:	69a3      	ldr	r3, [r4, #24]
 800c158:	60a3      	str	r3, [r4, #8]
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	071a      	lsls	r2, r3, #28
 800c15e:	d52f      	bpl.n	800c1c0 <__swbuf_r+0x84>
 800c160:	6923      	ldr	r3, [r4, #16]
 800c162:	b36b      	cbz	r3, 800c1c0 <__swbuf_r+0x84>
 800c164:	6923      	ldr	r3, [r4, #16]
 800c166:	6820      	ldr	r0, [r4, #0]
 800c168:	1ac0      	subs	r0, r0, r3
 800c16a:	6963      	ldr	r3, [r4, #20]
 800c16c:	b2f6      	uxtb	r6, r6
 800c16e:	4283      	cmp	r3, r0
 800c170:	4637      	mov	r7, r6
 800c172:	dc04      	bgt.n	800c17e <__swbuf_r+0x42>
 800c174:	4621      	mov	r1, r4
 800c176:	4628      	mov	r0, r5
 800c178:	f000 f92e 	bl	800c3d8 <_fflush_r>
 800c17c:	bb30      	cbnz	r0, 800c1cc <__swbuf_r+0x90>
 800c17e:	68a3      	ldr	r3, [r4, #8]
 800c180:	3b01      	subs	r3, #1
 800c182:	60a3      	str	r3, [r4, #8]
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	1c5a      	adds	r2, r3, #1
 800c188:	6022      	str	r2, [r4, #0]
 800c18a:	701e      	strb	r6, [r3, #0]
 800c18c:	6963      	ldr	r3, [r4, #20]
 800c18e:	3001      	adds	r0, #1
 800c190:	4283      	cmp	r3, r0
 800c192:	d004      	beq.n	800c19e <__swbuf_r+0x62>
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	07db      	lsls	r3, r3, #31
 800c198:	d506      	bpl.n	800c1a8 <__swbuf_r+0x6c>
 800c19a:	2e0a      	cmp	r6, #10
 800c19c:	d104      	bne.n	800c1a8 <__swbuf_r+0x6c>
 800c19e:	4621      	mov	r1, r4
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	f000 f919 	bl	800c3d8 <_fflush_r>
 800c1a6:	b988      	cbnz	r0, 800c1cc <__swbuf_r+0x90>
 800c1a8:	4638      	mov	r0, r7
 800c1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ac:	4b0a      	ldr	r3, [pc, #40]	; (800c1d8 <__swbuf_r+0x9c>)
 800c1ae:	429c      	cmp	r4, r3
 800c1b0:	d101      	bne.n	800c1b6 <__swbuf_r+0x7a>
 800c1b2:	68ac      	ldr	r4, [r5, #8]
 800c1b4:	e7cf      	b.n	800c156 <__swbuf_r+0x1a>
 800c1b6:	4b09      	ldr	r3, [pc, #36]	; (800c1dc <__swbuf_r+0xa0>)
 800c1b8:	429c      	cmp	r4, r3
 800c1ba:	bf08      	it	eq
 800c1bc:	68ec      	ldreq	r4, [r5, #12]
 800c1be:	e7ca      	b.n	800c156 <__swbuf_r+0x1a>
 800c1c0:	4621      	mov	r1, r4
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	f000 f80c 	bl	800c1e0 <__swsetup_r>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d0cb      	beq.n	800c164 <__swbuf_r+0x28>
 800c1cc:	f04f 37ff 	mov.w	r7, #4294967295
 800c1d0:	e7ea      	b.n	800c1a8 <__swbuf_r+0x6c>
 800c1d2:	bf00      	nop
 800c1d4:	0800d5f0 	.word	0x0800d5f0
 800c1d8:	0800d610 	.word	0x0800d610
 800c1dc:	0800d5d0 	.word	0x0800d5d0

0800c1e0 <__swsetup_r>:
 800c1e0:	4b32      	ldr	r3, [pc, #200]	; (800c2ac <__swsetup_r+0xcc>)
 800c1e2:	b570      	push	{r4, r5, r6, lr}
 800c1e4:	681d      	ldr	r5, [r3, #0]
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	460c      	mov	r4, r1
 800c1ea:	b125      	cbz	r5, 800c1f6 <__swsetup_r+0x16>
 800c1ec:	69ab      	ldr	r3, [r5, #24]
 800c1ee:	b913      	cbnz	r3, 800c1f6 <__swsetup_r+0x16>
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	f000 f985 	bl	800c500 <__sinit>
 800c1f6:	4b2e      	ldr	r3, [pc, #184]	; (800c2b0 <__swsetup_r+0xd0>)
 800c1f8:	429c      	cmp	r4, r3
 800c1fa:	d10f      	bne.n	800c21c <__swsetup_r+0x3c>
 800c1fc:	686c      	ldr	r4, [r5, #4]
 800c1fe:	89a3      	ldrh	r3, [r4, #12]
 800c200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c204:	0719      	lsls	r1, r3, #28
 800c206:	d42c      	bmi.n	800c262 <__swsetup_r+0x82>
 800c208:	06dd      	lsls	r5, r3, #27
 800c20a:	d411      	bmi.n	800c230 <__swsetup_r+0x50>
 800c20c:	2309      	movs	r3, #9
 800c20e:	6033      	str	r3, [r6, #0]
 800c210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c214:	81a3      	strh	r3, [r4, #12]
 800c216:	f04f 30ff 	mov.w	r0, #4294967295
 800c21a:	e03e      	b.n	800c29a <__swsetup_r+0xba>
 800c21c:	4b25      	ldr	r3, [pc, #148]	; (800c2b4 <__swsetup_r+0xd4>)
 800c21e:	429c      	cmp	r4, r3
 800c220:	d101      	bne.n	800c226 <__swsetup_r+0x46>
 800c222:	68ac      	ldr	r4, [r5, #8]
 800c224:	e7eb      	b.n	800c1fe <__swsetup_r+0x1e>
 800c226:	4b24      	ldr	r3, [pc, #144]	; (800c2b8 <__swsetup_r+0xd8>)
 800c228:	429c      	cmp	r4, r3
 800c22a:	bf08      	it	eq
 800c22c:	68ec      	ldreq	r4, [r5, #12]
 800c22e:	e7e6      	b.n	800c1fe <__swsetup_r+0x1e>
 800c230:	0758      	lsls	r0, r3, #29
 800c232:	d512      	bpl.n	800c25a <__swsetup_r+0x7a>
 800c234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c236:	b141      	cbz	r1, 800c24a <__swsetup_r+0x6a>
 800c238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c23c:	4299      	cmp	r1, r3
 800c23e:	d002      	beq.n	800c246 <__swsetup_r+0x66>
 800c240:	4630      	mov	r0, r6
 800c242:	f7ff fdd5 	bl	800bdf0 <_free_r>
 800c246:	2300      	movs	r3, #0
 800c248:	6363      	str	r3, [r4, #52]	; 0x34
 800c24a:	89a3      	ldrh	r3, [r4, #12]
 800c24c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c250:	81a3      	strh	r3, [r4, #12]
 800c252:	2300      	movs	r3, #0
 800c254:	6063      	str	r3, [r4, #4]
 800c256:	6923      	ldr	r3, [r4, #16]
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	89a3      	ldrh	r3, [r4, #12]
 800c25c:	f043 0308 	orr.w	r3, r3, #8
 800c260:	81a3      	strh	r3, [r4, #12]
 800c262:	6923      	ldr	r3, [r4, #16]
 800c264:	b94b      	cbnz	r3, 800c27a <__swsetup_r+0x9a>
 800c266:	89a3      	ldrh	r3, [r4, #12]
 800c268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c26c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c270:	d003      	beq.n	800c27a <__swsetup_r+0x9a>
 800c272:	4621      	mov	r1, r4
 800c274:	4630      	mov	r0, r6
 800c276:	f000 fa09 	bl	800c68c <__smakebuf_r>
 800c27a:	89a0      	ldrh	r0, [r4, #12]
 800c27c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c280:	f010 0301 	ands.w	r3, r0, #1
 800c284:	d00a      	beq.n	800c29c <__swsetup_r+0xbc>
 800c286:	2300      	movs	r3, #0
 800c288:	60a3      	str	r3, [r4, #8]
 800c28a:	6963      	ldr	r3, [r4, #20]
 800c28c:	425b      	negs	r3, r3
 800c28e:	61a3      	str	r3, [r4, #24]
 800c290:	6923      	ldr	r3, [r4, #16]
 800c292:	b943      	cbnz	r3, 800c2a6 <__swsetup_r+0xc6>
 800c294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c298:	d1ba      	bne.n	800c210 <__swsetup_r+0x30>
 800c29a:	bd70      	pop	{r4, r5, r6, pc}
 800c29c:	0781      	lsls	r1, r0, #30
 800c29e:	bf58      	it	pl
 800c2a0:	6963      	ldrpl	r3, [r4, #20]
 800c2a2:	60a3      	str	r3, [r4, #8]
 800c2a4:	e7f4      	b.n	800c290 <__swsetup_r+0xb0>
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	e7f7      	b.n	800c29a <__swsetup_r+0xba>
 800c2aa:	bf00      	nop
 800c2ac:	2000001c 	.word	0x2000001c
 800c2b0:	0800d5f0 	.word	0x0800d5f0
 800c2b4:	0800d610 	.word	0x0800d610
 800c2b8:	0800d5d0 	.word	0x0800d5d0

0800c2bc <abort>:
 800c2bc:	b508      	push	{r3, lr}
 800c2be:	2006      	movs	r0, #6
 800c2c0:	f000 fa4c 	bl	800c75c <raise>
 800c2c4:	2001      	movs	r0, #1
 800c2c6:	f7f6 fa91 	bl	80027ec <_exit>
	...

0800c2cc <__sflush_r>:
 800c2cc:	898a      	ldrh	r2, [r1, #12]
 800c2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	0710      	lsls	r0, r2, #28
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	d458      	bmi.n	800c38c <__sflush_r+0xc0>
 800c2da:	684b      	ldr	r3, [r1, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	dc05      	bgt.n	800c2ec <__sflush_r+0x20>
 800c2e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	dc02      	bgt.n	800c2ec <__sflush_r+0x20>
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2ee:	2e00      	cmp	r6, #0
 800c2f0:	d0f9      	beq.n	800c2e6 <__sflush_r+0x1a>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2f8:	682f      	ldr	r7, [r5, #0]
 800c2fa:	602b      	str	r3, [r5, #0]
 800c2fc:	d032      	beq.n	800c364 <__sflush_r+0x98>
 800c2fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	075a      	lsls	r2, r3, #29
 800c304:	d505      	bpl.n	800c312 <__sflush_r+0x46>
 800c306:	6863      	ldr	r3, [r4, #4]
 800c308:	1ac0      	subs	r0, r0, r3
 800c30a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c30c:	b10b      	cbz	r3, 800c312 <__sflush_r+0x46>
 800c30e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c310:	1ac0      	subs	r0, r0, r3
 800c312:	2300      	movs	r3, #0
 800c314:	4602      	mov	r2, r0
 800c316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c318:	6a21      	ldr	r1, [r4, #32]
 800c31a:	4628      	mov	r0, r5
 800c31c:	47b0      	blx	r6
 800c31e:	1c43      	adds	r3, r0, #1
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	d106      	bne.n	800c332 <__sflush_r+0x66>
 800c324:	6829      	ldr	r1, [r5, #0]
 800c326:	291d      	cmp	r1, #29
 800c328:	d82c      	bhi.n	800c384 <__sflush_r+0xb8>
 800c32a:	4a2a      	ldr	r2, [pc, #168]	; (800c3d4 <__sflush_r+0x108>)
 800c32c:	40ca      	lsrs	r2, r1
 800c32e:	07d6      	lsls	r6, r2, #31
 800c330:	d528      	bpl.n	800c384 <__sflush_r+0xb8>
 800c332:	2200      	movs	r2, #0
 800c334:	6062      	str	r2, [r4, #4]
 800c336:	04d9      	lsls	r1, r3, #19
 800c338:	6922      	ldr	r2, [r4, #16]
 800c33a:	6022      	str	r2, [r4, #0]
 800c33c:	d504      	bpl.n	800c348 <__sflush_r+0x7c>
 800c33e:	1c42      	adds	r2, r0, #1
 800c340:	d101      	bne.n	800c346 <__sflush_r+0x7a>
 800c342:	682b      	ldr	r3, [r5, #0]
 800c344:	b903      	cbnz	r3, 800c348 <__sflush_r+0x7c>
 800c346:	6560      	str	r0, [r4, #84]	; 0x54
 800c348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c34a:	602f      	str	r7, [r5, #0]
 800c34c:	2900      	cmp	r1, #0
 800c34e:	d0ca      	beq.n	800c2e6 <__sflush_r+0x1a>
 800c350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c354:	4299      	cmp	r1, r3
 800c356:	d002      	beq.n	800c35e <__sflush_r+0x92>
 800c358:	4628      	mov	r0, r5
 800c35a:	f7ff fd49 	bl	800bdf0 <_free_r>
 800c35e:	2000      	movs	r0, #0
 800c360:	6360      	str	r0, [r4, #52]	; 0x34
 800c362:	e7c1      	b.n	800c2e8 <__sflush_r+0x1c>
 800c364:	6a21      	ldr	r1, [r4, #32]
 800c366:	2301      	movs	r3, #1
 800c368:	4628      	mov	r0, r5
 800c36a:	47b0      	blx	r6
 800c36c:	1c41      	adds	r1, r0, #1
 800c36e:	d1c7      	bne.n	800c300 <__sflush_r+0x34>
 800c370:	682b      	ldr	r3, [r5, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0c4      	beq.n	800c300 <__sflush_r+0x34>
 800c376:	2b1d      	cmp	r3, #29
 800c378:	d001      	beq.n	800c37e <__sflush_r+0xb2>
 800c37a:	2b16      	cmp	r3, #22
 800c37c:	d101      	bne.n	800c382 <__sflush_r+0xb6>
 800c37e:	602f      	str	r7, [r5, #0]
 800c380:	e7b1      	b.n	800c2e6 <__sflush_r+0x1a>
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c388:	81a3      	strh	r3, [r4, #12]
 800c38a:	e7ad      	b.n	800c2e8 <__sflush_r+0x1c>
 800c38c:	690f      	ldr	r7, [r1, #16]
 800c38e:	2f00      	cmp	r7, #0
 800c390:	d0a9      	beq.n	800c2e6 <__sflush_r+0x1a>
 800c392:	0793      	lsls	r3, r2, #30
 800c394:	680e      	ldr	r6, [r1, #0]
 800c396:	bf08      	it	eq
 800c398:	694b      	ldreq	r3, [r1, #20]
 800c39a:	600f      	str	r7, [r1, #0]
 800c39c:	bf18      	it	ne
 800c39e:	2300      	movne	r3, #0
 800c3a0:	eba6 0807 	sub.w	r8, r6, r7
 800c3a4:	608b      	str	r3, [r1, #8]
 800c3a6:	f1b8 0f00 	cmp.w	r8, #0
 800c3aa:	dd9c      	ble.n	800c2e6 <__sflush_r+0x1a>
 800c3ac:	6a21      	ldr	r1, [r4, #32]
 800c3ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3b0:	4643      	mov	r3, r8
 800c3b2:	463a      	mov	r2, r7
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	47b0      	blx	r6
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	dc06      	bgt.n	800c3ca <__sflush_r+0xfe>
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3c2:	81a3      	strh	r3, [r4, #12]
 800c3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c8:	e78e      	b.n	800c2e8 <__sflush_r+0x1c>
 800c3ca:	4407      	add	r7, r0
 800c3cc:	eba8 0800 	sub.w	r8, r8, r0
 800c3d0:	e7e9      	b.n	800c3a6 <__sflush_r+0xda>
 800c3d2:	bf00      	nop
 800c3d4:	20400001 	.word	0x20400001

0800c3d8 <_fflush_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	690b      	ldr	r3, [r1, #16]
 800c3dc:	4605      	mov	r5, r0
 800c3de:	460c      	mov	r4, r1
 800c3e0:	b913      	cbnz	r3, 800c3e8 <_fflush_r+0x10>
 800c3e2:	2500      	movs	r5, #0
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	b118      	cbz	r0, 800c3f2 <_fflush_r+0x1a>
 800c3ea:	6983      	ldr	r3, [r0, #24]
 800c3ec:	b90b      	cbnz	r3, 800c3f2 <_fflush_r+0x1a>
 800c3ee:	f000 f887 	bl	800c500 <__sinit>
 800c3f2:	4b14      	ldr	r3, [pc, #80]	; (800c444 <_fflush_r+0x6c>)
 800c3f4:	429c      	cmp	r4, r3
 800c3f6:	d11b      	bne.n	800c430 <_fflush_r+0x58>
 800c3f8:	686c      	ldr	r4, [r5, #4]
 800c3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0ef      	beq.n	800c3e2 <_fflush_r+0xa>
 800c402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c404:	07d0      	lsls	r0, r2, #31
 800c406:	d404      	bmi.n	800c412 <_fflush_r+0x3a>
 800c408:	0599      	lsls	r1, r3, #22
 800c40a:	d402      	bmi.n	800c412 <_fflush_r+0x3a>
 800c40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c40e:	f000 f915 	bl	800c63c <__retarget_lock_acquire_recursive>
 800c412:	4628      	mov	r0, r5
 800c414:	4621      	mov	r1, r4
 800c416:	f7ff ff59 	bl	800c2cc <__sflush_r>
 800c41a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c41c:	07da      	lsls	r2, r3, #31
 800c41e:	4605      	mov	r5, r0
 800c420:	d4e0      	bmi.n	800c3e4 <_fflush_r+0xc>
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	059b      	lsls	r3, r3, #22
 800c426:	d4dd      	bmi.n	800c3e4 <_fflush_r+0xc>
 800c428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c42a:	f000 f908 	bl	800c63e <__retarget_lock_release_recursive>
 800c42e:	e7d9      	b.n	800c3e4 <_fflush_r+0xc>
 800c430:	4b05      	ldr	r3, [pc, #20]	; (800c448 <_fflush_r+0x70>)
 800c432:	429c      	cmp	r4, r3
 800c434:	d101      	bne.n	800c43a <_fflush_r+0x62>
 800c436:	68ac      	ldr	r4, [r5, #8]
 800c438:	e7df      	b.n	800c3fa <_fflush_r+0x22>
 800c43a:	4b04      	ldr	r3, [pc, #16]	; (800c44c <_fflush_r+0x74>)
 800c43c:	429c      	cmp	r4, r3
 800c43e:	bf08      	it	eq
 800c440:	68ec      	ldreq	r4, [r5, #12]
 800c442:	e7da      	b.n	800c3fa <_fflush_r+0x22>
 800c444:	0800d5f0 	.word	0x0800d5f0
 800c448:	0800d610 	.word	0x0800d610
 800c44c:	0800d5d0 	.word	0x0800d5d0

0800c450 <std>:
 800c450:	2300      	movs	r3, #0
 800c452:	b510      	push	{r4, lr}
 800c454:	4604      	mov	r4, r0
 800c456:	e9c0 3300 	strd	r3, r3, [r0]
 800c45a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c45e:	6083      	str	r3, [r0, #8]
 800c460:	8181      	strh	r1, [r0, #12]
 800c462:	6643      	str	r3, [r0, #100]	; 0x64
 800c464:	81c2      	strh	r2, [r0, #14]
 800c466:	6183      	str	r3, [r0, #24]
 800c468:	4619      	mov	r1, r3
 800c46a:	2208      	movs	r2, #8
 800c46c:	305c      	adds	r0, #92	; 0x5c
 800c46e:	f7fc fb9d 	bl	8008bac <memset>
 800c472:	4b05      	ldr	r3, [pc, #20]	; (800c488 <std+0x38>)
 800c474:	6263      	str	r3, [r4, #36]	; 0x24
 800c476:	4b05      	ldr	r3, [pc, #20]	; (800c48c <std+0x3c>)
 800c478:	62a3      	str	r3, [r4, #40]	; 0x28
 800c47a:	4b05      	ldr	r3, [pc, #20]	; (800c490 <std+0x40>)
 800c47c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c47e:	4b05      	ldr	r3, [pc, #20]	; (800c494 <std+0x44>)
 800c480:	6224      	str	r4, [r4, #32]
 800c482:	6323      	str	r3, [r4, #48]	; 0x30
 800c484:	bd10      	pop	{r4, pc}
 800c486:	bf00      	nop
 800c488:	0800c795 	.word	0x0800c795
 800c48c:	0800c7b7 	.word	0x0800c7b7
 800c490:	0800c7ef 	.word	0x0800c7ef
 800c494:	0800c813 	.word	0x0800c813

0800c498 <_cleanup_r>:
 800c498:	4901      	ldr	r1, [pc, #4]	; (800c4a0 <_cleanup_r+0x8>)
 800c49a:	f000 b8af 	b.w	800c5fc <_fwalk_reent>
 800c49e:	bf00      	nop
 800c4a0:	0800c3d9 	.word	0x0800c3d9

0800c4a4 <__sfmoreglue>:
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	2268      	movs	r2, #104	; 0x68
 800c4a8:	1e4d      	subs	r5, r1, #1
 800c4aa:	4355      	muls	r5, r2
 800c4ac:	460e      	mov	r6, r1
 800c4ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4b2:	f7fe fb95 	bl	800abe0 <_malloc_r>
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	b140      	cbz	r0, 800c4cc <__sfmoreglue+0x28>
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	e9c0 1600 	strd	r1, r6, [r0]
 800c4c0:	300c      	adds	r0, #12
 800c4c2:	60a0      	str	r0, [r4, #8]
 800c4c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4c8:	f7fc fb70 	bl	8008bac <memset>
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	bd70      	pop	{r4, r5, r6, pc}

0800c4d0 <__sfp_lock_acquire>:
 800c4d0:	4801      	ldr	r0, [pc, #4]	; (800c4d8 <__sfp_lock_acquire+0x8>)
 800c4d2:	f000 b8b3 	b.w	800c63c <__retarget_lock_acquire_recursive>
 800c4d6:	bf00      	nop
 800c4d8:	200009a1 	.word	0x200009a1

0800c4dc <__sfp_lock_release>:
 800c4dc:	4801      	ldr	r0, [pc, #4]	; (800c4e4 <__sfp_lock_release+0x8>)
 800c4de:	f000 b8ae 	b.w	800c63e <__retarget_lock_release_recursive>
 800c4e2:	bf00      	nop
 800c4e4:	200009a1 	.word	0x200009a1

0800c4e8 <__sinit_lock_acquire>:
 800c4e8:	4801      	ldr	r0, [pc, #4]	; (800c4f0 <__sinit_lock_acquire+0x8>)
 800c4ea:	f000 b8a7 	b.w	800c63c <__retarget_lock_acquire_recursive>
 800c4ee:	bf00      	nop
 800c4f0:	200009a2 	.word	0x200009a2

0800c4f4 <__sinit_lock_release>:
 800c4f4:	4801      	ldr	r0, [pc, #4]	; (800c4fc <__sinit_lock_release+0x8>)
 800c4f6:	f000 b8a2 	b.w	800c63e <__retarget_lock_release_recursive>
 800c4fa:	bf00      	nop
 800c4fc:	200009a2 	.word	0x200009a2

0800c500 <__sinit>:
 800c500:	b510      	push	{r4, lr}
 800c502:	4604      	mov	r4, r0
 800c504:	f7ff fff0 	bl	800c4e8 <__sinit_lock_acquire>
 800c508:	69a3      	ldr	r3, [r4, #24]
 800c50a:	b11b      	cbz	r3, 800c514 <__sinit+0x14>
 800c50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c510:	f7ff bff0 	b.w	800c4f4 <__sinit_lock_release>
 800c514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c518:	6523      	str	r3, [r4, #80]	; 0x50
 800c51a:	4b13      	ldr	r3, [pc, #76]	; (800c568 <__sinit+0x68>)
 800c51c:	4a13      	ldr	r2, [pc, #76]	; (800c56c <__sinit+0x6c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	62a2      	str	r2, [r4, #40]	; 0x28
 800c522:	42a3      	cmp	r3, r4
 800c524:	bf04      	itt	eq
 800c526:	2301      	moveq	r3, #1
 800c528:	61a3      	streq	r3, [r4, #24]
 800c52a:	4620      	mov	r0, r4
 800c52c:	f000 f820 	bl	800c570 <__sfp>
 800c530:	6060      	str	r0, [r4, #4]
 800c532:	4620      	mov	r0, r4
 800c534:	f000 f81c 	bl	800c570 <__sfp>
 800c538:	60a0      	str	r0, [r4, #8]
 800c53a:	4620      	mov	r0, r4
 800c53c:	f000 f818 	bl	800c570 <__sfp>
 800c540:	2200      	movs	r2, #0
 800c542:	60e0      	str	r0, [r4, #12]
 800c544:	2104      	movs	r1, #4
 800c546:	6860      	ldr	r0, [r4, #4]
 800c548:	f7ff ff82 	bl	800c450 <std>
 800c54c:	68a0      	ldr	r0, [r4, #8]
 800c54e:	2201      	movs	r2, #1
 800c550:	2109      	movs	r1, #9
 800c552:	f7ff ff7d 	bl	800c450 <std>
 800c556:	68e0      	ldr	r0, [r4, #12]
 800c558:	2202      	movs	r2, #2
 800c55a:	2112      	movs	r1, #18
 800c55c:	f7ff ff78 	bl	800c450 <std>
 800c560:	2301      	movs	r3, #1
 800c562:	61a3      	str	r3, [r4, #24]
 800c564:	e7d2      	b.n	800c50c <__sinit+0xc>
 800c566:	bf00      	nop
 800c568:	0800d19c 	.word	0x0800d19c
 800c56c:	0800c499 	.word	0x0800c499

0800c570 <__sfp>:
 800c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c572:	4607      	mov	r7, r0
 800c574:	f7ff ffac 	bl	800c4d0 <__sfp_lock_acquire>
 800c578:	4b1e      	ldr	r3, [pc, #120]	; (800c5f4 <__sfp+0x84>)
 800c57a:	681e      	ldr	r6, [r3, #0]
 800c57c:	69b3      	ldr	r3, [r6, #24]
 800c57e:	b913      	cbnz	r3, 800c586 <__sfp+0x16>
 800c580:	4630      	mov	r0, r6
 800c582:	f7ff ffbd 	bl	800c500 <__sinit>
 800c586:	3648      	adds	r6, #72	; 0x48
 800c588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c58c:	3b01      	subs	r3, #1
 800c58e:	d503      	bpl.n	800c598 <__sfp+0x28>
 800c590:	6833      	ldr	r3, [r6, #0]
 800c592:	b30b      	cbz	r3, 800c5d8 <__sfp+0x68>
 800c594:	6836      	ldr	r6, [r6, #0]
 800c596:	e7f7      	b.n	800c588 <__sfp+0x18>
 800c598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c59c:	b9d5      	cbnz	r5, 800c5d4 <__sfp+0x64>
 800c59e:	4b16      	ldr	r3, [pc, #88]	; (800c5f8 <__sfp+0x88>)
 800c5a0:	60e3      	str	r3, [r4, #12]
 800c5a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5a6:	6665      	str	r5, [r4, #100]	; 0x64
 800c5a8:	f000 f847 	bl	800c63a <__retarget_lock_init_recursive>
 800c5ac:	f7ff ff96 	bl	800c4dc <__sfp_lock_release>
 800c5b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c5b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5b8:	6025      	str	r5, [r4, #0]
 800c5ba:	61a5      	str	r5, [r4, #24]
 800c5bc:	2208      	movs	r2, #8
 800c5be:	4629      	mov	r1, r5
 800c5c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5c4:	f7fc faf2 	bl	8008bac <memset>
 800c5c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d4:	3468      	adds	r4, #104	; 0x68
 800c5d6:	e7d9      	b.n	800c58c <__sfp+0x1c>
 800c5d8:	2104      	movs	r1, #4
 800c5da:	4638      	mov	r0, r7
 800c5dc:	f7ff ff62 	bl	800c4a4 <__sfmoreglue>
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	6030      	str	r0, [r6, #0]
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d1d5      	bne.n	800c594 <__sfp+0x24>
 800c5e8:	f7ff ff78 	bl	800c4dc <__sfp_lock_release>
 800c5ec:	230c      	movs	r3, #12
 800c5ee:	603b      	str	r3, [r7, #0]
 800c5f0:	e7ee      	b.n	800c5d0 <__sfp+0x60>
 800c5f2:	bf00      	nop
 800c5f4:	0800d19c 	.word	0x0800d19c
 800c5f8:	ffff0001 	.word	0xffff0001

0800c5fc <_fwalk_reent>:
 800c5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c600:	4606      	mov	r6, r0
 800c602:	4688      	mov	r8, r1
 800c604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c608:	2700      	movs	r7, #0
 800c60a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c60e:	f1b9 0901 	subs.w	r9, r9, #1
 800c612:	d505      	bpl.n	800c620 <_fwalk_reent+0x24>
 800c614:	6824      	ldr	r4, [r4, #0]
 800c616:	2c00      	cmp	r4, #0
 800c618:	d1f7      	bne.n	800c60a <_fwalk_reent+0xe>
 800c61a:	4638      	mov	r0, r7
 800c61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c620:	89ab      	ldrh	r3, [r5, #12]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d907      	bls.n	800c636 <_fwalk_reent+0x3a>
 800c626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c62a:	3301      	adds	r3, #1
 800c62c:	d003      	beq.n	800c636 <_fwalk_reent+0x3a>
 800c62e:	4629      	mov	r1, r5
 800c630:	4630      	mov	r0, r6
 800c632:	47c0      	blx	r8
 800c634:	4307      	orrs	r7, r0
 800c636:	3568      	adds	r5, #104	; 0x68
 800c638:	e7e9      	b.n	800c60e <_fwalk_reent+0x12>

0800c63a <__retarget_lock_init_recursive>:
 800c63a:	4770      	bx	lr

0800c63c <__retarget_lock_acquire_recursive>:
 800c63c:	4770      	bx	lr

0800c63e <__retarget_lock_release_recursive>:
 800c63e:	4770      	bx	lr

0800c640 <__swhatbuf_r>:
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	460e      	mov	r6, r1
 800c644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c648:	2900      	cmp	r1, #0
 800c64a:	b096      	sub	sp, #88	; 0x58
 800c64c:	4614      	mov	r4, r2
 800c64e:	461d      	mov	r5, r3
 800c650:	da08      	bge.n	800c664 <__swhatbuf_r+0x24>
 800c652:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	602a      	str	r2, [r5, #0]
 800c65a:	061a      	lsls	r2, r3, #24
 800c65c:	d410      	bmi.n	800c680 <__swhatbuf_r+0x40>
 800c65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c662:	e00e      	b.n	800c682 <__swhatbuf_r+0x42>
 800c664:	466a      	mov	r2, sp
 800c666:	f000 f8fb 	bl	800c860 <_fstat_r>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	dbf1      	blt.n	800c652 <__swhatbuf_r+0x12>
 800c66e:	9a01      	ldr	r2, [sp, #4]
 800c670:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c674:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c678:	425a      	negs	r2, r3
 800c67a:	415a      	adcs	r2, r3
 800c67c:	602a      	str	r2, [r5, #0]
 800c67e:	e7ee      	b.n	800c65e <__swhatbuf_r+0x1e>
 800c680:	2340      	movs	r3, #64	; 0x40
 800c682:	2000      	movs	r0, #0
 800c684:	6023      	str	r3, [r4, #0]
 800c686:	b016      	add	sp, #88	; 0x58
 800c688:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c68c <__smakebuf_r>:
 800c68c:	898b      	ldrh	r3, [r1, #12]
 800c68e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c690:	079d      	lsls	r5, r3, #30
 800c692:	4606      	mov	r6, r0
 800c694:	460c      	mov	r4, r1
 800c696:	d507      	bpl.n	800c6a8 <__smakebuf_r+0x1c>
 800c698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	6123      	str	r3, [r4, #16]
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	6163      	str	r3, [r4, #20]
 800c6a4:	b002      	add	sp, #8
 800c6a6:	bd70      	pop	{r4, r5, r6, pc}
 800c6a8:	ab01      	add	r3, sp, #4
 800c6aa:	466a      	mov	r2, sp
 800c6ac:	f7ff ffc8 	bl	800c640 <__swhatbuf_r>
 800c6b0:	9900      	ldr	r1, [sp, #0]
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f7fe fa93 	bl	800abe0 <_malloc_r>
 800c6ba:	b948      	cbnz	r0, 800c6d0 <__smakebuf_r+0x44>
 800c6bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6c0:	059a      	lsls	r2, r3, #22
 800c6c2:	d4ef      	bmi.n	800c6a4 <__smakebuf_r+0x18>
 800c6c4:	f023 0303 	bic.w	r3, r3, #3
 800c6c8:	f043 0302 	orr.w	r3, r3, #2
 800c6cc:	81a3      	strh	r3, [r4, #12]
 800c6ce:	e7e3      	b.n	800c698 <__smakebuf_r+0xc>
 800c6d0:	4b0d      	ldr	r3, [pc, #52]	; (800c708 <__smakebuf_r+0x7c>)
 800c6d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	6020      	str	r0, [r4, #0]
 800c6d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6dc:	81a3      	strh	r3, [r4, #12]
 800c6de:	9b00      	ldr	r3, [sp, #0]
 800c6e0:	6163      	str	r3, [r4, #20]
 800c6e2:	9b01      	ldr	r3, [sp, #4]
 800c6e4:	6120      	str	r0, [r4, #16]
 800c6e6:	b15b      	cbz	r3, 800c700 <__smakebuf_r+0x74>
 800c6e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	f000 f8c9 	bl	800c884 <_isatty_r>
 800c6f2:	b128      	cbz	r0, 800c700 <__smakebuf_r+0x74>
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	f023 0303 	bic.w	r3, r3, #3
 800c6fa:	f043 0301 	orr.w	r3, r3, #1
 800c6fe:	81a3      	strh	r3, [r4, #12]
 800c700:	89a0      	ldrh	r0, [r4, #12]
 800c702:	4305      	orrs	r5, r0
 800c704:	81a5      	strh	r5, [r4, #12]
 800c706:	e7cd      	b.n	800c6a4 <__smakebuf_r+0x18>
 800c708:	0800c499 	.word	0x0800c499

0800c70c <_raise_r>:
 800c70c:	291f      	cmp	r1, #31
 800c70e:	b538      	push	{r3, r4, r5, lr}
 800c710:	4604      	mov	r4, r0
 800c712:	460d      	mov	r5, r1
 800c714:	d904      	bls.n	800c720 <_raise_r+0x14>
 800c716:	2316      	movs	r3, #22
 800c718:	6003      	str	r3, [r0, #0]
 800c71a:	f04f 30ff 	mov.w	r0, #4294967295
 800c71e:	bd38      	pop	{r3, r4, r5, pc}
 800c720:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c722:	b112      	cbz	r2, 800c72a <_raise_r+0x1e>
 800c724:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c728:	b94b      	cbnz	r3, 800c73e <_raise_r+0x32>
 800c72a:	4620      	mov	r0, r4
 800c72c:	f000 f830 	bl	800c790 <_getpid_r>
 800c730:	462a      	mov	r2, r5
 800c732:	4601      	mov	r1, r0
 800c734:	4620      	mov	r0, r4
 800c736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c73a:	f000 b817 	b.w	800c76c <_kill_r>
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d00a      	beq.n	800c758 <_raise_r+0x4c>
 800c742:	1c59      	adds	r1, r3, #1
 800c744:	d103      	bne.n	800c74e <_raise_r+0x42>
 800c746:	2316      	movs	r3, #22
 800c748:	6003      	str	r3, [r0, #0]
 800c74a:	2001      	movs	r0, #1
 800c74c:	e7e7      	b.n	800c71e <_raise_r+0x12>
 800c74e:	2400      	movs	r4, #0
 800c750:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c754:	4628      	mov	r0, r5
 800c756:	4798      	blx	r3
 800c758:	2000      	movs	r0, #0
 800c75a:	e7e0      	b.n	800c71e <_raise_r+0x12>

0800c75c <raise>:
 800c75c:	4b02      	ldr	r3, [pc, #8]	; (800c768 <raise+0xc>)
 800c75e:	4601      	mov	r1, r0
 800c760:	6818      	ldr	r0, [r3, #0]
 800c762:	f7ff bfd3 	b.w	800c70c <_raise_r>
 800c766:	bf00      	nop
 800c768:	2000001c 	.word	0x2000001c

0800c76c <_kill_r>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	4d07      	ldr	r5, [pc, #28]	; (800c78c <_kill_r+0x20>)
 800c770:	2300      	movs	r3, #0
 800c772:	4604      	mov	r4, r0
 800c774:	4608      	mov	r0, r1
 800c776:	4611      	mov	r1, r2
 800c778:	602b      	str	r3, [r5, #0]
 800c77a:	f7f6 f827 	bl	80027cc <_kill>
 800c77e:	1c43      	adds	r3, r0, #1
 800c780:	d102      	bne.n	800c788 <_kill_r+0x1c>
 800c782:	682b      	ldr	r3, [r5, #0]
 800c784:	b103      	cbz	r3, 800c788 <_kill_r+0x1c>
 800c786:	6023      	str	r3, [r4, #0]
 800c788:	bd38      	pop	{r3, r4, r5, pc}
 800c78a:	bf00      	nop
 800c78c:	2000099c 	.word	0x2000099c

0800c790 <_getpid_r>:
 800c790:	f7f6 b814 	b.w	80027bc <_getpid>

0800c794 <__sread>:
 800c794:	b510      	push	{r4, lr}
 800c796:	460c      	mov	r4, r1
 800c798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c79c:	f000 f894 	bl	800c8c8 <_read_r>
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	bfab      	itete	ge
 800c7a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7a6:	89a3      	ldrhlt	r3, [r4, #12]
 800c7a8:	181b      	addge	r3, r3, r0
 800c7aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7ae:	bfac      	ite	ge
 800c7b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7b2:	81a3      	strhlt	r3, [r4, #12]
 800c7b4:	bd10      	pop	{r4, pc}

0800c7b6 <__swrite>:
 800c7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ba:	461f      	mov	r7, r3
 800c7bc:	898b      	ldrh	r3, [r1, #12]
 800c7be:	05db      	lsls	r3, r3, #23
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	4616      	mov	r6, r2
 800c7c6:	d505      	bpl.n	800c7d4 <__swrite+0x1e>
 800c7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f000 f868 	bl	800c8a4 <_lseek_r>
 800c7d4:	89a3      	ldrh	r3, [r4, #12]
 800c7d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7de:	81a3      	strh	r3, [r4, #12]
 800c7e0:	4632      	mov	r2, r6
 800c7e2:	463b      	mov	r3, r7
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ea:	f000 b817 	b.w	800c81c <_write_r>

0800c7ee <__sseek>:
 800c7ee:	b510      	push	{r4, lr}
 800c7f0:	460c      	mov	r4, r1
 800c7f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f6:	f000 f855 	bl	800c8a4 <_lseek_r>
 800c7fa:	1c43      	adds	r3, r0, #1
 800c7fc:	89a3      	ldrh	r3, [r4, #12]
 800c7fe:	bf15      	itete	ne
 800c800:	6560      	strne	r0, [r4, #84]	; 0x54
 800c802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c80a:	81a3      	strheq	r3, [r4, #12]
 800c80c:	bf18      	it	ne
 800c80e:	81a3      	strhne	r3, [r4, #12]
 800c810:	bd10      	pop	{r4, pc}

0800c812 <__sclose>:
 800c812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c816:	f000 b813 	b.w	800c840 <_close_r>
	...

0800c81c <_write_r>:
 800c81c:	b538      	push	{r3, r4, r5, lr}
 800c81e:	4d07      	ldr	r5, [pc, #28]	; (800c83c <_write_r+0x20>)
 800c820:	4604      	mov	r4, r0
 800c822:	4608      	mov	r0, r1
 800c824:	4611      	mov	r1, r2
 800c826:	2200      	movs	r2, #0
 800c828:	602a      	str	r2, [r5, #0]
 800c82a:	461a      	mov	r2, r3
 800c82c:	f7f6 f805 	bl	800283a <_write>
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	d102      	bne.n	800c83a <_write_r+0x1e>
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	b103      	cbz	r3, 800c83a <_write_r+0x1e>
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	bd38      	pop	{r3, r4, r5, pc}
 800c83c:	2000099c 	.word	0x2000099c

0800c840 <_close_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	4d06      	ldr	r5, [pc, #24]	; (800c85c <_close_r+0x1c>)
 800c844:	2300      	movs	r3, #0
 800c846:	4604      	mov	r4, r0
 800c848:	4608      	mov	r0, r1
 800c84a:	602b      	str	r3, [r5, #0]
 800c84c:	f7f6 f811 	bl	8002872 <_close>
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	d102      	bne.n	800c85a <_close_r+0x1a>
 800c854:	682b      	ldr	r3, [r5, #0]
 800c856:	b103      	cbz	r3, 800c85a <_close_r+0x1a>
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
 800c85c:	2000099c 	.word	0x2000099c

0800c860 <_fstat_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4d07      	ldr	r5, [pc, #28]	; (800c880 <_fstat_r+0x20>)
 800c864:	2300      	movs	r3, #0
 800c866:	4604      	mov	r4, r0
 800c868:	4608      	mov	r0, r1
 800c86a:	4611      	mov	r1, r2
 800c86c:	602b      	str	r3, [r5, #0]
 800c86e:	f7f6 f80c 	bl	800288a <_fstat>
 800c872:	1c43      	adds	r3, r0, #1
 800c874:	d102      	bne.n	800c87c <_fstat_r+0x1c>
 800c876:	682b      	ldr	r3, [r5, #0]
 800c878:	b103      	cbz	r3, 800c87c <_fstat_r+0x1c>
 800c87a:	6023      	str	r3, [r4, #0]
 800c87c:	bd38      	pop	{r3, r4, r5, pc}
 800c87e:	bf00      	nop
 800c880:	2000099c 	.word	0x2000099c

0800c884 <_isatty_r>:
 800c884:	b538      	push	{r3, r4, r5, lr}
 800c886:	4d06      	ldr	r5, [pc, #24]	; (800c8a0 <_isatty_r+0x1c>)
 800c888:	2300      	movs	r3, #0
 800c88a:	4604      	mov	r4, r0
 800c88c:	4608      	mov	r0, r1
 800c88e:	602b      	str	r3, [r5, #0]
 800c890:	f7f6 f80b 	bl	80028aa <_isatty>
 800c894:	1c43      	adds	r3, r0, #1
 800c896:	d102      	bne.n	800c89e <_isatty_r+0x1a>
 800c898:	682b      	ldr	r3, [r5, #0]
 800c89a:	b103      	cbz	r3, 800c89e <_isatty_r+0x1a>
 800c89c:	6023      	str	r3, [r4, #0]
 800c89e:	bd38      	pop	{r3, r4, r5, pc}
 800c8a0:	2000099c 	.word	0x2000099c

0800c8a4 <_lseek_r>:
 800c8a4:	b538      	push	{r3, r4, r5, lr}
 800c8a6:	4d07      	ldr	r5, [pc, #28]	; (800c8c4 <_lseek_r+0x20>)
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	602a      	str	r2, [r5, #0]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	f7f6 f804 	bl	80028c0 <_lseek>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d102      	bne.n	800c8c2 <_lseek_r+0x1e>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	b103      	cbz	r3, 800c8c2 <_lseek_r+0x1e>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	2000099c 	.word	0x2000099c

0800c8c8 <_read_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	4d07      	ldr	r5, [pc, #28]	; (800c8e8 <_read_r+0x20>)
 800c8cc:	4604      	mov	r4, r0
 800c8ce:	4608      	mov	r0, r1
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	602a      	str	r2, [r5, #0]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	f7f5 ff92 	bl	8002800 <_read>
 800c8dc:	1c43      	adds	r3, r0, #1
 800c8de:	d102      	bne.n	800c8e6 <_read_r+0x1e>
 800c8e0:	682b      	ldr	r3, [r5, #0]
 800c8e2:	b103      	cbz	r3, 800c8e6 <_read_r+0x1e>
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	bd38      	pop	{r3, r4, r5, pc}
 800c8e8:	2000099c 	.word	0x2000099c

0800c8ec <round>:
 800c8ec:	ec51 0b10 	vmov	r0, r1, d0
 800c8f0:	b570      	push	{r4, r5, r6, lr}
 800c8f2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c8f6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c8fa:	2c13      	cmp	r4, #19
 800c8fc:	ee10 2a10 	vmov	r2, s0
 800c900:	460b      	mov	r3, r1
 800c902:	dc19      	bgt.n	800c938 <round+0x4c>
 800c904:	2c00      	cmp	r4, #0
 800c906:	da09      	bge.n	800c91c <round+0x30>
 800c908:	3401      	adds	r4, #1
 800c90a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c90e:	d103      	bne.n	800c918 <round+0x2c>
 800c910:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c914:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c918:	2200      	movs	r2, #0
 800c91a:	e028      	b.n	800c96e <round+0x82>
 800c91c:	4d15      	ldr	r5, [pc, #84]	; (800c974 <round+0x88>)
 800c91e:	4125      	asrs	r5, r4
 800c920:	ea01 0605 	and.w	r6, r1, r5
 800c924:	4332      	orrs	r2, r6
 800c926:	d00e      	beq.n	800c946 <round+0x5a>
 800c928:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c92c:	fa42 f404 	asr.w	r4, r2, r4
 800c930:	4423      	add	r3, r4
 800c932:	ea23 0305 	bic.w	r3, r3, r5
 800c936:	e7ef      	b.n	800c918 <round+0x2c>
 800c938:	2c33      	cmp	r4, #51	; 0x33
 800c93a:	dd07      	ble.n	800c94c <round+0x60>
 800c93c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c940:	d101      	bne.n	800c946 <round+0x5a>
 800c942:	f7f3 fcc3 	bl	80002cc <__adddf3>
 800c946:	ec41 0b10 	vmov	d0, r0, r1
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c950:	f04f 35ff 	mov.w	r5, #4294967295
 800c954:	40f5      	lsrs	r5, r6
 800c956:	4228      	tst	r0, r5
 800c958:	d0f5      	beq.n	800c946 <round+0x5a>
 800c95a:	2101      	movs	r1, #1
 800c95c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c960:	fa01 f404 	lsl.w	r4, r1, r4
 800c964:	1912      	adds	r2, r2, r4
 800c966:	bf28      	it	cs
 800c968:	185b      	addcs	r3, r3, r1
 800c96a:	ea22 0205 	bic.w	r2, r2, r5
 800c96e:	4619      	mov	r1, r3
 800c970:	4610      	mov	r0, r2
 800c972:	e7e8      	b.n	800c946 <round+0x5a>
 800c974:	000fffff 	.word	0x000fffff

0800c978 <_init>:
 800c978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97a:	bf00      	nop
 800c97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c97e:	bc08      	pop	{r3}
 800c980:	469e      	mov	lr, r3
 800c982:	4770      	bx	lr

0800c984 <_fini>:
 800c984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c986:	bf00      	nop
 800c988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c98a:	bc08      	pop	{r3}
 800c98c:	469e      	mov	lr, r3
 800c98e:	4770      	bx	lr
