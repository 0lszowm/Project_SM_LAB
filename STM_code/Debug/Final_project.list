
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a85c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  0800aa30  0800aa30  0001aa30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4e8  0800b4e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4e8  0800b4e8  0001b4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4f0  0800b4f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4f0  0800b4f0  0001b4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4f4  0800b4f4  0001b4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b4f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  20000078  0800b570  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  0800b570  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fe7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037cd  00000000  00000000  0003a08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0003d860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003ed10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c5c  00000000  00000000  00040020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b094  00000000  00000000  00068c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f961f  00000000  00000000  00083d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017d32f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065ec  00000000  00000000  0017d380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aa14 	.word	0x0800aa14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800aa14 	.word	0x0800aa14

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b974 	b.w	8000f5c <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468e      	mov	lr, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14d      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4694      	mov	ip, r2
 8000c9e:	d969      	bls.n	8000d74 <__udivmoddi4+0xe8>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b152      	cbz	r2, 8000cbc <__udivmoddi4+0x30>
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	f1c2 0120 	rsb	r1, r2, #32
 8000cae:	fa20 f101 	lsr.w	r1, r0, r1
 8000cb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cba:	4094      	lsls	r4, r2
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	0c21      	lsrs	r1, r4, #16
 8000cc2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc6:	fa1f f78c 	uxth.w	r7, ip
 8000cca:	fb08 e316 	mls	r3, r8, r6, lr
 8000cce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cd2:	fb06 f107 	mul.w	r1, r6, r7
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ce2:	f080 811f 	bcs.w	8000f24 <__udivmoddi4+0x298>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 811c 	bls.w	8000f24 <__udivmoddi4+0x298>
 8000cec:	3e02      	subs	r6, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a5b      	subs	r3, r3, r1
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d00:	fb00 f707 	mul.w	r7, r0, r7
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x92>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d10:	f080 810a 	bcs.w	8000f28 <__udivmoddi4+0x29c>
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	f240 8107 	bls.w	8000f28 <__udivmoddi4+0x29c>
 8000d1a:	4464      	add	r4, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	1be4      	subs	r4, r4, r7
 8000d24:	2600      	movs	r6, #0
 8000d26:	b11d      	cbz	r5, 8000d30 <__udivmoddi4+0xa4>
 8000d28:	40d4      	lsrs	r4, r2
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0xc2>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	f000 80ef 	beq.w	8000f1e <__udivmoddi4+0x292>
 8000d40:	2600      	movs	r6, #0
 8000d42:	e9c5 0100 	strd	r0, r1, [r5]
 8000d46:	4630      	mov	r0, r6
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	fab3 f683 	clz	r6, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d14a      	bne.n	8000dec <__udivmoddi4+0x160>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xd4>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 80f9 	bhi.w	8000f52 <__udivmoddi4+0x2c6>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb61 0303 	sbc.w	r3, r1, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	469e      	mov	lr, r3
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e0      	beq.n	8000d30 <__udivmoddi4+0xa4>
 8000d6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d72:	e7dd      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000d74:	b902      	cbnz	r2, 8000d78 <__udivmoddi4+0xec>
 8000d76:	deff      	udf	#255	; 0xff
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	f040 8092 	bne.w	8000ea6 <__udivmoddi4+0x21a>
 8000d82:	eba1 010c 	sub.w	r1, r1, ip
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	2601      	movs	r6, #1
 8000d90:	0c20      	lsrs	r0, r4, #16
 8000d92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d96:	fb07 1113 	mls	r1, r7, r3, r1
 8000d9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9e:	fb0e f003 	mul.w	r0, lr, r3
 8000da2:	4288      	cmp	r0, r1
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x12c>
 8000da6:	eb1c 0101 	adds.w	r1, ip, r1
 8000daa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x12a>
 8000db0:	4288      	cmp	r0, r1
 8000db2:	f200 80cb 	bhi.w	8000f4c <__udivmoddi4+0x2c0>
 8000db6:	4643      	mov	r3, r8
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x156>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd8:	d202      	bcs.n	8000de0 <__udivmoddi4+0x154>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f200 80bb 	bhi.w	8000f56 <__udivmoddi4+0x2ca>
 8000de0:	4608      	mov	r0, r1
 8000de2:	eba4 040e 	sub.w	r4, r4, lr
 8000de6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dea:	e79c      	b.n	8000d26 <__udivmoddi4+0x9a>
 8000dec:	f1c6 0720 	rsb	r7, r6, #32
 8000df0:	40b3      	lsls	r3, r6
 8000df2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000e02:	431c      	orrs	r4, r3
 8000e04:	40f9      	lsrs	r1, r7
 8000e06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e12:	0c20      	lsrs	r0, r4, #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fb09 1118 	mls	r1, r9, r8, r1
 8000e1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e20:	fb08 f00e 	mul.w	r0, r8, lr
 8000e24:	4288      	cmp	r0, r1
 8000e26:	fa02 f206 	lsl.w	r2, r2, r6
 8000e2a:	d90b      	bls.n	8000e44 <__udivmoddi4+0x1b8>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e34:	f080 8088 	bcs.w	8000f48 <__udivmoddi4+0x2bc>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f240 8085 	bls.w	8000f48 <__udivmoddi4+0x2bc>
 8000e3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	458e      	cmp	lr, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x1e2>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e64:	d26c      	bcs.n	8000f40 <__udivmoddi4+0x2b4>
 8000e66:	458e      	cmp	lr, r1
 8000e68:	d96a      	bls.n	8000f40 <__udivmoddi4+0x2b4>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e72:	fba0 9402 	umull	r9, r4, r0, r2
 8000e76:	eba1 010e 	sub.w	r1, r1, lr
 8000e7a:	42a1      	cmp	r1, r4
 8000e7c:	46c8      	mov	r8, r9
 8000e7e:	46a6      	mov	lr, r4
 8000e80:	d356      	bcc.n	8000f30 <__udivmoddi4+0x2a4>
 8000e82:	d053      	beq.n	8000f2c <__udivmoddi4+0x2a0>
 8000e84:	b15d      	cbz	r5, 8000e9e <__udivmoddi4+0x212>
 8000e86:	ebb3 0208 	subs.w	r2, r3, r8
 8000e8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e92:	fa22 f306 	lsr.w	r3, r2, r6
 8000e96:	40f1      	lsrs	r1, r6
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9e:	2600      	movs	r6, #0
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	f1c2 0320 	rsb	r3, r2, #32
 8000eaa:	40d8      	lsrs	r0, r3
 8000eac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	4301      	orrs	r1, r0
 8000eb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec8:	0c0b      	lsrs	r3, r1, #16
 8000eca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ece:	fb00 f60e 	mul.w	r6, r0, lr
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x260>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee2:	d22f      	bcs.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee4:	429e      	cmp	r6, r3
 8000ee6:	d92d      	bls.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4463      	add	r3, ip
 8000eec:	1b9b      	subs	r3, r3, r6
 8000eee:	b289      	uxth	r1, r1
 8000ef0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efc:	fb06 f30e 	mul.w	r3, r6, lr
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x28a>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f0c:	d216      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d914      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000f12:	3e02      	subs	r6, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f1c:	e738      	b.n	8000d90 <__udivmoddi4+0x104>
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e705      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e3      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6f8      	b.n	8000d1e <__udivmoddi4+0x92>
 8000f2c:	454b      	cmp	r3, r9
 8000f2e:	d2a9      	bcs.n	8000e84 <__udivmoddi4+0x1f8>
 8000f30:	ebb9 0802 	subs.w	r8, r9, r2
 8000f34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7a3      	b.n	8000e84 <__udivmoddi4+0x1f8>
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	e7ea      	b.n	8000f16 <__udivmoddi4+0x28a>
 8000f40:	4620      	mov	r0, r4
 8000f42:	e794      	b.n	8000e6e <__udivmoddi4+0x1e2>
 8000f44:	4640      	mov	r0, r8
 8000f46:	e7d1      	b.n	8000eec <__udivmoddi4+0x260>
 8000f48:	46d0      	mov	r8, sl
 8000f4a:	e77b      	b.n	8000e44 <__udivmoddi4+0x1b8>
 8000f4c:	3b02      	subs	r3, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	e732      	b.n	8000db8 <__udivmoddi4+0x12c>
 8000f52:	4630      	mov	r0, r6
 8000f54:	e709      	b.n	8000d6a <__udivmoddi4+0xde>
 8000f56:	4464      	add	r4, ip
 8000f58:	3802      	subs	r0, #2
 8000f5a:	e742      	b.n	8000de2 <__udivmoddi4+0x156>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <MCP9808_Init>:
 * write bit.
 *
 * @param hi2c A pointer to the I2C handler.
 * @param addr Address of MCP9808 on I2C bus (default 0x18).
 */
void MCP9808_Init(I2C_HandleTypeDef *hi2c, uint8_t addr) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
	mcp9808.hi2c = hi2c;
 8000f6c:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <MCP9808_Init+0x30>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
	mcp9808.address = addr << 1;
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <MCP9808_Init+0x30>)
 8000f7a:	711a      	strb	r2, [r3, #4]
	mcp9808.resolution = MCP9808_VeryHigh_Res;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <MCP9808_Init+0x30>)
 8000f7e:	2203      	movs	r2, #3
 8000f80:	715a      	strb	r2, [r3, #5]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000094 	.word	0x20000094

08000f94 <MCP9808_Write>:
 *
 * @param _reg Pointer to a register.
 * @param value The data on which to send.
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Write(MCP9808_REG_TypeDef *_reg, uint8_t *value) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
	uint8_t reg[] = {*_reg, *value};
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	733b      	strb	r3, [r7, #12]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MCP9808_Write+0x40>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MCP9808_Write+0x40>)
 8000fb0:	791b      	ldrb	r3, [r3, #4]
 8000fb2:	b299      	uxth	r1, r3
 8000fb4:	f107 020c 	add.w	r2, r7, #12
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	f002 fdec 	bl	8003b9c <HAL_I2C_Master_Transmit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
			reg, sizeof(reg), HAL_MAX_DELAY);

	return res;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000094 	.word	0x20000094

08000fd8 <MCP9808_Read>:
 * @param _reg Pointer to a register.
 * @param buf A pointer to a buffer to store the response in.
 * @param buf_size The size of the buffer (n values).
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Read(MCP9808_REG_TypeDef *_reg, uint8_t *buf, uint8_t buf_size) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	71fb      	strb	r3, [r7, #7]

	uint8_t reg[1] = {*_reg};
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MCP9808_Read+0x70>)
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MCP9808_Read+0x70>)
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	f107 0214 	add.w	r2, r7, #20
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	f002 fdcb 	bl	8003b9c <HAL_I2C_Master_Transmit>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]
			reg, sizeof(reg), HAL_MAX_DELAY);


	if(res != HAL_OK){
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MCP9808_Read+0x3c>
		return res;
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	e014      	b.n	800103e <MCP9808_Read+0x66>
	}

	res = HAL_I2C_Master_Receive(mcp9808.hi2c, mcp9808.address, buf, buf_size, HAL_MAX_DELAY);
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MCP9808_Read+0x70>)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MCP9808_Read+0x70>)
 800101a:	791b      	ldrb	r3, [r3, #4]
 800101c:	b299      	uxth	r1, r3
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	b29b      	uxth	r3, r3
 8001022:	f04f 32ff 	mov.w	r2, #4294967295
 8001026:	9200      	str	r2, [sp, #0]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	f002 feab 	bl	8003d84 <HAL_I2C_Master_Receive>
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]

	if(res != HAL_OK){
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MCP9808_Read+0x64>
		return res;
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	e000      	b.n	800103e <MCP9808_Read+0x66>
	}

	return res;
 800103c:	7dfb      	ldrb	r3, [r7, #23]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000094 	.word	0x20000094

0800104c <MCP9808_MeasureTemperature>:
 *
 * @param temperature A pointer to a temperature float to store a returned
 * value from.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_MeasureTemperature(float *temperature) {
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

	MCP9808_REG_TypeDef reg = MCP9808_T_AMBIENT_REG;
 8001054:	2305      	movs	r3, #5
 8001056:	733b      	strb	r3, [r7, #12]
	uint8_t buf[2];
	HAL_StatusTypeDef res = MCP9808_Read(&reg, buf, sizeof(buf));
 8001058:	f107 0108 	add.w	r1, r7, #8
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2202      	movs	r2, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ffb8 	bl	8000fd8 <MCP9808_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d162      	bne.n	8001138 <MCP9808_MeasureTemperature+0xec>
		uint8_t upper = buf[0];
 8001072:	7a3b      	ldrb	r3, [r7, #8]
 8001074:	73bb      	strb	r3, [r7, #14]
		upper &= 0x1F;
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	73bb      	strb	r3, [r7, #14]
		uint8_t lower = buf[1];
 800107e:	7a7b      	ldrb	r3, [r7, #9]
 8001080:	737b      	strb	r3, [r7, #13]

		if((upper & 0x10) == 0x10) {
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	2b00      	cmp	r3, #0
 800108a:	d030      	beq.n	80010ee <MCP9808_MeasureTemperature+0xa2>
			upper &= 0x0F;
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	73bb      	strb	r3, [r7, #14]
			*temperature = 256 - (upper * 16.0) + (lower / 16.0);
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa64 	bl	8000564 <__aeabi_i2d>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <MCP9808_MeasureTemperature+0xf8>)
 80010a2:	f7ff fac9 	bl	8000638 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4926      	ldr	r1, [pc, #152]	; (8001148 <MCP9808_MeasureTemperature+0xfc>)
 80010b0:	f7ff f90a 	bl	80002c8 <__aeabi_dsub>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4614      	mov	r4, r2
 80010ba:	461d      	mov	r5, r3
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa50 	bl	8000564 <__aeabi_i2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MCP9808_MeasureTemperature+0xf8>)
 80010ca:	f7ff fbdf 	bl	800088c <__aeabi_ddiv>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4620      	mov	r0, r4
 80010d4:	4629      	mov	r1, r5
 80010d6:	f7ff f8f9 	bl	80002cc <__adddf3>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fd6b 	bl	8000bbc <__aeabi_d2f>
 80010e6:	4602      	mov	r2, r0
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e024      	b.n	8001138 <MCP9808_MeasureTemperature+0xec>
		} else {
			*temperature = (upper * 16.0) + (lower / 16.0);
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa37 	bl	8000564 <__aeabi_i2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MCP9808_MeasureTemperature+0xf8>)
 80010fc:	f7ff fa9c 	bl	8000638 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4614      	mov	r4, r2
 8001106:	461d      	mov	r5, r3
 8001108:	7b7b      	ldrb	r3, [r7, #13]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa2a 	bl	8000564 <__aeabi_i2d>
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MCP9808_MeasureTemperature+0xf8>)
 8001116:	f7ff fbb9 	bl	800088c <__aeabi_ddiv>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4620      	mov	r0, r4
 8001120:	4629      	mov	r1, r5
 8001122:	f7ff f8d3 	bl	80002cc <__adddf3>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fd45 	bl	8000bbc <__aeabi_d2f>
 8001132:	4602      	mov	r2, r0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	601a      	str	r2, [r3, #0]
		}
	}

	return res;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bdb0      	pop	{r4, r5, r7, pc}
 8001142:	bf00      	nop
 8001144:	40300000 	.word	0x40300000
 8001148:	40700000 	.word	0x40700000

0800114c <MCP9808_SetResolution>:
 * VeryHigh = 0.0625 (slowest 250 ms)
 *
 * @param resolution Desired resolution to switch to.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_SetResolution(MCP9808_Resolution_TypeDef resolution) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]

	MCP9808_REG_TypeDef reg = MCP9808_RESOLUTION_REG;
 8001156:	2308      	movs	r3, #8
 8001158:	73bb      	strb	r3, [r7, #14]
	uint8_t value = resolution & 0x03;
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef res = MCP9808_Write(&reg, &value);
 8001164:	f107 020d 	add.w	r2, r7, #13
 8001168:	f107 030e 	add.w	r3, r7, #14
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff10 	bl	8000f94 <MCP9808_Write>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <MCP9808_SetResolution+0x38>
		mcp9808.resolution = resolution;
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <MCP9808_SetResolution+0x44>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	7153      	strb	r3, [r2, #5]
	}

	return res;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000094 	.word	0x20000094

08001194 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af04      	add	r7, sp, #16
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2200      	movs	r2, #0
 80011c0:	2178      	movs	r1, #120	; 0x78
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <ssd1306_WriteCommand+0x2c>)
 80011c4:	f002 fed4 	bl	8003f70 <HAL_I2C_Mem_Write>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200004ec 	.word	0x200004ec

080011d4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af04      	add	r7, sp, #16
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	f04f 32ff 	mov.w	r2, #4294967295
 80011e6:	9202      	str	r2, [sp, #8]
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	2178      	movs	r1, #120	; 0x78
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <ssd1306_WriteData+0x30>)
 80011f6:	f002 febb 	bl	8003f70 <HAL_I2C_Mem_Write>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200004ec 	.word	0x200004ec

08001208 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800120c:	f7ff ffc2 	bl	8001194 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f001 fc93 	bl	8002b3c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f9da 	bl	80015d0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800121c:	2020      	movs	r0, #32
 800121e:	f7ff ffc1 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ffbe 	bl	80011a4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001228:	20b0      	movs	r0, #176	; 0xb0
 800122a:	f7ff ffbb 	bl	80011a4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800122e:	20c8      	movs	r0, #200	; 0xc8
 8001230:	f7ff ffb8 	bl	80011a4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ffb5 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800123a:	2010      	movs	r0, #16
 800123c:	f7ff ffb2 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001240:	2040      	movs	r0, #64	; 0x40
 8001242:	f7ff ffaf 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001246:	20ff      	movs	r0, #255	; 0xff
 8001248:	f000 f9ae 	bl	80015a8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800124c:	20a1      	movs	r0, #161	; 0xa1
 800124e:	f7ff ffa9 	bl	80011a4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001252:	20a6      	movs	r0, #166	; 0xa6
 8001254:	f7ff ffa6 	bl	80011a4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001258:	20a8      	movs	r0, #168	; 0xa8
 800125a:	f7ff ffa3 	bl	80011a4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800125e:	203f      	movs	r0, #63	; 0x3f
 8001260:	f7ff ffa0 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001264:	20a4      	movs	r0, #164	; 0xa4
 8001266:	f7ff ff9d 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800126a:	20d3      	movs	r0, #211	; 0xd3
 800126c:	f7ff ff9a 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff ff97 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001276:	20d5      	movs	r0, #213	; 0xd5
 8001278:	f7ff ff94 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800127c:	20f0      	movs	r0, #240	; 0xf0
 800127e:	f7ff ff91 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001282:	20d9      	movs	r0, #217	; 0xd9
 8001284:	f7ff ff8e 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001288:	2022      	movs	r0, #34	; 0x22
 800128a:	f7ff ff8b 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800128e:	20da      	movs	r0, #218	; 0xda
 8001290:	f7ff ff88 	bl	80011a4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001294:	2012      	movs	r0, #18
 8001296:	f7ff ff85 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800129a:	20db      	movs	r0, #219	; 0xdb
 800129c:	f7ff ff82 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012a0:	2020      	movs	r0, #32
 80012a2:	f7ff ff7f 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012a6:	208d      	movs	r0, #141	; 0x8d
 80012a8:	f7ff ff7c 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80012ac:	2014      	movs	r0, #20
 80012ae:	f7ff ff79 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012b2:	2001      	movs	r0, #1
 80012b4:	f000 f98c 	bl	80015d0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 f80f 	bl	80012dc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012be:	f000 f831 	bl	8001324 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <ssd1306_Init+0xd0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <ssd1306_Init+0xd0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012ce:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <ssd1306_Init+0xd0>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	711a      	strb	r2, [r3, #4]
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000049c 	.word	0x2000049c

080012dc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	e00d      	b.n	8001308 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <ssd1306_Fill+0x1a>
 80012f2:	2100      	movs	r1, #0
 80012f4:	e000      	b.n	80012f8 <ssd1306_Fill+0x1c>
 80012f6:	21ff      	movs	r1, #255	; 0xff
 80012f8:	4a09      	ldr	r2, [pc, #36]	; (8001320 <ssd1306_Fill+0x44>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	460a      	mov	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3301      	adds	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130e:	d3ed      	bcc.n	80012ec <ssd1306_Fill+0x10>
    }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	2000009c 	.word	0x2000009c

08001324 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e016      	b.n	800135e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	3b50      	subs	r3, #80	; 0x50
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff34 	bl	80011a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ff31 	bl	80011a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001342:	2010      	movs	r0, #16
 8001344:	f7ff ff2e 	bl	80011a4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	01db      	lsls	r3, r3, #7
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <ssd1306_UpdateScreen+0x4c>)
 800134e:	4413      	add	r3, r2
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff3e 	bl	80011d4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	3301      	adds	r3, #1
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b07      	cmp	r3, #7
 8001362:	d9e5      	bls.n	8001330 <ssd1306_UpdateScreen+0xc>
    }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000009c 	.word	0x2000009c

08001374 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	460b      	mov	r3, r1
 8001380:	71bb      	strb	r3, [r7, #6]
 8001382:	4613      	mov	r3, r2
 8001384:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db3d      	blt.n	800140a <ssd1306_DrawPixel+0x96>
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	2b3f      	cmp	r3, #63	; 0x3f
 8001392:	d83a      	bhi.n	800140a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d11a      	bne.n	80013d0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	08db      	lsrs	r3, r3, #3
 80013a0:	b2d8      	uxtb	r0, r3
 80013a2:	4603      	mov	r3, r0
 80013a4:	01db      	lsls	r3, r3, #7
 80013a6:	4413      	add	r3, r2
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <ssd1306_DrawPixel+0xa4>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	b25a      	sxtb	r2, r3
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	2101      	movs	r1, #1
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b259      	sxtb	r1, r3
 80013c0:	79fa      	ldrb	r2, [r7, #7]
 80013c2:	4603      	mov	r3, r0
 80013c4:	01db      	lsls	r3, r3, #7
 80013c6:	4413      	add	r3, r2
 80013c8:	b2c9      	uxtb	r1, r1
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <ssd1306_DrawPixel+0xa4>)
 80013cc:	54d1      	strb	r1, [r2, r3]
 80013ce:	e01d      	b.n	800140c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013d0:	79fa      	ldrb	r2, [r7, #7]
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	08db      	lsrs	r3, r3, #3
 80013d6:	b2d8      	uxtb	r0, r3
 80013d8:	4603      	mov	r3, r0
 80013da:	01db      	lsls	r3, r3, #7
 80013dc:	4413      	add	r3, r2
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <ssd1306_DrawPixel+0xa4>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	b25a      	sxtb	r2, r3
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	4013      	ands	r3, r2
 80013f8:	b259      	sxtb	r1, r3
 80013fa:	79fa      	ldrb	r2, [r7, #7]
 80013fc:	4603      	mov	r3, r0
 80013fe:	01db      	lsls	r3, r3, #7
 8001400:	4413      	add	r3, r2
 8001402:	b2c9      	uxtb	r1, r1
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <ssd1306_DrawPixel+0xa4>)
 8001406:	54d1      	strb	r1, [r2, r3]
 8001408:	e000      	b.n	800140c <ssd1306_DrawPixel+0x98>
        return;
 800140a:	bf00      	nop
    }
}
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000009c 	.word	0x2000009c

0800141c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	4604      	mov	r4, r0
 8001424:	1d38      	adds	r0, r7, #4
 8001426:	e880 0006 	stmia.w	r0, {r1, r2}
 800142a:	461a      	mov	r2, r3
 800142c:	4623      	mov	r3, r4
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	4613      	mov	r3, r2
 8001432:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b1f      	cmp	r3, #31
 8001438:	d902      	bls.n	8001440 <ssd1306_WriteChar+0x24>
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b7e      	cmp	r3, #126	; 0x7e
 800143e:	d901      	bls.n	8001444 <ssd1306_WriteChar+0x28>
        return 0;
 8001440:	2300      	movs	r3, #0
 8001442:	e06d      	b.n	8001520 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001444:	4b38      	ldr	r3, [pc, #224]	; (8001528 <ssd1306_WriteChar+0x10c>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	793b      	ldrb	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	2b80      	cmp	r3, #128	; 0x80
 8001450:	dc06      	bgt.n	8001460 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <ssd1306_WriteChar+0x10c>)
 8001454:	885b      	ldrh	r3, [r3, #2]
 8001456:	461a      	mov	r2, r3
 8001458:	797b      	ldrb	r3, [r7, #5]
 800145a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800145c:	2b40      	cmp	r3, #64	; 0x40
 800145e:	dd01      	ble.n	8001464 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001460:	2300      	movs	r3, #0
 8001462:	e05d      	b.n	8001520 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	e04c      	b.n	8001504 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	3b20      	subs	r3, #32
 8001470:	7979      	ldrb	r1, [r7, #5]
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	4619      	mov	r1, r3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	440b      	add	r3, r1
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	e034      	b.n	80014f4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d012      	beq.n	80014c0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <ssd1306_WriteChar+0x10c>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	b2d8      	uxtb	r0, r3
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <ssd1306_WriteChar+0x10c>)
 80014aa:	885b      	ldrh	r3, [r3, #2]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	7bba      	ldrb	r2, [r7, #14]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff ff5b 	bl	8001374 <ssd1306_DrawPixel>
 80014be:	e016      	b.n	80014ee <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <ssd1306_WriteChar+0x10c>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b2d8      	uxtb	r0, r3
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <ssd1306_WriteChar+0x10c>)
 80014d0:	885b      	ldrh	r3, [r3, #2]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4413      	add	r3, r2
 80014da:	b2d9      	uxtb	r1, r3
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	f7ff ff43 	bl	8001374 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	793b      	ldrb	r3, [r7, #4]
 80014f6:	461a      	mov	r2, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d3c5      	bcc.n	800148a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	797b      	ldrb	r3, [r7, #5]
 8001506:	461a      	mov	r2, r3
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4293      	cmp	r3, r2
 800150c:	d3ad      	bcc.n	800146a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <ssd1306_WriteChar+0x10c>)
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	793b      	ldrb	r3, [r7, #4]
 8001514:	b29b      	uxth	r3, r3
 8001516:	4413      	add	r3, r2
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b03      	ldr	r3, [pc, #12]	; (8001528 <ssd1306_WriteChar+0x10c>)
 800151c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3724      	adds	r7, #36	; 0x24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	2000049c 	.word	0x2000049c

0800152c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	1d38      	adds	r0, r7, #4
 8001536:	e880 0006 	stmia.w	r0, {r1, r2}
 800153a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800153c:	e012      	b.n	8001564 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	7818      	ldrb	r0, [r3, #0]
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	1d3a      	adds	r2, r7, #4
 8001546:	ca06      	ldmia	r2, {r1, r2}
 8001548:	f7ff ff68 	bl	800141c <ssd1306_WriteChar>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d002      	beq.n	800155e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	e008      	b.n	8001570 <ssd1306_WriteString+0x44>
        }
        str++;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3301      	adds	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e8      	bne.n	800153e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	781b      	ldrb	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	460a      	mov	r2, r1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4613      	mov	r3, r2
 8001586:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <ssd1306_SetCursor+0x2c>)
 800158e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <ssd1306_SetCursor+0x2c>)
 8001596:	805a      	strh	r2, [r3, #2]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	2000049c 	.word	0x2000049c

080015a8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80015b2:	2381      	movs	r3, #129	; 0x81
 80015b4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fdf3 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fdef 	bl	80011a4 <ssd1306_WriteCommand>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80015e0:	23af      	movs	r3, #175	; 0xaf
 80015e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <ssd1306_SetDisplayOn+0x38>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	715a      	strb	r2, [r3, #5]
 80015ea:	e004      	b.n	80015f6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80015ec:	23ae      	movs	r3, #174	; 0xae
 80015ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <ssd1306_SetDisplayOn+0x38>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fdd3 	bl	80011a4 <ssd1306_WriteCommand>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000049c 	.word	0x2000049c

0800160c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <MX_ADC1_Init+0x9c>)
 8001622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_ADC1_Init+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_ADC1_Init+0x98>)
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_ADC1_Init+0x98>)
 800164c:	4a17      	ldr	r2, [pc, #92]	; (80016ac <MX_ADC1_Init+0xa0>)
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001658:	2201      	movs	r2, #1
 800165a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_ADC1_Init+0x98>)
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_ADC1_Init+0x98>)
 8001666:	2201      	movs	r2, #1
 8001668:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800166a:	480e      	ldr	r0, [pc, #56]	; (80016a4 <MX_ADC1_Init+0x98>)
 800166c:	f001 fa8a 	bl	8002b84 <HAL_ADC_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 fdbd 	bl	80021f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800167a:	2303      	movs	r3, #3
 800167c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167e:	2301      	movs	r3, #1
 8001680:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_ADC1_Init+0x98>)
 800168c:	f001 fc24 	bl	8002ed8 <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001696:	f000 fdad 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200004a4 	.word	0x200004a4
 80016a8:	40012000 	.word	0x40012000
 80016ac:	0f000001 	.word	0x0f000001

080016b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a15      	ldr	r2, [pc, #84]	; (8001724 <HAL_ADC_MspInit+0x74>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d123      	bne.n	800171a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_ADC_MspInit+0x78>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a14      	ldr	r2, [pc, #80]	; (8001728 <HAL_ADC_MspInit+0x78>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_ADC_MspInit+0x78>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_ADC_MspInit+0x78>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_ADC_MspInit+0x78>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_ADC_MspInit+0x78>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001702:	2308      	movs	r3, #8
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001706:	2303      	movs	r3, #3
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	; (800172c <HAL_ADC_MspInit+0x7c>)
 8001716:	f001 ffd3 	bl	80036c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40012000 	.word	0x40012000
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000

08001730 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08e      	sub	sp, #56	; 0x38
 8001734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	4b89      	ldr	r3, [pc, #548]	; (800196c <MX_GPIO_Init+0x23c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a88      	ldr	r2, [pc, #544]	; (800196c <MX_GPIO_Init+0x23c>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b86      	ldr	r3, [pc, #536]	; (800196c <MX_GPIO_Init+0x23c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	623b      	str	r3, [r7, #32]
 800175c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800175e:	4b83      	ldr	r3, [pc, #524]	; (800196c <MX_GPIO_Init+0x23c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a82      	ldr	r2, [pc, #520]	; (800196c <MX_GPIO_Init+0x23c>)
 8001764:	f043 0320 	orr.w	r3, r3, #32
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b80      	ldr	r3, [pc, #512]	; (800196c <MX_GPIO_Init+0x23c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001776:	4b7d      	ldr	r3, [pc, #500]	; (800196c <MX_GPIO_Init+0x23c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a7c      	ldr	r2, [pc, #496]	; (800196c <MX_GPIO_Init+0x23c>)
 800177c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b7a      	ldr	r3, [pc, #488]	; (800196c <MX_GPIO_Init+0x23c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b77      	ldr	r3, [pc, #476]	; (800196c <MX_GPIO_Init+0x23c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a76      	ldr	r2, [pc, #472]	; (800196c <MX_GPIO_Init+0x23c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b74      	ldr	r3, [pc, #464]	; (800196c <MX_GPIO_Init+0x23c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	4b71      	ldr	r3, [pc, #452]	; (800196c <MX_GPIO_Init+0x23c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a70      	ldr	r2, [pc, #448]	; (800196c <MX_GPIO_Init+0x23c>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b6e      	ldr	r3, [pc, #440]	; (800196c <MX_GPIO_Init+0x23c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017be:	4b6b      	ldr	r3, [pc, #428]	; (800196c <MX_GPIO_Init+0x23c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a6a      	ldr	r2, [pc, #424]	; (800196c <MX_GPIO_Init+0x23c>)
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b68      	ldr	r3, [pc, #416]	; (800196c <MX_GPIO_Init+0x23c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <MX_GPIO_Init+0x23c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a64      	ldr	r2, [pc, #400]	; (800196c <MX_GPIO_Init+0x23c>)
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b62      	ldr	r3, [pc, #392]	; (800196c <MX_GPIO_Init+0x23c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ee:	4b5f      	ldr	r3, [pc, #380]	; (800196c <MX_GPIO_Init+0x23c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a5e      	ldr	r2, [pc, #376]	; (800196c <MX_GPIO_Init+0x23c>)
 80017f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b5c      	ldr	r3, [pc, #368]	; (800196c <MX_GPIO_Init+0x23c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f244 0181 	movw	r1, #16513	; 0x4081
 800180c:	4858      	ldr	r0, [pc, #352]	; (8001970 <MX_GPIO_Init+0x240>)
 800180e:	f002 f91b 	bl	8003a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2140      	movs	r1, #64	; 0x40
 8001816:	4857      	ldr	r0, [pc, #348]	; (8001974 <MX_GPIO_Init+0x244>)
 8001818:	f002 f916 	bl	8003a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800181c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001822:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001830:	4619      	mov	r1, r3
 8001832:	4851      	ldr	r0, [pc, #324]	; (8001978 <MX_GPIO_Init+0x248>)
 8001834:	f001 ff44 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001838:	2332      	movs	r3, #50	; 0x32
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001848:	230b      	movs	r3, #11
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	4849      	ldr	r0, [pc, #292]	; (8001978 <MX_GPIO_Init+0x248>)
 8001854:	f001 ff34 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001858:	2386      	movs	r3, #134	; 0x86
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001868:	230b      	movs	r3, #11
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4842      	ldr	r0, [pc, #264]	; (800197c <MX_GPIO_Init+0x24c>)
 8001874:	f001 ff24 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001878:	f244 0381 	movw	r3, #16513	; 0x4081
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188e:	4619      	mov	r1, r3
 8001890:	4837      	ldr	r0, [pc, #220]	; (8001970 <MX_GPIO_Init+0x240>)
 8001892:	f001 ff15 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018a8:	230b      	movs	r3, #11
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	482f      	ldr	r0, [pc, #188]	; (8001970 <MX_GPIO_Init+0x240>)
 80018b4:	f001 ff04 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018b8:	2340      	movs	r3, #64	; 0x40
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	4829      	ldr	r0, [pc, #164]	; (8001974 <MX_GPIO_Init+0x244>)
 80018d0:	f001 fef6 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	4823      	ldr	r0, [pc, #140]	; (8001974 <MX_GPIO_Init+0x244>)
 80018e8:	f001 feea 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = przycisk0_Pin;
 80018ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(przycisk0_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fe:	4619      	mov	r1, r3
 8001900:	481d      	ldr	r0, [pc, #116]	; (8001978 <MX_GPIO_Init+0x248>)
 8001902:	f001 fedd 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001906:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001918:	230a      	movs	r3, #10
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001920:	4619      	mov	r1, r3
 8001922:	4816      	ldr	r0, [pc, #88]	; (800197c <MX_GPIO_Init+0x24c>)
 8001924:	f001 fecc 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192e:	2300      	movs	r3, #0
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193a:	4619      	mov	r1, r3
 800193c:	480f      	ldr	r0, [pc, #60]	; (800197c <MX_GPIO_Init+0x24c>)
 800193e:	f001 febf 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001942:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001954:	230b      	movs	r3, #11
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195c:	4619      	mov	r1, r3
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_GPIO_Init+0x244>)
 8001960:	f001 feae 	bl	80036c0 <HAL_GPIO_Init>

}
 8001964:	bf00      	nop
 8001966:	3738      	adds	r7, #56	; 0x38
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400
 8001974:	40021800 	.word	0x40021800
 8001978:	40020800 	.word	0x40020800
 800197c:	40020000 	.word	0x40020000

08001980 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <MX_I2C2_Init+0x74>)
 8001986:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <MX_I2C2_Init+0x78>)
 8001988:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00501FE4;
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_I2C2_Init+0x74>)
 800198c:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <MX_I2C2_Init+0x7c>)
 800198e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <MX_I2C2_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_I2C2_Init+0x74>)
 8001998:	2201      	movs	r2, #1
 800199a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <MX_I2C2_Init+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_I2C2_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_I2C2_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_I2C2_Init+0x74>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_I2C2_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019ba:	480e      	ldr	r0, [pc, #56]	; (80019f4 <MX_I2C2_Init+0x74>)
 80019bc:	f002 f85e 	bl	8003a7c <HAL_I2C_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80019c6:	f000 fc15 	bl	80021f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019ca:	2100      	movs	r1, #0
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <MX_I2C2_Init+0x74>)
 80019ce:	f002 fea3 	bl	8004718 <HAL_I2CEx_ConfigAnalogFilter>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80019d8:	f000 fc0c 	bl	80021f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80019dc:	2100      	movs	r1, #0
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_I2C2_Init+0x74>)
 80019e0:	f002 fee5 	bl	80047ae <HAL_I2CEx_ConfigDigitalFilter>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80019ea:	f000 fc03 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200004ec 	.word	0x200004ec
 80019f8:	40005800 	.word	0x40005800
 80019fc:	00501fe4 	.word	0x00501fe4

08001a00 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a06:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <MX_I2C4_Init+0x78>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a0c:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <MX_I2C4_Init+0x7c>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001a3a:	480e      	ldr	r0, [pc, #56]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a3c:	f002 f81e 	bl	8003a7c <HAL_I2C_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001a46:	f000 fbd5 	bl	80021f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4809      	ldr	r0, [pc, #36]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a4e:	f002 fe63 	bl	8004718 <HAL_I2CEx_ConfigAnalogFilter>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001a58:	f000 fbcc 	bl	80021f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_I2C4_Init+0x74>)
 8001a60:	f002 fea5 	bl	80047ae <HAL_I2CEx_ConfigDigitalFilter>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001a6a:	f000 fbc3 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000540 	.word	0x20000540
 8001a78:	40006000 	.word	0x40006000
 8001a7c:	20404768 	.word	0x20404768

08001a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0ac      	sub	sp, #176	; 0xb0
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a98:	f107 0318 	add.w	r3, r7, #24
 8001a9c:	2284      	movs	r2, #132	; 0x84
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f006 fc31 	bl	8008308 <memset>
  if(i2cHandle->Instance==I2C2)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a44      	ldr	r2, [pc, #272]	; (8001bbc <HAL_I2C_MspInit+0x13c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d13d      	bne.n	8001b2c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ab4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001abc:	f107 0318 	add.w	r3, r7, #24
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 fbeb 	bl	800529c <HAL_RCCEx_PeriphCLKConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001acc:	f000 fb92 	bl	80021f4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad0:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	4a3a      	ldr	r2, [pc, #232]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001ad6:	f043 0320 	orr.w	r3, r3, #32
 8001ada:	6313      	str	r3, [r2, #48]	; 0x30
 8001adc:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aee:	2312      	movs	r3, #18
 8001af0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b00:	2304      	movs	r3, #4
 8001b02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	482d      	ldr	r0, [pc, #180]	; (8001bc4 <HAL_I2C_MspInit+0x144>)
 8001b0e:	f001 fdd7 	bl	80036c0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b12:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a2a      	ldr	r2, [pc, #168]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001b2a:	e042      	b.n	8001bb2 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a25      	ldr	r2, [pc, #148]	; (8001bc8 <HAL_I2C_MspInit+0x148>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d13d      	bne.n	8001bb2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fba8 	bl	800529c <HAL_RCCEx_PeriphCLKConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001b52:	f000 fb4f 	bl	80021f4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001b5c:	f043 0320 	orr.w	r3, r3, #32
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b76:	2312      	movs	r3, #18
 8001b78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b92:	4619      	mov	r1, r3
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <HAL_I2C_MspInit+0x144>)
 8001b96:	f001 fd93 	bl	80036c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_I2C_MspInit+0x140>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
}
 8001bb2:	bf00      	nop
 8001bb4:	37b0      	adds	r7, #176	; 0xb0
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40005800 	.word	0x40005800
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40021400 	.word	0x40021400
 8001bc8:	40006000 	.word	0x40006000

08001bcc <HAL_UART_RxCpltCallback>:
/*
 * tu beda przerwania
 */

// Z tym gównem też chyba jest coś nie tak
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart3, received_data, 3); // Tu włącza sie to gowno znowu :)
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <zadajnik>:

float zadajnik() {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001be6:	480e      	ldr	r0, [pc, #56]	; (8001c20 <zadajnik+0x40>)
 8001be8:	f001 f810 	bl	8002c0c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <zadajnik+0x40>)
 8001bf2:	f001 f8d9 	bl	8002da8 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8001bf6:	480a      	ldr	r0, [pc, #40]	; (8001c20 <zadajnik+0x40>)
 8001bf8:	f001 f961 	bl	8002ebe <HAL_ADC_GetValue>
 8001bfc:	6078      	str	r0, [r7, #4]
	return 1.0f * value /4095.0f;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c08:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001c24 <zadajnik+0x44>
 8001c0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c10:	eef0 7a66 	vmov.f32	s15, s13
}
 8001c14:	eeb0 0a67 	vmov.f32	s0, s15
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200004a4 	.word	0x200004a4
 8001c24:	457ff000 	.word	0x457ff000

08001c28 <button_state>:

bool button_state() {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(przycisk0_GPIO_Port, przycisk0_Pin) == GPIO_PIN_SET){
 8001c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c30:	4805      	ldr	r0, [pc, #20]	; (8001c48 <button_state+0x20>)
 8001c32:	f001 fef1 	bl	8003a18 <HAL_GPIO_ReadPin>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <button_state+0x18>
		return true;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <button_state+0x1a>
	}
	else{
		return false;
 8001c40:	2300      	movs	r3, #0
	}
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40020800 	.word	0x40020800

08001c4c <change_duty_cycle>:

// Jakbym miał powiedzieć gdzie sie wypierdoli ten kod to wlasnie tutaj
void change_duty_cycle(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t duty_cycle)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	4613      	mov	r3, r2
 8001c58:	80fb      	strh	r3, [r7, #6]
    // calculate the new pulse value
    uint32_t pulse = (htim->Init.Period * duty_cycle) / 1000;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	88fa      	ldrh	r2, [r7, #6]
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <change_duty_cycle+0x88>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	099b      	lsrs	r3, r3, #6
 8001c6c:	617b      	str	r3, [r7, #20]
    // update the capture/compare register
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d104      	bne.n	8001c7e <change_duty_cycle+0x32>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c7c:	e023      	b.n	8001cc6 <change_duty_cycle+0x7a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d104      	bne.n	8001c8e <change_duty_cycle+0x42>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c8c:	e01b      	b.n	8001cc6 <change_duty_cycle+0x7a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d104      	bne.n	8001c9e <change_duty_cycle+0x52>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001c9c:	e013      	b.n	8001cc6 <change_duty_cycle+0x7a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d104      	bne.n	8001cae <change_duty_cycle+0x62>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001cac:	e00b      	b.n	8001cc6 <change_duty_cycle+0x7a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b10      	cmp	r3, #16
 8001cb2:	d104      	bne.n	8001cbe <change_duty_cycle+0x72>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001cbc:	e003      	b.n	8001cc6 <change_duty_cycle+0x7a>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001cc6:	bf00      	nop
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	10624dd3 	.word	0x10624dd3

08001cd8 <wyswietlacz>:

void wyswietlacz(){
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b0a4      	sub	sp, #144	; 0x90
 8001cdc:	af00      	add	r7, sp, #0
	uint8_t y = 0; // ktora linia wyswietlacza
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	ssd1306_Fill(Black);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff faf9 	bl	80012dc <ssd1306_Fill>
	ssd1306_SetCursor(2, y);
 8001cea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001cee:	4619      	mov	r1, r3
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f7ff fc41 	bl	8001578 <ssd1306_SetCursor>
	char buf[20] = "COM test: ";
 8001cf6:	4a85      	ldr	r2, [pc, #532]	; (8001f0c <wyswietlacz+0x234>)
 8001cf8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cfe:	c303      	stmia	r3!, {r0, r1}
 8001d00:	801a      	strh	r2, [r3, #0]
 8001d02:	3302      	adds	r3, #2
 8001d04:	0c12      	lsrs	r2, r2, #16
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	721a      	strb	r2, [r3, #8]
	ssd1306_WriteString(strcat(buf, received_data), Font_7x10, White);
 8001d14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d18:	497d      	ldr	r1, [pc, #500]	; (8001f10 <wyswietlacz+0x238>)
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f006 fafc 	bl	8008318 <strcat>
 8001d20:	4a7c      	ldr	r2, [pc, #496]	; (8001f14 <wyswietlacz+0x23c>)
 8001d22:	2301      	movs	r3, #1
 8001d24:	ca06      	ldmia	r2, {r1, r2}
 8001d26:	f7ff fc01 	bl	800152c <ssd1306_WriteString>
	y += 10;
 8001d2a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001d2e:	330a      	adds	r3, #10
 8001d30:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	char temp_buf[6];
	gcvt(current_temperature, 6, temp_buf);
 8001d34:	4b78      	ldr	r3, [pc, #480]	; (8001f18 <wyswietlacz+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fc25 	bl	8000588 <__aeabi_f2d>
 8001d3e:	4604      	mov	r4, r0
 8001d40:	460d      	mov	r5, r1
 8001d42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d46:	4619      	mov	r1, r3
 8001d48:	2006      	movs	r0, #6
 8001d4a:	ec45 4b10 	vmov	d0, r4, r5
 8001d4e:	f006 fa7f 	bl	8008250 <gcvt>
	ssd1306_SetCursor(2, y);
 8001d52:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001d56:	4619      	mov	r1, r3
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f7ff fc0d 	bl	8001578 <ssd1306_SetCursor>
	char buf0[20] = "Current temp:";
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <wyswietlacz+0x244>)
 8001d60:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001d64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d66:	c407      	stmia	r4!, {r0, r1, r2}
 8001d68:	8023      	strh	r3, [r4, #0]
 8001d6a:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	809a      	strh	r2, [r3, #4]
	ssd1306_WriteString(strcat(buf0, temp_buf), Font_7x10, White);
 8001d74:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001d78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f006 faca 	bl	8008318 <strcat>
 8001d84:	4a63      	ldr	r2, [pc, #396]	; (8001f14 <wyswietlacz+0x23c>)
 8001d86:	2301      	movs	r3, #1
 8001d88:	ca06      	ldmia	r2, {r1, r2}
 8001d8a:	f7ff fbcf 	bl	800152c <ssd1306_WriteString>
	y += 10;
 8001d8e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001d92:	330a      	adds	r3, #10
 8001d94:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	char set_buf[6];
	gcvt(value, 2, set_buf);
 8001d98:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <wyswietlacz+0x248>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbf3 	bl	8000588 <__aeabi_f2d>
 8001da2:	4604      	mov	r4, r0
 8001da4:	460d      	mov	r5, r1
 8001da6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001daa:	4619      	mov	r1, r3
 8001dac:	2002      	movs	r0, #2
 8001dae:	ec45 4b10 	vmov	d0, r4, r5
 8001db2:	f006 fa4d 	bl	8008250 <gcvt>
	ssd1306_SetCursor(2, y);
 8001db6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001dba:	4619      	mov	r1, r3
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f7ff fbdb 	bl	8001578 <ssd1306_SetCursor>
	char buf1[20] = "Set temp:";
 8001dc2:	4a58      	ldr	r2, [pc, #352]	; (8001f24 <wyswietlacz+0x24c>)
 8001dc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dca:	c303      	stmia	r3!, {r0, r1}
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	811a      	strh	r2, [r3, #8]
	ssd1306_WriteString(strcat(buf1, set_buf), Font_7x10, White);
 8001dda:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001dde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f006 fa97 	bl	8008318 <strcat>
 8001dea:	4a4a      	ldr	r2, [pc, #296]	; (8001f14 <wyswietlacz+0x23c>)
 8001dec:	2301      	movs	r3, #1
 8001dee:	ca06      	ldmia	r2, {r1, r2}
 8001df0:	f7ff fb9c 	bl	800152c <ssd1306_WriteString>
	y += 10;
 8001df4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001df8:	330a      	adds	r3, #10
 8001dfa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	ssd1306_SetCursor(2, y);
 8001dfe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e02:	4619      	mov	r1, r3
 8001e04:	2002      	movs	r0, #2
 8001e06:	f7ff fbb7 	bl	8001578 <ssd1306_SetCursor>
	char buf3[20] = "Przycisk: ";
 8001e0a:	4a47      	ldr	r2, [pc, #284]	; (8001f28 <wyswietlacz+0x250>)
 8001e0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e10:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e12:	c303      	stmia	r3!, {r0, r1}
 8001e14:	801a      	strh	r2, [r3, #0]
 8001e16:	3302      	adds	r3, #2
 8001e18:	0c12      	lsrs	r2, r2, #16
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	721a      	strb	r2, [r3, #8]
	if(stan_przycisku){
 8001e28:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <wyswietlacz+0x254>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <wyswietlacz+0x17a>
		char buf4[2] = "ON";
 8001e30:	f644 634f 	movw	r3, #20047	; 0x4e4f
 8001e34:	813b      	strh	r3, [r7, #8]
		ssd1306_WriteString(strcat(buf3, buf4), Font_7x10, White);
 8001e36:	f107 0208 	add.w	r2, r7, #8
 8001e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f006 fa69 	bl	8008318 <strcat>
 8001e46:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <wyswietlacz+0x23c>)
 8001e48:	2301      	movs	r3, #1
 8001e4a:	ca06      	ldmia	r2, {r1, r2}
 8001e4c:	f7ff fb6e 	bl	800152c <ssd1306_WriteString>
 8001e50:	e013      	b.n	8001e7a <wyswietlacz+0x1a2>
	}
	else{
		char buf5[3] = "OFF";
 8001e52:	4a37      	ldr	r2, [pc, #220]	; (8001f30 <wyswietlacz+0x258>)
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	8019      	strh	r1, [r3, #0]
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	0c12      	lsrs	r2, r2, #16
 8001e60:	701a      	strb	r2, [r3, #0]
		ssd1306_WriteString(strcat(buf3, buf5), Font_7x10, White);
 8001e62:	1d3a      	adds	r2, r7, #4
 8001e64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f006 fa54 	bl	8008318 <strcat>
 8001e70:	4a28      	ldr	r2, [pc, #160]	; (8001f14 <wyswietlacz+0x23c>)
 8001e72:	2301      	movs	r3, #1
 8001e74:	ca06      	ldmia	r2, {r1, r2}
 8001e76:	f7ff fb59 	bl	800152c <ssd1306_WriteString>
	}
	y += 10;
 8001e7a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e7e:	330a      	adds	r3, #10
 8001e80:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f



	float duty_cl = duty_cycle/10.0f;
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <wyswietlacz+0x25c>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e90:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e98:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	char duty_buf[6];
	gcvt(duty_cl, 3, duty_buf);
 8001e9c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001ea0:	f7fe fb72 	bl	8000588 <__aeabi_f2d>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	460d      	mov	r5, r1
 8001ea8:	f107 0320 	add.w	r3, r7, #32
 8001eac:	4619      	mov	r1, r3
 8001eae:	2003      	movs	r0, #3
 8001eb0:	ec45 4b10 	vmov	d0, r4, r5
 8001eb4:	f006 f9cc 	bl	8008250 <gcvt>
	ssd1306_SetCursor(2, y);
 8001eb8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	2002      	movs	r0, #2
 8001ec0:	f7ff fb5a 	bl	8001578 <ssd1306_SetCursor>
	char buf2[20] = "Current duty:";
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <wyswietlacz+0x260>)
 8001ec6:	f107 040c 	add.w	r4, r7, #12
 8001eca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ecc:	c407      	stmia	r4!, {r0, r1, r2}
 8001ece:	8023      	strh	r3, [r4, #0]
 8001ed0:	f107 031a 	add.w	r3, r7, #26
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	809a      	strh	r2, [r3, #4]
	ssd1306_WriteString(strcat(buf2, duty_buf), Font_7x10, White);
 8001eda:	f107 0220 	add.w	r2, r7, #32
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f006 fa17 	bl	8008318 <strcat>
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <wyswietlacz+0x23c>)
 8001eec:	2301      	movs	r3, #1
 8001eee:	ca06      	ldmia	r2, {r1, r2}
 8001ef0:	f7ff fb1c 	bl	800152c <ssd1306_WriteString>
	y += 10;
 8001ef4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001ef8:	330a      	adds	r3, #10
 8001efa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	ssd1306_UpdateScreen();
 8001efe:	f7ff fa11 	bl	8001324 <ssd1306_UpdateScreen>
}
 8001f02:	bf00      	nop
 8001f04:	3790      	adds	r7, #144	; 0x90
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	0800aa30 	.word	0x0800aa30
 8001f10:	20000594 	.word	0x20000594
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000598 	.word	0x20000598
 8001f1c:	0800aa44 	.word	0x0800aa44
 8001f20:	2000059c 	.word	0x2000059c
 8001f24:	0800aa58 	.word	0x0800aa58
 8001f28:	0800aa6c 	.word	0x0800aa6c
 8001f2c:	200005a2 	.word	0x200005a2
 8001f30:	0800aa80 	.word	0x0800aa80
 8001f34:	200005a0 	.word	0x200005a0
 8001f38:	0800aa84 	.word	0x0800aa84

08001f3c <transmit_data>:

void transmit_data(float current_temp, float set_temp){
 8001f3c:	b5b0      	push	{r4, r5, r7, lr}
 8001f3e:	b09c      	sub	sp, #112	; 0x70
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f46:	edc7 0a00 	vstr	s1, [r7]
    char data_buf[100];
    gcvt(current_temp, 6, data_buf);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fb1c 	bl	8000588 <__aeabi_f2d>
 8001f50:	4604      	mov	r4, r0
 8001f52:	460d      	mov	r5, r1
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	4619      	mov	r1, r3
 8001f5a:	2006      	movs	r0, #6
 8001f5c:	ec45 4b10 	vmov	d0, r4, r5
 8001f60:	f006 f976 	bl	8008250 <gcvt>
    strcat(data_buf, ";");
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe f951 	bl	8000210 <strlen>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	4413      	add	r3, r2
 8001f78:	491c      	ldr	r1, [pc, #112]	; (8001fec <transmit_data+0xb0>)
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	8013      	strh	r3, [r2, #0]
    gcvt(set_temp, 6, data_buf+strlen(data_buf));
 8001f82:	6838      	ldr	r0, [r7, #0]
 8001f84:	f7fe fb00 	bl	8000588 <__aeabi_f2d>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	460d      	mov	r5, r1
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe f93d 	bl	8000210 <strlen>
 8001f96:	4602      	mov	r2, r0
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	2006      	movs	r0, #6
 8001fa2:	ec45 4b10 	vmov	d0, r4, r5
 8001fa6:	f006 f953 	bl	8008250 <gcvt>
    strcat(data_buf, "\r\n");
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe f92e 	bl	8000210 <strlen>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <transmit_data+0xb4>)
 8001fc0:	8811      	ldrh	r1, [r2, #0]
 8001fc2:	7892      	ldrb	r2, [r2, #2]
 8001fc4:	8019      	strh	r1, [r3, #0]
 8001fc6:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart3, data_buf, strlen(data_buf), 100);
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe f91f 	bl	8000210 <strlen>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	f107 010c 	add.w	r1, r7, #12
 8001fda:	2364      	movs	r3, #100	; 0x64
 8001fdc:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <transmit_data+0xb8>)
 8001fde:	f004 fea9 	bl	8006d34 <HAL_UART_Transmit>
}
 8001fe2:	bf00      	nop
 8001fe4:	3770      	adds	r7, #112	; 0x70
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fea:	bf00      	nop
 8001fec:	0800aa98 	.word	0x0800aa98
 8001ff0:	0800aa9c 	.word	0x0800aa9c
 8001ff4:	200006d8 	.word	0x200006d8

08001ff8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ // If the interrupt is from timer 2
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002008:	d112      	bne.n	8002030 <HAL_TIM_PeriodElapsedCallback+0x38>
		transmit_data(current_temperature, value);
 800200a:	4b1c      	ldr	r3, [pc, #112]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002012:	ed93 7a00 	vldr	s14, [r3]
 8002016:	eef0 0a47 	vmov.f32	s1, s14
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	f7ff ff8d 	bl	8001f3c <transmit_data>
		change_duty_cycle(&htim1, TIM_CHANNEL_1, duty_cycle);
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	2100      	movs	r1, #0
 800202a:	4817      	ldr	r0, [pc, #92]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800202c:	f7ff fe0e 	bl	8001c4c <change_duty_cycle>

	}
	if(htim->Instance == TIM3){ // If the interrupt is from timer 3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d104      	bne.n	8002044 <HAL_TIM_PeriodElapsedCallback+0x4c>
		//ssd1306_TestAll();
		HAL_UART_Receive_IT(&huart3, received_data, 3);
 800203a:	2203      	movs	r2, #3
 800203c:	4914      	ldr	r1, [pc, #80]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800203e:	4815      	ldr	r0, [pc, #84]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002040:	f004 fefb 	bl	8006e3a <HAL_UART_Receive_IT>
	}
	if(htim->Instance == TIM4){ // If the interrupt is from timer 4
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d111      	bne.n	8002072 <HAL_TIM_PeriodElapsedCallback+0x7a>
		MCP9808_MeasureTemperature(&current_temperature);
 800204e:	480b      	ldr	r0, [pc, #44]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002050:	f7fe fffc 	bl	800104c <MCP9808_MeasureTemperature>
		stan_przycisku = button_state();
 8002054:	f7ff fde8 	bl	8001c28 <button_state>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800205e:	701a      	strb	r2, [r3, #0]
		value = zadajnik();
 8002060:	f7ff fdbe 	bl	8001be0 <zadajnik>
 8002064:	eef0 7a40 	vmov.f32	s15, s0
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800206a:	edc3 7a00 	vstr	s15, [r3]
		wyswietlacz();
 800206e:	f7ff fe33 	bl	8001cd8 <wyswietlacz>
	}

}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000598 	.word	0x20000598
 8002080:	2000059c 	.word	0x2000059c
 8002084:	200005a0 	.word	0x200005a0
 8002088:	200005a8 	.word	0x200005a8
 800208c:	40000400 	.word	0x40000400
 8002090:	20000594 	.word	0x20000594
 8002094:	200006d8 	.word	0x200006d8
 8002098:	40000800 	.word	0x40000800
 800209c:	200005a2 	.word	0x200005a2

080020a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020a4:	f000 fced 	bl	8002a82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020a8:	f000 f836 	bl	8002118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ac:	f7ff fb40 	bl	8001730 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80020b0:	f000 fc26 	bl	8002900 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80020b4:	f7ff fc64 	bl	8001980 <MX_I2C2_Init>
  MX_TIM2_Init();
 80020b8:	f000 fa80 	bl	80025bc <MX_TIM2_Init>
  MX_TIM3_Init();
 80020bc:	f000 facc 	bl	8002658 <MX_TIM3_Init>
  MX_TIM4_Init();
 80020c0:	f000 fb1a 	bl	80026f8 <MX_TIM4_Init>
  MX_I2C4_Init();
 80020c4:	f7ff fc9c 	bl	8001a00 <MX_I2C4_Init>
  MX_ADC1_Init();
 80020c8:	f7ff faa0 	bl	800160c <MX_ADC1_Init>
  MX_TIM1_Init();
 80020cc:	f000 f9e6 	bl	800249c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_TestAll();
  ssd1306_Init(); // Inicjalizacja wyświetlacza
 80020d0:	f7ff f89a 	bl	8001208 <ssd1306_Init>
  MCP9808_Init(&hi2c4, 0x18); // inicjalizacja sensora temperatury
 80020d4:	2118      	movs	r1, #24
 80020d6:	480a      	ldr	r0, [pc, #40]	; (8002100 <main+0x60>)
 80020d8:	f7fe ff42 	bl	8000f60 <MCP9808_Init>
  MCP9808_SetResolution(MCP9808_Medium_Res);  // tutaj nastawia się srednia rozdzielczość
 80020dc:	2001      	movs	r0, #1
 80020de:	f7ff f835 	bl	800114c <MCP9808_SetResolution>

  HAL_UART_Receive_IT(&huart3, received_data, 3);
 80020e2:	2203      	movs	r2, #3
 80020e4:	4907      	ldr	r1, [pc, #28]	; (8002104 <main+0x64>)
 80020e6:	4808      	ldr	r0, [pc, #32]	; (8002108 <main+0x68>)
 80020e8:	f004 fea7 	bl	8006e3a <HAL_UART_Receive_IT>

// te niżej najlepiej jak beda na koncu // tak powiedzial szef
  HAL_TIM_Base_Start_IT(&htim2);
 80020ec:	4807      	ldr	r0, [pc, #28]	; (800210c <main+0x6c>)
 80020ee:	f003 fd1d 	bl	8005b2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80020f2:	4807      	ldr	r0, [pc, #28]	; (8002110 <main+0x70>)
 80020f4:	f003 fd1a 	bl	8005b2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80020f8:	4806      	ldr	r0, [pc, #24]	; (8002114 <main+0x74>)
 80020fa:	f003 fd17 	bl	8005b2c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020fe:	e7fe      	b.n	80020fe <main+0x5e>
 8002100:	20000540 	.word	0x20000540
 8002104:	20000594 	.word	0x20000594
 8002108:	200006d8 	.word	0x200006d8
 800210c:	200005f4 	.word	0x200005f4
 8002110:	20000640 	.word	0x20000640
 8002114:	2000068c 	.word	0x2000068c

08002118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b094      	sub	sp, #80	; 0x50
 800211c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	2230      	movs	r2, #48	; 0x30
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f006 f8ee 	bl	8008308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800213c:	f002 fb84 	bl	8004848 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <SystemClock_Config+0xd4>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a29      	ldr	r2, [pc, #164]	; (80021ec <SystemClock_Config+0xd4>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <SystemClock_Config+0xd4>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <SystemClock_Config+0xd8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <SystemClock_Config+0xd8>)
 800215e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <SystemClock_Config+0xd8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002170:	2301      	movs	r3, #1
 8002172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002174:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217a:	2302      	movs	r3, #2
 800217c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002184:	2304      	movs	r3, #4
 8002186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002188:	23d8      	movs	r3, #216	; 0xd8
 800218a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800218c:	2302      	movs	r3, #2
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002190:	2309      	movs	r3, #9
 8002192:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002194:	f107 0320 	add.w	r3, r7, #32
 8002198:	4618      	mov	r0, r3
 800219a:	f002 fbb5 	bl	8004908 <HAL_RCC_OscConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80021a4:	f000 f826 	bl	80021f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021a8:	f002 fb5e 	bl	8004868 <HAL_PWREx_EnableOverDrive>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80021b2:	f000 f81f 	bl	80021f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b6:	230f      	movs	r3, #15
 80021b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ba:	2302      	movs	r3, #2
 80021bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80021c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	2107      	movs	r1, #7
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 fe3b 	bl	8004e50 <HAL_RCC_ClockConfig>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80021e0:	f000 f808 	bl	80021f4 <Error_Handler>
  }
}
 80021e4:	bf00      	nop
 80021e6:	3750      	adds	r7, #80	; 0x50
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40007000 	.word	0x40007000

080021f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f8:	b672      	cpsid	i
}
 80021fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021fc:	e7fe      	b.n	80021fc <Error_Handler+0x8>
	...

08002200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_MspInit+0x44>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <HAL_MspInit+0x44>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_MspInit+0x44>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_MspInit+0x44>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_MspInit+0x44>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_MspInit+0x44>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800224c:	e7fe      	b.n	800224c <NMI_Handler+0x4>

0800224e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002252:	e7fe      	b.n	8002252 <HardFault_Handler+0x4>

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <MemManage_Handler+0x4>

0800225a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <BusFault_Handler+0x4>

08002260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <UsageFault_Handler+0x4>

08002266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002294:	f000 fc32 	bl	8002afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}

0800229c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <TIM2_IRQHandler+0x10>)
 80022a2:	f003 fd12 	bl	8005cca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200005f4 	.word	0x200005f4

080022b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <TIM3_IRQHandler+0x10>)
 80022b6:	f003 fd08 	bl	8005cca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000640 	.word	0x20000640

080022c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <TIM4_IRQHandler+0x10>)
 80022ca:	f003 fcfe 	bl	8005cca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000068c 	.word	0x2000068c

080022d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <USART3_IRQHandler+0x10>)
 80022de:	f004 fdf1 	bl	8006ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200006d8 	.word	0x200006d8

080022ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return 1;
 80022f0:	2301      	movs	r3, #1
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_kill>:

int _kill(int pid, int sig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002306:	f005 ffc7 	bl	8008298 <__errno>
 800230a:	4603      	mov	r3, r0
 800230c:	2216      	movs	r2, #22
 800230e:	601a      	str	r2, [r3, #0]
  return -1;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_exit>:

void _exit (int status)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ffe7 	bl	80022fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800232e:	e7fe      	b.n	800232e <_exit+0x12>

08002330 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e00a      	b.n	8002358 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002342:	f3af 8000 	nop.w
 8002346:	4601      	mov	r1, r0
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	60ba      	str	r2, [r7, #8]
 800234e:	b2ca      	uxtb	r2, r1
 8002350:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	dbf0      	blt.n	8002342 <_read+0x12>
  }

  return len;
 8002360:	687b      	ldr	r3, [r7, #4]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	e009      	b.n	8002390 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	60ba      	str	r2, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	dbf1      	blt.n	800237c <_write+0x12>
  }
  return len;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_close>:

int _close(int file)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ca:	605a      	str	r2, [r3, #4]
  return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_isatty>:

int _isatty(int file)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f005 ff2c 	bl	8008298 <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20050000 	.word	0x20050000
 800246c:	00000400 	.word	0x00000400
 8002470:	200005a4 	.word	0x200005a4
 8002474:	20000778 	.word	0x20000778

08002478 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <SystemInit+0x20>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <SystemInit+0x20>)
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b096      	sub	sp, #88	; 0x58
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	615a      	str	r2, [r3, #20]
 80024c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	222c      	movs	r2, #44	; 0x2c
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f005 ff1d 	bl	8008308 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024ce:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <MX_TIM1_Init+0x118>)
 80024d0:	4a39      	ldr	r2, [pc, #228]	; (80025b8 <MX_TIM1_Init+0x11c>)
 80024d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 80024d4:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <MX_TIM1_Init+0x118>)
 80024d6:	226b      	movs	r2, #107	; 0x6b
 80024d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <MX_TIM1_Init+0x118>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80024e0:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <MX_TIM1_Init+0x118>)
 80024e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <MX_TIM1_Init+0x118>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024ee:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <MX_TIM1_Init+0x118>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <MX_TIM1_Init+0x118>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024fa:	482e      	ldr	r0, [pc, #184]	; (80025b4 <MX_TIM1_Init+0x118>)
 80024fc:	f003 fb8e 	bl	8005c1c <HAL_TIM_PWM_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002506:	f7ff fe75 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002516:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800251a:	4619      	mov	r1, r3
 800251c:	4825      	ldr	r0, [pc, #148]	; (80025b4 <MX_TIM1_Init+0x118>)
 800251e:	f004 fa91 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002528:	f7ff fe64 	bl	80021f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800252c:	2360      	movs	r3, #96	; 0x60
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002534:	2300      	movs	r3, #0
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002538:	2300      	movs	r3, #0
 800253a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800254c:	2200      	movs	r2, #0
 800254e:	4619      	mov	r1, r3
 8002550:	4818      	ldr	r0, [pc, #96]	; (80025b4 <MX_TIM1_Init+0x118>)
 8002552:	f003 fcd9 	bl	8005f08 <HAL_TIM_PWM_ConfigChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800255c:	f7ff fe4a 	bl	80021f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002578:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	4619      	mov	r1, r3
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <MX_TIM1_Init+0x118>)
 8002596:	f004 fae3 	bl	8006b60 <HAL_TIMEx_ConfigBreakDeadTime>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80025a0:	f7ff fe28 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025a4:	4803      	ldr	r0, [pc, #12]	; (80025b4 <MX_TIM1_Init+0x118>)
 80025a6:	f000 f973 	bl	8002890 <HAL_TIM_MspPostInit>

}
 80025aa:	bf00      	nop
 80025ac:	3758      	adds	r7, #88	; 0x58
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200005a8 	.word	0x200005a8
 80025b8:	40010000 	.word	0x40010000

080025bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <MX_TIM2_Init+0x98>)
 80025dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10799;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <MX_TIM2_Init+0x98>)
 80025e4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80025e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <MX_TIM2_Init+0x98>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <MX_TIM2_Init+0x98>)
 80025f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <MX_TIM2_Init+0x98>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <MX_TIM2_Init+0x98>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002604:	4813      	ldr	r0, [pc, #76]	; (8002654 <MX_TIM2_Init+0x98>)
 8002606:	f003 fa39 	bl	8005a7c <HAL_TIM_Base_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002610:	f7ff fdf0 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002618:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800261a:	f107 0310 	add.w	r3, r7, #16
 800261e:	4619      	mov	r1, r3
 8002620:	480c      	ldr	r0, [pc, #48]	; (8002654 <MX_TIM2_Init+0x98>)
 8002622:	f003 fd85 	bl	8006130 <HAL_TIM_ConfigClockSource>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800262c:	f7ff fde2 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	4619      	mov	r1, r3
 800263c:	4805      	ldr	r0, [pc, #20]	; (8002654 <MX_TIM2_Init+0x98>)
 800263e:	f004 fa01 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002648:	f7ff fdd4 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800264c:	bf00      	nop
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200005f4 	.word	0x200005f4

08002658 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800265e:	f107 0310 	add.w	r3, r7, #16
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <MX_TIM3_Init+0x98>)
 8002678:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <MX_TIM3_Init+0x9c>)
 800267a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 800267c:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <MX_TIM3_Init+0x98>)
 800267e:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002682:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002684:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_TIM3_Init+0x98>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <MX_TIM3_Init+0x98>)
 800268c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002690:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <MX_TIM3_Init+0x98>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002698:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <MX_TIM3_Init+0x98>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800269e:	4814      	ldr	r0, [pc, #80]	; (80026f0 <MX_TIM3_Init+0x98>)
 80026a0:	f003 f9ec 	bl	8005a7c <HAL_TIM_Base_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80026aa:	f7ff fda3 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	4619      	mov	r1, r3
 80026ba:	480d      	ldr	r0, [pc, #52]	; (80026f0 <MX_TIM3_Init+0x98>)
 80026bc:	f003 fd38 	bl	8006130 <HAL_TIM_ConfigClockSource>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80026c6:	f7ff fd95 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	4619      	mov	r1, r3
 80026d6:	4806      	ldr	r0, [pc, #24]	; (80026f0 <MX_TIM3_Init+0x98>)
 80026d8:	f004 f9b4 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80026e2:	f7ff fd87 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026e6:	bf00      	nop
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000640 	.word	0x20000640
 80026f4:	40000400 	.word	0x40000400

080026f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <MX_TIM4_Init+0x98>)
 8002718:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <MX_TIM4_Init+0x9c>)
 800271a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10799;
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <MX_TIM4_Init+0x98>)
 800271e:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002722:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <MX_TIM4_Init+0x98>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <MX_TIM4_Init+0x98>)
 800272c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002730:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <MX_TIM4_Init+0x98>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002738:	4b15      	ldr	r3, [pc, #84]	; (8002790 <MX_TIM4_Init+0x98>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800273e:	4814      	ldr	r0, [pc, #80]	; (8002790 <MX_TIM4_Init+0x98>)
 8002740:	f003 f99c 	bl	8005a7c <HAL_TIM_Base_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800274a:	f7ff fd53 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002752:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	4619      	mov	r1, r3
 800275a:	480d      	ldr	r0, [pc, #52]	; (8002790 <MX_TIM4_Init+0x98>)
 800275c:	f003 fce8 	bl	8006130 <HAL_TIM_ConfigClockSource>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002766:	f7ff fd45 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <MX_TIM4_Init+0x98>)
 8002778:	f004 f964 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002782:	f7ff fd37 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000068c 	.word	0x2000068c
 8002794:	40000800 	.word	0x40000800

08002798 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <HAL_TIM_PWM_MspInit+0x38>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10b      	bne.n	80027c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e8:	d114      	bne.n	8002814 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_TIM_Base_MspInit+0xac>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <HAL_TIM_Base_MspInit+0xac>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_TIM_Base_MspInit+0xac>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2100      	movs	r1, #0
 8002806:	201c      	movs	r0, #28
 8002808:	f000 fe91 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800280c:	201c      	movs	r0, #28
 800280e:	f000 feaa 	bl	8003566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002812:	e032      	b.n	800287a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <HAL_TIM_Base_MspInit+0xb0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d114      	bne.n	8002848 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800281e:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_TIM_Base_MspInit+0xac>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_TIM_Base_MspInit+0xac>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	6413      	str	r3, [r2, #64]	; 0x40
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_TIM_Base_MspInit+0xac>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	201d      	movs	r0, #29
 800283c:	f000 fe77 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002840:	201d      	movs	r0, #29
 8002842:	f000 fe90 	bl	8003566 <HAL_NVIC_EnableIRQ>
}
 8002846:	e018      	b.n	800287a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0f      	ldr	r2, [pc, #60]	; (800288c <HAL_TIM_Base_MspInit+0xb4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d113      	bne.n	800287a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_TIM_Base_MspInit+0xac>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <HAL_TIM_Base_MspInit+0xac>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_TIM_Base_MspInit+0xac>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	201e      	movs	r0, #30
 8002870:	f000 fe5d 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002874:	201e      	movs	r0, #30
 8002876:	f000 fe76 	bl	8003566 <HAL_NVIC_EnableIRQ>
}
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	40000400 	.word	0x40000400
 800288c:	40000800 	.word	0x40000800

08002890 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 030c 	add.w	r3, r7, #12
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_TIM_MspPostInit+0x64>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d11c      	bne.n	80028ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_TIM_MspPostInit+0x68>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a10      	ldr	r2, [pc, #64]	; (80028f8 <HAL_TIM_MspPostInit+0x68>)
 80028b8:	f043 0310 	orr.w	r3, r3, #16
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <HAL_TIM_MspPostInit+0x68>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028dc:	2301      	movs	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	4619      	mov	r1, r3
 80028e6:	4805      	ldr	r0, [pc, #20]	; (80028fc <HAL_TIM_MspPostInit+0x6c>)
 80028e8:	f000 feea 	bl	80036c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40010000 	.word	0x40010000
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40021000 	.word	0x40021000

08002900 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <MX_USART3_UART_Init+0x58>)
 8002906:	4a15      	ldr	r2, [pc, #84]	; (800295c <MX_USART3_UART_Init+0x5c>)
 8002908:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <MX_USART3_UART_Init+0x58>)
 800290c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002910:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <MX_USART3_UART_Init+0x58>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <MX_USART3_UART_Init+0x58>)
 800291a:	2200      	movs	r2, #0
 800291c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_USART3_UART_Init+0x58>)
 8002920:	2200      	movs	r2, #0
 8002922:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <MX_USART3_UART_Init+0x58>)
 8002926:	220c      	movs	r2, #12
 8002928:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <MX_USART3_UART_Init+0x58>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <MX_USART3_UART_Init+0x58>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <MX_USART3_UART_Init+0x58>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <MX_USART3_UART_Init+0x58>)
 800293e:	2200      	movs	r2, #0
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002942:	4805      	ldr	r0, [pc, #20]	; (8002958 <MX_USART3_UART_Init+0x58>)
 8002944:	f004 f9a8 	bl	8006c98 <HAL_UART_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800294e:	f7ff fc51 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200006d8 	.word	0x200006d8
 800295c:	40004800 	.word	0x40004800

08002960 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b0aa      	sub	sp, #168	; 0xa8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	2284      	movs	r2, #132	; 0x84
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f005 fcc1 	bl	8008308 <memset>
  if(uartHandle->Instance==USART3)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <HAL_UART_MspInit+0xc4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d144      	bne.n	8002a1a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002994:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002996:	2300      	movs	r3, #0
 8002998:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 fc7c 	bl	800529c <HAL_RCCEx_PeriphCLKConfig>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029aa:	f7ff fc23 	bl	80021f4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029ae:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <HAL_UART_MspInit+0xc8>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <HAL_UART_MspInit+0xc8>)
 80029b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_UART_MspInit+0xc8>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_UART_MspInit+0xc8>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_UART_MspInit+0xc8>)
 80029cc:	f043 0308 	orr.w	r3, r3, #8
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_UART_MspInit+0xc8>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80029de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f2:	2303      	movs	r3, #3
 80029f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029f8:	2307      	movs	r3, #7
 80029fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a02:	4619      	mov	r1, r3
 8002a04:	4809      	ldr	r0, [pc, #36]	; (8002a2c <HAL_UART_MspInit+0xcc>)
 8002a06:	f000 fe5b 	bl	80036c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2027      	movs	r0, #39	; 0x27
 8002a10:	f000 fd8d 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a14:	2027      	movs	r0, #39	; 0x27
 8002a16:	f000 fda6 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	37a8      	adds	r7, #168	; 0xa8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40004800 	.word	0x40004800
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40020c00 	.word	0x40020c00

08002a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a36:	490e      	ldr	r1, [pc, #56]	; (8002a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a38:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a4c:	4c0b      	ldr	r4, [pc, #44]	; (8002a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a5a:	f7ff fd0d 	bl	8002478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a5e:	f005 fc21 	bl	80082a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a62:	f7ff fb1d 	bl	80020a0 <main>
  bx  lr    
 8002a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a70:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002a74:	0800b4f8 	.word	0x0800b4f8
  ldr r2, =_sbss
 8002a78:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002a7c:	20000774 	.word	0x20000774

08002a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC_IRQHandler>

08002a82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a86:	2003      	movs	r0, #3
 8002a88:	f000 fd46 	bl	8003518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f000 f805 	bl	8002a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a92:	f7ff fbb5 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_InitTick+0x54>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_InitTick+0x58>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fd61 	bl	8003582 <HAL_SYSTICK_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00e      	b.n	8002ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b0f      	cmp	r3, #15
 8002ace:	d80a      	bhi.n	8002ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad8:	f000 fd29 	bl	800352e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002adc:	4a06      	ldr	r2, [pc, #24]	; (8002af8 <HAL_InitTick+0x5c>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000008 	.word	0x20000008
 8002af4:	20000010 	.word	0x20000010
 8002af8:	2000000c 	.word	0x2000000c

08002afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_IncTick+0x20>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_IncTick+0x24>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_IncTick+0x24>)
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000010 	.word	0x20000010
 8002b20:	20000760 	.word	0x20000760

08002b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_GetTick+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000760 	.word	0x20000760

08002b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff ffee 	bl	8002b24 <HAL_GetTick>
 8002b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d005      	beq.n	8002b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_Delay+0x44>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b62:	bf00      	nop
 8002b64:	f7ff ffde 	bl	8002b24 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d8f7      	bhi.n	8002b64 <HAL_Delay+0x28>
  {
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000010 	.word	0x20000010

08002b84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e031      	b.n	8002bfe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe fd84 	bl	80016b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d116      	bne.n	8002bf0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_ADC_Init+0x84>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	f043 0202 	orr.w	r2, r3, #2
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fad6 	bl	8003184 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
 8002bee:	e001      	b.n	8002bf4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	ffffeefd 	.word	0xffffeefd

08002c0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_Start+0x1a>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0ad      	b.n	8002d82 <HAL_ADC_Start+0x176>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d018      	beq.n	8002c6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002c4c:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_ADC_Start+0x184>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a50      	ldr	r2, [pc, #320]	; (8002d94 <HAL_ADC_Start+0x188>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	0c9a      	lsrs	r2, r3, #18
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002c60:	e002      	b.n	8002c68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f9      	bne.n	8002c62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d175      	bne.n	8002d68 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c80:	4b45      	ldr	r3, [pc, #276]	; (8002d98 <HAL_ADC_Start+0x18c>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb6:	d106      	bne.n	8002cc6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	f023 0206 	bic.w	r2, r3, #6
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	645a      	str	r2, [r3, #68]	; 0x44
 8002cc4:	e002      	b.n	8002ccc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cdc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_ADC_Start+0x190>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10f      	bne.n	8002d0a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d143      	bne.n	8002d80 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	e03a      	b.n	8002d80 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a24      	ldr	r2, [pc, #144]	; (8002da0 <HAL_ADC_Start+0x194>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10e      	bne.n	8002d32 <HAL_ADC_Start+0x126>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d107      	bne.n	8002d32 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d30:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_ADC_Start+0x190>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d120      	bne.n	8002d80 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a18      	ldr	r2, [pc, #96]	; (8002da4 <HAL_ADC_Start+0x198>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d11b      	bne.n	8002d80 <HAL_ADC_Start+0x174>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d114      	bne.n	8002d80 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	e00b      	b.n	8002d80 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f043 0210 	orr.w	r2, r3, #16
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000008 	.word	0x20000008
 8002d94:	431bde83 	.word	0x431bde83
 8002d98:	fffff8fe 	.word	0xfffff8fe
 8002d9c:	40012300 	.word	0x40012300
 8002da0:	40012000 	.word	0x40012000
 8002da4:	40012200 	.word	0x40012200

08002da8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc4:	d113      	bne.n	8002dee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd4:	d10b      	bne.n	8002dee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e063      	b.n	8002eb6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002dee:	f7ff fe99 	bl	8002b24 <HAL_GetTick>
 8002df2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002df4:	e021      	b.n	8002e3a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d01d      	beq.n	8002e3a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_ADC_PollForConversion+0x6c>
 8002e04:	f7ff fe8e 	bl	8002b24 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d212      	bcs.n	8002e3a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d00b      	beq.n	8002e3a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e03d      	b.n	8002eb6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d1d6      	bne.n	8002df6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0212 	mvn.w	r2, #18
 8002e50:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d123      	bne.n	8002eb4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d11f      	bne.n	8002eb4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1c>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e136      	b.n	8003162 <HAL_ADC_ConfigChannel+0x28a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	d93a      	bls.n	8002f7a <HAL_ADC_ConfigChannel+0xa2>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f0c:	d035      	beq.n	8002f7a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68d9      	ldr	r1, [r3, #12]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	3b1e      	subs	r3, #30
 8002f24:	2207      	movs	r2, #7
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	400a      	ands	r2, r1
 8002f32:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a8d      	ldr	r2, [pc, #564]	; (8003170 <HAL_ADC_ConfigChannel+0x298>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10a      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68d9      	ldr	r1, [r3, #12]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	061a      	lsls	r2, r3, #24
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f52:	e035      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68d9      	ldr	r1, [r3, #12]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4618      	mov	r0, r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4403      	add	r3, r0
 8002f6c:	3b1e      	subs	r3, #30
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f78:	e022      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6919      	ldr	r1, [r3, #16]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	2207      	movs	r2, #7
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43da      	mvns	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6919      	ldr	r1, [r3, #16]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4403      	add	r3, r0
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b06      	cmp	r3, #6
 8002fc6:	d824      	bhi.n	8003012 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b05      	subs	r3, #5
 8002fda:	221f      	movs	r2, #31
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	3b05      	subs	r3, #5
 8003004:	fa00 f203 	lsl.w	r2, r0, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	635a      	str	r2, [r3, #52]	; 0x34
 8003010:	e04c      	b.n	80030ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	d824      	bhi.n	8003064 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	3b23      	subs	r3, #35	; 0x23
 800302c:	221f      	movs	r2, #31
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	400a      	ands	r2, r1
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	4618      	mov	r0, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	3b23      	subs	r3, #35	; 0x23
 8003056:	fa00 f203 	lsl.w	r2, r0, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
 8003062:	e023      	b.n	80030ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	3b41      	subs	r3, #65	; 0x41
 8003076:	221f      	movs	r2, #31
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43da      	mvns	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	400a      	ands	r2, r1
 8003084:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	4618      	mov	r0, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	3b41      	subs	r3, #65	; 0x41
 80030a0:	fa00 f203 	lsl.w	r2, r0, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a30      	ldr	r2, [pc, #192]	; (8003174 <HAL_ADC_ConfigChannel+0x29c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d10a      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1f4>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030be:	d105      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80030c0:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_ADC_ConfigChannel+0x2a0>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a2c      	ldr	r2, [pc, #176]	; (8003178 <HAL_ADC_ConfigChannel+0x2a0>)
 80030c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80030ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a28      	ldr	r2, [pc, #160]	; (8003174 <HAL_ADC_ConfigChannel+0x29c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10f      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x21e>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b12      	cmp	r3, #18
 80030dc:	d10b      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80030de:	4b26      	ldr	r3, [pc, #152]	; (8003178 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a25      	ldr	r2, [pc, #148]	; (8003178 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030e8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030ea:	4b23      	ldr	r3, [pc, #140]	; (8003178 <HAL_ADC_ConfigChannel+0x2a0>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a22      	ldr	r2, [pc, #136]	; (8003178 <HAL_ADC_ConfigChannel+0x2a0>)
 80030f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1e      	ldr	r2, [pc, #120]	; (8003174 <HAL_ADC_ConfigChannel+0x29c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d12b      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x280>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_ADC_ConfigChannel+0x298>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <HAL_ADC_ConfigChannel+0x23a>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b11      	cmp	r3, #17
 8003110:	d122      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_ADC_ConfigChannel+0x2a0>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4a18      	ldr	r2, [pc, #96]	; (8003178 <HAL_ADC_ConfigChannel+0x2a0>)
 8003118:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800311c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800311e:	4b16      	ldr	r3, [pc, #88]	; (8003178 <HAL_ADC_ConfigChannel+0x2a0>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_ADC_ConfigChannel+0x2a0>)
 8003124:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003128:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <HAL_ADC_ConfigChannel+0x298>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d111      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003134:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_ADC_ConfigChannel+0x2a4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a11      	ldr	r2, [pc, #68]	; (8003180 <HAL_ADC_ConfigChannel+0x2a8>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0c9a      	lsrs	r2, r3, #18
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800314a:	e002      	b.n	8003152 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3b01      	subs	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f9      	bne.n	800314c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	10000012 	.word	0x10000012
 8003174:	40012000 	.word	0x40012000
 8003178:	40012300 	.word	0x40012300
 800317c:	20000008 	.word	0x20000008
 8003180:	431bde83 	.word	0x431bde83

08003184 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800318c:	4b78      	ldr	r3, [pc, #480]	; (8003370 <ADC_Init+0x1ec>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a77      	ldr	r2, [pc, #476]	; (8003370 <ADC_Init+0x1ec>)
 8003192:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003196:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003198:	4b75      	ldr	r3, [pc, #468]	; (8003370 <ADC_Init+0x1ec>)
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4973      	ldr	r1, [pc, #460]	; (8003370 <ADC_Init+0x1ec>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	021a      	lsls	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	4a58      	ldr	r2, [pc, #352]	; (8003374 <ADC_Init+0x1f0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003226:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6899      	ldr	r1, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6899      	ldr	r1, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e00f      	b.n	800327e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800326c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800327c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0202 	bic.w	r2, r2, #2
 800328c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6899      	ldr	r1, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	005a      	lsls	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01b      	beq.n	80032e4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	3b01      	subs	r3, #1
 80032d8:	035a      	lsls	r2, r3, #13
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	e007      	b.n	80032f4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	3b01      	subs	r3, #1
 8003310:	051a      	lsls	r2, r3, #20
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6899      	ldr	r1, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003336:	025a      	lsls	r2, r3, #9
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6899      	ldr	r1, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	029a      	lsls	r2, r3, #10
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40012300 	.word	0x40012300
 8003374:	0f000001 	.word	0x0f000001

08003378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <__NVIC_SetPriorityGrouping+0x40>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003394:	4013      	ands	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <__NVIC_SetPriorityGrouping+0x44>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <__NVIC_SetPriorityGrouping+0x40>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00
 80033bc:	05fa0000 	.word	0x05fa0000

080033c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <__NVIC_GetPriorityGrouping+0x18>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 0307 	and.w	r3, r3, #7
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db0b      	blt.n	8003406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	4907      	ldr	r1, [pc, #28]	; (8003414 <__NVIC_EnableIRQ+0x38>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2001      	movs	r0, #1
 80033fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000e100 	.word	0xe000e100

08003418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db0a      	blt.n	8003442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	490c      	ldr	r1, [pc, #48]	; (8003464 <__NVIC_SetPriority+0x4c>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	440b      	add	r3, r1
 800343c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003440:	e00a      	b.n	8003458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <__NVIC_SetPriority+0x50>)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3b04      	subs	r3, #4
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	440b      	add	r3, r1
 8003456:	761a      	strb	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f1c3 0307 	rsb	r3, r3, #7
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf28      	it	cs
 800348a:	2304      	movcs	r3, #4
 800348c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3304      	adds	r3, #4
 8003492:	2b06      	cmp	r3, #6
 8003494:	d902      	bls.n	800349c <NVIC_EncodePriority+0x30>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3b03      	subs	r3, #3
 800349a:	e000      	b.n	800349e <NVIC_EncodePriority+0x32>
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	401a      	ands	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b4:	f04f 31ff 	mov.w	r1, #4294967295
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43d9      	mvns	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	4313      	orrs	r3, r2
         );
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e4:	d301      	bcc.n	80034ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00f      	b.n	800350a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <SysTick_Config+0x40>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034f2:	210f      	movs	r1, #15
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	f7ff ff8e 	bl	8003418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <SysTick_Config+0x40>)
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <SysTick_Config+0x40>)
 8003504:	2207      	movs	r2, #7
 8003506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	e000e010 	.word	0xe000e010

08003518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff29 	bl	8003378 <__NVIC_SetPriorityGrouping>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003540:	f7ff ff3e 	bl	80033c0 <__NVIC_GetPriorityGrouping>
 8003544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	6978      	ldr	r0, [r7, #20]
 800354c:	f7ff ff8e 	bl	800346c <NVIC_EncodePriority>
 8003550:	4602      	mov	r2, r0
 8003552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff5d 	bl	8003418 <__NVIC_SetPriority>
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff31 	bl	80033dc <__NVIC_EnableIRQ>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ffa2 	bl	80034d4 <SysTick_Config>
 8003590:	4603      	mov	r3, r0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035a8:	f7ff fabc 	bl	8002b24 <HAL_GetTick>
 80035ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d008      	beq.n	80035cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2280      	movs	r2, #128	; 0x80
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e052      	b.n	8003672 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0216 	bic.w	r2, r2, #22
 80035da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <HAL_DMA_Abort+0x62>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0208 	bic.w	r2, r2, #8
 800360a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800361c:	e013      	b.n	8003646 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800361e:	f7ff fa81 	bl	8002b24 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b05      	cmp	r3, #5
 800362a:	d90c      	bls.n	8003646 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2203      	movs	r2, #3
 8003636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e015      	b.n	8003672 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e4      	bne.n	800361e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	223f      	movs	r2, #63	; 0x3f
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d004      	beq.n	8003698 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e00c      	b.n	80036b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2205      	movs	r2, #5
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	e175      	b.n	80039cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80036e0:	2201      	movs	r2, #1
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	f040 8164 	bne.w	80039c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d005      	beq.n	8003716 <HAL_GPIO_Init+0x56>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d130      	bne.n	8003778 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800374c:	2201      	movs	r2, #1
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 0201 	and.w	r2, r3, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b03      	cmp	r3, #3
 8003782:	d017      	beq.n	80037b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d123      	bne.n	8003808 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	08da      	lsrs	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3208      	adds	r2, #8
 80037c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	220f      	movs	r2, #15
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	08da      	lsrs	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3208      	adds	r2, #8
 8003802:	69b9      	ldr	r1, [r7, #24]
 8003804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0203 	and.w	r2, r3, #3
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80be 	beq.w	80039c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	4b66      	ldr	r3, [pc, #408]	; (80039e4 <HAL_GPIO_Init+0x324>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4a65      	ldr	r2, [pc, #404]	; (80039e4 <HAL_GPIO_Init+0x324>)
 8003850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003854:	6453      	str	r3, [r2, #68]	; 0x44
 8003856:	4b63      	ldr	r3, [pc, #396]	; (80039e4 <HAL_GPIO_Init+0x324>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003862:	4a61      	ldr	r2, [pc, #388]	; (80039e8 <HAL_GPIO_Init+0x328>)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	3302      	adds	r3, #2
 800386a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	220f      	movs	r2, #15
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a58      	ldr	r2, [pc, #352]	; (80039ec <HAL_GPIO_Init+0x32c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d037      	beq.n	80038fe <HAL_GPIO_Init+0x23e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a57      	ldr	r2, [pc, #348]	; (80039f0 <HAL_GPIO_Init+0x330>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d031      	beq.n	80038fa <HAL_GPIO_Init+0x23a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a56      	ldr	r2, [pc, #344]	; (80039f4 <HAL_GPIO_Init+0x334>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <HAL_GPIO_Init+0x236>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a55      	ldr	r2, [pc, #340]	; (80039f8 <HAL_GPIO_Init+0x338>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d025      	beq.n	80038f2 <HAL_GPIO_Init+0x232>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a54      	ldr	r2, [pc, #336]	; (80039fc <HAL_GPIO_Init+0x33c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01f      	beq.n	80038ee <HAL_GPIO_Init+0x22e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a53      	ldr	r2, [pc, #332]	; (8003a00 <HAL_GPIO_Init+0x340>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d019      	beq.n	80038ea <HAL_GPIO_Init+0x22a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a52      	ldr	r2, [pc, #328]	; (8003a04 <HAL_GPIO_Init+0x344>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_GPIO_Init+0x226>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a51      	ldr	r2, [pc, #324]	; (8003a08 <HAL_GPIO_Init+0x348>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00d      	beq.n	80038e2 <HAL_GPIO_Init+0x222>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a50      	ldr	r2, [pc, #320]	; (8003a0c <HAL_GPIO_Init+0x34c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <HAL_GPIO_Init+0x21e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4f      	ldr	r2, [pc, #316]	; (8003a10 <HAL_GPIO_Init+0x350>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_GPIO_Init+0x21a>
 80038d6:	2309      	movs	r3, #9
 80038d8:	e012      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038da:	230a      	movs	r3, #10
 80038dc:	e010      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038de:	2308      	movs	r3, #8
 80038e0:	e00e      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038e2:	2307      	movs	r3, #7
 80038e4:	e00c      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038e6:	2306      	movs	r3, #6
 80038e8:	e00a      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038ea:	2305      	movs	r3, #5
 80038ec:	e008      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038ee:	2304      	movs	r3, #4
 80038f0:	e006      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038f2:	2303      	movs	r3, #3
 80038f4:	e004      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e002      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_GPIO_Init+0x240>
 80038fe:	2300      	movs	r3, #0
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	f002 0203 	and.w	r2, r2, #3
 8003906:	0092      	lsls	r2, r2, #2
 8003908:	4093      	lsls	r3, r2
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4313      	orrs	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003910:	4935      	ldr	r1, [pc, #212]	; (80039e8 <HAL_GPIO_Init+0x328>)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	3302      	adds	r3, #2
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_GPIO_Init+0x354>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003942:	4a34      	ldr	r2, [pc, #208]	; (8003a14 <HAL_GPIO_Init+0x354>)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <HAL_GPIO_Init+0x354>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800396c:	4a29      	ldr	r2, [pc, #164]	; (8003a14 <HAL_GPIO_Init+0x354>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003972:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <HAL_GPIO_Init+0x354>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003996:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <HAL_GPIO_Init+0x354>)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_GPIO_Init+0x354>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039c0:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <HAL_GPIO_Init+0x354>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3301      	adds	r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b0f      	cmp	r3, #15
 80039d0:	f67f ae86 	bls.w	80036e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
 80039d8:	3724      	adds	r7, #36	; 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40013800 	.word	0x40013800
 80039ec:	40020000 	.word	0x40020000
 80039f0:	40020400 	.word	0x40020400
 80039f4:	40020800 	.word	0x40020800
 80039f8:	40020c00 	.word	0x40020c00
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40021400 	.word	0x40021400
 8003a04:	40021800 	.word	0x40021800
 8003a08:	40021c00 	.word	0x40021c00
 8003a0c:	40022000 	.word	0x40022000
 8003a10:	40022400 	.word	0x40022400
 8003a14:	40013c00 	.word	0x40013c00

08003a18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	e001      	b.n	8003a3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]
 8003a54:	4613      	mov	r3, r2
 8003a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a58:	787b      	ldrb	r3, [r7, #1]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a5e:	887a      	ldrh	r2, [r7, #2]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a64:	e003      	b.n	8003a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	041a      	lsls	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	619a      	str	r2, [r3, #24]
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07f      	b.n	8003b8e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd ffec 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003acc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003adc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d107      	bne.n	8003af6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	e006      	b.n	8003b04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d104      	bne.n	8003b16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6859      	ldr	r1, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <HAL_I2C_Init+0x11c>)
 8003b22:	430b      	orrs	r3, r1
 8003b24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69d9      	ldr	r1, [r3, #28]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1a      	ldr	r2, [r3, #32]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	02008000 	.word	0x02008000

08003b9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	460b      	mov	r3, r1
 8003baa:	817b      	strh	r3, [r7, #10]
 8003bac:	4613      	mov	r3, r2
 8003bae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	f040 80da 	bne.w	8003d72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2C_Master_Transmit+0x30>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e0d3      	b.n	8003d74 <HAL_I2C_Master_Transmit+0x1d8>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bd4:	f7fe ffa6 	bl	8002b24 <HAL_GetTick>
 8003bd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2319      	movs	r3, #25
 8003be0:	2201      	movs	r2, #1
 8003be2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fb4e 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0be      	b.n	8003d74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2221      	movs	r2, #33	; 0x21
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2210      	movs	r2, #16
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	893a      	ldrh	r2, [r7, #8]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2bff      	cmp	r3, #255	; 0xff
 8003c26:	d90e      	bls.n	8003c46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	22ff      	movs	r2, #255	; 0xff
 8003c2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	8979      	ldrh	r1, [r7, #10]
 8003c36:	4b51      	ldr	r3, [pc, #324]	; (8003d7c <HAL_I2C_Master_Transmit+0x1e0>)
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fd38 	bl	80046b4 <I2C_TransferConfig>
 8003c44:	e06c      	b.n	8003d20 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	8979      	ldrh	r1, [r7, #10]
 8003c58:	4b48      	ldr	r3, [pc, #288]	; (8003d7c <HAL_I2C_Master_Transmit+0x1e0>)
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fd27 	bl	80046b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c66:	e05b      	b.n	8003d20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	6a39      	ldr	r1, [r7, #32]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fb4b 	bl	8004308 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e07b      	b.n	8003d74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d034      	beq.n	8003d20 <HAL_I2C_Master_Transmit+0x184>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d130      	bne.n	8003d20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fadd 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e04d      	b.n	8003d74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2bff      	cmp	r3, #255	; 0xff
 8003ce0:	d90e      	bls.n	8003d00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	22ff      	movs	r2, #255	; 0xff
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	8979      	ldrh	r1, [r7, #10]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fcdb 	bl	80046b4 <I2C_TransferConfig>
 8003cfe:	e00f      	b.n	8003d20 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	8979      	ldrh	r1, [r7, #10]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fcca 	bl	80046b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d19e      	bne.n	8003c68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	6a39      	ldr	r1, [r7, #32]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fb2a 	bl	8004388 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e01a      	b.n	8003d74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2220      	movs	r2, #32
 8003d44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_I2C_Master_Transmit+0x1e4>)
 8003d52:	400b      	ands	r3, r1
 8003d54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e000      	b.n	8003d74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003d72:	2302      	movs	r3, #2
  }
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	80002000 	.word	0x80002000
 8003d80:	fe00e800 	.word	0xfe00e800

08003d84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	460b      	mov	r3, r1
 8003d92:	817b      	strh	r3, [r7, #10]
 8003d94:	4613      	mov	r3, r2
 8003d96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	f040 80db 	bne.w	8003f5c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_I2C_Master_Receive+0x30>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e0d4      	b.n	8003f5e <HAL_I2C_Master_Receive+0x1da>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dbc:	f7fe feb2 	bl	8002b24 <HAL_GetTick>
 8003dc0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2319      	movs	r3, #25
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fa5a 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0bf      	b.n	8003f5e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2222      	movs	r2, #34	; 0x22
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2210      	movs	r2, #16
 8003dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	893a      	ldrh	r2, [r7, #8]
 8003dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2bff      	cmp	r3, #255	; 0xff
 8003e0e:	d90e      	bls.n	8003e2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	22ff      	movs	r2, #255	; 0xff
 8003e14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	8979      	ldrh	r1, [r7, #10]
 8003e1e:	4b52      	ldr	r3, [pc, #328]	; (8003f68 <HAL_I2C_Master_Receive+0x1e4>)
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fc44 	bl	80046b4 <I2C_TransferConfig>
 8003e2c:	e06d      	b.n	8003f0a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	8979      	ldrh	r1, [r7, #10]
 8003e40:	4b49      	ldr	r3, [pc, #292]	; (8003f68 <HAL_I2C_Master_Receive+0x1e4>)
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fc33 	bl	80046b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003e4e:	e05c      	b.n	8003f0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	6a39      	ldr	r1, [r7, #32]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fad3 	bl	8004400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e07c      	b.n	8003f5e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d034      	beq.n	8003f0a <HAL_I2C_Master_Receive+0x186>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d130      	bne.n	8003f0a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2180      	movs	r1, #128	; 0x80
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f9e8 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e04d      	b.n	8003f5e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2bff      	cmp	r3, #255	; 0xff
 8003eca:	d90e      	bls.n	8003eea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	22ff      	movs	r2, #255	; 0xff
 8003ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	8979      	ldrh	r1, [r7, #10]
 8003eda:	2300      	movs	r3, #0
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fbe6 	bl	80046b4 <I2C_TransferConfig>
 8003ee8:	e00f      	b.n	8003f0a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	8979      	ldrh	r1, [r7, #10]
 8003efc:	2300      	movs	r3, #0
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fbd5 	bl	80046b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d19d      	bne.n	8003e50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	6a39      	ldr	r1, [r7, #32]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fa35 	bl	8004388 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e01a      	b.n	8003f5e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <HAL_I2C_Master_Receive+0x1e8>)
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	80002400 	.word	0x80002400
 8003f6c:	fe00e800 	.word	0xfe00e800

08003f70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	460b      	mov	r3, r1
 8003f84:	813b      	strh	r3, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	f040 80f9 	bne.w	800418a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_I2C_Mem_Write+0x34>
 8003f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003faa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0ed      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_I2C_Mem_Write+0x4e>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e0e6      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fc6:	f7fe fdad 	bl	8002b24 <HAL_GetTick>
 8003fca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2319      	movs	r3, #25
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f955 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0d1      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2221      	movs	r2, #33	; 0x21
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2240      	movs	r2, #64	; 0x40
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004010:	88f8      	ldrh	r0, [r7, #6]
 8004012:	893a      	ldrh	r2, [r7, #8]
 8004014:	8979      	ldrh	r1, [r7, #10]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	4603      	mov	r3, r0
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f8b9 	bl	8004198 <I2C_RequestMemoryWrite>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0a9      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	2bff      	cmp	r3, #255	; 0xff
 8004040:	d90e      	bls.n	8004060 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	22ff      	movs	r2, #255	; 0xff
 8004046:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	b2da      	uxtb	r2, r3
 800404e:	8979      	ldrh	r1, [r7, #10]
 8004050:	2300      	movs	r3, #0
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fb2b 	bl	80046b4 <I2C_TransferConfig>
 800405e:	e00f      	b.n	8004080 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406e:	b2da      	uxtb	r2, r3
 8004070:	8979      	ldrh	r1, [r7, #10]
 8004072:	2300      	movs	r3, #0
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fb1a 	bl	80046b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f93f 	bl	8004308 <I2C_WaitOnTXISFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e07b      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d034      	beq.n	8004138 <HAL_I2C_Mem_Write+0x1c8>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d130      	bne.n	8004138 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	2200      	movs	r2, #0
 80040de:	2180      	movs	r1, #128	; 0x80
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f8d1 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e04d      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2bff      	cmp	r3, #255	; 0xff
 80040f8:	d90e      	bls.n	8004118 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22ff      	movs	r2, #255	; 0xff
 80040fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	b2da      	uxtb	r2, r3
 8004106:	8979      	ldrh	r1, [r7, #10]
 8004108:	2300      	movs	r3, #0
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 facf 	bl	80046b4 <I2C_TransferConfig>
 8004116:	e00f      	b.n	8004138 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	b2da      	uxtb	r2, r3
 8004128:	8979      	ldrh	r1, [r7, #10]
 800412a:	2300      	movs	r3, #0
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fabe 	bl	80046b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d19e      	bne.n	8004080 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f91e 	bl	8004388 <I2C_WaitOnSTOPFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e01a      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2220      	movs	r2, #32
 800415c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_I2C_Mem_Write+0x224>)
 800416a:	400b      	ands	r3, r1
 800416c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	fe00e800 	.word	0xfe00e800

08004198 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	461a      	mov	r2, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	817b      	strh	r3, [r7, #10]
 80041aa:	460b      	mov	r3, r1
 80041ac:	813b      	strh	r3, [r7, #8]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	8979      	ldrh	r1, [r7, #10]
 80041b8:	4b20      	ldr	r3, [pc, #128]	; (800423c <I2C_RequestMemoryWrite+0xa4>)
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fa77 	bl	80046b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	69b9      	ldr	r1, [r7, #24]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f89c 	bl	8004308 <I2C_WaitOnTXISFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e02c      	b.n	8004234 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041e0:	893b      	ldrh	r3, [r7, #8]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	629a      	str	r2, [r3, #40]	; 0x28
 80041ea:	e015      	b.n	8004218 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041ec:	893b      	ldrh	r3, [r7, #8]
 80041ee:	0a1b      	lsrs	r3, r3, #8
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	69b9      	ldr	r1, [r7, #24]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f882 	bl	8004308 <I2C_WaitOnTXISFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e012      	b.n	8004234 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800420e:	893b      	ldrh	r3, [r7, #8]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2200      	movs	r2, #0
 8004220:	2180      	movs	r1, #128	; 0x80
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f830 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	80002000 	.word	0x80002000

08004240 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b02      	cmp	r3, #2
 8004254:	d103      	bne.n	800425e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d007      	beq.n	800427c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	619a      	str	r2, [r3, #24]
  }
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004298:	e022      	b.n	80042e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d01e      	beq.n	80042e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a2:	f7fe fc3f 	bl	8002b24 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d113      	bne.n	80042e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e00f      	b.n	8004300 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4013      	ands	r3, r2
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d0cd      	beq.n	800429a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004314:	e02c      	b.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f8ea 	bl	80044f4 <I2C_IsErrorOccurred>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e02a      	b.n	8004380 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d01e      	beq.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fe fbf7 	bl	8002b24 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d113      	bne.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e007      	b.n	8004380 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d1cb      	bne.n	8004316 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004394:	e028      	b.n	80043e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f8aa 	bl	80044f4 <I2C_IsErrorOccurred>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e026      	b.n	80043f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043aa:	f7fe fbbb 	bl	8002b24 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d302      	bcc.n	80043c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d113      	bne.n	80043e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e007      	b.n	80043f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d1cf      	bne.n	8004396 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800440c:	e064      	b.n	80044d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f86e 	bl	80044f4 <I2C_IsErrorOccurred>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e062      	b.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b20      	cmp	r3, #32
 800442e:	d138      	bne.n	80044a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d105      	bne.n	800444a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e04e      	b.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b10      	cmp	r3, #16
 8004456:	d107      	bne.n	8004468 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2204      	movs	r2, #4
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
 8004466:	e002      	b.n	800446e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2220      	movs	r2, #32
 8004474:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004482:	400b      	ands	r3, r1
 8004484:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e022      	b.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a2:	f7fe fb3f 	bl	8002b24 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10f      	bne.n	80044d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e007      	b.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d193      	bne.n	800440e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	fe00e800 	.word	0xfe00e800

080044f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	d068      	beq.n	80045f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2210      	movs	r2, #16
 8004526:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004528:	e049      	b.n	80045be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d045      	beq.n	80045be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004532:	f7fe faf7 	bl	8002b24 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	429a      	cmp	r2, r3
 8004540:	d302      	bcc.n	8004548 <I2C_IsErrorOccurred+0x54>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d13a      	bne.n	80045be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004552:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800455a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800456a:	d121      	bne.n	80045b0 <I2C_IsErrorOccurred+0xbc>
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004572:	d01d      	beq.n	80045b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	2b20      	cmp	r3, #32
 8004578:	d01a      	beq.n	80045b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004588:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800458a:	f7fe facb 	bl	8002b24 <HAL_GetTick>
 800458e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004590:	e00e      	b.n	80045b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004592:	f7fe fac7 	bl	8002b24 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b19      	cmp	r3, #25
 800459e:	d907      	bls.n	80045b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	f043 0320 	orr.w	r3, r3, #32
 80045a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80045ae:	e006      	b.n	80045be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d1e9      	bne.n	8004592 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d003      	beq.n	80045d4 <I2C_IsErrorOccurred+0xe0>
 80045cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0aa      	beq.n	800452a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2220      	movs	r2, #32
 80045e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f043 0304 	orr.w	r3, r3, #4
 80045ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004614:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	f043 0308 	orr.w	r3, r3, #8
 800462c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004636:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00b      	beq.n	8004660 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	f043 0302 	orr.w	r3, r3, #2
 800464e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004658:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01c      	beq.n	80046a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff fde9 	bl	8004240 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <I2C_IsErrorOccurred+0x1bc>)
 800467a:	400b      	ands	r3, r1
 800467c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	431a      	orrs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80046a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3728      	adds	r7, #40	; 0x28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	fe00e800 	.word	0xfe00e800

080046b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	817b      	strh	r3, [r7, #10]
 80046c2:	4613      	mov	r3, r2
 80046c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046cc:	7a7b      	ldrb	r3, [r7, #9]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	4313      	orrs	r3, r2
 80046de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	0d5b      	lsrs	r3, r3, #21
 80046ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <I2C_TransferConfig+0x60>)
 80046f4:	430b      	orrs	r3, r1
 80046f6:	43db      	mvns	r3, r3
 80046f8:	ea02 0103 	and.w	r1, r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004706:	bf00      	nop
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	03ff63ff 	.word	0x03ff63ff

08004718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b20      	cmp	r3, #32
 800472c:	d138      	bne.n	80047a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004738:	2302      	movs	r3, #2
 800473a:	e032      	b.n	80047a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2224      	movs	r2, #36	; 0x24
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800476a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6819      	ldr	r1, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d139      	bne.n	8004838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e033      	b.n	800483a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2224      	movs	r2, #36	; 0x24
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a04      	ldr	r2, [pc, #16]	; (8004864 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004856:	6013      	str	r3, [r2, #0]
}
 8004858:	bf00      	nop
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40007000 	.word	0x40007000

08004868 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004872:	4b23      	ldr	r3, [pc, #140]	; (8004900 <HAL_PWREx_EnableOverDrive+0x98>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	4a22      	ldr	r2, [pc, #136]	; (8004900 <HAL_PWREx_EnableOverDrive+0x98>)
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
 800487e:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_PWREx_EnableOverDrive+0x98>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800488a:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <HAL_PWREx_EnableOverDrive+0x9c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1d      	ldr	r2, [pc, #116]	; (8004904 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004894:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004896:	f7fe f945 	bl	8002b24 <HAL_GetTick>
 800489a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800489c:	e009      	b.n	80048b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800489e:	f7fe f941 	bl	8002b24 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ac:	d901      	bls.n	80048b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e022      	b.n	80048f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048be:	d1ee      	bne.n	800489e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048c0:	4b10      	ldr	r3, [pc, #64]	; (8004904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0f      	ldr	r2, [pc, #60]	; (8004904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_GetTick>
 80048d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048d2:	e009      	b.n	80048e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048d4:	f7fe f926 	bl	8002b24 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048e2:	d901      	bls.n	80048e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e007      	b.n	80048f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048f4:	d1ee      	bne.n	80048d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40023800 	.word	0x40023800
 8004904:	40007000 	.word	0x40007000

08004908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004910:	2300      	movs	r3, #0
 8004912:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e291      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8087 	beq.w	8004a3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800492c:	4b96      	ldr	r3, [pc, #600]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 030c 	and.w	r3, r3, #12
 8004934:	2b04      	cmp	r3, #4
 8004936:	d00c      	beq.n	8004952 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004938:	4b93      	ldr	r3, [pc, #588]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b08      	cmp	r3, #8
 8004942:	d112      	bne.n	800496a <HAL_RCC_OscConfig+0x62>
 8004944:	4b90      	ldr	r3, [pc, #576]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004950:	d10b      	bne.n	800496a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004952:	4b8d      	ldr	r3, [pc, #564]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d06c      	beq.n	8004a38 <HAL_RCC_OscConfig+0x130>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d168      	bne.n	8004a38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e26b      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004972:	d106      	bne.n	8004982 <HAL_RCC_OscConfig+0x7a>
 8004974:	4b84      	ldr	r3, [pc, #528]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a83      	ldr	r2, [pc, #524]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 800497a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	e02e      	b.n	80049e0 <HAL_RCC_OscConfig+0xd8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x9c>
 800498a:	4b7f      	ldr	r3, [pc, #508]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a7e      	ldr	r2, [pc, #504]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b7c      	ldr	r3, [pc, #496]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7b      	ldr	r2, [pc, #492]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 800499c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e01d      	b.n	80049e0 <HAL_RCC_OscConfig+0xd8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0xc0>
 80049ae:	4b76      	ldr	r3, [pc, #472]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a75      	ldr	r2, [pc, #468]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b73      	ldr	r3, [pc, #460]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a72      	ldr	r2, [pc, #456]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0xd8>
 80049c8:	4b6f      	ldr	r3, [pc, #444]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a6e      	ldr	r2, [pc, #440]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6b      	ldr	r2, [pc, #428]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fe f89c 	bl	8002b24 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fe f898 	bl	8002b24 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e21f      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b61      	ldr	r3, [pc, #388]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0xe8>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fe f888 	bl	8002b24 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fe f884 	bl	8002b24 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e20b      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2a:	4b57      	ldr	r3, [pc, #348]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x110>
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d069      	beq.n	8004b1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a46:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a52:	4b4d      	ldr	r3, [pc, #308]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d11c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x190>
 8004a5e:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d116      	bne.n	8004a98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6a:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_RCC_OscConfig+0x17a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d001      	beq.n	8004a82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e1df      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a82:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	493d      	ldr	r1, [pc, #244]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a96:	e040      	b.n	8004b1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d023      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aa0:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a38      	ldr	r2, [pc, #224]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fe f83a 	bl	8002b24 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab4:	f7fe f836 	bl	8002b24 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e1bd      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac6:	4b30      	ldr	r3, [pc, #192]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad2:	4b2d      	ldr	r3, [pc, #180]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4929      	ldr	r1, [pc, #164]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	600b      	str	r3, [r1, #0]
 8004ae6:	e018      	b.n	8004b1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ae8:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a26      	ldr	r2, [pc, #152]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fe f816 	bl	8002b24 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afc:	f7fe f812 	bl	8002b24 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e199      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0e:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d038      	beq.n	8004b98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d019      	beq.n	8004b62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2e:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b32:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3a:	f7fd fff3 	bl	8002b24 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b42:	f7fd ffef 	bl	8002b24 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e176      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b54:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x23a>
 8004b60:	e01a      	b.n	8004b98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b62:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b66:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <HAL_RCC_OscConfig+0x280>)
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fd ffd9 	bl	8002b24 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b76:	f7fd ffd5 	bl	8002b24 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d903      	bls.n	8004b8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e15c      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
 8004b88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b8c:	4b91      	ldr	r3, [pc, #580]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1ee      	bne.n	8004b76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80a4 	beq.w	8004cee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba6:	4b8b      	ldr	r3, [pc, #556]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb2:	4b88      	ldr	r3, [pc, #544]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	4a87      	ldr	r2, [pc, #540]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bbe:	4b85      	ldr	r3, [pc, #532]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	60bb      	str	r3, [r7, #8]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bce:	4b82      	ldr	r3, [pc, #520]	; (8004dd8 <HAL_RCC_OscConfig+0x4d0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d118      	bne.n	8004c0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004bda:	4b7f      	ldr	r3, [pc, #508]	; (8004dd8 <HAL_RCC_OscConfig+0x4d0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a7e      	ldr	r2, [pc, #504]	; (8004dd8 <HAL_RCC_OscConfig+0x4d0>)
 8004be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be6:	f7fd ff9d 	bl	8002b24 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bee:	f7fd ff99 	bl	8002b24 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b64      	cmp	r3, #100	; 0x64
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e120      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c00:	4b75      	ldr	r3, [pc, #468]	; (8004dd8 <HAL_RCC_OscConfig+0x4d0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d106      	bne.n	8004c22 <HAL_RCC_OscConfig+0x31a>
 8004c14:	4b6f      	ldr	r3, [pc, #444]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a6e      	ldr	r2, [pc, #440]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c20:	e02d      	b.n	8004c7e <HAL_RCC_OscConfig+0x376>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x33c>
 8004c2a:	4b6a      	ldr	r3, [pc, #424]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	4a69      	ldr	r2, [pc, #420]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c30:	f023 0301 	bic.w	r3, r3, #1
 8004c34:	6713      	str	r3, [r2, #112]	; 0x70
 8004c36:	4b67      	ldr	r3, [pc, #412]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	4a66      	ldr	r2, [pc, #408]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c3c:	f023 0304 	bic.w	r3, r3, #4
 8004c40:	6713      	str	r3, [r2, #112]	; 0x70
 8004c42:	e01c      	b.n	8004c7e <HAL_RCC_OscConfig+0x376>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b05      	cmp	r3, #5
 8004c4a:	d10c      	bne.n	8004c66 <HAL_RCC_OscConfig+0x35e>
 8004c4c:	4b61      	ldr	r3, [pc, #388]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	4a60      	ldr	r2, [pc, #384]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c52:	f043 0304 	orr.w	r3, r3, #4
 8004c56:	6713      	str	r3, [r2, #112]	; 0x70
 8004c58:	4b5e      	ldr	r3, [pc, #376]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5c:	4a5d      	ldr	r2, [pc, #372]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	6713      	str	r3, [r2, #112]	; 0x70
 8004c64:	e00b      	b.n	8004c7e <HAL_RCC_OscConfig+0x376>
 8004c66:	4b5b      	ldr	r3, [pc, #364]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	4a5a      	ldr	r2, [pc, #360]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	6713      	str	r3, [r2, #112]	; 0x70
 8004c72:	4b58      	ldr	r3, [pc, #352]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	4a57      	ldr	r2, [pc, #348]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004c78:	f023 0304 	bic.w	r3, r3, #4
 8004c7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d015      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c86:	f7fd ff4d 	bl	8002b24 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8c:	e00a      	b.n	8004ca4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8e:	f7fd ff49 	bl	8002b24 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e0ce      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca4:	4b4b      	ldr	r3, [pc, #300]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ee      	beq.n	8004c8e <HAL_RCC_OscConfig+0x386>
 8004cb0:	e014      	b.n	8004cdc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb2:	f7fd ff37 	bl	8002b24 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb8:	e00a      	b.n	8004cd0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cba:	f7fd ff33 	bl	8002b24 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e0b8      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd0:	4b40      	ldr	r3, [pc, #256]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1ee      	bne.n	8004cba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d105      	bne.n	8004cee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce2:	4b3c      	ldr	r3, [pc, #240]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	4a3b      	ldr	r2, [pc, #236]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80a4 	beq.w	8004e40 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cf8:	4b36      	ldr	r3, [pc, #216]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 030c 	and.w	r3, r3, #12
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d06b      	beq.n	8004ddc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d149      	bne.n	8004da0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0c:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a30      	ldr	r2, [pc, #192]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd ff04 	bl	8002b24 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fd ff00 	bl	8002b24 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e087      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	4b28      	ldr	r3, [pc, #160]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69da      	ldr	r2, [r3, #28]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	019b      	lsls	r3, r3, #6
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	085b      	lsrs	r3, r3, #1
 8004d56:	3b01      	subs	r3, #1
 8004d58:	041b      	lsls	r3, r3, #16
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	061b      	lsls	r3, r3, #24
 8004d62:	4313      	orrs	r3, r2
 8004d64:	4a1b      	ldr	r2, [pc, #108]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004d66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d6a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d6c:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fd fed4 	bl	8002b24 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fd fed0 	bl	8002b24 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e057      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d92:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0x478>
 8004d9e:	e04f      	b.n	8004e40 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0b      	ldr	r2, [pc, #44]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fd feba 	bl	8002b24 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db4:	f7fd feb6 	bl	8002b24 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e03d      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc6:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <HAL_RCC_OscConfig+0x4cc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x4ac>
 8004dd2:	e035      	b.n	8004e40 <HAL_RCC_OscConfig+0x538>
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <HAL_RCC_OscConfig+0x544>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d028      	beq.n	8004e3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d121      	bne.n	8004e3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d11a      	bne.n	8004e3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d111      	bne.n	8004e3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	3b01      	subs	r3, #1
 8004e26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800

08004e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0d0      	b.n	800500a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e68:	4b6a      	ldr	r3, [pc, #424]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d910      	bls.n	8004e98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e76:	4b67      	ldr	r3, [pc, #412]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f023 020f 	bic.w	r2, r3, #15
 8004e7e:	4965      	ldr	r1, [pc, #404]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e86:	4b63      	ldr	r3, [pc, #396]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d001      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0b8      	b.n	800500a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d020      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb0:	4b59      	ldr	r3, [pc, #356]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4a58      	ldr	r2, [pc, #352]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ec8:	4b53      	ldr	r3, [pc, #332]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4a52      	ldr	r2, [pc, #328]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ed2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed4:	4b50      	ldr	r3, [pc, #320]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	494d      	ldr	r1, [pc, #308]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d040      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d107      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efa:	4b47      	ldr	r3, [pc, #284]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d115      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e07f      	b.n	800500a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d107      	bne.n	8004f22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f12:	4b41      	ldr	r3, [pc, #260]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e073      	b.n	800500a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f22:	4b3d      	ldr	r3, [pc, #244]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e06b      	b.n	800500a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f32:	4b39      	ldr	r3, [pc, #228]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f023 0203 	bic.w	r2, r3, #3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	4936      	ldr	r1, [pc, #216]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f44:	f7fd fdee 	bl	8002b24 <HAL_GetTick>
 8004f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4a:	e00a      	b.n	8004f62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f4c:	f7fd fdea 	bl	8002b24 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e053      	b.n	800500a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f62:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 020c 	and.w	r2, r3, #12
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d1eb      	bne.n	8004f4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f74:	4b27      	ldr	r3, [pc, #156]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d210      	bcs.n	8004fa4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b24      	ldr	r3, [pc, #144]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 020f 	bic.w	r2, r3, #15
 8004f8a:	4922      	ldr	r1, [pc, #136]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	4b20      	ldr	r3, [pc, #128]	; (8005014 <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e032      	b.n	800500a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb0:	4b19      	ldr	r3, [pc, #100]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4916      	ldr	r1, [pc, #88]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	490e      	ldr	r1, [pc, #56]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fe2:	f000 f821 	bl	8005028 <HAL_RCC_GetSysClockFreq>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <HAL_RCC_ClockConfig+0x1c8>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	091b      	lsrs	r3, r3, #4
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	490a      	ldr	r1, [pc, #40]	; (800501c <HAL_RCC_ClockConfig+0x1cc>)
 8004ff4:	5ccb      	ldrb	r3, [r1, r3]
 8004ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffa:	4a09      	ldr	r2, [pc, #36]	; (8005020 <HAL_RCC_ClockConfig+0x1d0>)
 8004ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ffe:	4b09      	ldr	r3, [pc, #36]	; (8005024 <HAL_RCC_ClockConfig+0x1d4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f7fd fd4a 	bl	8002a9c <HAL_InitTick>

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40023c00 	.word	0x40023c00
 8005018:	40023800 	.word	0x40023800
 800501c:	0800b20c 	.word	0x0800b20c
 8005020:	20000008 	.word	0x20000008
 8005024:	2000000c 	.word	0x2000000c

08005028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800502c:	b094      	sub	sp, #80	; 0x50
 800502e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	647b      	str	r3, [r7, #68]	; 0x44
 8005034:	2300      	movs	r3, #0
 8005036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005038:	2300      	movs	r3, #0
 800503a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005040:	4b79      	ldr	r3, [pc, #484]	; (8005228 <HAL_RCC_GetSysClockFreq+0x200>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 030c 	and.w	r3, r3, #12
 8005048:	2b08      	cmp	r3, #8
 800504a:	d00d      	beq.n	8005068 <HAL_RCC_GetSysClockFreq+0x40>
 800504c:	2b08      	cmp	r3, #8
 800504e:	f200 80e1 	bhi.w	8005214 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0x34>
 8005056:	2b04      	cmp	r3, #4
 8005058:	d003      	beq.n	8005062 <HAL_RCC_GetSysClockFreq+0x3a>
 800505a:	e0db      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800505c:	4b73      	ldr	r3, [pc, #460]	; (800522c <HAL_RCC_GetSysClockFreq+0x204>)
 800505e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005060:	e0db      	b.n	800521a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005062:	4b73      	ldr	r3, [pc, #460]	; (8005230 <HAL_RCC_GetSysClockFreq+0x208>)
 8005064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005066:	e0d8      	b.n	800521a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005068:	4b6f      	ldr	r3, [pc, #444]	; (8005228 <HAL_RCC_GetSysClockFreq+0x200>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005070:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005072:	4b6d      	ldr	r3, [pc, #436]	; (8005228 <HAL_RCC_GetSysClockFreq+0x200>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d063      	beq.n	8005146 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800507e:	4b6a      	ldr	r3, [pc, #424]	; (8005228 <HAL_RCC_GetSysClockFreq+0x200>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	099b      	lsrs	r3, r3, #6
 8005084:	2200      	movs	r2, #0
 8005086:	63bb      	str	r3, [r7, #56]	; 0x38
 8005088:	63fa      	str	r2, [r7, #60]	; 0x3c
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
 8005092:	2300      	movs	r3, #0
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
 8005096:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800509a:	4622      	mov	r2, r4
 800509c:	462b      	mov	r3, r5
 800509e:	f04f 0000 	mov.w	r0, #0
 80050a2:	f04f 0100 	mov.w	r1, #0
 80050a6:	0159      	lsls	r1, r3, #5
 80050a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ac:	0150      	lsls	r0, r2, #5
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4621      	mov	r1, r4
 80050b4:	1a51      	subs	r1, r2, r1
 80050b6:	6139      	str	r1, [r7, #16]
 80050b8:	4629      	mov	r1, r5
 80050ba:	eb63 0301 	sbc.w	r3, r3, r1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050cc:	4659      	mov	r1, fp
 80050ce:	018b      	lsls	r3, r1, #6
 80050d0:	4651      	mov	r1, sl
 80050d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050d6:	4651      	mov	r1, sl
 80050d8:	018a      	lsls	r2, r1, #6
 80050da:	4651      	mov	r1, sl
 80050dc:	ebb2 0801 	subs.w	r8, r2, r1
 80050e0:	4659      	mov	r1, fp
 80050e2:	eb63 0901 	sbc.w	r9, r3, r1
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050fa:	4690      	mov	r8, r2
 80050fc:	4699      	mov	r9, r3
 80050fe:	4623      	mov	r3, r4
 8005100:	eb18 0303 	adds.w	r3, r8, r3
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	462b      	mov	r3, r5
 8005108:	eb49 0303 	adc.w	r3, r9, r3
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800511a:	4629      	mov	r1, r5
 800511c:	024b      	lsls	r3, r1, #9
 800511e:	4621      	mov	r1, r4
 8005120:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005124:	4621      	mov	r1, r4
 8005126:	024a      	lsls	r2, r1, #9
 8005128:	4610      	mov	r0, r2
 800512a:	4619      	mov	r1, r3
 800512c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512e:	2200      	movs	r2, #0
 8005130:	62bb      	str	r3, [r7, #40]	; 0x28
 8005132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005138:	f7fb fd90 	bl	8000c5c <__aeabi_uldivmod>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4613      	mov	r3, r2
 8005142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005144:	e058      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005146:	4b38      	ldr	r3, [pc, #224]	; (8005228 <HAL_RCC_GetSysClockFreq+0x200>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	099b      	lsrs	r3, r3, #6
 800514c:	2200      	movs	r2, #0
 800514e:	4618      	mov	r0, r3
 8005150:	4611      	mov	r1, r2
 8005152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005156:	623b      	str	r3, [r7, #32]
 8005158:	2300      	movs	r3, #0
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
 800515c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005160:	4642      	mov	r2, r8
 8005162:	464b      	mov	r3, r9
 8005164:	f04f 0000 	mov.w	r0, #0
 8005168:	f04f 0100 	mov.w	r1, #0
 800516c:	0159      	lsls	r1, r3, #5
 800516e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005172:	0150      	lsls	r0, r2, #5
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4641      	mov	r1, r8
 800517a:	ebb2 0a01 	subs.w	sl, r2, r1
 800517e:	4649      	mov	r1, r9
 8005180:	eb63 0b01 	sbc.w	fp, r3, r1
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005190:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005194:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005198:	ebb2 040a 	subs.w	r4, r2, sl
 800519c:	eb63 050b 	sbc.w	r5, r3, fp
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	00eb      	lsls	r3, r5, #3
 80051aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ae:	00e2      	lsls	r2, r4, #3
 80051b0:	4614      	mov	r4, r2
 80051b2:	461d      	mov	r5, r3
 80051b4:	4643      	mov	r3, r8
 80051b6:	18e3      	adds	r3, r4, r3
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	464b      	mov	r3, r9
 80051bc:	eb45 0303 	adc.w	r3, r5, r3
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051ce:	4629      	mov	r1, r5
 80051d0:	028b      	lsls	r3, r1, #10
 80051d2:	4621      	mov	r1, r4
 80051d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051d8:	4621      	mov	r1, r4
 80051da:	028a      	lsls	r2, r1, #10
 80051dc:	4610      	mov	r0, r2
 80051de:	4619      	mov	r1, r3
 80051e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e2:	2200      	movs	r2, #0
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	61fa      	str	r2, [r7, #28]
 80051e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051ec:	f7fb fd36 	bl	8000c5c <__aeabi_uldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4613      	mov	r3, r2
 80051f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <HAL_RCC_GetSysClockFreq+0x200>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	3301      	adds	r3, #1
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800520a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005212:	e002      	b.n	800521a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCC_GetSysClockFreq+0x204>)
 8005216:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800521a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800521c:	4618      	mov	r0, r3
 800521e:	3750      	adds	r7, #80	; 0x50
 8005220:	46bd      	mov	sp, r7
 8005222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800
 800522c:	00f42400 	.word	0x00f42400
 8005230:	007a1200 	.word	0x007a1200

08005234 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <HAL_RCC_GetHCLKFreq+0x14>)
 800523a:	681b      	ldr	r3, [r3, #0]
}
 800523c:	4618      	mov	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	20000008 	.word	0x20000008

0800524c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005250:	f7ff fff0 	bl	8005234 <HAL_RCC_GetHCLKFreq>
 8005254:	4602      	mov	r2, r0
 8005256:	4b05      	ldr	r3, [pc, #20]	; (800526c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	0a9b      	lsrs	r3, r3, #10
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	4903      	ldr	r1, [pc, #12]	; (8005270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005262:	5ccb      	ldrb	r3, [r1, r3]
 8005264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005268:	4618      	mov	r0, r3
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40023800 	.word	0x40023800
 8005270:	0800b21c 	.word	0x0800b21c

08005274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005278:	f7ff ffdc 	bl	8005234 <HAL_RCC_GetHCLKFreq>
 800527c:	4602      	mov	r2, r0
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	0b5b      	lsrs	r3, r3, #13
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	4903      	ldr	r1, [pc, #12]	; (8005298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800528a:	5ccb      	ldrb	r3, [r1, r3]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40023800 	.word	0x40023800
 8005298:	0800b21c 	.word	0x0800b21c

0800529c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d012      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052c4:	4b69      	ldr	r3, [pc, #420]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4a68      	ldr	r2, [pc, #416]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80052ce:	6093      	str	r3, [r2, #8]
 80052d0:	4b66      	ldr	r3, [pc, #408]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d8:	4964      	ldr	r1, [pc, #400]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80052e6:	2301      	movs	r3, #1
 80052e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d017      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052f6:	4b5d      	ldr	r3, [pc, #372]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005304:	4959      	ldr	r1, [pc, #356]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005314:	d101      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005316:	2301      	movs	r3, #1
 8005318:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005322:	2301      	movs	r3, #1
 8005324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d017      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005332:	4b4e      	ldr	r3, [pc, #312]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005338:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	494a      	ldr	r1, [pc, #296]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005350:	d101      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005352:	2301      	movs	r3, #1
 8005354:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800535e:	2301      	movs	r3, #1
 8005360:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800536e:	2301      	movs	r3, #1
 8005370:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 808b 	beq.w	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005380:	4b3a      	ldr	r3, [pc, #232]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	4a39      	ldr	r2, [pc, #228]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538a:	6413      	str	r3, [r2, #64]	; 0x40
 800538c:	4b37      	ldr	r3, [pc, #220]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005398:	4b35      	ldr	r3, [pc, #212]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a34      	ldr	r2, [pc, #208]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800539e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a4:	f7fd fbbe 	bl	8002b24 <HAL_GetTick>
 80053a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ac:	f7fd fbba 	bl	8002b24 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b64      	cmp	r3, #100	; 0x64
 80053b8:	d901      	bls.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e357      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053be:	4b2c      	ldr	r3, [pc, #176]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f0      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053ca:	4b28      	ldr	r3, [pc, #160]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d035      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d02e      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053e8:	4b20      	ldr	r3, [pc, #128]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053f2:	4b1e      	ldr	r3, [pc, #120]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f6:	4a1d      	ldr	r2, [pc, #116]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053fe:	4b1b      	ldr	r3, [pc, #108]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	4a1a      	ldr	r2, [pc, #104]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005408:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800540a:	4a18      	ldr	r2, [pc, #96]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005410:	4b16      	ldr	r3, [pc, #88]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	d114      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fd fb82 	bl	8002b24 <HAL_GetTick>
 8005420:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005422:	e00a      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005424:	f7fd fb7e 	bl	8002b24 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005432:	4293      	cmp	r3, r2
 8005434:	d901      	bls.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e319      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0ee      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005452:	d111      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005460:	4b04      	ldr	r3, [pc, #16]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005462:	400b      	ands	r3, r1
 8005464:	4901      	ldr	r1, [pc, #4]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005466:	4313      	orrs	r3, r2
 8005468:	608b      	str	r3, [r1, #8]
 800546a:	e00b      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800546c:	40023800 	.word	0x40023800
 8005470:	40007000 	.word	0x40007000
 8005474:	0ffffcff 	.word	0x0ffffcff
 8005478:	4baa      	ldr	r3, [pc, #680]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4aa9      	ldr	r2, [pc, #676]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800547e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005482:	6093      	str	r3, [r2, #8]
 8005484:	4ba7      	ldr	r3, [pc, #668]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005486:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005490:	49a4      	ldr	r1, [pc, #656]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005492:	4313      	orrs	r3, r2
 8005494:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d010      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054a2:	4ba0      	ldr	r3, [pc, #640]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a8:	4a9e      	ldr	r2, [pc, #632]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054b2:	4b9c      	ldr	r3, [pc, #624]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	4999      	ldr	r1, [pc, #612]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054d0:	4b94      	ldr	r3, [pc, #592]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054de:	4991      	ldr	r1, [pc, #580]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054f2:	4b8c      	ldr	r3, [pc, #560]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005500:	4988      	ldr	r1, [pc, #544]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005514:	4b83      	ldr	r3, [pc, #524]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005522:	4980      	ldr	r1, [pc, #512]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005536:	4b7b      	ldr	r3, [pc, #492]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005544:	4977      	ldr	r1, [pc, #476]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005558:	4b72      	ldr	r3, [pc, #456]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	f023 0203 	bic.w	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	496f      	ldr	r1, [pc, #444]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800557a:	4b6a      	ldr	r3, [pc, #424]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005580:	f023 020c 	bic.w	r2, r3, #12
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005588:	4966      	ldr	r1, [pc, #408]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800559c:	4b61      	ldr	r3, [pc, #388]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055aa:	495e      	ldr	r1, [pc, #376]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055be:	4b59      	ldr	r3, [pc, #356]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055cc:	4955      	ldr	r1, [pc, #340]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055e0:	4b50      	ldr	r3, [pc, #320]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ee:	494d      	ldr	r1, [pc, #308]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005602:	4b48      	ldr	r3, [pc, #288]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005608:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005610:	4944      	ldr	r1, [pc, #272]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005624:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005632:	493c      	ldr	r1, [pc, #240]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005646:	4b37      	ldr	r3, [pc, #220]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005654:	4933      	ldr	r1, [pc, #204]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005668:	4b2e      	ldr	r3, [pc, #184]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005676:	492b      	ldr	r1, [pc, #172]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d011      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800568a:	4b26      	ldr	r3, [pc, #152]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800568c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005690:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005698:	4922      	ldr	r1, [pc, #136]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a8:	d101      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80056aa:	2301      	movs	r3, #1
 80056ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80056ba:	2301      	movs	r3, #1
 80056bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ca:	4b16      	ldr	r3, [pc, #88]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d8:	4912      	ldr	r1, [pc, #72]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00b      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056fc:	4909      	ldr	r1, [pc, #36]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d006      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80d9 	beq.w	80058ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005718:	4b02      	ldr	r3, [pc, #8]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a01      	ldr	r2, [pc, #4]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800571e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005722:	e001      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005724:	40023800 	.word	0x40023800
 8005728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800572a:	f7fd f9fb 	bl	8002b24 <HAL_GetTick>
 800572e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005730:	e008      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005732:	f7fd f9f7 	bl	8002b24 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b64      	cmp	r3, #100	; 0x64
 800573e:	d901      	bls.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e194      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005744:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f0      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d021      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005760:	2b00      	cmp	r3, #0
 8005762:	d11d      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005764:	4b64      	ldr	r3, [pc, #400]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005772:	4b61      	ldr	r3, [pc, #388]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005778:	0e1b      	lsrs	r3, r3, #24
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	019a      	lsls	r2, r3, #6
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	431a      	orrs	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	061b      	lsls	r3, r3, #24
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	071b      	lsls	r3, r3, #28
 8005798:	4957      	ldr	r1, [pc, #348]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b4:	d00a      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d02e      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ca:	d129      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057cc:	4b4a      	ldr	r3, [pc, #296]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d2:	0c1b      	lsrs	r3, r3, #16
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057da:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e0:	0f1b      	lsrs	r3, r3, #28
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	019a      	lsls	r2, r3, #6
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	041b      	lsls	r3, r3, #16
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	061b      	lsls	r3, r3, #24
 80057fa:	431a      	orrs	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	071b      	lsls	r3, r3, #28
 8005800:	493d      	ldr	r1, [pc, #244]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005808:	4b3b      	ldr	r3, [pc, #236]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800580a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580e:	f023 021f 	bic.w	r2, r3, #31
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	3b01      	subs	r3, #1
 8005818:	4937      	ldr	r1, [pc, #220]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01d      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800582c:	4b32      	ldr	r3, [pc, #200]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800582e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005832:	0e1b      	lsrs	r3, r3, #24
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800583a:	4b2f      	ldr	r3, [pc, #188]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800583c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005840:	0f1b      	lsrs	r3, r3, #28
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	019a      	lsls	r2, r3, #6
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	041b      	lsls	r3, r3, #16
 8005854:	431a      	orrs	r2, r3
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	061b      	lsls	r3, r3, #24
 800585a:	431a      	orrs	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	071b      	lsls	r3, r3, #28
 8005860:	4925      	ldr	r1, [pc, #148]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d011      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	019a      	lsls	r2, r3, #6
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	061b      	lsls	r3, r3, #24
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	071b      	lsls	r3, r3, #28
 8005890:	4919      	ldr	r1, [pc, #100]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005898:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800589e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a4:	f7fd f93e 	bl	8002b24 <HAL_GetTick>
 80058a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058ac:	f7fd f93a 	bl	8002b24 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	; 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e0d7      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	f040 80cd 	bne.w	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058d2:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a08      	ldr	r2, [pc, #32]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058de:	f7fd f921 	bl	8002b24 <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058e4:	e00a      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058e6:	f7fd f91d 	bl	8002b24 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b64      	cmp	r3, #100	; 0x64
 80058f2:	d903      	bls.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e0ba      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80058f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058fc:	4b5e      	ldr	r3, [pc, #376]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005908:	d0ed      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005926:	2b00      	cmp	r3, #0
 8005928:	d02e      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d12a      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005932:	4b51      	ldr	r3, [pc, #324]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	0c1b      	lsrs	r3, r3, #16
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005940:	4b4d      	ldr	r3, [pc, #308]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	0f1b      	lsrs	r3, r3, #28
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	019a      	lsls	r2, r3, #6
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	041b      	lsls	r3, r3, #16
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	061b      	lsls	r3, r3, #24
 8005960:	431a      	orrs	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	071b      	lsls	r3, r3, #28
 8005966:	4944      	ldr	r1, [pc, #272]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800596e:	4b42      	ldr	r3, [pc, #264]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005974:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597c:	3b01      	subs	r3, #1
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	493d      	ldr	r1, [pc, #244]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d022      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800599c:	d11d      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800599e:	4b36      	ldr	r3, [pc, #216]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a4:	0e1b      	lsrs	r3, r3, #24
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059ac:	4b32      	ldr	r3, [pc, #200]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	0f1b      	lsrs	r3, r3, #28
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	019a      	lsls	r2, r3, #6
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	041b      	lsls	r3, r3, #16
 80059c6:	431a      	orrs	r2, r3
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	061b      	lsls	r3, r3, #24
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	071b      	lsls	r3, r3, #28
 80059d2:	4929      	ldr	r1, [pc, #164]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d028      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059e6:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ec:	0e1b      	lsrs	r3, r3, #24
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059f4:	4b20      	ldr	r3, [pc, #128]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	0c1b      	lsrs	r3, r3, #16
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	019a      	lsls	r2, r3, #6
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	041b      	lsls	r3, r3, #16
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	061b      	lsls	r3, r3, #24
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	071b      	lsls	r3, r3, #28
 8005a1a:	4917      	ldr	r1, [pc, #92]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a22:	4b15      	ldr	r3, [pc, #84]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	4911      	ldr	r1, [pc, #68]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a38:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a0e      	ldr	r2, [pc, #56]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a44:	f7fd f86e 	bl	8002b24 <HAL_GetTick>
 8005a48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a4c:	f7fd f86a 	bl	8002b24 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b64      	cmp	r3, #100	; 0x64
 8005a58:	d901      	bls.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e007      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a6a:	d1ef      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	40023800 	.word	0x40023800

08005a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e049      	b.n	8005b22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fc fe98 	bl	80027d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f000 fc2a 	bl	8006314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d001      	beq.n	8005b44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e054      	b.n	8005bee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a26      	ldr	r2, [pc, #152]	; (8005bfc <HAL_TIM_Base_Start_IT+0xd0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d022      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x80>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6e:	d01d      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x80>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a22      	ldr	r2, [pc, #136]	; (8005c00 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d018      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x80>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a21      	ldr	r2, [pc, #132]	; (8005c04 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d013      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x80>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00e      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x80>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1e      	ldr	r2, [pc, #120]	; (8005c0c <HAL_TIM_Base_Start_IT+0xe0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d009      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x80>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1c      	ldr	r2, [pc, #112]	; (8005c10 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x80>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d115      	bne.n	8005bd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	4b19      	ldr	r3, [pc, #100]	; (8005c18 <HAL_TIM_Base_Start_IT+0xec>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d015      	beq.n	8005bea <HAL_TIM_Base_Start_IT+0xbe>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc4:	d011      	beq.n	8005bea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd6:	e008      	b.n	8005bea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e000      	b.n	8005bec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40010400 	.word	0x40010400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40001800 	.word	0x40001800
 8005c18:	00010007 	.word	0x00010007

08005c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e049      	b.n	8005cc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fc fda8 	bl	8002798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f000 fb5a 	bl	8006314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d122      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d11b      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0202 	mvn.w	r2, #2
 8005cf6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fae3 	bl	80062d8 <HAL_TIM_IC_CaptureCallback>
 8005d12:	e005      	b.n	8005d20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fad5 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fae6 	bl	80062ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d122      	bne.n	8005d7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d11b      	bne.n	8005d7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f06f 0204 	mvn.w	r2, #4
 8005d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fab9 	bl	80062d8 <HAL_TIM_IC_CaptureCallback>
 8005d66:	e005      	b.n	8005d74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 faab 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fabc 	bl	80062ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d122      	bne.n	8005dce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d11b      	bne.n	8005dce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f06f 0208 	mvn.w	r2, #8
 8005d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2204      	movs	r2, #4
 8005da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fa8f 	bl	80062d8 <HAL_TIM_IC_CaptureCallback>
 8005dba:	e005      	b.n	8005dc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fa81 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa92 	bl	80062ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d122      	bne.n	8005e22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	2b10      	cmp	r3, #16
 8005de8:	d11b      	bne.n	8005e22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f06f 0210 	mvn.w	r2, #16
 8005df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2208      	movs	r2, #8
 8005df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fa65 	bl	80062d8 <HAL_TIM_IC_CaptureCallback>
 8005e0e:	e005      	b.n	8005e1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fa57 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fa68 	bl	80062ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d10e      	bne.n	8005e4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d107      	bne.n	8005e4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f06f 0201 	mvn.w	r2, #1
 8005e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7fc f8d5 	bl	8001ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e58:	2b80      	cmp	r3, #128	; 0x80
 8005e5a:	d10e      	bne.n	8005e7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e66:	2b80      	cmp	r3, #128	; 0x80
 8005e68:	d107      	bne.n	8005e7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fefb 	bl	8006c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e88:	d10e      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e94:	2b80      	cmp	r3, #128	; 0x80
 8005e96:	d107      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 feee 	bl	8006c84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b40      	cmp	r3, #64	; 0x40
 8005eb4:	d10e      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d107      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa16 	bl	8006300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d10e      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d107      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0220 	mvn.w	r2, #32
 8005ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 feae 	bl	8006c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e0ff      	b.n	8006126 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b14      	cmp	r3, #20
 8005f32:	f200 80f0 	bhi.w	8006116 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f36:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f91 	.word	0x08005f91
 8005f40:	08006117 	.word	0x08006117
 8005f44:	08006117 	.word	0x08006117
 8005f48:	08006117 	.word	0x08006117
 8005f4c:	08005fd1 	.word	0x08005fd1
 8005f50:	08006117 	.word	0x08006117
 8005f54:	08006117 	.word	0x08006117
 8005f58:	08006117 	.word	0x08006117
 8005f5c:	08006013 	.word	0x08006013
 8005f60:	08006117 	.word	0x08006117
 8005f64:	08006117 	.word	0x08006117
 8005f68:	08006117 	.word	0x08006117
 8005f6c:	08006053 	.word	0x08006053
 8005f70:	08006117 	.word	0x08006117
 8005f74:	08006117 	.word	0x08006117
 8005f78:	08006117 	.word	0x08006117
 8005f7c:	08006095 	.word	0x08006095
 8005f80:	08006117 	.word	0x08006117
 8005f84:	08006117 	.word	0x08006117
 8005f88:	08006117 	.word	0x08006117
 8005f8c:	080060d5 	.word	0x080060d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fa5c 	bl	8006454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0208 	orr.w	r2, r2, #8
 8005faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699a      	ldr	r2, [r3, #24]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0204 	bic.w	r2, r2, #4
 8005fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6999      	ldr	r1, [r3, #24]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	619a      	str	r2, [r3, #24]
      break;
 8005fce:	e0a5      	b.n	800611c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 faae 	bl	8006538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6999      	ldr	r1, [r3, #24]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	021a      	lsls	r2, r3, #8
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	619a      	str	r2, [r3, #24]
      break;
 8006010:	e084      	b.n	800611c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	4618      	mov	r0, r3
 800601a:	f000 fb05 	bl	8006628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f042 0208 	orr.w	r2, r2, #8
 800602c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0204 	bic.w	r2, r2, #4
 800603c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69d9      	ldr	r1, [r3, #28]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	61da      	str	r2, [r3, #28]
      break;
 8006050:	e064      	b.n	800611c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fb5b 	bl	8006714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800606c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69d9      	ldr	r1, [r3, #28]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	021a      	lsls	r2, r3, #8
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	61da      	str	r2, [r3, #28]
      break;
 8006092:	e043      	b.n	800611c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fb92 	bl	80067c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0208 	orr.w	r2, r2, #8
 80060ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0204 	bic.w	r2, r2, #4
 80060be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060d2:	e023      	b.n	800611c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fbc4 	bl	8006868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	021a      	lsls	r2, r3, #8
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006114:	e002      	b.n	800611c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	75fb      	strb	r3, [r7, #23]
      break;
 800611a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop

08006130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_TIM_ConfigClockSource+0x1c>
 8006148:	2302      	movs	r3, #2
 800614a:	e0b4      	b.n	80062b6 <HAL_TIM_ConfigClockSource+0x186>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	4b56      	ldr	r3, [pc, #344]	; (80062c0 <HAL_TIM_ConfigClockSource+0x190>)
 8006168:	4013      	ands	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006184:	d03e      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0xd4>
 8006186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618a:	f200 8087 	bhi.w	800629c <HAL_TIM_ConfigClockSource+0x16c>
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006192:	f000 8086 	beq.w	80062a2 <HAL_TIM_ConfigClockSource+0x172>
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619a:	d87f      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 800619c:	2b70      	cmp	r3, #112	; 0x70
 800619e:	d01a      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0xa6>
 80061a0:	2b70      	cmp	r3, #112	; 0x70
 80061a2:	d87b      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061a4:	2b60      	cmp	r3, #96	; 0x60
 80061a6:	d050      	beq.n	800624a <HAL_TIM_ConfigClockSource+0x11a>
 80061a8:	2b60      	cmp	r3, #96	; 0x60
 80061aa:	d877      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061ac:	2b50      	cmp	r3, #80	; 0x50
 80061ae:	d03c      	beq.n	800622a <HAL_TIM_ConfigClockSource+0xfa>
 80061b0:	2b50      	cmp	r3, #80	; 0x50
 80061b2:	d873      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	d058      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x13a>
 80061b8:	2b40      	cmp	r3, #64	; 0x40
 80061ba:	d86f      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061bc:	2b30      	cmp	r3, #48	; 0x30
 80061be:	d064      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15a>
 80061c0:	2b30      	cmp	r3, #48	; 0x30
 80061c2:	d86b      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d060      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15a>
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d867      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d05c      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15a>
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d05a      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15a>
 80061d4:	e062      	b.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6899      	ldr	r1, [r3, #8]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f000 fc0d 	bl	8006a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	609a      	str	r2, [r3, #8]
      break;
 8006202:	e04f      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	6899      	ldr	r1, [r3, #8]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f000 fbf6 	bl	8006a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006226:	609a      	str	r2, [r3, #8]
      break;
 8006228:	e03c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	6859      	ldr	r1, [r3, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	461a      	mov	r2, r3
 8006238:	f000 fb6a 	bl	8006910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2150      	movs	r1, #80	; 0x50
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fbc3 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 8006248:	e02c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	461a      	mov	r2, r3
 8006258:	f000 fb89 	bl	800696e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2160      	movs	r1, #96	; 0x60
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fbb3 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 8006268:	e01c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6859      	ldr	r1, [r3, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	461a      	mov	r2, r3
 8006278:	f000 fb4a 	bl	8006910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2140      	movs	r1, #64	; 0x40
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fba3 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 8006288:	e00c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f000 fb9a 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 800629a:	e003      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
      break;
 80062a0:	e000      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	fffeff88 	.word	0xfffeff88

080062c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a40      	ldr	r2, [pc, #256]	; (8006428 <TIM_Base_SetConfig+0x114>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d013      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006332:	d00f      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a3d      	ldr	r2, [pc, #244]	; (800642c <TIM_Base_SetConfig+0x118>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00b      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a3c      	ldr	r2, [pc, #240]	; (8006430 <TIM_Base_SetConfig+0x11c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a3b      	ldr	r2, [pc, #236]	; (8006434 <TIM_Base_SetConfig+0x120>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a3a      	ldr	r2, [pc, #232]	; (8006438 <TIM_Base_SetConfig+0x124>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d108      	bne.n	8006366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2f      	ldr	r2, [pc, #188]	; (8006428 <TIM_Base_SetConfig+0x114>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d02b      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006374:	d027      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2c      	ldr	r2, [pc, #176]	; (800642c <TIM_Base_SetConfig+0x118>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d023      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2b      	ldr	r2, [pc, #172]	; (8006430 <TIM_Base_SetConfig+0x11c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d01f      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a2a      	ldr	r2, [pc, #168]	; (8006434 <TIM_Base_SetConfig+0x120>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d01b      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a29      	ldr	r2, [pc, #164]	; (8006438 <TIM_Base_SetConfig+0x124>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d017      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a28      	ldr	r2, [pc, #160]	; (800643c <TIM_Base_SetConfig+0x128>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d013      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a27      	ldr	r2, [pc, #156]	; (8006440 <TIM_Base_SetConfig+0x12c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00f      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a26      	ldr	r2, [pc, #152]	; (8006444 <TIM_Base_SetConfig+0x130>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00b      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a25      	ldr	r2, [pc, #148]	; (8006448 <TIM_Base_SetConfig+0x134>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d007      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a24      	ldr	r2, [pc, #144]	; (800644c <TIM_Base_SetConfig+0x138>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d003      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a23      	ldr	r2, [pc, #140]	; (8006450 <TIM_Base_SetConfig+0x13c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d108      	bne.n	80063d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a0a      	ldr	r2, [pc, #40]	; (8006428 <TIM_Base_SetConfig+0x114>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_Base_SetConfig+0xf8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a0c      	ldr	r2, [pc, #48]	; (8006438 <TIM_Base_SetConfig+0x124>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d103      	bne.n	8006414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	615a      	str	r2, [r3, #20]
}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40010000 	.word	0x40010000
 800642c:	40000400 	.word	0x40000400
 8006430:	40000800 	.word	0x40000800
 8006434:	40000c00 	.word	0x40000c00
 8006438:	40010400 	.word	0x40010400
 800643c:	40014000 	.word	0x40014000
 8006440:	40014400 	.word	0x40014400
 8006444:	40014800 	.word	0x40014800
 8006448:	40001800 	.word	0x40001800
 800644c:	40001c00 	.word	0x40001c00
 8006450:	40002000 	.word	0x40002000

08006454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	f023 0201 	bic.w	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4b2b      	ldr	r3, [pc, #172]	; (800652c <TIM_OC1_SetConfig+0xd8>)
 8006480:	4013      	ands	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0303 	bic.w	r3, r3, #3
 800648a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f023 0302 	bic.w	r3, r3, #2
 800649c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a21      	ldr	r2, [pc, #132]	; (8006530 <TIM_OC1_SetConfig+0xdc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC1_SetConfig+0x64>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a20      	ldr	r2, [pc, #128]	; (8006534 <TIM_OC1_SetConfig+0xe0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d10c      	bne.n	80064d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f023 0308 	bic.w	r3, r3, #8
 80064be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 0304 	bic.w	r3, r3, #4
 80064d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a16      	ldr	r2, [pc, #88]	; (8006530 <TIM_OC1_SetConfig+0xdc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d003      	beq.n	80064e2 <TIM_OC1_SetConfig+0x8e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a15      	ldr	r2, [pc, #84]	; (8006534 <TIM_OC1_SetConfig+0xe0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d111      	bne.n	8006506 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	621a      	str	r2, [r3, #32]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	fffeff8f 	.word	0xfffeff8f
 8006530:	40010000 	.word	0x40010000
 8006534:	40010400 	.word	0x40010400

08006538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f023 0210 	bic.w	r2, r3, #16
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4b2e      	ldr	r3, [pc, #184]	; (800661c <TIM_OC2_SetConfig+0xe4>)
 8006564:	4013      	ands	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f023 0320 	bic.w	r3, r3, #32
 8006582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a23      	ldr	r2, [pc, #140]	; (8006620 <TIM_OC2_SetConfig+0xe8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC2_SetConfig+0x68>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a22      	ldr	r2, [pc, #136]	; (8006624 <TIM_OC2_SetConfig+0xec>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10d      	bne.n	80065bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a18      	ldr	r2, [pc, #96]	; (8006620 <TIM_OC2_SetConfig+0xe8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_OC2_SetConfig+0x94>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a17      	ldr	r2, [pc, #92]	; (8006624 <TIM_OC2_SetConfig+0xec>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d113      	bne.n	80065f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	feff8fff 	.word	0xfeff8fff
 8006620:	40010000 	.word	0x40010000
 8006624:	40010400 	.word	0x40010400

08006628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4b2d      	ldr	r3, [pc, #180]	; (8006708 <TIM_OC3_SetConfig+0xe0>)
 8006654:	4013      	ands	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0303 	bic.w	r3, r3, #3
 800665e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a22      	ldr	r2, [pc, #136]	; (800670c <TIM_OC3_SetConfig+0xe4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_OC3_SetConfig+0x66>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a21      	ldr	r2, [pc, #132]	; (8006710 <TIM_OC3_SetConfig+0xe8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d10d      	bne.n	80066aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a17      	ldr	r2, [pc, #92]	; (800670c <TIM_OC3_SetConfig+0xe4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d003      	beq.n	80066ba <TIM_OC3_SetConfig+0x92>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a16      	ldr	r2, [pc, #88]	; (8006710 <TIM_OC3_SetConfig+0xe8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d113      	bne.n	80066e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	621a      	str	r2, [r3, #32]
}
 80066fc:	bf00      	nop
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	fffeff8f 	.word	0xfffeff8f
 800670c:	40010000 	.word	0x40010000
 8006710:	40010400 	.word	0x40010400

08006714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4b1e      	ldr	r3, [pc, #120]	; (80067b8 <TIM_OC4_SetConfig+0xa4>)
 8006740:	4013      	ands	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800675e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	031b      	lsls	r3, r3, #12
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a13      	ldr	r2, [pc, #76]	; (80067bc <TIM_OC4_SetConfig+0xa8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d003      	beq.n	800677c <TIM_OC4_SetConfig+0x68>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a12      	ldr	r2, [pc, #72]	; (80067c0 <TIM_OC4_SetConfig+0xac>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d109      	bne.n	8006790 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	019b      	lsls	r3, r3, #6
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	621a      	str	r2, [r3, #32]
}
 80067aa:	bf00      	nop
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	feff8fff 	.word	0xfeff8fff
 80067bc:	40010000 	.word	0x40010000
 80067c0:	40010400 	.word	0x40010400

080067c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4b1b      	ldr	r3, [pc, #108]	; (800685c <TIM_OC5_SetConfig+0x98>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006804:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a12      	ldr	r2, [pc, #72]	; (8006860 <TIM_OC5_SetConfig+0x9c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d003      	beq.n	8006822 <TIM_OC5_SetConfig+0x5e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a11      	ldr	r2, [pc, #68]	; (8006864 <TIM_OC5_SetConfig+0xa0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d109      	bne.n	8006836 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	621a      	str	r2, [r3, #32]
}
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	fffeff8f 	.word	0xfffeff8f
 8006860:	40010000 	.word	0x40010000
 8006864:	40010400 	.word	0x40010400

08006868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <TIM_OC6_SetConfig+0x9c>)
 8006894:	4013      	ands	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	051b      	lsls	r3, r3, #20
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a13      	ldr	r2, [pc, #76]	; (8006908 <TIM_OC6_SetConfig+0xa0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC6_SetConfig+0x60>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a12      	ldr	r2, [pc, #72]	; (800690c <TIM_OC6_SetConfig+0xa4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d109      	bne.n	80068dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	feff8fff 	.word	0xfeff8fff
 8006908:	40010000 	.word	0x40010000
 800690c:	40010400 	.word	0x40010400

08006910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800693a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f023 030a 	bic.w	r3, r3, #10
 800694c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800696e:	b480      	push	{r7}
 8006970:	b087      	sub	sp, #28
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f023 0210 	bic.w	r2, r3, #16
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	031b      	lsls	r3, r3, #12
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f043 0307 	orr.w	r3, r3, #7
 80069f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	609a      	str	r2, [r3, #8]
}
 80069f8:	bf00      	nop
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	021a      	lsls	r2, r3, #8
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	609a      	str	r2, [r3, #8]
}
 8006a38:	bf00      	nop
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e06d      	b.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a30      	ldr	r2, [pc, #192]	; (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d004      	beq.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a2f      	ldr	r2, [pc, #188]	; (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d108      	bne.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a20      	ldr	r2, [pc, #128]	; (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d022      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ace:	d01d      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1a      	ldr	r2, [pc, #104]	; (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a16      	ldr	r2, [pc, #88]	; (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a15      	ldr	r2, [pc, #84]	; (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d10c      	bne.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	40010000 	.word	0x40010000
 8006b48:	40010400 	.word	0x40010400
 8006b4c:	40000400 	.word	0x40000400
 8006b50:	40000800 	.word	0x40000800
 8006b54:	40000c00 	.word	0x40000c00
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40001800 	.word	0x40001800

08006b60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e065      	b.n	8006c48 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	041b      	lsls	r3, r3, #16
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a14      	ldr	r2, [pc, #80]	; (8006c58 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d115      	bne.n	8006c36 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	051b      	lsls	r3, r3, #20
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	40010000 	.word	0x40010000
 8006c58:	40010400 	.word	0x40010400

08006c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e040      	b.n	8006d2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fb fe50 	bl	8002960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2224      	movs	r2, #36	; 0x24
 8006cc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fbe6 	bl	80074a8 <UART_SetConfig>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e022      	b.n	8006d2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fe3e 	bl	8007970 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fec5 	bl	8007ab4 <UART_CheckIdleState>
 8006d2a:	4603      	mov	r3, r0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	; 0x28
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d171      	bne.n	8006e30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_UART_Transmit+0x24>
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e06a      	b.n	8006e32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2221      	movs	r2, #33	; 0x21
 8006d68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d6a:	f7fb fedb 	bl	8002b24 <HAL_GetTick>
 8006d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	88fa      	ldrh	r2, [r7, #6]
 8006d74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	88fa      	ldrh	r2, [r7, #6]
 8006d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d88:	d108      	bne.n	8006d9c <HAL_UART_Transmit+0x68>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d104      	bne.n	8006d9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	e003      	b.n	8006da4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006da4:	e02c      	b.n	8006e00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2200      	movs	r2, #0
 8006dae:	2180      	movs	r1, #128	; 0x80
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 feb6 	bl	8007b22 <UART_WaitOnFlagUntilTimeout>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e038      	b.n	8006e32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10b      	bne.n	8006dde <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	3302      	adds	r3, #2
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	e007      	b.n	8006dee <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	3301      	adds	r3, #1
 8006dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1cc      	bne.n	8006da6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2200      	movs	r2, #0
 8006e14:	2140      	movs	r1, #64	; 0x40
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fe83 	bl	8007b22 <UART_WaitOnFlagUntilTimeout>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e005      	b.n	8006e32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	e000      	b.n	8006e32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006e30:	2302      	movs	r3, #2
  }
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3720      	adds	r7, #32
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b08a      	sub	sp, #40	; 0x28
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	4613      	mov	r3, r2
 8006e46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d132      	bne.n	8006eb8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <HAL_UART_Receive_IT+0x24>
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e02b      	b.n	8006eba <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d018      	beq.n	8006ea8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	613b      	str	r3, [r7, #16]
   return(result);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	461a      	mov	r2, r3
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	623b      	str	r3, [r7, #32]
 8006e96:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	69f9      	ldr	r1, [r7, #28]
 8006e9a:	6a3a      	ldr	r2, [r7, #32]
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e6      	bne.n	8006e76 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fefe 	bl	8007cb0 <UART_Start_Receive_IT>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	e000      	b.n	8006eba <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006eb8:	2302      	movs	r3, #2
  }
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3728      	adds	r7, #40	; 0x28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b0ba      	sub	sp, #232	; 0xe8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006eea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006eee:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d115      	bne.n	8006f2c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f04:	f003 0320 	and.w	r3, r3, #32
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00f      	beq.n	8006f2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d009      	beq.n	8006f2c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8297 	beq.w	8007450 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
      }
      return;
 8006f2a:	e291      	b.n	8007450 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 8117 	beq.w	8007164 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f46:	4b85      	ldr	r3, [pc, #532]	; (800715c <HAL_UART_IRQHandler+0x298>)
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 810a 	beq.w	8007164 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d011      	beq.n	8006f80 <HAL_UART_IRQHandler+0xbc>
 8006f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f76:	f043 0201 	orr.w	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d011      	beq.n	8006fb0 <HAL_UART_IRQHandler+0xec>
 8006f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa6:	f043 0204 	orr.w	r2, r3, #4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d011      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x11c>
 8006fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fd6:	f043 0202 	orr.w	r2, r3, #2
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d017      	beq.n	800701c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d105      	bne.n	8007004 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ffc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00b      	beq.n	800701c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2208      	movs	r2, #8
 800700a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007012:	f043 0208 	orr.w	r2, r3, #8
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800701c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007024:	2b00      	cmp	r3, #0
 8007026:	d012      	beq.n	800704e <HAL_UART_IRQHandler+0x18a>
 8007028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800702c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00c      	beq.n	800704e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800703c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 81fd 	beq.w	8007454 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800705a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00d      	beq.n	8007082 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b00      	cmp	r3, #0
 8007070:	d007      	beq.n	8007082 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007088:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007096:	2b40      	cmp	r3, #64	; 0x40
 8007098:	d005      	beq.n	80070a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800709a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800709e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d04f      	beq.n	8007146 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fec8 	bl	8007e3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	d141      	bne.n	800713e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3308      	adds	r3, #8
 80070c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80070d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3308      	adds	r3, #8
 80070e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1d9      	bne.n	80070ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800710a:	2b00      	cmp	r3, #0
 800710c:	d013      	beq.n	8007136 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007112:	4a13      	ldr	r2, [pc, #76]	; (8007160 <HAL_UART_IRQHandler+0x29c>)
 8007114:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800711a:	4618      	mov	r0, r3
 800711c:	f7fc faad 	bl	800367a <HAL_DMA_Abort_IT>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d017      	beq.n	8007156 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007130:	4610      	mov	r0, r2
 8007132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007134:	e00f      	b.n	8007156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f9a0 	bl	800747c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713c:	e00b      	b.n	8007156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f99c 	bl	800747c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007144:	e007      	b.n	8007156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f998 	bl	800747c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007154:	e17e      	b.n	8007454 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007156:	bf00      	nop
    return;
 8007158:	e17c      	b.n	8007454 <HAL_UART_IRQHandler+0x590>
 800715a:	bf00      	nop
 800715c:	04000120 	.word	0x04000120
 8007160:	08007f05 	.word	0x08007f05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007168:	2b01      	cmp	r3, #1
 800716a:	f040 814c 	bne.w	8007406 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007172:	f003 0310 	and.w	r3, r3, #16
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 8145 	beq.w	8007406 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007180:	f003 0310 	and.w	r3, r3, #16
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 813e 	beq.w	8007406 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2210      	movs	r2, #16
 8007190:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	f040 80b6 	bne.w	800730e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 8150 	beq.w	8007458 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80071be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071c2:	429a      	cmp	r2, r3
 80071c4:	f080 8148 	bcs.w	8007458 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071dc:	f000 8086 	beq.w	80072ec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800720a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800720e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1da      	bne.n	80071e0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3308      	adds	r3, #8
 8007230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007234:	e853 3f00 	ldrex	r3, [r3]
 8007238:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800723a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800723c:	f023 0301 	bic.w	r3, r3, #1
 8007240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3308      	adds	r3, #8
 800724a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800724e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007252:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e1      	bne.n	800722a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3308      	adds	r3, #8
 800726c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3308      	adds	r3, #8
 8007286:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800728a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800728c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e3      	bne.n	8007266 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072bc:	f023 0310 	bic.w	r3, r3, #16
 80072c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80072d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e4      	bne.n	80072ac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fc f957 	bl	800359a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	b29b      	uxth	r3, r3
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f8c2 	bl	8007490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800730c:	e0a4      	b.n	8007458 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800731a:	b29b      	uxth	r3, r3
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 8096 	beq.w	800745c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8091 	beq.w	800745c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800734e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800735c:	647b      	str	r3, [r7, #68]	; 0x44
 800735e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e4      	bne.n	800733a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3308      	adds	r3, #8
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	623b      	str	r3, [r7, #32]
   return(result);
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	f023 0301 	bic.w	r3, r3, #1
 8007386:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3308      	adds	r3, #8
 8007390:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007394:	633a      	str	r2, [r7, #48]	; 0x30
 8007396:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800739a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e3      	bne.n	8007370 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f023 0310 	bic.w	r3, r3, #16
 80073d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	69b9      	ldr	r1, [r7, #24]
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	617b      	str	r3, [r7, #20]
   return(result);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e4      	bne.n	80073bc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2202      	movs	r2, #2
 80073f6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f846 	bl	8007490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007404:	e02a      	b.n	800745c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800740a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00e      	beq.n	8007430 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741a:	2b00      	cmp	r3, #0
 800741c:	d008      	beq.n	8007430 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01c      	beq.n	8007460 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
    }
    return;
 800742e:	e017      	b.n	8007460 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	d012      	beq.n	8007462 <HAL_UART_IRQHandler+0x59e>
 800743c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00c      	beq.n	8007462 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fd71 	bl	8007f30 <UART_EndTransmit_IT>
    return;
 800744e:	e008      	b.n	8007462 <HAL_UART_IRQHandler+0x59e>
      return;
 8007450:	bf00      	nop
 8007452:	e006      	b.n	8007462 <HAL_UART_IRQHandler+0x59e>
    return;
 8007454:	bf00      	nop
 8007456:	e004      	b.n	8007462 <HAL_UART_IRQHandler+0x59e>
      return;
 8007458:	bf00      	nop
 800745a:	e002      	b.n	8007462 <HAL_UART_IRQHandler+0x59e>
      return;
 800745c:	bf00      	nop
 800745e:	e000      	b.n	8007462 <HAL_UART_IRQHandler+0x59e>
    return;
 8007460:	bf00      	nop
  }

}
 8007462:	37e8      	adds	r7, #232	; 0xe8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4ba6      	ldr	r3, [pc, #664]	; (800776c <UART_SetConfig+0x2c4>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6812      	ldr	r2, [r2, #0]
 80074da:	6979      	ldr	r1, [r7, #20]
 80074dc:	430b      	orrs	r3, r1
 80074de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	430a      	orrs	r2, r1
 8007518:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a94      	ldr	r2, [pc, #592]	; (8007770 <UART_SetConfig+0x2c8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d120      	bne.n	8007566 <UART_SetConfig+0xbe>
 8007524:	4b93      	ldr	r3, [pc, #588]	; (8007774 <UART_SetConfig+0x2cc>)
 8007526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	2b03      	cmp	r3, #3
 8007530:	d816      	bhi.n	8007560 <UART_SetConfig+0xb8>
 8007532:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <UART_SetConfig+0x90>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	08007549 	.word	0x08007549
 800753c:	08007555 	.word	0x08007555
 8007540:	0800754f 	.word	0x0800754f
 8007544:	0800755b 	.word	0x0800755b
 8007548:	2301      	movs	r3, #1
 800754a:	77fb      	strb	r3, [r7, #31]
 800754c:	e150      	b.n	80077f0 <UART_SetConfig+0x348>
 800754e:	2302      	movs	r3, #2
 8007550:	77fb      	strb	r3, [r7, #31]
 8007552:	e14d      	b.n	80077f0 <UART_SetConfig+0x348>
 8007554:	2304      	movs	r3, #4
 8007556:	77fb      	strb	r3, [r7, #31]
 8007558:	e14a      	b.n	80077f0 <UART_SetConfig+0x348>
 800755a:	2308      	movs	r3, #8
 800755c:	77fb      	strb	r3, [r7, #31]
 800755e:	e147      	b.n	80077f0 <UART_SetConfig+0x348>
 8007560:	2310      	movs	r3, #16
 8007562:	77fb      	strb	r3, [r7, #31]
 8007564:	e144      	b.n	80077f0 <UART_SetConfig+0x348>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a83      	ldr	r2, [pc, #524]	; (8007778 <UART_SetConfig+0x2d0>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d132      	bne.n	80075d6 <UART_SetConfig+0x12e>
 8007570:	4b80      	ldr	r3, [pc, #512]	; (8007774 <UART_SetConfig+0x2cc>)
 8007572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007576:	f003 030c 	and.w	r3, r3, #12
 800757a:	2b0c      	cmp	r3, #12
 800757c:	d828      	bhi.n	80075d0 <UART_SetConfig+0x128>
 800757e:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <UART_SetConfig+0xdc>)
 8007580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007584:	080075b9 	.word	0x080075b9
 8007588:	080075d1 	.word	0x080075d1
 800758c:	080075d1 	.word	0x080075d1
 8007590:	080075d1 	.word	0x080075d1
 8007594:	080075c5 	.word	0x080075c5
 8007598:	080075d1 	.word	0x080075d1
 800759c:	080075d1 	.word	0x080075d1
 80075a0:	080075d1 	.word	0x080075d1
 80075a4:	080075bf 	.word	0x080075bf
 80075a8:	080075d1 	.word	0x080075d1
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	080075d1 	.word	0x080075d1
 80075b4:	080075cb 	.word	0x080075cb
 80075b8:	2300      	movs	r3, #0
 80075ba:	77fb      	strb	r3, [r7, #31]
 80075bc:	e118      	b.n	80077f0 <UART_SetConfig+0x348>
 80075be:	2302      	movs	r3, #2
 80075c0:	77fb      	strb	r3, [r7, #31]
 80075c2:	e115      	b.n	80077f0 <UART_SetConfig+0x348>
 80075c4:	2304      	movs	r3, #4
 80075c6:	77fb      	strb	r3, [r7, #31]
 80075c8:	e112      	b.n	80077f0 <UART_SetConfig+0x348>
 80075ca:	2308      	movs	r3, #8
 80075cc:	77fb      	strb	r3, [r7, #31]
 80075ce:	e10f      	b.n	80077f0 <UART_SetConfig+0x348>
 80075d0:	2310      	movs	r3, #16
 80075d2:	77fb      	strb	r3, [r7, #31]
 80075d4:	e10c      	b.n	80077f0 <UART_SetConfig+0x348>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a68      	ldr	r2, [pc, #416]	; (800777c <UART_SetConfig+0x2d4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d120      	bne.n	8007622 <UART_SetConfig+0x17a>
 80075e0:	4b64      	ldr	r3, [pc, #400]	; (8007774 <UART_SetConfig+0x2cc>)
 80075e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075ea:	2b30      	cmp	r3, #48	; 0x30
 80075ec:	d013      	beq.n	8007616 <UART_SetConfig+0x16e>
 80075ee:	2b30      	cmp	r3, #48	; 0x30
 80075f0:	d814      	bhi.n	800761c <UART_SetConfig+0x174>
 80075f2:	2b20      	cmp	r3, #32
 80075f4:	d009      	beq.n	800760a <UART_SetConfig+0x162>
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d810      	bhi.n	800761c <UART_SetConfig+0x174>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <UART_SetConfig+0x15c>
 80075fe:	2b10      	cmp	r3, #16
 8007600:	d006      	beq.n	8007610 <UART_SetConfig+0x168>
 8007602:	e00b      	b.n	800761c <UART_SetConfig+0x174>
 8007604:	2300      	movs	r3, #0
 8007606:	77fb      	strb	r3, [r7, #31]
 8007608:	e0f2      	b.n	80077f0 <UART_SetConfig+0x348>
 800760a:	2302      	movs	r3, #2
 800760c:	77fb      	strb	r3, [r7, #31]
 800760e:	e0ef      	b.n	80077f0 <UART_SetConfig+0x348>
 8007610:	2304      	movs	r3, #4
 8007612:	77fb      	strb	r3, [r7, #31]
 8007614:	e0ec      	b.n	80077f0 <UART_SetConfig+0x348>
 8007616:	2308      	movs	r3, #8
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	e0e9      	b.n	80077f0 <UART_SetConfig+0x348>
 800761c:	2310      	movs	r3, #16
 800761e:	77fb      	strb	r3, [r7, #31]
 8007620:	e0e6      	b.n	80077f0 <UART_SetConfig+0x348>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a56      	ldr	r2, [pc, #344]	; (8007780 <UART_SetConfig+0x2d8>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d120      	bne.n	800766e <UART_SetConfig+0x1c6>
 800762c:	4b51      	ldr	r3, [pc, #324]	; (8007774 <UART_SetConfig+0x2cc>)
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007632:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007636:	2bc0      	cmp	r3, #192	; 0xc0
 8007638:	d013      	beq.n	8007662 <UART_SetConfig+0x1ba>
 800763a:	2bc0      	cmp	r3, #192	; 0xc0
 800763c:	d814      	bhi.n	8007668 <UART_SetConfig+0x1c0>
 800763e:	2b80      	cmp	r3, #128	; 0x80
 8007640:	d009      	beq.n	8007656 <UART_SetConfig+0x1ae>
 8007642:	2b80      	cmp	r3, #128	; 0x80
 8007644:	d810      	bhi.n	8007668 <UART_SetConfig+0x1c0>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <UART_SetConfig+0x1a8>
 800764a:	2b40      	cmp	r3, #64	; 0x40
 800764c:	d006      	beq.n	800765c <UART_SetConfig+0x1b4>
 800764e:	e00b      	b.n	8007668 <UART_SetConfig+0x1c0>
 8007650:	2300      	movs	r3, #0
 8007652:	77fb      	strb	r3, [r7, #31]
 8007654:	e0cc      	b.n	80077f0 <UART_SetConfig+0x348>
 8007656:	2302      	movs	r3, #2
 8007658:	77fb      	strb	r3, [r7, #31]
 800765a:	e0c9      	b.n	80077f0 <UART_SetConfig+0x348>
 800765c:	2304      	movs	r3, #4
 800765e:	77fb      	strb	r3, [r7, #31]
 8007660:	e0c6      	b.n	80077f0 <UART_SetConfig+0x348>
 8007662:	2308      	movs	r3, #8
 8007664:	77fb      	strb	r3, [r7, #31]
 8007666:	e0c3      	b.n	80077f0 <UART_SetConfig+0x348>
 8007668:	2310      	movs	r3, #16
 800766a:	77fb      	strb	r3, [r7, #31]
 800766c:	e0c0      	b.n	80077f0 <UART_SetConfig+0x348>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a44      	ldr	r2, [pc, #272]	; (8007784 <UART_SetConfig+0x2dc>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d125      	bne.n	80076c4 <UART_SetConfig+0x21c>
 8007678:	4b3e      	ldr	r3, [pc, #248]	; (8007774 <UART_SetConfig+0x2cc>)
 800767a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007686:	d017      	beq.n	80076b8 <UART_SetConfig+0x210>
 8007688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800768c:	d817      	bhi.n	80076be <UART_SetConfig+0x216>
 800768e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007692:	d00b      	beq.n	80076ac <UART_SetConfig+0x204>
 8007694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007698:	d811      	bhi.n	80076be <UART_SetConfig+0x216>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <UART_SetConfig+0x1fe>
 800769e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a2:	d006      	beq.n	80076b2 <UART_SetConfig+0x20a>
 80076a4:	e00b      	b.n	80076be <UART_SetConfig+0x216>
 80076a6:	2300      	movs	r3, #0
 80076a8:	77fb      	strb	r3, [r7, #31]
 80076aa:	e0a1      	b.n	80077f0 <UART_SetConfig+0x348>
 80076ac:	2302      	movs	r3, #2
 80076ae:	77fb      	strb	r3, [r7, #31]
 80076b0:	e09e      	b.n	80077f0 <UART_SetConfig+0x348>
 80076b2:	2304      	movs	r3, #4
 80076b4:	77fb      	strb	r3, [r7, #31]
 80076b6:	e09b      	b.n	80077f0 <UART_SetConfig+0x348>
 80076b8:	2308      	movs	r3, #8
 80076ba:	77fb      	strb	r3, [r7, #31]
 80076bc:	e098      	b.n	80077f0 <UART_SetConfig+0x348>
 80076be:	2310      	movs	r3, #16
 80076c0:	77fb      	strb	r3, [r7, #31]
 80076c2:	e095      	b.n	80077f0 <UART_SetConfig+0x348>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a2f      	ldr	r2, [pc, #188]	; (8007788 <UART_SetConfig+0x2e0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d125      	bne.n	800771a <UART_SetConfig+0x272>
 80076ce:	4b29      	ldr	r3, [pc, #164]	; (8007774 <UART_SetConfig+0x2cc>)
 80076d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076dc:	d017      	beq.n	800770e <UART_SetConfig+0x266>
 80076de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076e2:	d817      	bhi.n	8007714 <UART_SetConfig+0x26c>
 80076e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e8:	d00b      	beq.n	8007702 <UART_SetConfig+0x25a>
 80076ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ee:	d811      	bhi.n	8007714 <UART_SetConfig+0x26c>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <UART_SetConfig+0x254>
 80076f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f8:	d006      	beq.n	8007708 <UART_SetConfig+0x260>
 80076fa:	e00b      	b.n	8007714 <UART_SetConfig+0x26c>
 80076fc:	2301      	movs	r3, #1
 80076fe:	77fb      	strb	r3, [r7, #31]
 8007700:	e076      	b.n	80077f0 <UART_SetConfig+0x348>
 8007702:	2302      	movs	r3, #2
 8007704:	77fb      	strb	r3, [r7, #31]
 8007706:	e073      	b.n	80077f0 <UART_SetConfig+0x348>
 8007708:	2304      	movs	r3, #4
 800770a:	77fb      	strb	r3, [r7, #31]
 800770c:	e070      	b.n	80077f0 <UART_SetConfig+0x348>
 800770e:	2308      	movs	r3, #8
 8007710:	77fb      	strb	r3, [r7, #31]
 8007712:	e06d      	b.n	80077f0 <UART_SetConfig+0x348>
 8007714:	2310      	movs	r3, #16
 8007716:	77fb      	strb	r3, [r7, #31]
 8007718:	e06a      	b.n	80077f0 <UART_SetConfig+0x348>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1b      	ldr	r2, [pc, #108]	; (800778c <UART_SetConfig+0x2e4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d138      	bne.n	8007796 <UART_SetConfig+0x2ee>
 8007724:	4b13      	ldr	r3, [pc, #76]	; (8007774 <UART_SetConfig+0x2cc>)
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800772e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007732:	d017      	beq.n	8007764 <UART_SetConfig+0x2bc>
 8007734:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007738:	d82a      	bhi.n	8007790 <UART_SetConfig+0x2e8>
 800773a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800773e:	d00b      	beq.n	8007758 <UART_SetConfig+0x2b0>
 8007740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007744:	d824      	bhi.n	8007790 <UART_SetConfig+0x2e8>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <UART_SetConfig+0x2aa>
 800774a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774e:	d006      	beq.n	800775e <UART_SetConfig+0x2b6>
 8007750:	e01e      	b.n	8007790 <UART_SetConfig+0x2e8>
 8007752:	2300      	movs	r3, #0
 8007754:	77fb      	strb	r3, [r7, #31]
 8007756:	e04b      	b.n	80077f0 <UART_SetConfig+0x348>
 8007758:	2302      	movs	r3, #2
 800775a:	77fb      	strb	r3, [r7, #31]
 800775c:	e048      	b.n	80077f0 <UART_SetConfig+0x348>
 800775e:	2304      	movs	r3, #4
 8007760:	77fb      	strb	r3, [r7, #31]
 8007762:	e045      	b.n	80077f0 <UART_SetConfig+0x348>
 8007764:	2308      	movs	r3, #8
 8007766:	77fb      	strb	r3, [r7, #31]
 8007768:	e042      	b.n	80077f0 <UART_SetConfig+0x348>
 800776a:	bf00      	nop
 800776c:	efff69f3 	.word	0xefff69f3
 8007770:	40011000 	.word	0x40011000
 8007774:	40023800 	.word	0x40023800
 8007778:	40004400 	.word	0x40004400
 800777c:	40004800 	.word	0x40004800
 8007780:	40004c00 	.word	0x40004c00
 8007784:	40005000 	.word	0x40005000
 8007788:	40011400 	.word	0x40011400
 800778c:	40007800 	.word	0x40007800
 8007790:	2310      	movs	r3, #16
 8007792:	77fb      	strb	r3, [r7, #31]
 8007794:	e02c      	b.n	80077f0 <UART_SetConfig+0x348>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a72      	ldr	r2, [pc, #456]	; (8007964 <UART_SetConfig+0x4bc>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d125      	bne.n	80077ec <UART_SetConfig+0x344>
 80077a0:	4b71      	ldr	r3, [pc, #452]	; (8007968 <UART_SetConfig+0x4c0>)
 80077a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80077aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80077ae:	d017      	beq.n	80077e0 <UART_SetConfig+0x338>
 80077b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80077b4:	d817      	bhi.n	80077e6 <UART_SetConfig+0x33e>
 80077b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ba:	d00b      	beq.n	80077d4 <UART_SetConfig+0x32c>
 80077bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c0:	d811      	bhi.n	80077e6 <UART_SetConfig+0x33e>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <UART_SetConfig+0x326>
 80077c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ca:	d006      	beq.n	80077da <UART_SetConfig+0x332>
 80077cc:	e00b      	b.n	80077e6 <UART_SetConfig+0x33e>
 80077ce:	2300      	movs	r3, #0
 80077d0:	77fb      	strb	r3, [r7, #31]
 80077d2:	e00d      	b.n	80077f0 <UART_SetConfig+0x348>
 80077d4:	2302      	movs	r3, #2
 80077d6:	77fb      	strb	r3, [r7, #31]
 80077d8:	e00a      	b.n	80077f0 <UART_SetConfig+0x348>
 80077da:	2304      	movs	r3, #4
 80077dc:	77fb      	strb	r3, [r7, #31]
 80077de:	e007      	b.n	80077f0 <UART_SetConfig+0x348>
 80077e0:	2308      	movs	r3, #8
 80077e2:	77fb      	strb	r3, [r7, #31]
 80077e4:	e004      	b.n	80077f0 <UART_SetConfig+0x348>
 80077e6:	2310      	movs	r3, #16
 80077e8:	77fb      	strb	r3, [r7, #31]
 80077ea:	e001      	b.n	80077f0 <UART_SetConfig+0x348>
 80077ec:	2310      	movs	r3, #16
 80077ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077f8:	d15b      	bne.n	80078b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80077fa:	7ffb      	ldrb	r3, [r7, #31]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d828      	bhi.n	8007852 <UART_SetConfig+0x3aa>
 8007800:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <UART_SetConfig+0x360>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	0800782d 	.word	0x0800782d
 800780c:	08007835 	.word	0x08007835
 8007810:	0800783d 	.word	0x0800783d
 8007814:	08007853 	.word	0x08007853
 8007818:	08007843 	.word	0x08007843
 800781c:	08007853 	.word	0x08007853
 8007820:	08007853 	.word	0x08007853
 8007824:	08007853 	.word	0x08007853
 8007828:	0800784b 	.word	0x0800784b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800782c:	f7fd fd0e 	bl	800524c <HAL_RCC_GetPCLK1Freq>
 8007830:	61b8      	str	r0, [r7, #24]
        break;
 8007832:	e013      	b.n	800785c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007834:	f7fd fd1e 	bl	8005274 <HAL_RCC_GetPCLK2Freq>
 8007838:	61b8      	str	r0, [r7, #24]
        break;
 800783a:	e00f      	b.n	800785c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800783c:	4b4b      	ldr	r3, [pc, #300]	; (800796c <UART_SetConfig+0x4c4>)
 800783e:	61bb      	str	r3, [r7, #24]
        break;
 8007840:	e00c      	b.n	800785c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007842:	f7fd fbf1 	bl	8005028 <HAL_RCC_GetSysClockFreq>
 8007846:	61b8      	str	r0, [r7, #24]
        break;
 8007848:	e008      	b.n	800785c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800784a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784e:	61bb      	str	r3, [r7, #24]
        break;
 8007850:	e004      	b.n	800785c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	77bb      	strb	r3, [r7, #30]
        break;
 800785a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d074      	beq.n	800794c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	005a      	lsls	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	085b      	lsrs	r3, r3, #1
 800786c:	441a      	add	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	fbb2 f3f3 	udiv	r3, r2, r3
 8007876:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b0f      	cmp	r3, #15
 800787c:	d916      	bls.n	80078ac <UART_SetConfig+0x404>
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007884:	d212      	bcs.n	80078ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	b29b      	uxth	r3, r3
 800788a:	f023 030f 	bic.w	r3, r3, #15
 800788e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	085b      	lsrs	r3, r3, #1
 8007894:	b29b      	uxth	r3, r3
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	b29a      	uxth	r2, r3
 800789c:	89fb      	ldrh	r3, [r7, #14]
 800789e:	4313      	orrs	r3, r2
 80078a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	89fa      	ldrh	r2, [r7, #14]
 80078a8:	60da      	str	r2, [r3, #12]
 80078aa:	e04f      	b.n	800794c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	77bb      	strb	r3, [r7, #30]
 80078b0:	e04c      	b.n	800794c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078b2:	7ffb      	ldrb	r3, [r7, #31]
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d828      	bhi.n	800790a <UART_SetConfig+0x462>
 80078b8:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <UART_SetConfig+0x418>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	080078ed 	.word	0x080078ed
 80078c8:	080078f5 	.word	0x080078f5
 80078cc:	0800790b 	.word	0x0800790b
 80078d0:	080078fb 	.word	0x080078fb
 80078d4:	0800790b 	.word	0x0800790b
 80078d8:	0800790b 	.word	0x0800790b
 80078dc:	0800790b 	.word	0x0800790b
 80078e0:	08007903 	.word	0x08007903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078e4:	f7fd fcb2 	bl	800524c <HAL_RCC_GetPCLK1Freq>
 80078e8:	61b8      	str	r0, [r7, #24]
        break;
 80078ea:	e013      	b.n	8007914 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ec:	f7fd fcc2 	bl	8005274 <HAL_RCC_GetPCLK2Freq>
 80078f0:	61b8      	str	r0, [r7, #24]
        break;
 80078f2:	e00f      	b.n	8007914 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078f4:	4b1d      	ldr	r3, [pc, #116]	; (800796c <UART_SetConfig+0x4c4>)
 80078f6:	61bb      	str	r3, [r7, #24]
        break;
 80078f8:	e00c      	b.n	8007914 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078fa:	f7fd fb95 	bl	8005028 <HAL_RCC_GetSysClockFreq>
 80078fe:	61b8      	str	r0, [r7, #24]
        break;
 8007900:	e008      	b.n	8007914 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007906:	61bb      	str	r3, [r7, #24]
        break;
 8007908:	e004      	b.n	8007914 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	77bb      	strb	r3, [r7, #30]
        break;
 8007912:	bf00      	nop
    }

    if (pclk != 0U)
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d018      	beq.n	800794c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	085a      	lsrs	r2, r3, #1
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	441a      	add	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b0f      	cmp	r3, #15
 8007932:	d909      	bls.n	8007948 <UART_SetConfig+0x4a0>
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800793a:	d205      	bcs.n	8007948 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	b29a      	uxth	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	60da      	str	r2, [r3, #12]
 8007946:	e001      	b.n	800794c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007958:	7fbb      	ldrb	r3, [r7, #30]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3720      	adds	r7, #32
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40007c00 	.word	0x40007c00
 8007968:	40023800 	.word	0x40023800
 800796c:	00f42400 	.word	0x00f42400

08007970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00a      	beq.n	800799a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00a      	beq.n	80079de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	f003 0310 	and.w	r3, r3, #16
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00a      	beq.n	8007a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01a      	beq.n	8007a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a6e:	d10a      	bne.n	8007a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	605a      	str	r2, [r3, #4]
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ac4:	f7fb f82e 	bl	8002b24 <HAL_GetTick>
 8007ac8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d10e      	bne.n	8007af6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f81b 	bl	8007b22 <UART_WaitOnFlagUntilTimeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e011      	b.n	8007b1a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2220      	movs	r2, #32
 8007afa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b09c      	sub	sp, #112	; 0x70
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	603b      	str	r3, [r7, #0]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b32:	e0a7      	b.n	8007c84 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	f000 80a3 	beq.w	8007c84 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b3e:	f7fa fff1 	bl	8002b24 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d302      	bcc.n	8007b54 <UART_WaitOnFlagUntilTimeout+0x32>
 8007b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d13f      	bne.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b68:	667b      	str	r3, [r7, #100]	; 0x64
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e6      	bne.n	8007b54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	f023 0301 	bic.w	r3, r3, #1
 8007b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ba6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ba8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e5      	bne.n	8007b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e068      	b.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d050      	beq.n	8007c84 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf0:	d148      	bne.n	8007c84 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bfa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c1c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c22:	e841 2300 	strex	r3, r2, [r1]
 8007c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e6      	bne.n	8007bfc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3308      	adds	r3, #8
 8007c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f023 0301 	bic.w	r3, r3, #1
 8007c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c4e:	623a      	str	r2, [r7, #32]
 8007c50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	69f9      	ldr	r1, [r7, #28]
 8007c54:	6a3a      	ldr	r2, [r7, #32]
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e5      	bne.n	8007c2e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2220      	movs	r2, #32
 8007c66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e010      	b.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69da      	ldr	r2, [r3, #28]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	bf0c      	ite	eq
 8007c94:	2301      	moveq	r3, #1
 8007c96:	2300      	movne	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	f43f af48 	beq.w	8007b34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3770      	adds	r7, #112	; 0x70
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b097      	sub	sp, #92	; 0x5c
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	88fa      	ldrh	r2, [r7, #6]
 8007cc8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	88fa      	ldrh	r2, [r7, #6]
 8007cd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce2:	d10e      	bne.n	8007d02 <UART_Start_Receive_IT+0x52>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d105      	bne.n	8007cf8 <UART_Start_Receive_IT+0x48>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007cf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cf6:	e02d      	b.n	8007d54 <UART_Start_Receive_IT+0xa4>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	22ff      	movs	r2, #255	; 0xff
 8007cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d00:	e028      	b.n	8007d54 <UART_Start_Receive_IT+0xa4>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10d      	bne.n	8007d26 <UART_Start_Receive_IT+0x76>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d104      	bne.n	8007d1c <UART_Start_Receive_IT+0x6c>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	22ff      	movs	r2, #255	; 0xff
 8007d16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d1a:	e01b      	b.n	8007d54 <UART_Start_Receive_IT+0xa4>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	227f      	movs	r2, #127	; 0x7f
 8007d20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d24:	e016      	b.n	8007d54 <UART_Start_Receive_IT+0xa4>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d2e:	d10d      	bne.n	8007d4c <UART_Start_Receive_IT+0x9c>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <UART_Start_Receive_IT+0x92>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	227f      	movs	r2, #127	; 0x7f
 8007d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d40:	e008      	b.n	8007d54 <UART_Start_Receive_IT+0xa4>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	223f      	movs	r2, #63	; 0x3f
 8007d46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d4a:	e003      	b.n	8007d54 <UART_Start_Receive_IT+0xa4>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2222      	movs	r2, #34	; 0x22
 8007d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3308      	adds	r3, #8
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6e:	e853 3f00 	ldrex	r3, [r3]
 8007d72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	f043 0301 	orr.w	r3, r3, #1
 8007d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3308      	adds	r3, #8
 8007d82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d84:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e5      	bne.n	8007d64 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da0:	d107      	bne.n	8007db2 <UART_Start_Receive_IT+0x102>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d103      	bne.n	8007db2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4a21      	ldr	r2, [pc, #132]	; (8007e34 <UART_Start_Receive_IT+0x184>)
 8007dae:	669a      	str	r2, [r3, #104]	; 0x68
 8007db0:	e002      	b.n	8007db8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4a20      	ldr	r2, [pc, #128]	; (8007e38 <UART_Start_Receive_IT+0x188>)
 8007db6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d019      	beq.n	8007df4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dde:	637b      	str	r3, [r7, #52]	; 0x34
 8007de0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e6      	bne.n	8007dc0 <UART_Start_Receive_IT+0x110>
 8007df2:	e018      	b.n	8007e26 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	613b      	str	r3, [r7, #16]
   return(result);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f043 0320 	orr.w	r3, r3, #32
 8007e08:	653b      	str	r3, [r7, #80]	; 0x50
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e12:	623b      	str	r3, [r7, #32]
 8007e14:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	69f9      	ldr	r1, [r7, #28]
 8007e18:	6a3a      	ldr	r2, [r7, #32]
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e6      	bne.n	8007df4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	375c      	adds	r7, #92	; 0x5c
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	080080eb 	.word	0x080080eb
 8007e38:	08007f85 	.word	0x08007f85

08007e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b095      	sub	sp, #84	; 0x54
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e62:	643b      	str	r3, [r7, #64]	; 0x40
 8007e64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e6      	bne.n	8007e44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	f023 0301 	bic.w	r3, r3, #1
 8007e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e5      	bne.n	8007e76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d118      	bne.n	8007ee4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	e853 3f00 	ldrex	r3, [r3]
 8007ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f023 0310 	bic.w	r3, r3, #16
 8007ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ed0:	61bb      	str	r3, [r7, #24]
 8007ed2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6979      	ldr	r1, [r7, #20]
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e6      	bne.n	8007eb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ef8:	bf00      	nop
 8007efa:	3754      	adds	r7, #84	; 0x54
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff faaa 	bl	800747c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f28:	bf00      	nop
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f4c:	61fb      	str	r3, [r7, #28]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	61bb      	str	r3, [r7, #24]
 8007f58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5a:	6979      	ldr	r1, [r7, #20]
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	613b      	str	r3, [r7, #16]
   return(result);
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e6      	bne.n	8007f38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff fa76 	bl	8007468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f7c:	bf00      	nop
 8007f7e:	3720      	adds	r7, #32
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b096      	sub	sp, #88	; 0x58
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f92:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f9c:	2b22      	cmp	r3, #34	; 0x22
 8007f9e:	f040 8098 	bne.w	80080d2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007fac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007fb0:	b2d9      	uxtb	r1, r3
 8007fb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbc:	400a      	ands	r2, r1
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d17b      	bne.n	80080e2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	461a      	mov	r2, r3
 8008006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008008:	647b      	str	r3, [r7, #68]	; 0x44
 800800a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800800e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e6      	bne.n	8007fea <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3308      	adds	r3, #8
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	623b      	str	r3, [r7, #32]
   return(result);
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	f023 0301 	bic.w	r3, r3, #1
 8008032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3308      	adds	r3, #8
 800803a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800803c:	633a      	str	r2, [r7, #48]	; 0x30
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e5      	bne.n	800801c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008068:	2b01      	cmp	r3, #1
 800806a:	d12e      	bne.n	80080ca <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	e853 3f00 	ldrex	r3, [r3]
 800807e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0310 	bic.w	r3, r3, #16
 8008086:	64bb      	str	r3, [r7, #72]	; 0x48
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008090:	61fb      	str	r3, [r7, #28]
 8008092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	69b9      	ldr	r1, [r7, #24]
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	617b      	str	r3, [r7, #20]
   return(result);
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e6      	bne.n	8008072 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f003 0310 	and.w	r3, r3, #16
 80080ae:	2b10      	cmp	r3, #16
 80080b0:	d103      	bne.n	80080ba <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2210      	movs	r2, #16
 80080b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff f9e4 	bl	8007490 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080c8:	e00b      	b.n	80080e2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7f9 fd7e 	bl	8001bcc <HAL_UART_RxCpltCallback>
}
 80080d0:	e007      	b.n	80080e2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	699a      	ldr	r2, [r3, #24]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f042 0208 	orr.w	r2, r2, #8
 80080e0:	619a      	str	r2, [r3, #24]
}
 80080e2:	bf00      	nop
 80080e4:	3758      	adds	r7, #88	; 0x58
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b096      	sub	sp, #88	; 0x58
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008102:	2b22      	cmp	r3, #34	; 0x22
 8008104:	f040 8098 	bne.w	8008238 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008116:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008118:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800811c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008120:	4013      	ands	r3, r2
 8008122:	b29a      	uxth	r2, r3
 8008124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008126:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812c:	1c9a      	adds	r2, r3, #2
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008138:	b29b      	uxth	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800814a:	b29b      	uxth	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d17b      	bne.n	8008248 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008164:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816e:	643b      	str	r3, [r7, #64]	; 0x40
 8008170:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008176:	e841 2300 	strex	r3, r2, [r1]
 800817a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1e6      	bne.n	8008150 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	61fb      	str	r3, [r7, #28]
   return(result);
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	f023 0301 	bic.w	r3, r3, #1
 8008198:	64bb      	str	r3, [r7, #72]	; 0x48
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3308      	adds	r3, #8
 80081a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e5      	bne.n	8008182 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d12e      	bne.n	8008230 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f023 0310 	bic.w	r3, r3, #16
 80081ec:	647b      	str	r3, [r7, #68]	; 0x44
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f6:	61bb      	str	r3, [r7, #24]
 80081f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6979      	ldr	r1, [r7, #20]
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	613b      	str	r3, [r7, #16]
   return(result);
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e6      	bne.n	80081d8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	2b10      	cmp	r3, #16
 8008216:	d103      	bne.n	8008220 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2210      	movs	r2, #16
 800821e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff f931 	bl	8007490 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800822e:	e00b      	b.n	8008248 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7f9 fccb 	bl	8001bcc <HAL_UART_RxCpltCallback>
}
 8008236:	e007      	b.n	8008248 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	699a      	ldr	r2, [r3, #24]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0208 	orr.w	r2, r2, #8
 8008246:	619a      	str	r2, [r3, #24]
}
 8008248:	bf00      	nop
 800824a:	3758      	adds	r7, #88	; 0x58
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <gcvt>:
 8008250:	b530      	push	{r4, r5, lr}
 8008252:	2200      	movs	r2, #0
 8008254:	b085      	sub	sp, #20
 8008256:	460c      	mov	r4, r1
 8008258:	4605      	mov	r5, r0
 800825a:	2300      	movs	r3, #0
 800825c:	ec51 0b10 	vmov	r0, r1, d0
 8008260:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008264:	f7f8 fc5a 	bl	8000b1c <__aeabi_dcmplt>
 8008268:	ed9d 0b02 	vldr	d0, [sp, #8]
 800826c:	4622      	mov	r2, r4
 800826e:	b118      	cbz	r0, 8008278 <gcvt+0x28>
 8008270:	232d      	movs	r3, #45	; 0x2d
 8008272:	f802 3b01 	strb.w	r3, [r2], #1
 8008276:	3d01      	subs	r5, #1
 8008278:	2300      	movs	r3, #0
 800827a:	4806      	ldr	r0, [pc, #24]	; (8008294 <gcvt+0x44>)
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	4629      	mov	r1, r5
 8008280:	2367      	movs	r3, #103	; 0x67
 8008282:	6800      	ldr	r0, [r0, #0]
 8008284:	f000 f8d0 	bl	8008428 <_gcvt>
 8008288:	2800      	cmp	r0, #0
 800828a:	bf14      	ite	ne
 800828c:	4620      	movne	r0, r4
 800828e:	2000      	moveq	r0, #0
 8008290:	b005      	add	sp, #20
 8008292:	bd30      	pop	{r4, r5, pc}
 8008294:	20000014 	.word	0x20000014

08008298 <__errno>:
 8008298:	4b01      	ldr	r3, [pc, #4]	; (80082a0 <__errno+0x8>)
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20000014 	.word	0x20000014

080082a4 <__libc_init_array>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	4d0d      	ldr	r5, [pc, #52]	; (80082dc <__libc_init_array+0x38>)
 80082a8:	4c0d      	ldr	r4, [pc, #52]	; (80082e0 <__libc_init_array+0x3c>)
 80082aa:	1b64      	subs	r4, r4, r5
 80082ac:	10a4      	asrs	r4, r4, #2
 80082ae:	2600      	movs	r6, #0
 80082b0:	42a6      	cmp	r6, r4
 80082b2:	d109      	bne.n	80082c8 <__libc_init_array+0x24>
 80082b4:	4d0b      	ldr	r5, [pc, #44]	; (80082e4 <__libc_init_array+0x40>)
 80082b6:	4c0c      	ldr	r4, [pc, #48]	; (80082e8 <__libc_init_array+0x44>)
 80082b8:	f002 fbac 	bl	800aa14 <_init>
 80082bc:	1b64      	subs	r4, r4, r5
 80082be:	10a4      	asrs	r4, r4, #2
 80082c0:	2600      	movs	r6, #0
 80082c2:	42a6      	cmp	r6, r4
 80082c4:	d105      	bne.n	80082d2 <__libc_init_array+0x2e>
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082cc:	4798      	blx	r3
 80082ce:	3601      	adds	r6, #1
 80082d0:	e7ee      	b.n	80082b0 <__libc_init_array+0xc>
 80082d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d6:	4798      	blx	r3
 80082d8:	3601      	adds	r6, #1
 80082da:	e7f2      	b.n	80082c2 <__libc_init_array+0x1e>
 80082dc:	0800b4f0 	.word	0x0800b4f0
 80082e0:	0800b4f0 	.word	0x0800b4f0
 80082e4:	0800b4f0 	.word	0x0800b4f0
 80082e8:	0800b4f4 	.word	0x0800b4f4

080082ec <memcpy>:
 80082ec:	440a      	add	r2, r1
 80082ee:	4291      	cmp	r1, r2
 80082f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80082f4:	d100      	bne.n	80082f8 <memcpy+0xc>
 80082f6:	4770      	bx	lr
 80082f8:	b510      	push	{r4, lr}
 80082fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008302:	4291      	cmp	r1, r2
 8008304:	d1f9      	bne.n	80082fa <memcpy+0xe>
 8008306:	bd10      	pop	{r4, pc}

08008308 <memset>:
 8008308:	4402      	add	r2, r0
 800830a:	4603      	mov	r3, r0
 800830c:	4293      	cmp	r3, r2
 800830e:	d100      	bne.n	8008312 <memset+0xa>
 8008310:	4770      	bx	lr
 8008312:	f803 1b01 	strb.w	r1, [r3], #1
 8008316:	e7f9      	b.n	800830c <memset+0x4>

08008318 <strcat>:
 8008318:	b510      	push	{r4, lr}
 800831a:	4602      	mov	r2, r0
 800831c:	7814      	ldrb	r4, [r2, #0]
 800831e:	4613      	mov	r3, r2
 8008320:	3201      	adds	r2, #1
 8008322:	2c00      	cmp	r4, #0
 8008324:	d1fa      	bne.n	800831c <strcat+0x4>
 8008326:	3b01      	subs	r3, #1
 8008328:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008330:	2a00      	cmp	r2, #0
 8008332:	d1f9      	bne.n	8008328 <strcat+0x10>
 8008334:	bd10      	pop	{r4, pc}

08008336 <print_e>:
 8008336:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008338:	b087      	sub	sp, #28
 800833a:	ec43 2b10 	vmov	d0, r2, r3
 800833e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008340:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8008344:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008346:	ab04      	add	r3, sp, #16
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	ab03      	add	r3, sp, #12
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	1c62      	adds	r2, r4, #1
 8008350:	ab05      	add	r3, sp, #20
 8008352:	460f      	mov	r7, r1
 8008354:	2102      	movs	r1, #2
 8008356:	f000 ffcb 	bl	80092f0 <_dtoa_r>
 800835a:	9a05      	ldr	r2, [sp, #20]
 800835c:	f242 730f 	movw	r3, #9999	; 0x270f
 8008360:	429a      	cmp	r2, r3
 8008362:	d105      	bne.n	8008370 <print_e+0x3a>
 8008364:	4601      	mov	r1, r0
 8008366:	4638      	mov	r0, r7
 8008368:	f000 ff0e 	bl	8009188 <strcpy>
 800836c:	b007      	add	sp, #28
 800836e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008370:	463b      	mov	r3, r7
 8008372:	7801      	ldrb	r1, [r0, #0]
 8008374:	f803 1b01 	strb.w	r1, [r3], #1
 8008378:	2c00      	cmp	r4, #0
 800837a:	bfc8      	it	gt
 800837c:	2501      	movgt	r5, #1
 800837e:	212e      	movs	r1, #46	; 0x2e
 8008380:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8008384:	b10f      	cbz	r7, 800838a <print_e+0x54>
 8008386:	2c00      	cmp	r4, #0
 8008388:	dc37      	bgt.n	80083fa <print_e+0xc4>
 800838a:	2e67      	cmp	r6, #103	; 0x67
 800838c:	d046      	beq.n	800841c <print_e+0xe6>
 800838e:	2e47      	cmp	r6, #71	; 0x47
 8008390:	d046      	beq.n	8008420 <print_e+0xea>
 8008392:	212e      	movs	r1, #46	; 0x2e
 8008394:	2030      	movs	r0, #48	; 0x30
 8008396:	2c00      	cmp	r4, #0
 8008398:	dc38      	bgt.n	800840c <print_e+0xd6>
 800839a:	1e51      	subs	r1, r2, #1
 800839c:	2900      	cmp	r1, #0
 800839e:	bfb8      	it	lt
 80083a0:	f1c2 0201 	rsblt	r2, r2, #1
 80083a4:	4618      	mov	r0, r3
 80083a6:	9105      	str	r1, [sp, #20]
 80083a8:	bfac      	ite	ge
 80083aa:	222b      	movge	r2, #43	; 0x2b
 80083ac:	9205      	strlt	r2, [sp, #20]
 80083ae:	f800 6b02 	strb.w	r6, [r0], #2
 80083b2:	bfa8      	it	ge
 80083b4:	705a      	strbge	r2, [r3, #1]
 80083b6:	9a05      	ldr	r2, [sp, #20]
 80083b8:	bfbc      	itt	lt
 80083ba:	212d      	movlt	r1, #45	; 0x2d
 80083bc:	7059      	strblt	r1, [r3, #1]
 80083be:	2a63      	cmp	r2, #99	; 0x63
 80083c0:	dd0b      	ble.n	80083da <print_e+0xa4>
 80083c2:	2164      	movs	r1, #100	; 0x64
 80083c4:	fb92 f1f1 	sdiv	r1, r2, r1
 80083c8:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80083cc:	1cd8      	adds	r0, r3, #3
 80083ce:	709c      	strb	r4, [r3, #2]
 80083d0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80083d4:	fb03 2201 	mla	r2, r3, r1, r2
 80083d8:	9205      	str	r2, [sp, #20]
 80083da:	9b05      	ldr	r3, [sp, #20]
 80083dc:	220a      	movs	r2, #10
 80083de:	fb93 f2f2 	sdiv	r2, r3, r2
 80083e2:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80083e6:	7001      	strb	r1, [r0, #0]
 80083e8:	f06f 0109 	mvn.w	r1, #9
 80083ec:	fb01 3302 	mla	r3, r1, r2, r3
 80083f0:	3330      	adds	r3, #48	; 0x30
 80083f2:	7043      	strb	r3, [r0, #1]
 80083f4:	2300      	movs	r3, #0
 80083f6:	7083      	strb	r3, [r0, #2]
 80083f8:	e7b8      	b.n	800836c <print_e+0x36>
 80083fa:	b10d      	cbz	r5, 8008400 <print_e+0xca>
 80083fc:	f803 1b01 	strb.w	r1, [r3], #1
 8008400:	7805      	ldrb	r5, [r0, #0]
 8008402:	f803 5b01 	strb.w	r5, [r3], #1
 8008406:	3c01      	subs	r4, #1
 8008408:	2500      	movs	r5, #0
 800840a:	e7b9      	b.n	8008380 <print_e+0x4a>
 800840c:	b10d      	cbz	r5, 8008412 <print_e+0xdc>
 800840e:	f803 1b01 	strb.w	r1, [r3], #1
 8008412:	f803 0b01 	strb.w	r0, [r3], #1
 8008416:	3c01      	subs	r4, #1
 8008418:	2500      	movs	r5, #0
 800841a:	e7bc      	b.n	8008396 <print_e+0x60>
 800841c:	2665      	movs	r6, #101	; 0x65
 800841e:	e7bc      	b.n	800839a <print_e+0x64>
 8008420:	2645      	movs	r6, #69	; 0x45
 8008422:	e7ba      	b.n	800839a <print_e+0x64>
 8008424:	0000      	movs	r0, r0
	...

08008428 <_gcvt>:
 8008428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	ec55 4b10 	vmov	r4, r5, d0
 8008430:	b088      	sub	sp, #32
 8008432:	4681      	mov	r9, r0
 8008434:	4688      	mov	r8, r1
 8008436:	4616      	mov	r6, r2
 8008438:	469a      	mov	sl, r3
 800843a:	ee10 0a10 	vmov	r0, s0
 800843e:	2200      	movs	r2, #0
 8008440:	2300      	movs	r3, #0
 8008442:	4629      	mov	r1, r5
 8008444:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008446:	f7f8 fb69 	bl	8000b1c <__aeabi_dcmplt>
 800844a:	b110      	cbz	r0, 8008452 <_gcvt+0x2a>
 800844c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008450:	461d      	mov	r5, r3
 8008452:	2200      	movs	r2, #0
 8008454:	2300      	movs	r3, #0
 8008456:	4620      	mov	r0, r4
 8008458:	4629      	mov	r1, r5
 800845a:	f7f8 fb55 	bl	8000b08 <__aeabi_dcmpeq>
 800845e:	b138      	cbz	r0, 8008470 <_gcvt+0x48>
 8008460:	2330      	movs	r3, #48	; 0x30
 8008462:	7033      	strb	r3, [r6, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	7073      	strb	r3, [r6, #1]
 8008468:	4630      	mov	r0, r6
 800846a:	b008      	add	sp, #32
 800846c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008470:	a34b      	add	r3, pc, #300	; (adr r3, 80085a0 <_gcvt+0x178>)
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	4620      	mov	r0, r4
 8008478:	4629      	mov	r1, r5
 800847a:	f7f8 fb59 	bl	8000b30 <__aeabi_dcmple>
 800847e:	b158      	cbz	r0, 8008498 <_gcvt+0x70>
 8008480:	f108 31ff 	add.w	r1, r8, #4294967295
 8008484:	9100      	str	r1, [sp, #0]
 8008486:	e9cd a701 	strd	sl, r7, [sp, #4]
 800848a:	4622      	mov	r2, r4
 800848c:	462b      	mov	r3, r5
 800848e:	4631      	mov	r1, r6
 8008490:	4648      	mov	r0, r9
 8008492:	f7ff ff50 	bl	8008336 <print_e>
 8008496:	e7e7      	b.n	8008468 <_gcvt+0x40>
 8008498:	4640      	mov	r0, r8
 800849a:	f000 fc09 	bl	8008cb0 <_mprec_log10>
 800849e:	4622      	mov	r2, r4
 80084a0:	ec51 0b10 	vmov	r0, r1, d0
 80084a4:	462b      	mov	r3, r5
 80084a6:	f7f8 fb43 	bl	8000b30 <__aeabi_dcmple>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d1e8      	bne.n	8008480 <_gcvt+0x58>
 80084ae:	ab07      	add	r3, sp, #28
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	ab06      	add	r3, sp, #24
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	4642      	mov	r2, r8
 80084b8:	ab05      	add	r3, sp, #20
 80084ba:	ec45 4b10 	vmov	d0, r4, r5
 80084be:	2102      	movs	r1, #2
 80084c0:	4648      	mov	r0, r9
 80084c2:	f000 ff15 	bl	80092f0 <_dtoa_r>
 80084c6:	9a05      	ldr	r2, [sp, #20]
 80084c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d00e      	beq.n	80084ee <_gcvt+0xc6>
 80084d0:	4633      	mov	r3, r6
 80084d2:	44b0      	add	r8, r6
 80084d4:	4605      	mov	r5, r0
 80084d6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80084da:	9c05      	ldr	r4, [sp, #20]
 80084dc:	eba8 0203 	sub.w	r2, r8, r3
 80084e0:	b109      	cbz	r1, 80084e6 <_gcvt+0xbe>
 80084e2:	2c00      	cmp	r4, #0
 80084e4:	dc08      	bgt.n	80084f8 <_gcvt+0xd0>
 80084e6:	2100      	movs	r1, #0
 80084e8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80084ec:	e00d      	b.n	800850a <_gcvt+0xe2>
 80084ee:	4601      	mov	r1, r0
 80084f0:	4630      	mov	r0, r6
 80084f2:	f000 fe49 	bl	8009188 <strcpy>
 80084f6:	e7b7      	b.n	8008468 <_gcvt+0x40>
 80084f8:	3c01      	subs	r4, #1
 80084fa:	f803 1b01 	strb.w	r1, [r3], #1
 80084fe:	9405      	str	r4, [sp, #20]
 8008500:	e7e8      	b.n	80084d4 <_gcvt+0xac>
 8008502:	f803 cb01 	strb.w	ip, [r3], #1
 8008506:	3a01      	subs	r2, #1
 8008508:	2101      	movs	r1, #1
 800850a:	2c00      	cmp	r4, #0
 800850c:	4620      	mov	r0, r4
 800850e:	dc2a      	bgt.n	8008566 <_gcvt+0x13e>
 8008510:	b101      	cbz	r1, 8008514 <_gcvt+0xec>
 8008512:	9405      	str	r4, [sp, #20]
 8008514:	b90f      	cbnz	r7, 800851a <_gcvt+0xf2>
 8008516:	7829      	ldrb	r1, [r5, #0]
 8008518:	b311      	cbz	r1, 8008560 <_gcvt+0x138>
 800851a:	42b3      	cmp	r3, r6
 800851c:	bf04      	itt	eq
 800851e:	2130      	moveq	r1, #48	; 0x30
 8008520:	f803 1b01 	strbeq.w	r1, [r3], #1
 8008524:	212e      	movs	r1, #46	; 0x2e
 8008526:	7019      	strb	r1, [r3, #0]
 8008528:	9905      	ldr	r1, [sp, #20]
 800852a:	4618      	mov	r0, r3
 800852c:	2400      	movs	r4, #0
 800852e:	eba1 0c03 	sub.w	ip, r1, r3
 8008532:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008536:	eb1c 0f00 	cmn.w	ip, r0
 800853a:	d41c      	bmi.n	8008576 <_gcvt+0x14e>
 800853c:	2900      	cmp	r1, #0
 800853e:	f1c1 0000 	rsb	r0, r1, #0
 8008542:	bfc8      	it	gt
 8008544:	2000      	movgt	r0, #0
 8008546:	f100 0c01 	add.w	ip, r0, #1
 800854a:	4463      	add	r3, ip
 800854c:	4401      	add	r1, r0
 800854e:	b104      	cbz	r4, 8008552 <_gcvt+0x12a>
 8008550:	9105      	str	r1, [sp, #20]
 8008552:	1e69      	subs	r1, r5, #1
 8008554:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008558:	b108      	cbz	r0, 800855e <_gcvt+0x136>
 800855a:	2a00      	cmp	r2, #0
 800855c:	dc0f      	bgt.n	800857e <_gcvt+0x156>
 800855e:	b9df      	cbnz	r7, 8008598 <_gcvt+0x170>
 8008560:	2200      	movs	r2, #0
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	e780      	b.n	8008468 <_gcvt+0x40>
 8008566:	2a00      	cmp	r2, #0
 8008568:	f104 34ff 	add.w	r4, r4, #4294967295
 800856c:	dcc9      	bgt.n	8008502 <_gcvt+0xda>
 800856e:	2900      	cmp	r1, #0
 8008570:	d0d0      	beq.n	8008514 <_gcvt+0xec>
 8008572:	9005      	str	r0, [sp, #20]
 8008574:	e7ce      	b.n	8008514 <_gcvt+0xec>
 8008576:	f800 ef01 	strb.w	lr, [r0, #1]!
 800857a:	2401      	movs	r4, #1
 800857c:	e7db      	b.n	8008536 <_gcvt+0x10e>
 800857e:	f803 0b01 	strb.w	r0, [r3], #1
 8008582:	3a01      	subs	r2, #1
 8008584:	e7e6      	b.n	8008554 <_gcvt+0x12c>
 8008586:	f801 5b01 	strb.w	r5, [r1], #1
 800858a:	1a60      	subs	r0, r4, r1
 800858c:	2800      	cmp	r0, #0
 800858e:	dcfa      	bgt.n	8008586 <_gcvt+0x15e>
 8008590:	2a00      	cmp	r2, #0
 8008592:	bfa8      	it	ge
 8008594:	189b      	addge	r3, r3, r2
 8008596:	e7e3      	b.n	8008560 <_gcvt+0x138>
 8008598:	4619      	mov	r1, r3
 800859a:	189c      	adds	r4, r3, r2
 800859c:	2530      	movs	r5, #48	; 0x30
 800859e:	e7f4      	b.n	800858a <_gcvt+0x162>
 80085a0:	eb1c432d 	.word	0xeb1c432d
 80085a4:	3f1a36e2 	.word	0x3f1a36e2

080085a8 <_Balloc>:
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085ac:	4604      	mov	r4, r0
 80085ae:	460d      	mov	r5, r1
 80085b0:	b976      	cbnz	r6, 80085d0 <_Balloc+0x28>
 80085b2:	2010      	movs	r0, #16
 80085b4:	f001 fc9c 	bl	8009ef0 <malloc>
 80085b8:	4602      	mov	r2, r0
 80085ba:	6260      	str	r0, [r4, #36]	; 0x24
 80085bc:	b920      	cbnz	r0, 80085c8 <_Balloc+0x20>
 80085be:	4b18      	ldr	r3, [pc, #96]	; (8008620 <_Balloc+0x78>)
 80085c0:	4818      	ldr	r0, [pc, #96]	; (8008624 <_Balloc+0x7c>)
 80085c2:	2166      	movs	r1, #102	; 0x66
 80085c4:	f000 fde8 	bl	8009198 <__assert_func>
 80085c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085cc:	6006      	str	r6, [r0, #0]
 80085ce:	60c6      	str	r6, [r0, #12]
 80085d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085d2:	68f3      	ldr	r3, [r6, #12]
 80085d4:	b183      	cbz	r3, 80085f8 <_Balloc+0x50>
 80085d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085de:	b9b8      	cbnz	r0, 8008610 <_Balloc+0x68>
 80085e0:	2101      	movs	r1, #1
 80085e2:	fa01 f605 	lsl.w	r6, r1, r5
 80085e6:	1d72      	adds	r2, r6, #5
 80085e8:	0092      	lsls	r2, r2, #2
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 fb7e 	bl	8008cec <_calloc_r>
 80085f0:	b160      	cbz	r0, 800860c <_Balloc+0x64>
 80085f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085f6:	e00e      	b.n	8008616 <_Balloc+0x6e>
 80085f8:	2221      	movs	r2, #33	; 0x21
 80085fa:	2104      	movs	r1, #4
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fb75 	bl	8008cec <_calloc_r>
 8008602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008604:	60f0      	str	r0, [r6, #12]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1e4      	bne.n	80085d6 <_Balloc+0x2e>
 800860c:	2000      	movs	r0, #0
 800860e:	bd70      	pop	{r4, r5, r6, pc}
 8008610:	6802      	ldr	r2, [r0, #0]
 8008612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008616:	2300      	movs	r3, #0
 8008618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800861c:	e7f7      	b.n	800860e <_Balloc+0x66>
 800861e:	bf00      	nop
 8008620:	0800b228 	.word	0x0800b228
 8008624:	0800b23f 	.word	0x0800b23f

08008628 <_Bfree>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800862c:	4605      	mov	r5, r0
 800862e:	460c      	mov	r4, r1
 8008630:	b976      	cbnz	r6, 8008650 <_Bfree+0x28>
 8008632:	2010      	movs	r0, #16
 8008634:	f001 fc5c 	bl	8009ef0 <malloc>
 8008638:	4602      	mov	r2, r0
 800863a:	6268      	str	r0, [r5, #36]	; 0x24
 800863c:	b920      	cbnz	r0, 8008648 <_Bfree+0x20>
 800863e:	4b09      	ldr	r3, [pc, #36]	; (8008664 <_Bfree+0x3c>)
 8008640:	4809      	ldr	r0, [pc, #36]	; (8008668 <_Bfree+0x40>)
 8008642:	218a      	movs	r1, #138	; 0x8a
 8008644:	f000 fda8 	bl	8009198 <__assert_func>
 8008648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800864c:	6006      	str	r6, [r0, #0]
 800864e:	60c6      	str	r6, [r0, #12]
 8008650:	b13c      	cbz	r4, 8008662 <_Bfree+0x3a>
 8008652:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008654:	6862      	ldr	r2, [r4, #4]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800865c:	6021      	str	r1, [r4, #0]
 800865e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	0800b228 	.word	0x0800b228
 8008668:	0800b23f 	.word	0x0800b23f

0800866c <__multadd>:
 800866c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008670:	690d      	ldr	r5, [r1, #16]
 8008672:	4607      	mov	r7, r0
 8008674:	460c      	mov	r4, r1
 8008676:	461e      	mov	r6, r3
 8008678:	f101 0c14 	add.w	ip, r1, #20
 800867c:	2000      	movs	r0, #0
 800867e:	f8dc 3000 	ldr.w	r3, [ip]
 8008682:	b299      	uxth	r1, r3
 8008684:	fb02 6101 	mla	r1, r2, r1, r6
 8008688:	0c1e      	lsrs	r6, r3, #16
 800868a:	0c0b      	lsrs	r3, r1, #16
 800868c:	fb02 3306 	mla	r3, r2, r6, r3
 8008690:	b289      	uxth	r1, r1
 8008692:	3001      	adds	r0, #1
 8008694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008698:	4285      	cmp	r5, r0
 800869a:	f84c 1b04 	str.w	r1, [ip], #4
 800869e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086a2:	dcec      	bgt.n	800867e <__multadd+0x12>
 80086a4:	b30e      	cbz	r6, 80086ea <__multadd+0x7e>
 80086a6:	68a3      	ldr	r3, [r4, #8]
 80086a8:	42ab      	cmp	r3, r5
 80086aa:	dc19      	bgt.n	80086e0 <__multadd+0x74>
 80086ac:	6861      	ldr	r1, [r4, #4]
 80086ae:	4638      	mov	r0, r7
 80086b0:	3101      	adds	r1, #1
 80086b2:	f7ff ff79 	bl	80085a8 <_Balloc>
 80086b6:	4680      	mov	r8, r0
 80086b8:	b928      	cbnz	r0, 80086c6 <__multadd+0x5a>
 80086ba:	4602      	mov	r2, r0
 80086bc:	4b0c      	ldr	r3, [pc, #48]	; (80086f0 <__multadd+0x84>)
 80086be:	480d      	ldr	r0, [pc, #52]	; (80086f4 <__multadd+0x88>)
 80086c0:	21b5      	movs	r1, #181	; 0xb5
 80086c2:	f000 fd69 	bl	8009198 <__assert_func>
 80086c6:	6922      	ldr	r2, [r4, #16]
 80086c8:	3202      	adds	r2, #2
 80086ca:	f104 010c 	add.w	r1, r4, #12
 80086ce:	0092      	lsls	r2, r2, #2
 80086d0:	300c      	adds	r0, #12
 80086d2:	f7ff fe0b 	bl	80082ec <memcpy>
 80086d6:	4621      	mov	r1, r4
 80086d8:	4638      	mov	r0, r7
 80086da:	f7ff ffa5 	bl	8008628 <_Bfree>
 80086de:	4644      	mov	r4, r8
 80086e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086e4:	3501      	adds	r5, #1
 80086e6:	615e      	str	r6, [r3, #20]
 80086e8:	6125      	str	r5, [r4, #16]
 80086ea:	4620      	mov	r0, r4
 80086ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f0:	0800b29b 	.word	0x0800b29b
 80086f4:	0800b23f 	.word	0x0800b23f

080086f8 <__hi0bits>:
 80086f8:	0c03      	lsrs	r3, r0, #16
 80086fa:	041b      	lsls	r3, r3, #16
 80086fc:	b9d3      	cbnz	r3, 8008734 <__hi0bits+0x3c>
 80086fe:	0400      	lsls	r0, r0, #16
 8008700:	2310      	movs	r3, #16
 8008702:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008706:	bf04      	itt	eq
 8008708:	0200      	lsleq	r0, r0, #8
 800870a:	3308      	addeq	r3, #8
 800870c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008710:	bf04      	itt	eq
 8008712:	0100      	lsleq	r0, r0, #4
 8008714:	3304      	addeq	r3, #4
 8008716:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800871a:	bf04      	itt	eq
 800871c:	0080      	lsleq	r0, r0, #2
 800871e:	3302      	addeq	r3, #2
 8008720:	2800      	cmp	r0, #0
 8008722:	db05      	blt.n	8008730 <__hi0bits+0x38>
 8008724:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008728:	f103 0301 	add.w	r3, r3, #1
 800872c:	bf08      	it	eq
 800872e:	2320      	moveq	r3, #32
 8008730:	4618      	mov	r0, r3
 8008732:	4770      	bx	lr
 8008734:	2300      	movs	r3, #0
 8008736:	e7e4      	b.n	8008702 <__hi0bits+0xa>

08008738 <__lo0bits>:
 8008738:	6803      	ldr	r3, [r0, #0]
 800873a:	f013 0207 	ands.w	r2, r3, #7
 800873e:	4601      	mov	r1, r0
 8008740:	d00b      	beq.n	800875a <__lo0bits+0x22>
 8008742:	07da      	lsls	r2, r3, #31
 8008744:	d423      	bmi.n	800878e <__lo0bits+0x56>
 8008746:	0798      	lsls	r0, r3, #30
 8008748:	bf49      	itett	mi
 800874a:	085b      	lsrmi	r3, r3, #1
 800874c:	089b      	lsrpl	r3, r3, #2
 800874e:	2001      	movmi	r0, #1
 8008750:	600b      	strmi	r3, [r1, #0]
 8008752:	bf5c      	itt	pl
 8008754:	600b      	strpl	r3, [r1, #0]
 8008756:	2002      	movpl	r0, #2
 8008758:	4770      	bx	lr
 800875a:	b298      	uxth	r0, r3
 800875c:	b9a8      	cbnz	r0, 800878a <__lo0bits+0x52>
 800875e:	0c1b      	lsrs	r3, r3, #16
 8008760:	2010      	movs	r0, #16
 8008762:	b2da      	uxtb	r2, r3
 8008764:	b90a      	cbnz	r2, 800876a <__lo0bits+0x32>
 8008766:	3008      	adds	r0, #8
 8008768:	0a1b      	lsrs	r3, r3, #8
 800876a:	071a      	lsls	r2, r3, #28
 800876c:	bf04      	itt	eq
 800876e:	091b      	lsreq	r3, r3, #4
 8008770:	3004      	addeq	r0, #4
 8008772:	079a      	lsls	r2, r3, #30
 8008774:	bf04      	itt	eq
 8008776:	089b      	lsreq	r3, r3, #2
 8008778:	3002      	addeq	r0, #2
 800877a:	07da      	lsls	r2, r3, #31
 800877c:	d403      	bmi.n	8008786 <__lo0bits+0x4e>
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	f100 0001 	add.w	r0, r0, #1
 8008784:	d005      	beq.n	8008792 <__lo0bits+0x5a>
 8008786:	600b      	str	r3, [r1, #0]
 8008788:	4770      	bx	lr
 800878a:	4610      	mov	r0, r2
 800878c:	e7e9      	b.n	8008762 <__lo0bits+0x2a>
 800878e:	2000      	movs	r0, #0
 8008790:	4770      	bx	lr
 8008792:	2020      	movs	r0, #32
 8008794:	4770      	bx	lr
	...

08008798 <__i2b>:
 8008798:	b510      	push	{r4, lr}
 800879a:	460c      	mov	r4, r1
 800879c:	2101      	movs	r1, #1
 800879e:	f7ff ff03 	bl	80085a8 <_Balloc>
 80087a2:	4602      	mov	r2, r0
 80087a4:	b928      	cbnz	r0, 80087b2 <__i2b+0x1a>
 80087a6:	4b05      	ldr	r3, [pc, #20]	; (80087bc <__i2b+0x24>)
 80087a8:	4805      	ldr	r0, [pc, #20]	; (80087c0 <__i2b+0x28>)
 80087aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80087ae:	f000 fcf3 	bl	8009198 <__assert_func>
 80087b2:	2301      	movs	r3, #1
 80087b4:	6144      	str	r4, [r0, #20]
 80087b6:	6103      	str	r3, [r0, #16]
 80087b8:	bd10      	pop	{r4, pc}
 80087ba:	bf00      	nop
 80087bc:	0800b29b 	.word	0x0800b29b
 80087c0:	0800b23f 	.word	0x0800b23f

080087c4 <__multiply>:
 80087c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c8:	4691      	mov	r9, r2
 80087ca:	690a      	ldr	r2, [r1, #16]
 80087cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	bfb8      	it	lt
 80087d4:	460b      	movlt	r3, r1
 80087d6:	460c      	mov	r4, r1
 80087d8:	bfbc      	itt	lt
 80087da:	464c      	movlt	r4, r9
 80087dc:	4699      	movlt	r9, r3
 80087de:	6927      	ldr	r7, [r4, #16]
 80087e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087e4:	68a3      	ldr	r3, [r4, #8]
 80087e6:	6861      	ldr	r1, [r4, #4]
 80087e8:	eb07 060a 	add.w	r6, r7, sl
 80087ec:	42b3      	cmp	r3, r6
 80087ee:	b085      	sub	sp, #20
 80087f0:	bfb8      	it	lt
 80087f2:	3101      	addlt	r1, #1
 80087f4:	f7ff fed8 	bl	80085a8 <_Balloc>
 80087f8:	b930      	cbnz	r0, 8008808 <__multiply+0x44>
 80087fa:	4602      	mov	r2, r0
 80087fc:	4b44      	ldr	r3, [pc, #272]	; (8008910 <__multiply+0x14c>)
 80087fe:	4845      	ldr	r0, [pc, #276]	; (8008914 <__multiply+0x150>)
 8008800:	f240 115d 	movw	r1, #349	; 0x15d
 8008804:	f000 fcc8 	bl	8009198 <__assert_func>
 8008808:	f100 0514 	add.w	r5, r0, #20
 800880c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008810:	462b      	mov	r3, r5
 8008812:	2200      	movs	r2, #0
 8008814:	4543      	cmp	r3, r8
 8008816:	d321      	bcc.n	800885c <__multiply+0x98>
 8008818:	f104 0314 	add.w	r3, r4, #20
 800881c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008820:	f109 0314 	add.w	r3, r9, #20
 8008824:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008828:	9202      	str	r2, [sp, #8]
 800882a:	1b3a      	subs	r2, r7, r4
 800882c:	3a15      	subs	r2, #21
 800882e:	f022 0203 	bic.w	r2, r2, #3
 8008832:	3204      	adds	r2, #4
 8008834:	f104 0115 	add.w	r1, r4, #21
 8008838:	428f      	cmp	r7, r1
 800883a:	bf38      	it	cc
 800883c:	2204      	movcc	r2, #4
 800883e:	9201      	str	r2, [sp, #4]
 8008840:	9a02      	ldr	r2, [sp, #8]
 8008842:	9303      	str	r3, [sp, #12]
 8008844:	429a      	cmp	r2, r3
 8008846:	d80c      	bhi.n	8008862 <__multiply+0x9e>
 8008848:	2e00      	cmp	r6, #0
 800884a:	dd03      	ble.n	8008854 <__multiply+0x90>
 800884c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008850:	2b00      	cmp	r3, #0
 8008852:	d05a      	beq.n	800890a <__multiply+0x146>
 8008854:	6106      	str	r6, [r0, #16]
 8008856:	b005      	add	sp, #20
 8008858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885c:	f843 2b04 	str.w	r2, [r3], #4
 8008860:	e7d8      	b.n	8008814 <__multiply+0x50>
 8008862:	f8b3 a000 	ldrh.w	sl, [r3]
 8008866:	f1ba 0f00 	cmp.w	sl, #0
 800886a:	d024      	beq.n	80088b6 <__multiply+0xf2>
 800886c:	f104 0e14 	add.w	lr, r4, #20
 8008870:	46a9      	mov	r9, r5
 8008872:	f04f 0c00 	mov.w	ip, #0
 8008876:	f85e 2b04 	ldr.w	r2, [lr], #4
 800887a:	f8d9 1000 	ldr.w	r1, [r9]
 800887e:	fa1f fb82 	uxth.w	fp, r2
 8008882:	b289      	uxth	r1, r1
 8008884:	fb0a 110b 	mla	r1, sl, fp, r1
 8008888:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800888c:	f8d9 2000 	ldr.w	r2, [r9]
 8008890:	4461      	add	r1, ip
 8008892:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008896:	fb0a c20b 	mla	r2, sl, fp, ip
 800889a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800889e:	b289      	uxth	r1, r1
 80088a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088a4:	4577      	cmp	r7, lr
 80088a6:	f849 1b04 	str.w	r1, [r9], #4
 80088aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088ae:	d8e2      	bhi.n	8008876 <__multiply+0xb2>
 80088b0:	9a01      	ldr	r2, [sp, #4]
 80088b2:	f845 c002 	str.w	ip, [r5, r2]
 80088b6:	9a03      	ldr	r2, [sp, #12]
 80088b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088bc:	3304      	adds	r3, #4
 80088be:	f1b9 0f00 	cmp.w	r9, #0
 80088c2:	d020      	beq.n	8008906 <__multiply+0x142>
 80088c4:	6829      	ldr	r1, [r5, #0]
 80088c6:	f104 0c14 	add.w	ip, r4, #20
 80088ca:	46ae      	mov	lr, r5
 80088cc:	f04f 0a00 	mov.w	sl, #0
 80088d0:	f8bc b000 	ldrh.w	fp, [ip]
 80088d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80088d8:	fb09 220b 	mla	r2, r9, fp, r2
 80088dc:	4492      	add	sl, r2
 80088de:	b289      	uxth	r1, r1
 80088e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80088e4:	f84e 1b04 	str.w	r1, [lr], #4
 80088e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80088ec:	f8be 1000 	ldrh.w	r1, [lr]
 80088f0:	0c12      	lsrs	r2, r2, #16
 80088f2:	fb09 1102 	mla	r1, r9, r2, r1
 80088f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80088fa:	4567      	cmp	r7, ip
 80088fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008900:	d8e6      	bhi.n	80088d0 <__multiply+0x10c>
 8008902:	9a01      	ldr	r2, [sp, #4]
 8008904:	50a9      	str	r1, [r5, r2]
 8008906:	3504      	adds	r5, #4
 8008908:	e79a      	b.n	8008840 <__multiply+0x7c>
 800890a:	3e01      	subs	r6, #1
 800890c:	e79c      	b.n	8008848 <__multiply+0x84>
 800890e:	bf00      	nop
 8008910:	0800b29b 	.word	0x0800b29b
 8008914:	0800b23f 	.word	0x0800b23f

08008918 <__pow5mult>:
 8008918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800891c:	4615      	mov	r5, r2
 800891e:	f012 0203 	ands.w	r2, r2, #3
 8008922:	4606      	mov	r6, r0
 8008924:	460f      	mov	r7, r1
 8008926:	d007      	beq.n	8008938 <__pow5mult+0x20>
 8008928:	4c25      	ldr	r4, [pc, #148]	; (80089c0 <__pow5mult+0xa8>)
 800892a:	3a01      	subs	r2, #1
 800892c:	2300      	movs	r3, #0
 800892e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008932:	f7ff fe9b 	bl	800866c <__multadd>
 8008936:	4607      	mov	r7, r0
 8008938:	10ad      	asrs	r5, r5, #2
 800893a:	d03d      	beq.n	80089b8 <__pow5mult+0xa0>
 800893c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800893e:	b97c      	cbnz	r4, 8008960 <__pow5mult+0x48>
 8008940:	2010      	movs	r0, #16
 8008942:	f001 fad5 	bl	8009ef0 <malloc>
 8008946:	4602      	mov	r2, r0
 8008948:	6270      	str	r0, [r6, #36]	; 0x24
 800894a:	b928      	cbnz	r0, 8008958 <__pow5mult+0x40>
 800894c:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <__pow5mult+0xac>)
 800894e:	481e      	ldr	r0, [pc, #120]	; (80089c8 <__pow5mult+0xb0>)
 8008950:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008954:	f000 fc20 	bl	8009198 <__assert_func>
 8008958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800895c:	6004      	str	r4, [r0, #0]
 800895e:	60c4      	str	r4, [r0, #12]
 8008960:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008964:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008968:	b94c      	cbnz	r4, 800897e <__pow5mult+0x66>
 800896a:	f240 2171 	movw	r1, #625	; 0x271
 800896e:	4630      	mov	r0, r6
 8008970:	f7ff ff12 	bl	8008798 <__i2b>
 8008974:	2300      	movs	r3, #0
 8008976:	f8c8 0008 	str.w	r0, [r8, #8]
 800897a:	4604      	mov	r4, r0
 800897c:	6003      	str	r3, [r0, #0]
 800897e:	f04f 0900 	mov.w	r9, #0
 8008982:	07eb      	lsls	r3, r5, #31
 8008984:	d50a      	bpl.n	800899c <__pow5mult+0x84>
 8008986:	4639      	mov	r1, r7
 8008988:	4622      	mov	r2, r4
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff ff1a 	bl	80087c4 <__multiply>
 8008990:	4639      	mov	r1, r7
 8008992:	4680      	mov	r8, r0
 8008994:	4630      	mov	r0, r6
 8008996:	f7ff fe47 	bl	8008628 <_Bfree>
 800899a:	4647      	mov	r7, r8
 800899c:	106d      	asrs	r5, r5, #1
 800899e:	d00b      	beq.n	80089b8 <__pow5mult+0xa0>
 80089a0:	6820      	ldr	r0, [r4, #0]
 80089a2:	b938      	cbnz	r0, 80089b4 <__pow5mult+0x9c>
 80089a4:	4622      	mov	r2, r4
 80089a6:	4621      	mov	r1, r4
 80089a8:	4630      	mov	r0, r6
 80089aa:	f7ff ff0b 	bl	80087c4 <__multiply>
 80089ae:	6020      	str	r0, [r4, #0]
 80089b0:	f8c0 9000 	str.w	r9, [r0]
 80089b4:	4604      	mov	r4, r0
 80089b6:	e7e4      	b.n	8008982 <__pow5mult+0x6a>
 80089b8:	4638      	mov	r0, r7
 80089ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089be:	bf00      	nop
 80089c0:	0800b3a0 	.word	0x0800b3a0
 80089c4:	0800b228 	.word	0x0800b228
 80089c8:	0800b23f 	.word	0x0800b23f

080089cc <__lshift>:
 80089cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d0:	460c      	mov	r4, r1
 80089d2:	6849      	ldr	r1, [r1, #4]
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	4607      	mov	r7, r0
 80089de:	4691      	mov	r9, r2
 80089e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089e4:	f108 0601 	add.w	r6, r8, #1
 80089e8:	42b3      	cmp	r3, r6
 80089ea:	db0b      	blt.n	8008a04 <__lshift+0x38>
 80089ec:	4638      	mov	r0, r7
 80089ee:	f7ff fddb 	bl	80085a8 <_Balloc>
 80089f2:	4605      	mov	r5, r0
 80089f4:	b948      	cbnz	r0, 8008a0a <__lshift+0x3e>
 80089f6:	4602      	mov	r2, r0
 80089f8:	4b2a      	ldr	r3, [pc, #168]	; (8008aa4 <__lshift+0xd8>)
 80089fa:	482b      	ldr	r0, [pc, #172]	; (8008aa8 <__lshift+0xdc>)
 80089fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a00:	f000 fbca 	bl	8009198 <__assert_func>
 8008a04:	3101      	adds	r1, #1
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	e7ee      	b.n	80089e8 <__lshift+0x1c>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f100 0114 	add.w	r1, r0, #20
 8008a10:	f100 0210 	add.w	r2, r0, #16
 8008a14:	4618      	mov	r0, r3
 8008a16:	4553      	cmp	r3, sl
 8008a18:	db37      	blt.n	8008a8a <__lshift+0xbe>
 8008a1a:	6920      	ldr	r0, [r4, #16]
 8008a1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a20:	f104 0314 	add.w	r3, r4, #20
 8008a24:	f019 091f 	ands.w	r9, r9, #31
 8008a28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a30:	d02f      	beq.n	8008a92 <__lshift+0xc6>
 8008a32:	f1c9 0e20 	rsb	lr, r9, #32
 8008a36:	468a      	mov	sl, r1
 8008a38:	f04f 0c00 	mov.w	ip, #0
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	fa02 f209 	lsl.w	r2, r2, r9
 8008a42:	ea42 020c 	orr.w	r2, r2, ip
 8008a46:	f84a 2b04 	str.w	r2, [sl], #4
 8008a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a4e:	4298      	cmp	r0, r3
 8008a50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008a54:	d8f2      	bhi.n	8008a3c <__lshift+0x70>
 8008a56:	1b03      	subs	r3, r0, r4
 8008a58:	3b15      	subs	r3, #21
 8008a5a:	f023 0303 	bic.w	r3, r3, #3
 8008a5e:	3304      	adds	r3, #4
 8008a60:	f104 0215 	add.w	r2, r4, #21
 8008a64:	4290      	cmp	r0, r2
 8008a66:	bf38      	it	cc
 8008a68:	2304      	movcc	r3, #4
 8008a6a:	f841 c003 	str.w	ip, [r1, r3]
 8008a6e:	f1bc 0f00 	cmp.w	ip, #0
 8008a72:	d001      	beq.n	8008a78 <__lshift+0xac>
 8008a74:	f108 0602 	add.w	r6, r8, #2
 8008a78:	3e01      	subs	r6, #1
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	612e      	str	r6, [r5, #16]
 8008a7e:	4621      	mov	r1, r4
 8008a80:	f7ff fdd2 	bl	8008628 <_Bfree>
 8008a84:	4628      	mov	r0, r5
 8008a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a8e:	3301      	adds	r3, #1
 8008a90:	e7c1      	b.n	8008a16 <__lshift+0x4a>
 8008a92:	3904      	subs	r1, #4
 8008a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a98:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a9c:	4298      	cmp	r0, r3
 8008a9e:	d8f9      	bhi.n	8008a94 <__lshift+0xc8>
 8008aa0:	e7ea      	b.n	8008a78 <__lshift+0xac>
 8008aa2:	bf00      	nop
 8008aa4:	0800b29b 	.word	0x0800b29b
 8008aa8:	0800b23f 	.word	0x0800b23f

08008aac <__mcmp>:
 8008aac:	b530      	push	{r4, r5, lr}
 8008aae:	6902      	ldr	r2, [r0, #16]
 8008ab0:	690c      	ldr	r4, [r1, #16]
 8008ab2:	1b12      	subs	r2, r2, r4
 8008ab4:	d10e      	bne.n	8008ad4 <__mcmp+0x28>
 8008ab6:	f100 0314 	add.w	r3, r0, #20
 8008aba:	3114      	adds	r1, #20
 8008abc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ac0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ac4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ac8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008acc:	42a5      	cmp	r5, r4
 8008ace:	d003      	beq.n	8008ad8 <__mcmp+0x2c>
 8008ad0:	d305      	bcc.n	8008ade <__mcmp+0x32>
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	bd30      	pop	{r4, r5, pc}
 8008ad8:	4283      	cmp	r3, r0
 8008ada:	d3f3      	bcc.n	8008ac4 <__mcmp+0x18>
 8008adc:	e7fa      	b.n	8008ad4 <__mcmp+0x28>
 8008ade:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae2:	e7f7      	b.n	8008ad4 <__mcmp+0x28>

08008ae4 <__mdiff>:
 8008ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	460c      	mov	r4, r1
 8008aea:	4606      	mov	r6, r0
 8008aec:	4611      	mov	r1, r2
 8008aee:	4620      	mov	r0, r4
 8008af0:	4690      	mov	r8, r2
 8008af2:	f7ff ffdb 	bl	8008aac <__mcmp>
 8008af6:	1e05      	subs	r5, r0, #0
 8008af8:	d110      	bne.n	8008b1c <__mdiff+0x38>
 8008afa:	4629      	mov	r1, r5
 8008afc:	4630      	mov	r0, r6
 8008afe:	f7ff fd53 	bl	80085a8 <_Balloc>
 8008b02:	b930      	cbnz	r0, 8008b12 <__mdiff+0x2e>
 8008b04:	4b3a      	ldr	r3, [pc, #232]	; (8008bf0 <__mdiff+0x10c>)
 8008b06:	4602      	mov	r2, r0
 8008b08:	f240 2132 	movw	r1, #562	; 0x232
 8008b0c:	4839      	ldr	r0, [pc, #228]	; (8008bf4 <__mdiff+0x110>)
 8008b0e:	f000 fb43 	bl	8009198 <__assert_func>
 8008b12:	2301      	movs	r3, #1
 8008b14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1c:	bfa4      	itt	ge
 8008b1e:	4643      	movge	r3, r8
 8008b20:	46a0      	movge	r8, r4
 8008b22:	4630      	mov	r0, r6
 8008b24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b28:	bfa6      	itte	ge
 8008b2a:	461c      	movge	r4, r3
 8008b2c:	2500      	movge	r5, #0
 8008b2e:	2501      	movlt	r5, #1
 8008b30:	f7ff fd3a 	bl	80085a8 <_Balloc>
 8008b34:	b920      	cbnz	r0, 8008b40 <__mdiff+0x5c>
 8008b36:	4b2e      	ldr	r3, [pc, #184]	; (8008bf0 <__mdiff+0x10c>)
 8008b38:	4602      	mov	r2, r0
 8008b3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b3e:	e7e5      	b.n	8008b0c <__mdiff+0x28>
 8008b40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b44:	6926      	ldr	r6, [r4, #16]
 8008b46:	60c5      	str	r5, [r0, #12]
 8008b48:	f104 0914 	add.w	r9, r4, #20
 8008b4c:	f108 0514 	add.w	r5, r8, #20
 8008b50:	f100 0e14 	add.w	lr, r0, #20
 8008b54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b5c:	f108 0210 	add.w	r2, r8, #16
 8008b60:	46f2      	mov	sl, lr
 8008b62:	2100      	movs	r1, #0
 8008b64:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b6c:	fa1f f883 	uxth.w	r8, r3
 8008b70:	fa11 f18b 	uxtah	r1, r1, fp
 8008b74:	0c1b      	lsrs	r3, r3, #16
 8008b76:	eba1 0808 	sub.w	r8, r1, r8
 8008b7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b82:	fa1f f888 	uxth.w	r8, r8
 8008b86:	1419      	asrs	r1, r3, #16
 8008b88:	454e      	cmp	r6, r9
 8008b8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b8e:	f84a 3b04 	str.w	r3, [sl], #4
 8008b92:	d8e7      	bhi.n	8008b64 <__mdiff+0x80>
 8008b94:	1b33      	subs	r3, r6, r4
 8008b96:	3b15      	subs	r3, #21
 8008b98:	f023 0303 	bic.w	r3, r3, #3
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	3415      	adds	r4, #21
 8008ba0:	42a6      	cmp	r6, r4
 8008ba2:	bf38      	it	cc
 8008ba4:	2304      	movcc	r3, #4
 8008ba6:	441d      	add	r5, r3
 8008ba8:	4473      	add	r3, lr
 8008baa:	469e      	mov	lr, r3
 8008bac:	462e      	mov	r6, r5
 8008bae:	4566      	cmp	r6, ip
 8008bb0:	d30e      	bcc.n	8008bd0 <__mdiff+0xec>
 8008bb2:	f10c 0203 	add.w	r2, ip, #3
 8008bb6:	1b52      	subs	r2, r2, r5
 8008bb8:	f022 0203 	bic.w	r2, r2, #3
 8008bbc:	3d03      	subs	r5, #3
 8008bbe:	45ac      	cmp	ip, r5
 8008bc0:	bf38      	it	cc
 8008bc2:	2200      	movcc	r2, #0
 8008bc4:	441a      	add	r2, r3
 8008bc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008bca:	b17b      	cbz	r3, 8008bec <__mdiff+0x108>
 8008bcc:	6107      	str	r7, [r0, #16]
 8008bce:	e7a3      	b.n	8008b18 <__mdiff+0x34>
 8008bd0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008bd4:	fa11 f288 	uxtah	r2, r1, r8
 8008bd8:	1414      	asrs	r4, r2, #16
 8008bda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008bde:	b292      	uxth	r2, r2
 8008be0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008be4:	f84e 2b04 	str.w	r2, [lr], #4
 8008be8:	1421      	asrs	r1, r4, #16
 8008bea:	e7e0      	b.n	8008bae <__mdiff+0xca>
 8008bec:	3f01      	subs	r7, #1
 8008bee:	e7ea      	b.n	8008bc6 <__mdiff+0xe2>
 8008bf0:	0800b29b 	.word	0x0800b29b
 8008bf4:	0800b23f 	.word	0x0800b23f

08008bf8 <__d2b>:
 8008bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	4689      	mov	r9, r1
 8008bfe:	2101      	movs	r1, #1
 8008c00:	ec57 6b10 	vmov	r6, r7, d0
 8008c04:	4690      	mov	r8, r2
 8008c06:	f7ff fccf 	bl	80085a8 <_Balloc>
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	b930      	cbnz	r0, 8008c1c <__d2b+0x24>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <__d2b+0xb0>)
 8008c12:	4826      	ldr	r0, [pc, #152]	; (8008cac <__d2b+0xb4>)
 8008c14:	f240 310a 	movw	r1, #778	; 0x30a
 8008c18:	f000 fabe 	bl	8009198 <__assert_func>
 8008c1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c24:	bb35      	cbnz	r5, 8008c74 <__d2b+0x7c>
 8008c26:	2e00      	cmp	r6, #0
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	d028      	beq.n	8008c7e <__d2b+0x86>
 8008c2c:	4668      	mov	r0, sp
 8008c2e:	9600      	str	r6, [sp, #0]
 8008c30:	f7ff fd82 	bl	8008738 <__lo0bits>
 8008c34:	9900      	ldr	r1, [sp, #0]
 8008c36:	b300      	cbz	r0, 8008c7a <__d2b+0x82>
 8008c38:	9a01      	ldr	r2, [sp, #4]
 8008c3a:	f1c0 0320 	rsb	r3, r0, #32
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	430b      	orrs	r3, r1
 8008c44:	40c2      	lsrs	r2, r0
 8008c46:	6163      	str	r3, [r4, #20]
 8008c48:	9201      	str	r2, [sp, #4]
 8008c4a:	9b01      	ldr	r3, [sp, #4]
 8008c4c:	61a3      	str	r3, [r4, #24]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bf14      	ite	ne
 8008c52:	2202      	movne	r2, #2
 8008c54:	2201      	moveq	r2, #1
 8008c56:	6122      	str	r2, [r4, #16]
 8008c58:	b1d5      	cbz	r5, 8008c90 <__d2b+0x98>
 8008c5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c5e:	4405      	add	r5, r0
 8008c60:	f8c9 5000 	str.w	r5, [r9]
 8008c64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c68:	f8c8 0000 	str.w	r0, [r8]
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	b003      	add	sp, #12
 8008c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c78:	e7d5      	b.n	8008c26 <__d2b+0x2e>
 8008c7a:	6161      	str	r1, [r4, #20]
 8008c7c:	e7e5      	b.n	8008c4a <__d2b+0x52>
 8008c7e:	a801      	add	r0, sp, #4
 8008c80:	f7ff fd5a 	bl	8008738 <__lo0bits>
 8008c84:	9b01      	ldr	r3, [sp, #4]
 8008c86:	6163      	str	r3, [r4, #20]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	6122      	str	r2, [r4, #16]
 8008c8c:	3020      	adds	r0, #32
 8008c8e:	e7e3      	b.n	8008c58 <__d2b+0x60>
 8008c90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c98:	f8c9 0000 	str.w	r0, [r9]
 8008c9c:	6918      	ldr	r0, [r3, #16]
 8008c9e:	f7ff fd2b 	bl	80086f8 <__hi0bits>
 8008ca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ca6:	e7df      	b.n	8008c68 <__d2b+0x70>
 8008ca8:	0800b29b 	.word	0x0800b29b
 8008cac:	0800b23f 	.word	0x0800b23f

08008cb0 <_mprec_log10>:
 8008cb0:	2817      	cmp	r0, #23
 8008cb2:	b5d0      	push	{r4, r6, r7, lr}
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	dc07      	bgt.n	8008cc8 <_mprec_log10+0x18>
 8008cb8:	4809      	ldr	r0, [pc, #36]	; (8008ce0 <_mprec_log10+0x30>)
 8008cba:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8008cbe:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008cc2:	ec41 0b10 	vmov	d0, r0, r1
 8008cc6:	bdd0      	pop	{r4, r6, r7, pc}
 8008cc8:	4906      	ldr	r1, [pc, #24]	; (8008ce4 <_mprec_log10+0x34>)
 8008cca:	4f07      	ldr	r7, [pc, #28]	; (8008ce8 <_mprec_log10+0x38>)
 8008ccc:	2000      	movs	r0, #0
 8008cce:	2600      	movs	r6, #0
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	463b      	mov	r3, r7
 8008cd4:	f7f7 fcb0 	bl	8000638 <__aeabi_dmul>
 8008cd8:	3c01      	subs	r4, #1
 8008cda:	d1f9      	bne.n	8008cd0 <_mprec_log10+0x20>
 8008cdc:	e7f1      	b.n	8008cc2 <_mprec_log10+0x12>
 8008cde:	bf00      	nop
 8008ce0:	0800b2d8 	.word	0x0800b2d8
 8008ce4:	3ff00000 	.word	0x3ff00000
 8008ce8:	40240000 	.word	0x40240000

08008cec <_calloc_r>:
 8008cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cee:	fba1 2402 	umull	r2, r4, r1, r2
 8008cf2:	b94c      	cbnz	r4, 8008d08 <_calloc_r+0x1c>
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	9201      	str	r2, [sp, #4]
 8008cf8:	f000 f82e 	bl	8008d58 <_malloc_r>
 8008cfc:	9a01      	ldr	r2, [sp, #4]
 8008cfe:	4605      	mov	r5, r0
 8008d00:	b930      	cbnz	r0, 8008d10 <_calloc_r+0x24>
 8008d02:	4628      	mov	r0, r5
 8008d04:	b003      	add	sp, #12
 8008d06:	bd30      	pop	{r4, r5, pc}
 8008d08:	220c      	movs	r2, #12
 8008d0a:	6002      	str	r2, [r0, #0]
 8008d0c:	2500      	movs	r5, #0
 8008d0e:	e7f8      	b.n	8008d02 <_calloc_r+0x16>
 8008d10:	4621      	mov	r1, r4
 8008d12:	f7ff faf9 	bl	8008308 <memset>
 8008d16:	e7f4      	b.n	8008d02 <_calloc_r+0x16>

08008d18 <sbrk_aligned>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	4e0e      	ldr	r6, [pc, #56]	; (8008d54 <sbrk_aligned+0x3c>)
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	6831      	ldr	r1, [r6, #0]
 8008d20:	4605      	mov	r5, r0
 8008d22:	b911      	cbnz	r1, 8008d2a <sbrk_aligned+0x12>
 8008d24:	f000 fa20 	bl	8009168 <_sbrk_r>
 8008d28:	6030      	str	r0, [r6, #0]
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	f000 fa1b 	bl	8009168 <_sbrk_r>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	d00a      	beq.n	8008d4c <sbrk_aligned+0x34>
 8008d36:	1cc4      	adds	r4, r0, #3
 8008d38:	f024 0403 	bic.w	r4, r4, #3
 8008d3c:	42a0      	cmp	r0, r4
 8008d3e:	d007      	beq.n	8008d50 <sbrk_aligned+0x38>
 8008d40:	1a21      	subs	r1, r4, r0
 8008d42:	4628      	mov	r0, r5
 8008d44:	f000 fa10 	bl	8009168 <_sbrk_r>
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d101      	bne.n	8008d50 <sbrk_aligned+0x38>
 8008d4c:	f04f 34ff 	mov.w	r4, #4294967295
 8008d50:	4620      	mov	r0, r4
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
 8008d54:	20000768 	.word	0x20000768

08008d58 <_malloc_r>:
 8008d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5c:	1ccd      	adds	r5, r1, #3
 8008d5e:	f025 0503 	bic.w	r5, r5, #3
 8008d62:	3508      	adds	r5, #8
 8008d64:	2d0c      	cmp	r5, #12
 8008d66:	bf38      	it	cc
 8008d68:	250c      	movcc	r5, #12
 8008d6a:	2d00      	cmp	r5, #0
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	db01      	blt.n	8008d74 <_malloc_r+0x1c>
 8008d70:	42a9      	cmp	r1, r5
 8008d72:	d905      	bls.n	8008d80 <_malloc_r+0x28>
 8008d74:	230c      	movs	r3, #12
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	2600      	movs	r6, #0
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d80:	4e2e      	ldr	r6, [pc, #184]	; (8008e3c <_malloc_r+0xe4>)
 8008d82:	f001 f8bd 	bl	8009f00 <__malloc_lock>
 8008d86:	6833      	ldr	r3, [r6, #0]
 8008d88:	461c      	mov	r4, r3
 8008d8a:	bb34      	cbnz	r4, 8008dda <_malloc_r+0x82>
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	4638      	mov	r0, r7
 8008d90:	f7ff ffc2 	bl	8008d18 <sbrk_aligned>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	4604      	mov	r4, r0
 8008d98:	d14d      	bne.n	8008e36 <_malloc_r+0xde>
 8008d9a:	6834      	ldr	r4, [r6, #0]
 8008d9c:	4626      	mov	r6, r4
 8008d9e:	2e00      	cmp	r6, #0
 8008da0:	d140      	bne.n	8008e24 <_malloc_r+0xcc>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	4631      	mov	r1, r6
 8008da6:	4638      	mov	r0, r7
 8008da8:	eb04 0803 	add.w	r8, r4, r3
 8008dac:	f000 f9dc 	bl	8009168 <_sbrk_r>
 8008db0:	4580      	cmp	r8, r0
 8008db2:	d13a      	bne.n	8008e2a <_malloc_r+0xd2>
 8008db4:	6821      	ldr	r1, [r4, #0]
 8008db6:	3503      	adds	r5, #3
 8008db8:	1a6d      	subs	r5, r5, r1
 8008dba:	f025 0503 	bic.w	r5, r5, #3
 8008dbe:	3508      	adds	r5, #8
 8008dc0:	2d0c      	cmp	r5, #12
 8008dc2:	bf38      	it	cc
 8008dc4:	250c      	movcc	r5, #12
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	4638      	mov	r0, r7
 8008dca:	f7ff ffa5 	bl	8008d18 <sbrk_aligned>
 8008dce:	3001      	adds	r0, #1
 8008dd0:	d02b      	beq.n	8008e2a <_malloc_r+0xd2>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	442b      	add	r3, r5
 8008dd6:	6023      	str	r3, [r4, #0]
 8008dd8:	e00e      	b.n	8008df8 <_malloc_r+0xa0>
 8008dda:	6822      	ldr	r2, [r4, #0]
 8008ddc:	1b52      	subs	r2, r2, r5
 8008dde:	d41e      	bmi.n	8008e1e <_malloc_r+0xc6>
 8008de0:	2a0b      	cmp	r2, #11
 8008de2:	d916      	bls.n	8008e12 <_malloc_r+0xba>
 8008de4:	1961      	adds	r1, r4, r5
 8008de6:	42a3      	cmp	r3, r4
 8008de8:	6025      	str	r5, [r4, #0]
 8008dea:	bf18      	it	ne
 8008dec:	6059      	strne	r1, [r3, #4]
 8008dee:	6863      	ldr	r3, [r4, #4]
 8008df0:	bf08      	it	eq
 8008df2:	6031      	streq	r1, [r6, #0]
 8008df4:	5162      	str	r2, [r4, r5]
 8008df6:	604b      	str	r3, [r1, #4]
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f104 060b 	add.w	r6, r4, #11
 8008dfe:	f001 f885 	bl	8009f0c <__malloc_unlock>
 8008e02:	f026 0607 	bic.w	r6, r6, #7
 8008e06:	1d23      	adds	r3, r4, #4
 8008e08:	1af2      	subs	r2, r6, r3
 8008e0a:	d0b6      	beq.n	8008d7a <_malloc_r+0x22>
 8008e0c:	1b9b      	subs	r3, r3, r6
 8008e0e:	50a3      	str	r3, [r4, r2]
 8008e10:	e7b3      	b.n	8008d7a <_malloc_r+0x22>
 8008e12:	6862      	ldr	r2, [r4, #4]
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	bf0c      	ite	eq
 8008e18:	6032      	streq	r2, [r6, #0]
 8008e1a:	605a      	strne	r2, [r3, #4]
 8008e1c:	e7ec      	b.n	8008df8 <_malloc_r+0xa0>
 8008e1e:	4623      	mov	r3, r4
 8008e20:	6864      	ldr	r4, [r4, #4]
 8008e22:	e7b2      	b.n	8008d8a <_malloc_r+0x32>
 8008e24:	4634      	mov	r4, r6
 8008e26:	6876      	ldr	r6, [r6, #4]
 8008e28:	e7b9      	b.n	8008d9e <_malloc_r+0x46>
 8008e2a:	230c      	movs	r3, #12
 8008e2c:	603b      	str	r3, [r7, #0]
 8008e2e:	4638      	mov	r0, r7
 8008e30:	f001 f86c 	bl	8009f0c <__malloc_unlock>
 8008e34:	e7a1      	b.n	8008d7a <_malloc_r+0x22>
 8008e36:	6025      	str	r5, [r4, #0]
 8008e38:	e7de      	b.n	8008df8 <_malloc_r+0xa0>
 8008e3a:	bf00      	nop
 8008e3c:	20000764 	.word	0x20000764

08008e40 <_printf_common>:
 8008e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e44:	4616      	mov	r6, r2
 8008e46:	4699      	mov	r9, r3
 8008e48:	688a      	ldr	r2, [r1, #8]
 8008e4a:	690b      	ldr	r3, [r1, #16]
 8008e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e50:	4293      	cmp	r3, r2
 8008e52:	bfb8      	it	lt
 8008e54:	4613      	movlt	r3, r2
 8008e56:	6033      	str	r3, [r6, #0]
 8008e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e5c:	4607      	mov	r7, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	b10a      	cbz	r2, 8008e66 <_printf_common+0x26>
 8008e62:	3301      	adds	r3, #1
 8008e64:	6033      	str	r3, [r6, #0]
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	0699      	lsls	r1, r3, #26
 8008e6a:	bf42      	ittt	mi
 8008e6c:	6833      	ldrmi	r3, [r6, #0]
 8008e6e:	3302      	addmi	r3, #2
 8008e70:	6033      	strmi	r3, [r6, #0]
 8008e72:	6825      	ldr	r5, [r4, #0]
 8008e74:	f015 0506 	ands.w	r5, r5, #6
 8008e78:	d106      	bne.n	8008e88 <_printf_common+0x48>
 8008e7a:	f104 0a19 	add.w	sl, r4, #25
 8008e7e:	68e3      	ldr	r3, [r4, #12]
 8008e80:	6832      	ldr	r2, [r6, #0]
 8008e82:	1a9b      	subs	r3, r3, r2
 8008e84:	42ab      	cmp	r3, r5
 8008e86:	dc26      	bgt.n	8008ed6 <_printf_common+0x96>
 8008e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e8c:	1e13      	subs	r3, r2, #0
 8008e8e:	6822      	ldr	r2, [r4, #0]
 8008e90:	bf18      	it	ne
 8008e92:	2301      	movne	r3, #1
 8008e94:	0692      	lsls	r2, r2, #26
 8008e96:	d42b      	bmi.n	8008ef0 <_printf_common+0xb0>
 8008e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	47c0      	blx	r8
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d01e      	beq.n	8008ee4 <_printf_common+0xa4>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	68e5      	ldr	r5, [r4, #12]
 8008eaa:	6832      	ldr	r2, [r6, #0]
 8008eac:	f003 0306 	and.w	r3, r3, #6
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	bf08      	it	eq
 8008eb4:	1aad      	subeq	r5, r5, r2
 8008eb6:	68a3      	ldr	r3, [r4, #8]
 8008eb8:	6922      	ldr	r2, [r4, #16]
 8008eba:	bf0c      	ite	eq
 8008ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ec0:	2500      	movne	r5, #0
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	bfc4      	itt	gt
 8008ec6:	1a9b      	subgt	r3, r3, r2
 8008ec8:	18ed      	addgt	r5, r5, r3
 8008eca:	2600      	movs	r6, #0
 8008ecc:	341a      	adds	r4, #26
 8008ece:	42b5      	cmp	r5, r6
 8008ed0:	d11a      	bne.n	8008f08 <_printf_common+0xc8>
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	e008      	b.n	8008ee8 <_printf_common+0xa8>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4652      	mov	r2, sl
 8008eda:	4649      	mov	r1, r9
 8008edc:	4638      	mov	r0, r7
 8008ede:	47c0      	blx	r8
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d103      	bne.n	8008eec <_printf_common+0xac>
 8008ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eec:	3501      	adds	r5, #1
 8008eee:	e7c6      	b.n	8008e7e <_printf_common+0x3e>
 8008ef0:	18e1      	adds	r1, r4, r3
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	2030      	movs	r0, #48	; 0x30
 8008ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008efa:	4422      	add	r2, r4
 8008efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f04:	3302      	adds	r3, #2
 8008f06:	e7c7      	b.n	8008e98 <_printf_common+0x58>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	4622      	mov	r2, r4
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	4638      	mov	r0, r7
 8008f10:	47c0      	blx	r8
 8008f12:	3001      	adds	r0, #1
 8008f14:	d0e6      	beq.n	8008ee4 <_printf_common+0xa4>
 8008f16:	3601      	adds	r6, #1
 8008f18:	e7d9      	b.n	8008ece <_printf_common+0x8e>
	...

08008f1c <_printf_i>:
 8008f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f20:	7e0f      	ldrb	r7, [r1, #24]
 8008f22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f24:	2f78      	cmp	r7, #120	; 0x78
 8008f26:	4691      	mov	r9, r2
 8008f28:	4680      	mov	r8, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	469a      	mov	sl, r3
 8008f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f32:	d807      	bhi.n	8008f44 <_printf_i+0x28>
 8008f34:	2f62      	cmp	r7, #98	; 0x62
 8008f36:	d80a      	bhi.n	8008f4e <_printf_i+0x32>
 8008f38:	2f00      	cmp	r7, #0
 8008f3a:	f000 80d8 	beq.w	80090ee <_printf_i+0x1d2>
 8008f3e:	2f58      	cmp	r7, #88	; 0x58
 8008f40:	f000 80a3 	beq.w	800908a <_printf_i+0x16e>
 8008f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f4c:	e03a      	b.n	8008fc4 <_printf_i+0xa8>
 8008f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f52:	2b15      	cmp	r3, #21
 8008f54:	d8f6      	bhi.n	8008f44 <_printf_i+0x28>
 8008f56:	a101      	add	r1, pc, #4	; (adr r1, 8008f5c <_printf_i+0x40>)
 8008f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f5c:	08008fb5 	.word	0x08008fb5
 8008f60:	08008fc9 	.word	0x08008fc9
 8008f64:	08008f45 	.word	0x08008f45
 8008f68:	08008f45 	.word	0x08008f45
 8008f6c:	08008f45 	.word	0x08008f45
 8008f70:	08008f45 	.word	0x08008f45
 8008f74:	08008fc9 	.word	0x08008fc9
 8008f78:	08008f45 	.word	0x08008f45
 8008f7c:	08008f45 	.word	0x08008f45
 8008f80:	08008f45 	.word	0x08008f45
 8008f84:	08008f45 	.word	0x08008f45
 8008f88:	080090d5 	.word	0x080090d5
 8008f8c:	08008ff9 	.word	0x08008ff9
 8008f90:	080090b7 	.word	0x080090b7
 8008f94:	08008f45 	.word	0x08008f45
 8008f98:	08008f45 	.word	0x08008f45
 8008f9c:	080090f7 	.word	0x080090f7
 8008fa0:	08008f45 	.word	0x08008f45
 8008fa4:	08008ff9 	.word	0x08008ff9
 8008fa8:	08008f45 	.word	0x08008f45
 8008fac:	08008f45 	.word	0x08008f45
 8008fb0:	080090bf 	.word	0x080090bf
 8008fb4:	682b      	ldr	r3, [r5, #0]
 8008fb6:	1d1a      	adds	r2, r3, #4
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	602a      	str	r2, [r5, #0]
 8008fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e0a3      	b.n	8009110 <_printf_i+0x1f4>
 8008fc8:	6820      	ldr	r0, [r4, #0]
 8008fca:	6829      	ldr	r1, [r5, #0]
 8008fcc:	0606      	lsls	r6, r0, #24
 8008fce:	f101 0304 	add.w	r3, r1, #4
 8008fd2:	d50a      	bpl.n	8008fea <_printf_i+0xce>
 8008fd4:	680e      	ldr	r6, [r1, #0]
 8008fd6:	602b      	str	r3, [r5, #0]
 8008fd8:	2e00      	cmp	r6, #0
 8008fda:	da03      	bge.n	8008fe4 <_printf_i+0xc8>
 8008fdc:	232d      	movs	r3, #45	; 0x2d
 8008fde:	4276      	negs	r6, r6
 8008fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fe4:	485e      	ldr	r0, [pc, #376]	; (8009160 <_printf_i+0x244>)
 8008fe6:	230a      	movs	r3, #10
 8008fe8:	e019      	b.n	800901e <_printf_i+0x102>
 8008fea:	680e      	ldr	r6, [r1, #0]
 8008fec:	602b      	str	r3, [r5, #0]
 8008fee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ff2:	bf18      	it	ne
 8008ff4:	b236      	sxthne	r6, r6
 8008ff6:	e7ef      	b.n	8008fd8 <_printf_i+0xbc>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	6820      	ldr	r0, [r4, #0]
 8008ffc:	1d19      	adds	r1, r3, #4
 8008ffe:	6029      	str	r1, [r5, #0]
 8009000:	0601      	lsls	r1, r0, #24
 8009002:	d501      	bpl.n	8009008 <_printf_i+0xec>
 8009004:	681e      	ldr	r6, [r3, #0]
 8009006:	e002      	b.n	800900e <_printf_i+0xf2>
 8009008:	0646      	lsls	r6, r0, #25
 800900a:	d5fb      	bpl.n	8009004 <_printf_i+0xe8>
 800900c:	881e      	ldrh	r6, [r3, #0]
 800900e:	4854      	ldr	r0, [pc, #336]	; (8009160 <_printf_i+0x244>)
 8009010:	2f6f      	cmp	r7, #111	; 0x6f
 8009012:	bf0c      	ite	eq
 8009014:	2308      	moveq	r3, #8
 8009016:	230a      	movne	r3, #10
 8009018:	2100      	movs	r1, #0
 800901a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800901e:	6865      	ldr	r5, [r4, #4]
 8009020:	60a5      	str	r5, [r4, #8]
 8009022:	2d00      	cmp	r5, #0
 8009024:	bfa2      	ittt	ge
 8009026:	6821      	ldrge	r1, [r4, #0]
 8009028:	f021 0104 	bicge.w	r1, r1, #4
 800902c:	6021      	strge	r1, [r4, #0]
 800902e:	b90e      	cbnz	r6, 8009034 <_printf_i+0x118>
 8009030:	2d00      	cmp	r5, #0
 8009032:	d04d      	beq.n	80090d0 <_printf_i+0x1b4>
 8009034:	4615      	mov	r5, r2
 8009036:	fbb6 f1f3 	udiv	r1, r6, r3
 800903a:	fb03 6711 	mls	r7, r3, r1, r6
 800903e:	5dc7      	ldrb	r7, [r0, r7]
 8009040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009044:	4637      	mov	r7, r6
 8009046:	42bb      	cmp	r3, r7
 8009048:	460e      	mov	r6, r1
 800904a:	d9f4      	bls.n	8009036 <_printf_i+0x11a>
 800904c:	2b08      	cmp	r3, #8
 800904e:	d10b      	bne.n	8009068 <_printf_i+0x14c>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	07de      	lsls	r6, r3, #31
 8009054:	d508      	bpl.n	8009068 <_printf_i+0x14c>
 8009056:	6923      	ldr	r3, [r4, #16]
 8009058:	6861      	ldr	r1, [r4, #4]
 800905a:	4299      	cmp	r1, r3
 800905c:	bfde      	ittt	le
 800905e:	2330      	movle	r3, #48	; 0x30
 8009060:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009064:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009068:	1b52      	subs	r2, r2, r5
 800906a:	6122      	str	r2, [r4, #16]
 800906c:	f8cd a000 	str.w	sl, [sp]
 8009070:	464b      	mov	r3, r9
 8009072:	aa03      	add	r2, sp, #12
 8009074:	4621      	mov	r1, r4
 8009076:	4640      	mov	r0, r8
 8009078:	f7ff fee2 	bl	8008e40 <_printf_common>
 800907c:	3001      	adds	r0, #1
 800907e:	d14c      	bne.n	800911a <_printf_i+0x1fe>
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	b004      	add	sp, #16
 8009086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800908a:	4835      	ldr	r0, [pc, #212]	; (8009160 <_printf_i+0x244>)
 800908c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009090:	6829      	ldr	r1, [r5, #0]
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	f851 6b04 	ldr.w	r6, [r1], #4
 8009098:	6029      	str	r1, [r5, #0]
 800909a:	061d      	lsls	r5, r3, #24
 800909c:	d514      	bpl.n	80090c8 <_printf_i+0x1ac>
 800909e:	07df      	lsls	r7, r3, #31
 80090a0:	bf44      	itt	mi
 80090a2:	f043 0320 	orrmi.w	r3, r3, #32
 80090a6:	6023      	strmi	r3, [r4, #0]
 80090a8:	b91e      	cbnz	r6, 80090b2 <_printf_i+0x196>
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	f023 0320 	bic.w	r3, r3, #32
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	2310      	movs	r3, #16
 80090b4:	e7b0      	b.n	8009018 <_printf_i+0xfc>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	f043 0320 	orr.w	r3, r3, #32
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	2378      	movs	r3, #120	; 0x78
 80090c0:	4828      	ldr	r0, [pc, #160]	; (8009164 <_printf_i+0x248>)
 80090c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090c6:	e7e3      	b.n	8009090 <_printf_i+0x174>
 80090c8:	0659      	lsls	r1, r3, #25
 80090ca:	bf48      	it	mi
 80090cc:	b2b6      	uxthmi	r6, r6
 80090ce:	e7e6      	b.n	800909e <_printf_i+0x182>
 80090d0:	4615      	mov	r5, r2
 80090d2:	e7bb      	b.n	800904c <_printf_i+0x130>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	6826      	ldr	r6, [r4, #0]
 80090d8:	6961      	ldr	r1, [r4, #20]
 80090da:	1d18      	adds	r0, r3, #4
 80090dc:	6028      	str	r0, [r5, #0]
 80090de:	0635      	lsls	r5, r6, #24
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	d501      	bpl.n	80090e8 <_printf_i+0x1cc>
 80090e4:	6019      	str	r1, [r3, #0]
 80090e6:	e002      	b.n	80090ee <_printf_i+0x1d2>
 80090e8:	0670      	lsls	r0, r6, #25
 80090ea:	d5fb      	bpl.n	80090e4 <_printf_i+0x1c8>
 80090ec:	8019      	strh	r1, [r3, #0]
 80090ee:	2300      	movs	r3, #0
 80090f0:	6123      	str	r3, [r4, #16]
 80090f2:	4615      	mov	r5, r2
 80090f4:	e7ba      	b.n	800906c <_printf_i+0x150>
 80090f6:	682b      	ldr	r3, [r5, #0]
 80090f8:	1d1a      	adds	r2, r3, #4
 80090fa:	602a      	str	r2, [r5, #0]
 80090fc:	681d      	ldr	r5, [r3, #0]
 80090fe:	6862      	ldr	r2, [r4, #4]
 8009100:	2100      	movs	r1, #0
 8009102:	4628      	mov	r0, r5
 8009104:	f7f7 f88c 	bl	8000220 <memchr>
 8009108:	b108      	cbz	r0, 800910e <_printf_i+0x1f2>
 800910a:	1b40      	subs	r0, r0, r5
 800910c:	6060      	str	r0, [r4, #4]
 800910e:	6863      	ldr	r3, [r4, #4]
 8009110:	6123      	str	r3, [r4, #16]
 8009112:	2300      	movs	r3, #0
 8009114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009118:	e7a8      	b.n	800906c <_printf_i+0x150>
 800911a:	6923      	ldr	r3, [r4, #16]
 800911c:	462a      	mov	r2, r5
 800911e:	4649      	mov	r1, r9
 8009120:	4640      	mov	r0, r8
 8009122:	47d0      	blx	sl
 8009124:	3001      	adds	r0, #1
 8009126:	d0ab      	beq.n	8009080 <_printf_i+0x164>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	079b      	lsls	r3, r3, #30
 800912c:	d413      	bmi.n	8009156 <_printf_i+0x23a>
 800912e:	68e0      	ldr	r0, [r4, #12]
 8009130:	9b03      	ldr	r3, [sp, #12]
 8009132:	4298      	cmp	r0, r3
 8009134:	bfb8      	it	lt
 8009136:	4618      	movlt	r0, r3
 8009138:	e7a4      	b.n	8009084 <_printf_i+0x168>
 800913a:	2301      	movs	r3, #1
 800913c:	4632      	mov	r2, r6
 800913e:	4649      	mov	r1, r9
 8009140:	4640      	mov	r0, r8
 8009142:	47d0      	blx	sl
 8009144:	3001      	adds	r0, #1
 8009146:	d09b      	beq.n	8009080 <_printf_i+0x164>
 8009148:	3501      	adds	r5, #1
 800914a:	68e3      	ldr	r3, [r4, #12]
 800914c:	9903      	ldr	r1, [sp, #12]
 800914e:	1a5b      	subs	r3, r3, r1
 8009150:	42ab      	cmp	r3, r5
 8009152:	dcf2      	bgt.n	800913a <_printf_i+0x21e>
 8009154:	e7eb      	b.n	800912e <_printf_i+0x212>
 8009156:	2500      	movs	r5, #0
 8009158:	f104 0619 	add.w	r6, r4, #25
 800915c:	e7f5      	b.n	800914a <_printf_i+0x22e>
 800915e:	bf00      	nop
 8009160:	0800b3ac 	.word	0x0800b3ac
 8009164:	0800b3bd 	.word	0x0800b3bd

08009168 <_sbrk_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d06      	ldr	r5, [pc, #24]	; (8009184 <_sbrk_r+0x1c>)
 800916c:	2300      	movs	r3, #0
 800916e:	4604      	mov	r4, r0
 8009170:	4608      	mov	r0, r1
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	f7f9 f94a 	bl	800240c <_sbrk>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_sbrk_r+0x1a>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_sbrk_r+0x1a>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	2000076c 	.word	0x2000076c

08009188 <strcpy>:
 8009188:	4603      	mov	r3, r0
 800918a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800918e:	f803 2b01 	strb.w	r2, [r3], #1
 8009192:	2a00      	cmp	r2, #0
 8009194:	d1f9      	bne.n	800918a <strcpy+0x2>
 8009196:	4770      	bx	lr

08009198 <__assert_func>:
 8009198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800919a:	4614      	mov	r4, r2
 800919c:	461a      	mov	r2, r3
 800919e:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <__assert_func+0x2c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4605      	mov	r5, r0
 80091a4:	68d8      	ldr	r0, [r3, #12]
 80091a6:	b14c      	cbz	r4, 80091bc <__assert_func+0x24>
 80091a8:	4b07      	ldr	r3, [pc, #28]	; (80091c8 <__assert_func+0x30>)
 80091aa:	9100      	str	r1, [sp, #0]
 80091ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091b0:	4906      	ldr	r1, [pc, #24]	; (80091cc <__assert_func+0x34>)
 80091b2:	462b      	mov	r3, r5
 80091b4:	f000 fe8a 	bl	8009ecc <fiprintf>
 80091b8:	f001 f914 	bl	800a3e4 <abort>
 80091bc:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <__assert_func+0x38>)
 80091be:	461c      	mov	r4, r3
 80091c0:	e7f3      	b.n	80091aa <__assert_func+0x12>
 80091c2:	bf00      	nop
 80091c4:	20000014 	.word	0x20000014
 80091c8:	0800b3ce 	.word	0x0800b3ce
 80091cc:	0800b3db 	.word	0x0800b3db
 80091d0:	0800b409 	.word	0x0800b409

080091d4 <quorem>:
 80091d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	6903      	ldr	r3, [r0, #16]
 80091da:	690c      	ldr	r4, [r1, #16]
 80091dc:	42a3      	cmp	r3, r4
 80091de:	4607      	mov	r7, r0
 80091e0:	f2c0 8081 	blt.w	80092e6 <quorem+0x112>
 80091e4:	3c01      	subs	r4, #1
 80091e6:	f101 0814 	add.w	r8, r1, #20
 80091ea:	f100 0514 	add.w	r5, r0, #20
 80091ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091f2:	9301      	str	r3, [sp, #4]
 80091f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091fc:	3301      	adds	r3, #1
 80091fe:	429a      	cmp	r2, r3
 8009200:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009204:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009208:	fbb2 f6f3 	udiv	r6, r2, r3
 800920c:	d331      	bcc.n	8009272 <quorem+0x9e>
 800920e:	f04f 0e00 	mov.w	lr, #0
 8009212:	4640      	mov	r0, r8
 8009214:	46ac      	mov	ip, r5
 8009216:	46f2      	mov	sl, lr
 8009218:	f850 2b04 	ldr.w	r2, [r0], #4
 800921c:	b293      	uxth	r3, r2
 800921e:	fb06 e303 	mla	r3, r6, r3, lr
 8009222:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009226:	b29b      	uxth	r3, r3
 8009228:	ebaa 0303 	sub.w	r3, sl, r3
 800922c:	f8dc a000 	ldr.w	sl, [ip]
 8009230:	0c12      	lsrs	r2, r2, #16
 8009232:	fa13 f38a 	uxtah	r3, r3, sl
 8009236:	fb06 e202 	mla	r2, r6, r2, lr
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	9b00      	ldr	r3, [sp, #0]
 800923e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009242:	b292      	uxth	r2, r2
 8009244:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009248:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800924c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009250:	4581      	cmp	r9, r0
 8009252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009256:	f84c 3b04 	str.w	r3, [ip], #4
 800925a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800925e:	d2db      	bcs.n	8009218 <quorem+0x44>
 8009260:	f855 300b 	ldr.w	r3, [r5, fp]
 8009264:	b92b      	cbnz	r3, 8009272 <quorem+0x9e>
 8009266:	9b01      	ldr	r3, [sp, #4]
 8009268:	3b04      	subs	r3, #4
 800926a:	429d      	cmp	r5, r3
 800926c:	461a      	mov	r2, r3
 800926e:	d32e      	bcc.n	80092ce <quorem+0xfa>
 8009270:	613c      	str	r4, [r7, #16]
 8009272:	4638      	mov	r0, r7
 8009274:	f7ff fc1a 	bl	8008aac <__mcmp>
 8009278:	2800      	cmp	r0, #0
 800927a:	db24      	blt.n	80092c6 <quorem+0xf2>
 800927c:	3601      	adds	r6, #1
 800927e:	4628      	mov	r0, r5
 8009280:	f04f 0c00 	mov.w	ip, #0
 8009284:	f858 2b04 	ldr.w	r2, [r8], #4
 8009288:	f8d0 e000 	ldr.w	lr, [r0]
 800928c:	b293      	uxth	r3, r2
 800928e:	ebac 0303 	sub.w	r3, ip, r3
 8009292:	0c12      	lsrs	r2, r2, #16
 8009294:	fa13 f38e 	uxtah	r3, r3, lr
 8009298:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800929c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a6:	45c1      	cmp	r9, r8
 80092a8:	f840 3b04 	str.w	r3, [r0], #4
 80092ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80092b0:	d2e8      	bcs.n	8009284 <quorem+0xb0>
 80092b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092ba:	b922      	cbnz	r2, 80092c6 <quorem+0xf2>
 80092bc:	3b04      	subs	r3, #4
 80092be:	429d      	cmp	r5, r3
 80092c0:	461a      	mov	r2, r3
 80092c2:	d30a      	bcc.n	80092da <quorem+0x106>
 80092c4:	613c      	str	r4, [r7, #16]
 80092c6:	4630      	mov	r0, r6
 80092c8:	b003      	add	sp, #12
 80092ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ce:	6812      	ldr	r2, [r2, #0]
 80092d0:	3b04      	subs	r3, #4
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	d1cc      	bne.n	8009270 <quorem+0x9c>
 80092d6:	3c01      	subs	r4, #1
 80092d8:	e7c7      	b.n	800926a <quorem+0x96>
 80092da:	6812      	ldr	r2, [r2, #0]
 80092dc:	3b04      	subs	r3, #4
 80092de:	2a00      	cmp	r2, #0
 80092e0:	d1f0      	bne.n	80092c4 <quorem+0xf0>
 80092e2:	3c01      	subs	r4, #1
 80092e4:	e7eb      	b.n	80092be <quorem+0xea>
 80092e6:	2000      	movs	r0, #0
 80092e8:	e7ee      	b.n	80092c8 <quorem+0xf4>
 80092ea:	0000      	movs	r0, r0
 80092ec:	0000      	movs	r0, r0
	...

080092f0 <_dtoa_r>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	ed2d 8b04 	vpush	{d8-d9}
 80092f8:	ec57 6b10 	vmov	r6, r7, d0
 80092fc:	b093      	sub	sp, #76	; 0x4c
 80092fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009300:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009304:	9106      	str	r1, [sp, #24]
 8009306:	ee10 aa10 	vmov	sl, s0
 800930a:	4604      	mov	r4, r0
 800930c:	9209      	str	r2, [sp, #36]	; 0x24
 800930e:	930c      	str	r3, [sp, #48]	; 0x30
 8009310:	46bb      	mov	fp, r7
 8009312:	b975      	cbnz	r5, 8009332 <_dtoa_r+0x42>
 8009314:	2010      	movs	r0, #16
 8009316:	f000 fdeb 	bl	8009ef0 <malloc>
 800931a:	4602      	mov	r2, r0
 800931c:	6260      	str	r0, [r4, #36]	; 0x24
 800931e:	b920      	cbnz	r0, 800932a <_dtoa_r+0x3a>
 8009320:	4ba7      	ldr	r3, [pc, #668]	; (80095c0 <_dtoa_r+0x2d0>)
 8009322:	21ea      	movs	r1, #234	; 0xea
 8009324:	48a7      	ldr	r0, [pc, #668]	; (80095c4 <_dtoa_r+0x2d4>)
 8009326:	f7ff ff37 	bl	8009198 <__assert_func>
 800932a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800932e:	6005      	str	r5, [r0, #0]
 8009330:	60c5      	str	r5, [r0, #12]
 8009332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009334:	6819      	ldr	r1, [r3, #0]
 8009336:	b151      	cbz	r1, 800934e <_dtoa_r+0x5e>
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	604a      	str	r2, [r1, #4]
 800933c:	2301      	movs	r3, #1
 800933e:	4093      	lsls	r3, r2
 8009340:	608b      	str	r3, [r1, #8]
 8009342:	4620      	mov	r0, r4
 8009344:	f7ff f970 	bl	8008628 <_Bfree>
 8009348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	1e3b      	subs	r3, r7, #0
 8009350:	bfaa      	itet	ge
 8009352:	2300      	movge	r3, #0
 8009354:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009358:	f8c8 3000 	strge.w	r3, [r8]
 800935c:	4b9a      	ldr	r3, [pc, #616]	; (80095c8 <_dtoa_r+0x2d8>)
 800935e:	bfbc      	itt	lt
 8009360:	2201      	movlt	r2, #1
 8009362:	f8c8 2000 	strlt.w	r2, [r8]
 8009366:	ea33 030b 	bics.w	r3, r3, fp
 800936a:	d11b      	bne.n	80093a4 <_dtoa_r+0xb4>
 800936c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800936e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009378:	4333      	orrs	r3, r6
 800937a:	f000 8592 	beq.w	8009ea2 <_dtoa_r+0xbb2>
 800937e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009380:	b963      	cbnz	r3, 800939c <_dtoa_r+0xac>
 8009382:	4b92      	ldr	r3, [pc, #584]	; (80095cc <_dtoa_r+0x2dc>)
 8009384:	e022      	b.n	80093cc <_dtoa_r+0xdc>
 8009386:	4b92      	ldr	r3, [pc, #584]	; (80095d0 <_dtoa_r+0x2e0>)
 8009388:	9301      	str	r3, [sp, #4]
 800938a:	3308      	adds	r3, #8
 800938c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	9801      	ldr	r0, [sp, #4]
 8009392:	b013      	add	sp, #76	; 0x4c
 8009394:	ecbd 8b04 	vpop	{d8-d9}
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939c:	4b8b      	ldr	r3, [pc, #556]	; (80095cc <_dtoa_r+0x2dc>)
 800939e:	9301      	str	r3, [sp, #4]
 80093a0:	3303      	adds	r3, #3
 80093a2:	e7f3      	b.n	800938c <_dtoa_r+0x9c>
 80093a4:	2200      	movs	r2, #0
 80093a6:	2300      	movs	r3, #0
 80093a8:	4650      	mov	r0, sl
 80093aa:	4659      	mov	r1, fp
 80093ac:	f7f7 fbac 	bl	8000b08 <__aeabi_dcmpeq>
 80093b0:	ec4b ab19 	vmov	d9, sl, fp
 80093b4:	4680      	mov	r8, r0
 80093b6:	b158      	cbz	r0, 80093d0 <_dtoa_r+0xe0>
 80093b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093ba:	2301      	movs	r3, #1
 80093bc:	6013      	str	r3, [r2, #0]
 80093be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 856b 	beq.w	8009e9c <_dtoa_r+0xbac>
 80093c6:	4883      	ldr	r0, [pc, #524]	; (80095d4 <_dtoa_r+0x2e4>)
 80093c8:	6018      	str	r0, [r3, #0]
 80093ca:	1e43      	subs	r3, r0, #1
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	e7df      	b.n	8009390 <_dtoa_r+0xa0>
 80093d0:	ec4b ab10 	vmov	d0, sl, fp
 80093d4:	aa10      	add	r2, sp, #64	; 0x40
 80093d6:	a911      	add	r1, sp, #68	; 0x44
 80093d8:	4620      	mov	r0, r4
 80093da:	f7ff fc0d 	bl	8008bf8 <__d2b>
 80093de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80093e2:	ee08 0a10 	vmov	s16, r0
 80093e6:	2d00      	cmp	r5, #0
 80093e8:	f000 8084 	beq.w	80094f4 <_dtoa_r+0x204>
 80093ec:	ee19 3a90 	vmov	r3, s19
 80093f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80093f8:	4656      	mov	r6, sl
 80093fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80093fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009402:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009406:	4b74      	ldr	r3, [pc, #464]	; (80095d8 <_dtoa_r+0x2e8>)
 8009408:	2200      	movs	r2, #0
 800940a:	4630      	mov	r0, r6
 800940c:	4639      	mov	r1, r7
 800940e:	f7f6 ff5b 	bl	80002c8 <__aeabi_dsub>
 8009412:	a365      	add	r3, pc, #404	; (adr r3, 80095a8 <_dtoa_r+0x2b8>)
 8009414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009418:	f7f7 f90e 	bl	8000638 <__aeabi_dmul>
 800941c:	a364      	add	r3, pc, #400	; (adr r3, 80095b0 <_dtoa_r+0x2c0>)
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	f7f6 ff53 	bl	80002cc <__adddf3>
 8009426:	4606      	mov	r6, r0
 8009428:	4628      	mov	r0, r5
 800942a:	460f      	mov	r7, r1
 800942c:	f7f7 f89a 	bl	8000564 <__aeabi_i2d>
 8009430:	a361      	add	r3, pc, #388	; (adr r3, 80095b8 <_dtoa_r+0x2c8>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	f7f7 f8ff 	bl	8000638 <__aeabi_dmul>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4630      	mov	r0, r6
 8009440:	4639      	mov	r1, r7
 8009442:	f7f6 ff43 	bl	80002cc <__adddf3>
 8009446:	4606      	mov	r6, r0
 8009448:	460f      	mov	r7, r1
 800944a:	f7f7 fb8f 	bl	8000b6c <__aeabi_d2iz>
 800944e:	2200      	movs	r2, #0
 8009450:	9000      	str	r0, [sp, #0]
 8009452:	2300      	movs	r3, #0
 8009454:	4630      	mov	r0, r6
 8009456:	4639      	mov	r1, r7
 8009458:	f7f7 fb60 	bl	8000b1c <__aeabi_dcmplt>
 800945c:	b150      	cbz	r0, 8009474 <_dtoa_r+0x184>
 800945e:	9800      	ldr	r0, [sp, #0]
 8009460:	f7f7 f880 	bl	8000564 <__aeabi_i2d>
 8009464:	4632      	mov	r2, r6
 8009466:	463b      	mov	r3, r7
 8009468:	f7f7 fb4e 	bl	8000b08 <__aeabi_dcmpeq>
 800946c:	b910      	cbnz	r0, 8009474 <_dtoa_r+0x184>
 800946e:	9b00      	ldr	r3, [sp, #0]
 8009470:	3b01      	subs	r3, #1
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	9b00      	ldr	r3, [sp, #0]
 8009476:	2b16      	cmp	r3, #22
 8009478:	d85a      	bhi.n	8009530 <_dtoa_r+0x240>
 800947a:	9a00      	ldr	r2, [sp, #0]
 800947c:	4b57      	ldr	r3, [pc, #348]	; (80095dc <_dtoa_r+0x2ec>)
 800947e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	ec51 0b19 	vmov	r0, r1, d9
 800948a:	f7f7 fb47 	bl	8000b1c <__aeabi_dcmplt>
 800948e:	2800      	cmp	r0, #0
 8009490:	d050      	beq.n	8009534 <_dtoa_r+0x244>
 8009492:	9b00      	ldr	r3, [sp, #0]
 8009494:	3b01      	subs	r3, #1
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	2300      	movs	r3, #0
 800949a:	930b      	str	r3, [sp, #44]	; 0x2c
 800949c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800949e:	1b5d      	subs	r5, r3, r5
 80094a0:	1e6b      	subs	r3, r5, #1
 80094a2:	9305      	str	r3, [sp, #20]
 80094a4:	bf45      	ittet	mi
 80094a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80094aa:	9304      	strmi	r3, [sp, #16]
 80094ac:	2300      	movpl	r3, #0
 80094ae:	2300      	movmi	r3, #0
 80094b0:	bf4c      	ite	mi
 80094b2:	9305      	strmi	r3, [sp, #20]
 80094b4:	9304      	strpl	r3, [sp, #16]
 80094b6:	9b00      	ldr	r3, [sp, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	db3d      	blt.n	8009538 <_dtoa_r+0x248>
 80094bc:	9b05      	ldr	r3, [sp, #20]
 80094be:	9a00      	ldr	r2, [sp, #0]
 80094c0:	920a      	str	r2, [sp, #40]	; 0x28
 80094c2:	4413      	add	r3, r2
 80094c4:	9305      	str	r3, [sp, #20]
 80094c6:	2300      	movs	r3, #0
 80094c8:	9307      	str	r3, [sp, #28]
 80094ca:	9b06      	ldr	r3, [sp, #24]
 80094cc:	2b09      	cmp	r3, #9
 80094ce:	f200 8089 	bhi.w	80095e4 <_dtoa_r+0x2f4>
 80094d2:	2b05      	cmp	r3, #5
 80094d4:	bfc4      	itt	gt
 80094d6:	3b04      	subgt	r3, #4
 80094d8:	9306      	strgt	r3, [sp, #24]
 80094da:	9b06      	ldr	r3, [sp, #24]
 80094dc:	f1a3 0302 	sub.w	r3, r3, #2
 80094e0:	bfcc      	ite	gt
 80094e2:	2500      	movgt	r5, #0
 80094e4:	2501      	movle	r5, #1
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	f200 8087 	bhi.w	80095fa <_dtoa_r+0x30a>
 80094ec:	e8df f003 	tbb	[pc, r3]
 80094f0:	59383a2d 	.word	0x59383a2d
 80094f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80094f8:	441d      	add	r5, r3
 80094fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80094fe:	2b20      	cmp	r3, #32
 8009500:	bfc1      	itttt	gt
 8009502:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009506:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800950a:	fa0b f303 	lslgt.w	r3, fp, r3
 800950e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009512:	bfda      	itte	le
 8009514:	f1c3 0320 	rsble	r3, r3, #32
 8009518:	fa06 f003 	lslle.w	r0, r6, r3
 800951c:	4318      	orrgt	r0, r3
 800951e:	f7f7 f811 	bl	8000544 <__aeabi_ui2d>
 8009522:	2301      	movs	r3, #1
 8009524:	4606      	mov	r6, r0
 8009526:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800952a:	3d01      	subs	r5, #1
 800952c:	930e      	str	r3, [sp, #56]	; 0x38
 800952e:	e76a      	b.n	8009406 <_dtoa_r+0x116>
 8009530:	2301      	movs	r3, #1
 8009532:	e7b2      	b.n	800949a <_dtoa_r+0x1aa>
 8009534:	900b      	str	r0, [sp, #44]	; 0x2c
 8009536:	e7b1      	b.n	800949c <_dtoa_r+0x1ac>
 8009538:	9b04      	ldr	r3, [sp, #16]
 800953a:	9a00      	ldr	r2, [sp, #0]
 800953c:	1a9b      	subs	r3, r3, r2
 800953e:	9304      	str	r3, [sp, #16]
 8009540:	4253      	negs	r3, r2
 8009542:	9307      	str	r3, [sp, #28]
 8009544:	2300      	movs	r3, #0
 8009546:	930a      	str	r3, [sp, #40]	; 0x28
 8009548:	e7bf      	b.n	80094ca <_dtoa_r+0x1da>
 800954a:	2300      	movs	r3, #0
 800954c:	9308      	str	r3, [sp, #32]
 800954e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009550:	2b00      	cmp	r3, #0
 8009552:	dc55      	bgt.n	8009600 <_dtoa_r+0x310>
 8009554:	2301      	movs	r3, #1
 8009556:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800955a:	461a      	mov	r2, r3
 800955c:	9209      	str	r2, [sp, #36]	; 0x24
 800955e:	e00c      	b.n	800957a <_dtoa_r+0x28a>
 8009560:	2301      	movs	r3, #1
 8009562:	e7f3      	b.n	800954c <_dtoa_r+0x25c>
 8009564:	2300      	movs	r3, #0
 8009566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009568:	9308      	str	r3, [sp, #32]
 800956a:	9b00      	ldr	r3, [sp, #0]
 800956c:	4413      	add	r3, r2
 800956e:	9302      	str	r3, [sp, #8]
 8009570:	3301      	adds	r3, #1
 8009572:	2b01      	cmp	r3, #1
 8009574:	9303      	str	r3, [sp, #12]
 8009576:	bfb8      	it	lt
 8009578:	2301      	movlt	r3, #1
 800957a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800957c:	2200      	movs	r2, #0
 800957e:	6042      	str	r2, [r0, #4]
 8009580:	2204      	movs	r2, #4
 8009582:	f102 0614 	add.w	r6, r2, #20
 8009586:	429e      	cmp	r6, r3
 8009588:	6841      	ldr	r1, [r0, #4]
 800958a:	d93d      	bls.n	8009608 <_dtoa_r+0x318>
 800958c:	4620      	mov	r0, r4
 800958e:	f7ff f80b 	bl	80085a8 <_Balloc>
 8009592:	9001      	str	r0, [sp, #4]
 8009594:	2800      	cmp	r0, #0
 8009596:	d13b      	bne.n	8009610 <_dtoa_r+0x320>
 8009598:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <_dtoa_r+0x2f0>)
 800959a:	4602      	mov	r2, r0
 800959c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80095a0:	e6c0      	b.n	8009324 <_dtoa_r+0x34>
 80095a2:	2301      	movs	r3, #1
 80095a4:	e7df      	b.n	8009566 <_dtoa_r+0x276>
 80095a6:	bf00      	nop
 80095a8:	636f4361 	.word	0x636f4361
 80095ac:	3fd287a7 	.word	0x3fd287a7
 80095b0:	8b60c8b3 	.word	0x8b60c8b3
 80095b4:	3fc68a28 	.word	0x3fc68a28
 80095b8:	509f79fb 	.word	0x509f79fb
 80095bc:	3fd34413 	.word	0x3fd34413
 80095c0:	0800b228 	.word	0x0800b228
 80095c4:	0800b419 	.word	0x0800b419
 80095c8:	7ff00000 	.word	0x7ff00000
 80095cc:	0800b413 	.word	0x0800b413
 80095d0:	0800b40a 	.word	0x0800b40a
 80095d4:	0800b418 	.word	0x0800b418
 80095d8:	3ff80000 	.word	0x3ff80000
 80095dc:	0800b2d8 	.word	0x0800b2d8
 80095e0:	0800b29b 	.word	0x0800b29b
 80095e4:	2501      	movs	r5, #1
 80095e6:	2300      	movs	r3, #0
 80095e8:	9306      	str	r3, [sp, #24]
 80095ea:	9508      	str	r5, [sp, #32]
 80095ec:	f04f 33ff 	mov.w	r3, #4294967295
 80095f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80095f4:	2200      	movs	r2, #0
 80095f6:	2312      	movs	r3, #18
 80095f8:	e7b0      	b.n	800955c <_dtoa_r+0x26c>
 80095fa:	2301      	movs	r3, #1
 80095fc:	9308      	str	r3, [sp, #32]
 80095fe:	e7f5      	b.n	80095ec <_dtoa_r+0x2fc>
 8009600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009602:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009606:	e7b8      	b.n	800957a <_dtoa_r+0x28a>
 8009608:	3101      	adds	r1, #1
 800960a:	6041      	str	r1, [r0, #4]
 800960c:	0052      	lsls	r2, r2, #1
 800960e:	e7b8      	b.n	8009582 <_dtoa_r+0x292>
 8009610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009612:	9a01      	ldr	r2, [sp, #4]
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	9b03      	ldr	r3, [sp, #12]
 8009618:	2b0e      	cmp	r3, #14
 800961a:	f200 809d 	bhi.w	8009758 <_dtoa_r+0x468>
 800961e:	2d00      	cmp	r5, #0
 8009620:	f000 809a 	beq.w	8009758 <_dtoa_r+0x468>
 8009624:	9b00      	ldr	r3, [sp, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	dd32      	ble.n	8009690 <_dtoa_r+0x3a0>
 800962a:	4ab7      	ldr	r2, [pc, #732]	; (8009908 <_dtoa_r+0x618>)
 800962c:	f003 030f 	and.w	r3, r3, #15
 8009630:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009634:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009638:	9b00      	ldr	r3, [sp, #0]
 800963a:	05d8      	lsls	r0, r3, #23
 800963c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009640:	d516      	bpl.n	8009670 <_dtoa_r+0x380>
 8009642:	4bb2      	ldr	r3, [pc, #712]	; (800990c <_dtoa_r+0x61c>)
 8009644:	ec51 0b19 	vmov	r0, r1, d9
 8009648:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800964c:	f7f7 f91e 	bl	800088c <__aeabi_ddiv>
 8009650:	f007 070f 	and.w	r7, r7, #15
 8009654:	4682      	mov	sl, r0
 8009656:	468b      	mov	fp, r1
 8009658:	2503      	movs	r5, #3
 800965a:	4eac      	ldr	r6, [pc, #688]	; (800990c <_dtoa_r+0x61c>)
 800965c:	b957      	cbnz	r7, 8009674 <_dtoa_r+0x384>
 800965e:	4642      	mov	r2, r8
 8009660:	464b      	mov	r3, r9
 8009662:	4650      	mov	r0, sl
 8009664:	4659      	mov	r1, fp
 8009666:	f7f7 f911 	bl	800088c <__aeabi_ddiv>
 800966a:	4682      	mov	sl, r0
 800966c:	468b      	mov	fp, r1
 800966e:	e028      	b.n	80096c2 <_dtoa_r+0x3d2>
 8009670:	2502      	movs	r5, #2
 8009672:	e7f2      	b.n	800965a <_dtoa_r+0x36a>
 8009674:	07f9      	lsls	r1, r7, #31
 8009676:	d508      	bpl.n	800968a <_dtoa_r+0x39a>
 8009678:	4640      	mov	r0, r8
 800967a:	4649      	mov	r1, r9
 800967c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009680:	f7f6 ffda 	bl	8000638 <__aeabi_dmul>
 8009684:	3501      	adds	r5, #1
 8009686:	4680      	mov	r8, r0
 8009688:	4689      	mov	r9, r1
 800968a:	107f      	asrs	r7, r7, #1
 800968c:	3608      	adds	r6, #8
 800968e:	e7e5      	b.n	800965c <_dtoa_r+0x36c>
 8009690:	f000 809b 	beq.w	80097ca <_dtoa_r+0x4da>
 8009694:	9b00      	ldr	r3, [sp, #0]
 8009696:	4f9d      	ldr	r7, [pc, #628]	; (800990c <_dtoa_r+0x61c>)
 8009698:	425e      	negs	r6, r3
 800969a:	4b9b      	ldr	r3, [pc, #620]	; (8009908 <_dtoa_r+0x618>)
 800969c:	f006 020f 	and.w	r2, r6, #15
 80096a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	ec51 0b19 	vmov	r0, r1, d9
 80096ac:	f7f6 ffc4 	bl	8000638 <__aeabi_dmul>
 80096b0:	1136      	asrs	r6, r6, #4
 80096b2:	4682      	mov	sl, r0
 80096b4:	468b      	mov	fp, r1
 80096b6:	2300      	movs	r3, #0
 80096b8:	2502      	movs	r5, #2
 80096ba:	2e00      	cmp	r6, #0
 80096bc:	d17a      	bne.n	80097b4 <_dtoa_r+0x4c4>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1d3      	bne.n	800966a <_dtoa_r+0x37a>
 80096c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 8082 	beq.w	80097ce <_dtoa_r+0x4de>
 80096ca:	4b91      	ldr	r3, [pc, #580]	; (8009910 <_dtoa_r+0x620>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	4650      	mov	r0, sl
 80096d0:	4659      	mov	r1, fp
 80096d2:	f7f7 fa23 	bl	8000b1c <__aeabi_dcmplt>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d079      	beq.n	80097ce <_dtoa_r+0x4de>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d076      	beq.n	80097ce <_dtoa_r+0x4de>
 80096e0:	9b02      	ldr	r3, [sp, #8]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	dd36      	ble.n	8009754 <_dtoa_r+0x464>
 80096e6:	9b00      	ldr	r3, [sp, #0]
 80096e8:	4650      	mov	r0, sl
 80096ea:	4659      	mov	r1, fp
 80096ec:	1e5f      	subs	r7, r3, #1
 80096ee:	2200      	movs	r2, #0
 80096f0:	4b88      	ldr	r3, [pc, #544]	; (8009914 <_dtoa_r+0x624>)
 80096f2:	f7f6 ffa1 	bl	8000638 <__aeabi_dmul>
 80096f6:	9e02      	ldr	r6, [sp, #8]
 80096f8:	4682      	mov	sl, r0
 80096fa:	468b      	mov	fp, r1
 80096fc:	3501      	adds	r5, #1
 80096fe:	4628      	mov	r0, r5
 8009700:	f7f6 ff30 	bl	8000564 <__aeabi_i2d>
 8009704:	4652      	mov	r2, sl
 8009706:	465b      	mov	r3, fp
 8009708:	f7f6 ff96 	bl	8000638 <__aeabi_dmul>
 800970c:	4b82      	ldr	r3, [pc, #520]	; (8009918 <_dtoa_r+0x628>)
 800970e:	2200      	movs	r2, #0
 8009710:	f7f6 fddc 	bl	80002cc <__adddf3>
 8009714:	46d0      	mov	r8, sl
 8009716:	46d9      	mov	r9, fp
 8009718:	4682      	mov	sl, r0
 800971a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800971e:	2e00      	cmp	r6, #0
 8009720:	d158      	bne.n	80097d4 <_dtoa_r+0x4e4>
 8009722:	4b7e      	ldr	r3, [pc, #504]	; (800991c <_dtoa_r+0x62c>)
 8009724:	2200      	movs	r2, #0
 8009726:	4640      	mov	r0, r8
 8009728:	4649      	mov	r1, r9
 800972a:	f7f6 fdcd 	bl	80002c8 <__aeabi_dsub>
 800972e:	4652      	mov	r2, sl
 8009730:	465b      	mov	r3, fp
 8009732:	4680      	mov	r8, r0
 8009734:	4689      	mov	r9, r1
 8009736:	f7f7 fa0f 	bl	8000b58 <__aeabi_dcmpgt>
 800973a:	2800      	cmp	r0, #0
 800973c:	f040 8295 	bne.w	8009c6a <_dtoa_r+0x97a>
 8009740:	4652      	mov	r2, sl
 8009742:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009746:	4640      	mov	r0, r8
 8009748:	4649      	mov	r1, r9
 800974a:	f7f7 f9e7 	bl	8000b1c <__aeabi_dcmplt>
 800974e:	2800      	cmp	r0, #0
 8009750:	f040 8289 	bne.w	8009c66 <_dtoa_r+0x976>
 8009754:	ec5b ab19 	vmov	sl, fp, d9
 8009758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800975a:	2b00      	cmp	r3, #0
 800975c:	f2c0 8148 	blt.w	80099f0 <_dtoa_r+0x700>
 8009760:	9a00      	ldr	r2, [sp, #0]
 8009762:	2a0e      	cmp	r2, #14
 8009764:	f300 8144 	bgt.w	80099f0 <_dtoa_r+0x700>
 8009768:	4b67      	ldr	r3, [pc, #412]	; (8009908 <_dtoa_r+0x618>)
 800976a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800976e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	f280 80d5 	bge.w	8009924 <_dtoa_r+0x634>
 800977a:	9b03      	ldr	r3, [sp, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	f300 80d1 	bgt.w	8009924 <_dtoa_r+0x634>
 8009782:	f040 826f 	bne.w	8009c64 <_dtoa_r+0x974>
 8009786:	4b65      	ldr	r3, [pc, #404]	; (800991c <_dtoa_r+0x62c>)
 8009788:	2200      	movs	r2, #0
 800978a:	4640      	mov	r0, r8
 800978c:	4649      	mov	r1, r9
 800978e:	f7f6 ff53 	bl	8000638 <__aeabi_dmul>
 8009792:	4652      	mov	r2, sl
 8009794:	465b      	mov	r3, fp
 8009796:	f7f7 f9d5 	bl	8000b44 <__aeabi_dcmpge>
 800979a:	9e03      	ldr	r6, [sp, #12]
 800979c:	4637      	mov	r7, r6
 800979e:	2800      	cmp	r0, #0
 80097a0:	f040 8245 	bne.w	8009c2e <_dtoa_r+0x93e>
 80097a4:	9d01      	ldr	r5, [sp, #4]
 80097a6:	2331      	movs	r3, #49	; 0x31
 80097a8:	f805 3b01 	strb.w	r3, [r5], #1
 80097ac:	9b00      	ldr	r3, [sp, #0]
 80097ae:	3301      	adds	r3, #1
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	e240      	b.n	8009c36 <_dtoa_r+0x946>
 80097b4:	07f2      	lsls	r2, r6, #31
 80097b6:	d505      	bpl.n	80097c4 <_dtoa_r+0x4d4>
 80097b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097bc:	f7f6 ff3c 	bl	8000638 <__aeabi_dmul>
 80097c0:	3501      	adds	r5, #1
 80097c2:	2301      	movs	r3, #1
 80097c4:	1076      	asrs	r6, r6, #1
 80097c6:	3708      	adds	r7, #8
 80097c8:	e777      	b.n	80096ba <_dtoa_r+0x3ca>
 80097ca:	2502      	movs	r5, #2
 80097cc:	e779      	b.n	80096c2 <_dtoa_r+0x3d2>
 80097ce:	9f00      	ldr	r7, [sp, #0]
 80097d0:	9e03      	ldr	r6, [sp, #12]
 80097d2:	e794      	b.n	80096fe <_dtoa_r+0x40e>
 80097d4:	9901      	ldr	r1, [sp, #4]
 80097d6:	4b4c      	ldr	r3, [pc, #304]	; (8009908 <_dtoa_r+0x618>)
 80097d8:	4431      	add	r1, r6
 80097da:	910d      	str	r1, [sp, #52]	; 0x34
 80097dc:	9908      	ldr	r1, [sp, #32]
 80097de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80097e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097e6:	2900      	cmp	r1, #0
 80097e8:	d043      	beq.n	8009872 <_dtoa_r+0x582>
 80097ea:	494d      	ldr	r1, [pc, #308]	; (8009920 <_dtoa_r+0x630>)
 80097ec:	2000      	movs	r0, #0
 80097ee:	f7f7 f84d 	bl	800088c <__aeabi_ddiv>
 80097f2:	4652      	mov	r2, sl
 80097f4:	465b      	mov	r3, fp
 80097f6:	f7f6 fd67 	bl	80002c8 <__aeabi_dsub>
 80097fa:	9d01      	ldr	r5, [sp, #4]
 80097fc:	4682      	mov	sl, r0
 80097fe:	468b      	mov	fp, r1
 8009800:	4649      	mov	r1, r9
 8009802:	4640      	mov	r0, r8
 8009804:	f7f7 f9b2 	bl	8000b6c <__aeabi_d2iz>
 8009808:	4606      	mov	r6, r0
 800980a:	f7f6 feab 	bl	8000564 <__aeabi_i2d>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4640      	mov	r0, r8
 8009814:	4649      	mov	r1, r9
 8009816:	f7f6 fd57 	bl	80002c8 <__aeabi_dsub>
 800981a:	3630      	adds	r6, #48	; 0x30
 800981c:	f805 6b01 	strb.w	r6, [r5], #1
 8009820:	4652      	mov	r2, sl
 8009822:	465b      	mov	r3, fp
 8009824:	4680      	mov	r8, r0
 8009826:	4689      	mov	r9, r1
 8009828:	f7f7 f978 	bl	8000b1c <__aeabi_dcmplt>
 800982c:	2800      	cmp	r0, #0
 800982e:	d163      	bne.n	80098f8 <_dtoa_r+0x608>
 8009830:	4642      	mov	r2, r8
 8009832:	464b      	mov	r3, r9
 8009834:	4936      	ldr	r1, [pc, #216]	; (8009910 <_dtoa_r+0x620>)
 8009836:	2000      	movs	r0, #0
 8009838:	f7f6 fd46 	bl	80002c8 <__aeabi_dsub>
 800983c:	4652      	mov	r2, sl
 800983e:	465b      	mov	r3, fp
 8009840:	f7f7 f96c 	bl	8000b1c <__aeabi_dcmplt>
 8009844:	2800      	cmp	r0, #0
 8009846:	f040 80b5 	bne.w	80099b4 <_dtoa_r+0x6c4>
 800984a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800984c:	429d      	cmp	r5, r3
 800984e:	d081      	beq.n	8009754 <_dtoa_r+0x464>
 8009850:	4b30      	ldr	r3, [pc, #192]	; (8009914 <_dtoa_r+0x624>)
 8009852:	2200      	movs	r2, #0
 8009854:	4650      	mov	r0, sl
 8009856:	4659      	mov	r1, fp
 8009858:	f7f6 feee 	bl	8000638 <__aeabi_dmul>
 800985c:	4b2d      	ldr	r3, [pc, #180]	; (8009914 <_dtoa_r+0x624>)
 800985e:	4682      	mov	sl, r0
 8009860:	468b      	mov	fp, r1
 8009862:	4640      	mov	r0, r8
 8009864:	4649      	mov	r1, r9
 8009866:	2200      	movs	r2, #0
 8009868:	f7f6 fee6 	bl	8000638 <__aeabi_dmul>
 800986c:	4680      	mov	r8, r0
 800986e:	4689      	mov	r9, r1
 8009870:	e7c6      	b.n	8009800 <_dtoa_r+0x510>
 8009872:	4650      	mov	r0, sl
 8009874:	4659      	mov	r1, fp
 8009876:	f7f6 fedf 	bl	8000638 <__aeabi_dmul>
 800987a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800987c:	9d01      	ldr	r5, [sp, #4]
 800987e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009880:	4682      	mov	sl, r0
 8009882:	468b      	mov	fp, r1
 8009884:	4649      	mov	r1, r9
 8009886:	4640      	mov	r0, r8
 8009888:	f7f7 f970 	bl	8000b6c <__aeabi_d2iz>
 800988c:	4606      	mov	r6, r0
 800988e:	f7f6 fe69 	bl	8000564 <__aeabi_i2d>
 8009892:	3630      	adds	r6, #48	; 0x30
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4640      	mov	r0, r8
 800989a:	4649      	mov	r1, r9
 800989c:	f7f6 fd14 	bl	80002c8 <__aeabi_dsub>
 80098a0:	f805 6b01 	strb.w	r6, [r5], #1
 80098a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098a6:	429d      	cmp	r5, r3
 80098a8:	4680      	mov	r8, r0
 80098aa:	4689      	mov	r9, r1
 80098ac:	f04f 0200 	mov.w	r2, #0
 80098b0:	d124      	bne.n	80098fc <_dtoa_r+0x60c>
 80098b2:	4b1b      	ldr	r3, [pc, #108]	; (8009920 <_dtoa_r+0x630>)
 80098b4:	4650      	mov	r0, sl
 80098b6:	4659      	mov	r1, fp
 80098b8:	f7f6 fd08 	bl	80002cc <__adddf3>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4640      	mov	r0, r8
 80098c2:	4649      	mov	r1, r9
 80098c4:	f7f7 f948 	bl	8000b58 <__aeabi_dcmpgt>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d173      	bne.n	80099b4 <_dtoa_r+0x6c4>
 80098cc:	4652      	mov	r2, sl
 80098ce:	465b      	mov	r3, fp
 80098d0:	4913      	ldr	r1, [pc, #76]	; (8009920 <_dtoa_r+0x630>)
 80098d2:	2000      	movs	r0, #0
 80098d4:	f7f6 fcf8 	bl	80002c8 <__aeabi_dsub>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	4640      	mov	r0, r8
 80098de:	4649      	mov	r1, r9
 80098e0:	f7f7 f91c 	bl	8000b1c <__aeabi_dcmplt>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	f43f af35 	beq.w	8009754 <_dtoa_r+0x464>
 80098ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80098ec:	1e6b      	subs	r3, r5, #1
 80098ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80098f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80098f4:	2b30      	cmp	r3, #48	; 0x30
 80098f6:	d0f8      	beq.n	80098ea <_dtoa_r+0x5fa>
 80098f8:	9700      	str	r7, [sp, #0]
 80098fa:	e049      	b.n	8009990 <_dtoa_r+0x6a0>
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <_dtoa_r+0x624>)
 80098fe:	f7f6 fe9b 	bl	8000638 <__aeabi_dmul>
 8009902:	4680      	mov	r8, r0
 8009904:	4689      	mov	r9, r1
 8009906:	e7bd      	b.n	8009884 <_dtoa_r+0x594>
 8009908:	0800b2d8 	.word	0x0800b2d8
 800990c:	0800b2b0 	.word	0x0800b2b0
 8009910:	3ff00000 	.word	0x3ff00000
 8009914:	40240000 	.word	0x40240000
 8009918:	401c0000 	.word	0x401c0000
 800991c:	40140000 	.word	0x40140000
 8009920:	3fe00000 	.word	0x3fe00000
 8009924:	9d01      	ldr	r5, [sp, #4]
 8009926:	4656      	mov	r6, sl
 8009928:	465f      	mov	r7, fp
 800992a:	4642      	mov	r2, r8
 800992c:	464b      	mov	r3, r9
 800992e:	4630      	mov	r0, r6
 8009930:	4639      	mov	r1, r7
 8009932:	f7f6 ffab 	bl	800088c <__aeabi_ddiv>
 8009936:	f7f7 f919 	bl	8000b6c <__aeabi_d2iz>
 800993a:	4682      	mov	sl, r0
 800993c:	f7f6 fe12 	bl	8000564 <__aeabi_i2d>
 8009940:	4642      	mov	r2, r8
 8009942:	464b      	mov	r3, r9
 8009944:	f7f6 fe78 	bl	8000638 <__aeabi_dmul>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4630      	mov	r0, r6
 800994e:	4639      	mov	r1, r7
 8009950:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009954:	f7f6 fcb8 	bl	80002c8 <__aeabi_dsub>
 8009958:	f805 6b01 	strb.w	r6, [r5], #1
 800995c:	9e01      	ldr	r6, [sp, #4]
 800995e:	9f03      	ldr	r7, [sp, #12]
 8009960:	1bae      	subs	r6, r5, r6
 8009962:	42b7      	cmp	r7, r6
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	d135      	bne.n	80099d6 <_dtoa_r+0x6e6>
 800996a:	f7f6 fcaf 	bl	80002cc <__adddf3>
 800996e:	4642      	mov	r2, r8
 8009970:	464b      	mov	r3, r9
 8009972:	4606      	mov	r6, r0
 8009974:	460f      	mov	r7, r1
 8009976:	f7f7 f8ef 	bl	8000b58 <__aeabi_dcmpgt>
 800997a:	b9d0      	cbnz	r0, 80099b2 <_dtoa_r+0x6c2>
 800997c:	4642      	mov	r2, r8
 800997e:	464b      	mov	r3, r9
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	f7f7 f8c0 	bl	8000b08 <__aeabi_dcmpeq>
 8009988:	b110      	cbz	r0, 8009990 <_dtoa_r+0x6a0>
 800998a:	f01a 0f01 	tst.w	sl, #1
 800998e:	d110      	bne.n	80099b2 <_dtoa_r+0x6c2>
 8009990:	4620      	mov	r0, r4
 8009992:	ee18 1a10 	vmov	r1, s16
 8009996:	f7fe fe47 	bl	8008628 <_Bfree>
 800999a:	2300      	movs	r3, #0
 800999c:	9800      	ldr	r0, [sp, #0]
 800999e:	702b      	strb	r3, [r5, #0]
 80099a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099a2:	3001      	adds	r0, #1
 80099a4:	6018      	str	r0, [r3, #0]
 80099a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f43f acf1 	beq.w	8009390 <_dtoa_r+0xa0>
 80099ae:	601d      	str	r5, [r3, #0]
 80099b0:	e4ee      	b.n	8009390 <_dtoa_r+0xa0>
 80099b2:	9f00      	ldr	r7, [sp, #0]
 80099b4:	462b      	mov	r3, r5
 80099b6:	461d      	mov	r5, r3
 80099b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099bc:	2a39      	cmp	r2, #57	; 0x39
 80099be:	d106      	bne.n	80099ce <_dtoa_r+0x6de>
 80099c0:	9a01      	ldr	r2, [sp, #4]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d1f7      	bne.n	80099b6 <_dtoa_r+0x6c6>
 80099c6:	9901      	ldr	r1, [sp, #4]
 80099c8:	2230      	movs	r2, #48	; 0x30
 80099ca:	3701      	adds	r7, #1
 80099cc:	700a      	strb	r2, [r1, #0]
 80099ce:	781a      	ldrb	r2, [r3, #0]
 80099d0:	3201      	adds	r2, #1
 80099d2:	701a      	strb	r2, [r3, #0]
 80099d4:	e790      	b.n	80098f8 <_dtoa_r+0x608>
 80099d6:	4ba6      	ldr	r3, [pc, #664]	; (8009c70 <_dtoa_r+0x980>)
 80099d8:	2200      	movs	r2, #0
 80099da:	f7f6 fe2d 	bl	8000638 <__aeabi_dmul>
 80099de:	2200      	movs	r2, #0
 80099e0:	2300      	movs	r3, #0
 80099e2:	4606      	mov	r6, r0
 80099e4:	460f      	mov	r7, r1
 80099e6:	f7f7 f88f 	bl	8000b08 <__aeabi_dcmpeq>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d09d      	beq.n	800992a <_dtoa_r+0x63a>
 80099ee:	e7cf      	b.n	8009990 <_dtoa_r+0x6a0>
 80099f0:	9a08      	ldr	r2, [sp, #32]
 80099f2:	2a00      	cmp	r2, #0
 80099f4:	f000 80d7 	beq.w	8009ba6 <_dtoa_r+0x8b6>
 80099f8:	9a06      	ldr	r2, [sp, #24]
 80099fa:	2a01      	cmp	r2, #1
 80099fc:	f300 80ba 	bgt.w	8009b74 <_dtoa_r+0x884>
 8009a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a02:	2a00      	cmp	r2, #0
 8009a04:	f000 80b2 	beq.w	8009b6c <_dtoa_r+0x87c>
 8009a08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a0c:	9e07      	ldr	r6, [sp, #28]
 8009a0e:	9d04      	ldr	r5, [sp, #16]
 8009a10:	9a04      	ldr	r2, [sp, #16]
 8009a12:	441a      	add	r2, r3
 8009a14:	9204      	str	r2, [sp, #16]
 8009a16:	9a05      	ldr	r2, [sp, #20]
 8009a18:	2101      	movs	r1, #1
 8009a1a:	441a      	add	r2, r3
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	9205      	str	r2, [sp, #20]
 8009a20:	f7fe feba 	bl	8008798 <__i2b>
 8009a24:	4607      	mov	r7, r0
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	dd0c      	ble.n	8009a44 <_dtoa_r+0x754>
 8009a2a:	9b05      	ldr	r3, [sp, #20]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	dd09      	ble.n	8009a44 <_dtoa_r+0x754>
 8009a30:	42ab      	cmp	r3, r5
 8009a32:	9a04      	ldr	r2, [sp, #16]
 8009a34:	bfa8      	it	ge
 8009a36:	462b      	movge	r3, r5
 8009a38:	1ad2      	subs	r2, r2, r3
 8009a3a:	9204      	str	r2, [sp, #16]
 8009a3c:	9a05      	ldr	r2, [sp, #20]
 8009a3e:	1aed      	subs	r5, r5, r3
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	9305      	str	r3, [sp, #20]
 8009a44:	9b07      	ldr	r3, [sp, #28]
 8009a46:	b31b      	cbz	r3, 8009a90 <_dtoa_r+0x7a0>
 8009a48:	9b08      	ldr	r3, [sp, #32]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 80af 	beq.w	8009bae <_dtoa_r+0x8be>
 8009a50:	2e00      	cmp	r6, #0
 8009a52:	dd13      	ble.n	8009a7c <_dtoa_r+0x78c>
 8009a54:	4639      	mov	r1, r7
 8009a56:	4632      	mov	r2, r6
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f7fe ff5d 	bl	8008918 <__pow5mult>
 8009a5e:	ee18 2a10 	vmov	r2, s16
 8009a62:	4601      	mov	r1, r0
 8009a64:	4607      	mov	r7, r0
 8009a66:	4620      	mov	r0, r4
 8009a68:	f7fe feac 	bl	80087c4 <__multiply>
 8009a6c:	ee18 1a10 	vmov	r1, s16
 8009a70:	4680      	mov	r8, r0
 8009a72:	4620      	mov	r0, r4
 8009a74:	f7fe fdd8 	bl	8008628 <_Bfree>
 8009a78:	ee08 8a10 	vmov	s16, r8
 8009a7c:	9b07      	ldr	r3, [sp, #28]
 8009a7e:	1b9a      	subs	r2, r3, r6
 8009a80:	d006      	beq.n	8009a90 <_dtoa_r+0x7a0>
 8009a82:	ee18 1a10 	vmov	r1, s16
 8009a86:	4620      	mov	r0, r4
 8009a88:	f7fe ff46 	bl	8008918 <__pow5mult>
 8009a8c:	ee08 0a10 	vmov	s16, r0
 8009a90:	2101      	movs	r1, #1
 8009a92:	4620      	mov	r0, r4
 8009a94:	f7fe fe80 	bl	8008798 <__i2b>
 8009a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	f340 8088 	ble.w	8009bb2 <_dtoa_r+0x8c2>
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	4601      	mov	r1, r0
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f7fe ff36 	bl	8008918 <__pow5mult>
 8009aac:	9b06      	ldr	r3, [sp, #24]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	4606      	mov	r6, r0
 8009ab2:	f340 8081 	ble.w	8009bb8 <_dtoa_r+0x8c8>
 8009ab6:	f04f 0800 	mov.w	r8, #0
 8009aba:	6933      	ldr	r3, [r6, #16]
 8009abc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ac0:	6918      	ldr	r0, [r3, #16]
 8009ac2:	f7fe fe19 	bl	80086f8 <__hi0bits>
 8009ac6:	f1c0 0020 	rsb	r0, r0, #32
 8009aca:	9b05      	ldr	r3, [sp, #20]
 8009acc:	4418      	add	r0, r3
 8009ace:	f010 001f 	ands.w	r0, r0, #31
 8009ad2:	f000 8092 	beq.w	8009bfa <_dtoa_r+0x90a>
 8009ad6:	f1c0 0320 	rsb	r3, r0, #32
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	f340 808a 	ble.w	8009bf4 <_dtoa_r+0x904>
 8009ae0:	f1c0 001c 	rsb	r0, r0, #28
 8009ae4:	9b04      	ldr	r3, [sp, #16]
 8009ae6:	4403      	add	r3, r0
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	9b05      	ldr	r3, [sp, #20]
 8009aec:	4403      	add	r3, r0
 8009aee:	4405      	add	r5, r0
 8009af0:	9305      	str	r3, [sp, #20]
 8009af2:	9b04      	ldr	r3, [sp, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	dd07      	ble.n	8009b08 <_dtoa_r+0x818>
 8009af8:	ee18 1a10 	vmov	r1, s16
 8009afc:	461a      	mov	r2, r3
 8009afe:	4620      	mov	r0, r4
 8009b00:	f7fe ff64 	bl	80089cc <__lshift>
 8009b04:	ee08 0a10 	vmov	s16, r0
 8009b08:	9b05      	ldr	r3, [sp, #20]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	dd05      	ble.n	8009b1a <_dtoa_r+0x82a>
 8009b0e:	4631      	mov	r1, r6
 8009b10:	461a      	mov	r2, r3
 8009b12:	4620      	mov	r0, r4
 8009b14:	f7fe ff5a 	bl	80089cc <__lshift>
 8009b18:	4606      	mov	r6, r0
 8009b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d06e      	beq.n	8009bfe <_dtoa_r+0x90e>
 8009b20:	ee18 0a10 	vmov	r0, s16
 8009b24:	4631      	mov	r1, r6
 8009b26:	f7fe ffc1 	bl	8008aac <__mcmp>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	da67      	bge.n	8009bfe <_dtoa_r+0x90e>
 8009b2e:	9b00      	ldr	r3, [sp, #0]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	ee18 1a10 	vmov	r1, s16
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	220a      	movs	r2, #10
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f7fe fd95 	bl	800866c <__multadd>
 8009b42:	9b08      	ldr	r3, [sp, #32]
 8009b44:	ee08 0a10 	vmov	s16, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 81b1 	beq.w	8009eb0 <_dtoa_r+0xbc0>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	4639      	mov	r1, r7
 8009b52:	220a      	movs	r2, #10
 8009b54:	4620      	mov	r0, r4
 8009b56:	f7fe fd89 	bl	800866c <__multadd>
 8009b5a:	9b02      	ldr	r3, [sp, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	4607      	mov	r7, r0
 8009b60:	f300 808e 	bgt.w	8009c80 <_dtoa_r+0x990>
 8009b64:	9b06      	ldr	r3, [sp, #24]
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	dc51      	bgt.n	8009c0e <_dtoa_r+0x91e>
 8009b6a:	e089      	b.n	8009c80 <_dtoa_r+0x990>
 8009b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b72:	e74b      	b.n	8009a0c <_dtoa_r+0x71c>
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	1e5e      	subs	r6, r3, #1
 8009b78:	9b07      	ldr	r3, [sp, #28]
 8009b7a:	42b3      	cmp	r3, r6
 8009b7c:	bfbf      	itttt	lt
 8009b7e:	9b07      	ldrlt	r3, [sp, #28]
 8009b80:	9607      	strlt	r6, [sp, #28]
 8009b82:	1af2      	sublt	r2, r6, r3
 8009b84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009b86:	bfb6      	itet	lt
 8009b88:	189b      	addlt	r3, r3, r2
 8009b8a:	1b9e      	subge	r6, r3, r6
 8009b8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009b8e:	9b03      	ldr	r3, [sp, #12]
 8009b90:	bfb8      	it	lt
 8009b92:	2600      	movlt	r6, #0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bfb7      	itett	lt
 8009b98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009b9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009ba0:	1a9d      	sublt	r5, r3, r2
 8009ba2:	2300      	movlt	r3, #0
 8009ba4:	e734      	b.n	8009a10 <_dtoa_r+0x720>
 8009ba6:	9e07      	ldr	r6, [sp, #28]
 8009ba8:	9d04      	ldr	r5, [sp, #16]
 8009baa:	9f08      	ldr	r7, [sp, #32]
 8009bac:	e73b      	b.n	8009a26 <_dtoa_r+0x736>
 8009bae:	9a07      	ldr	r2, [sp, #28]
 8009bb0:	e767      	b.n	8009a82 <_dtoa_r+0x792>
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	dc18      	bgt.n	8009bea <_dtoa_r+0x8fa>
 8009bb8:	f1ba 0f00 	cmp.w	sl, #0
 8009bbc:	d115      	bne.n	8009bea <_dtoa_r+0x8fa>
 8009bbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bc2:	b993      	cbnz	r3, 8009bea <_dtoa_r+0x8fa>
 8009bc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009bc8:	0d1b      	lsrs	r3, r3, #20
 8009bca:	051b      	lsls	r3, r3, #20
 8009bcc:	b183      	cbz	r3, 8009bf0 <_dtoa_r+0x900>
 8009bce:	9b04      	ldr	r3, [sp, #16]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	9304      	str	r3, [sp, #16]
 8009bd4:	9b05      	ldr	r3, [sp, #20]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	9305      	str	r3, [sp, #20]
 8009bda:	f04f 0801 	mov.w	r8, #1
 8009bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f47f af6a 	bne.w	8009aba <_dtoa_r+0x7ca>
 8009be6:	2001      	movs	r0, #1
 8009be8:	e76f      	b.n	8009aca <_dtoa_r+0x7da>
 8009bea:	f04f 0800 	mov.w	r8, #0
 8009bee:	e7f6      	b.n	8009bde <_dtoa_r+0x8ee>
 8009bf0:	4698      	mov	r8, r3
 8009bf2:	e7f4      	b.n	8009bde <_dtoa_r+0x8ee>
 8009bf4:	f43f af7d 	beq.w	8009af2 <_dtoa_r+0x802>
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	301c      	adds	r0, #28
 8009bfc:	e772      	b.n	8009ae4 <_dtoa_r+0x7f4>
 8009bfe:	9b03      	ldr	r3, [sp, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dc37      	bgt.n	8009c74 <_dtoa_r+0x984>
 8009c04:	9b06      	ldr	r3, [sp, #24]
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	dd34      	ble.n	8009c74 <_dtoa_r+0x984>
 8009c0a:	9b03      	ldr	r3, [sp, #12]
 8009c0c:	9302      	str	r3, [sp, #8]
 8009c0e:	9b02      	ldr	r3, [sp, #8]
 8009c10:	b96b      	cbnz	r3, 8009c2e <_dtoa_r+0x93e>
 8009c12:	4631      	mov	r1, r6
 8009c14:	2205      	movs	r2, #5
 8009c16:	4620      	mov	r0, r4
 8009c18:	f7fe fd28 	bl	800866c <__multadd>
 8009c1c:	4601      	mov	r1, r0
 8009c1e:	4606      	mov	r6, r0
 8009c20:	ee18 0a10 	vmov	r0, s16
 8009c24:	f7fe ff42 	bl	8008aac <__mcmp>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	f73f adbb 	bgt.w	80097a4 <_dtoa_r+0x4b4>
 8009c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c30:	9d01      	ldr	r5, [sp, #4]
 8009c32:	43db      	mvns	r3, r3
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	f04f 0800 	mov.w	r8, #0
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f7fe fcf3 	bl	8008628 <_Bfree>
 8009c42:	2f00      	cmp	r7, #0
 8009c44:	f43f aea4 	beq.w	8009990 <_dtoa_r+0x6a0>
 8009c48:	f1b8 0f00 	cmp.w	r8, #0
 8009c4c:	d005      	beq.n	8009c5a <_dtoa_r+0x96a>
 8009c4e:	45b8      	cmp	r8, r7
 8009c50:	d003      	beq.n	8009c5a <_dtoa_r+0x96a>
 8009c52:	4641      	mov	r1, r8
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7fe fce7 	bl	8008628 <_Bfree>
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f7fe fce3 	bl	8008628 <_Bfree>
 8009c62:	e695      	b.n	8009990 <_dtoa_r+0x6a0>
 8009c64:	2600      	movs	r6, #0
 8009c66:	4637      	mov	r7, r6
 8009c68:	e7e1      	b.n	8009c2e <_dtoa_r+0x93e>
 8009c6a:	9700      	str	r7, [sp, #0]
 8009c6c:	4637      	mov	r7, r6
 8009c6e:	e599      	b.n	80097a4 <_dtoa_r+0x4b4>
 8009c70:	40240000 	.word	0x40240000
 8009c74:	9b08      	ldr	r3, [sp, #32]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 80ca 	beq.w	8009e10 <_dtoa_r+0xb20>
 8009c7c:	9b03      	ldr	r3, [sp, #12]
 8009c7e:	9302      	str	r3, [sp, #8]
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	dd05      	ble.n	8009c90 <_dtoa_r+0x9a0>
 8009c84:	4639      	mov	r1, r7
 8009c86:	462a      	mov	r2, r5
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7fe fe9f 	bl	80089cc <__lshift>
 8009c8e:	4607      	mov	r7, r0
 8009c90:	f1b8 0f00 	cmp.w	r8, #0
 8009c94:	d05b      	beq.n	8009d4e <_dtoa_r+0xa5e>
 8009c96:	6879      	ldr	r1, [r7, #4]
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f7fe fc85 	bl	80085a8 <_Balloc>
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	b928      	cbnz	r0, 8009cae <_dtoa_r+0x9be>
 8009ca2:	4b87      	ldr	r3, [pc, #540]	; (8009ec0 <_dtoa_r+0xbd0>)
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009caa:	f7ff bb3b 	b.w	8009324 <_dtoa_r+0x34>
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	3202      	adds	r2, #2
 8009cb2:	0092      	lsls	r2, r2, #2
 8009cb4:	f107 010c 	add.w	r1, r7, #12
 8009cb8:	300c      	adds	r0, #12
 8009cba:	f7fe fb17 	bl	80082ec <memcpy>
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f7fe fe82 	bl	80089cc <__lshift>
 8009cc8:	9b01      	ldr	r3, [sp, #4]
 8009cca:	f103 0901 	add.w	r9, r3, #1
 8009cce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	9305      	str	r3, [sp, #20]
 8009cd6:	f00a 0301 	and.w	r3, sl, #1
 8009cda:	46b8      	mov	r8, r7
 8009cdc:	9304      	str	r3, [sp, #16]
 8009cde:	4607      	mov	r7, r0
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	ee18 0a10 	vmov	r0, s16
 8009ce6:	f7ff fa75 	bl	80091d4 <quorem>
 8009cea:	4641      	mov	r1, r8
 8009cec:	9002      	str	r0, [sp, #8]
 8009cee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009cf2:	ee18 0a10 	vmov	r0, s16
 8009cf6:	f7fe fed9 	bl	8008aac <__mcmp>
 8009cfa:	463a      	mov	r2, r7
 8009cfc:	9003      	str	r0, [sp, #12]
 8009cfe:	4631      	mov	r1, r6
 8009d00:	4620      	mov	r0, r4
 8009d02:	f7fe feef 	bl	8008ae4 <__mdiff>
 8009d06:	68c2      	ldr	r2, [r0, #12]
 8009d08:	f109 3bff 	add.w	fp, r9, #4294967295
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	bb02      	cbnz	r2, 8009d52 <_dtoa_r+0xa62>
 8009d10:	4601      	mov	r1, r0
 8009d12:	ee18 0a10 	vmov	r0, s16
 8009d16:	f7fe fec9 	bl	8008aac <__mcmp>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	4620      	mov	r0, r4
 8009d20:	9207      	str	r2, [sp, #28]
 8009d22:	f7fe fc81 	bl	8008628 <_Bfree>
 8009d26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009d2a:	ea43 0102 	orr.w	r1, r3, r2
 8009d2e:	9b04      	ldr	r3, [sp, #16]
 8009d30:	430b      	orrs	r3, r1
 8009d32:	464d      	mov	r5, r9
 8009d34:	d10f      	bne.n	8009d56 <_dtoa_r+0xa66>
 8009d36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d3a:	d02a      	beq.n	8009d92 <_dtoa_r+0xaa2>
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	dd02      	ble.n	8009d48 <_dtoa_r+0xa58>
 8009d42:	9b02      	ldr	r3, [sp, #8]
 8009d44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009d48:	f88b a000 	strb.w	sl, [fp]
 8009d4c:	e775      	b.n	8009c3a <_dtoa_r+0x94a>
 8009d4e:	4638      	mov	r0, r7
 8009d50:	e7ba      	b.n	8009cc8 <_dtoa_r+0x9d8>
 8009d52:	2201      	movs	r2, #1
 8009d54:	e7e2      	b.n	8009d1c <_dtoa_r+0xa2c>
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	db04      	blt.n	8009d66 <_dtoa_r+0xa76>
 8009d5c:	9906      	ldr	r1, [sp, #24]
 8009d5e:	430b      	orrs	r3, r1
 8009d60:	9904      	ldr	r1, [sp, #16]
 8009d62:	430b      	orrs	r3, r1
 8009d64:	d122      	bne.n	8009dac <_dtoa_r+0xabc>
 8009d66:	2a00      	cmp	r2, #0
 8009d68:	ddee      	ble.n	8009d48 <_dtoa_r+0xa58>
 8009d6a:	ee18 1a10 	vmov	r1, s16
 8009d6e:	2201      	movs	r2, #1
 8009d70:	4620      	mov	r0, r4
 8009d72:	f7fe fe2b 	bl	80089cc <__lshift>
 8009d76:	4631      	mov	r1, r6
 8009d78:	ee08 0a10 	vmov	s16, r0
 8009d7c:	f7fe fe96 	bl	8008aac <__mcmp>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	dc03      	bgt.n	8009d8c <_dtoa_r+0xa9c>
 8009d84:	d1e0      	bne.n	8009d48 <_dtoa_r+0xa58>
 8009d86:	f01a 0f01 	tst.w	sl, #1
 8009d8a:	d0dd      	beq.n	8009d48 <_dtoa_r+0xa58>
 8009d8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d90:	d1d7      	bne.n	8009d42 <_dtoa_r+0xa52>
 8009d92:	2339      	movs	r3, #57	; 0x39
 8009d94:	f88b 3000 	strb.w	r3, [fp]
 8009d98:	462b      	mov	r3, r5
 8009d9a:	461d      	mov	r5, r3
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009da2:	2a39      	cmp	r2, #57	; 0x39
 8009da4:	d071      	beq.n	8009e8a <_dtoa_r+0xb9a>
 8009da6:	3201      	adds	r2, #1
 8009da8:	701a      	strb	r2, [r3, #0]
 8009daa:	e746      	b.n	8009c3a <_dtoa_r+0x94a>
 8009dac:	2a00      	cmp	r2, #0
 8009dae:	dd07      	ble.n	8009dc0 <_dtoa_r+0xad0>
 8009db0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009db4:	d0ed      	beq.n	8009d92 <_dtoa_r+0xaa2>
 8009db6:	f10a 0301 	add.w	r3, sl, #1
 8009dba:	f88b 3000 	strb.w	r3, [fp]
 8009dbe:	e73c      	b.n	8009c3a <_dtoa_r+0x94a>
 8009dc0:	9b05      	ldr	r3, [sp, #20]
 8009dc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009dc6:	4599      	cmp	r9, r3
 8009dc8:	d047      	beq.n	8009e5a <_dtoa_r+0xb6a>
 8009dca:	ee18 1a10 	vmov	r1, s16
 8009dce:	2300      	movs	r3, #0
 8009dd0:	220a      	movs	r2, #10
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f7fe fc4a 	bl	800866c <__multadd>
 8009dd8:	45b8      	cmp	r8, r7
 8009dda:	ee08 0a10 	vmov	s16, r0
 8009dde:	f04f 0300 	mov.w	r3, #0
 8009de2:	f04f 020a 	mov.w	r2, #10
 8009de6:	4641      	mov	r1, r8
 8009de8:	4620      	mov	r0, r4
 8009dea:	d106      	bne.n	8009dfa <_dtoa_r+0xb0a>
 8009dec:	f7fe fc3e 	bl	800866c <__multadd>
 8009df0:	4680      	mov	r8, r0
 8009df2:	4607      	mov	r7, r0
 8009df4:	f109 0901 	add.w	r9, r9, #1
 8009df8:	e772      	b.n	8009ce0 <_dtoa_r+0x9f0>
 8009dfa:	f7fe fc37 	bl	800866c <__multadd>
 8009dfe:	4639      	mov	r1, r7
 8009e00:	4680      	mov	r8, r0
 8009e02:	2300      	movs	r3, #0
 8009e04:	220a      	movs	r2, #10
 8009e06:	4620      	mov	r0, r4
 8009e08:	f7fe fc30 	bl	800866c <__multadd>
 8009e0c:	4607      	mov	r7, r0
 8009e0e:	e7f1      	b.n	8009df4 <_dtoa_r+0xb04>
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	9302      	str	r3, [sp, #8]
 8009e14:	9d01      	ldr	r5, [sp, #4]
 8009e16:	ee18 0a10 	vmov	r0, s16
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	f7ff f9da 	bl	80091d4 <quorem>
 8009e20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e24:	9b01      	ldr	r3, [sp, #4]
 8009e26:	f805 ab01 	strb.w	sl, [r5], #1
 8009e2a:	1aea      	subs	r2, r5, r3
 8009e2c:	9b02      	ldr	r3, [sp, #8]
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	dd09      	ble.n	8009e46 <_dtoa_r+0xb56>
 8009e32:	ee18 1a10 	vmov	r1, s16
 8009e36:	2300      	movs	r3, #0
 8009e38:	220a      	movs	r2, #10
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7fe fc16 	bl	800866c <__multadd>
 8009e40:	ee08 0a10 	vmov	s16, r0
 8009e44:	e7e7      	b.n	8009e16 <_dtoa_r+0xb26>
 8009e46:	9b02      	ldr	r3, [sp, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	bfc8      	it	gt
 8009e4c:	461d      	movgt	r5, r3
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	bfd8      	it	le
 8009e52:	2501      	movle	r5, #1
 8009e54:	441d      	add	r5, r3
 8009e56:	f04f 0800 	mov.w	r8, #0
 8009e5a:	ee18 1a10 	vmov	r1, s16
 8009e5e:	2201      	movs	r2, #1
 8009e60:	4620      	mov	r0, r4
 8009e62:	f7fe fdb3 	bl	80089cc <__lshift>
 8009e66:	4631      	mov	r1, r6
 8009e68:	ee08 0a10 	vmov	s16, r0
 8009e6c:	f7fe fe1e 	bl	8008aac <__mcmp>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	dc91      	bgt.n	8009d98 <_dtoa_r+0xaa8>
 8009e74:	d102      	bne.n	8009e7c <_dtoa_r+0xb8c>
 8009e76:	f01a 0f01 	tst.w	sl, #1
 8009e7a:	d18d      	bne.n	8009d98 <_dtoa_r+0xaa8>
 8009e7c:	462b      	mov	r3, r5
 8009e7e:	461d      	mov	r5, r3
 8009e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e84:	2a30      	cmp	r2, #48	; 0x30
 8009e86:	d0fa      	beq.n	8009e7e <_dtoa_r+0xb8e>
 8009e88:	e6d7      	b.n	8009c3a <_dtoa_r+0x94a>
 8009e8a:	9a01      	ldr	r2, [sp, #4]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d184      	bne.n	8009d9a <_dtoa_r+0xaaa>
 8009e90:	9b00      	ldr	r3, [sp, #0]
 8009e92:	3301      	adds	r3, #1
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	2331      	movs	r3, #49	; 0x31
 8009e98:	7013      	strb	r3, [r2, #0]
 8009e9a:	e6ce      	b.n	8009c3a <_dtoa_r+0x94a>
 8009e9c:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <_dtoa_r+0xbd4>)
 8009e9e:	f7ff ba95 	b.w	80093cc <_dtoa_r+0xdc>
 8009ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f47f aa6e 	bne.w	8009386 <_dtoa_r+0x96>
 8009eaa:	4b07      	ldr	r3, [pc, #28]	; (8009ec8 <_dtoa_r+0xbd8>)
 8009eac:	f7ff ba8e 	b.w	80093cc <_dtoa_r+0xdc>
 8009eb0:	9b02      	ldr	r3, [sp, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	dcae      	bgt.n	8009e14 <_dtoa_r+0xb24>
 8009eb6:	9b06      	ldr	r3, [sp, #24]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	f73f aea8 	bgt.w	8009c0e <_dtoa_r+0x91e>
 8009ebe:	e7a9      	b.n	8009e14 <_dtoa_r+0xb24>
 8009ec0:	0800b29b 	.word	0x0800b29b
 8009ec4:	0800b417 	.word	0x0800b417
 8009ec8:	0800b40a 	.word	0x0800b40a

08009ecc <fiprintf>:
 8009ecc:	b40e      	push	{r1, r2, r3}
 8009ece:	b503      	push	{r0, r1, lr}
 8009ed0:	4601      	mov	r1, r0
 8009ed2:	ab03      	add	r3, sp, #12
 8009ed4:	4805      	ldr	r0, [pc, #20]	; (8009eec <fiprintf+0x20>)
 8009ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eda:	6800      	ldr	r0, [r0, #0]
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	f000 f891 	bl	800a004 <_vfiprintf_r>
 8009ee2:	b002      	add	sp, #8
 8009ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ee8:	b003      	add	sp, #12
 8009eea:	4770      	bx	lr
 8009eec:	20000014 	.word	0x20000014

08009ef0 <malloc>:
 8009ef0:	4b02      	ldr	r3, [pc, #8]	; (8009efc <malloc+0xc>)
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	f7fe bf2f 	b.w	8008d58 <_malloc_r>
 8009efa:	bf00      	nop
 8009efc:	20000014 	.word	0x20000014

08009f00 <__malloc_lock>:
 8009f00:	4801      	ldr	r0, [pc, #4]	; (8009f08 <__malloc_lock+0x8>)
 8009f02:	f000 bc2f 	b.w	800a764 <__retarget_lock_acquire_recursive>
 8009f06:	bf00      	nop
 8009f08:	20000770 	.word	0x20000770

08009f0c <__malloc_unlock>:
 8009f0c:	4801      	ldr	r0, [pc, #4]	; (8009f14 <__malloc_unlock+0x8>)
 8009f0e:	f000 bc2a 	b.w	800a766 <__retarget_lock_release_recursive>
 8009f12:	bf00      	nop
 8009f14:	20000770 	.word	0x20000770

08009f18 <_free_r>:
 8009f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f1a:	2900      	cmp	r1, #0
 8009f1c:	d044      	beq.n	8009fa8 <_free_r+0x90>
 8009f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f22:	9001      	str	r0, [sp, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f1a1 0404 	sub.w	r4, r1, #4
 8009f2a:	bfb8      	it	lt
 8009f2c:	18e4      	addlt	r4, r4, r3
 8009f2e:	f7ff ffe7 	bl	8009f00 <__malloc_lock>
 8009f32:	4a1e      	ldr	r2, [pc, #120]	; (8009fac <_free_r+0x94>)
 8009f34:	9801      	ldr	r0, [sp, #4]
 8009f36:	6813      	ldr	r3, [r2, #0]
 8009f38:	b933      	cbnz	r3, 8009f48 <_free_r+0x30>
 8009f3a:	6063      	str	r3, [r4, #4]
 8009f3c:	6014      	str	r4, [r2, #0]
 8009f3e:	b003      	add	sp, #12
 8009f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f44:	f7ff bfe2 	b.w	8009f0c <__malloc_unlock>
 8009f48:	42a3      	cmp	r3, r4
 8009f4a:	d908      	bls.n	8009f5e <_free_r+0x46>
 8009f4c:	6825      	ldr	r5, [r4, #0]
 8009f4e:	1961      	adds	r1, r4, r5
 8009f50:	428b      	cmp	r3, r1
 8009f52:	bf01      	itttt	eq
 8009f54:	6819      	ldreq	r1, [r3, #0]
 8009f56:	685b      	ldreq	r3, [r3, #4]
 8009f58:	1949      	addeq	r1, r1, r5
 8009f5a:	6021      	streq	r1, [r4, #0]
 8009f5c:	e7ed      	b.n	8009f3a <_free_r+0x22>
 8009f5e:	461a      	mov	r2, r3
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	b10b      	cbz	r3, 8009f68 <_free_r+0x50>
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	d9fa      	bls.n	8009f5e <_free_r+0x46>
 8009f68:	6811      	ldr	r1, [r2, #0]
 8009f6a:	1855      	adds	r5, r2, r1
 8009f6c:	42a5      	cmp	r5, r4
 8009f6e:	d10b      	bne.n	8009f88 <_free_r+0x70>
 8009f70:	6824      	ldr	r4, [r4, #0]
 8009f72:	4421      	add	r1, r4
 8009f74:	1854      	adds	r4, r2, r1
 8009f76:	42a3      	cmp	r3, r4
 8009f78:	6011      	str	r1, [r2, #0]
 8009f7a:	d1e0      	bne.n	8009f3e <_free_r+0x26>
 8009f7c:	681c      	ldr	r4, [r3, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	6053      	str	r3, [r2, #4]
 8009f82:	4421      	add	r1, r4
 8009f84:	6011      	str	r1, [r2, #0]
 8009f86:	e7da      	b.n	8009f3e <_free_r+0x26>
 8009f88:	d902      	bls.n	8009f90 <_free_r+0x78>
 8009f8a:	230c      	movs	r3, #12
 8009f8c:	6003      	str	r3, [r0, #0]
 8009f8e:	e7d6      	b.n	8009f3e <_free_r+0x26>
 8009f90:	6825      	ldr	r5, [r4, #0]
 8009f92:	1961      	adds	r1, r4, r5
 8009f94:	428b      	cmp	r3, r1
 8009f96:	bf04      	itt	eq
 8009f98:	6819      	ldreq	r1, [r3, #0]
 8009f9a:	685b      	ldreq	r3, [r3, #4]
 8009f9c:	6063      	str	r3, [r4, #4]
 8009f9e:	bf04      	itt	eq
 8009fa0:	1949      	addeq	r1, r1, r5
 8009fa2:	6021      	streq	r1, [r4, #0]
 8009fa4:	6054      	str	r4, [r2, #4]
 8009fa6:	e7ca      	b.n	8009f3e <_free_r+0x26>
 8009fa8:	b003      	add	sp, #12
 8009faa:	bd30      	pop	{r4, r5, pc}
 8009fac:	20000764 	.word	0x20000764

08009fb0 <__sfputc_r>:
 8009fb0:	6893      	ldr	r3, [r2, #8]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	b410      	push	{r4}
 8009fb8:	6093      	str	r3, [r2, #8]
 8009fba:	da08      	bge.n	8009fce <__sfputc_r+0x1e>
 8009fbc:	6994      	ldr	r4, [r2, #24]
 8009fbe:	42a3      	cmp	r3, r4
 8009fc0:	db01      	blt.n	8009fc6 <__sfputc_r+0x16>
 8009fc2:	290a      	cmp	r1, #10
 8009fc4:	d103      	bne.n	8009fce <__sfputc_r+0x1e>
 8009fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fca:	f000 b94b 	b.w	800a264 <__swbuf_r>
 8009fce:	6813      	ldr	r3, [r2, #0]
 8009fd0:	1c58      	adds	r0, r3, #1
 8009fd2:	6010      	str	r0, [r2, #0]
 8009fd4:	7019      	strb	r1, [r3, #0]
 8009fd6:	4608      	mov	r0, r1
 8009fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <__sfputs_r>:
 8009fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	460f      	mov	r7, r1
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	18d5      	adds	r5, r2, r3
 8009fe8:	42ac      	cmp	r4, r5
 8009fea:	d101      	bne.n	8009ff0 <__sfputs_r+0x12>
 8009fec:	2000      	movs	r0, #0
 8009fee:	e007      	b.n	800a000 <__sfputs_r+0x22>
 8009ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff4:	463a      	mov	r2, r7
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f7ff ffda 	bl	8009fb0 <__sfputc_r>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d1f3      	bne.n	8009fe8 <__sfputs_r+0xa>
 800a000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a004 <_vfiprintf_r>:
 800a004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a008:	460d      	mov	r5, r1
 800a00a:	b09d      	sub	sp, #116	; 0x74
 800a00c:	4614      	mov	r4, r2
 800a00e:	4698      	mov	r8, r3
 800a010:	4606      	mov	r6, r0
 800a012:	b118      	cbz	r0, 800a01c <_vfiprintf_r+0x18>
 800a014:	6983      	ldr	r3, [r0, #24]
 800a016:	b90b      	cbnz	r3, 800a01c <_vfiprintf_r+0x18>
 800a018:	f000 fb06 	bl	800a628 <__sinit>
 800a01c:	4b89      	ldr	r3, [pc, #548]	; (800a244 <_vfiprintf_r+0x240>)
 800a01e:	429d      	cmp	r5, r3
 800a020:	d11b      	bne.n	800a05a <_vfiprintf_r+0x56>
 800a022:	6875      	ldr	r5, [r6, #4]
 800a024:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a026:	07d9      	lsls	r1, r3, #31
 800a028:	d405      	bmi.n	800a036 <_vfiprintf_r+0x32>
 800a02a:	89ab      	ldrh	r3, [r5, #12]
 800a02c:	059a      	lsls	r2, r3, #22
 800a02e:	d402      	bmi.n	800a036 <_vfiprintf_r+0x32>
 800a030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a032:	f000 fb97 	bl	800a764 <__retarget_lock_acquire_recursive>
 800a036:	89ab      	ldrh	r3, [r5, #12]
 800a038:	071b      	lsls	r3, r3, #28
 800a03a:	d501      	bpl.n	800a040 <_vfiprintf_r+0x3c>
 800a03c:	692b      	ldr	r3, [r5, #16]
 800a03e:	b9eb      	cbnz	r3, 800a07c <_vfiprintf_r+0x78>
 800a040:	4629      	mov	r1, r5
 800a042:	4630      	mov	r0, r6
 800a044:	f000 f960 	bl	800a308 <__swsetup_r>
 800a048:	b1c0      	cbz	r0, 800a07c <_vfiprintf_r+0x78>
 800a04a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a04c:	07dc      	lsls	r4, r3, #31
 800a04e:	d50e      	bpl.n	800a06e <_vfiprintf_r+0x6a>
 800a050:	f04f 30ff 	mov.w	r0, #4294967295
 800a054:	b01d      	add	sp, #116	; 0x74
 800a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05a:	4b7b      	ldr	r3, [pc, #492]	; (800a248 <_vfiprintf_r+0x244>)
 800a05c:	429d      	cmp	r5, r3
 800a05e:	d101      	bne.n	800a064 <_vfiprintf_r+0x60>
 800a060:	68b5      	ldr	r5, [r6, #8]
 800a062:	e7df      	b.n	800a024 <_vfiprintf_r+0x20>
 800a064:	4b79      	ldr	r3, [pc, #484]	; (800a24c <_vfiprintf_r+0x248>)
 800a066:	429d      	cmp	r5, r3
 800a068:	bf08      	it	eq
 800a06a:	68f5      	ldreq	r5, [r6, #12]
 800a06c:	e7da      	b.n	800a024 <_vfiprintf_r+0x20>
 800a06e:	89ab      	ldrh	r3, [r5, #12]
 800a070:	0598      	lsls	r0, r3, #22
 800a072:	d4ed      	bmi.n	800a050 <_vfiprintf_r+0x4c>
 800a074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a076:	f000 fb76 	bl	800a766 <__retarget_lock_release_recursive>
 800a07a:	e7e9      	b.n	800a050 <_vfiprintf_r+0x4c>
 800a07c:	2300      	movs	r3, #0
 800a07e:	9309      	str	r3, [sp, #36]	; 0x24
 800a080:	2320      	movs	r3, #32
 800a082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a086:	f8cd 800c 	str.w	r8, [sp, #12]
 800a08a:	2330      	movs	r3, #48	; 0x30
 800a08c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a250 <_vfiprintf_r+0x24c>
 800a090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a094:	f04f 0901 	mov.w	r9, #1
 800a098:	4623      	mov	r3, r4
 800a09a:	469a      	mov	sl, r3
 800a09c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0a0:	b10a      	cbz	r2, 800a0a6 <_vfiprintf_r+0xa2>
 800a0a2:	2a25      	cmp	r2, #37	; 0x25
 800a0a4:	d1f9      	bne.n	800a09a <_vfiprintf_r+0x96>
 800a0a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a0aa:	d00b      	beq.n	800a0c4 <_vfiprintf_r+0xc0>
 800a0ac:	465b      	mov	r3, fp
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f7ff ff93 	bl	8009fde <__sfputs_r>
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	f000 80aa 	beq.w	800a212 <_vfiprintf_r+0x20e>
 800a0be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0c0:	445a      	add	r2, fp
 800a0c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a0c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 80a2 	beq.w	800a212 <_vfiprintf_r+0x20e>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0d8:	f10a 0a01 	add.w	sl, sl, #1
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	9307      	str	r3, [sp, #28]
 800a0e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a0e6:	4654      	mov	r4, sl
 800a0e8:	2205      	movs	r2, #5
 800a0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ee:	4858      	ldr	r0, [pc, #352]	; (800a250 <_vfiprintf_r+0x24c>)
 800a0f0:	f7f6 f896 	bl	8000220 <memchr>
 800a0f4:	9a04      	ldr	r2, [sp, #16]
 800a0f6:	b9d8      	cbnz	r0, 800a130 <_vfiprintf_r+0x12c>
 800a0f8:	06d1      	lsls	r1, r2, #27
 800a0fa:	bf44      	itt	mi
 800a0fc:	2320      	movmi	r3, #32
 800a0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a102:	0713      	lsls	r3, r2, #28
 800a104:	bf44      	itt	mi
 800a106:	232b      	movmi	r3, #43	; 0x2b
 800a108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a10c:	f89a 3000 	ldrb.w	r3, [sl]
 800a110:	2b2a      	cmp	r3, #42	; 0x2a
 800a112:	d015      	beq.n	800a140 <_vfiprintf_r+0x13c>
 800a114:	9a07      	ldr	r2, [sp, #28]
 800a116:	4654      	mov	r4, sl
 800a118:	2000      	movs	r0, #0
 800a11a:	f04f 0c0a 	mov.w	ip, #10
 800a11e:	4621      	mov	r1, r4
 800a120:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a124:	3b30      	subs	r3, #48	; 0x30
 800a126:	2b09      	cmp	r3, #9
 800a128:	d94e      	bls.n	800a1c8 <_vfiprintf_r+0x1c4>
 800a12a:	b1b0      	cbz	r0, 800a15a <_vfiprintf_r+0x156>
 800a12c:	9207      	str	r2, [sp, #28]
 800a12e:	e014      	b.n	800a15a <_vfiprintf_r+0x156>
 800a130:	eba0 0308 	sub.w	r3, r0, r8
 800a134:	fa09 f303 	lsl.w	r3, r9, r3
 800a138:	4313      	orrs	r3, r2
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	46a2      	mov	sl, r4
 800a13e:	e7d2      	b.n	800a0e6 <_vfiprintf_r+0xe2>
 800a140:	9b03      	ldr	r3, [sp, #12]
 800a142:	1d19      	adds	r1, r3, #4
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	9103      	str	r1, [sp, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	bfbb      	ittet	lt
 800a14c:	425b      	neglt	r3, r3
 800a14e:	f042 0202 	orrlt.w	r2, r2, #2
 800a152:	9307      	strge	r3, [sp, #28]
 800a154:	9307      	strlt	r3, [sp, #28]
 800a156:	bfb8      	it	lt
 800a158:	9204      	strlt	r2, [sp, #16]
 800a15a:	7823      	ldrb	r3, [r4, #0]
 800a15c:	2b2e      	cmp	r3, #46	; 0x2e
 800a15e:	d10c      	bne.n	800a17a <_vfiprintf_r+0x176>
 800a160:	7863      	ldrb	r3, [r4, #1]
 800a162:	2b2a      	cmp	r3, #42	; 0x2a
 800a164:	d135      	bne.n	800a1d2 <_vfiprintf_r+0x1ce>
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	1d1a      	adds	r2, r3, #4
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	9203      	str	r2, [sp, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	bfb8      	it	lt
 800a172:	f04f 33ff 	movlt.w	r3, #4294967295
 800a176:	3402      	adds	r4, #2
 800a178:	9305      	str	r3, [sp, #20]
 800a17a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a260 <_vfiprintf_r+0x25c>
 800a17e:	7821      	ldrb	r1, [r4, #0]
 800a180:	2203      	movs	r2, #3
 800a182:	4650      	mov	r0, sl
 800a184:	f7f6 f84c 	bl	8000220 <memchr>
 800a188:	b140      	cbz	r0, 800a19c <_vfiprintf_r+0x198>
 800a18a:	2340      	movs	r3, #64	; 0x40
 800a18c:	eba0 000a 	sub.w	r0, r0, sl
 800a190:	fa03 f000 	lsl.w	r0, r3, r0
 800a194:	9b04      	ldr	r3, [sp, #16]
 800a196:	4303      	orrs	r3, r0
 800a198:	3401      	adds	r4, #1
 800a19a:	9304      	str	r3, [sp, #16]
 800a19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a0:	482c      	ldr	r0, [pc, #176]	; (800a254 <_vfiprintf_r+0x250>)
 800a1a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1a6:	2206      	movs	r2, #6
 800a1a8:	f7f6 f83a 	bl	8000220 <memchr>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	d03f      	beq.n	800a230 <_vfiprintf_r+0x22c>
 800a1b0:	4b29      	ldr	r3, [pc, #164]	; (800a258 <_vfiprintf_r+0x254>)
 800a1b2:	bb1b      	cbnz	r3, 800a1fc <_vfiprintf_r+0x1f8>
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	3307      	adds	r3, #7
 800a1b8:	f023 0307 	bic.w	r3, r3, #7
 800a1bc:	3308      	adds	r3, #8
 800a1be:	9303      	str	r3, [sp, #12]
 800a1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c2:	443b      	add	r3, r7
 800a1c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c6:	e767      	b.n	800a098 <_vfiprintf_r+0x94>
 800a1c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	2001      	movs	r0, #1
 800a1d0:	e7a5      	b.n	800a11e <_vfiprintf_r+0x11a>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	3401      	adds	r4, #1
 800a1d6:	9305      	str	r3, [sp, #20]
 800a1d8:	4619      	mov	r1, r3
 800a1da:	f04f 0c0a 	mov.w	ip, #10
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1e4:	3a30      	subs	r2, #48	; 0x30
 800a1e6:	2a09      	cmp	r2, #9
 800a1e8:	d903      	bls.n	800a1f2 <_vfiprintf_r+0x1ee>
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d0c5      	beq.n	800a17a <_vfiprintf_r+0x176>
 800a1ee:	9105      	str	r1, [sp, #20]
 800a1f0:	e7c3      	b.n	800a17a <_vfiprintf_r+0x176>
 800a1f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e7f0      	b.n	800a1de <_vfiprintf_r+0x1da>
 800a1fc:	ab03      	add	r3, sp, #12
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	462a      	mov	r2, r5
 800a202:	4b16      	ldr	r3, [pc, #88]	; (800a25c <_vfiprintf_r+0x258>)
 800a204:	a904      	add	r1, sp, #16
 800a206:	4630      	mov	r0, r6
 800a208:	f3af 8000 	nop.w
 800a20c:	4607      	mov	r7, r0
 800a20e:	1c78      	adds	r0, r7, #1
 800a210:	d1d6      	bne.n	800a1c0 <_vfiprintf_r+0x1bc>
 800a212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a214:	07d9      	lsls	r1, r3, #31
 800a216:	d405      	bmi.n	800a224 <_vfiprintf_r+0x220>
 800a218:	89ab      	ldrh	r3, [r5, #12]
 800a21a:	059a      	lsls	r2, r3, #22
 800a21c:	d402      	bmi.n	800a224 <_vfiprintf_r+0x220>
 800a21e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a220:	f000 faa1 	bl	800a766 <__retarget_lock_release_recursive>
 800a224:	89ab      	ldrh	r3, [r5, #12]
 800a226:	065b      	lsls	r3, r3, #25
 800a228:	f53f af12 	bmi.w	800a050 <_vfiprintf_r+0x4c>
 800a22c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a22e:	e711      	b.n	800a054 <_vfiprintf_r+0x50>
 800a230:	ab03      	add	r3, sp, #12
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	462a      	mov	r2, r5
 800a236:	4b09      	ldr	r3, [pc, #36]	; (800a25c <_vfiprintf_r+0x258>)
 800a238:	a904      	add	r1, sp, #16
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7fe fe6e 	bl	8008f1c <_printf_i>
 800a240:	e7e4      	b.n	800a20c <_vfiprintf_r+0x208>
 800a242:	bf00      	nop
 800a244:	0800b4a8 	.word	0x0800b4a8
 800a248:	0800b4c8 	.word	0x0800b4c8
 800a24c:	0800b488 	.word	0x0800b488
 800a250:	0800b474 	.word	0x0800b474
 800a254:	0800b47e 	.word	0x0800b47e
 800a258:	00000000 	.word	0x00000000
 800a25c:	08009fdf 	.word	0x08009fdf
 800a260:	0800b47a 	.word	0x0800b47a

0800a264 <__swbuf_r>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	460e      	mov	r6, r1
 800a268:	4614      	mov	r4, r2
 800a26a:	4605      	mov	r5, r0
 800a26c:	b118      	cbz	r0, 800a276 <__swbuf_r+0x12>
 800a26e:	6983      	ldr	r3, [r0, #24]
 800a270:	b90b      	cbnz	r3, 800a276 <__swbuf_r+0x12>
 800a272:	f000 f9d9 	bl	800a628 <__sinit>
 800a276:	4b21      	ldr	r3, [pc, #132]	; (800a2fc <__swbuf_r+0x98>)
 800a278:	429c      	cmp	r4, r3
 800a27a:	d12b      	bne.n	800a2d4 <__swbuf_r+0x70>
 800a27c:	686c      	ldr	r4, [r5, #4]
 800a27e:	69a3      	ldr	r3, [r4, #24]
 800a280:	60a3      	str	r3, [r4, #8]
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	071a      	lsls	r2, r3, #28
 800a286:	d52f      	bpl.n	800a2e8 <__swbuf_r+0x84>
 800a288:	6923      	ldr	r3, [r4, #16]
 800a28a:	b36b      	cbz	r3, 800a2e8 <__swbuf_r+0x84>
 800a28c:	6923      	ldr	r3, [r4, #16]
 800a28e:	6820      	ldr	r0, [r4, #0]
 800a290:	1ac0      	subs	r0, r0, r3
 800a292:	6963      	ldr	r3, [r4, #20]
 800a294:	b2f6      	uxtb	r6, r6
 800a296:	4283      	cmp	r3, r0
 800a298:	4637      	mov	r7, r6
 800a29a:	dc04      	bgt.n	800a2a6 <__swbuf_r+0x42>
 800a29c:	4621      	mov	r1, r4
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f000 f92e 	bl	800a500 <_fflush_r>
 800a2a4:	bb30      	cbnz	r0, 800a2f4 <__swbuf_r+0x90>
 800a2a6:	68a3      	ldr	r3, [r4, #8]
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	60a3      	str	r3, [r4, #8]
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	6022      	str	r2, [r4, #0]
 800a2b2:	701e      	strb	r6, [r3, #0]
 800a2b4:	6963      	ldr	r3, [r4, #20]
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	4283      	cmp	r3, r0
 800a2ba:	d004      	beq.n	800a2c6 <__swbuf_r+0x62>
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	07db      	lsls	r3, r3, #31
 800a2c0:	d506      	bpl.n	800a2d0 <__swbuf_r+0x6c>
 800a2c2:	2e0a      	cmp	r6, #10
 800a2c4:	d104      	bne.n	800a2d0 <__swbuf_r+0x6c>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f000 f919 	bl	800a500 <_fflush_r>
 800a2ce:	b988      	cbnz	r0, 800a2f4 <__swbuf_r+0x90>
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d4:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <__swbuf_r+0x9c>)
 800a2d6:	429c      	cmp	r4, r3
 800a2d8:	d101      	bne.n	800a2de <__swbuf_r+0x7a>
 800a2da:	68ac      	ldr	r4, [r5, #8]
 800a2dc:	e7cf      	b.n	800a27e <__swbuf_r+0x1a>
 800a2de:	4b09      	ldr	r3, [pc, #36]	; (800a304 <__swbuf_r+0xa0>)
 800a2e0:	429c      	cmp	r4, r3
 800a2e2:	bf08      	it	eq
 800a2e4:	68ec      	ldreq	r4, [r5, #12]
 800a2e6:	e7ca      	b.n	800a27e <__swbuf_r+0x1a>
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f000 f80c 	bl	800a308 <__swsetup_r>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d0cb      	beq.n	800a28c <__swbuf_r+0x28>
 800a2f4:	f04f 37ff 	mov.w	r7, #4294967295
 800a2f8:	e7ea      	b.n	800a2d0 <__swbuf_r+0x6c>
 800a2fa:	bf00      	nop
 800a2fc:	0800b4a8 	.word	0x0800b4a8
 800a300:	0800b4c8 	.word	0x0800b4c8
 800a304:	0800b488 	.word	0x0800b488

0800a308 <__swsetup_r>:
 800a308:	4b32      	ldr	r3, [pc, #200]	; (800a3d4 <__swsetup_r+0xcc>)
 800a30a:	b570      	push	{r4, r5, r6, lr}
 800a30c:	681d      	ldr	r5, [r3, #0]
 800a30e:	4606      	mov	r6, r0
 800a310:	460c      	mov	r4, r1
 800a312:	b125      	cbz	r5, 800a31e <__swsetup_r+0x16>
 800a314:	69ab      	ldr	r3, [r5, #24]
 800a316:	b913      	cbnz	r3, 800a31e <__swsetup_r+0x16>
 800a318:	4628      	mov	r0, r5
 800a31a:	f000 f985 	bl	800a628 <__sinit>
 800a31e:	4b2e      	ldr	r3, [pc, #184]	; (800a3d8 <__swsetup_r+0xd0>)
 800a320:	429c      	cmp	r4, r3
 800a322:	d10f      	bne.n	800a344 <__swsetup_r+0x3c>
 800a324:	686c      	ldr	r4, [r5, #4]
 800a326:	89a3      	ldrh	r3, [r4, #12]
 800a328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a32c:	0719      	lsls	r1, r3, #28
 800a32e:	d42c      	bmi.n	800a38a <__swsetup_r+0x82>
 800a330:	06dd      	lsls	r5, r3, #27
 800a332:	d411      	bmi.n	800a358 <__swsetup_r+0x50>
 800a334:	2309      	movs	r3, #9
 800a336:	6033      	str	r3, [r6, #0]
 800a338:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a33c:	81a3      	strh	r3, [r4, #12]
 800a33e:	f04f 30ff 	mov.w	r0, #4294967295
 800a342:	e03e      	b.n	800a3c2 <__swsetup_r+0xba>
 800a344:	4b25      	ldr	r3, [pc, #148]	; (800a3dc <__swsetup_r+0xd4>)
 800a346:	429c      	cmp	r4, r3
 800a348:	d101      	bne.n	800a34e <__swsetup_r+0x46>
 800a34a:	68ac      	ldr	r4, [r5, #8]
 800a34c:	e7eb      	b.n	800a326 <__swsetup_r+0x1e>
 800a34e:	4b24      	ldr	r3, [pc, #144]	; (800a3e0 <__swsetup_r+0xd8>)
 800a350:	429c      	cmp	r4, r3
 800a352:	bf08      	it	eq
 800a354:	68ec      	ldreq	r4, [r5, #12]
 800a356:	e7e6      	b.n	800a326 <__swsetup_r+0x1e>
 800a358:	0758      	lsls	r0, r3, #29
 800a35a:	d512      	bpl.n	800a382 <__swsetup_r+0x7a>
 800a35c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a35e:	b141      	cbz	r1, 800a372 <__swsetup_r+0x6a>
 800a360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a364:	4299      	cmp	r1, r3
 800a366:	d002      	beq.n	800a36e <__swsetup_r+0x66>
 800a368:	4630      	mov	r0, r6
 800a36a:	f7ff fdd5 	bl	8009f18 <_free_r>
 800a36e:	2300      	movs	r3, #0
 800a370:	6363      	str	r3, [r4, #52]	; 0x34
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	2300      	movs	r3, #0
 800a37c:	6063      	str	r3, [r4, #4]
 800a37e:	6923      	ldr	r3, [r4, #16]
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	f043 0308 	orr.w	r3, r3, #8
 800a388:	81a3      	strh	r3, [r4, #12]
 800a38a:	6923      	ldr	r3, [r4, #16]
 800a38c:	b94b      	cbnz	r3, 800a3a2 <__swsetup_r+0x9a>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a398:	d003      	beq.n	800a3a2 <__swsetup_r+0x9a>
 800a39a:	4621      	mov	r1, r4
 800a39c:	4630      	mov	r0, r6
 800a39e:	f000 fa09 	bl	800a7b4 <__smakebuf_r>
 800a3a2:	89a0      	ldrh	r0, [r4, #12]
 800a3a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3a8:	f010 0301 	ands.w	r3, r0, #1
 800a3ac:	d00a      	beq.n	800a3c4 <__swsetup_r+0xbc>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60a3      	str	r3, [r4, #8]
 800a3b2:	6963      	ldr	r3, [r4, #20]
 800a3b4:	425b      	negs	r3, r3
 800a3b6:	61a3      	str	r3, [r4, #24]
 800a3b8:	6923      	ldr	r3, [r4, #16]
 800a3ba:	b943      	cbnz	r3, 800a3ce <__swsetup_r+0xc6>
 800a3bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3c0:	d1ba      	bne.n	800a338 <__swsetup_r+0x30>
 800a3c2:	bd70      	pop	{r4, r5, r6, pc}
 800a3c4:	0781      	lsls	r1, r0, #30
 800a3c6:	bf58      	it	pl
 800a3c8:	6963      	ldrpl	r3, [r4, #20]
 800a3ca:	60a3      	str	r3, [r4, #8]
 800a3cc:	e7f4      	b.n	800a3b8 <__swsetup_r+0xb0>
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	e7f7      	b.n	800a3c2 <__swsetup_r+0xba>
 800a3d2:	bf00      	nop
 800a3d4:	20000014 	.word	0x20000014
 800a3d8:	0800b4a8 	.word	0x0800b4a8
 800a3dc:	0800b4c8 	.word	0x0800b4c8
 800a3e0:	0800b488 	.word	0x0800b488

0800a3e4 <abort>:
 800a3e4:	b508      	push	{r3, lr}
 800a3e6:	2006      	movs	r0, #6
 800a3e8:	f000 fa4c 	bl	800a884 <raise>
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	f7f7 ff95 	bl	800231c <_exit>
	...

0800a3f4 <__sflush_r>:
 800a3f4:	898a      	ldrh	r2, [r1, #12]
 800a3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	0710      	lsls	r0, r2, #28
 800a3fe:	460c      	mov	r4, r1
 800a400:	d458      	bmi.n	800a4b4 <__sflush_r+0xc0>
 800a402:	684b      	ldr	r3, [r1, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	dc05      	bgt.n	800a414 <__sflush_r+0x20>
 800a408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	dc02      	bgt.n	800a414 <__sflush_r+0x20>
 800a40e:	2000      	movs	r0, #0
 800a410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a416:	2e00      	cmp	r6, #0
 800a418:	d0f9      	beq.n	800a40e <__sflush_r+0x1a>
 800a41a:	2300      	movs	r3, #0
 800a41c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a420:	682f      	ldr	r7, [r5, #0]
 800a422:	602b      	str	r3, [r5, #0]
 800a424:	d032      	beq.n	800a48c <__sflush_r+0x98>
 800a426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a428:	89a3      	ldrh	r3, [r4, #12]
 800a42a:	075a      	lsls	r2, r3, #29
 800a42c:	d505      	bpl.n	800a43a <__sflush_r+0x46>
 800a42e:	6863      	ldr	r3, [r4, #4]
 800a430:	1ac0      	subs	r0, r0, r3
 800a432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a434:	b10b      	cbz	r3, 800a43a <__sflush_r+0x46>
 800a436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a438:	1ac0      	subs	r0, r0, r3
 800a43a:	2300      	movs	r3, #0
 800a43c:	4602      	mov	r2, r0
 800a43e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a440:	6a21      	ldr	r1, [r4, #32]
 800a442:	4628      	mov	r0, r5
 800a444:	47b0      	blx	r6
 800a446:	1c43      	adds	r3, r0, #1
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	d106      	bne.n	800a45a <__sflush_r+0x66>
 800a44c:	6829      	ldr	r1, [r5, #0]
 800a44e:	291d      	cmp	r1, #29
 800a450:	d82c      	bhi.n	800a4ac <__sflush_r+0xb8>
 800a452:	4a2a      	ldr	r2, [pc, #168]	; (800a4fc <__sflush_r+0x108>)
 800a454:	40ca      	lsrs	r2, r1
 800a456:	07d6      	lsls	r6, r2, #31
 800a458:	d528      	bpl.n	800a4ac <__sflush_r+0xb8>
 800a45a:	2200      	movs	r2, #0
 800a45c:	6062      	str	r2, [r4, #4]
 800a45e:	04d9      	lsls	r1, r3, #19
 800a460:	6922      	ldr	r2, [r4, #16]
 800a462:	6022      	str	r2, [r4, #0]
 800a464:	d504      	bpl.n	800a470 <__sflush_r+0x7c>
 800a466:	1c42      	adds	r2, r0, #1
 800a468:	d101      	bne.n	800a46e <__sflush_r+0x7a>
 800a46a:	682b      	ldr	r3, [r5, #0]
 800a46c:	b903      	cbnz	r3, 800a470 <__sflush_r+0x7c>
 800a46e:	6560      	str	r0, [r4, #84]	; 0x54
 800a470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a472:	602f      	str	r7, [r5, #0]
 800a474:	2900      	cmp	r1, #0
 800a476:	d0ca      	beq.n	800a40e <__sflush_r+0x1a>
 800a478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a47c:	4299      	cmp	r1, r3
 800a47e:	d002      	beq.n	800a486 <__sflush_r+0x92>
 800a480:	4628      	mov	r0, r5
 800a482:	f7ff fd49 	bl	8009f18 <_free_r>
 800a486:	2000      	movs	r0, #0
 800a488:	6360      	str	r0, [r4, #52]	; 0x34
 800a48a:	e7c1      	b.n	800a410 <__sflush_r+0x1c>
 800a48c:	6a21      	ldr	r1, [r4, #32]
 800a48e:	2301      	movs	r3, #1
 800a490:	4628      	mov	r0, r5
 800a492:	47b0      	blx	r6
 800a494:	1c41      	adds	r1, r0, #1
 800a496:	d1c7      	bne.n	800a428 <__sflush_r+0x34>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d0c4      	beq.n	800a428 <__sflush_r+0x34>
 800a49e:	2b1d      	cmp	r3, #29
 800a4a0:	d001      	beq.n	800a4a6 <__sflush_r+0xb2>
 800a4a2:	2b16      	cmp	r3, #22
 800a4a4:	d101      	bne.n	800a4aa <__sflush_r+0xb6>
 800a4a6:	602f      	str	r7, [r5, #0]
 800a4a8:	e7b1      	b.n	800a40e <__sflush_r+0x1a>
 800a4aa:	89a3      	ldrh	r3, [r4, #12]
 800a4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b0:	81a3      	strh	r3, [r4, #12]
 800a4b2:	e7ad      	b.n	800a410 <__sflush_r+0x1c>
 800a4b4:	690f      	ldr	r7, [r1, #16]
 800a4b6:	2f00      	cmp	r7, #0
 800a4b8:	d0a9      	beq.n	800a40e <__sflush_r+0x1a>
 800a4ba:	0793      	lsls	r3, r2, #30
 800a4bc:	680e      	ldr	r6, [r1, #0]
 800a4be:	bf08      	it	eq
 800a4c0:	694b      	ldreq	r3, [r1, #20]
 800a4c2:	600f      	str	r7, [r1, #0]
 800a4c4:	bf18      	it	ne
 800a4c6:	2300      	movne	r3, #0
 800a4c8:	eba6 0807 	sub.w	r8, r6, r7
 800a4cc:	608b      	str	r3, [r1, #8]
 800a4ce:	f1b8 0f00 	cmp.w	r8, #0
 800a4d2:	dd9c      	ble.n	800a40e <__sflush_r+0x1a>
 800a4d4:	6a21      	ldr	r1, [r4, #32]
 800a4d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4d8:	4643      	mov	r3, r8
 800a4da:	463a      	mov	r2, r7
 800a4dc:	4628      	mov	r0, r5
 800a4de:	47b0      	blx	r6
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	dc06      	bgt.n	800a4f2 <__sflush_r+0xfe>
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ea:	81a3      	strh	r3, [r4, #12]
 800a4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f0:	e78e      	b.n	800a410 <__sflush_r+0x1c>
 800a4f2:	4407      	add	r7, r0
 800a4f4:	eba8 0800 	sub.w	r8, r8, r0
 800a4f8:	e7e9      	b.n	800a4ce <__sflush_r+0xda>
 800a4fa:	bf00      	nop
 800a4fc:	20400001 	.word	0x20400001

0800a500 <_fflush_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	690b      	ldr	r3, [r1, #16]
 800a504:	4605      	mov	r5, r0
 800a506:	460c      	mov	r4, r1
 800a508:	b913      	cbnz	r3, 800a510 <_fflush_r+0x10>
 800a50a:	2500      	movs	r5, #0
 800a50c:	4628      	mov	r0, r5
 800a50e:	bd38      	pop	{r3, r4, r5, pc}
 800a510:	b118      	cbz	r0, 800a51a <_fflush_r+0x1a>
 800a512:	6983      	ldr	r3, [r0, #24]
 800a514:	b90b      	cbnz	r3, 800a51a <_fflush_r+0x1a>
 800a516:	f000 f887 	bl	800a628 <__sinit>
 800a51a:	4b14      	ldr	r3, [pc, #80]	; (800a56c <_fflush_r+0x6c>)
 800a51c:	429c      	cmp	r4, r3
 800a51e:	d11b      	bne.n	800a558 <_fflush_r+0x58>
 800a520:	686c      	ldr	r4, [r5, #4]
 800a522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0ef      	beq.n	800a50a <_fflush_r+0xa>
 800a52a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a52c:	07d0      	lsls	r0, r2, #31
 800a52e:	d404      	bmi.n	800a53a <_fflush_r+0x3a>
 800a530:	0599      	lsls	r1, r3, #22
 800a532:	d402      	bmi.n	800a53a <_fflush_r+0x3a>
 800a534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a536:	f000 f915 	bl	800a764 <__retarget_lock_acquire_recursive>
 800a53a:	4628      	mov	r0, r5
 800a53c:	4621      	mov	r1, r4
 800a53e:	f7ff ff59 	bl	800a3f4 <__sflush_r>
 800a542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a544:	07da      	lsls	r2, r3, #31
 800a546:	4605      	mov	r5, r0
 800a548:	d4e0      	bmi.n	800a50c <_fflush_r+0xc>
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	059b      	lsls	r3, r3, #22
 800a54e:	d4dd      	bmi.n	800a50c <_fflush_r+0xc>
 800a550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a552:	f000 f908 	bl	800a766 <__retarget_lock_release_recursive>
 800a556:	e7d9      	b.n	800a50c <_fflush_r+0xc>
 800a558:	4b05      	ldr	r3, [pc, #20]	; (800a570 <_fflush_r+0x70>)
 800a55a:	429c      	cmp	r4, r3
 800a55c:	d101      	bne.n	800a562 <_fflush_r+0x62>
 800a55e:	68ac      	ldr	r4, [r5, #8]
 800a560:	e7df      	b.n	800a522 <_fflush_r+0x22>
 800a562:	4b04      	ldr	r3, [pc, #16]	; (800a574 <_fflush_r+0x74>)
 800a564:	429c      	cmp	r4, r3
 800a566:	bf08      	it	eq
 800a568:	68ec      	ldreq	r4, [r5, #12]
 800a56a:	e7da      	b.n	800a522 <_fflush_r+0x22>
 800a56c:	0800b4a8 	.word	0x0800b4a8
 800a570:	0800b4c8 	.word	0x0800b4c8
 800a574:	0800b488 	.word	0x0800b488

0800a578 <std>:
 800a578:	2300      	movs	r3, #0
 800a57a:	b510      	push	{r4, lr}
 800a57c:	4604      	mov	r4, r0
 800a57e:	e9c0 3300 	strd	r3, r3, [r0]
 800a582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a586:	6083      	str	r3, [r0, #8]
 800a588:	8181      	strh	r1, [r0, #12]
 800a58a:	6643      	str	r3, [r0, #100]	; 0x64
 800a58c:	81c2      	strh	r2, [r0, #14]
 800a58e:	6183      	str	r3, [r0, #24]
 800a590:	4619      	mov	r1, r3
 800a592:	2208      	movs	r2, #8
 800a594:	305c      	adds	r0, #92	; 0x5c
 800a596:	f7fd feb7 	bl	8008308 <memset>
 800a59a:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <std+0x38>)
 800a59c:	6263      	str	r3, [r4, #36]	; 0x24
 800a59e:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <std+0x3c>)
 800a5a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5a2:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <std+0x40>)
 800a5a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5a6:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <std+0x44>)
 800a5a8:	6224      	str	r4, [r4, #32]
 800a5aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a5ac:	bd10      	pop	{r4, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0800a8bd 	.word	0x0800a8bd
 800a5b4:	0800a8df 	.word	0x0800a8df
 800a5b8:	0800a917 	.word	0x0800a917
 800a5bc:	0800a93b 	.word	0x0800a93b

0800a5c0 <_cleanup_r>:
 800a5c0:	4901      	ldr	r1, [pc, #4]	; (800a5c8 <_cleanup_r+0x8>)
 800a5c2:	f000 b8af 	b.w	800a724 <_fwalk_reent>
 800a5c6:	bf00      	nop
 800a5c8:	0800a501 	.word	0x0800a501

0800a5cc <__sfmoreglue>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	2268      	movs	r2, #104	; 0x68
 800a5d0:	1e4d      	subs	r5, r1, #1
 800a5d2:	4355      	muls	r5, r2
 800a5d4:	460e      	mov	r6, r1
 800a5d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5da:	f7fe fbbd 	bl	8008d58 <_malloc_r>
 800a5de:	4604      	mov	r4, r0
 800a5e0:	b140      	cbz	r0, 800a5f4 <__sfmoreglue+0x28>
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	e9c0 1600 	strd	r1, r6, [r0]
 800a5e8:	300c      	adds	r0, #12
 800a5ea:	60a0      	str	r0, [r4, #8]
 800a5ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5f0:	f7fd fe8a 	bl	8008308 <memset>
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}

0800a5f8 <__sfp_lock_acquire>:
 800a5f8:	4801      	ldr	r0, [pc, #4]	; (800a600 <__sfp_lock_acquire+0x8>)
 800a5fa:	f000 b8b3 	b.w	800a764 <__retarget_lock_acquire_recursive>
 800a5fe:	bf00      	nop
 800a600:	20000771 	.word	0x20000771

0800a604 <__sfp_lock_release>:
 800a604:	4801      	ldr	r0, [pc, #4]	; (800a60c <__sfp_lock_release+0x8>)
 800a606:	f000 b8ae 	b.w	800a766 <__retarget_lock_release_recursive>
 800a60a:	bf00      	nop
 800a60c:	20000771 	.word	0x20000771

0800a610 <__sinit_lock_acquire>:
 800a610:	4801      	ldr	r0, [pc, #4]	; (800a618 <__sinit_lock_acquire+0x8>)
 800a612:	f000 b8a7 	b.w	800a764 <__retarget_lock_acquire_recursive>
 800a616:	bf00      	nop
 800a618:	20000772 	.word	0x20000772

0800a61c <__sinit_lock_release>:
 800a61c:	4801      	ldr	r0, [pc, #4]	; (800a624 <__sinit_lock_release+0x8>)
 800a61e:	f000 b8a2 	b.w	800a766 <__retarget_lock_release_recursive>
 800a622:	bf00      	nop
 800a624:	20000772 	.word	0x20000772

0800a628 <__sinit>:
 800a628:	b510      	push	{r4, lr}
 800a62a:	4604      	mov	r4, r0
 800a62c:	f7ff fff0 	bl	800a610 <__sinit_lock_acquire>
 800a630:	69a3      	ldr	r3, [r4, #24]
 800a632:	b11b      	cbz	r3, 800a63c <__sinit+0x14>
 800a634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a638:	f7ff bff0 	b.w	800a61c <__sinit_lock_release>
 800a63c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a640:	6523      	str	r3, [r4, #80]	; 0x50
 800a642:	4b13      	ldr	r3, [pc, #76]	; (800a690 <__sinit+0x68>)
 800a644:	4a13      	ldr	r2, [pc, #76]	; (800a694 <__sinit+0x6c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	62a2      	str	r2, [r4, #40]	; 0x28
 800a64a:	42a3      	cmp	r3, r4
 800a64c:	bf04      	itt	eq
 800a64e:	2301      	moveq	r3, #1
 800a650:	61a3      	streq	r3, [r4, #24]
 800a652:	4620      	mov	r0, r4
 800a654:	f000 f820 	bl	800a698 <__sfp>
 800a658:	6060      	str	r0, [r4, #4]
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 f81c 	bl	800a698 <__sfp>
 800a660:	60a0      	str	r0, [r4, #8]
 800a662:	4620      	mov	r0, r4
 800a664:	f000 f818 	bl	800a698 <__sfp>
 800a668:	2200      	movs	r2, #0
 800a66a:	60e0      	str	r0, [r4, #12]
 800a66c:	2104      	movs	r1, #4
 800a66e:	6860      	ldr	r0, [r4, #4]
 800a670:	f7ff ff82 	bl	800a578 <std>
 800a674:	68a0      	ldr	r0, [r4, #8]
 800a676:	2201      	movs	r2, #1
 800a678:	2109      	movs	r1, #9
 800a67a:	f7ff ff7d 	bl	800a578 <std>
 800a67e:	68e0      	ldr	r0, [r4, #12]
 800a680:	2202      	movs	r2, #2
 800a682:	2112      	movs	r1, #18
 800a684:	f7ff ff78 	bl	800a578 <std>
 800a688:	2301      	movs	r3, #1
 800a68a:	61a3      	str	r3, [r4, #24]
 800a68c:	e7d2      	b.n	800a634 <__sinit+0xc>
 800a68e:	bf00      	nop
 800a690:	0800b224 	.word	0x0800b224
 800a694:	0800a5c1 	.word	0x0800a5c1

0800a698 <__sfp>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	4607      	mov	r7, r0
 800a69c:	f7ff ffac 	bl	800a5f8 <__sfp_lock_acquire>
 800a6a0:	4b1e      	ldr	r3, [pc, #120]	; (800a71c <__sfp+0x84>)
 800a6a2:	681e      	ldr	r6, [r3, #0]
 800a6a4:	69b3      	ldr	r3, [r6, #24]
 800a6a6:	b913      	cbnz	r3, 800a6ae <__sfp+0x16>
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f7ff ffbd 	bl	800a628 <__sinit>
 800a6ae:	3648      	adds	r6, #72	; 0x48
 800a6b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	d503      	bpl.n	800a6c0 <__sfp+0x28>
 800a6b8:	6833      	ldr	r3, [r6, #0]
 800a6ba:	b30b      	cbz	r3, 800a700 <__sfp+0x68>
 800a6bc:	6836      	ldr	r6, [r6, #0]
 800a6be:	e7f7      	b.n	800a6b0 <__sfp+0x18>
 800a6c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6c4:	b9d5      	cbnz	r5, 800a6fc <__sfp+0x64>
 800a6c6:	4b16      	ldr	r3, [pc, #88]	; (800a720 <__sfp+0x88>)
 800a6c8:	60e3      	str	r3, [r4, #12]
 800a6ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6ce:	6665      	str	r5, [r4, #100]	; 0x64
 800a6d0:	f000 f847 	bl	800a762 <__retarget_lock_init_recursive>
 800a6d4:	f7ff ff96 	bl	800a604 <__sfp_lock_release>
 800a6d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6e0:	6025      	str	r5, [r4, #0]
 800a6e2:	61a5      	str	r5, [r4, #24]
 800a6e4:	2208      	movs	r2, #8
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6ec:	f7fd fe0c 	bl	8008308 <memset>
 800a6f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6fc:	3468      	adds	r4, #104	; 0x68
 800a6fe:	e7d9      	b.n	800a6b4 <__sfp+0x1c>
 800a700:	2104      	movs	r1, #4
 800a702:	4638      	mov	r0, r7
 800a704:	f7ff ff62 	bl	800a5cc <__sfmoreglue>
 800a708:	4604      	mov	r4, r0
 800a70a:	6030      	str	r0, [r6, #0]
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d1d5      	bne.n	800a6bc <__sfp+0x24>
 800a710:	f7ff ff78 	bl	800a604 <__sfp_lock_release>
 800a714:	230c      	movs	r3, #12
 800a716:	603b      	str	r3, [r7, #0]
 800a718:	e7ee      	b.n	800a6f8 <__sfp+0x60>
 800a71a:	bf00      	nop
 800a71c:	0800b224 	.word	0x0800b224
 800a720:	ffff0001 	.word	0xffff0001

0800a724 <_fwalk_reent>:
 800a724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a728:	4606      	mov	r6, r0
 800a72a:	4688      	mov	r8, r1
 800a72c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a730:	2700      	movs	r7, #0
 800a732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a736:	f1b9 0901 	subs.w	r9, r9, #1
 800a73a:	d505      	bpl.n	800a748 <_fwalk_reent+0x24>
 800a73c:	6824      	ldr	r4, [r4, #0]
 800a73e:	2c00      	cmp	r4, #0
 800a740:	d1f7      	bne.n	800a732 <_fwalk_reent+0xe>
 800a742:	4638      	mov	r0, r7
 800a744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a748:	89ab      	ldrh	r3, [r5, #12]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d907      	bls.n	800a75e <_fwalk_reent+0x3a>
 800a74e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a752:	3301      	adds	r3, #1
 800a754:	d003      	beq.n	800a75e <_fwalk_reent+0x3a>
 800a756:	4629      	mov	r1, r5
 800a758:	4630      	mov	r0, r6
 800a75a:	47c0      	blx	r8
 800a75c:	4307      	orrs	r7, r0
 800a75e:	3568      	adds	r5, #104	; 0x68
 800a760:	e7e9      	b.n	800a736 <_fwalk_reent+0x12>

0800a762 <__retarget_lock_init_recursive>:
 800a762:	4770      	bx	lr

0800a764 <__retarget_lock_acquire_recursive>:
 800a764:	4770      	bx	lr

0800a766 <__retarget_lock_release_recursive>:
 800a766:	4770      	bx	lr

0800a768 <__swhatbuf_r>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	460e      	mov	r6, r1
 800a76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a770:	2900      	cmp	r1, #0
 800a772:	b096      	sub	sp, #88	; 0x58
 800a774:	4614      	mov	r4, r2
 800a776:	461d      	mov	r5, r3
 800a778:	da08      	bge.n	800a78c <__swhatbuf_r+0x24>
 800a77a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	602a      	str	r2, [r5, #0]
 800a782:	061a      	lsls	r2, r3, #24
 800a784:	d410      	bmi.n	800a7a8 <__swhatbuf_r+0x40>
 800a786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a78a:	e00e      	b.n	800a7aa <__swhatbuf_r+0x42>
 800a78c:	466a      	mov	r2, sp
 800a78e:	f000 f8fb 	bl	800a988 <_fstat_r>
 800a792:	2800      	cmp	r0, #0
 800a794:	dbf1      	blt.n	800a77a <__swhatbuf_r+0x12>
 800a796:	9a01      	ldr	r2, [sp, #4]
 800a798:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a79c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7a0:	425a      	negs	r2, r3
 800a7a2:	415a      	adcs	r2, r3
 800a7a4:	602a      	str	r2, [r5, #0]
 800a7a6:	e7ee      	b.n	800a786 <__swhatbuf_r+0x1e>
 800a7a8:	2340      	movs	r3, #64	; 0x40
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	b016      	add	sp, #88	; 0x58
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7b4 <__smakebuf_r>:
 800a7b4:	898b      	ldrh	r3, [r1, #12]
 800a7b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7b8:	079d      	lsls	r5, r3, #30
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460c      	mov	r4, r1
 800a7be:	d507      	bpl.n	800a7d0 <__smakebuf_r+0x1c>
 800a7c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	6123      	str	r3, [r4, #16]
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	6163      	str	r3, [r4, #20]
 800a7cc:	b002      	add	sp, #8
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	ab01      	add	r3, sp, #4
 800a7d2:	466a      	mov	r2, sp
 800a7d4:	f7ff ffc8 	bl	800a768 <__swhatbuf_r>
 800a7d8:	9900      	ldr	r1, [sp, #0]
 800a7da:	4605      	mov	r5, r0
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f7fe fabb 	bl	8008d58 <_malloc_r>
 800a7e2:	b948      	cbnz	r0, 800a7f8 <__smakebuf_r+0x44>
 800a7e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e8:	059a      	lsls	r2, r3, #22
 800a7ea:	d4ef      	bmi.n	800a7cc <__smakebuf_r+0x18>
 800a7ec:	f023 0303 	bic.w	r3, r3, #3
 800a7f0:	f043 0302 	orr.w	r3, r3, #2
 800a7f4:	81a3      	strh	r3, [r4, #12]
 800a7f6:	e7e3      	b.n	800a7c0 <__smakebuf_r+0xc>
 800a7f8:	4b0d      	ldr	r3, [pc, #52]	; (800a830 <__smakebuf_r+0x7c>)
 800a7fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	6020      	str	r0, [r4, #0]
 800a800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	9b00      	ldr	r3, [sp, #0]
 800a808:	6163      	str	r3, [r4, #20]
 800a80a:	9b01      	ldr	r3, [sp, #4]
 800a80c:	6120      	str	r0, [r4, #16]
 800a80e:	b15b      	cbz	r3, 800a828 <__smakebuf_r+0x74>
 800a810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a814:	4630      	mov	r0, r6
 800a816:	f000 f8c9 	bl	800a9ac <_isatty_r>
 800a81a:	b128      	cbz	r0, 800a828 <__smakebuf_r+0x74>
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	f023 0303 	bic.w	r3, r3, #3
 800a822:	f043 0301 	orr.w	r3, r3, #1
 800a826:	81a3      	strh	r3, [r4, #12]
 800a828:	89a0      	ldrh	r0, [r4, #12]
 800a82a:	4305      	orrs	r5, r0
 800a82c:	81a5      	strh	r5, [r4, #12]
 800a82e:	e7cd      	b.n	800a7cc <__smakebuf_r+0x18>
 800a830:	0800a5c1 	.word	0x0800a5c1

0800a834 <_raise_r>:
 800a834:	291f      	cmp	r1, #31
 800a836:	b538      	push	{r3, r4, r5, lr}
 800a838:	4604      	mov	r4, r0
 800a83a:	460d      	mov	r5, r1
 800a83c:	d904      	bls.n	800a848 <_raise_r+0x14>
 800a83e:	2316      	movs	r3, #22
 800a840:	6003      	str	r3, [r0, #0]
 800a842:	f04f 30ff 	mov.w	r0, #4294967295
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a84a:	b112      	cbz	r2, 800a852 <_raise_r+0x1e>
 800a84c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a850:	b94b      	cbnz	r3, 800a866 <_raise_r+0x32>
 800a852:	4620      	mov	r0, r4
 800a854:	f000 f830 	bl	800a8b8 <_getpid_r>
 800a858:	462a      	mov	r2, r5
 800a85a:	4601      	mov	r1, r0
 800a85c:	4620      	mov	r0, r4
 800a85e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a862:	f000 b817 	b.w	800a894 <_kill_r>
 800a866:	2b01      	cmp	r3, #1
 800a868:	d00a      	beq.n	800a880 <_raise_r+0x4c>
 800a86a:	1c59      	adds	r1, r3, #1
 800a86c:	d103      	bne.n	800a876 <_raise_r+0x42>
 800a86e:	2316      	movs	r3, #22
 800a870:	6003      	str	r3, [r0, #0]
 800a872:	2001      	movs	r0, #1
 800a874:	e7e7      	b.n	800a846 <_raise_r+0x12>
 800a876:	2400      	movs	r4, #0
 800a878:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a87c:	4628      	mov	r0, r5
 800a87e:	4798      	blx	r3
 800a880:	2000      	movs	r0, #0
 800a882:	e7e0      	b.n	800a846 <_raise_r+0x12>

0800a884 <raise>:
 800a884:	4b02      	ldr	r3, [pc, #8]	; (800a890 <raise+0xc>)
 800a886:	4601      	mov	r1, r0
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	f7ff bfd3 	b.w	800a834 <_raise_r>
 800a88e:	bf00      	nop
 800a890:	20000014 	.word	0x20000014

0800a894 <_kill_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	4d07      	ldr	r5, [pc, #28]	; (800a8b4 <_kill_r+0x20>)
 800a898:	2300      	movs	r3, #0
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	4611      	mov	r1, r2
 800a8a0:	602b      	str	r3, [r5, #0]
 800a8a2:	f7f7 fd2b 	bl	80022fc <_kill>
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	d102      	bne.n	800a8b0 <_kill_r+0x1c>
 800a8aa:	682b      	ldr	r3, [r5, #0]
 800a8ac:	b103      	cbz	r3, 800a8b0 <_kill_r+0x1c>
 800a8ae:	6023      	str	r3, [r4, #0]
 800a8b0:	bd38      	pop	{r3, r4, r5, pc}
 800a8b2:	bf00      	nop
 800a8b4:	2000076c 	.word	0x2000076c

0800a8b8 <_getpid_r>:
 800a8b8:	f7f7 bd18 	b.w	80022ec <_getpid>

0800a8bc <__sread>:
 800a8bc:	b510      	push	{r4, lr}
 800a8be:	460c      	mov	r4, r1
 800a8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c4:	f000 f894 	bl	800a9f0 <_read_r>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	bfab      	itete	ge
 800a8cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a8d0:	181b      	addge	r3, r3, r0
 800a8d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8d6:	bfac      	ite	ge
 800a8d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8da:	81a3      	strhlt	r3, [r4, #12]
 800a8dc:	bd10      	pop	{r4, pc}

0800a8de <__swrite>:
 800a8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e2:	461f      	mov	r7, r3
 800a8e4:	898b      	ldrh	r3, [r1, #12]
 800a8e6:	05db      	lsls	r3, r3, #23
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	d505      	bpl.n	800a8fc <__swrite+0x1e>
 800a8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f000 f868 	bl	800a9cc <_lseek_r>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	4632      	mov	r2, r6
 800a90a:	463b      	mov	r3, r7
 800a90c:	4628      	mov	r0, r5
 800a90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a912:	f000 b817 	b.w	800a944 <_write_r>

0800a916 <__sseek>:
 800a916:	b510      	push	{r4, lr}
 800a918:	460c      	mov	r4, r1
 800a91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91e:	f000 f855 	bl	800a9cc <_lseek_r>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	bf15      	itete	ne
 800a928:	6560      	strne	r0, [r4, #84]	; 0x54
 800a92a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a92e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a932:	81a3      	strheq	r3, [r4, #12]
 800a934:	bf18      	it	ne
 800a936:	81a3      	strhne	r3, [r4, #12]
 800a938:	bd10      	pop	{r4, pc}

0800a93a <__sclose>:
 800a93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93e:	f000 b813 	b.w	800a968 <_close_r>
	...

0800a944 <_write_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4d07      	ldr	r5, [pc, #28]	; (800a964 <_write_r+0x20>)
 800a948:	4604      	mov	r4, r0
 800a94a:	4608      	mov	r0, r1
 800a94c:	4611      	mov	r1, r2
 800a94e:	2200      	movs	r2, #0
 800a950:	602a      	str	r2, [r5, #0]
 800a952:	461a      	mov	r2, r3
 800a954:	f7f7 fd09 	bl	800236a <_write>
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d102      	bne.n	800a962 <_write_r+0x1e>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	b103      	cbz	r3, 800a962 <_write_r+0x1e>
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	2000076c 	.word	0x2000076c

0800a968 <_close_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4d06      	ldr	r5, [pc, #24]	; (800a984 <_close_r+0x1c>)
 800a96c:	2300      	movs	r3, #0
 800a96e:	4604      	mov	r4, r0
 800a970:	4608      	mov	r0, r1
 800a972:	602b      	str	r3, [r5, #0]
 800a974:	f7f7 fd15 	bl	80023a2 <_close>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_close_r+0x1a>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_close_r+0x1a>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	2000076c 	.word	0x2000076c

0800a988 <_fstat_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4d07      	ldr	r5, [pc, #28]	; (800a9a8 <_fstat_r+0x20>)
 800a98c:	2300      	movs	r3, #0
 800a98e:	4604      	mov	r4, r0
 800a990:	4608      	mov	r0, r1
 800a992:	4611      	mov	r1, r2
 800a994:	602b      	str	r3, [r5, #0]
 800a996:	f7f7 fd10 	bl	80023ba <_fstat>
 800a99a:	1c43      	adds	r3, r0, #1
 800a99c:	d102      	bne.n	800a9a4 <_fstat_r+0x1c>
 800a99e:	682b      	ldr	r3, [r5, #0]
 800a9a0:	b103      	cbz	r3, 800a9a4 <_fstat_r+0x1c>
 800a9a2:	6023      	str	r3, [r4, #0]
 800a9a4:	bd38      	pop	{r3, r4, r5, pc}
 800a9a6:	bf00      	nop
 800a9a8:	2000076c 	.word	0x2000076c

0800a9ac <_isatty_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4d06      	ldr	r5, [pc, #24]	; (800a9c8 <_isatty_r+0x1c>)
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	4608      	mov	r0, r1
 800a9b6:	602b      	str	r3, [r5, #0]
 800a9b8:	f7f7 fd0f 	bl	80023da <_isatty>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d102      	bne.n	800a9c6 <_isatty_r+0x1a>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	b103      	cbz	r3, 800a9c6 <_isatty_r+0x1a>
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	2000076c 	.word	0x2000076c

0800a9cc <_lseek_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d07      	ldr	r5, [pc, #28]	; (800a9ec <_lseek_r+0x20>)
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	4608      	mov	r0, r1
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	602a      	str	r2, [r5, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	f7f7 fd08 	bl	80023f0 <_lseek>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	d102      	bne.n	800a9ea <_lseek_r+0x1e>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	b103      	cbz	r3, 800a9ea <_lseek_r+0x1e>
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	2000076c 	.word	0x2000076c

0800a9f0 <_read_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4d07      	ldr	r5, [pc, #28]	; (800aa10 <_read_r+0x20>)
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	602a      	str	r2, [r5, #0]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f7f7 fc96 	bl	8002330 <_read>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	d102      	bne.n	800aa0e <_read_r+0x1e>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	b103      	cbz	r3, 800aa0e <_read_r+0x1e>
 800aa0c:	6023      	str	r3, [r4, #0]
 800aa0e:	bd38      	pop	{r3, r4, r5, pc}
 800aa10:	2000076c 	.word	0x2000076c

0800aa14 <_init>:
 800aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa16:	bf00      	nop
 800aa18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa1a:	bc08      	pop	{r3}
 800aa1c:	469e      	mov	lr, r3
 800aa1e:	4770      	bx	lr

0800aa20 <_fini>:
 800aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa22:	bf00      	nop
 800aa24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa26:	bc08      	pop	{r3}
 800aa28:	469e      	mov	lr, r3
 800aa2a:	4770      	bx	lr
