
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e00  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006760  08006760  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006768  08006768  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006768  08006768  00016768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800676c  0800676c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa8  20000014  08006784  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  08006784  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae32  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003745  00000000  00000000  0003ae76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  0003fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027fe1  00000000  00000000  00040f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf16  00000000  00000000  00068f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3be0  00000000  00000000  00084e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178a37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab4  00000000  00000000  00178a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005fb0 	.word	0x08005fb0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	08005fb0 	.word	0x08005fb0

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af04      	add	r7, sp, #16
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
 800053a:	9302      	str	r3, [sp, #8]
 800053c:	2301      	movs	r3, #1
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2301      	movs	r3, #1
 8000546:	2200      	movs	r2, #0
 8000548:	2178      	movs	r1, #120	; 0x78
 800054a:	4803      	ldr	r0, [pc, #12]	; (8000558 <ssd1306_WriteCommand+0x2c>)
 800054c:	f001 fc08 	bl	8001d60 <HAL_I2C_Mem_Write>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000438 	.word	0x20000438

0800055c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af04      	add	r7, sp, #16
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b29b      	uxth	r3, r3
 800056a:	f04f 32ff 	mov.w	r2, #4294967295
 800056e:	9202      	str	r2, [sp, #8]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2301      	movs	r3, #1
 8000578:	2240      	movs	r2, #64	; 0x40
 800057a:	2178      	movs	r1, #120	; 0x78
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <ssd1306_WriteData+0x30>)
 800057e:	f001 fbef 	bl	8001d60 <HAL_I2C_Mem_Write>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000438 	.word	0x20000438

08000590 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000594:	f7ff ffc2 	bl	800051c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000598:	2064      	movs	r0, #100	; 0x64
 800059a:	f000 ffc3 	bl	8001524 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f9da 	bl	8000958 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80005a4:	2020      	movs	r0, #32
 80005a6:	f7ff ffc1 	bl	800052c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80005aa:	2000      	movs	r0, #0
 80005ac:	f7ff ffbe 	bl	800052c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005b0:	20b0      	movs	r0, #176	; 0xb0
 80005b2:	f7ff ffbb 	bl	800052c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80005b6:	20c8      	movs	r0, #200	; 0xc8
 80005b8:	f7ff ffb8 	bl	800052c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80005bc:	2000      	movs	r0, #0
 80005be:	f7ff ffb5 	bl	800052c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80005c2:	2010      	movs	r0, #16
 80005c4:	f7ff ffb2 	bl	800052c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80005c8:	2040      	movs	r0, #64	; 0x40
 80005ca:	f7ff ffaf 	bl	800052c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80005ce:	20ff      	movs	r0, #255	; 0xff
 80005d0:	f000 f9ae 	bl	8000930 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80005d4:	20a1      	movs	r0, #161	; 0xa1
 80005d6:	f7ff ffa9 	bl	800052c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80005da:	20a6      	movs	r0, #166	; 0xa6
 80005dc:	f7ff ffa6 	bl	800052c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80005e0:	20a8      	movs	r0, #168	; 0xa8
 80005e2:	f7ff ffa3 	bl	800052c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80005e6:	203f      	movs	r0, #63	; 0x3f
 80005e8:	f7ff ffa0 	bl	800052c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005ec:	20a4      	movs	r0, #164	; 0xa4
 80005ee:	f7ff ff9d 	bl	800052c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80005f2:	20d3      	movs	r0, #211	; 0xd3
 80005f4:	f7ff ff9a 	bl	800052c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff ff97 	bl	800052c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80005fe:	20d5      	movs	r0, #213	; 0xd5
 8000600:	f7ff ff94 	bl	800052c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000604:	20f0      	movs	r0, #240	; 0xf0
 8000606:	f7ff ff91 	bl	800052c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800060a:	20d9      	movs	r0, #217	; 0xd9
 800060c:	f7ff ff8e 	bl	800052c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000610:	2022      	movs	r0, #34	; 0x22
 8000612:	f7ff ff8b 	bl	800052c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000616:	20da      	movs	r0, #218	; 0xda
 8000618:	f7ff ff88 	bl	800052c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800061c:	2012      	movs	r0, #18
 800061e:	f7ff ff85 	bl	800052c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000622:	20db      	movs	r0, #219	; 0xdb
 8000624:	f7ff ff82 	bl	800052c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000628:	2020      	movs	r0, #32
 800062a:	f7ff ff7f 	bl	800052c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800062e:	208d      	movs	r0, #141	; 0x8d
 8000630:	f7ff ff7c 	bl	800052c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000634:	2014      	movs	r0, #20
 8000636:	f7ff ff79 	bl	800052c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800063a:	2001      	movs	r0, #1
 800063c:	f000 f98c 	bl	8000958 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000640:	2000      	movs	r0, #0
 8000642:	f000 f80f 	bl	8000664 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000646:	f000 f831 	bl	80006ac <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <ssd1306_Init+0xd0>)
 800064c:	2200      	movs	r2, #0
 800064e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <ssd1306_Init+0xd0>)
 8000652:	2200      	movs	r2, #0
 8000654:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000656:	4b02      	ldr	r3, [pc, #8]	; (8000660 <ssd1306_Init+0xd0>)
 8000658:	2201      	movs	r2, #1
 800065a:	711a      	strb	r2, [r3, #4]
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000430 	.word	0x20000430

08000664 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	e00d      	b.n	8000690 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d101      	bne.n	800067e <ssd1306_Fill+0x1a>
 800067a:	2100      	movs	r1, #0
 800067c:	e000      	b.n	8000680 <ssd1306_Fill+0x1c>
 800067e:	21ff      	movs	r1, #255	; 0xff
 8000680:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <ssd1306_Fill+0x44>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	460a      	mov	r2, r1
 8000688:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	3301      	adds	r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000696:	d3ed      	bcc.n	8000674 <ssd1306_Fill+0x10>
    }
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000030 	.word	0x20000030

080006ac <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	71fb      	strb	r3, [r7, #7]
 80006b6:	e016      	b.n	80006e6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	3b50      	subs	r3, #80	; 0x50
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff34 	bl	800052c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ff31 	bl	800052c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80006ca:	2010      	movs	r0, #16
 80006cc:	f7ff ff2e 	bl	800052c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	01db      	lsls	r3, r3, #7
 80006d4:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <ssd1306_UpdateScreen+0x4c>)
 80006d6:	4413      	add	r3, r2
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff3e 	bl	800055c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	3301      	adds	r3, #1
 80006e4:	71fb      	strb	r3, [r7, #7]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b07      	cmp	r3, #7
 80006ea:	d9e5      	bls.n	80006b8 <ssd1306_UpdateScreen+0xc>
    }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000030 	.word	0x20000030

080006fc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
 8000706:	460b      	mov	r3, r1
 8000708:	71bb      	strb	r3, [r7, #6]
 800070a:	4613      	mov	r3, r2
 800070c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	db3d      	blt.n	8000792 <ssd1306_DrawPixel+0x96>
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	2b3f      	cmp	r3, #63	; 0x3f
 800071a:	d83a      	bhi.n	8000792 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800071c:	797b      	ldrb	r3, [r7, #5]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d11a      	bne.n	8000758 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000722:	79fa      	ldrb	r2, [r7, #7]
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	08db      	lsrs	r3, r3, #3
 8000728:	b2d8      	uxtb	r0, r3
 800072a:	4603      	mov	r3, r0
 800072c:	01db      	lsls	r3, r3, #7
 800072e:	4413      	add	r3, r2
 8000730:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <ssd1306_DrawPixel+0xa4>)
 8000732:	5cd3      	ldrb	r3, [r2, r3]
 8000734:	b25a      	sxtb	r2, r3
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	f003 0307 	and.w	r3, r3, #7
 800073c:	2101      	movs	r1, #1
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	b25b      	sxtb	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b259      	sxtb	r1, r3
 8000748:	79fa      	ldrb	r2, [r7, #7]
 800074a:	4603      	mov	r3, r0
 800074c:	01db      	lsls	r3, r3, #7
 800074e:	4413      	add	r3, r2
 8000750:	b2c9      	uxtb	r1, r1
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <ssd1306_DrawPixel+0xa4>)
 8000754:	54d1      	strb	r1, [r2, r3]
 8000756:	e01d      	b.n	8000794 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000758:	79fa      	ldrb	r2, [r7, #7]
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	08db      	lsrs	r3, r3, #3
 800075e:	b2d8      	uxtb	r0, r3
 8000760:	4603      	mov	r3, r0
 8000762:	01db      	lsls	r3, r3, #7
 8000764:	4413      	add	r3, r2
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <ssd1306_DrawPixel+0xa4>)
 8000768:	5cd3      	ldrb	r3, [r2, r3]
 800076a:	b25a      	sxtb	r2, r3
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	2101      	movs	r1, #1
 8000774:	fa01 f303 	lsl.w	r3, r1, r3
 8000778:	b25b      	sxtb	r3, r3
 800077a:	43db      	mvns	r3, r3
 800077c:	b25b      	sxtb	r3, r3
 800077e:	4013      	ands	r3, r2
 8000780:	b259      	sxtb	r1, r3
 8000782:	79fa      	ldrb	r2, [r7, #7]
 8000784:	4603      	mov	r3, r0
 8000786:	01db      	lsls	r3, r3, #7
 8000788:	4413      	add	r3, r2
 800078a:	b2c9      	uxtb	r1, r1
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <ssd1306_DrawPixel+0xa4>)
 800078e:	54d1      	strb	r1, [r2, r3]
 8000790:	e000      	b.n	8000794 <ssd1306_DrawPixel+0x98>
        return;
 8000792:	bf00      	nop
    }
}
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000030 	.word	0x20000030

080007a4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4604      	mov	r4, r0
 80007ac:	1d38      	adds	r0, r7, #4
 80007ae:	e880 0006 	stmia.w	r0, {r1, r2}
 80007b2:	461a      	mov	r2, r3
 80007b4:	4623      	mov	r3, r4
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	4613      	mov	r3, r2
 80007ba:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2b1f      	cmp	r3, #31
 80007c0:	d902      	bls.n	80007c8 <ssd1306_WriteChar+0x24>
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	2b7e      	cmp	r3, #126	; 0x7e
 80007c6:	d901      	bls.n	80007cc <ssd1306_WriteChar+0x28>
        return 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	e06d      	b.n	80008a8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007cc:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <ssd1306_WriteChar+0x10c>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	793b      	ldrb	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	2b80      	cmp	r3, #128	; 0x80
 80007d8:	dc06      	bgt.n	80007e8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <ssd1306_WriteChar+0x10c>)
 80007dc:	885b      	ldrh	r3, [r3, #2]
 80007de:	461a      	mov	r2, r3
 80007e0:	797b      	ldrb	r3, [r7, #5]
 80007e2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007e4:	2b40      	cmp	r3, #64	; 0x40
 80007e6:	dd01      	ble.n	80007ec <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	e05d      	b.n	80008a8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	e04c      	b.n	800088c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	3b20      	subs	r3, #32
 80007f8:	7979      	ldrb	r1, [r7, #5]
 80007fa:	fb01 f303 	mul.w	r3, r1, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	440b      	add	r3, r1
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	e034      	b.n	800087c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d012      	beq.n	8000848 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <ssd1306_WriteChar+0x10c>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4413      	add	r3, r2
 800082e:	b2d8      	uxtb	r0, r3
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <ssd1306_WriteChar+0x10c>)
 8000832:	885b      	ldrh	r3, [r3, #2]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4413      	add	r3, r2
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7bba      	ldrb	r2, [r7, #14]
 8000840:	4619      	mov	r1, r3
 8000842:	f7ff ff5b 	bl	80006fc <ssd1306_DrawPixel>
 8000846:	e016      	b.n	8000876 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <ssd1306_WriteChar+0x10c>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4413      	add	r3, r2
 8000854:	b2d8      	uxtb	r0, r3
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <ssd1306_WriteChar+0x10c>)
 8000858:	885b      	ldrh	r3, [r3, #2]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4413      	add	r3, r2
 8000862:	b2d9      	uxtb	r1, r3
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf0c      	ite	eq
 800086a:	2301      	moveq	r3, #1
 800086c:	2300      	movne	r3, #0
 800086e:	b2db      	uxtb	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	f7ff ff43 	bl	80006fc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	3301      	adds	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	793b      	ldrb	r3, [r7, #4]
 800087e:	461a      	mov	r2, r3
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	4293      	cmp	r3, r2
 8000884:	d3c5      	bcc.n	8000812 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3301      	adds	r3, #1
 800088a:	61fb      	str	r3, [r7, #28]
 800088c:	797b      	ldrb	r3, [r7, #5]
 800088e:	461a      	mov	r2, r3
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	4293      	cmp	r3, r2
 8000894:	d3ad      	bcc.n	80007f2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <ssd1306_WriteChar+0x10c>)
 8000898:	881a      	ldrh	r2, [r3, #0]
 800089a:	793b      	ldrb	r3, [r7, #4]
 800089c:	b29b      	uxth	r3, r3
 800089e:	4413      	add	r3, r2
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <ssd1306_WriteChar+0x10c>)
 80008a4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3724      	adds	r7, #36	; 0x24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	20000430 	.word	0x20000430

080008b4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	1d38      	adds	r0, r7, #4
 80008be:	e880 0006 	stmia.w	r0, {r1, r2}
 80008c2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80008c4:	e012      	b.n	80008ec <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	7818      	ldrb	r0, [r3, #0]
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	1d3a      	adds	r2, r7, #4
 80008ce:	ca06      	ldmia	r2, {r1, r2}
 80008d0:	f7ff ff68 	bl	80007a4 <ssd1306_WriteChar>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d002      	beq.n	80008e6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	e008      	b.n	80008f8 <ssd1306_WriteString+0x44>
        }
        str++;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1e8      	bne.n	80008c6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	781b      	ldrb	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	460a      	mov	r2, r1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <ssd1306_SetCursor+0x2c>)
 8000916:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	b29a      	uxth	r2, r3
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <ssd1306_SetCursor+0x2c>)
 800091e:	805a      	strh	r2, [r3, #2]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	20000430 	.word	0x20000430

08000930 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800093a:	2381      	movs	r3, #129	; 0x81
 800093c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fdf3 	bl	800052c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fdef 	bl	800052c <ssd1306_WriteCommand>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d005      	beq.n	8000974 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000968:	23af      	movs	r3, #175	; 0xaf
 800096a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <ssd1306_SetDisplayOn+0x38>)
 800096e:	2201      	movs	r2, #1
 8000970:	715a      	strb	r2, [r3, #5]
 8000972:	e004      	b.n	800097e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000974:	23ae      	movs	r3, #174	; 0xae
 8000976:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <ssd1306_SetDisplayOn+0x38>)
 800097a:	2200      	movs	r2, #0
 800097c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fdd3 	bl	800052c <ssd1306_WriteCommand>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000430 	.word	0x20000430

08000994 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	; 0x30
 8000998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b6e      	ldr	r3, [pc, #440]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a6d      	ldr	r2, [pc, #436]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b6b      	ldr	r3, [pc, #428]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c2:	4b68      	ldr	r3, [pc, #416]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a67      	ldr	r2, [pc, #412]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 80009c8:	f043 0320 	orr.w	r3, r3, #32
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b65      	ldr	r3, [pc, #404]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0320 	and.w	r3, r3, #32
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	4b62      	ldr	r3, [pc, #392]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a61      	ldr	r2, [pc, #388]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b5f      	ldr	r3, [pc, #380]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b5c      	ldr	r3, [pc, #368]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a5b      	ldr	r2, [pc, #364]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b59      	ldr	r3, [pc, #356]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b56      	ldr	r3, [pc, #344]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a55      	ldr	r2, [pc, #340]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b53      	ldr	r3, [pc, #332]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b50      	ldr	r3, [pc, #320]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a4f      	ldr	r2, [pc, #316]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b4d      	ldr	r3, [pc, #308]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3a:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a49      	ldr	r2, [pc, #292]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 8000a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b47      	ldr	r3, [pc, #284]	; (8000b64 <MX_GPIO_Init+0x1d0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a58:	4843      	ldr	r0, [pc, #268]	; (8000b68 <MX_GPIO_Init+0x1d4>)
 8000a5a:	f001 f8d7 	bl	8001c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	4842      	ldr	r0, [pc, #264]	; (8000b6c <MX_GPIO_Init+0x1d8>)
 8000a64:	f001 f8d2 	bl	8001c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	483c      	ldr	r0, [pc, #240]	; (8000b70 <MX_GPIO_Init+0x1dc>)
 8000a80:	f000 ff18 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a84:	2332      	movs	r3, #50	; 0x32
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a94:	230b      	movs	r3, #11
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4834      	ldr	r0, [pc, #208]	; (8000b70 <MX_GPIO_Init+0x1dc>)
 8000aa0:	f000 ff08 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000aa4:	2386      	movs	r3, #134	; 0x86
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab4:	230b      	movs	r3, #11
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	482d      	ldr	r0, [pc, #180]	; (8000b74 <MX_GPIO_Init+0x1e0>)
 8000ac0:	f000 fef8 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ac4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4822      	ldr	r0, [pc, #136]	; (8000b68 <MX_GPIO_Init+0x1d4>)
 8000ade:	f000 fee9 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af4:	230b      	movs	r3, #11
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	481a      	ldr	r0, [pc, #104]	; (8000b68 <MX_GPIO_Init+0x1d4>)
 8000b00:	f000 fed8 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4814      	ldr	r0, [pc, #80]	; (8000b6c <MX_GPIO_Init+0x1d8>)
 8000b1c:	f000 feca 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	480e      	ldr	r0, [pc, #56]	; (8000b6c <MX_GPIO_Init+0x1d8>)
 8000b34:	f000 febe 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4a:	230b      	movs	r3, #11
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_GPIO_Init+0x1d8>)
 8000b56:	f000 fead 	bl	80018b4 <HAL_GPIO_Init>

}
 8000b5a:	bf00      	nop
 8000b5c:	3730      	adds	r7, #48	; 0x30
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020000 	.word	0x40020000

08000b78 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_I2C2_Init+0x74>)
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <MX_I2C2_Init+0x78>)
 8000b80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_I2C2_Init+0x74>)
 8000b84:	4a1b      	ldr	r2, [pc, #108]	; (8000bf4 <MX_I2C2_Init+0x7c>)
 8000b86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_I2C2_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_I2C2_Init+0x74>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_I2C2_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_I2C2_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_I2C2_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_I2C2_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_I2C2_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bb2:	480e      	ldr	r0, [pc, #56]	; (8000bec <MX_I2C2_Init+0x74>)
 8000bb4:	f001 f844 	bl	8001c40 <HAL_I2C_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bbe:	f000 f989 	bl	8000ed4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <MX_I2C2_Init+0x74>)
 8000bc6:	f001 fc25 	bl	8002414 <HAL_I2CEx_ConfigAnalogFilter>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bd0:	f000 f980 	bl	8000ed4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_I2C2_Init+0x74>)
 8000bd8:	f001 fc67 	bl	80024aa <HAL_I2CEx_ConfigDigitalFilter>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000be2:	f000 f977 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000438 	.word	0x20000438
 8000bf0:	40005800 	.word	0x40005800
 8000bf4:	20404768 	.word	0x20404768

08000bf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0aa      	sub	sp, #168	; 0xa8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	2284      	movs	r2, #132	; 0x84
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f005 f9b1 	bl	8005f80 <memset>
  if(i2cHandle->Instance==I2C2)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <HAL_I2C_MspInit+0xb0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d13b      	bne.n	8000ca0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 faf6 	bl	8003228 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c42:	f000 f947 	bl	8000ed4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_I2C_MspInit+0xb4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a18      	ldr	r2, [pc, #96]	; (8000cac <HAL_I2C_MspInit+0xb4>)
 8000c4c:	f043 0320 	orr.w	r3, r3, #32
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_I2C_MspInit+0xb4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0320 	and.w	r3, r3, #32
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c64:	2312      	movs	r3, #18
 8000c66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c76:	2304      	movs	r3, #4
 8000c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c80:	4619      	mov	r1, r3
 8000c82:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <HAL_I2C_MspInit+0xb8>)
 8000c84:	f000 fe16 	bl	80018b4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_I2C_MspInit+0xb4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <HAL_I2C_MspInit+0xb4>)
 8000c8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_I2C_MspInit+0xb4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	37a8      	adds	r7, #168	; 0xa8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40005800 	.word	0x40005800
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40021400 	.word	0x40021400

08000cb4 <HAL_UART_RxCpltCallback>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/*
 * tu beda przerwania
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, received_data, 3); // Tu włącza sie to gowno znowu :)
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	4904      	ldr	r1, [pc, #16]	; (8000cd0 <HAL_UART_RxCpltCallback+0x1c>)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <HAL_UART_RxCpltCallback+0x20>)
 8000cc2:	f003 fc3a 	bl	800453a <HAL_UART_Receive_IT>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000048c 	.word	0x2000048c
 8000cd4:	20000528 	.word	0x20000528

08000cd8 <wyswietlacz>:

void wyswietlacz(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
	uint8_t y = 0; // ktora linia wyswietlacza
 8000cde:	2300      	movs	r3, #0
 8000ce0:	75fb      	strb	r3, [r7, #23]
	ssd1306_Fill(Black);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff fcbe 	bl	8000664 <ssd1306_Fill>
	ssd1306_SetCursor(2, y);
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	4619      	mov	r1, r3
 8000cec:	2002      	movs	r0, #2
 8000cee:	f7ff fe07 	bl	8000900 <ssd1306_SetCursor>
	char buf[20] = "COM test: ";
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <wyswietlacz+0x5c>)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cf8:	c303      	stmia	r3!, {r0, r1}
 8000cfa:	801a      	strh	r2, [r3, #0]
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	0c12      	lsrs	r2, r2, #16
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	f107 030b 	add.w	r3, r7, #11
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	721a      	strb	r2, [r3, #8]
	ssd1306_WriteString(strcat(buf, received_data), Font_7x10, White);
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4909      	ldr	r1, [pc, #36]	; (8000d38 <wyswietlacz+0x60>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f005 f93c 	bl	8005f90 <strcat>
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <wyswietlacz+0x64>)
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	ca06      	ldmia	r2, {r1, r2}
 8000d1e:	f7ff fdc9 	bl	80008b4 <ssd1306_WriteString>
	y += 10;
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
 8000d24:	330a      	adds	r3, #10
 8000d26:	75fb      	strb	r3, [r7, #23]

	ssd1306_UpdateScreen();
 8000d28:	f7ff fcc0 	bl	80006ac <ssd1306_UpdateScreen>
}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08005fc8 	.word	0x08005fc8
 8000d38:	2000048c 	.word	0x2000048c
 8000d3c:	20000000 	.word	0x20000000

08000d40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ // If the interrupt is from timer 2
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d50:	d119      	bne.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x46>
		char jd[2] = "JD";
 8000d52:	f244 434a 	movw	r3, #17482	; 0x444a
 8000d56:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, jd, strlen(jd), 100);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fa53 	bl	8000208 <strlen>
 8000d62:	4603      	mov	r3, r0
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	f107 010c 	add.w	r1, r7, #12
 8000d6a:	2364      	movs	r3, #100	; 0x64
 8000d6c:	480b      	ldr	r0, [pc, #44]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d6e:	f003 fb61 	bl	8004434 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, received_data, strlen(received_data), 100);
 8000d72:	480b      	ldr	r0, [pc, #44]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d74:	f7ff fa48 	bl	8000208 <strlen>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	2364      	movs	r3, #100	; 0x64
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d80:	4806      	ldr	r0, [pc, #24]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d82:	f003 fb57 	bl	8004434 <HAL_UART_Transmit>
	}
	if(htim->Instance == TIM3){
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d101      	bne.n	8000d94 <HAL_TIM_PeriodElapsedCallback+0x54>
		//ssd1306_TestAll();
		wyswietlacz();
 8000d90:	f7ff ffa2 	bl	8000cd8 <wyswietlacz>
	}

}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000528 	.word	0x20000528
 8000da0:	2000048c 	.word	0x2000048c
 8000da4:	40000400 	.word	0x40000400

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dac:	f000 fb5d 	bl	800146a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db0:	f000 f822 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db4:	f7ff fdee 	bl	8000994 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000db8:	f000 f9ee 	bl	8001198 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dbc:	f000 fa84 	bl	80012c8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000dc0:	f7ff feda 	bl	8000b78 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000dc4:	f000 f90a 	bl	8000fdc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dc8:	f000 f956 	bl	8001078 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_TestAll();
  ssd1306_Init(); // Inicjalizacja wyświetlacza
 8000dcc:	f7ff fbe0 	bl	8000590 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <main+0x40>)
 8000dd2:	f002 fe71 	bl	8003ab8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <main+0x44>)
 8000dd8:	f002 fe6e 	bl	8003ab8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, received_data, 3);
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4904      	ldr	r1, [pc, #16]	; (8000df0 <main+0x48>)
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <main+0x4c>)
 8000de2:	f003 fbaa 	bl	800453a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <main+0x3e>
 8000de8:	20000490 	.word	0x20000490
 8000dec:	200004dc 	.word	0x200004dc
 8000df0:	2000048c 	.word	0x2000048c
 8000df4:	20000528 	.word	0x20000528

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	; 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2230      	movs	r2, #48	; 0x30
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f005 f8ba 	bl	8005f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e1c:	f001 fcda 	bl	80027d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <SystemClock_Config+0xd4>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a29      	ldr	r2, [pc, #164]	; (8000ecc <SystemClock_Config+0xd4>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <SystemClock_Config+0xd4>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <SystemClock_Config+0xd8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a24      	ldr	r2, [pc, #144]	; (8000ed0 <SystemClock_Config+0xd8>)
 8000e3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <SystemClock_Config+0xd8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e50:	2301      	movs	r3, #1
 8000e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e54:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e64:	2304      	movs	r3, #4
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e68:	23d8      	movs	r3, #216	; 0xd8
 8000e6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000e70:	2309      	movs	r3, #9
 8000e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fd0b 	bl	8002894 <HAL_RCC_OscConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e84:	f000 f826 	bl	8000ed4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e88:	f001 fcb4 	bl	80027f4 <HAL_PWREx_EnableOverDrive>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e92:	f000 f81f 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e96:	230f      	movs	r3, #15
 8000e98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ea2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ea6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ea8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	2107      	movs	r1, #7
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 ff91 	bl	8002ddc <HAL_RCC_ClockConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ec0:	f000 f808 	bl	8000ed4 <Error_Handler>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3750      	adds	r7, #80	; 0x50
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x44>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_MspInit+0x44>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_MspInit+0x44>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_MspInit+0x44>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_MspInit+0x44>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_MspInit+0x44>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 fab6 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM2_IRQHandler+0x10>)
 8000f82:	f002 fe11 	bl	8003ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000490 	.word	0x20000490

08000f90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <TIM3_IRQHandler+0x10>)
 8000f96:	f002 fe07 	bl	8003ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200004dc 	.word	0x200004dc

08000fa4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <USART3_IRQHandler+0x10>)
 8000faa:	f003 fb0b 	bl	80045c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000528 	.word	0x20000528

08000fb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <SystemInit+0x20>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <SystemInit+0x20>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_TIM2_Init+0x98>)
 8000ffc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001000:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10799;
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <MX_TIM2_Init+0x98>)
 8001004:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001008:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <MX_TIM2_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <MX_TIM2_Init+0x98>)
 8001012:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001016:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <MX_TIM2_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <MX_TIM2_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001024:	4813      	ldr	r0, [pc, #76]	; (8001074 <MX_TIM2_Init+0x98>)
 8001026:	f002 fcef 	bl	8003a08 <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001030:	f7ff ff50 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_TIM2_Init+0x98>)
 8001042:	f002 fed1 	bl	8003de8 <HAL_TIM_ConfigClockSource>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800104c:	f7ff ff42 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_TIM2_Init+0x98>)
 800105e:	f003 f8ef 	bl	8004240 <HAL_TIMEx_MasterConfigSynchronization>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001068:	f7ff ff34 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000490 	.word	0x20000490

08001078 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <MX_TIM3_Init+0x98>)
 8001098:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <MX_TIM3_Init+0x9c>)
 800109a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_TIM3_Init+0x98>)
 800109e:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80010a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_TIM3_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_TIM3_Init+0x98>)
 80010ac:	f241 3287 	movw	r2, #4999	; 0x1387
 80010b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_TIM3_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_TIM3_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010be:	4814      	ldr	r0, [pc, #80]	; (8001110 <MX_TIM3_Init+0x98>)
 80010c0:	f002 fca2 	bl	8003a08 <HAL_TIM_Base_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80010ca:	f7ff ff03 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_TIM3_Init+0x98>)
 80010dc:	f002 fe84 	bl	8003de8 <HAL_TIM_ConfigClockSource>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80010e6:	f7ff fef5 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <MX_TIM3_Init+0x98>)
 80010f8:	f003 f8a2 	bl	8004240 <HAL_TIMEx_MasterConfigSynchronization>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001102:	f7ff fee7 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	3720      	adds	r7, #32
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200004dc 	.word	0x200004dc
 8001114:	40000400 	.word	0x40000400

08001118 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001128:	d114      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_TIM_Base_MspInit+0x78>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a18      	ldr	r2, [pc, #96]	; (8001190 <HAL_TIM_Base_MspInit+0x78>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_TIM_Base_MspInit+0x78>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	201c      	movs	r0, #28
 8001148:	f000 faeb 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800114c:	201c      	movs	r0, #28
 800114e:	f000 fb04 	bl	800175a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001152:	e018      	b.n	8001186 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_TIM_Base_MspInit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d113      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_TIM_Base_MspInit+0x78>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_TIM_Base_MspInit+0x78>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_TIM_Base_MspInit+0x78>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	201d      	movs	r0, #29
 800117c:	f000 fad1 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001180:	201d      	movs	r0, #29
 8001182:	f000 faea 	bl	800175a <HAL_NVIC_EnableIRQ>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40000400 	.word	0x40000400

08001198 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <MX_USART3_UART_Init+0x5c>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_USART3_UART_Init+0x58>)
 80011dc:	f003 f8dc 	bl	8004398 <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011e6:	f7ff fe75 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000528 	.word	0x20000528
 80011f4:	40004800 	.word	0x40004800

080011f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0aa      	sub	sp, #168	; 0xa8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	2284      	movs	r2, #132	; 0x84
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f004 feb1 	bl	8005f80 <memset>
  if(uartHandle->Instance==USART3)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a26      	ldr	r2, [pc, #152]	; (80012bc <HAL_UART_MspInit+0xc4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d144      	bne.n	80012b2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800122e:	2300      	movs	r3, #0
 8001230:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fff6 	bl	8003228 <HAL_RCCEx_PeriphCLKConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001242:	f7ff fe47 	bl	8000ed4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <HAL_UART_MspInit+0xc8>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_UART_MspInit+0xc8>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_UART_MspInit+0xc8>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_UART_MspInit+0xc8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_UART_MspInit+0xc8>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_UART_MspInit+0xc8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001284:	2301      	movs	r3, #1
 8001286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001290:	2307      	movs	r3, #7
 8001292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800129a:	4619      	mov	r1, r3
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <HAL_UART_MspInit+0xcc>)
 800129e:	f000 fb09 	bl	80018b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2027      	movs	r0, #39	; 0x27
 80012a8:	f000 fa3b 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012ac:	2027      	movs	r0, #39	; 0x27
 80012ae:	f000 fa54 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012b2:	bf00      	nop
 80012b4:	37a8      	adds	r7, #168	; 0xa8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40004800 	.word	0x40004800
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020c00 	.word	0x40020c00

080012c8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d6:	2206      	movs	r2, #6
 80012d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012dc:	2202      	movs	r2, #2
 80012de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001300:	2201      	movs	r2, #1
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130c:	f001 f919 	bl	8002542 <HAL_PCD_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001316:	f7ff fddd 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200005b0 	.word	0x200005b0

08001324 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0ac      	sub	sp, #176	; 0xb0
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	2284      	movs	r2, #132	; 0x84
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f004 fe1b 	bl	8005f80 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001352:	d159      	bne.n	8001408 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001358:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	4618      	mov	r0, r3
 8001366:	f001 ff5f 	bl	8003228 <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001370:	f7ff fdb0 	bl	8000ed4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_PCD_MspInit+0xec>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a25      	ldr	r2, [pc, #148]	; (8001410 <HAL_PCD_MspInit+0xec>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_PCD_MspInit+0xec>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800138c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013a6:	230a      	movs	r3, #10
 80013a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013b0:	4619      	mov	r1, r3
 80013b2:	4818      	ldr	r0, [pc, #96]	; (8001414 <HAL_PCD_MspInit+0xf0>)
 80013b4:	f000 fa7e 	bl	80018b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d0:	4619      	mov	r1, r3
 80013d2:	4810      	ldr	r0, [pc, #64]	; (8001414 <HAL_PCD_MspInit+0xf0>)
 80013d4:	f000 fa6e 	bl	80018b4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e2:	6353      	str	r3, [r2, #52]	; 0x34
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	4a06      	ldr	r2, [pc, #24]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fa:	6453      	str	r3, [r2, #68]	; 0x44
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001408:	bf00      	nop
 800140a:	37b0      	adds	r7, #176	; 0xb0
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40020000 	.word	0x40020000

08001418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800141e:	490e      	ldr	r1, [pc, #56]	; (8001458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001434:	4c0b      	ldr	r4, [pc, #44]	; (8001464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001442:	f7ff fdb9 	bl	8000fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001446:	f004 fd77 	bl	8005f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144a:	f7ff fcad 	bl	8000da8 <main>
  bx  lr    
 800144e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001450:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800145c:	08006770 	.word	0x08006770
  ldr r2, =_sbss
 8001460:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001464:	20000abc 	.word	0x20000abc

08001468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC_IRQHandler>

0800146a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f000 f94c 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f805 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147a:	f7ff fd31 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_InitTick+0x54>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0x58>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f967 	bl	8001776 <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f000 f92f 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_InitTick+0x5c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20000010 	.word	0x20000010
 80014e0:	2000000c 	.word	0x2000000c

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000010 	.word	0x20000010
 8001508:	20000ab8 	.word	0x20000ab8

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000ab8 	.word	0x20000ab8

08001524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff ffee 	bl	800150c <HAL_GetTick>
 8001530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d005      	beq.n	800154a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_Delay+0x44>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800154a:	bf00      	nop
 800154c:	f7ff ffde 	bl	800150c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8f7      	bhi.n	800154c <HAL_Delay+0x28>
  {
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000010 	.word	0x20000010

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	4313      	orrs	r3, r2
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x40>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	05fa0000 	.word	0x05fa0000

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff29 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff3e 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff8e 	bl	8001660 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff31 	bl	80015d0 <__NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffa2 	bl	80016c8 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff feb6 	bl	800150c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d008      	beq.n	80017c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e052      	b.n	8001866 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0216 	bic.w	r2, r2, #22
 80017ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d103      	bne.n	80017f0 <HAL_DMA_Abort+0x62>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0208 	bic.w	r2, r2, #8
 80017fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001810:	e013      	b.n	800183a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001812:	f7ff fe7b 	bl	800150c <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b05      	cmp	r3, #5
 800181e:	d90c      	bls.n	800183a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2220      	movs	r2, #32
 8001824:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2203      	movs	r2, #3
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e015      	b.n	8001866 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1e4      	bne.n	8001812 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	223f      	movs	r2, #63	; 0x3f
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d004      	beq.n	800188c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e00c      	b.n	80018a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2205      	movs	r2, #5
 8001890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	e175      	b.n	8001bc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018d4:	2201      	movs	r2, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f040 8164 	bne.w	8001bba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d005      	beq.n	800190a <HAL_GPIO_Init+0x56>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d130      	bne.n	800196c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 0201 	and.w	r2, r3, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b03      	cmp	r3, #3
 8001976:	d017      	beq.n	80019a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d123      	bne.n	80019fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	08da      	lsrs	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3208      	adds	r2, #8
 80019f6:	69b9      	ldr	r1, [r7, #24]
 80019f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0203 	and.w	r2, r3, #3
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80be 	beq.w	8001bba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	4b66      	ldr	r3, [pc, #408]	; (8001bd8 <HAL_GPIO_Init+0x324>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a65      	ldr	r2, [pc, #404]	; (8001bd8 <HAL_GPIO_Init+0x324>)
 8001a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <HAL_GPIO_Init+0x324>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a56:	4a61      	ldr	r2, [pc, #388]	; (8001bdc <HAL_GPIO_Init+0x328>)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a58      	ldr	r2, [pc, #352]	; (8001be0 <HAL_GPIO_Init+0x32c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d037      	beq.n	8001af2 <HAL_GPIO_Init+0x23e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a57      	ldr	r2, [pc, #348]	; (8001be4 <HAL_GPIO_Init+0x330>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d031      	beq.n	8001aee <HAL_GPIO_Init+0x23a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a56      	ldr	r2, [pc, #344]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d02b      	beq.n	8001aea <HAL_GPIO_Init+0x236>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a55      	ldr	r2, [pc, #340]	; (8001bec <HAL_GPIO_Init+0x338>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d025      	beq.n	8001ae6 <HAL_GPIO_Init+0x232>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a54      	ldr	r2, [pc, #336]	; (8001bf0 <HAL_GPIO_Init+0x33c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d01f      	beq.n	8001ae2 <HAL_GPIO_Init+0x22e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a53      	ldr	r2, [pc, #332]	; (8001bf4 <HAL_GPIO_Init+0x340>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d019      	beq.n	8001ade <HAL_GPIO_Init+0x22a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_GPIO_Init+0x344>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_GPIO_Init+0x226>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a51      	ldr	r2, [pc, #324]	; (8001bfc <HAL_GPIO_Init+0x348>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00d      	beq.n	8001ad6 <HAL_GPIO_Init+0x222>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a50      	ldr	r2, [pc, #320]	; (8001c00 <HAL_GPIO_Init+0x34c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d007      	beq.n	8001ad2 <HAL_GPIO_Init+0x21e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4f      	ldr	r2, [pc, #316]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d101      	bne.n	8001ace <HAL_GPIO_Init+0x21a>
 8001aca:	2309      	movs	r3, #9
 8001acc:	e012      	b.n	8001af4 <HAL_GPIO_Init+0x240>
 8001ace:	230a      	movs	r3, #10
 8001ad0:	e010      	b.n	8001af4 <HAL_GPIO_Init+0x240>
 8001ad2:	2308      	movs	r3, #8
 8001ad4:	e00e      	b.n	8001af4 <HAL_GPIO_Init+0x240>
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	e00c      	b.n	8001af4 <HAL_GPIO_Init+0x240>
 8001ada:	2306      	movs	r3, #6
 8001adc:	e00a      	b.n	8001af4 <HAL_GPIO_Init+0x240>
 8001ade:	2305      	movs	r3, #5
 8001ae0:	e008      	b.n	8001af4 <HAL_GPIO_Init+0x240>
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x240>
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e004      	b.n	8001af4 <HAL_GPIO_Init+0x240>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e002      	b.n	8001af4 <HAL_GPIO_Init+0x240>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_GPIO_Init+0x240>
 8001af2:	2300      	movs	r3, #0
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	f002 0203 	and.w	r2, r2, #3
 8001afa:	0092      	lsls	r2, r2, #2
 8001afc:	4093      	lsls	r3, r2
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b04:	4935      	ldr	r1, [pc, #212]	; (8001bdc <HAL_GPIO_Init+0x328>)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_GPIO_Init+0x354>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b36:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <HAL_GPIO_Init+0x354>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b3c:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <HAL_GPIO_Init+0x354>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b60:	4a29      	ldr	r2, [pc, #164]	; (8001c08 <HAL_GPIO_Init+0x354>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <HAL_GPIO_Init+0x354>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <HAL_GPIO_Init+0x354>)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_GPIO_Init+0x354>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <HAL_GPIO_Init+0x354>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2b0f      	cmp	r3, #15
 8001bc4:	f67f ae86 	bls.w	80018d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40013800 	.word	0x40013800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020800 	.word	0x40020800
 8001bec:	40020c00 	.word	0x40020c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40021400 	.word	0x40021400
 8001bf8:	40021800 	.word	0x40021800
 8001bfc:	40021c00 	.word	0x40021c00
 8001c00:	40022000 	.word	0x40022000
 8001c04:	40022400 	.word	0x40022400
 8001c08:	40013c00 	.word	0x40013c00

08001c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c1c:	787b      	ldrb	r3, [r7, #1]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c28:	e003      	b.n	8001c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c2a:	887b      	ldrh	r3, [r7, #2]
 8001c2c:	041a      	lsls	r2, r3, #16
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	619a      	str	r2, [r3, #24]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07f      	b.n	8001d52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe ffc6 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2224      	movs	r2, #36	; 0x24
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	e006      	b.n	8001cc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d104      	bne.n	8001cda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_I2C_Init+0x11c>)
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69d9      	ldr	r1, [r3, #28]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1a      	ldr	r2, [r3, #32]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	02008000 	.word	0x02008000

08001d60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	4608      	mov	r0, r1
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	817b      	strh	r3, [r7, #10]
 8001d72:	460b      	mov	r3, r1
 8001d74:	813b      	strh	r3, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	f040 80f9 	bne.w	8001f7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_I2C_Mem_Write+0x34>
 8001d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0ed      	b.n	8001f7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_I2C_Mem_Write+0x4e>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e0e6      	b.n	8001f7c <HAL_I2C_Mem_Write+0x21c>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001db6:	f7ff fba9 	bl	800150c <HAL_GetTick>
 8001dba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2319      	movs	r3, #25
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f955 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0d1      	b.n	8001f7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2221      	movs	r2, #33	; 0x21
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001df8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e00:	88f8      	ldrh	r0, [r7, #6]
 8001e02:	893a      	ldrh	r2, [r7, #8]
 8001e04:	8979      	ldrh	r1, [r7, #10]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	4603      	mov	r3, r0
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f8b9 	bl	8001f88 <I2C_RequestMemoryWrite>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0a9      	b.n	8001f7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d90e      	bls.n	8001e50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	22ff      	movs	r2, #255	; 0xff
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	8979      	ldrh	r1, [r7, #10]
 8001e40:	2300      	movs	r3, #0
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 fab1 	bl	80023b0 <I2C_TransferConfig>
 8001e4e:	e00f      	b.n	8001e70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	8979      	ldrh	r1, [r7, #10]
 8001e62:	2300      	movs	r3, #0
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 faa0 	bl	80023b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f93f 	bl	80020f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e07b      	b.n	8001f7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d034      	beq.n	8001f28 <HAL_I2C_Mem_Write+0x1c8>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d130      	bne.n	8001f28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f8d1 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e04d      	b.n	8001f7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2bff      	cmp	r3, #255	; 0xff
 8001ee8:	d90e      	bls.n	8001f08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	22ff      	movs	r2, #255	; 0xff
 8001eee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	8979      	ldrh	r1, [r7, #10]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 fa55 	bl	80023b0 <I2C_TransferConfig>
 8001f06:	e00f      	b.n	8001f28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	8979      	ldrh	r1, [r7, #10]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fa44 	bl	80023b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d19e      	bne.n	8001e70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f91e 	bl	8002178 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e01a      	b.n	8001f7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_I2C_Mem_Write+0x224>)
 8001f5a:	400b      	ands	r3, r1
 8001f5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001f7a:	2302      	movs	r3, #2
  }
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	fe00e800 	.word	0xfe00e800

08001f88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	461a      	mov	r2, r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	817b      	strh	r3, [r7, #10]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	813b      	strh	r3, [r7, #8]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	8979      	ldrh	r1, [r7, #10]
 8001fa8:	4b20      	ldr	r3, [pc, #128]	; (800202c <I2C_RequestMemoryWrite+0xa4>)
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f9fd 	bl	80023b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	69b9      	ldr	r1, [r7, #24]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f89c 	bl	80020f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e02c      	b.n	8002024 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fd0:	893b      	ldrh	r3, [r7, #8]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
 8001fda:	e015      	b.n	8002008 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fdc:	893b      	ldrh	r3, [r7, #8]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	69b9      	ldr	r1, [r7, #24]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f882 	bl	80020f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e012      	b.n	8002024 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ffe:	893b      	ldrh	r3, [r7, #8]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2200      	movs	r2, #0
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f830 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	80002000 	.word	0x80002000

08002030 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d103      	bne.n	800204e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2200      	movs	r2, #0
 800204c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d007      	beq.n	800206c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	619a      	str	r2, [r3, #24]
  }
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002088:	e022      	b.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d01e      	beq.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002092:	f7ff fa3b 	bl	800150c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d302      	bcc.n	80020a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d113      	bne.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ac:	f043 0220 	orr.w	r2, r3, #32
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e00f      	b.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4013      	ands	r3, r2
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	429a      	cmp	r2, r3
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d0cd      	beq.n	800208a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002104:	e02c      	b.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f870 	bl	80021f0 <I2C_IsErrorOccurred>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e02a      	b.n	8002170 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d01e      	beq.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002122:	f7ff f9f3 	bl	800150c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	429a      	cmp	r2, r3
 8002130:	d302      	bcc.n	8002138 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d113      	bne.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	f043 0220 	orr.w	r2, r3, #32
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e007      	b.n	8002170 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d1cb      	bne.n	8002106 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002184:	e028      	b.n	80021d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 f830 	bl	80021f0 <I2C_IsErrorOccurred>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e026      	b.n	80021e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219a:	f7ff f9b7 	bl	800150c <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d302      	bcc.n	80021b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d113      	bne.n	80021d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e007      	b.n	80021e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d1cf      	bne.n	8002186 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	d068      	beq.n	80022ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2210      	movs	r2, #16
 8002222:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002224:	e049      	b.n	80022ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d045      	beq.n	80022ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800222e:	f7ff f96d 	bl	800150c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	429a      	cmp	r2, r3
 800223c:	d302      	bcc.n	8002244 <I2C_IsErrorOccurred+0x54>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d13a      	bne.n	80022ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002256:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002266:	d121      	bne.n	80022ac <I2C_IsErrorOccurred+0xbc>
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800226e:	d01d      	beq.n	80022ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b20      	cmp	r3, #32
 8002274:	d01a      	beq.n	80022ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002284:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002286:	f7ff f941 	bl	800150c <HAL_GetTick>
 800228a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800228c:	e00e      	b.n	80022ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800228e:	f7ff f93d 	bl	800150c <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b19      	cmp	r3, #25
 800229a:	d907      	bls.n	80022ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f043 0320 	orr.w	r3, r3, #32
 80022a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80022aa:	e006      	b.n	80022ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d1e9      	bne.n	800228e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d003      	beq.n	80022d0 <I2C_IsErrorOccurred+0xe0>
 80022c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0aa      	beq.n	8002226 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2220      	movs	r2, #32
 80022de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00b      	beq.n	8002318 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002332:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00b      	beq.n	800235c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002354:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800235c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01c      	beq.n	800239e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7ff fe63 	bl	8002030 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <I2C_IsErrorOccurred+0x1bc>)
 8002376:	400b      	ands	r3, r1
 8002378:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	431a      	orrs	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800239e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3728      	adds	r7, #40	; 0x28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	fe00e800 	.word	0xfe00e800

080023b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	817b      	strh	r3, [r7, #10]
 80023be:	4613      	mov	r3, r2
 80023c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023c8:	7a7b      	ldrb	r3, [r7, #9]
 80023ca:	041b      	lsls	r3, r3, #16
 80023cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	4313      	orrs	r3, r2
 80023da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	0d5b      	lsrs	r3, r3, #21
 80023ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <I2C_TransferConfig+0x60>)
 80023f0:	430b      	orrs	r3, r1
 80023f2:	43db      	mvns	r3, r3
 80023f4:	ea02 0103 	and.w	r1, r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002402:	bf00      	nop
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	03ff63ff 	.word	0x03ff63ff

08002414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b20      	cmp	r3, #32
 8002428:	d138      	bne.n	800249c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002434:	2302      	movs	r3, #2
 8002436:	e032      	b.n	800249e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d139      	bne.n	8002534 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e033      	b.n	8002536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2224      	movs	r2, #36	; 0x24
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	e000      	b.n	8002536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002534:	2302      	movs	r3, #2
  }
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002544:	b08f      	sub	sp, #60	; 0x3c
 8002546:	af0a      	add	r7, sp, #40	; 0x28
 8002548:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e116      	b.n	8002782 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe fed8 	bl	8001324 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2203      	movs	r2, #3
 8002578:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f003 fa34 	bl	8005a00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	687e      	ldr	r6, [r7, #4]
 80025a0:	466d      	mov	r5, sp
 80025a2:	f106 0410 	add.w	r4, r6, #16
 80025a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025b6:	1d33      	adds	r3, r6, #4
 80025b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ba:	6838      	ldr	r0, [r7, #0]
 80025bc:	f003 f9c8 	bl	8005950 <USB_CoreInit>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0d7      	b.n	8002782 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fa22 	bl	8005a22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
 80025e2:	e04a      	b.n	800267a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	333d      	adds	r3, #61	; 0x3d
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	333c      	adds	r3, #60	; 0x3c
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	b298      	uxth	r0, r3
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	3344      	adds	r3, #68	; 0x44
 8002620:	4602      	mov	r2, r0
 8002622:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	3340      	adds	r3, #64	; 0x40
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3348      	adds	r3, #72	; 0x48
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	334c      	adds	r3, #76	; 0x4c
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3354      	adds	r3, #84	; 0x54
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	3301      	adds	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d3af      	bcc.n	80025e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e044      	b.n	8002714 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	3301      	adds	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	d3b5      	bcc.n	800268a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	687e      	ldr	r6, [r7, #4]
 8002726:	466d      	mov	r5, sp
 8002728:	f106 0410 	add.w	r4, r6, #16
 800272c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800272e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002734:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002738:	e885 0003 	stmia.w	r5, {r0, r1}
 800273c:	1d33      	adds	r3, r6, #4
 800273e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002740:	6838      	ldr	r0, [r7, #0]
 8002742:	f003 f9bb 	bl	8005abc <USB_DevInit>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e014      	b.n	8002782 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b01      	cmp	r3, #1
 800276e:	d102      	bne.n	8002776 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f80b 	bl	800278c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fb79 	bl	8005e72 <USB_DevDisconnect>

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800278c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	10000003 	.word	0x10000003

080027d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40007000 	.word	0x40007000

080027f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_PWREx_EnableOverDrive+0x98>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a22      	ldr	r2, [pc, #136]	; (800288c <HAL_PWREx_EnableOverDrive+0x98>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_PWREx_EnableOverDrive+0x98>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002822:	f7fe fe73 	bl	800150c <HAL_GetTick>
 8002826:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002828:	e009      	b.n	800283e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800282a:	f7fe fe6f 	bl	800150c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002838:	d901      	bls.n	800283e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e022      	b.n	8002884 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284a:	d1ee      	bne.n	800282a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002856:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002858:	f7fe fe58 	bl	800150c <HAL_GetTick>
 800285c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800285e:	e009      	b.n	8002874 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002860:	f7fe fe54 	bl	800150c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800286e:	d901      	bls.n	8002874 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e007      	b.n	8002884 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002880:	d1ee      	bne.n	8002860 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	40007000 	.word	0x40007000

08002894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800289c:	2300      	movs	r3, #0
 800289e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e291      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8087 	beq.w	80029c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b8:	4b96      	ldr	r3, [pc, #600]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d00c      	beq.n	80028de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c4:	4b93      	ldr	r3, [pc, #588]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d112      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62>
 80028d0:	4b90      	ldr	r3, [pc, #576]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028dc:	d10b      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028de:	4b8d      	ldr	r3, [pc, #564]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d06c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x130>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d168      	bne.n	80029c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e26b      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x7a>
 8002900:	4b84      	ldr	r3, [pc, #528]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a83      	ldr	r2, [pc, #524]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	e02e      	b.n	800296c <HAL_RCC_OscConfig+0xd8>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x9c>
 8002916:	4b7f      	ldr	r3, [pc, #508]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7e      	ldr	r2, [pc, #504]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 800291c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b7c      	ldr	r3, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7b      	ldr	r2, [pc, #492]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01d      	b.n	800296c <HAL_RCC_OscConfig+0xd8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0xc0>
 800293a:	4b76      	ldr	r3, [pc, #472]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a75      	ldr	r2, [pc, #468]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a72      	ldr	r2, [pc, #456]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0xd8>
 8002954:	4b6f      	ldr	r3, [pc, #444]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a6e      	ldr	r2, [pc, #440]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a6b      	ldr	r2, [pc, #428]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fdca 	bl	800150c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe fdc6 	bl	800150c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e21f      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b61      	ldr	r3, [pc, #388]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xe8>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fdb6 	bl	800150c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe fdb2 	bl	800150c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e20b      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	4b57      	ldr	r3, [pc, #348]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x110>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d069      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029d2:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029de:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d11c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x190>
 80029ea:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d116      	bne.n	8002a24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_RCC_OscConfig+0x17a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e1df      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	493d      	ldr	r1, [pc, #244]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	e040      	b.n	8002aa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d023      	beq.n	8002a74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a2c:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a38      	ldr	r2, [pc, #224]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fd68 	bl	800150c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a40:	f7fe fd64 	bl	800150c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1bd      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b30      	ldr	r3, [pc, #192]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5e:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4929      	ldr	r1, [pc, #164]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
 8002a72:	e018      	b.n	8002aa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a26      	ldr	r2, [pc, #152]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fd44 	bl	800150c <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a88:	f7fe fd40 	bl	800150c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e199      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d038      	beq.n	8002b24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d019      	beq.n	8002aee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aba:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	4a15      	ldr	r2, [pc, #84]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fd21 	bl	800150c <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ace:	f7fe fd1d 	bl	800150c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e176      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x23a>
 8002aec:	e01a      	b.n	8002b24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe fd07 	bl	800150c <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b02:	f7fe fd03 	bl	800150c <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d903      	bls.n	8002b18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e15c      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
 8002b14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	4b91      	ldr	r3, [pc, #580]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ee      	bne.n	8002b02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80a4 	beq.w	8002c7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b8b      	ldr	r3, [pc, #556]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	4a87      	ldr	r2, [pc, #540]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b48:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4a:	4b85      	ldr	r3, [pc, #532]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5a:	4b82      	ldr	r3, [pc, #520]	; (8002d64 <HAL_RCC_OscConfig+0x4d0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d118      	bne.n	8002b98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b66:	4b7f      	ldr	r3, [pc, #508]	; (8002d64 <HAL_RCC_OscConfig+0x4d0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7e      	ldr	r2, [pc, #504]	; (8002d64 <HAL_RCC_OscConfig+0x4d0>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b72:	f7fe fccb 	bl	800150c <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7a:	f7fe fcc7 	bl	800150c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b64      	cmp	r3, #100	; 0x64
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e120      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8c:	4b75      	ldr	r3, [pc, #468]	; (8002d64 <HAL_RCC_OscConfig+0x4d0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x31a>
 8002ba0:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a6e      	ldr	r2, [pc, #440]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bac:	e02d      	b.n	8002c0a <HAL_RCC_OscConfig+0x376>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x33c>
 8002bb6:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a69      	ldr	r2, [pc, #420]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	4b67      	ldr	r3, [pc, #412]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a66      	ldr	r2, [pc, #408]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bce:	e01c      	b.n	8002c0a <HAL_RCC_OscConfig+0x376>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x35e>
 8002bd8:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	4a60      	ldr	r2, [pc, #384]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70
 8002be4:	4b5e      	ldr	r3, [pc, #376]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a5d      	ldr	r2, [pc, #372]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	e00b      	b.n	8002c0a <HAL_RCC_OscConfig+0x376>
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a5a      	ldr	r2, [pc, #360]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfe:	4b58      	ldr	r3, [pc, #352]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a57      	ldr	r2, [pc, #348]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002c04:	f023 0304 	bic.w	r3, r3, #4
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d015      	beq.n	8002c3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c12:	f7fe fc7b 	bl	800150c <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7fe fc77 	bl	800150c <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e0ce      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ee      	beq.n	8002c1a <HAL_RCC_OscConfig+0x386>
 8002c3c:	e014      	b.n	8002c68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fc65 	bl	800150c <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe fc61 	bl	800150c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0b8      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5c:	4b40      	ldr	r3, [pc, #256]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ee      	bne.n	8002c46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6e:	4b3c      	ldr	r3, [pc, #240]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80a4 	beq.w	8002dcc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c84:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d06b      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d149      	bne.n	8002d2c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c98:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a30      	ldr	r2, [pc, #192]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fc32 	bl	800150c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe fc2e 	bl	800150c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e087      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	019b      	lsls	r3, r3, #6
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	041b      	lsls	r3, r3, #16
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	061b      	lsls	r3, r3, #24
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	4a1b      	ldr	r2, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cf6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe fc02 	bl	800150c <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe fbfe 	bl	800150c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e057      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x478>
 8002d2a:	e04f      	b.n	8002dcc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0b      	ldr	r2, [pc, #44]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe fbe8 	bl	800150c <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe fbe4 	bl	800150c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e03d      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_RCC_OscConfig+0x4cc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x4ac>
 8002d5e:	e035      	b.n	8002dcc <HAL_RCC_OscConfig+0x538>
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCC_OscConfig+0x544>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d028      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d121      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d11a      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d98:	4013      	ands	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d111      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	3b01      	subs	r3, #1
 8002db2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800

08002ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0d0      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d910      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b67      	ldr	r3, [pc, #412]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 020f 	bic.w	r2, r3, #15
 8002e0a:	4965      	ldr	r1, [pc, #404]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b63      	ldr	r3, [pc, #396]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0b8      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e3c:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a58      	ldr	r2, [pc, #352]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e54:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e60:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	494d      	ldr	r1, [pc, #308]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d040      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d115      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e07f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9e:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e073      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e06b      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f023 0203 	bic.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4936      	ldr	r1, [pc, #216]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed0:	f7fe fb1c 	bl	800150c <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed8:	f7fe fb18 	bl	800150c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e053      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 020c 	and.w	r2, r3, #12
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d1eb      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d210      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 020f 	bic.w	r2, r3, #15
 8002f16:	4922      	ldr	r1, [pc, #136]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e032      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4916      	ldr	r1, [pc, #88]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f6e:	f000 f821 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	490a      	ldr	r1, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8002f80:	5ccb      	ldrb	r3, [r1, r3]
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1d0>)
 8002f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_ClockConfig+0x1d4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fa78 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023c00 	.word	0x40023c00
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	08006748 	.word	0x08006748
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	2000000c 	.word	0x2000000c

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb8:	b094      	sub	sp, #80	; 0x50
 8002fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fcc:	4b79      	ldr	r3, [pc, #484]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	f200 80e1 	bhi.w	80031a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d003      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x3a>
 8002fe6:	e0db      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe8:	4b73      	ldr	r3, [pc, #460]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fec:	e0db      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fee:	4b73      	ldr	r3, [pc, #460]	; (80031bc <HAL_RCC_GetSysClockFreq+0x208>)
 8002ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ff2:	e0d8      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff4:	4b6f      	ldr	r3, [pc, #444]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ffc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002ffe:	4b6d      	ldr	r3, [pc, #436]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d063      	beq.n	80030d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300a:	4b6a      	ldr	r3, [pc, #424]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	2200      	movs	r2, #0
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
 8003014:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
 800301e:	2300      	movs	r3, #0
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
 8003022:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003026:	4622      	mov	r2, r4
 8003028:	462b      	mov	r3, r5
 800302a:	f04f 0000 	mov.w	r0, #0
 800302e:	f04f 0100 	mov.w	r1, #0
 8003032:	0159      	lsls	r1, r3, #5
 8003034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003038:	0150      	lsls	r0, r2, #5
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4621      	mov	r1, r4
 8003040:	1a51      	subs	r1, r2, r1
 8003042:	6139      	str	r1, [r7, #16]
 8003044:	4629      	mov	r1, r5
 8003046:	eb63 0301 	sbc.w	r3, r3, r1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003058:	4659      	mov	r1, fp
 800305a:	018b      	lsls	r3, r1, #6
 800305c:	4651      	mov	r1, sl
 800305e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003062:	4651      	mov	r1, sl
 8003064:	018a      	lsls	r2, r1, #6
 8003066:	4651      	mov	r1, sl
 8003068:	ebb2 0801 	subs.w	r8, r2, r1
 800306c:	4659      	mov	r1, fp
 800306e:	eb63 0901 	sbc.w	r9, r3, r1
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800307e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003086:	4690      	mov	r8, r2
 8003088:	4699      	mov	r9, r3
 800308a:	4623      	mov	r3, r4
 800308c:	eb18 0303 	adds.w	r3, r8, r3
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	462b      	mov	r3, r5
 8003094:	eb49 0303 	adc.w	r3, r9, r3
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030a6:	4629      	mov	r1, r5
 80030a8:	024b      	lsls	r3, r1, #9
 80030aa:	4621      	mov	r1, r4
 80030ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030b0:	4621      	mov	r1, r4
 80030b2:	024a      	lsls	r2, r1, #9
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ba:	2200      	movs	r2, #0
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030c4:	f7fd f8a8 	bl	8000218 <__aeabi_uldivmod>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4613      	mov	r3, r2
 80030ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d0:	e058      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d2:	4b38      	ldr	r3, [pc, #224]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	099b      	lsrs	r3, r3, #6
 80030d8:	2200      	movs	r2, #0
 80030da:	4618      	mov	r0, r3
 80030dc:	4611      	mov	r1, r2
 80030de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030e2:	623b      	str	r3, [r7, #32]
 80030e4:	2300      	movs	r3, #0
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030ec:	4642      	mov	r2, r8
 80030ee:	464b      	mov	r3, r9
 80030f0:	f04f 0000 	mov.w	r0, #0
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	0159      	lsls	r1, r3, #5
 80030fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fe:	0150      	lsls	r0, r2, #5
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4641      	mov	r1, r8
 8003106:	ebb2 0a01 	subs.w	sl, r2, r1
 800310a:	4649      	mov	r1, r9
 800310c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800311c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003120:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003124:	ebb2 040a 	subs.w	r4, r2, sl
 8003128:	eb63 050b 	sbc.w	r5, r3, fp
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	00eb      	lsls	r3, r5, #3
 8003136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800313a:	00e2      	lsls	r2, r4, #3
 800313c:	4614      	mov	r4, r2
 800313e:	461d      	mov	r5, r3
 8003140:	4643      	mov	r3, r8
 8003142:	18e3      	adds	r3, r4, r3
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	464b      	mov	r3, r9
 8003148:	eb45 0303 	adc.w	r3, r5, r3
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800315a:	4629      	mov	r1, r5
 800315c:	028b      	lsls	r3, r1, #10
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003164:	4621      	mov	r1, r4
 8003166:	028a      	lsls	r2, r1, #10
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316e:	2200      	movs	r2, #0
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	61fa      	str	r2, [r7, #28]
 8003174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003178:	f7fd f84e 	bl	8000218 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	3301      	adds	r3, #1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800319e:	e002      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3750      	adds	r7, #80	; 0x50
 80031ac:	46bd      	mov	sp, r7
 80031ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	007a1200 	.word	0x007a1200

080031c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000008 	.word	0x20000008

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0a9b      	lsrs	r3, r3, #10
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08006758 	.word	0x08006758

08003200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003204:	f7ff ffdc 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0b5b      	lsrs	r3, r3, #13
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	08006758 	.word	0x08006758

08003228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d012      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003250:	4b69      	ldr	r3, [pc, #420]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4a68      	ldr	r2, [pc, #416]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003256:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003264:	4964      	ldr	r1, [pc, #400]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003272:	2301      	movs	r3, #1
 8003274:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d017      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003282:	4b5d      	ldr	r3, [pc, #372]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003290:	4959      	ldr	r1, [pc, #356]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a0:	d101      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032a2:	2301      	movs	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032ae:	2301      	movs	r3, #1
 80032b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d017      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032be:	4b4e      	ldr	r3, [pc, #312]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	494a      	ldr	r1, [pc, #296]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032dc:	d101      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032de:	2301      	movs	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 808b 	beq.w	8003422 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800330c:	4b3a      	ldr	r3, [pc, #232]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	4a39      	ldr	r2, [pc, #228]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003316:	6413      	str	r3, [r2, #64]	; 0x40
 8003318:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003324:	4b35      	ldr	r3, [pc, #212]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a34      	ldr	r2, [pc, #208]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800332a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003330:	f7fe f8ec 	bl	800150c <HAL_GetTick>
 8003334:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003338:	f7fe f8e8 	bl	800150c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e357      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003356:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d035      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	429a      	cmp	r2, r3
 8003372:	d02e      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003374:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003394:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003396:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800339c:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d114      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe f8b0 	bl	800150c <HAL_GetTick>
 80033ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fe f8ac 	bl	800150c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e319      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0ee      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033de:	d111      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033ee:	400b      	ands	r3, r1
 80033f0:	4901      	ldr	r1, [pc, #4]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
 80033f6:	e00b      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40007000 	.word	0x40007000
 8003400:	0ffffcff 	.word	0x0ffffcff
 8003404:	4baa      	ldr	r3, [pc, #680]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4aa9      	ldr	r2, [pc, #676]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800340e:	6093      	str	r3, [r2, #8]
 8003410:	4ba7      	ldr	r3, [pc, #668]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003412:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	49a4      	ldr	r1, [pc, #656]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800341e:	4313      	orrs	r3, r2
 8003420:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d010      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800342e:	4ba0      	ldr	r3, [pc, #640]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003434:	4a9e      	ldr	r2, [pc, #632]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800343a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800343e:	4b9c      	ldr	r3, [pc, #624]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003440:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	4999      	ldr	r1, [pc, #612]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800345c:	4b94      	ldr	r3, [pc, #592]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800346a:	4991      	ldr	r1, [pc, #580]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800347e:	4b8c      	ldr	r3, [pc, #560]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348c:	4988      	ldr	r1, [pc, #544]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a0:	4b83      	ldr	r3, [pc, #524]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ae:	4980      	ldr	r1, [pc, #512]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034c2:	4b7b      	ldr	r3, [pc, #492]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	4977      	ldr	r1, [pc, #476]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034e4:	4b72      	ldr	r3, [pc, #456]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	496f      	ldr	r1, [pc, #444]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003506:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	f023 020c 	bic.w	r2, r3, #12
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003514:	4966      	ldr	r1, [pc, #408]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003528:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	495e      	ldr	r1, [pc, #376]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800354a:	4b59      	ldr	r3, [pc, #356]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003558:	4955      	ldr	r1, [pc, #340]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	494d      	ldr	r1, [pc, #308]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800358e:	4b48      	ldr	r3, [pc, #288]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003594:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	4944      	ldr	r1, [pc, #272]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035b0:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	493c      	ldr	r1, [pc, #240]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035d2:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e0:	4933      	ldr	r1, [pc, #204]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035f4:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003602:	492b      	ldr	r1, [pc, #172]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d011      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003616:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003624:	4922      	ldr	r1, [pc, #136]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003634:	d101      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003636:	2301      	movs	r3, #1
 8003638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003646:	2301      	movs	r3, #1
 8003648:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003664:	4912      	ldr	r1, [pc, #72]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00b      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003688:	4909      	ldr	r1, [pc, #36]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d006      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80d9 	beq.w	8003856 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036a4:	4b02      	ldr	r3, [pc, #8]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a01      	ldr	r2, [pc, #4]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80036b0:	40023800 	.word	0x40023800
 80036b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b6:	f7fd ff29 	bl	800150c <HAL_GetTick>
 80036ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036be:	f7fd ff25 	bl	800150c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b64      	cmp	r3, #100	; 0x64
 80036ca:	d901      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e194      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036d0:	4b6c      	ldr	r3, [pc, #432]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f0      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d021      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d11d      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036f0:	4b64      	ldr	r3, [pc, #400]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036fe:	4b61      	ldr	r3, [pc, #388]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003704:	0e1b      	lsrs	r3, r3, #24
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	019a      	lsls	r2, r3, #6
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	041b      	lsls	r3, r3, #16
 8003716:	431a      	orrs	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	061b      	lsls	r3, r3, #24
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	071b      	lsls	r3, r3, #28
 8003724:	4957      	ldr	r1, [pc, #348]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d004      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800374a:	2b00      	cmp	r3, #0
 800374c:	d02e      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003756:	d129      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003758:	4b4a      	ldr	r3, [pc, #296]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800375a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375e:	0c1b      	lsrs	r3, r3, #16
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003766:	4b47      	ldr	r3, [pc, #284]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376c:	0f1b      	lsrs	r3, r3, #28
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	019a      	lsls	r2, r3, #6
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	431a      	orrs	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	071b      	lsls	r3, r3, #28
 800378c:	493d      	ldr	r1, [pc, #244]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003794:	4b3b      	ldr	r3, [pc, #236]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800379a:	f023 021f 	bic.w	r2, r3, #31
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	3b01      	subs	r3, #1
 80037a4:	4937      	ldr	r1, [pc, #220]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01d      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037be:	0e1b      	lsrs	r3, r3, #24
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037c6:	4b2f      	ldr	r3, [pc, #188]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037cc:	0f1b      	lsrs	r3, r3, #28
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	019a      	lsls	r2, r3, #6
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	431a      	orrs	r2, r3
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	071b      	lsls	r3, r3, #28
 80037ec:	4925      	ldr	r1, [pc, #148]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d011      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	019a      	lsls	r2, r3, #6
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	041b      	lsls	r3, r3, #16
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	061b      	lsls	r3, r3, #24
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	071b      	lsls	r3, r3, #28
 800381c:	4919      	ldr	r1, [pc, #100]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a16      	ldr	r2, [pc, #88]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800382e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003830:	f7fd fe6c 	bl	800150c <HAL_GetTick>
 8003834:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003838:	f7fd fe68 	bl	800150c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	; 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0d7      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b01      	cmp	r3, #1
 800385a:	f040 80cd 	bne.w	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a08      	ldr	r2, [pc, #32]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800386a:	f7fd fe4f 	bl	800150c <HAL_GetTick>
 800386e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003870:	e00a      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003872:	f7fd fe4b 	bl	800150c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b64      	cmp	r3, #100	; 0x64
 800387e:	d903      	bls.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0ba      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003884:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003888:	4b5e      	ldr	r3, [pc, #376]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003894:	d0ed      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d02e      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d12a      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038be:	4b51      	ldr	r3, [pc, #324]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038cc:	4b4d      	ldr	r3, [pc, #308]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	0f1b      	lsrs	r3, r3, #28
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	019a      	lsls	r2, r3, #6
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	061b      	lsls	r3, r3, #24
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	071b      	lsls	r3, r3, #28
 80038f2:	4944      	ldr	r1, [pc, #272]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038fa:	4b42      	ldr	r3, [pc, #264]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003900:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	3b01      	subs	r3, #1
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	493d      	ldr	r1, [pc, #244]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d022      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003928:	d11d      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800392a:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	0e1b      	lsrs	r3, r3, #24
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003938:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	0f1b      	lsrs	r3, r3, #28
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	019a      	lsls	r2, r3, #6
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	041b      	lsls	r3, r3, #16
 8003952:	431a      	orrs	r2, r3
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	061b      	lsls	r3, r3, #24
 8003958:	431a      	orrs	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	071b      	lsls	r3, r3, #28
 800395e:	4929      	ldr	r1, [pc, #164]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d028      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	0e1b      	lsrs	r3, r3, #24
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003980:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	019a      	lsls	r2, r3, #6
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	041b      	lsls	r3, r3, #16
 8003998:	431a      	orrs	r2, r3
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	071b      	lsls	r3, r3, #28
 80039a6:	4917      	ldr	r1, [pc, #92]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	4911      	ldr	r1, [pc, #68]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0e      	ldr	r2, [pc, #56]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d0:	f7fd fd9c 	bl	800150c <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039d8:	f7fd fd98 	bl	800150c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e007      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f6:	d1ef      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800

08003a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e049      	b.n	8003aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fd fb72 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f000 fac0 	bl	8003fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d001      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e054      	b.n	8003b7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a26      	ldr	r2, [pc, #152]	; (8003b88 <HAL_TIM_Base_Start_IT+0xd0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d022      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d01d      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a22      	ldr	r2, [pc, #136]	; (8003b8c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d018      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d013      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <HAL_TIM_Base_Start_IT+0xe0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <HAL_TIM_Base_Start_IT+0xe4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x80>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d115      	bne.n	8003b64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xec>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d015      	beq.n	8003b76 <HAL_TIM_Base_Start_IT+0xbe>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d011      	beq.n	8003b76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b62:	e008      	b.n	8003b76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e000      	b.n	8003b78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40010400 	.word	0x40010400
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40001800 	.word	0x40001800
 8003ba4:	00010007 	.word	0x00010007

08003ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0202 	mvn.w	r2, #2
 8003bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f9d0 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9c2 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f9d3 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d122      	bne.n	8003c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d11b      	bne.n	8003c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0204 	mvn.w	r2, #4
 8003c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f9a6 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f998 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f9a9 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d122      	bne.n	8003cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d11b      	bne.n	8003cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0208 	mvn.w	r2, #8
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2204      	movs	r2, #4
 8003c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f97c 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f96e 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f97f 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d122      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d11b      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0210 	mvn.w	r2, #16
 8003cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f952 	bl	8003f90 <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f944 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f955 	bl	8003fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d107      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0201 	mvn.w	r2, #1
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd f80a 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d10e      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d44:	2b80      	cmp	r3, #128	; 0x80
 8003d46:	d107      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fb0c 	bl	8004370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d66:	d10e      	bne.n	8003d86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d72:	2b80      	cmp	r3, #128	; 0x80
 8003d74:	d107      	bne.n	8003d86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 faff 	bl	8004384 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d10e      	bne.n	8003db2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d107      	bne.n	8003db2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f903 	bl	8003fb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d10e      	bne.n	8003dde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d107      	bne.n	8003dde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f06f 0220 	mvn.w	r2, #32
 8003dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fabf 	bl	800435c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_ConfigClockSource+0x1c>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e0b4      	b.n	8003f6e <HAL_TIM_ConfigClockSource+0x186>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	4b56      	ldr	r3, [pc, #344]	; (8003f78 <HAL_TIM_ConfigClockSource+0x190>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3c:	d03e      	beq.n	8003ebc <HAL_TIM_ConfigClockSource+0xd4>
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e42:	f200 8087 	bhi.w	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4a:	f000 8086 	beq.w	8003f5a <HAL_TIM_ConfigClockSource+0x172>
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e52:	d87f      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b70      	cmp	r3, #112	; 0x70
 8003e56:	d01a      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0xa6>
 8003e58:	2b70      	cmp	r3, #112	; 0x70
 8003e5a:	d87b      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b60      	cmp	r3, #96	; 0x60
 8003e5e:	d050      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0x11a>
 8003e60:	2b60      	cmp	r3, #96	; 0x60
 8003e62:	d877      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b50      	cmp	r3, #80	; 0x50
 8003e66:	d03c      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e68:	2b50      	cmp	r3, #80	; 0x50
 8003e6a:	d873      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d058      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x13a>
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d86f      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b30      	cmp	r3, #48	; 0x30
 8003e76:	d064      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e78:	2b30      	cmp	r3, #48	; 0x30
 8003e7a:	d86b      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d060      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d867      	bhi.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d05c      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d05a      	beq.n	8003f42 <HAL_TIM_ConfigClockSource+0x15a>
 8003e8c:	e062      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6899      	ldr	r1, [r3, #8]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f000 f9af 	bl	8004200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	609a      	str	r2, [r3, #8]
      break;
 8003eba:	e04f      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	6899      	ldr	r1, [r3, #8]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f000 f998 	bl	8004200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ede:	609a      	str	r2, [r3, #8]
      break;
 8003ee0:	e03c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6859      	ldr	r1, [r3, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f000 f90c 	bl	800410c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2150      	movs	r1, #80	; 0x50
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 f965 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003f00:	e02c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 f92b 	bl	800416a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2160      	movs	r1, #96	; 0x60
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f955 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003f20:	e01c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f000 f8ec 	bl	800410c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2140      	movs	r1, #64	; 0x40
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f945 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003f40:	e00c      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f000 f93c 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003f52:	e003      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      break;
 8003f58:	e000      	b.n	8003f5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	fffeff88 	.word	0xfffeff88

08003f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a40      	ldr	r2, [pc, #256]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d013      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fea:	d00f      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3d      	ldr	r2, [pc, #244]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3c      	ldr	r2, [pc, #240]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3b      	ldr	r2, [pc, #236]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3a      	ldr	r2, [pc, #232]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d108      	bne.n	800401e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2f      	ldr	r2, [pc, #188]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d02b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402c:	d027      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2c      	ldr	r2, [pc, #176]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d023      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01f      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d017      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <TIM_Base_SetConfig+0x128>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <TIM_Base_SetConfig+0x12c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00f      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <TIM_Base_SetConfig+0x130>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a25      	ldr	r2, [pc, #148]	; (8004100 <TIM_Base_SetConfig+0x134>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a24      	ldr	r2, [pc, #144]	; (8004104 <TIM_Base_SetConfig+0x138>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a23      	ldr	r2, [pc, #140]	; (8004108 <TIM_Base_SetConfig+0x13c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d108      	bne.n	8004090 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0xf8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d103      	bne.n	80040cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	615a      	str	r2, [r3, #20]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00
 80040f0:	40010400 	.word	0x40010400
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800
 8004100:	40001800 	.word	0x40001800
 8004104:	40001c00 	.word	0x40001c00
 8004108:	40002000 	.word	0x40002000

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 030a 	bic.w	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416a:	b480      	push	{r7}
 800416c:	b087      	sub	sp, #28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0210 	bic.w	r2, r3, #16
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f043 0307 	orr.w	r3, r3, #7
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	431a      	orrs	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004254:	2302      	movs	r3, #2
 8004256:	e06d      	b.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a30      	ldr	r2, [pc, #192]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2f      	ldr	r2, [pc, #188]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d108      	bne.n	800429e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004292:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a20      	ldr	r2, [pc, #128]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d022      	beq.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ca:	d01d      	beq.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d018      	beq.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1c      	ldr	r2, [pc, #112]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d013      	beq.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1a      	ldr	r2, [pc, #104]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00e      	beq.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a15      	ldr	r2, [pc, #84]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d009      	beq.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a16      	ldr	r2, [pc, #88]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a15      	ldr	r2, [pc, #84]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10c      	bne.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	4313      	orrs	r3, r2
 8004318:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40010000 	.word	0x40010000
 8004344:	40010400 	.word	0x40010400
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800
 8004350:	40000c00 	.word	0x40000c00
 8004354:	40014000 	.word	0x40014000
 8004358:	40001800 	.word	0x40001800

0800435c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e040      	b.n	800442c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fc ff1c 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2224      	movs	r2, #36	; 0x24
 80043c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0201 	bic.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fbe6 	bl	8004ba8 <UART_SetConfig>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e022      	b.n	800442c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fe3e 	bl	8005070 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fec5 	bl	80051b4 <UART_CheckIdleState>
 800442a:	4603      	mov	r3, r0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	; 0x28
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004448:	2b20      	cmp	r3, #32
 800444a:	d171      	bne.n	8004530 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_UART_Transmit+0x24>
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e06a      	b.n	8004532 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2221      	movs	r2, #33	; 0x21
 8004468:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800446a:	f7fd f84f 	bl	800150c <HAL_GetTick>
 800446e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	88fa      	ldrh	r2, [r7, #6]
 8004474:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	88fa      	ldrh	r2, [r7, #6]
 800447c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004488:	d108      	bne.n	800449c <HAL_UART_Transmit+0x68>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	e003      	b.n	80044a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044a4:	e02c      	b.n	8004500 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 feb6 	bl	8005222 <UART_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e038      	b.n	8004532 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	3302      	adds	r3, #2
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	e007      	b.n	80044ee <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	3301      	adds	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1cc      	bne.n	80044a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2200      	movs	r2, #0
 8004514:	2140      	movs	r1, #64	; 0x40
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fe83 	bl	8005222 <UART_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e005      	b.n	8004532 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	e000      	b.n	8004532 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004530:	2302      	movs	r3, #2
  }
}
 8004532:	4618      	mov	r0, r3
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b08a      	sub	sp, #40	; 0x28
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	4613      	mov	r3, r2
 8004546:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800454e:	2b20      	cmp	r3, #32
 8004550:	d132      	bne.n	80045b8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_UART_Receive_IT+0x24>
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e02b      	b.n	80045ba <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d018      	beq.n	80045a8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	613b      	str	r3, [r7, #16]
   return(result);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	623b      	str	r3, [r7, #32]
 8004596:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	69f9      	ldr	r1, [r7, #28]
 800459a:	6a3a      	ldr	r2, [r7, #32]
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e6      	bne.n	8004576 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	461a      	mov	r2, r3
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fefe 	bl	80053b0 <UART_Start_Receive_IT>
 80045b4:	4603      	mov	r3, r0
 80045b6:	e000      	b.n	80045ba <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3728      	adds	r7, #40	; 0x28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b0ba      	sub	sp, #232	; 0xe8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80045f2:	4013      	ands	r3, r2
 80045f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d115      	bne.n	800462c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00f      	beq.n	800462c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800460c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8297 	beq.w	8004b50 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
      }
      return;
 800462a:	e291      	b.n	8004b50 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800462c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 8117 	beq.w	8004864 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004642:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004646:	4b85      	ldr	r3, [pc, #532]	; (800485c <HAL_UART_IRQHandler+0x298>)
 8004648:	4013      	ands	r3, r2
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 810a 	beq.w	8004864 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d011      	beq.n	8004680 <HAL_UART_IRQHandler+0xbc>
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2201      	movs	r2, #1
 800466e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d011      	beq.n	80046b0 <HAL_UART_IRQHandler+0xec>
 800468c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00b      	beq.n	80046b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2202      	movs	r2, #2
 800469e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a6:	f043 0204 	orr.w	r2, r3, #4
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d011      	beq.n	80046e0 <HAL_UART_IRQHandler+0x11c>
 80046bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2204      	movs	r2, #4
 80046ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d6:	f043 0202 	orr.w	r2, r3, #2
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d017      	beq.n	800471c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2208      	movs	r2, #8
 800470a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004712:	f043 0208 	orr.w	r2, r3, #8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004724:	2b00      	cmp	r3, #0
 8004726:	d012      	beq.n	800474e <HAL_UART_IRQHandler+0x18a>
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800473c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 81fd 	beq.w	8004b54 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004788:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b40      	cmp	r3, #64	; 0x40
 8004798:	d005      	beq.n	80047a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800479a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800479e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d04f      	beq.n	8004846 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fec8 	bl	800553c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	d141      	bne.n	800483e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3308      	adds	r3, #8
 80047c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3308      	adds	r3, #8
 80047e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1d9      	bne.n	80047ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480a:	2b00      	cmp	r3, #0
 800480c:	d013      	beq.n	8004836 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004812:	4a13      	ldr	r2, [pc, #76]	; (8004860 <HAL_UART_IRQHandler+0x29c>)
 8004814:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd f827 	bl	800186e <HAL_DMA_Abort_IT>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d017      	beq.n	8004856 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004830:	4610      	mov	r0, r2
 8004832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	e00f      	b.n	8004856 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f9a0 	bl	8004b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	e00b      	b.n	8004856 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f99c 	bl	8004b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004844:	e007      	b.n	8004856 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f998 	bl	8004b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004854:	e17e      	b.n	8004b54 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004856:	bf00      	nop
    return;
 8004858:	e17c      	b.n	8004b54 <HAL_UART_IRQHandler+0x590>
 800485a:	bf00      	nop
 800485c:	04000120 	.word	0x04000120
 8004860:	08005605 	.word	0x08005605

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004868:	2b01      	cmp	r3, #1
 800486a:	f040 814c 	bne.w	8004b06 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800486e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8145 	beq.w	8004b06 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800487c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 813e 	beq.w	8004b06 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2210      	movs	r2, #16
 8004890:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	f040 80b6 	bne.w	8004a0e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8150 	beq.w	8004b58 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048c2:	429a      	cmp	r2, r3
 80048c4:	f080 8148 	bcs.w	8004b58 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048dc:	f000 8086 	beq.w	80049ec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800490a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800490e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004916:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1da      	bne.n	80048e0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800493a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3308      	adds	r3, #8
 800494a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800494e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004952:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004956:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e1      	bne.n	800492a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3308      	adds	r3, #8
 800496c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3308      	adds	r3, #8
 8004986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800498a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800498c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004990:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e3      	bne.n	8004966 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049bc:	f023 0310 	bic.w	r3, r3, #16
 80049c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80049d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e4      	bne.n	80049ac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fc fed1 	bl	800178e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f8c2 	bl	8004b90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a0c:	e0a4      	b.n	8004b58 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8096 	beq.w	8004b5c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004a30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8091 	beq.w	8004b5c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e4      	bne.n	8004a3a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3308      	adds	r3, #8
 8004a90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a94:	633a      	str	r2, [r7, #48]	; 0x30
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e3      	bne.n	8004a70 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f023 0310 	bic.w	r3, r3, #16
 8004ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	69b9      	ldr	r1, [r7, #24]
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	617b      	str	r3, [r7, #20]
   return(result);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e4      	bne.n	8004abc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f846 	bl	8004b90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b04:	e02a      	b.n	8004b5c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00e      	beq.n	8004b30 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01c      	beq.n	8004b60 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
    }
    return;
 8004b2e:	e017      	b.n	8004b60 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d012      	beq.n	8004b62 <HAL_UART_IRQHandler+0x59e>
 8004b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00c      	beq.n	8004b62 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fd71 	bl	8005630 <UART_EndTransmit_IT>
    return;
 8004b4e:	e008      	b.n	8004b62 <HAL_UART_IRQHandler+0x59e>
      return;
 8004b50:	bf00      	nop
 8004b52:	e006      	b.n	8004b62 <HAL_UART_IRQHandler+0x59e>
    return;
 8004b54:	bf00      	nop
 8004b56:	e004      	b.n	8004b62 <HAL_UART_IRQHandler+0x59e>
      return;
 8004b58:	bf00      	nop
 8004b5a:	e002      	b.n	8004b62 <HAL_UART_IRQHandler+0x59e>
      return;
 8004b5c:	bf00      	nop
 8004b5e:	e000      	b.n	8004b62 <HAL_UART_IRQHandler+0x59e>
    return;
 8004b60:	bf00      	nop
  }

}
 8004b62:	37e8      	adds	r7, #232	; 0xe8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4ba6      	ldr	r3, [pc, #664]	; (8004e6c <UART_SetConfig+0x2c4>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	6979      	ldr	r1, [r7, #20]
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a94      	ldr	r2, [pc, #592]	; (8004e70 <UART_SetConfig+0x2c8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d120      	bne.n	8004c66 <UART_SetConfig+0xbe>
 8004c24:	4b93      	ldr	r3, [pc, #588]	; (8004e74 <UART_SetConfig+0x2cc>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d816      	bhi.n	8004c60 <UART_SetConfig+0xb8>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <UART_SetConfig+0x90>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c55 	.word	0x08004c55
 8004c40:	08004c4f 	.word	0x08004c4f
 8004c44:	08004c5b 	.word	0x08004c5b
 8004c48:	2301      	movs	r3, #1
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e150      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e14d      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004c54:	2304      	movs	r3, #4
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e14a      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	e147      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004c60:	2310      	movs	r3, #16
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e144      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a83      	ldr	r2, [pc, #524]	; (8004e78 <UART_SetConfig+0x2d0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d132      	bne.n	8004cd6 <UART_SetConfig+0x12e>
 8004c70:	4b80      	ldr	r3, [pc, #512]	; (8004e74 <UART_SetConfig+0x2cc>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b0c      	cmp	r3, #12
 8004c7c:	d828      	bhi.n	8004cd0 <UART_SetConfig+0x128>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0xdc>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004cb9 	.word	0x08004cb9
 8004c88:	08004cd1 	.word	0x08004cd1
 8004c8c:	08004cd1 	.word	0x08004cd1
 8004c90:	08004cd1 	.word	0x08004cd1
 8004c94:	08004cc5 	.word	0x08004cc5
 8004c98:	08004cd1 	.word	0x08004cd1
 8004c9c:	08004cd1 	.word	0x08004cd1
 8004ca0:	08004cd1 	.word	0x08004cd1
 8004ca4:	08004cbf 	.word	0x08004cbf
 8004ca8:	08004cd1 	.word	0x08004cd1
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cd1 	.word	0x08004cd1
 8004cb4:	08004ccb 	.word	0x08004ccb
 8004cb8:	2300      	movs	r3, #0
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e118      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e115      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e112      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004cca:	2308      	movs	r3, #8
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e10f      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e10c      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a68      	ldr	r2, [pc, #416]	; (8004e7c <UART_SetConfig+0x2d4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d120      	bne.n	8004d22 <UART_SetConfig+0x17a>
 8004ce0:	4b64      	ldr	r3, [pc, #400]	; (8004e74 <UART_SetConfig+0x2cc>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cea:	2b30      	cmp	r3, #48	; 0x30
 8004cec:	d013      	beq.n	8004d16 <UART_SetConfig+0x16e>
 8004cee:	2b30      	cmp	r3, #48	; 0x30
 8004cf0:	d814      	bhi.n	8004d1c <UART_SetConfig+0x174>
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d009      	beq.n	8004d0a <UART_SetConfig+0x162>
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d810      	bhi.n	8004d1c <UART_SetConfig+0x174>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <UART_SetConfig+0x15c>
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d006      	beq.n	8004d10 <UART_SetConfig+0x168>
 8004d02:	e00b      	b.n	8004d1c <UART_SetConfig+0x174>
 8004d04:	2300      	movs	r3, #0
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e0f2      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e0ef      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004d10:	2304      	movs	r3, #4
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e0ec      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004d16:	2308      	movs	r3, #8
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e0e9      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e0e6      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a56      	ldr	r2, [pc, #344]	; (8004e80 <UART_SetConfig+0x2d8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d120      	bne.n	8004d6e <UART_SetConfig+0x1c6>
 8004d2c:	4b51      	ldr	r3, [pc, #324]	; (8004e74 <UART_SetConfig+0x2cc>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d36:	2bc0      	cmp	r3, #192	; 0xc0
 8004d38:	d013      	beq.n	8004d62 <UART_SetConfig+0x1ba>
 8004d3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d3c:	d814      	bhi.n	8004d68 <UART_SetConfig+0x1c0>
 8004d3e:	2b80      	cmp	r3, #128	; 0x80
 8004d40:	d009      	beq.n	8004d56 <UART_SetConfig+0x1ae>
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d810      	bhi.n	8004d68 <UART_SetConfig+0x1c0>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <UART_SetConfig+0x1a8>
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d006      	beq.n	8004d5c <UART_SetConfig+0x1b4>
 8004d4e:	e00b      	b.n	8004d68 <UART_SetConfig+0x1c0>
 8004d50:	2300      	movs	r3, #0
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e0cc      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004d56:	2302      	movs	r3, #2
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e0c9      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e0c6      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004d62:	2308      	movs	r3, #8
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e0c3      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e0c0      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a44      	ldr	r2, [pc, #272]	; (8004e84 <UART_SetConfig+0x2dc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d125      	bne.n	8004dc4 <UART_SetConfig+0x21c>
 8004d78:	4b3e      	ldr	r3, [pc, #248]	; (8004e74 <UART_SetConfig+0x2cc>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d86:	d017      	beq.n	8004db8 <UART_SetConfig+0x210>
 8004d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8c:	d817      	bhi.n	8004dbe <UART_SetConfig+0x216>
 8004d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d92:	d00b      	beq.n	8004dac <UART_SetConfig+0x204>
 8004d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d98:	d811      	bhi.n	8004dbe <UART_SetConfig+0x216>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <UART_SetConfig+0x1fe>
 8004d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da2:	d006      	beq.n	8004db2 <UART_SetConfig+0x20a>
 8004da4:	e00b      	b.n	8004dbe <UART_SetConfig+0x216>
 8004da6:	2300      	movs	r3, #0
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e0a1      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004dac:	2302      	movs	r3, #2
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e09e      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004db2:	2304      	movs	r3, #4
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e09b      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004db8:	2308      	movs	r3, #8
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e098      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	77fb      	strb	r3, [r7, #31]
 8004dc2:	e095      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a2f      	ldr	r2, [pc, #188]	; (8004e88 <UART_SetConfig+0x2e0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d125      	bne.n	8004e1a <UART_SetConfig+0x272>
 8004dce:	4b29      	ldr	r3, [pc, #164]	; (8004e74 <UART_SetConfig+0x2cc>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ddc:	d017      	beq.n	8004e0e <UART_SetConfig+0x266>
 8004dde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004de2:	d817      	bhi.n	8004e14 <UART_SetConfig+0x26c>
 8004de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de8:	d00b      	beq.n	8004e02 <UART_SetConfig+0x25a>
 8004dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dee:	d811      	bhi.n	8004e14 <UART_SetConfig+0x26c>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <UART_SetConfig+0x254>
 8004df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df8:	d006      	beq.n	8004e08 <UART_SetConfig+0x260>
 8004dfa:	e00b      	b.n	8004e14 <UART_SetConfig+0x26c>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e076      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004e02:	2302      	movs	r3, #2
 8004e04:	77fb      	strb	r3, [r7, #31]
 8004e06:	e073      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e070      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004e0e:	2308      	movs	r3, #8
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e06d      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004e14:	2310      	movs	r3, #16
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e06a      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	; (8004e8c <UART_SetConfig+0x2e4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d138      	bne.n	8004e96 <UART_SetConfig+0x2ee>
 8004e24:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <UART_SetConfig+0x2cc>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e32:	d017      	beq.n	8004e64 <UART_SetConfig+0x2bc>
 8004e34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e38:	d82a      	bhi.n	8004e90 <UART_SetConfig+0x2e8>
 8004e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3e:	d00b      	beq.n	8004e58 <UART_SetConfig+0x2b0>
 8004e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e44:	d824      	bhi.n	8004e90 <UART_SetConfig+0x2e8>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <UART_SetConfig+0x2aa>
 8004e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4e:	d006      	beq.n	8004e5e <UART_SetConfig+0x2b6>
 8004e50:	e01e      	b.n	8004e90 <UART_SetConfig+0x2e8>
 8004e52:	2300      	movs	r3, #0
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e04b      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e048      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e045      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004e64:	2308      	movs	r3, #8
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e042      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004e6a:	bf00      	nop
 8004e6c:	efff69f3 	.word	0xefff69f3
 8004e70:	40011000 	.word	0x40011000
 8004e74:	40023800 	.word	0x40023800
 8004e78:	40004400 	.word	0x40004400
 8004e7c:	40004800 	.word	0x40004800
 8004e80:	40004c00 	.word	0x40004c00
 8004e84:	40005000 	.word	0x40005000
 8004e88:	40011400 	.word	0x40011400
 8004e8c:	40007800 	.word	0x40007800
 8004e90:	2310      	movs	r3, #16
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e02c      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a72      	ldr	r2, [pc, #456]	; (8005064 <UART_SetConfig+0x4bc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d125      	bne.n	8004eec <UART_SetConfig+0x344>
 8004ea0:	4b71      	ldr	r3, [pc, #452]	; (8005068 <UART_SetConfig+0x4c0>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004eaa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004eae:	d017      	beq.n	8004ee0 <UART_SetConfig+0x338>
 8004eb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004eb4:	d817      	bhi.n	8004ee6 <UART_SetConfig+0x33e>
 8004eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eba:	d00b      	beq.n	8004ed4 <UART_SetConfig+0x32c>
 8004ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec0:	d811      	bhi.n	8004ee6 <UART_SetConfig+0x33e>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <UART_SetConfig+0x326>
 8004ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eca:	d006      	beq.n	8004eda <UART_SetConfig+0x332>
 8004ecc:	e00b      	b.n	8004ee6 <UART_SetConfig+0x33e>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	77fb      	strb	r3, [r7, #31]
 8004ed2:	e00d      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	77fb      	strb	r3, [r7, #31]
 8004ed8:	e00a      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004eda:	2304      	movs	r3, #4
 8004edc:	77fb      	strb	r3, [r7, #31]
 8004ede:	e007      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e004      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004ee6:	2310      	movs	r3, #16
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e001      	b.n	8004ef0 <UART_SetConfig+0x348>
 8004eec:	2310      	movs	r3, #16
 8004eee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef8:	d15b      	bne.n	8004fb2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004efa:	7ffb      	ldrb	r3, [r7, #31]
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d828      	bhi.n	8004f52 <UART_SetConfig+0x3aa>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0x360>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f35 	.word	0x08004f35
 8004f10:	08004f3d 	.word	0x08004f3d
 8004f14:	08004f53 	.word	0x08004f53
 8004f18:	08004f43 	.word	0x08004f43
 8004f1c:	08004f53 	.word	0x08004f53
 8004f20:	08004f53 	.word	0x08004f53
 8004f24:	08004f53 	.word	0x08004f53
 8004f28:	08004f4b 	.word	0x08004f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f2c:	f7fe f954 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8004f30:	61b8      	str	r0, [r7, #24]
        break;
 8004f32:	e013      	b.n	8004f5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f34:	f7fe f964 	bl	8003200 <HAL_RCC_GetPCLK2Freq>
 8004f38:	61b8      	str	r0, [r7, #24]
        break;
 8004f3a:	e00f      	b.n	8004f5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f3c:	4b4b      	ldr	r3, [pc, #300]	; (800506c <UART_SetConfig+0x4c4>)
 8004f3e:	61bb      	str	r3, [r7, #24]
        break;
 8004f40:	e00c      	b.n	8004f5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f42:	f7fe f837 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8004f46:	61b8      	str	r0, [r7, #24]
        break;
 8004f48:	e008      	b.n	8004f5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f4e:	61bb      	str	r3, [r7, #24]
        break;
 8004f50:	e004      	b.n	8004f5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	77bb      	strb	r3, [r7, #30]
        break;
 8004f5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d074      	beq.n	800504c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	005a      	lsls	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	441a      	add	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	2b0f      	cmp	r3, #15
 8004f7c:	d916      	bls.n	8004fac <UART_SetConfig+0x404>
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f84:	d212      	bcs.n	8004fac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f023 030f 	bic.w	r3, r3, #15
 8004f8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	085b      	lsrs	r3, r3, #1
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	89fb      	ldrh	r3, [r7, #14]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	89fa      	ldrh	r2, [r7, #14]
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	e04f      	b.n	800504c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	77bb      	strb	r3, [r7, #30]
 8004fb0:	e04c      	b.n	800504c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fb2:	7ffb      	ldrb	r3, [r7, #31]
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d828      	bhi.n	800500a <UART_SetConfig+0x462>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0x418>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08004fed 	.word	0x08004fed
 8004fc8:	08004ff5 	.word	0x08004ff5
 8004fcc:	0800500b 	.word	0x0800500b
 8004fd0:	08004ffb 	.word	0x08004ffb
 8004fd4:	0800500b 	.word	0x0800500b
 8004fd8:	0800500b 	.word	0x0800500b
 8004fdc:	0800500b 	.word	0x0800500b
 8004fe0:	08005003 	.word	0x08005003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe4:	f7fe f8f8 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8004fe8:	61b8      	str	r0, [r7, #24]
        break;
 8004fea:	e013      	b.n	8005014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fec:	f7fe f908 	bl	8003200 <HAL_RCC_GetPCLK2Freq>
 8004ff0:	61b8      	str	r0, [r7, #24]
        break;
 8004ff2:	e00f      	b.n	8005014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	; (800506c <UART_SetConfig+0x4c4>)
 8004ff6:	61bb      	str	r3, [r7, #24]
        break;
 8004ff8:	e00c      	b.n	8005014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffa:	f7fd ffdb 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8004ffe:	61b8      	str	r0, [r7, #24]
        break;
 8005000:	e008      	b.n	8005014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005006:	61bb      	str	r3, [r7, #24]
        break;
 8005008:	e004      	b.n	8005014 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	77bb      	strb	r3, [r7, #30]
        break;
 8005012:	bf00      	nop
    }

    if (pclk != 0U)
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d018      	beq.n	800504c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	085a      	lsrs	r2, r3, #1
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	441a      	add	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b0f      	cmp	r3, #15
 8005032:	d909      	bls.n	8005048 <UART_SetConfig+0x4a0>
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503a:	d205      	bcs.n	8005048 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	b29a      	uxth	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	e001      	b.n	800504c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005058:	7fbb      	ldrb	r3, [r7, #30]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40007c00 	.word	0x40007c00
 8005068:	40023800 	.word	0x40023800
 800506c:	00f42400 	.word	0x00f42400

08005070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01a      	beq.n	8005186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516e:	d10a      	bne.n	8005186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051c4:	f7fc f9a2 	bl	800150c <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d10e      	bne.n	80051f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f81b 	bl	8005222 <UART_WaitOnFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e011      	b.n	800521a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b09c      	sub	sp, #112	; 0x70
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	4613      	mov	r3, r2
 8005230:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005232:	e0a7      	b.n	8005384 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	f000 80a3 	beq.w	8005384 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523e:	f7fc f965 	bl	800150c <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800524a:	429a      	cmp	r2, r3
 800524c:	d302      	bcc.n	8005254 <UART_WaitOnFlagUntilTimeout+0x32>
 800524e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005250:	2b00      	cmp	r3, #0
 8005252:	d13f      	bne.n	80052d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005264:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005268:	667b      	str	r3, [r7, #100]	; 0x64
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005272:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005274:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005278:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e6      	bne.n	8005254 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3308      	adds	r3, #8
 800528c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	663b      	str	r3, [r7, #96]	; 0x60
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3308      	adds	r3, #8
 80052a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80052a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e5      	bne.n	8005286 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e068      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d050      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f0:	d148      	bne.n	8005384 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005310:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531a:	637b      	str	r3, [r7, #52]	; 0x34
 800531c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e6      	bne.n	80052fc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3308      	adds	r3, #8
 8005334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	613b      	str	r3, [r7, #16]
   return(result);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f023 0301 	bic.w	r3, r3, #1
 8005344:	66bb      	str	r3, [r7, #104]	; 0x68
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3308      	adds	r3, #8
 800534c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800534e:	623a      	str	r2, [r7, #32]
 8005350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	69f9      	ldr	r1, [r7, #28]
 8005354:	6a3a      	ldr	r2, [r7, #32]
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	61bb      	str	r3, [r7, #24]
   return(result);
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e5      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e010      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69da      	ldr	r2, [r3, #28]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	429a      	cmp	r2, r3
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	429a      	cmp	r2, r3
 80053a0:	f43f af48 	beq.w	8005234 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3770      	adds	r7, #112	; 0x70
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b097      	sub	sp, #92	; 0x5c
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e2:	d10e      	bne.n	8005402 <UART_Start_Receive_IT+0x52>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d105      	bne.n	80053f8 <UART_Start_Receive_IT+0x48>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053f6:	e02d      	b.n	8005454 <UART_Start_Receive_IT+0xa4>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	22ff      	movs	r2, #255	; 0xff
 80053fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005400:	e028      	b.n	8005454 <UART_Start_Receive_IT+0xa4>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10d      	bne.n	8005426 <UART_Start_Receive_IT+0x76>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <UART_Start_Receive_IT+0x6c>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	22ff      	movs	r2, #255	; 0xff
 8005416:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800541a:	e01b      	b.n	8005454 <UART_Start_Receive_IT+0xa4>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	227f      	movs	r2, #127	; 0x7f
 8005420:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005424:	e016      	b.n	8005454 <UART_Start_Receive_IT+0xa4>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542e:	d10d      	bne.n	800544c <UART_Start_Receive_IT+0x9c>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d104      	bne.n	8005442 <UART_Start_Receive_IT+0x92>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	227f      	movs	r2, #127	; 0x7f
 800543c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005440:	e008      	b.n	8005454 <UART_Start_Receive_IT+0xa4>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	223f      	movs	r2, #63	; 0x3f
 8005446:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800544a:	e003      	b.n	8005454 <UART_Start_Receive_IT+0xa4>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2222      	movs	r2, #34	; 0x22
 8005460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	f043 0301 	orr.w	r3, r3, #1
 800547a:	657b      	str	r3, [r7, #84]	; 0x54
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3308      	adds	r3, #8
 8005482:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005484:	64ba      	str	r2, [r7, #72]	; 0x48
 8005486:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800548a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e5      	bne.n	8005464 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a0:	d107      	bne.n	80054b2 <UART_Start_Receive_IT+0x102>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d103      	bne.n	80054b2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4a21      	ldr	r2, [pc, #132]	; (8005534 <UART_Start_Receive_IT+0x184>)
 80054ae:	669a      	str	r2, [r3, #104]	; 0x68
 80054b0:	e002      	b.n	80054b8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4a20      	ldr	r2, [pc, #128]	; (8005538 <UART_Start_Receive_IT+0x188>)
 80054b6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d019      	beq.n	80054f4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80054d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
 80054e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e6      	bne.n	80054c0 <UART_Start_Receive_IT+0x110>
 80054f2:	e018      	b.n	8005526 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	613b      	str	r3, [r7, #16]
   return(result);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f043 0320 	orr.w	r3, r3, #32
 8005508:	653b      	str	r3, [r7, #80]	; 0x50
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005512:	623b      	str	r3, [r7, #32]
 8005514:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	69f9      	ldr	r1, [r7, #28]
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e6      	bne.n	80054f4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	375c      	adds	r7, #92	; 0x5c
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	080057eb 	.word	0x080057eb
 8005538:	08005685 	.word	0x08005685

0800553c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b095      	sub	sp, #84	; 0x54
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005562:	643b      	str	r3, [r7, #64]	; 0x40
 8005564:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005568:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e6      	bne.n	8005544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	61fb      	str	r3, [r7, #28]
   return(result);
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	64bb      	str	r3, [r7, #72]	; 0x48
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800559c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e5      	bne.n	8005576 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d118      	bne.n	80055e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f023 0310 	bic.w	r3, r3, #16
 80055c6:	647b      	str	r3, [r7, #68]	; 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6979      	ldr	r1, [r7, #20]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	613b      	str	r3, [r7, #16]
   return(result);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e6      	bne.n	80055b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055f8:	bf00      	nop
 80055fa:	3754      	adds	r7, #84	; 0x54
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f7ff faaa 	bl	8004b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	60bb      	str	r3, [r7, #8]
   return(result);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6979      	ldr	r1, [r7, #20]
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	613b      	str	r3, [r7, #16]
   return(result);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e6      	bne.n	8005638 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff fa76 	bl	8004b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567c:	bf00      	nop
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b096      	sub	sp, #88	; 0x58
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005692:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800569c:	2b22      	cmp	r3, #34	; 0x22
 800569e:	f040 8098 	bne.w	80057d2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80056b0:	b2d9      	uxtb	r1, r3
 80056b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056bc:	400a      	ands	r2, r1
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d17b      	bne.n	80057e2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005708:	647b      	str	r3, [r7, #68]	; 0x44
 800570a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800570e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e6      	bne.n	80056ea <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	623b      	str	r3, [r7, #32]
   return(result);
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800573c:	633a      	str	r2, [r7, #48]	; 0x30
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e5      	bne.n	800571c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005768:	2b01      	cmp	r3, #1
 800576a:	d12e      	bne.n	80057ca <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0310 	bic.w	r3, r3, #16
 8005786:	64bb      	str	r3, [r7, #72]	; 0x48
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	69b9      	ldr	r1, [r7, #24]
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	617b      	str	r3, [r7, #20]
   return(result);
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e6      	bne.n	8005772 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	2b10      	cmp	r3, #16
 80057b0:	d103      	bne.n	80057ba <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2210      	movs	r2, #16
 80057b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff f9e4 	bl	8004b90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057c8:	e00b      	b.n	80057e2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fb fa72 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 80057d0:	e007      	b.n	80057e2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699a      	ldr	r2, [r3, #24]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0208 	orr.w	r2, r2, #8
 80057e0:	619a      	str	r2, [r3, #24]
}
 80057e2:	bf00      	nop
 80057e4:	3758      	adds	r7, #88	; 0x58
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b096      	sub	sp, #88	; 0x58
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005802:	2b22      	cmp	r3, #34	; 0x22
 8005804:	f040 8098 	bne.w	8005938 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005816:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005818:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800581c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005820:	4013      	ands	r3, r2
 8005822:	b29a      	uxth	r2, r3
 8005824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005826:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582c:	1c9a      	adds	r2, r3, #2
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d17b      	bne.n	8005948 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005864:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586e:	643b      	str	r3, [r7, #64]	; 0x40
 8005870:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005874:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e6      	bne.n	8005850 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3308      	adds	r3, #8
 8005888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	61fb      	str	r3, [r7, #28]
   return(result);
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f023 0301 	bic.w	r3, r3, #1
 8005898:	64bb      	str	r3, [r7, #72]	; 0x48
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d12e      	bne.n	8005930 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f023 0310 	bic.w	r3, r3, #16
 80058ec:	647b      	str	r3, [r7, #68]	; 0x44
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6979      	ldr	r1, [r7, #20]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	613b      	str	r3, [r7, #16]
   return(result);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e6      	bne.n	80058d8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b10      	cmp	r3, #16
 8005916:	d103      	bne.n	8005920 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2210      	movs	r2, #16
 800591e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff f931 	bl	8004b90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800592e:	e00b      	b.n	8005948 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7fb f9bf 	bl	8000cb4 <HAL_UART_RxCpltCallback>
}
 8005936:	e007      	b.n	8005948 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0208 	orr.w	r2, r2, #8
 8005946:	619a      	str	r2, [r3, #24]
}
 8005948:	bf00      	nop
 800594a:	3758      	adds	r7, #88	; 0x58
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005950:	b084      	sub	sp, #16
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	f107 001c 	add.w	r0, r7, #28
 800595e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	2b01      	cmp	r3, #1
 8005966:	d120      	bne.n	80059aa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	4b20      	ldr	r3, [pc, #128]	; (80059fc <USB_CoreInit+0xac>)
 800597a:	4013      	ands	r3, r2
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800598c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598e:	2b01      	cmp	r3, #1
 8005990:	d105      	bne.n	800599e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa96 	bl	8005ed0 <USB_CoreReset>
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]
 80059a8:	e010      	b.n	80059cc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fa8a 	bl	8005ed0 <USB_CoreReset>
 80059bc:	4603      	mov	r3, r0
 80059be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10b      	bne.n	80059ea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f043 0206 	orr.w	r2, r3, #6
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059f6:	b004      	add	sp, #16
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	ffbdffbf 	.word	0xffbdffbf

08005a00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f023 0201 	bic.w	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d115      	bne.n	8005a70 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a50:	2001      	movs	r0, #1
 8005a52:	f7fb fd67 	bl	8001524 <HAL_Delay>
      ms++;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fa29 	bl	8005eb4 <USB_GetMode>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d01e      	beq.n	8005aa6 <USB_SetCurrentMode+0x84>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b31      	cmp	r3, #49	; 0x31
 8005a6c:	d9f0      	bls.n	8005a50 <USB_SetCurrentMode+0x2e>
 8005a6e:	e01a      	b.n	8005aa6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d115      	bne.n	8005aa2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a82:	2001      	movs	r0, #1
 8005a84:	f7fb fd4e 	bl	8001524 <HAL_Delay>
      ms++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa10 	bl	8005eb4 <USB_GetMode>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <USB_SetCurrentMode+0x84>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b31      	cmp	r3, #49	; 0x31
 8005a9e:	d9f0      	bls.n	8005a82 <USB_SetCurrentMode+0x60>
 8005aa0:	e001      	b.n	8005aa6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e005      	b.n	8005ab2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b32      	cmp	r3, #50	; 0x32
 8005aaa:	d101      	bne.n	8005ab0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005abc:	b084      	sub	sp, #16
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	e009      	b.n	8005af0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	3340      	adds	r3, #64	; 0x40
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3301      	adds	r3, #1
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b0e      	cmp	r3, #14
 8005af4:	d9f2      	bls.n	8005adc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d11c      	bne.n	8005b36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0a:	f043 0302 	orr.w	r3, r3, #2
 8005b0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e005      	b.n	8005b42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b54:	4619      	mov	r1, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	680b      	ldr	r3, [r1, #0]
 8005b60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d10c      	bne.n	8005b82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d104      	bne.n	8005b78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b6e:	2100      	movs	r1, #0
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f965 	bl	8005e40 <USB_SetDevSpeed>
 8005b76:	e008      	b.n	8005b8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b78:	2101      	movs	r1, #1
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f960 	bl	8005e40 <USB_SetDevSpeed>
 8005b80:	e003      	b.n	8005b8a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b82:	2103      	movs	r1, #3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f95b 	bl	8005e40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b8a:	2110      	movs	r1, #16
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f8f3 	bl	8005d78 <USB_FlushTxFifo>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f91f 	bl	8005de0 <USB_FlushRxFifo>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bca:	461a      	mov	r2, r3
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	e043      	b.n	8005c5e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bec:	d118      	bne.n	8005c20 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	461a      	mov	r2, r3
 8005c02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	e013      	b.n	8005c32 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c16:	461a      	mov	r2, r3
 8005c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e008      	b.n	8005c32 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2300      	movs	r3, #0
 8005c30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3e:	461a      	mov	r2, r3
 8005c40:	2300      	movs	r3, #0
 8005c42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	461a      	mov	r2, r3
 8005c52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d3b7      	bcc.n	8005bd6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c66:	2300      	movs	r3, #0
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	e043      	b.n	8005cf4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c82:	d118      	bne.n	8005cb6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c96:	461a      	mov	r2, r3
 8005c98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	e013      	b.n	8005cc8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	461a      	mov	r2, r3
 8005cae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	e008      	b.n	8005cc8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d3b7      	bcc.n	8005c6c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f043 0210 	orr.w	r2, r3, #16
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699a      	ldr	r2, [r3, #24]
 8005d34:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <USB_DevInit+0x2b4>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f043 0208 	orr.w	r2, r3, #8
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d105      	bne.n	8005d60 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	699a      	ldr	r2, [r3, #24]
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <USB_DevInit+0x2b8>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d6c:	b004      	add	sp, #16
 8005d6e:	4770      	bx	lr
 8005d70:	803c3800 	.word	0x803c3800
 8005d74:	40000004 	.word	0x40000004

08005d78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <USB_FlushTxFifo+0x64>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e01b      	b.n	8005dd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	daf2      	bge.n	8005d86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	019b      	lsls	r3, r3, #6
 8005da8:	f043 0220 	orr.w	r2, r3, #32
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4a08      	ldr	r2, [pc, #32]	; (8005ddc <USB_FlushTxFifo+0x64>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d901      	bls.n	8005dc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e006      	b.n	8005dd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d0f0      	beq.n	8005db0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	00030d40 	.word	0x00030d40

08005de0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3301      	adds	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4a11      	ldr	r2, [pc, #68]	; (8005e3c <USB_FlushRxFifo+0x5c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d901      	bls.n	8005dfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e018      	b.n	8005e30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	daf2      	bge.n	8005dec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2210      	movs	r2, #16
 8005e0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4a08      	ldr	r2, [pc, #32]	; (8005e3c <USB_FlushRxFifo+0x5c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d901      	bls.n	8005e22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e006      	b.n	8005e30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	d0f0      	beq.n	8005e10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	00030d40 	.word	0x00030d40

08005e40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e60:	4313      	orrs	r3, r2
 8005e62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e8c:	f023 0303 	bic.w	r3, r3, #3
 8005e90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ea0:	f043 0302 	orr.w	r3, r3, #2
 8005ea4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <USB_CoreReset+0x64>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e01b      	b.n	8005f26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	daf2      	bge.n	8005edc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f043 0201 	orr.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <USB_CoreReset+0x64>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e006      	b.n	8005f26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d0f0      	beq.n	8005f06 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	00030d40 	.word	0x00030d40

08005f38 <__libc_init_array>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	4d0d      	ldr	r5, [pc, #52]	; (8005f70 <__libc_init_array+0x38>)
 8005f3c:	4c0d      	ldr	r4, [pc, #52]	; (8005f74 <__libc_init_array+0x3c>)
 8005f3e:	1b64      	subs	r4, r4, r5
 8005f40:	10a4      	asrs	r4, r4, #2
 8005f42:	2600      	movs	r6, #0
 8005f44:	42a6      	cmp	r6, r4
 8005f46:	d109      	bne.n	8005f5c <__libc_init_array+0x24>
 8005f48:	4d0b      	ldr	r5, [pc, #44]	; (8005f78 <__libc_init_array+0x40>)
 8005f4a:	4c0c      	ldr	r4, [pc, #48]	; (8005f7c <__libc_init_array+0x44>)
 8005f4c:	f000 f830 	bl	8005fb0 <_init>
 8005f50:	1b64      	subs	r4, r4, r5
 8005f52:	10a4      	asrs	r4, r4, #2
 8005f54:	2600      	movs	r6, #0
 8005f56:	42a6      	cmp	r6, r4
 8005f58:	d105      	bne.n	8005f66 <__libc_init_array+0x2e>
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f60:	4798      	blx	r3
 8005f62:	3601      	adds	r6, #1
 8005f64:	e7ee      	b.n	8005f44 <__libc_init_array+0xc>
 8005f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6a:	4798      	blx	r3
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	e7f2      	b.n	8005f56 <__libc_init_array+0x1e>
 8005f70:	08006768 	.word	0x08006768
 8005f74:	08006768 	.word	0x08006768
 8005f78:	08006768 	.word	0x08006768
 8005f7c:	0800676c 	.word	0x0800676c

08005f80 <memset>:
 8005f80:	4402      	add	r2, r0
 8005f82:	4603      	mov	r3, r0
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d100      	bne.n	8005f8a <memset+0xa>
 8005f88:	4770      	bx	lr
 8005f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8e:	e7f9      	b.n	8005f84 <memset+0x4>

08005f90 <strcat>:
 8005f90:	b510      	push	{r4, lr}
 8005f92:	4602      	mov	r2, r0
 8005f94:	7814      	ldrb	r4, [r2, #0]
 8005f96:	4613      	mov	r3, r2
 8005f98:	3201      	adds	r2, #1
 8005f9a:	2c00      	cmp	r4, #0
 8005f9c:	d1fa      	bne.n	8005f94 <strcat+0x4>
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fa4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fa8:	2a00      	cmp	r2, #0
 8005faa:	d1f9      	bne.n	8005fa0 <strcat+0x10>
 8005fac:	bd10      	pop	{r4, pc}
	...

08005fb0 <_init>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	bf00      	nop
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr

08005fbc <_fini>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	bf00      	nop
 8005fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc2:	bc08      	pop	{r3}
 8005fc4:	469e      	mov	lr, r3
 8005fc6:	4770      	bx	lr
