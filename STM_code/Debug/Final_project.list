
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009114  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  080092e8  080092e8  000192e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d58  08009d58  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009d58  08009d58  00019d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d60  08009d60  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d60  08009d60  00019d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000078  08009de0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  08009de0  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017eb8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032aa  00000000  00000000  00037f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0003b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  0003c568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f56  00000000  00000000  0003d740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fd2  00000000  00000000  00065696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4016  00000000  00000000  0007e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017267e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006040  00000000  00000000  001726d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080092cc 	.word	0x080092cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080092cc 	.word	0x080092cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b974 	b.w	8000f5c <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468e      	mov	lr, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14d      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4694      	mov	ip, r2
 8000c9e:	d969      	bls.n	8000d74 <__udivmoddi4+0xe8>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b152      	cbz	r2, 8000cbc <__udivmoddi4+0x30>
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	f1c2 0120 	rsb	r1, r2, #32
 8000cae:	fa20 f101 	lsr.w	r1, r0, r1
 8000cb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cba:	4094      	lsls	r4, r2
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	0c21      	lsrs	r1, r4, #16
 8000cc2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc6:	fa1f f78c 	uxth.w	r7, ip
 8000cca:	fb08 e316 	mls	r3, r8, r6, lr
 8000cce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cd2:	fb06 f107 	mul.w	r1, r6, r7
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ce2:	f080 811f 	bcs.w	8000f24 <__udivmoddi4+0x298>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 811c 	bls.w	8000f24 <__udivmoddi4+0x298>
 8000cec:	3e02      	subs	r6, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a5b      	subs	r3, r3, r1
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d00:	fb00 f707 	mul.w	r7, r0, r7
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x92>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d10:	f080 810a 	bcs.w	8000f28 <__udivmoddi4+0x29c>
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	f240 8107 	bls.w	8000f28 <__udivmoddi4+0x29c>
 8000d1a:	4464      	add	r4, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	1be4      	subs	r4, r4, r7
 8000d24:	2600      	movs	r6, #0
 8000d26:	b11d      	cbz	r5, 8000d30 <__udivmoddi4+0xa4>
 8000d28:	40d4      	lsrs	r4, r2
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0xc2>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	f000 80ef 	beq.w	8000f1e <__udivmoddi4+0x292>
 8000d40:	2600      	movs	r6, #0
 8000d42:	e9c5 0100 	strd	r0, r1, [r5]
 8000d46:	4630      	mov	r0, r6
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	fab3 f683 	clz	r6, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d14a      	bne.n	8000dec <__udivmoddi4+0x160>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xd4>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 80f9 	bhi.w	8000f52 <__udivmoddi4+0x2c6>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb61 0303 	sbc.w	r3, r1, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	469e      	mov	lr, r3
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e0      	beq.n	8000d30 <__udivmoddi4+0xa4>
 8000d6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d72:	e7dd      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000d74:	b902      	cbnz	r2, 8000d78 <__udivmoddi4+0xec>
 8000d76:	deff      	udf	#255	; 0xff
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	f040 8092 	bne.w	8000ea6 <__udivmoddi4+0x21a>
 8000d82:	eba1 010c 	sub.w	r1, r1, ip
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	2601      	movs	r6, #1
 8000d90:	0c20      	lsrs	r0, r4, #16
 8000d92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d96:	fb07 1113 	mls	r1, r7, r3, r1
 8000d9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9e:	fb0e f003 	mul.w	r0, lr, r3
 8000da2:	4288      	cmp	r0, r1
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x12c>
 8000da6:	eb1c 0101 	adds.w	r1, ip, r1
 8000daa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x12a>
 8000db0:	4288      	cmp	r0, r1
 8000db2:	f200 80cb 	bhi.w	8000f4c <__udivmoddi4+0x2c0>
 8000db6:	4643      	mov	r3, r8
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x156>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd8:	d202      	bcs.n	8000de0 <__udivmoddi4+0x154>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f200 80bb 	bhi.w	8000f56 <__udivmoddi4+0x2ca>
 8000de0:	4608      	mov	r0, r1
 8000de2:	eba4 040e 	sub.w	r4, r4, lr
 8000de6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dea:	e79c      	b.n	8000d26 <__udivmoddi4+0x9a>
 8000dec:	f1c6 0720 	rsb	r7, r6, #32
 8000df0:	40b3      	lsls	r3, r6
 8000df2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000e02:	431c      	orrs	r4, r3
 8000e04:	40f9      	lsrs	r1, r7
 8000e06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e12:	0c20      	lsrs	r0, r4, #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fb09 1118 	mls	r1, r9, r8, r1
 8000e1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e20:	fb08 f00e 	mul.w	r0, r8, lr
 8000e24:	4288      	cmp	r0, r1
 8000e26:	fa02 f206 	lsl.w	r2, r2, r6
 8000e2a:	d90b      	bls.n	8000e44 <__udivmoddi4+0x1b8>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e34:	f080 8088 	bcs.w	8000f48 <__udivmoddi4+0x2bc>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f240 8085 	bls.w	8000f48 <__udivmoddi4+0x2bc>
 8000e3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	458e      	cmp	lr, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x1e2>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e64:	d26c      	bcs.n	8000f40 <__udivmoddi4+0x2b4>
 8000e66:	458e      	cmp	lr, r1
 8000e68:	d96a      	bls.n	8000f40 <__udivmoddi4+0x2b4>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e72:	fba0 9402 	umull	r9, r4, r0, r2
 8000e76:	eba1 010e 	sub.w	r1, r1, lr
 8000e7a:	42a1      	cmp	r1, r4
 8000e7c:	46c8      	mov	r8, r9
 8000e7e:	46a6      	mov	lr, r4
 8000e80:	d356      	bcc.n	8000f30 <__udivmoddi4+0x2a4>
 8000e82:	d053      	beq.n	8000f2c <__udivmoddi4+0x2a0>
 8000e84:	b15d      	cbz	r5, 8000e9e <__udivmoddi4+0x212>
 8000e86:	ebb3 0208 	subs.w	r2, r3, r8
 8000e8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e92:	fa22 f306 	lsr.w	r3, r2, r6
 8000e96:	40f1      	lsrs	r1, r6
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9e:	2600      	movs	r6, #0
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	f1c2 0320 	rsb	r3, r2, #32
 8000eaa:	40d8      	lsrs	r0, r3
 8000eac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	4301      	orrs	r1, r0
 8000eb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec8:	0c0b      	lsrs	r3, r1, #16
 8000eca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ece:	fb00 f60e 	mul.w	r6, r0, lr
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x260>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee2:	d22f      	bcs.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee4:	429e      	cmp	r6, r3
 8000ee6:	d92d      	bls.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4463      	add	r3, ip
 8000eec:	1b9b      	subs	r3, r3, r6
 8000eee:	b289      	uxth	r1, r1
 8000ef0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efc:	fb06 f30e 	mul.w	r3, r6, lr
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x28a>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f0c:	d216      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d914      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000f12:	3e02      	subs	r6, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f1c:	e738      	b.n	8000d90 <__udivmoddi4+0x104>
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e705      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e3      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6f8      	b.n	8000d1e <__udivmoddi4+0x92>
 8000f2c:	454b      	cmp	r3, r9
 8000f2e:	d2a9      	bcs.n	8000e84 <__udivmoddi4+0x1f8>
 8000f30:	ebb9 0802 	subs.w	r8, r9, r2
 8000f34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7a3      	b.n	8000e84 <__udivmoddi4+0x1f8>
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	e7ea      	b.n	8000f16 <__udivmoddi4+0x28a>
 8000f40:	4620      	mov	r0, r4
 8000f42:	e794      	b.n	8000e6e <__udivmoddi4+0x1e2>
 8000f44:	4640      	mov	r0, r8
 8000f46:	e7d1      	b.n	8000eec <__udivmoddi4+0x260>
 8000f48:	46d0      	mov	r8, sl
 8000f4a:	e77b      	b.n	8000e44 <__udivmoddi4+0x1b8>
 8000f4c:	3b02      	subs	r3, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	e732      	b.n	8000db8 <__udivmoddi4+0x12c>
 8000f52:	4630      	mov	r0, r6
 8000f54:	e709      	b.n	8000d6a <__udivmoddi4+0xde>
 8000f56:	4464      	add	r4, ip
 8000f58:	3802      	subs	r0, #2
 8000f5a:	e742      	b.n	8000de2 <__udivmoddi4+0x156>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <MCP9808_Init>:
 * write bit.
 *
 * @param hi2c A pointer to the I2C handler.
 * @param addr Address of MCP9808 on I2C bus (default 0x18).
 */
void MCP9808_Init(I2C_HandleTypeDef *hi2c, uint8_t addr) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
	mcp9808.hi2c = hi2c;
 8000f6c:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <MCP9808_Init+0x30>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
	mcp9808.address = addr << 1;
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <MCP9808_Init+0x30>)
 8000f7a:	711a      	strb	r2, [r3, #4]
	mcp9808.resolution = MCP9808_VeryHigh_Res;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <MCP9808_Init+0x30>)
 8000f7e:	2203      	movs	r2, #3
 8000f80:	715a      	strb	r2, [r3, #5]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000094 	.word	0x20000094

08000f94 <MCP9808_Write>:
 *
 * @param _reg Pointer to a register.
 * @param value The data on which to send.
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Write(MCP9808_REG_TypeDef *_reg, uint8_t *value) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
	uint8_t reg[] = {*_reg, *value};
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	733b      	strb	r3, [r7, #12]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MCP9808_Write+0x40>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MCP9808_Write+0x40>)
 8000fb0:	791b      	ldrb	r3, [r3, #4]
 8000fb2:	b299      	uxth	r1, r3
 8000fb4:	f107 020c 	add.w	r2, r7, #12
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	f001 fe8e 	bl	8002ce0 <HAL_I2C_Master_Transmit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
			reg, sizeof(reg), HAL_MAX_DELAY);

	return res;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000094 	.word	0x20000094

08000fd8 <MCP9808_Read>:
 * @param _reg Pointer to a register.
 * @param buf A pointer to a buffer to store the response in.
 * @param buf_size The size of the buffer (n values).
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Read(MCP9808_REG_TypeDef *_reg, uint8_t *buf, uint8_t buf_size) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	71fb      	strb	r3, [r7, #7]

	uint8_t reg[1] = {*_reg};
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MCP9808_Read+0x70>)
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MCP9808_Read+0x70>)
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	f107 0214 	add.w	r2, r7, #20
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	f001 fe6d 	bl	8002ce0 <HAL_I2C_Master_Transmit>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]
			reg, sizeof(reg), HAL_MAX_DELAY);


	if(res != HAL_OK){
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MCP9808_Read+0x3c>
		return res;
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	e014      	b.n	800103e <MCP9808_Read+0x66>
	}

	res = HAL_I2C_Master_Receive(mcp9808.hi2c, mcp9808.address, buf, buf_size, HAL_MAX_DELAY);
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MCP9808_Read+0x70>)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MCP9808_Read+0x70>)
 800101a:	791b      	ldrb	r3, [r3, #4]
 800101c:	b299      	uxth	r1, r3
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	b29b      	uxth	r3, r3
 8001022:	f04f 32ff 	mov.w	r2, #4294967295
 8001026:	9200      	str	r2, [sp, #0]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	f001 ff4d 	bl	8002ec8 <HAL_I2C_Master_Receive>
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]

	if(res != HAL_OK){
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MCP9808_Read+0x64>
		return res;
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	e000      	b.n	800103e <MCP9808_Read+0x66>
	}

	return res;
 800103c:	7dfb      	ldrb	r3, [r7, #23]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000094 	.word	0x20000094

0800104c <MCP9808_MeasureTemperature>:
 *
 * @param temperature A pointer to a temperature float to store a returned
 * value from.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_MeasureTemperature(float *temperature) {
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

	MCP9808_REG_TypeDef reg = MCP9808_T_AMBIENT_REG;
 8001054:	2305      	movs	r3, #5
 8001056:	733b      	strb	r3, [r7, #12]
	uint8_t buf[2];
	HAL_StatusTypeDef res = MCP9808_Read(&reg, buf, sizeof(buf));
 8001058:	f107 0108 	add.w	r1, r7, #8
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2202      	movs	r2, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ffb8 	bl	8000fd8 <MCP9808_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d162      	bne.n	8001138 <MCP9808_MeasureTemperature+0xec>
		uint8_t upper = buf[0];
 8001072:	7a3b      	ldrb	r3, [r7, #8]
 8001074:	73bb      	strb	r3, [r7, #14]
		upper &= 0x1F;
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	73bb      	strb	r3, [r7, #14]
		uint8_t lower = buf[1];
 800107e:	7a7b      	ldrb	r3, [r7, #9]
 8001080:	737b      	strb	r3, [r7, #13]

		if((upper & 0x10) == 0x10) {
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	2b00      	cmp	r3, #0
 800108a:	d030      	beq.n	80010ee <MCP9808_MeasureTemperature+0xa2>
			upper &= 0x0F;
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	73bb      	strb	r3, [r7, #14]
			*temperature = 256 - (upper * 16.0) + (lower / 16.0);
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa64 	bl	8000564 <__aeabi_i2d>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <MCP9808_MeasureTemperature+0xf8>)
 80010a2:	f7ff fac9 	bl	8000638 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4926      	ldr	r1, [pc, #152]	; (8001148 <MCP9808_MeasureTemperature+0xfc>)
 80010b0:	f7ff f90a 	bl	80002c8 <__aeabi_dsub>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4614      	mov	r4, r2
 80010ba:	461d      	mov	r5, r3
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa50 	bl	8000564 <__aeabi_i2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MCP9808_MeasureTemperature+0xf8>)
 80010ca:	f7ff fbdf 	bl	800088c <__aeabi_ddiv>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4620      	mov	r0, r4
 80010d4:	4629      	mov	r1, r5
 80010d6:	f7ff f8f9 	bl	80002cc <__adddf3>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fd6b 	bl	8000bbc <__aeabi_d2f>
 80010e6:	4602      	mov	r2, r0
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e024      	b.n	8001138 <MCP9808_MeasureTemperature+0xec>
		} else {
			*temperature = (upper * 16.0) + (lower / 16.0);
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa37 	bl	8000564 <__aeabi_i2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MCP9808_MeasureTemperature+0xf8>)
 80010fc:	f7ff fa9c 	bl	8000638 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4614      	mov	r4, r2
 8001106:	461d      	mov	r5, r3
 8001108:	7b7b      	ldrb	r3, [r7, #13]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa2a 	bl	8000564 <__aeabi_i2d>
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MCP9808_MeasureTemperature+0xf8>)
 8001116:	f7ff fbb9 	bl	800088c <__aeabi_ddiv>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4620      	mov	r0, r4
 8001120:	4629      	mov	r1, r5
 8001122:	f7ff f8d3 	bl	80002cc <__adddf3>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fd45 	bl	8000bbc <__aeabi_d2f>
 8001132:	4602      	mov	r2, r0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	601a      	str	r2, [r3, #0]
		}
	}

	return res;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bdb0      	pop	{r4, r5, r7, pc}
 8001142:	bf00      	nop
 8001144:	40300000 	.word	0x40300000
 8001148:	40700000 	.word	0x40700000

0800114c <MCP9808_SetResolution>:
 * VeryHigh = 0.0625 (slowest 250 ms)
 *
 * @param resolution Desired resolution to switch to.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_SetResolution(MCP9808_Resolution_TypeDef resolution) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]

	MCP9808_REG_TypeDef reg = MCP9808_RESOLUTION_REG;
 8001156:	2308      	movs	r3, #8
 8001158:	73bb      	strb	r3, [r7, #14]
	uint8_t value = resolution & 0x03;
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef res = MCP9808_Write(&reg, &value);
 8001164:	f107 020d 	add.w	r2, r7, #13
 8001168:	f107 030e 	add.w	r3, r7, #14
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff10 	bl	8000f94 <MCP9808_Write>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <MCP9808_SetResolution+0x38>
		mcp9808.resolution = resolution;
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <MCP9808_SetResolution+0x44>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	7153      	strb	r3, [r2, #5]
	}

	return res;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000094 	.word	0x20000094

08001194 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af04      	add	r7, sp, #16
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2200      	movs	r2, #0
 80011c0:	2178      	movs	r1, #120	; 0x78
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <ssd1306_WriteCommand+0x2c>)
 80011c4:	f001 ff76 	bl	80030b4 <HAL_I2C_Mem_Write>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200004a4 	.word	0x200004a4

080011d4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af04      	add	r7, sp, #16
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	f04f 32ff 	mov.w	r2, #4294967295
 80011e6:	9202      	str	r2, [sp, #8]
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	2178      	movs	r1, #120	; 0x78
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <ssd1306_WriteData+0x30>)
 80011f6:	f001 ff5d 	bl	80030b4 <HAL_I2C_Mem_Write>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200004a4 	.word	0x200004a4

08001208 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800120c:	f7ff ffc2 	bl	8001194 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f001 f947 	bl	80024a4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f9da 	bl	80015d0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800121c:	2020      	movs	r0, #32
 800121e:	f7ff ffc1 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ffbe 	bl	80011a4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001228:	20b0      	movs	r0, #176	; 0xb0
 800122a:	f7ff ffbb 	bl	80011a4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800122e:	20c8      	movs	r0, #200	; 0xc8
 8001230:	f7ff ffb8 	bl	80011a4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ffb5 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800123a:	2010      	movs	r0, #16
 800123c:	f7ff ffb2 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001240:	2040      	movs	r0, #64	; 0x40
 8001242:	f7ff ffaf 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001246:	20ff      	movs	r0, #255	; 0xff
 8001248:	f000 f9ae 	bl	80015a8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800124c:	20a1      	movs	r0, #161	; 0xa1
 800124e:	f7ff ffa9 	bl	80011a4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001252:	20a6      	movs	r0, #166	; 0xa6
 8001254:	f7ff ffa6 	bl	80011a4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001258:	20a8      	movs	r0, #168	; 0xa8
 800125a:	f7ff ffa3 	bl	80011a4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800125e:	203f      	movs	r0, #63	; 0x3f
 8001260:	f7ff ffa0 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001264:	20a4      	movs	r0, #164	; 0xa4
 8001266:	f7ff ff9d 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800126a:	20d3      	movs	r0, #211	; 0xd3
 800126c:	f7ff ff9a 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff ff97 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001276:	20d5      	movs	r0, #213	; 0xd5
 8001278:	f7ff ff94 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800127c:	20f0      	movs	r0, #240	; 0xf0
 800127e:	f7ff ff91 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001282:	20d9      	movs	r0, #217	; 0xd9
 8001284:	f7ff ff8e 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001288:	2022      	movs	r0, #34	; 0x22
 800128a:	f7ff ff8b 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800128e:	20da      	movs	r0, #218	; 0xda
 8001290:	f7ff ff88 	bl	80011a4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001294:	2012      	movs	r0, #18
 8001296:	f7ff ff85 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800129a:	20db      	movs	r0, #219	; 0xdb
 800129c:	f7ff ff82 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012a0:	2020      	movs	r0, #32
 80012a2:	f7ff ff7f 	bl	80011a4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012a6:	208d      	movs	r0, #141	; 0x8d
 80012a8:	f7ff ff7c 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80012ac:	2014      	movs	r0, #20
 80012ae:	f7ff ff79 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012b2:	2001      	movs	r0, #1
 80012b4:	f000 f98c 	bl	80015d0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 f80f 	bl	80012dc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012be:	f000 f831 	bl	8001324 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <ssd1306_Init+0xd0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <ssd1306_Init+0xd0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012ce:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <ssd1306_Init+0xd0>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	711a      	strb	r2, [r3, #4]
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000049c 	.word	0x2000049c

080012dc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	e00d      	b.n	8001308 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <ssd1306_Fill+0x1a>
 80012f2:	2100      	movs	r1, #0
 80012f4:	e000      	b.n	80012f8 <ssd1306_Fill+0x1c>
 80012f6:	21ff      	movs	r1, #255	; 0xff
 80012f8:	4a09      	ldr	r2, [pc, #36]	; (8001320 <ssd1306_Fill+0x44>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	460a      	mov	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3301      	adds	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130e:	d3ed      	bcc.n	80012ec <ssd1306_Fill+0x10>
    }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	2000009c 	.word	0x2000009c

08001324 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e016      	b.n	800135e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	3b50      	subs	r3, #80	; 0x50
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff34 	bl	80011a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ff31 	bl	80011a4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001342:	2010      	movs	r0, #16
 8001344:	f7ff ff2e 	bl	80011a4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	01db      	lsls	r3, r3, #7
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <ssd1306_UpdateScreen+0x4c>)
 800134e:	4413      	add	r3, r2
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff3e 	bl	80011d4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	3301      	adds	r3, #1
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b07      	cmp	r3, #7
 8001362:	d9e5      	bls.n	8001330 <ssd1306_UpdateScreen+0xc>
    }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000009c 	.word	0x2000009c

08001374 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	460b      	mov	r3, r1
 8001380:	71bb      	strb	r3, [r7, #6]
 8001382:	4613      	mov	r3, r2
 8001384:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db3d      	blt.n	800140a <ssd1306_DrawPixel+0x96>
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	2b3f      	cmp	r3, #63	; 0x3f
 8001392:	d83a      	bhi.n	800140a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d11a      	bne.n	80013d0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	08db      	lsrs	r3, r3, #3
 80013a0:	b2d8      	uxtb	r0, r3
 80013a2:	4603      	mov	r3, r0
 80013a4:	01db      	lsls	r3, r3, #7
 80013a6:	4413      	add	r3, r2
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <ssd1306_DrawPixel+0xa4>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	b25a      	sxtb	r2, r3
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	2101      	movs	r1, #1
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b259      	sxtb	r1, r3
 80013c0:	79fa      	ldrb	r2, [r7, #7]
 80013c2:	4603      	mov	r3, r0
 80013c4:	01db      	lsls	r3, r3, #7
 80013c6:	4413      	add	r3, r2
 80013c8:	b2c9      	uxtb	r1, r1
 80013ca:	4a13      	ldr	r2, [pc, #76]	; (8001418 <ssd1306_DrawPixel+0xa4>)
 80013cc:	54d1      	strb	r1, [r2, r3]
 80013ce:	e01d      	b.n	800140c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013d0:	79fa      	ldrb	r2, [r7, #7]
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	08db      	lsrs	r3, r3, #3
 80013d6:	b2d8      	uxtb	r0, r3
 80013d8:	4603      	mov	r3, r0
 80013da:	01db      	lsls	r3, r3, #7
 80013dc:	4413      	add	r3, r2
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <ssd1306_DrawPixel+0xa4>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	b25a      	sxtb	r2, r3
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	4013      	ands	r3, r2
 80013f8:	b259      	sxtb	r1, r3
 80013fa:	79fa      	ldrb	r2, [r7, #7]
 80013fc:	4603      	mov	r3, r0
 80013fe:	01db      	lsls	r3, r3, #7
 8001400:	4413      	add	r3, r2
 8001402:	b2c9      	uxtb	r1, r1
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <ssd1306_DrawPixel+0xa4>)
 8001406:	54d1      	strb	r1, [r2, r3]
 8001408:	e000      	b.n	800140c <ssd1306_DrawPixel+0x98>
        return;
 800140a:	bf00      	nop
    }
}
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000009c 	.word	0x2000009c

0800141c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	4604      	mov	r4, r0
 8001424:	1d38      	adds	r0, r7, #4
 8001426:	e880 0006 	stmia.w	r0, {r1, r2}
 800142a:	461a      	mov	r2, r3
 800142c:	4623      	mov	r3, r4
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	4613      	mov	r3, r2
 8001432:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b1f      	cmp	r3, #31
 8001438:	d902      	bls.n	8001440 <ssd1306_WriteChar+0x24>
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b7e      	cmp	r3, #126	; 0x7e
 800143e:	d901      	bls.n	8001444 <ssd1306_WriteChar+0x28>
        return 0;
 8001440:	2300      	movs	r3, #0
 8001442:	e06d      	b.n	8001520 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001444:	4b38      	ldr	r3, [pc, #224]	; (8001528 <ssd1306_WriteChar+0x10c>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	793b      	ldrb	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	2b80      	cmp	r3, #128	; 0x80
 8001450:	dc06      	bgt.n	8001460 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <ssd1306_WriteChar+0x10c>)
 8001454:	885b      	ldrh	r3, [r3, #2]
 8001456:	461a      	mov	r2, r3
 8001458:	797b      	ldrb	r3, [r7, #5]
 800145a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800145c:	2b40      	cmp	r3, #64	; 0x40
 800145e:	dd01      	ble.n	8001464 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001460:	2300      	movs	r3, #0
 8001462:	e05d      	b.n	8001520 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	e04c      	b.n	8001504 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	3b20      	subs	r3, #32
 8001470:	7979      	ldrb	r1, [r7, #5]
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	4619      	mov	r1, r3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	440b      	add	r3, r1
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	e034      	b.n	80014f4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d012      	beq.n	80014c0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <ssd1306_WriteChar+0x10c>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	b2d8      	uxtb	r0, r3
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <ssd1306_WriteChar+0x10c>)
 80014aa:	885b      	ldrh	r3, [r3, #2]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	7bba      	ldrb	r2, [r7, #14]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff ff5b 	bl	8001374 <ssd1306_DrawPixel>
 80014be:	e016      	b.n	80014ee <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <ssd1306_WriteChar+0x10c>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b2d8      	uxtb	r0, r3
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <ssd1306_WriteChar+0x10c>)
 80014d0:	885b      	ldrh	r3, [r3, #2]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4413      	add	r3, r2
 80014da:	b2d9      	uxtb	r1, r3
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	f7ff ff43 	bl	8001374 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	793b      	ldrb	r3, [r7, #4]
 80014f6:	461a      	mov	r2, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d3c5      	bcc.n	800148a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	797b      	ldrb	r3, [r7, #5]
 8001506:	461a      	mov	r2, r3
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4293      	cmp	r3, r2
 800150c:	d3ad      	bcc.n	800146a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <ssd1306_WriteChar+0x10c>)
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	793b      	ldrb	r3, [r7, #4]
 8001514:	b29b      	uxth	r3, r3
 8001516:	4413      	add	r3, r2
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b03      	ldr	r3, [pc, #12]	; (8001528 <ssd1306_WriteChar+0x10c>)
 800151c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3724      	adds	r7, #36	; 0x24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}
 8001528:	2000049c 	.word	0x2000049c

0800152c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	1d38      	adds	r0, r7, #4
 8001536:	e880 0006 	stmia.w	r0, {r1, r2}
 800153a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800153c:	e012      	b.n	8001564 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	7818      	ldrb	r0, [r3, #0]
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	1d3a      	adds	r2, r7, #4
 8001546:	ca06      	ldmia	r2, {r1, r2}
 8001548:	f7ff ff68 	bl	800141c <ssd1306_WriteChar>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d002      	beq.n	800155e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	e008      	b.n	8001570 <ssd1306_WriteString+0x44>
        }
        str++;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3301      	adds	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e8      	bne.n	800153e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	781b      	ldrb	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	460a      	mov	r2, r1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4613      	mov	r3, r2
 8001586:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <ssd1306_SetCursor+0x2c>)
 800158e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <ssd1306_SetCursor+0x2c>)
 8001596:	805a      	strh	r2, [r3, #2]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	2000049c 	.word	0x2000049c

080015a8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80015b2:	2381      	movs	r3, #129	; 0x81
 80015b4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fdf3 	bl	80011a4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fdef 	bl	80011a4 <ssd1306_WriteCommand>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80015e0:	23af      	movs	r3, #175	; 0xaf
 80015e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <ssd1306_SetDisplayOn+0x38>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	715a      	strb	r2, [r3, #5]
 80015ea:	e004      	b.n	80015f6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80015ec:	23ae      	movs	r3, #174	; 0xae
 80015ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <ssd1306_SetDisplayOn+0x38>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fdd3 	bl	80011a4 <ssd1306_WriteCommand>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000049c 	.word	0x2000049c

0800160c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b7d      	ldr	r3, [pc, #500]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a7c      	ldr	r2, [pc, #496]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b7a      	ldr	r3, [pc, #488]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800163a:	4b77      	ldr	r3, [pc, #476]	; (8001818 <MX_GPIO_Init+0x20c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a76      	ldr	r2, [pc, #472]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001640:	f043 0320 	orr.w	r3, r3, #32
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b74      	ldr	r3, [pc, #464]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0320 	and.w	r3, r3, #32
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001652:	4b71      	ldr	r3, [pc, #452]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a70      	ldr	r2, [pc, #448]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b6e      	ldr	r3, [pc, #440]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b6b      	ldr	r3, [pc, #428]	; (8001818 <MX_GPIO_Init+0x20c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a6a      	ldr	r2, [pc, #424]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b68      	ldr	r3, [pc, #416]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b65      	ldr	r3, [pc, #404]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a64      	ldr	r2, [pc, #400]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b62      	ldr	r3, [pc, #392]	; (8001818 <MX_GPIO_Init+0x20c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <MX_GPIO_Init+0x20c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a5e      	ldr	r2, [pc, #376]	; (8001818 <MX_GPIO_Init+0x20c>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <MX_GPIO_Init+0x20c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016b2:	4b59      	ldr	r3, [pc, #356]	; (8001818 <MX_GPIO_Init+0x20c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a58      	ldr	r2, [pc, #352]	; (8001818 <MX_GPIO_Init+0x20c>)
 80016b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <MX_GPIO_Init+0x20c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f244 0181 	movw	r1, #16513	; 0x4081
 80016d0:	4852      	ldr	r0, [pc, #328]	; (800181c <MX_GPIO_Init+0x210>)
 80016d2:	f001 fa5b 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2140      	movs	r1, #64	; 0x40
 80016da:	4851      	ldr	r0, [pc, #324]	; (8001820 <MX_GPIO_Init+0x214>)
 80016dc:	f001 fa56 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	484b      	ldr	r0, [pc, #300]	; (8001824 <MX_GPIO_Init+0x218>)
 80016f8:	f001 f89c 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016fc:	2332      	movs	r3, #50	; 0x32
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800170c:	230b      	movs	r3, #11
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	4843      	ldr	r0, [pc, #268]	; (8001824 <MX_GPIO_Init+0x218>)
 8001718:	f001 f88c 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800171c:	2386      	movs	r3, #134	; 0x86
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800172c:	230b      	movs	r3, #11
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	483c      	ldr	r0, [pc, #240]	; (8001828 <MX_GPIO_Init+0x21c>)
 8001738:	f001 f87c 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800173c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4831      	ldr	r0, [pc, #196]	; (800181c <MX_GPIO_Init+0x210>)
 8001756:	f001 f86d 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800175a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800176c:	230b      	movs	r3, #11
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	4829      	ldr	r0, [pc, #164]	; (800181c <MX_GPIO_Init+0x210>)
 8001778:	f001 f85c 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800177c:	2340      	movs	r3, #64	; 0x40
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	4823      	ldr	r0, [pc, #140]	; (8001820 <MX_GPIO_Init+0x214>)
 8001794:	f001 f84e 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	481d      	ldr	r0, [pc, #116]	; (8001820 <MX_GPIO_Init+0x214>)
 80017ac:	f001 f842 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017b0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017c2:	230a      	movs	r3, #10
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	4816      	ldr	r0, [pc, #88]	; (8001828 <MX_GPIO_Init+0x21c>)
 80017ce:	f001 f831 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	4810      	ldr	r0, [pc, #64]	; (8001828 <MX_GPIO_Init+0x21c>)
 80017e8:	f001 f824 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80017ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017fe:	230b      	movs	r3, #11
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_GPIO_Init+0x214>)
 800180a:	f001 f813 	bl	8002834 <HAL_GPIO_Init>

}
 800180e:	bf00      	nop
 8001810:	3730      	adds	r7, #48	; 0x30
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40020400 	.word	0x40020400
 8001820:	40021800 	.word	0x40021800
 8001824:	40020800 	.word	0x40020800
 8001828:	40020000 	.word	0x40020000

0800182c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_I2C2_Init+0x78>)
 8001834:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00501FE4;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <MX_I2C2_Init+0x7c>)
 800183a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_I2C2_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001844:	2201      	movs	r2, #1
 8001846:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_I2C2_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_I2C2_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001868:	f001 f9aa 	bl	8002bc0 <HAL_I2C_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001872:	f000 fa5b 	bl	8001d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <MX_I2C2_Init+0x74>)
 800187a:	f001 ffef 	bl	800385c <HAL_I2CEx_ConfigAnalogFilter>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001884:	f000 fa52 	bl	8001d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001888:	2100      	movs	r1, #0
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_I2C2_Init+0x74>)
 800188c:	f002 f831 	bl	80038f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001896:	f000 fa49 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200004a4 	.word	0x200004a4
 80018a4:	40005800 	.word	0x40005800
 80018a8:	00501fe4 	.word	0x00501fe4

080018ac <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_I2C4_Init+0x74>)
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <MX_I2C4_Init+0x78>)
 80018b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <MX_I2C4_Init+0x74>)
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <MX_I2C4_Init+0x7c>)
 80018ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <MX_I2C4_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <MX_I2C4_Init+0x74>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <MX_I2C4_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_I2C4_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_I2C4_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_I2C4_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_I2C4_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80018e6:	480e      	ldr	r0, [pc, #56]	; (8001920 <MX_I2C4_Init+0x74>)
 80018e8:	f001 f96a 	bl	8002bc0 <HAL_I2C_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80018f2:	f000 fa1b 	bl	8001d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018f6:	2100      	movs	r1, #0
 80018f8:	4809      	ldr	r0, [pc, #36]	; (8001920 <MX_I2C4_Init+0x74>)
 80018fa:	f001 ffaf 	bl	800385c <HAL_I2CEx_ConfigAnalogFilter>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001904:	f000 fa12 	bl	8001d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001908:	2100      	movs	r1, #0
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_I2C4_Init+0x74>)
 800190c:	f001 fff1 	bl	80038f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001916:	f000 fa09 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200004f8 	.word	0x200004f8
 8001924:	40006000 	.word	0x40006000
 8001928:	20404768 	.word	0x20404768

0800192c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b0ac      	sub	sp, #176	; 0xb0
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001944:	f107 0318 	add.w	r3, r7, #24
 8001948:	2284      	movs	r2, #132	; 0x84
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f005 f937 	bl	8006bc0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a44      	ldr	r2, [pc, #272]	; (8001a68 <HAL_I2C_MspInit+0x13c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d13d      	bne.n	80019d8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800195c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001960:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001968:	f107 0318 	add.w	r3, r7, #24
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fd37 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001978:	f000 f9d8 	bl	8001d2c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800197c:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 8001982:	f043 0320 	orr.w	r3, r3, #32
 8001986:	6313      	str	r3, [r2, #48]	; 0x30
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001994:	2303      	movs	r3, #3
 8001996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199a:	2312      	movs	r3, #18
 800199c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019ac:	2304      	movs	r3, #4
 80019ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019b6:	4619      	mov	r1, r3
 80019b8:	482d      	ldr	r0, [pc, #180]	; (8001a70 <HAL_I2C_MspInit+0x144>)
 80019ba:	f000 ff3b 	bl	8002834 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 80019c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80019d6:	e042      	b.n	8001a5e <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a25      	ldr	r2, [pc, #148]	; (8001a74 <HAL_I2C_MspInit+0x148>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d13d      	bne.n	8001a5e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80019e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ee:	f107 0318 	add.w	r3, r7, #24
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 fcf4 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80019fe:	f000 f995 	bl	8001d2c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 8001a08:	f043 0320 	orr.w	r3, r3, #32
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a22:	2312      	movs	r3, #18
 8001a24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001a34:	2304      	movs	r3, #4
 8001a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480b      	ldr	r0, [pc, #44]	; (8001a70 <HAL_I2C_MspInit+0x144>)
 8001a42:	f000 fef7 	bl	8002834 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 8001a4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_I2C_MspInit+0x140>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
}
 8001a5e:	bf00      	nop
 8001a60:	37b0      	adds	r7, #176	; 0xb0
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40005800 	.word	0x40005800
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40006000 	.word	0x40006000

08001a78 <HAL_UART_RxCpltCallback>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/*
 * tu beda przerwania
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, received_data, 3); // Tu włącza sie to gowno znowu :)
 8001a80:	2203      	movs	r2, #3
 8001a82:	4904      	ldr	r1, [pc, #16]	; (8001a94 <HAL_UART_RxCpltCallback+0x1c>)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <HAL_UART_RxCpltCallback+0x20>)
 8001a86:	f003 fe34 	bl	80056f2 <HAL_UART_Receive_IT>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000054c 	.word	0x2000054c
 8001a98:	2000063c 	.word	0x2000063c

08001a9c <wyswietlacz>:

void wyswietlacz(){
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b08e      	sub	sp, #56	; 0x38
 8001aa0:	af00      	add	r7, sp, #0
	uint8_t y = 0; // ktora linia wyswietlacza
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	ssd1306_Fill(Black);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff fc17 	bl	80012dc <ssd1306_Fill>
	ssd1306_SetCursor(2, y);
 8001aae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	f7ff fd5f 	bl	8001578 <ssd1306_SetCursor>
	char buf[20] = "COM test: ";
 8001aba:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <wyswietlacz+0xc8>)
 8001abc:	f107 0320 	add.w	r3, r7, #32
 8001ac0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ac2:	c303      	stmia	r3!, {r0, r1}
 8001ac4:	801a      	strh	r2, [r3, #0]
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	0c12      	lsrs	r2, r2, #16
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	721a      	strb	r2, [r3, #8]
	ssd1306_WriteString(strcat(buf, received_data), Font_7x10, White);
 8001ad8:	f107 0320 	add.w	r3, r7, #32
 8001adc:	4922      	ldr	r1, [pc, #136]	; (8001b68 <wyswietlacz+0xcc>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f005 f876 	bl	8006bd0 <strcat>
 8001ae4:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <wyswietlacz+0xd0>)
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	ca06      	ldmia	r2, {r1, r2}
 8001aea:	f7ff fd1f 	bl	800152c <ssd1306_WriteString>
	y += 10;
 8001aee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001af2:	330a      	adds	r3, #10
 8001af4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	char temp_buf[6];
	gcvt(current_temperature, 6, temp_buf);
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <wyswietlacz+0xd4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fd43 	bl	8000588 <__aeabi_f2d>
 8001b02:	4604      	mov	r4, r0
 8001b04:	460d      	mov	r5, r1
 8001b06:	f107 0318 	add.w	r3, r7, #24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	2006      	movs	r0, #6
 8001b0e:	ec45 4b10 	vmov	d0, r4, r5
 8001b12:	f004 fff9 	bl	8006b08 <gcvt>
	ssd1306_SetCursor(2, y);
 8001b16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	f7ff fd2b 	bl	8001578 <ssd1306_SetCursor>
	char buf0[20] = "Current temp:";
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <wyswietlacz+0xd8>)
 8001b24:	1d3c      	adds	r4, r7, #4
 8001b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b28:	c407      	stmia	r4!, {r0, r1, r2}
 8001b2a:	8023      	strh	r3, [r4, #0]
 8001b2c:	f107 0312 	add.w	r3, r7, #18
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	809a      	strh	r2, [r3, #4]
	ssd1306_WriteString(strcat(buf0, temp_buf), Font_7x10, White);
 8001b36:	f107 0218 	add.w	r2, r7, #24
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f005 f846 	bl	8006bd0 <strcat>
 8001b44:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <wyswietlacz+0xd0>)
 8001b46:	2301      	movs	r3, #1
 8001b48:	ca06      	ldmia	r2, {r1, r2}
 8001b4a:	f7ff fcef 	bl	800152c <ssd1306_WriteString>
	y += 10;
 8001b4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b52:	330a      	adds	r3, #10
 8001b54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	ssd1306_UpdateScreen();
 8001b58:	f7ff fbe4 	bl	8001324 <ssd1306_UpdateScreen>
}
 8001b5c:	bf00      	nop
 8001b5e:	3738      	adds	r7, #56	; 0x38
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bdb0      	pop	{r4, r5, r7, pc}
 8001b64:	080092e8 	.word	0x080092e8
 8001b68:	2000054c 	.word	0x2000054c
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000550 	.word	0x20000550
 8001b74:	080092fc 	.word	0x080092fc

08001b78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ // If the interrupt is from timer 2
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b88:	d10c      	bne.n	8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		char jd[2] = "JD";
 8001b8a:	f244 434a 	movw	r3, #17482	; 0x444a
 8001b8e:	81bb      	strh	r3, [r7, #12]
		//HAL_UART_Transmit(&huart3, jd, strlen(jd), 100);
		HAL_UART_Transmit(&huart3, received_data, strlen(received_data), 100);
 8001b90:	480e      	ldr	r0, [pc, #56]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b92:	f7fe fb3d 	bl	8000210 <strlen>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	2364      	movs	r3, #100	; 0x64
 8001b9c:	490b      	ldr	r1, [pc, #44]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b9e:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001ba0:	f003 fd24 	bl	80055ec <HAL_UART_Transmit>
	}
	if(htim->Instance == TIM3){
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0x3a>
		//ssd1306_TestAll();
		//MCP9808_MeasureTemperature(&current_temperature);
		wyswietlacz();
 8001bae:	f7ff ff75 	bl	8001a9c <wyswietlacz>
	}
	if(htim->Instance == TIM4){
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d102      	bne.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x4a>
		 MCP9808_MeasureTemperature(&current_temperature);
 8001bbc:	4807      	ldr	r0, [pc, #28]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001bbe:	f7ff fa45 	bl	800104c <MCP9808_MeasureTemperature>
	}

}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000054c 	.word	0x2000054c
 8001bd0:	2000063c 	.word	0x2000063c
 8001bd4:	40000400 	.word	0x40000400
 8001bd8:	40000800 	.word	0x40000800
 8001bdc:	20000550 	.word	0x20000550

08001be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be4:	f000 fc01 	bl	80023ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be8:	f000 f832 	bl	8001c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bec:	f7ff fd0e 	bl	800160c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001bf0:	f000 fb3a 	bl	8002268 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8001bf4:	f7ff fe1a 	bl	800182c <MX_I2C2_Init>
  MX_TIM2_Init();
 8001bf8:	f000 f9ec 	bl	8001fd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bfc:	f000 fa38 	bl	8002070 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c00:	f000 fa86 	bl	8002110 <MX_TIM4_Init>
  MX_I2C4_Init();
 8001c04:	f7ff fe52 	bl	80018ac <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_TestAll();
  ssd1306_Init(); // Inicjalizacja wyświetlacza
 8001c08:	f7ff fafe 	bl	8001208 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c0c:	480a      	ldr	r0, [pc, #40]	; (8001c38 <main+0x58>)
 8001c0e:	f003 f82f 	bl	8004c70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001c12:	480a      	ldr	r0, [pc, #40]	; (8001c3c <main+0x5c>)
 8001c14:	f003 f82c 	bl	8004c70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001c18:	4809      	ldr	r0, [pc, #36]	; (8001c40 <main+0x60>)
 8001c1a:	f003 f829 	bl	8004c70 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, received_data, 3);
 8001c1e:	2203      	movs	r2, #3
 8001c20:	4908      	ldr	r1, [pc, #32]	; (8001c44 <main+0x64>)
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <main+0x68>)
 8001c24:	f003 fd65 	bl	80056f2 <HAL_UART_Receive_IT>
  MCP9808_Init(&hi2c4, 0x18); // inicjalizacja sensora temperatury
 8001c28:	2118      	movs	r1, #24
 8001c2a:	4808      	ldr	r0, [pc, #32]	; (8001c4c <main+0x6c>)
 8001c2c:	f7ff f998 	bl	8000f60 <MCP9808_Init>
  MCP9808_SetResolution(MCP9808_Medium_Res);  // tutaj nastawia się srednia rozdzielczość
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff fa8b 	bl	800114c <MCP9808_SetResolution>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <main+0x56>
 8001c38:	20000558 	.word	0x20000558
 8001c3c:	200005a4 	.word	0x200005a4
 8001c40:	200005f0 	.word	0x200005f0
 8001c44:	2000054c 	.word	0x2000054c
 8001c48:	2000063c 	.word	0x2000063c
 8001c4c:	200004f8 	.word	0x200004f8

08001c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b094      	sub	sp, #80	; 0x50
 8001c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c56:	f107 0320 	add.w	r3, r7, #32
 8001c5a:	2230      	movs	r2, #48	; 0x30
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 ffae 	bl	8006bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c74:	f001 fe8a 	bl	800398c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <SystemClock_Config+0xd4>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <SystemClock_Config+0xd4>)
 8001c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c82:	6413      	str	r3, [r2, #64]	; 0x40
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <SystemClock_Config+0xd4>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <SystemClock_Config+0xd8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <SystemClock_Config+0xd8>)
 8001c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <SystemClock_Config+0xd8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001cc0:	23d8      	movs	r3, #216	; 0xd8
 8001cc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001cc8:	2309      	movs	r3, #9
 8001cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ccc:	f107 0320 	add.w	r3, r7, #32
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 febb 	bl	8003a4c <HAL_RCC_OscConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001cdc:	f000 f826 	bl	8001d2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ce0:	f001 fe64 	bl	80039ac <HAL_PWREx_EnableOverDrive>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001cea:	f000 f81f 	bl	8001d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cee:	230f      	movs	r3, #15
 8001cf0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001d00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	2107      	movs	r1, #7
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 f941 	bl	8003f94 <HAL_RCC_ClockConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001d18:	f000 f808 	bl	8001d2c <Error_Handler>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3750      	adds	r7, #80	; 0x50
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40007000 	.word	0x40007000

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <Error_Handler+0x8>
	...

08001d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_MspInit+0x44>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <HAL_MspInit+0x44>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_MspInit+0x44>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_MspInit+0x44>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_MspInit+0x44>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_MspInit+0x44>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <NMI_Handler+0x4>

08001d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <HardFault_Handler+0x4>

08001d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <MemManage_Handler+0x4>

08001d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <BusFault_Handler+0x4>

08001d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <UsageFault_Handler+0x4>

08001d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dcc:	f000 fb4a 	bl	8002464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <TIM2_IRQHandler+0x10>)
 8001dda:	f002 ffc1 	bl	8004d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000558 	.word	0x20000558

08001de8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <TIM3_IRQHandler+0x10>)
 8001dee:	f002 ffb7 	bl	8004d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200005a4 	.word	0x200005a4

08001dfc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <TIM4_IRQHandler+0x10>)
 8001e02:	f002 ffad 	bl	8004d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200005f0 	.word	0x200005f0

08001e10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <USART3_IRQHandler+0x10>)
 8001e16:	f003 fcb1 	bl	800577c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000063c 	.word	0x2000063c

08001e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_kill>:

int _kill(int pid, int sig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e3e:	f004 fe87 	bl	8006b50 <__errno>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2216      	movs	r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
  return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_exit>:

void _exit (int status)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffe7 	bl	8001e34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e66:	e7fe      	b.n	8001e66 <_exit+0x12>

08001e68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	e00a      	b.n	8001e90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e7a:	f3af 8000 	nop.w
 8001e7e:	4601      	mov	r1, r0
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	60ba      	str	r2, [r7, #8]
 8001e86:	b2ca      	uxtb	r2, r1
 8001e88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbf0      	blt.n	8001e7a <_read+0x12>
  }

  return len;
 8001e98:	687b      	ldr	r3, [r7, #4]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e009      	b.n	8001ec8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	60ba      	str	r2, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbf1      	blt.n	8001eb4 <_write+0x12>
  }
  return len;
 8001ed0:	687b      	ldr	r3, [r7, #4]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_close>:

int _close(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f02:	605a      	str	r2, [r3, #4]
  return 0;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_isatty>:

int _isatty(int file)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <_sbrk+0x5c>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <_sbrk+0x60>)
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <_sbrk+0x64>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <_sbrk+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d207      	bcs.n	8001f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f74:	f004 fdec 	bl	8006b50 <__errno>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e009      	b.n	8001f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <_sbrk+0x64>)
 8001f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20050000 	.word	0x20050000
 8001fa4:	00000400 	.word	0x00000400
 8001fa8:	20000554 	.word	0x20000554
 8001fac:	200006d8 	.word	0x200006d8

08001fb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <SystemInit+0x20>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <SystemInit+0x20>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	f107 0310 	add.w	r3, r7, #16
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <MX_TIM2_Init+0x98>)
 8001ff4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ff8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10799;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <MX_TIM2_Init+0x98>)
 8001ffc:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002000:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <MX_TIM2_Init+0x98>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <MX_TIM2_Init+0x98>)
 800200a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800200e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <MX_TIM2_Init+0x98>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <MX_TIM2_Init+0x98>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800201c:	4813      	ldr	r0, [pc, #76]	; (800206c <MX_TIM2_Init+0x98>)
 800201e:	f002 fdcf 	bl	8004bc0 <HAL_TIM_Base_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002028:	f7ff fe80 	bl	8001d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002030:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <MX_TIM2_Init+0x98>)
 800203a:	f002 ffb1 	bl	8004fa0 <HAL_TIM_ConfigClockSource>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002044:	f7ff fe72 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_TIM2_Init+0x98>)
 8002056:	f003 f9cf 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002060:	f7ff fe64 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000558 	.word	0x20000558

08002070 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <MX_TIM3_Init+0x98>)
 8002090:	4a1e      	ldr	r2, [pc, #120]	; (800210c <MX_TIM3_Init+0x9c>)
 8002092:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <MX_TIM3_Init+0x98>)
 8002096:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800209a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_TIM3_Init+0x98>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <MX_TIM3_Init+0x98>)
 80020a4:	f241 3287 	movw	r2, #4999	; 0x1387
 80020a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_TIM3_Init+0x98>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <MX_TIM3_Init+0x98>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020b6:	4814      	ldr	r0, [pc, #80]	; (8002108 <MX_TIM3_Init+0x98>)
 80020b8:	f002 fd82 	bl	8004bc0 <HAL_TIM_Base_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80020c2:	f7ff fe33 	bl	8001d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	480d      	ldr	r0, [pc, #52]	; (8002108 <MX_TIM3_Init+0x98>)
 80020d4:	f002 ff64 	bl	8004fa0 <HAL_TIM_ConfigClockSource>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80020de:	f7ff fe25 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4806      	ldr	r0, [pc, #24]	; (8002108 <MX_TIM3_Init+0x98>)
 80020f0:	f003 f982 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80020fa:	f7ff fe17 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200005a4 	.word	0x200005a4
 800210c:	40000400 	.word	0x40000400

08002110 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <MX_TIM4_Init+0x98>)
 8002130:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <MX_TIM4_Init+0x9c>)
 8002132:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10799;
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <MX_TIM4_Init+0x98>)
 8002136:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800213a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_TIM4_Init+0x98>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <MX_TIM4_Init+0x98>)
 8002144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002148:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_TIM4_Init+0x98>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <MX_TIM4_Init+0x98>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002156:	4814      	ldr	r0, [pc, #80]	; (80021a8 <MX_TIM4_Init+0x98>)
 8002158:	f002 fd32 	bl	8004bc0 <HAL_TIM_Base_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002162:	f7ff fde3 	bl	8001d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	4619      	mov	r1, r3
 8002172:	480d      	ldr	r0, [pc, #52]	; (80021a8 <MX_TIM4_Init+0x98>)
 8002174:	f002 ff14 	bl	8004fa0 <HAL_TIM_ConfigClockSource>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800217e:	f7ff fdd5 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4806      	ldr	r0, [pc, #24]	; (80021a8 <MX_TIM4_Init+0x98>)
 8002190:	f003 f932 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800219a:	f7ff fdc7 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200005f0 	.word	0x200005f0
 80021ac:	40000800 	.word	0x40000800

080021b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c0:	d114      	bne.n	80021ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021c2:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_TIM_Base_MspInit+0xac>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_TIM_Base_MspInit+0xac>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_TIM_Base_MspInit+0xac>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	201c      	movs	r0, #28
 80021e0:	f000 fa5f 	bl	80026a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021e4:	201c      	movs	r0, #28
 80021e6:	f000 fa78 	bl	80026da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021ea:	e032      	b.n	8002252 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_TIM_Base_MspInit+0xb0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d114      	bne.n	8002220 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_TIM_Base_MspInit+0xac>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_TIM_Base_MspInit+0xac>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_TIM_Base_MspInit+0xac>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	201d      	movs	r0, #29
 8002214:	f000 fa45 	bl	80026a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002218:	201d      	movs	r0, #29
 800221a:	f000 fa5e 	bl	80026da <HAL_NVIC_EnableIRQ>
}
 800221e:	e018      	b.n	8002252 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0f      	ldr	r2, [pc, #60]	; (8002264 <HAL_TIM_Base_MspInit+0xb4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d113      	bne.n	8002252 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_TIM_Base_MspInit+0xac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <HAL_TIM_Base_MspInit+0xac>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_TIM_Base_MspInit+0xac>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	201e      	movs	r0, #30
 8002248:	f000 fa2b 	bl	80026a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800224c:	201e      	movs	r0, #30
 800224e:	f000 fa44 	bl	80026da <HAL_NVIC_EnableIRQ>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800
 8002260:	40000400 	.word	0x40000400
 8002264:	40000800 	.word	0x40000800

08002268 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <MX_USART3_UART_Init+0x58>)
 800226e:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <MX_USART3_UART_Init+0x5c>)
 8002270:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <MX_USART3_UART_Init+0x58>)
 8002274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002278:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <MX_USART3_UART_Init+0x58>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <MX_USART3_UART_Init+0x58>)
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <MX_USART3_UART_Init+0x58>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <MX_USART3_UART_Init+0x58>)
 800228e:	220c      	movs	r2, #12
 8002290:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <MX_USART3_UART_Init+0x58>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <MX_USART3_UART_Init+0x58>)
 800229a:	2200      	movs	r2, #0
 800229c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <MX_USART3_UART_Init+0x58>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <MX_USART3_UART_Init+0x58>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <MX_USART3_UART_Init+0x58>)
 80022ac:	f003 f950 	bl	8005550 <HAL_UART_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80022b6:	f7ff fd39 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000063c 	.word	0x2000063c
 80022c4:	40004800 	.word	0x40004800

080022c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0aa      	sub	sp, #168	; 0xa8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	2284      	movs	r2, #132	; 0x84
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 fc69 	bl	8006bc0 <memset>
  if(uartHandle->Instance==USART3)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_UART_MspInit+0xc4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d144      	bne.n	8002382 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022fe:	2300      	movs	r3, #0
 8002300:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4618      	mov	r0, r3
 8002308:	f002 f86a 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002312:	f7ff fd0b 	bl	8001d2c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_UART_MspInit+0xc8>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_UART_MspInit+0xc8>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_UART_MspInit+0xc8>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_UART_MspInit+0xc8>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_UART_MspInit+0xc8>)
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_UART_MspInit+0xc8>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800234a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002354:	2301      	movs	r3, #1
 8002356:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235a:	2303      	movs	r3, #3
 800235c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002360:	2307      	movs	r3, #7
 8002362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002366:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800236a:	4619      	mov	r1, r3
 800236c:	4809      	ldr	r0, [pc, #36]	; (8002394 <HAL_UART_MspInit+0xcc>)
 800236e:	f000 fa61 	bl	8002834 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	2027      	movs	r0, #39	; 0x27
 8002378:	f000 f993 	bl	80026a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800237c:	2027      	movs	r0, #39	; 0x27
 800237e:	f000 f9ac 	bl	80026da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002382:	bf00      	nop
 8002384:	37a8      	adds	r7, #168	; 0xa8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40004800 	.word	0x40004800
 8002390:	40023800 	.word	0x40023800
 8002394:	40020c00 	.word	0x40020c00

08002398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800239c:	480d      	ldr	r0, [pc, #52]	; (80023d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800239e:	490e      	ldr	r1, [pc, #56]	; (80023d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023a0:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a4:	e002      	b.n	80023ac <LoopCopyDataInit>

080023a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023aa:	3304      	adds	r3, #4

080023ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b0:	d3f9      	bcc.n	80023a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023b4:	4c0b      	ldr	r4, [pc, #44]	; (80023e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b8:	e001      	b.n	80023be <LoopFillZerobss>

080023ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023bc:	3204      	adds	r2, #4

080023be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c0:	d3fb      	bcc.n	80023ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023c2:	f7ff fdf5 	bl	8001fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c6:	f004 fbc9 	bl	8006b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ca:	f7ff fc09 	bl	8001be0 <main>
  bx  lr    
 80023ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80023dc:	08009d68 	.word	0x08009d68
  ldr r2, =_sbss
 80023e0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80023e4:	200006d8 	.word	0x200006d8

080023e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC_IRQHandler>

080023ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ee:	2003      	movs	r0, #3
 80023f0:	f000 f94c 	bl	800268c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f000 f805 	bl	8002404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023fa:	f7ff fc9d 	bl	8001d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_InitTick+0x54>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_InitTick+0x58>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241a:	fbb3 f3f1 	udiv	r3, r3, r1
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f967 	bl	80026f6 <HAL_SYSTICK_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00e      	b.n	8002450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0f      	cmp	r3, #15
 8002436:	d80a      	bhi.n	800244e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002438:	2200      	movs	r2, #0
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f000 f92f 	bl	80026a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002444:	4a06      	ldr	r2, [pc, #24]	; (8002460 <HAL_InitTick+0x5c>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000008 	.word	0x20000008
 800245c:	20000010 	.word	0x20000010
 8002460:	2000000c 	.word	0x2000000c

08002464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x20>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x24>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_IncTick+0x24>)
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000010 	.word	0x20000010
 8002488:	200006c4 	.word	0x200006c4

0800248c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return uwTick;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_GetTick+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	200006c4 	.word	0x200006c4

080024a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff ffee 	bl	800248c <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d005      	beq.n	80024ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_Delay+0x44>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ca:	bf00      	nop
 80024cc:	f7ff ffde 	bl	800248c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d8f7      	bhi.n	80024cc <HAL_Delay+0x28>
  {
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000010 	.word	0x20000010

080024ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <__NVIC_SetPriorityGrouping+0x40>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	4313      	orrs	r3, r2
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <__NVIC_SetPriorityGrouping+0x40>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00
 8002530:	05fa0000 	.word	0x05fa0000

08002534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <__NVIC_GetPriorityGrouping+0x18>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	f003 0307 	and.w	r3, r3, #7
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	2b00      	cmp	r3, #0
 8002560:	db0b      	blt.n	800257a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4907      	ldr	r1, [pc, #28]	; (8002588 <__NVIC_EnableIRQ+0x38>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2001      	movs	r0, #1
 8002572:	fa00 f202 	lsl.w	r2, r0, r2
 8002576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000e100 	.word	0xe000e100

0800258c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db0a      	blt.n	80025b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	490c      	ldr	r1, [pc, #48]	; (80025d8 <__NVIC_SetPriority+0x4c>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	440b      	add	r3, r1
 80025b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b4:	e00a      	b.n	80025cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4908      	ldr	r1, [pc, #32]	; (80025dc <__NVIC_SetPriority+0x50>)
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	3b04      	subs	r3, #4
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	440b      	add	r3, r1
 80025ca:	761a      	strb	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000e100 	.word	0xe000e100
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f1c3 0307 	rsb	r3, r3, #7
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	bf28      	it	cs
 80025fe:	2304      	movcs	r3, #4
 8002600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3304      	adds	r3, #4
 8002606:	2b06      	cmp	r3, #6
 8002608:	d902      	bls.n	8002610 <NVIC_EncodePriority+0x30>
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3b03      	subs	r3, #3
 800260e:	e000      	b.n	8002612 <NVIC_EncodePriority+0x32>
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	401a      	ands	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43d9      	mvns	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	4313      	orrs	r3, r2
         );
}
 800263a:	4618      	mov	r0, r3
 800263c:	3724      	adds	r7, #36	; 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002658:	d301      	bcc.n	800265e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265a:	2301      	movs	r3, #1
 800265c:	e00f      	b.n	800267e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <SysTick_Config+0x40>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002666:	210f      	movs	r1, #15
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f7ff ff8e 	bl	800258c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <SysTick_Config+0x40>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <SysTick_Config+0x40>)
 8002678:	2207      	movs	r2, #7
 800267a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	e000e010 	.word	0xe000e010

0800268c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff29 	bl	80024ec <__NVIC_SetPriorityGrouping>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b4:	f7ff ff3e 	bl	8002534 <__NVIC_GetPriorityGrouping>
 80026b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7ff ff8e 	bl	80025e0 <NVIC_EncodePriority>
 80026c4:	4602      	mov	r2, r0
 80026c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff5d 	bl	800258c <__NVIC_SetPriority>
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff31 	bl	8002550 <__NVIC_EnableIRQ>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffa2 	bl	8002648 <SysTick_Config>
 8002704:	4603      	mov	r3, r0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff feb6 	bl	800248c <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d008      	beq.n	8002740 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e052      	b.n	80027e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0216 	bic.w	r2, r2, #22
 800274e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800275e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d103      	bne.n	8002770 <HAL_DMA_Abort+0x62>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0208 	bic.w	r2, r2, #8
 800277e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002790:	e013      	b.n	80027ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002792:	f7ff fe7b 	bl	800248c <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b05      	cmp	r3, #5
 800279e:	d90c      	bls.n	80027ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2203      	movs	r2, #3
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e015      	b.n	80027e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e4      	bne.n	8002792 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	223f      	movs	r2, #63	; 0x3f
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d004      	beq.n	800280c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e00c      	b.n	8002826 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2205      	movs	r2, #5
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	; 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e175      	b.n	8002b40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8164 	bne.w	8002b3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d005      	beq.n	800288a <HAL_GPIO_Init+0x56>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d130      	bne.n	80028ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0201 	and.w	r2, r3, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d017      	beq.n	8002928 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80be 	beq.w	8002b3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	4b66      	ldr	r3, [pc, #408]	; (8002b58 <HAL_GPIO_Init+0x324>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4a65      	ldr	r2, [pc, #404]	; (8002b58 <HAL_GPIO_Init+0x324>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ca:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_GPIO_Init+0x324>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029d6:	4a61      	ldr	r2, [pc, #388]	; (8002b5c <HAL_GPIO_Init+0x328>)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	220f      	movs	r2, #15
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_GPIO_Init+0x32c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d037      	beq.n	8002a72 <HAL_GPIO_Init+0x23e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a57      	ldr	r2, [pc, #348]	; (8002b64 <HAL_GPIO_Init+0x330>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_GPIO_Init+0x23a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a56      	ldr	r2, [pc, #344]	; (8002b68 <HAL_GPIO_Init+0x334>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d02b      	beq.n	8002a6a <HAL_GPIO_Init+0x236>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a55      	ldr	r2, [pc, #340]	; (8002b6c <HAL_GPIO_Init+0x338>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d025      	beq.n	8002a66 <HAL_GPIO_Init+0x232>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a54      	ldr	r2, [pc, #336]	; (8002b70 <HAL_GPIO_Init+0x33c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01f      	beq.n	8002a62 <HAL_GPIO_Init+0x22e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a53      	ldr	r2, [pc, #332]	; (8002b74 <HAL_GPIO_Init+0x340>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d019      	beq.n	8002a5e <HAL_GPIO_Init+0x22a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_GPIO_Init+0x344>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0x226>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a51      	ldr	r2, [pc, #324]	; (8002b7c <HAL_GPIO_Init+0x348>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00d      	beq.n	8002a56 <HAL_GPIO_Init+0x222>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a50      	ldr	r2, [pc, #320]	; (8002b80 <HAL_GPIO_Init+0x34c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <HAL_GPIO_Init+0x21e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4f      	ldr	r2, [pc, #316]	; (8002b84 <HAL_GPIO_Init+0x350>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_GPIO_Init+0x21a>
 8002a4a:	2309      	movs	r3, #9
 8002a4c:	e012      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a4e:	230a      	movs	r3, #10
 8002a50:	e010      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a52:	2308      	movs	r3, #8
 8002a54:	e00e      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a56:	2307      	movs	r3, #7
 8002a58:	e00c      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	e00a      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a5e:	2305      	movs	r3, #5
 8002a60:	e008      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a62:	2304      	movs	r3, #4
 8002a64:	e006      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a66:	2303      	movs	r3, #3
 8002a68:	e004      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e002      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_GPIO_Init+0x240>
 8002a72:	2300      	movs	r3, #0
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	f002 0203 	and.w	r2, r2, #3
 8002a7a:	0092      	lsls	r2, r2, #2
 8002a7c:	4093      	lsls	r3, r2
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a84:	4935      	ldr	r1, [pc, #212]	; (8002b5c <HAL_GPIO_Init+0x328>)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab6:	4a34      	ldr	r2, [pc, #208]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002abc:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae0:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_GPIO_Init+0x354>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b0f      	cmp	r3, #15
 8002b44:	f67f ae86 	bls.w	8002854 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3724      	adds	r7, #36	; 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40020800 	.word	0x40020800
 8002b6c:	40020c00 	.word	0x40020c00
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40021400 	.word	0x40021400
 8002b78:	40021800 	.word	0x40021800
 8002b7c:	40021c00 	.word	0x40021c00
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40022400 	.word	0x40022400
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ba8:	e003      	b.n	8002bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fea0 	bl	800192c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d107      	bne.n	8002c3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	e006      	b.n	8002c48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d104      	bne.n	8002c5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_I2C_Init+0x11c>)
 8002c66:	430b      	orrs	r3, r1
 8002c68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69d9      	ldr	r1, [r3, #28]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1a      	ldr	r2, [r3, #32]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	02008000 	.word	0x02008000

08002ce0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	461a      	mov	r2, r3
 8002cec:	460b      	mov	r3, r1
 8002cee:	817b      	strh	r3, [r7, #10]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	f040 80da 	bne.w	8002eb6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_I2C_Master_Transmit+0x30>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e0d3      	b.n	8002eb8 <HAL_I2C_Master_Transmit+0x1d8>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d18:	f7ff fbb8 	bl	800248c <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2319      	movs	r3, #25
 8002d24:	2201      	movs	r2, #1
 8002d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fb4e 	bl	80033cc <I2C_WaitOnFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0be      	b.n	8002eb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2221      	movs	r2, #33	; 0x21
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2210      	movs	r2, #16
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	893a      	ldrh	r2, [r7, #8]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2bff      	cmp	r3, #255	; 0xff
 8002d6a:	d90e      	bls.n	8002d8a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	22ff      	movs	r2, #255	; 0xff
 8002d70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	8979      	ldrh	r1, [r7, #10]
 8002d7a:	4b51      	ldr	r3, [pc, #324]	; (8002ec0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fd38 	bl	80037f8 <I2C_TransferConfig>
 8002d88:	e06c      	b.n	8002e64 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	8979      	ldrh	r1, [r7, #10]
 8002d9c:	4b48      	ldr	r3, [pc, #288]	; (8002ec0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fd27 	bl	80037f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002daa:	e05b      	b.n	8002e64 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6a39      	ldr	r1, [r7, #32]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fb4b 	bl	800344c <I2C_WaitOnTXISFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e07b      	b.n	8002eb8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d034      	beq.n	8002e64 <HAL_I2C_Master_Transmit+0x184>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d130      	bne.n	8002e64 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2180      	movs	r1, #128	; 0x80
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fadd 	bl	80033cc <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e04d      	b.n	8002eb8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2bff      	cmp	r3, #255	; 0xff
 8002e24:	d90e      	bls.n	8002e44 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	22ff      	movs	r2, #255	; 0xff
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	8979      	ldrh	r1, [r7, #10]
 8002e34:	2300      	movs	r3, #0
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fcdb 	bl	80037f8 <I2C_TransferConfig>
 8002e42:	e00f      	b.n	8002e64 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	8979      	ldrh	r1, [r7, #10]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fcca 	bl	80037f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d19e      	bne.n	8002dac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	6a39      	ldr	r1, [r7, #32]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fb2a 	bl	80034cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e01a      	b.n	8002eb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2220      	movs	r2, #32
 8002e88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002e96:	400b      	ands	r3, r1
 8002e98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
  }
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	80002000 	.word	0x80002000
 8002ec4:	fe00e800 	.word	0xfe00e800

08002ec8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	817b      	strh	r3, [r7, #10]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	f040 80db 	bne.w	80030a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_I2C_Master_Receive+0x30>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0d4      	b.n	80030a2 <HAL_I2C_Master_Receive+0x1da>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f00:	f7ff fac4 	bl	800248c <HAL_GetTick>
 8002f04:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2319      	movs	r3, #25
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fa5a 	bl	80033cc <I2C_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0bf      	b.n	80030a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2222      	movs	r2, #34	; 0x22
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	893a      	ldrh	r2, [r7, #8]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2bff      	cmp	r3, #255	; 0xff
 8002f52:	d90e      	bls.n	8002f72 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	22ff      	movs	r2, #255	; 0xff
 8002f58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	8979      	ldrh	r1, [r7, #10]
 8002f62:	4b52      	ldr	r3, [pc, #328]	; (80030ac <HAL_I2C_Master_Receive+0x1e4>)
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fc44 	bl	80037f8 <I2C_TransferConfig>
 8002f70:	e06d      	b.n	800304e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	8979      	ldrh	r1, [r7, #10]
 8002f84:	4b49      	ldr	r3, [pc, #292]	; (80030ac <HAL_I2C_Master_Receive+0x1e4>)
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fc33 	bl	80037f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002f92:	e05c      	b.n	800304e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	6a39      	ldr	r1, [r7, #32]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fad3 	bl	8003544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e07c      	b.n	80030a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d034      	beq.n	800304e <HAL_I2C_Master_Receive+0x186>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d130      	bne.n	800304e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f9e8 	bl	80033cc <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e04d      	b.n	80030a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2bff      	cmp	r3, #255	; 0xff
 800300e:	d90e      	bls.n	800302e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	22ff      	movs	r2, #255	; 0xff
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	b2da      	uxtb	r2, r3
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	2300      	movs	r3, #0
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fbe6 	bl	80037f8 <I2C_TransferConfig>
 800302c:	e00f      	b.n	800304e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	b2da      	uxtb	r2, r3
 800303e:	8979      	ldrh	r1, [r7, #10]
 8003040:	2300      	movs	r3, #0
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fbd5 	bl	80037f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d19d      	bne.n	8002f94 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	6a39      	ldr	r1, [r7, #32]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fa35 	bl	80034cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e01a      	b.n	80030a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2220      	movs	r2, #32
 8003072:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_I2C_Master_Receive+0x1e8>)
 8003080:	400b      	ands	r3, r1
 8003082:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	80002400 	.word	0x80002400
 80030b0:	fe00e800 	.word	0xfe00e800

080030b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	4608      	mov	r0, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	817b      	strh	r3, [r7, #10]
 80030c6:	460b      	mov	r3, r1
 80030c8:	813b      	strh	r3, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	f040 80f9 	bne.w	80032ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_I2C_Mem_Write+0x34>
 80030e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0ed      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_I2C_Mem_Write+0x4e>
 80030fe:	2302      	movs	r3, #2
 8003100:	e0e6      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800310a:	f7ff f9bf 	bl	800248c <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2319      	movs	r3, #25
 8003116:	2201      	movs	r2, #1
 8003118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f955 	bl	80033cc <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0d1      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2221      	movs	r2, #33	; 0x21
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003154:	88f8      	ldrh	r0, [r7, #6]
 8003156:	893a      	ldrh	r2, [r7, #8]
 8003158:	8979      	ldrh	r1, [r7, #10]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	4603      	mov	r3, r0
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f8b9 	bl	80032dc <I2C_RequestMemoryWrite>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0a9      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2bff      	cmp	r3, #255	; 0xff
 8003184:	d90e      	bls.n	80031a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	22ff      	movs	r2, #255	; 0xff
 800318a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	b2da      	uxtb	r2, r3
 8003192:	8979      	ldrh	r1, [r7, #10]
 8003194:	2300      	movs	r3, #0
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fb2b 	bl	80037f8 <I2C_TransferConfig>
 80031a2:	e00f      	b.n	80031c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	8979      	ldrh	r1, [r7, #10]
 80031b6:	2300      	movs	r3, #0
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fb1a 	bl	80037f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f93f 	bl	800344c <I2C_WaitOnTXISFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e07b      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	781a      	ldrb	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d034      	beq.n	800327c <HAL_I2C_Mem_Write+0x1c8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d130      	bne.n	800327c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	2200      	movs	r2, #0
 8003222:	2180      	movs	r1, #128	; 0x80
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f8d1 	bl	80033cc <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e04d      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2bff      	cmp	r3, #255	; 0xff
 800323c:	d90e      	bls.n	800325c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	b2da      	uxtb	r2, r3
 800324a:	8979      	ldrh	r1, [r7, #10]
 800324c:	2300      	movs	r3, #0
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 facf 	bl	80037f8 <I2C_TransferConfig>
 800325a:	e00f      	b.n	800327c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	b2da      	uxtb	r2, r3
 800326c:	8979      	ldrh	r1, [r7, #10]
 800326e:	2300      	movs	r3, #0
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fabe 	bl	80037f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d19e      	bne.n	80031c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f91e 	bl	80034cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e01a      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2220      	movs	r2, #32
 80032a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <HAL_I2C_Mem_Write+0x224>)
 80032ae:	400b      	ands	r3, r1
 80032b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
  }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	fe00e800 	.word	0xfe00e800

080032dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	4608      	mov	r0, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	461a      	mov	r2, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	817b      	strh	r3, [r7, #10]
 80032ee:	460b      	mov	r3, r1
 80032f0:	813b      	strh	r3, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	8979      	ldrh	r1, [r7, #10]
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <I2C_RequestMemoryWrite+0xa4>)
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fa77 	bl	80037f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	69b9      	ldr	r1, [r7, #24]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f89c 	bl	800344c <I2C_WaitOnTXISFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e02c      	b.n	8003378 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003324:	893b      	ldrh	r3, [r7, #8]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	629a      	str	r2, [r3, #40]	; 0x28
 800332e:	e015      	b.n	800335c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003330:	893b      	ldrh	r3, [r7, #8]
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	b29b      	uxth	r3, r3
 8003336:	b2da      	uxtb	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	69b9      	ldr	r1, [r7, #24]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f882 	bl	800344c <I2C_WaitOnTXISFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e012      	b.n	8003378 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003352:	893b      	ldrh	r3, [r7, #8]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2200      	movs	r2, #0
 8003364:	2180      	movs	r1, #128	; 0x80
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f830 	bl	80033cc <I2C_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	80002000 	.word	0x80002000

08003384 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b02      	cmp	r3, #2
 8003398:	d103      	bne.n	80033a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2200      	movs	r2, #0
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d007      	beq.n	80033c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	619a      	str	r2, [r3, #24]
  }
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033dc:	e022      	b.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d01e      	beq.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7ff f851 	bl	800248c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d113      	bne.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	f043 0220 	orr.w	r2, r3, #32
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e00f      	b.n	8003444 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	429a      	cmp	r2, r3
 8003440:	d0cd      	beq.n	80033de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003458:	e02c      	b.n	80034b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f8ea 	bl	8003638 <I2C_IsErrorOccurred>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e02a      	b.n	80034c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d01e      	beq.n	80034b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7ff f809 	bl	800248c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d113      	bne.n	80034b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d1cb      	bne.n	800345a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034d8:	e028      	b.n	800352c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f8aa 	bl	8003638 <I2C_IsErrorOccurred>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e026      	b.n	800353c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7fe ffcd 	bl	800248c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d113      	bne.n	800352c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e007      	b.n	800353c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b20      	cmp	r3, #32
 8003538:	d1cf      	bne.n	80034da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003550:	e064      	b.n	800361c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f86e 	bl	8003638 <I2C_IsErrorOccurred>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e062      	b.n	800362c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b20      	cmp	r3, #32
 8003572:	d138      	bne.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d105      	bne.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e04e      	b.n	800362c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b10      	cmp	r3, #16
 800359a:	d107      	bne.n	80035ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2210      	movs	r2, #16
 80035a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2204      	movs	r2, #4
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44
 80035aa:	e002      	b.n	80035b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2220      	movs	r2, #32
 80035b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80035c6:	400b      	ands	r3, r1
 80035c8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e022      	b.n	800362c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e6:	f7fe ff51 	bl	800248c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d302      	bcc.n	80035fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10f      	bne.n	800361c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e007      	b.n	800362c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b04      	cmp	r3, #4
 8003628:	d193      	bne.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	fe00e800 	.word	0xfe00e800

08003638 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08a      	sub	sp, #40	; 0x28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d068      	beq.n	8003736 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2210      	movs	r2, #16
 800366a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800366c:	e049      	b.n	8003702 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d045      	beq.n	8003702 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7fe ff09 	bl	800248c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <I2C_IsErrorOccurred+0x54>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d13a      	bne.n	8003702 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003696:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800369e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ae:	d121      	bne.n	80036f4 <I2C_IsErrorOccurred+0xbc>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b6:	d01d      	beq.n	80036f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d01a      	beq.n	80036f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036ce:	f7fe fedd 	bl	800248c <HAL_GetTick>
 80036d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d4:	e00e      	b.n	80036f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036d6:	f7fe fed9 	bl	800248c <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b19      	cmp	r3, #25
 80036e2:	d907      	bls.n	80036f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f043 0320 	orr.w	r3, r3, #32
 80036ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80036f2:	e006      	b.n	8003702 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d1e9      	bne.n	80036d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b20      	cmp	r3, #32
 800370e:	d003      	beq.n	8003718 <I2C_IsErrorOccurred+0xe0>
 8003710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0aa      	beq.n	800366e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800371c:	2b00      	cmp	r3, #0
 800371e:	d103      	bne.n	8003728 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2220      	movs	r2, #32
 8003726:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	f043 0304 	orr.w	r3, r3, #4
 800372e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00b      	beq.n	8003760 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f043 0308 	orr.w	r3, r3, #8
 8003770:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800377a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	f043 0302 	orr.w	r3, r3, #2
 8003792:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01c      	beq.n	80037e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7ff fde9 	bl	8003384 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <I2C_IsErrorOccurred+0x1bc>)
 80037be:	400b      	ands	r3, r1
 80037c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3728      	adds	r7, #40	; 0x28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	fe00e800 	.word	0xfe00e800

080037f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	817b      	strh	r3, [r7, #10]
 8003806:	4613      	mov	r3, r2
 8003808:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800380a:	897b      	ldrh	r3, [r7, #10]
 800380c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003810:	7a7b      	ldrb	r3, [r7, #9]
 8003812:	041b      	lsls	r3, r3, #16
 8003814:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003818:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	4313      	orrs	r3, r2
 8003822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003826:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	0d5b      	lsrs	r3, r3, #21
 8003832:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <I2C_TransferConfig+0x60>)
 8003838:	430b      	orrs	r3, r1
 800383a:	43db      	mvns	r3, r3
 800383c:	ea02 0103 	and.w	r1, r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	03ff63ff 	.word	0x03ff63ff

0800385c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b20      	cmp	r3, #32
 8003870:	d138      	bne.n	80038e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800387c:	2302      	movs	r3, #2
 800387e:	e032      	b.n	80038e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6819      	ldr	r1, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b20      	cmp	r3, #32
 8003906:	d139      	bne.n	800397c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003912:	2302      	movs	r3, #2
 8003914:	e033      	b.n	800397e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2224      	movs	r2, #36	; 0x24
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003944:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e000      	b.n	800397e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800397c:	2302      	movs	r3, #2
  }
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399a:	6013      	str	r3, [r2, #0]
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40007000 	.word	0x40007000

080039ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039b6:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
 80039c2:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039ce:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039da:	f7fe fd57 	bl	800248c <HAL_GetTick>
 80039de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039e0:	e009      	b.n	80039f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039e2:	f7fe fd53 	bl	800248c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f0:	d901      	bls.n	80039f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e022      	b.n	8003a3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039f6:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a02:	d1ee      	bne.n	80039e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a0f      	ldr	r2, [pc, #60]	; (8003a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a10:	f7fe fd3c 	bl	800248c <HAL_GetTick>
 8003a14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a16:	e009      	b.n	8003a2c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a18:	f7fe fd38 	bl	800248c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a26:	d901      	bls.n	8003a2c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e007      	b.n	8003a3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a38:	d1ee      	bne.n	8003a18 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40007000 	.word	0x40007000

08003a4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a54:	2300      	movs	r3, #0
 8003a56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e291      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8087 	beq.w	8003b7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a70:	4b96      	ldr	r3, [pc, #600]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 030c 	and.w	r3, r3, #12
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d00c      	beq.n	8003a96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7c:	4b93      	ldr	r3, [pc, #588]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d112      	bne.n	8003aae <HAL_RCC_OscConfig+0x62>
 8003a88:	4b90      	ldr	r3, [pc, #576]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a94:	d10b      	bne.n	8003aae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a96:	4b8d      	ldr	r3, [pc, #564]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d06c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x130>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d168      	bne.n	8003b7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e26b      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x7a>
 8003ab8:	4b84      	ldr	r3, [pc, #528]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a83      	ldr	r2, [pc, #524]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e02e      	b.n	8003b24 <HAL_RCC_OscConfig+0xd8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x9c>
 8003ace:	4b7f      	ldr	r3, [pc, #508]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7e      	ldr	r2, [pc, #504]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b7c      	ldr	r3, [pc, #496]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7b      	ldr	r2, [pc, #492]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e01d      	b.n	8003b24 <HAL_RCC_OscConfig+0xd8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0xc0>
 8003af2:	4b76      	ldr	r3, [pc, #472]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a75      	ldr	r2, [pc, #468]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b73      	ldr	r3, [pc, #460]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a72      	ldr	r2, [pc, #456]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0xd8>
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6e      	ldr	r2, [pc, #440]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b6c      	ldr	r3, [pc, #432]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a6b      	ldr	r2, [pc, #428]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fcae 	bl	800248c <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe fcaa 	bl	800248c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e21f      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b61      	ldr	r3, [pc, #388]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0xe8>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe fc9a 	bl	800248c <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe fc96 	bl	800248c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e20b      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	4b57      	ldr	r3, [pc, #348]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x110>
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d069      	beq.n	8003c5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b8a:	4b50      	ldr	r3, [pc, #320]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b96:	4b4d      	ldr	r3, [pc, #308]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d11c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x190>
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d116      	bne.n	8003bdc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x17a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e1df      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	493d      	ldr	r1, [pc, #244]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bda:	e040      	b.n	8003c5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d023      	beq.n	8003c2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be4:	4b39      	ldr	r3, [pc, #228]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a38      	ldr	r2, [pc, #224]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fe fc4c 	bl	800248c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf8:	f7fe fc48 	bl	800248c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1bd      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4929      	ldr	r1, [pc, #164]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
 8003c2a:	e018      	b.n	8003c5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2c:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fe fc28 	bl	800248c <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c40:	f7fe fc24 	bl	800248c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e199      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d038      	beq.n	8003cdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d019      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c72:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c76:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7fe fc05 	bl	800248c <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c86:	f7fe fc01 	bl	800248c <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e176      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0x23a>
 8003ca4:	e01a      	b.n	8003cdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003caa:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <HAL_RCC_OscConfig+0x280>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fe fbeb 	bl	800248c <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	e00a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fe fbe7 	bl	800248c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d903      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e15c      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
 8003ccc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd0:	4b91      	ldr	r3, [pc, #580]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ee      	bne.n	8003cba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80a4 	beq.w	8003e32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cea:	4b8b      	ldr	r3, [pc, #556]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10d      	bne.n	8003d12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	4b88      	ldr	r3, [pc, #544]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	4a87      	ldr	r2, [pc, #540]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	; 0x40
 8003d02:	4b85      	ldr	r3, [pc, #532]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d12:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_RCC_OscConfig+0x4d0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d118      	bne.n	8003d50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d1e:	4b7f      	ldr	r3, [pc, #508]	; (8003f1c <HAL_RCC_OscConfig+0x4d0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a7e      	ldr	r2, [pc, #504]	; (8003f1c <HAL_RCC_OscConfig+0x4d0>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2a:	f7fe fbaf 	bl	800248c <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d32:	f7fe fbab 	bl	800248c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b64      	cmp	r3, #100	; 0x64
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e120      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d44:	4b75      	ldr	r3, [pc, #468]	; (8003f1c <HAL_RCC_OscConfig+0x4d0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x31a>
 8003d58:	4b6f      	ldr	r3, [pc, #444]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	4a6e      	ldr	r2, [pc, #440]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6713      	str	r3, [r2, #112]	; 0x70
 8003d64:	e02d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x376>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x33c>
 8003d6e:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	4a69      	ldr	r2, [pc, #420]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7a:	4b67      	ldr	r3, [pc, #412]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a66      	ldr	r2, [pc, #408]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d80:	f023 0304 	bic.w	r3, r3, #4
 8003d84:	6713      	str	r3, [r2, #112]	; 0x70
 8003d86:	e01c      	b.n	8003dc2 <HAL_RCC_OscConfig+0x376>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d10c      	bne.n	8003daa <HAL_RCC_OscConfig+0x35e>
 8003d90:	4b61      	ldr	r3, [pc, #388]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4a60      	ldr	r2, [pc, #384]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9c:	4b5e      	ldr	r3, [pc, #376]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	4a5d      	ldr	r2, [pc, #372]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6713      	str	r3, [r2, #112]	; 0x70
 8003da8:	e00b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x376>
 8003daa:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	4a5a      	ldr	r2, [pc, #360]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70
 8003db6:	4b58      	ldr	r3, [pc, #352]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a57      	ldr	r2, [pc, #348]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d015      	beq.n	8003df6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fe fb5f 	bl	800248c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7fe fb5b 	bl	800248c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0ce      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	4b4b      	ldr	r3, [pc, #300]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ee      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x386>
 8003df4:	e014      	b.n	8003e20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df6:	f7fe fb49 	bl	800248c <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fe fb45 	bl	800248c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0b8      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e14:	4b40      	ldr	r3, [pc, #256]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ee      	bne.n	8003dfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d105      	bne.n	8003e32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e26:	4b3c      	ldr	r3, [pc, #240]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a3b      	ldr	r2, [pc, #236]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80a4 	beq.w	8003f84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e3c:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d06b      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d149      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e50:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a30      	ldr	r2, [pc, #192]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fb16 	bl	800248c <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fe fb12 	bl	800248c <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e087      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003eae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb0:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fae6 	bl	800248c <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fe fae2 	bl	800248c <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e057      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x478>
 8003ee2:	e04f      	b.n	8003f84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe facc 	bl	800248c <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fe fac8 	bl	800248c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e03d      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x4ac>
 8003f16:	e035      	b.n	8003f84 <HAL_RCC_OscConfig+0x538>
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x544>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d028      	beq.n	8003f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d121      	bne.n	8003f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d11a      	bne.n	8003f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f50:	4013      	ands	r3, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d111      	bne.n	8003f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800

08003f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0d0      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fac:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d910      	bls.n	8003fdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b67      	ldr	r3, [pc, #412]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 020f 	bic.w	r2, r3, #15
 8003fc2:	4965      	ldr	r1, [pc, #404]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fca:	4b63      	ldr	r3, [pc, #396]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0b8      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d020      	beq.n	800402a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff4:	4b59      	ldr	r3, [pc, #356]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a58      	ldr	r2, [pc, #352]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8003ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ffe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800400c:	4b53      	ldr	r3, [pc, #332]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a52      	ldr	r2, [pc, #328]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004016:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004018:	4b50      	ldr	r3, [pc, #320]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	494d      	ldr	r1, [pc, #308]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d040      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d107      	bne.n	800404e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	4b47      	ldr	r3, [pc, #284]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d115      	bne.n	8004076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e07f      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004056:	4b41      	ldr	r3, [pc, #260]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e073      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004066:	4b3d      	ldr	r3, [pc, #244]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e06b      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004076:	4b39      	ldr	r3, [pc, #228]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f023 0203 	bic.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4936      	ldr	r1, [pc, #216]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004084:	4313      	orrs	r3, r2
 8004086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004088:	f7fe fa00 	bl	800248c <HAL_GetTick>
 800408c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	e00a      	b.n	80040a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004090:	f7fe f9fc 	bl	800248c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f241 3288 	movw	r2, #5000	; 0x1388
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e053      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a6:	4b2d      	ldr	r3, [pc, #180]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 020c 	and.w	r2, r3, #12
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d1eb      	bne.n	8004090 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040b8:	4b27      	ldr	r3, [pc, #156]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d210      	bcs.n	80040e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 020f 	bic.w	r2, r3, #15
 80040ce:	4922      	ldr	r1, [pc, #136]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b20      	ldr	r3, [pc, #128]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e032      	b.n	800414e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f4:	4b19      	ldr	r3, [pc, #100]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4916      	ldr	r1, [pc, #88]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	490e      	ldr	r1, [pc, #56]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004126:	f000 f821 	bl	800416c <HAL_RCC_GetSysClockFreq>
 800412a:	4602      	mov	r2, r0
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	490a      	ldr	r1, [pc, #40]	; (8004160 <HAL_RCC_ClockConfig+0x1cc>)
 8004138:	5ccb      	ldrb	r3, [r1, r3]
 800413a:	fa22 f303 	lsr.w	r3, r2, r3
 800413e:	4a09      	ldr	r2, [pc, #36]	; (8004164 <HAL_RCC_ClockConfig+0x1d0>)
 8004140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <HAL_RCC_ClockConfig+0x1d4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe f95c 	bl	8002404 <HAL_InitTick>

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40023c00 	.word	0x40023c00
 800415c:	40023800 	.word	0x40023800
 8004160:	08009a7c 	.word	0x08009a7c
 8004164:	20000008 	.word	0x20000008
 8004168:	2000000c 	.word	0x2000000c

0800416c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800416c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004170:	b094      	sub	sp, #80	; 0x50
 8004172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	647b      	str	r3, [r7, #68]	; 0x44
 8004178:	2300      	movs	r3, #0
 800417a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800417c:	2300      	movs	r3, #0
 800417e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004184:	4b79      	ldr	r3, [pc, #484]	; (800436c <HAL_RCC_GetSysClockFreq+0x200>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	2b08      	cmp	r3, #8
 800418e:	d00d      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0x40>
 8004190:	2b08      	cmp	r3, #8
 8004192:	f200 80e1 	bhi.w	8004358 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x34>
 800419a:	2b04      	cmp	r3, #4
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800419e:	e0db      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a0:	4b73      	ldr	r3, [pc, #460]	; (8004370 <HAL_RCC_GetSysClockFreq+0x204>)
 80041a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a4:	e0db      	b.n	800435e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041a6:	4b73      	ldr	r3, [pc, #460]	; (8004374 <HAL_RCC_GetSysClockFreq+0x208>)
 80041a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041aa:	e0d8      	b.n	800435e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041ac:	4b6f      	ldr	r3, [pc, #444]	; (800436c <HAL_RCC_GetSysClockFreq+0x200>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041b6:	4b6d      	ldr	r3, [pc, #436]	; (800436c <HAL_RCC_GetSysClockFreq+0x200>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d063      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c2:	4b6a      	ldr	r3, [pc, #424]	; (800436c <HAL_RCC_GetSysClockFreq+0x200>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	2200      	movs	r2, #0
 80041ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80041cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30
 80041d6:	2300      	movs	r3, #0
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
 80041da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041de:	4622      	mov	r2, r4
 80041e0:	462b      	mov	r3, r5
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f04f 0100 	mov.w	r1, #0
 80041ea:	0159      	lsls	r1, r3, #5
 80041ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f0:	0150      	lsls	r0, r2, #5
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4621      	mov	r1, r4
 80041f8:	1a51      	subs	r1, r2, r1
 80041fa:	6139      	str	r1, [r7, #16]
 80041fc:	4629      	mov	r1, r5
 80041fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004210:	4659      	mov	r1, fp
 8004212:	018b      	lsls	r3, r1, #6
 8004214:	4651      	mov	r1, sl
 8004216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800421a:	4651      	mov	r1, sl
 800421c:	018a      	lsls	r2, r1, #6
 800421e:	4651      	mov	r1, sl
 8004220:	ebb2 0801 	subs.w	r8, r2, r1
 8004224:	4659      	mov	r1, fp
 8004226:	eb63 0901 	sbc.w	r9, r3, r1
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800423a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800423e:	4690      	mov	r8, r2
 8004240:	4699      	mov	r9, r3
 8004242:	4623      	mov	r3, r4
 8004244:	eb18 0303 	adds.w	r3, r8, r3
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	462b      	mov	r3, r5
 800424c:	eb49 0303 	adc.w	r3, r9, r3
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800425e:	4629      	mov	r1, r5
 8004260:	024b      	lsls	r3, r1, #9
 8004262:	4621      	mov	r1, r4
 8004264:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004268:	4621      	mov	r1, r4
 800426a:	024a      	lsls	r2, r1, #9
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004272:	2200      	movs	r2, #0
 8004274:	62bb      	str	r3, [r7, #40]	; 0x28
 8004276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004278:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800427c:	f7fc fcee 	bl	8000c5c <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4613      	mov	r3, r2
 8004286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004288:	e058      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428a:	4b38      	ldr	r3, [pc, #224]	; (800436c <HAL_RCC_GetSysClockFreq+0x200>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	099b      	lsrs	r3, r3, #6
 8004290:	2200      	movs	r2, #0
 8004292:	4618      	mov	r0, r3
 8004294:	4611      	mov	r1, r2
 8004296:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800429a:	623b      	str	r3, [r7, #32]
 800429c:	2300      	movs	r3, #0
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
 80042a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042a4:	4642      	mov	r2, r8
 80042a6:	464b      	mov	r3, r9
 80042a8:	f04f 0000 	mov.w	r0, #0
 80042ac:	f04f 0100 	mov.w	r1, #0
 80042b0:	0159      	lsls	r1, r3, #5
 80042b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042b6:	0150      	lsls	r0, r2, #5
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4641      	mov	r1, r8
 80042be:	ebb2 0a01 	subs.w	sl, r2, r1
 80042c2:	4649      	mov	r1, r9
 80042c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042dc:	ebb2 040a 	subs.w	r4, r2, sl
 80042e0:	eb63 050b 	sbc.w	r5, r3, fp
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	00eb      	lsls	r3, r5, #3
 80042ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f2:	00e2      	lsls	r2, r4, #3
 80042f4:	4614      	mov	r4, r2
 80042f6:	461d      	mov	r5, r3
 80042f8:	4643      	mov	r3, r8
 80042fa:	18e3      	adds	r3, r4, r3
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	464b      	mov	r3, r9
 8004300:	eb45 0303 	adc.w	r3, r5, r3
 8004304:	607b      	str	r3, [r7, #4]
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004312:	4629      	mov	r1, r5
 8004314:	028b      	lsls	r3, r1, #10
 8004316:	4621      	mov	r1, r4
 8004318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800431c:	4621      	mov	r1, r4
 800431e:	028a      	lsls	r2, r1, #10
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004326:	2200      	movs	r2, #0
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	61fa      	str	r2, [r7, #28]
 800432c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004330:	f7fc fc94 	bl	8000c5c <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4613      	mov	r3, r2
 800433a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_GetSysClockFreq+0x200>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	3301      	adds	r3, #1
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800434c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800434e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004356:	e002      	b.n	800435e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_RCC_GetSysClockFreq+0x204>)
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800435c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800435e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004360:	4618      	mov	r0, r3
 8004362:	3750      	adds	r7, #80	; 0x50
 8004364:	46bd      	mov	sp, r7
 8004366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436a:	bf00      	nop
 800436c:	40023800 	.word	0x40023800
 8004370:	00f42400 	.word	0x00f42400
 8004374:	007a1200 	.word	0x007a1200

08004378 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <HAL_RCC_GetHCLKFreq+0x14>)
 800437e:	681b      	ldr	r3, [r3, #0]
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000008 	.word	0x20000008

08004390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004394:	f7ff fff0 	bl	8004378 <HAL_RCC_GetHCLKFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	0a9b      	lsrs	r3, r3, #10
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	4903      	ldr	r1, [pc, #12]	; (80043b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40023800 	.word	0x40023800
 80043b4:	08009a8c 	.word	0x08009a8c

080043b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043bc:	f7ff ffdc 	bl	8004378 <HAL_RCC_GetHCLKFreq>
 80043c0:	4602      	mov	r2, r0
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	0b5b      	lsrs	r3, r3, #13
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	4903      	ldr	r1, [pc, #12]	; (80043dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ce:	5ccb      	ldrb	r3, [r1, r3]
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40023800 	.word	0x40023800
 80043dc:	08009a8c 	.word	0x08009a8c

080043e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d012      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004408:	4b69      	ldr	r3, [pc, #420]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a68      	ldr	r2, [pc, #416]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004412:	6093      	str	r3, [r2, #8]
 8004414:	4b66      	ldr	r3, [pc, #408]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	4964      	ldr	r1, [pc, #400]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441e:	4313      	orrs	r3, r2
 8004420:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800442a:	2301      	movs	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d017      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800443a:	4b5d      	ldr	r3, [pc, #372]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004440:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	4959      	ldr	r1, [pc, #356]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004458:	d101      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800445a:	2301      	movs	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d017      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004476:	4b4e      	ldr	r3, [pc, #312]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	494a      	ldr	r1, [pc, #296]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004496:	2301      	movs	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 808b 	beq.w	80045da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	4b3a      	ldr	r3, [pc, #232]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	4a39      	ldr	r2, [pc, #228]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ce:	6413      	str	r3, [r2, #64]	; 0x40
 80044d0:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044dc:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a34      	ldr	r2, [pc, #208]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e8:	f7fd ffd0 	bl	800248c <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fd ffcc 	bl	800248c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e357      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004502:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800450e:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004516:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d035      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d02e      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800452c:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004534:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004536:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004540:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004542:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a1a      	ldr	r2, [pc, #104]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800454e:	4a18      	ldr	r2, [pc, #96]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004554:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d114      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd ff94 	bl	800248c <HAL_GetTick>
 8004564:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004566:	e00a      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fd ff90 	bl	800248c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	; 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e319      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457e:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0ee      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004596:	d111      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045a6:	400b      	ands	r3, r1
 80045a8:	4901      	ldr	r1, [pc, #4]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40007000 	.word	0x40007000
 80045b8:	0ffffcff 	.word	0x0ffffcff
 80045bc:	4baa      	ldr	r3, [pc, #680]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4aa9      	ldr	r2, [pc, #676]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045c6:	6093      	str	r3, [r2, #8]
 80045c8:	4ba7      	ldr	r3, [pc, #668]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d4:	49a4      	ldr	r1, [pc, #656]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d010      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045e6:	4ba0      	ldr	r3, [pc, #640]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ec:	4a9e      	ldr	r2, [pc, #632]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045f6:	4b9c      	ldr	r3, [pc, #624]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	4999      	ldr	r1, [pc, #612]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004614:	4b94      	ldr	r3, [pc, #592]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004622:	4991      	ldr	r1, [pc, #580]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004636:	4b8c      	ldr	r3, [pc, #560]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004644:	4988      	ldr	r1, [pc, #544]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004658:	4b83      	ldr	r3, [pc, #524]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004666:	4980      	ldr	r1, [pc, #512]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800467a:	4b7b      	ldr	r3, [pc, #492]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	4977      	ldr	r1, [pc, #476]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800469c:	4b72      	ldr	r3, [pc, #456]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	496f      	ldr	r1, [pc, #444]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046be:	4b6a      	ldr	r3, [pc, #424]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	f023 020c 	bic.w	r2, r3, #12
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046cc:	4966      	ldr	r1, [pc, #408]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046e0:	4b61      	ldr	r3, [pc, #388]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ee:	495e      	ldr	r1, [pc, #376]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004702:	4b59      	ldr	r3, [pc, #356]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	4955      	ldr	r1, [pc, #340]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004724:	4b50      	ldr	r3, [pc, #320]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	494d      	ldr	r1, [pc, #308]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004746:	4b48      	ldr	r3, [pc, #288]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	4944      	ldr	r1, [pc, #272]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004768:	4b3f      	ldr	r3, [pc, #252]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004776:	493c      	ldr	r1, [pc, #240]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800478a:	4b37      	ldr	r3, [pc, #220]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004798:	4933      	ldr	r1, [pc, #204]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047ac:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ba:	492b      	ldr	r1, [pc, #172]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d011      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047ce:	4b26      	ldr	r3, [pc, #152]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047dc:	4922      	ldr	r1, [pc, #136]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ec:	d101      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047ee:	2301      	movs	r3, #1
 80047f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047fe:	2301      	movs	r3, #1
 8004800:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800480e:	4b16      	ldr	r3, [pc, #88]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004814:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481c:	4912      	ldr	r1, [pc, #72]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00b      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004830:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004840:	4909      	ldr	r1, [pc, #36]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d006      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80d9 	beq.w	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800485c:	4b02      	ldr	r3, [pc, #8]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a01      	ldr	r2, [pc, #4]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004862:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004866:	e001      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004868:	40023800 	.word	0x40023800
 800486c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486e:	f7fd fe0d 	bl	800248c <HAL_GetTick>
 8004872:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004876:	f7fd fe09 	bl	800248c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b64      	cmp	r3, #100	; 0x64
 8004882:	d901      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e194      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004888:	4b6c      	ldr	r3, [pc, #432]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d021      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11d      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048a8:	4b64      	ldr	r3, [pc, #400]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048b6:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048bc:	0e1b      	lsrs	r3, r3, #24
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	019a      	lsls	r2, r3, #6
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	061b      	lsls	r3, r3, #24
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	071b      	lsls	r3, r3, #28
 80048dc:	4957      	ldr	r1, [pc, #348]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004902:	2b00      	cmp	r3, #0
 8004904:	d02e      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490e:	d129      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004910:	4b4a      	ldr	r3, [pc, #296]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004924:	0f1b      	lsrs	r3, r3, #28
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	019a      	lsls	r2, r3, #6
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	041b      	lsls	r3, r3, #16
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	431a      	orrs	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	071b      	lsls	r3, r3, #28
 8004944:	493d      	ldr	r1, [pc, #244]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800494c:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800494e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004952:	f023 021f 	bic.w	r2, r3, #31
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	3b01      	subs	r3, #1
 800495c:	4937      	ldr	r1, [pc, #220]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01d      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004970:	4b32      	ldr	r3, [pc, #200]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004976:	0e1b      	lsrs	r3, r3, #24
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800497e:	4b2f      	ldr	r3, [pc, #188]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004984:	0f1b      	lsrs	r3, r3, #28
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	019a      	lsls	r2, r3, #6
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	431a      	orrs	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	061b      	lsls	r3, r3, #24
 800499e:	431a      	orrs	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	071b      	lsls	r3, r3, #28
 80049a4:	4925      	ldr	r1, [pc, #148]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d011      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	019a      	lsls	r2, r3, #6
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	061b      	lsls	r3, r3, #24
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	071b      	lsls	r3, r3, #28
 80049d4:	4919      	ldr	r1, [pc, #100]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049dc:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a16      	ldr	r2, [pc, #88]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fd fd50 	bl	800248c <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049f0:	f7fd fd4c 	bl	800248c <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0d7      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a02:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	f040 80cd 	bne.w	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a22:	f7fd fd33 	bl	800248c <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a2a:	f7fd fd2f 	bl	800248c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b64      	cmp	r3, #100	; 0x64
 8004a36:	d903      	bls.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e0ba      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004a3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a40:	4b5e      	ldr	r3, [pc, #376]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a4c:	d0ed      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d02e      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d12a      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a76:	4b51      	ldr	r3, [pc, #324]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a84:	4b4d      	ldr	r3, [pc, #308]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	0f1b      	lsrs	r3, r3, #28
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	019a      	lsls	r2, r3, #6
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	061b      	lsls	r3, r3, #24
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	071b      	lsls	r3, r3, #28
 8004aaa:	4944      	ldr	r1, [pc, #272]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ab2:	4b42      	ldr	r3, [pc, #264]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	493d      	ldr	r1, [pc, #244]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d022      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae0:	d11d      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	0e1b      	lsrs	r3, r3, #24
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004af0:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	0f1b      	lsrs	r3, r3, #28
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	019a      	lsls	r2, r3, #6
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	431a      	orrs	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	4929      	ldr	r1, [pc, #164]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d028      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b2a:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	0e1b      	lsrs	r3, r3, #24
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b38:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	0c1b      	lsrs	r3, r3, #16
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	019a      	lsls	r2, r3, #6
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	431a      	orrs	r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	071b      	lsls	r3, r3, #28
 8004b5e:	4917      	ldr	r1, [pc, #92]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b74:	4911      	ldr	r1, [pc, #68]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fd fc80 	bl	800248c <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b90:	f7fd fc7c 	bl	800248c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e007      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bae:	d1ef      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800

08004bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e049      	b.n	8004c66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fd fae2 	bl	80021b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f000 fac0 	bl	8005184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d001      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e054      	b.n	8004d32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d022      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d01d      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d018      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1f      	ldr	r2, [pc, #124]	; (8004d4c <HAL_TIM_Base_Start_IT+0xdc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00e      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1e      	ldr	r2, [pc, #120]	; (8004d50 <HAL_TIM_Base_Start_IT+0xe0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1b      	ldr	r2, [pc, #108]	; (8004d58 <HAL_TIM_Base_Start_IT+0xe8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d115      	bne.n	8004d1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_TIM_Base_Start_IT+0xec>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b06      	cmp	r3, #6
 8004d00:	d015      	beq.n	8004d2e <HAL_TIM_Base_Start_IT+0xbe>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d08:	d011      	beq.n	8004d2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0201 	orr.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1a:	e008      	b.n	8004d2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	e000      	b.n	8004d30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000800 	.word	0x40000800
 8004d4c:	40000c00 	.word	0x40000c00
 8004d50:	40010400 	.word	0x40010400
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40001800 	.word	0x40001800
 8004d5c:	00010007 	.word	0x00010007

08004d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d122      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d11b      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0202 	mvn.w	r2, #2
 8004d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f9d0 	bl	8005148 <HAL_TIM_IC_CaptureCallback>
 8004da8:	e005      	b.n	8004db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f9c2 	bl	8005134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f9d3 	bl	800515c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d122      	bne.n	8004e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d11b      	bne.n	8004e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0204 	mvn.w	r2, #4
 8004de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9a6 	bl	8005148 <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f998 	bl	8005134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f9a9 	bl	800515c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d122      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d11b      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0208 	mvn.w	r2, #8
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2204      	movs	r2, #4
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f97c 	bl	8005148 <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f96e 	bl	8005134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f97f 	bl	800515c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d122      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d11b      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0210 	mvn.w	r2, #16
 8004e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f952 	bl	8005148 <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f944 	bl	8005134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f955 	bl	800515c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0201 	mvn.w	r2, #1
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fc fe4a 	bl	8001b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b80      	cmp	r3, #128	; 0x80
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fb0c 	bl	8005528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f1e:	d10e      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b80      	cmp	r3, #128	; 0x80
 8004f2c:	d107      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 faff 	bl	800553c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f48:	2b40      	cmp	r3, #64	; 0x40
 8004f4a:	d10e      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b40      	cmp	r3, #64	; 0x40
 8004f58:	d107      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f903 	bl	8005170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b20      	cmp	r3, #32
 8004f76:	d10e      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d107      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f06f 0220 	mvn.w	r2, #32
 8004f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fabf 	bl	8005514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_TIM_ConfigClockSource+0x1c>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0b4      	b.n	8005126 <HAL_TIM_ConfigClockSource+0x186>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	4b56      	ldr	r3, [pc, #344]	; (8005130 <HAL_TIM_ConfigClockSource+0x190>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff4:	d03e      	beq.n	8005074 <HAL_TIM_ConfigClockSource+0xd4>
 8004ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffa:	f200 8087 	bhi.w	800510c <HAL_TIM_ConfigClockSource+0x16c>
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005002:	f000 8086 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x172>
 8005006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500a:	d87f      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 800500c:	2b70      	cmp	r3, #112	; 0x70
 800500e:	d01a      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0xa6>
 8005010:	2b70      	cmp	r3, #112	; 0x70
 8005012:	d87b      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 8005014:	2b60      	cmp	r3, #96	; 0x60
 8005016:	d050      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x11a>
 8005018:	2b60      	cmp	r3, #96	; 0x60
 800501a:	d877      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 800501c:	2b50      	cmp	r3, #80	; 0x50
 800501e:	d03c      	beq.n	800509a <HAL_TIM_ConfigClockSource+0xfa>
 8005020:	2b50      	cmp	r3, #80	; 0x50
 8005022:	d873      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d058      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x13a>
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d86f      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 800502c:	2b30      	cmp	r3, #48	; 0x30
 800502e:	d064      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x15a>
 8005030:	2b30      	cmp	r3, #48	; 0x30
 8005032:	d86b      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 8005034:	2b20      	cmp	r3, #32
 8005036:	d060      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x15a>
 8005038:	2b20      	cmp	r3, #32
 800503a:	d867      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d05c      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x15a>
 8005040:	2b10      	cmp	r3, #16
 8005042:	d05a      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x15a>
 8005044:	e062      	b.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6899      	ldr	r1, [r3, #8]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f000 f9af 	bl	80053b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	609a      	str	r2, [r3, #8]
      break;
 8005072:	e04f      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	6899      	ldr	r1, [r3, #8]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f000 f998 	bl	80053b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005096:	609a      	str	r2, [r3, #8]
      break;
 8005098:	e03c      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6859      	ldr	r1, [r3, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f000 f90c 	bl	80052c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2150      	movs	r1, #80	; 0x50
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f965 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 80050b8:	e02c      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f000 f92b 	bl	8005322 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2160      	movs	r1, #96	; 0x60
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f955 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 80050d8:	e01c      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6859      	ldr	r1, [r3, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f000 f8ec 	bl	80052c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2140      	movs	r1, #64	; 0x40
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f945 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 80050f8:	e00c      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f000 f93c 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 800510a:	e003      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
      break;
 8005110:	e000      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005124:	7bfb      	ldrb	r3, [r7, #15]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	fffeff88 	.word	0xfffeff88

08005134 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a40      	ldr	r2, [pc, #256]	; (8005298 <TIM_Base_SetConfig+0x114>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a2:	d00f      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a3d      	ldr	r2, [pc, #244]	; (800529c <TIM_Base_SetConfig+0x118>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00b      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a3c      	ldr	r2, [pc, #240]	; (80052a0 <TIM_Base_SetConfig+0x11c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d007      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a3b      	ldr	r2, [pc, #236]	; (80052a4 <TIM_Base_SetConfig+0x120>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a3a      	ldr	r2, [pc, #232]	; (80052a8 <TIM_Base_SetConfig+0x124>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d108      	bne.n	80051d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a2f      	ldr	r2, [pc, #188]	; (8005298 <TIM_Base_SetConfig+0x114>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d02b      	beq.n	8005236 <TIM_Base_SetConfig+0xb2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e4:	d027      	beq.n	8005236 <TIM_Base_SetConfig+0xb2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a2c      	ldr	r2, [pc, #176]	; (800529c <TIM_Base_SetConfig+0x118>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d023      	beq.n	8005236 <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a2b      	ldr	r2, [pc, #172]	; (80052a0 <TIM_Base_SetConfig+0x11c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d01f      	beq.n	8005236 <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2a      	ldr	r2, [pc, #168]	; (80052a4 <TIM_Base_SetConfig+0x120>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01b      	beq.n	8005236 <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a29      	ldr	r2, [pc, #164]	; (80052a8 <TIM_Base_SetConfig+0x124>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d017      	beq.n	8005236 <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a28      	ldr	r2, [pc, #160]	; (80052ac <TIM_Base_SetConfig+0x128>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a27      	ldr	r2, [pc, #156]	; (80052b0 <TIM_Base_SetConfig+0x12c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00f      	beq.n	8005236 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a26      	ldr	r2, [pc, #152]	; (80052b4 <TIM_Base_SetConfig+0x130>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00b      	beq.n	8005236 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a25      	ldr	r2, [pc, #148]	; (80052b8 <TIM_Base_SetConfig+0x134>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d007      	beq.n	8005236 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a24      	ldr	r2, [pc, #144]	; (80052bc <TIM_Base_SetConfig+0x138>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d003      	beq.n	8005236 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a23      	ldr	r2, [pc, #140]	; (80052c0 <TIM_Base_SetConfig+0x13c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d108      	bne.n	8005248 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a0a      	ldr	r2, [pc, #40]	; (8005298 <TIM_Base_SetConfig+0x114>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_Base_SetConfig+0xf8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a0c      	ldr	r2, [pc, #48]	; (80052a8 <TIM_Base_SetConfig+0x124>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d103      	bne.n	8005284 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	615a      	str	r2, [r3, #20]
}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40010400 	.word	0x40010400
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40014400 	.word	0x40014400
 80052b4:	40014800 	.word	0x40014800
 80052b8:	40001800 	.word	0x40001800
 80052bc:	40001c00 	.word	0x40001c00
 80052c0:	40002000 	.word	0x40002000

080052c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0201 	bic.w	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f023 030a 	bic.w	r3, r3, #10
 8005300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	621a      	str	r2, [r3, #32]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005322:	b480      	push	{r7}
 8005324:	b087      	sub	sp, #28
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f023 0210 	bic.w	r2, r3, #16
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800534c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	031b      	lsls	r3, r3, #12
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800535e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	f043 0307 	orr.w	r3, r3, #7
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	609a      	str	r2, [r3, #8]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	021a      	lsls	r2, r3, #8
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	431a      	orrs	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	609a      	str	r2, [r3, #8]
}
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800540c:	2302      	movs	r3, #2
 800540e:	e06d      	b.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a30      	ldr	r2, [pc, #192]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2f      	ldr	r2, [pc, #188]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d108      	bne.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800544a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d022      	beq.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005482:	d01d      	beq.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d018      	beq.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1c      	ldr	r2, [pc, #112]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1a      	ldr	r2, [pc, #104]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00e      	beq.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a15      	ldr	r2, [pc, #84]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d009      	beq.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a15      	ldr	r2, [pc, #84]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d10c      	bne.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40010400 	.word	0x40010400
 8005500:	40000400 	.word	0x40000400
 8005504:	40000800 	.word	0x40000800
 8005508:	40000c00 	.word	0x40000c00
 800550c:	40014000 	.word	0x40014000
 8005510:	40001800 	.word	0x40001800

08005514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e040      	b.n	80055e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc fea8 	bl	80022c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2224      	movs	r2, #36	; 0x24
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fbe6 	bl	8005d60 <UART_SetConfig>
 8005594:	4603      	mov	r3, r0
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e022      	b.n	80055e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fe3e 	bl	8006228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fec5 	bl	800636c <UART_CheckIdleState>
 80055e2:	4603      	mov	r3, r0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	; 0x28
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005600:	2b20      	cmp	r3, #32
 8005602:	d171      	bne.n	80056e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_UART_Transmit+0x24>
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e06a      	b.n	80056ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2221      	movs	r2, #33	; 0x21
 8005620:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005622:	f7fc ff33 	bl	800248c <HAL_GetTick>
 8005626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005640:	d108      	bne.n	8005654 <HAL_UART_Transmit+0x68>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e003      	b.n	800565c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005658:	2300      	movs	r3, #0
 800565a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800565c:	e02c      	b.n	80056b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2200      	movs	r2, #0
 8005666:	2180      	movs	r1, #128	; 0x80
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 feb6 	bl	80063da <UART_WaitOnFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e038      	b.n	80056ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10b      	bne.n	8005696 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800568c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	3302      	adds	r3, #2
 8005692:	61bb      	str	r3, [r7, #24]
 8005694:	e007      	b.n	80056a6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	781a      	ldrb	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1cc      	bne.n	800565e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	2140      	movs	r1, #64	; 0x40
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fe83 	bl	80063da <UART_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e005      	b.n	80056ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b08a      	sub	sp, #40	; 0x28
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	4613      	mov	r3, r2
 80056fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005706:	2b20      	cmp	r3, #32
 8005708:	d132      	bne.n	8005770 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_UART_Receive_IT+0x24>
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e02b      	b.n	8005772 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d018      	beq.n	8005760 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	613b      	str	r3, [r7, #16]
   return(result);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	623b      	str	r3, [r7, #32]
 800574e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	69f9      	ldr	r1, [r7, #28]
 8005752:	6a3a      	ldr	r2, [r7, #32]
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	61bb      	str	r3, [r7, #24]
   return(result);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e6      	bne.n	800572e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	461a      	mov	r2, r3
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fefe 	bl	8006568 <UART_Start_Receive_IT>
 800576c:	4603      	mov	r3, r0
 800576e:	e000      	b.n	8005772 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005770:	2302      	movs	r3, #2
  }
}
 8005772:	4618      	mov	r0, r3
 8005774:	3728      	adds	r7, #40	; 0x28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b0ba      	sub	sp, #232	; 0xe8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80057a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80057aa:	4013      	ands	r3, r2
 80057ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80057b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d115      	bne.n	80057e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00f      	beq.n	80057e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d009      	beq.n	80057e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8297 	beq.w	8005d08 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
      }
      return;
 80057e2:	e291      	b.n	8005d08 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 8117 	beq.w	8005a1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80057ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80057fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80057fe:	4b85      	ldr	r3, [pc, #532]	; (8005a14 <HAL_UART_IRQHandler+0x298>)
 8005800:	4013      	ands	r3, r2
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 810a 	beq.w	8005a1c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d011      	beq.n	8005838 <HAL_UART_IRQHandler+0xbc>
 8005814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2201      	movs	r2, #1
 8005826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800582e:	f043 0201 	orr.w	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d011      	beq.n	8005868 <HAL_UART_IRQHandler+0xec>
 8005844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00b      	beq.n	8005868 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2202      	movs	r2, #2
 8005856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800585e:	f043 0204 	orr.w	r2, r3, #4
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d011      	beq.n	8005898 <HAL_UART_IRQHandler+0x11c>
 8005874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2204      	movs	r2, #4
 8005886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800588e:	f043 0202 	orr.w	r2, r3, #2
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d017      	beq.n	80058d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2208      	movs	r2, #8
 80058c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ca:	f043 0208 	orr.w	r2, r3, #8
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d012      	beq.n	8005906 <HAL_UART_IRQHandler+0x18a>
 80058e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00c      	beq.n	8005906 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fc:	f043 0220 	orr.w	r2, r3, #32
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 81fd 	beq.w	8005d0c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00d      	beq.n	800593a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800591e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005940:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b40      	cmp	r3, #64	; 0x40
 8005950:	d005      	beq.n	800595e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005956:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800595a:	2b00      	cmp	r3, #0
 800595c:	d04f      	beq.n	80059fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fec8 	bl	80066f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d141      	bne.n	80059f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3308      	adds	r3, #8
 8005978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800598c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800599e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1d9      	bne.n	8005972 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d013      	beq.n	80059ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ca:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <HAL_UART_IRQHandler+0x29c>)
 80059cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fc ff0b 	bl	80027ee <HAL_DMA_Abort_IT>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d017      	beq.n	8005a0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059e8:	4610      	mov	r0, r2
 80059ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ec:	e00f      	b.n	8005a0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f9a0 	bl	8005d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f4:	e00b      	b.n	8005a0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f99c 	bl	8005d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fc:	e007      	b.n	8005a0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f998 	bl	8005d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005a0c:	e17e      	b.n	8005d0c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0e:	bf00      	nop
    return;
 8005a10:	e17c      	b.n	8005d0c <HAL_UART_IRQHandler+0x590>
 8005a12:	bf00      	nop
 8005a14:	04000120 	.word	0x04000120
 8005a18:	080067bd 	.word	0x080067bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	f040 814c 	bne.w	8005cbe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8145 	beq.w	8005cbe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 813e 	beq.w	8005cbe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2210      	movs	r2, #16
 8005a48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	f040 80b6 	bne.w	8005bc6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 8150 	beq.w	8005d10 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	f080 8148 	bcs.w	8005d10 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a94:	f000 8086 	beq.w	8005ba4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ac6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ace:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1da      	bne.n	8005a98 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3308      	adds	r3, #8
 8005b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e1      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3308      	adds	r3, #8
 8005b24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e3      	bne.n	8005b1e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b74:	f023 0310 	bic.w	r3, r3, #16
 8005b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b86:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e4      	bne.n	8005b64 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fc fdb5 	bl	800270e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f8c2 	bl	8005d48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bc4:	e0a4      	b.n	8005d10 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 8096 	beq.w	8005d14 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8091 	beq.w	8005d14 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c14:	647b      	str	r3, [r7, #68]	; 0x44
 8005c16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e4      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	623b      	str	r3, [r7, #32]
   return(result);
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c4c:	633a      	str	r2, [r7, #48]	; 0x30
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e3      	bne.n	8005c28 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f023 0310 	bic.w	r3, r3, #16
 8005c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	69b9      	ldr	r1, [r7, #24]
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e4      	bne.n	8005c74 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2202      	movs	r2, #2
 8005cae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f846 	bl	8005d48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cbc:	e02a      	b.n	8005d14 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00e      	beq.n	8005ce8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01c      	beq.n	8005d18 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	4798      	blx	r3
    }
    return;
 8005ce6:	e017      	b.n	8005d18 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d012      	beq.n	8005d1a <HAL_UART_IRQHandler+0x59e>
 8005cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00c      	beq.n	8005d1a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fd71 	bl	80067e8 <UART_EndTransmit_IT>
    return;
 8005d06:	e008      	b.n	8005d1a <HAL_UART_IRQHandler+0x59e>
      return;
 8005d08:	bf00      	nop
 8005d0a:	e006      	b.n	8005d1a <HAL_UART_IRQHandler+0x59e>
    return;
 8005d0c:	bf00      	nop
 8005d0e:	e004      	b.n	8005d1a <HAL_UART_IRQHandler+0x59e>
      return;
 8005d10:	bf00      	nop
 8005d12:	e002      	b.n	8005d1a <HAL_UART_IRQHandler+0x59e>
      return;
 8005d14:	bf00      	nop
 8005d16:	e000      	b.n	8005d1a <HAL_UART_IRQHandler+0x59e>
    return;
 8005d18:	bf00      	nop
  }

}
 8005d1a:	37e8      	adds	r7, #232	; 0xe8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4ba6      	ldr	r3, [pc, #664]	; (8006024 <UART_SetConfig+0x2c4>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	6979      	ldr	r1, [r7, #20]
 8005d94:	430b      	orrs	r3, r1
 8005d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a94      	ldr	r2, [pc, #592]	; (8006028 <UART_SetConfig+0x2c8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d120      	bne.n	8005e1e <UART_SetConfig+0xbe>
 8005ddc:	4b93      	ldr	r3, [pc, #588]	; (800602c <UART_SetConfig+0x2cc>)
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d816      	bhi.n	8005e18 <UART_SetConfig+0xb8>
 8005dea:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <UART_SetConfig+0x90>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e01 	.word	0x08005e01
 8005df4:	08005e0d 	.word	0x08005e0d
 8005df8:	08005e07 	.word	0x08005e07
 8005dfc:	08005e13 	.word	0x08005e13
 8005e00:	2301      	movs	r3, #1
 8005e02:	77fb      	strb	r3, [r7, #31]
 8005e04:	e150      	b.n	80060a8 <UART_SetConfig+0x348>
 8005e06:	2302      	movs	r3, #2
 8005e08:	77fb      	strb	r3, [r7, #31]
 8005e0a:	e14d      	b.n	80060a8 <UART_SetConfig+0x348>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e14a      	b.n	80060a8 <UART_SetConfig+0x348>
 8005e12:	2308      	movs	r3, #8
 8005e14:	77fb      	strb	r3, [r7, #31]
 8005e16:	e147      	b.n	80060a8 <UART_SetConfig+0x348>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e144      	b.n	80060a8 <UART_SetConfig+0x348>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a83      	ldr	r2, [pc, #524]	; (8006030 <UART_SetConfig+0x2d0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d132      	bne.n	8005e8e <UART_SetConfig+0x12e>
 8005e28:	4b80      	ldr	r3, [pc, #512]	; (800602c <UART_SetConfig+0x2cc>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2e:	f003 030c 	and.w	r3, r3, #12
 8005e32:	2b0c      	cmp	r3, #12
 8005e34:	d828      	bhi.n	8005e88 <UART_SetConfig+0x128>
 8005e36:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <UART_SetConfig+0xdc>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e71 	.word	0x08005e71
 8005e40:	08005e89 	.word	0x08005e89
 8005e44:	08005e89 	.word	0x08005e89
 8005e48:	08005e89 	.word	0x08005e89
 8005e4c:	08005e7d 	.word	0x08005e7d
 8005e50:	08005e89 	.word	0x08005e89
 8005e54:	08005e89 	.word	0x08005e89
 8005e58:	08005e89 	.word	0x08005e89
 8005e5c:	08005e77 	.word	0x08005e77
 8005e60:	08005e89 	.word	0x08005e89
 8005e64:	08005e89 	.word	0x08005e89
 8005e68:	08005e89 	.word	0x08005e89
 8005e6c:	08005e83 	.word	0x08005e83
 8005e70:	2300      	movs	r3, #0
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e118      	b.n	80060a8 <UART_SetConfig+0x348>
 8005e76:	2302      	movs	r3, #2
 8005e78:	77fb      	strb	r3, [r7, #31]
 8005e7a:	e115      	b.n	80060a8 <UART_SetConfig+0x348>
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e112      	b.n	80060a8 <UART_SetConfig+0x348>
 8005e82:	2308      	movs	r3, #8
 8005e84:	77fb      	strb	r3, [r7, #31]
 8005e86:	e10f      	b.n	80060a8 <UART_SetConfig+0x348>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	77fb      	strb	r3, [r7, #31]
 8005e8c:	e10c      	b.n	80060a8 <UART_SetConfig+0x348>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a68      	ldr	r2, [pc, #416]	; (8006034 <UART_SetConfig+0x2d4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d120      	bne.n	8005eda <UART_SetConfig+0x17a>
 8005e98:	4b64      	ldr	r3, [pc, #400]	; (800602c <UART_SetConfig+0x2cc>)
 8005e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ea2:	2b30      	cmp	r3, #48	; 0x30
 8005ea4:	d013      	beq.n	8005ece <UART_SetConfig+0x16e>
 8005ea6:	2b30      	cmp	r3, #48	; 0x30
 8005ea8:	d814      	bhi.n	8005ed4 <UART_SetConfig+0x174>
 8005eaa:	2b20      	cmp	r3, #32
 8005eac:	d009      	beq.n	8005ec2 <UART_SetConfig+0x162>
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d810      	bhi.n	8005ed4 <UART_SetConfig+0x174>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <UART_SetConfig+0x15c>
 8005eb6:	2b10      	cmp	r3, #16
 8005eb8:	d006      	beq.n	8005ec8 <UART_SetConfig+0x168>
 8005eba:	e00b      	b.n	8005ed4 <UART_SetConfig+0x174>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e0f2      	b.n	80060a8 <UART_SetConfig+0x348>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	77fb      	strb	r3, [r7, #31]
 8005ec6:	e0ef      	b.n	80060a8 <UART_SetConfig+0x348>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e0ec      	b.n	80060a8 <UART_SetConfig+0x348>
 8005ece:	2308      	movs	r3, #8
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e0e9      	b.n	80060a8 <UART_SetConfig+0x348>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e0e6      	b.n	80060a8 <UART_SetConfig+0x348>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a56      	ldr	r2, [pc, #344]	; (8006038 <UART_SetConfig+0x2d8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d120      	bne.n	8005f26 <UART_SetConfig+0x1c6>
 8005ee4:	4b51      	ldr	r3, [pc, #324]	; (800602c <UART_SetConfig+0x2cc>)
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005eee:	2bc0      	cmp	r3, #192	; 0xc0
 8005ef0:	d013      	beq.n	8005f1a <UART_SetConfig+0x1ba>
 8005ef2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ef4:	d814      	bhi.n	8005f20 <UART_SetConfig+0x1c0>
 8005ef6:	2b80      	cmp	r3, #128	; 0x80
 8005ef8:	d009      	beq.n	8005f0e <UART_SetConfig+0x1ae>
 8005efa:	2b80      	cmp	r3, #128	; 0x80
 8005efc:	d810      	bhi.n	8005f20 <UART_SetConfig+0x1c0>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <UART_SetConfig+0x1a8>
 8005f02:	2b40      	cmp	r3, #64	; 0x40
 8005f04:	d006      	beq.n	8005f14 <UART_SetConfig+0x1b4>
 8005f06:	e00b      	b.n	8005f20 <UART_SetConfig+0x1c0>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e0cc      	b.n	80060a8 <UART_SetConfig+0x348>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	77fb      	strb	r3, [r7, #31]
 8005f12:	e0c9      	b.n	80060a8 <UART_SetConfig+0x348>
 8005f14:	2304      	movs	r3, #4
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e0c6      	b.n	80060a8 <UART_SetConfig+0x348>
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	77fb      	strb	r3, [r7, #31]
 8005f1e:	e0c3      	b.n	80060a8 <UART_SetConfig+0x348>
 8005f20:	2310      	movs	r3, #16
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	e0c0      	b.n	80060a8 <UART_SetConfig+0x348>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a44      	ldr	r2, [pc, #272]	; (800603c <UART_SetConfig+0x2dc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d125      	bne.n	8005f7c <UART_SetConfig+0x21c>
 8005f30:	4b3e      	ldr	r3, [pc, #248]	; (800602c <UART_SetConfig+0x2cc>)
 8005f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f3e:	d017      	beq.n	8005f70 <UART_SetConfig+0x210>
 8005f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f44:	d817      	bhi.n	8005f76 <UART_SetConfig+0x216>
 8005f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4a:	d00b      	beq.n	8005f64 <UART_SetConfig+0x204>
 8005f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f50:	d811      	bhi.n	8005f76 <UART_SetConfig+0x216>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <UART_SetConfig+0x1fe>
 8005f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5a:	d006      	beq.n	8005f6a <UART_SetConfig+0x20a>
 8005f5c:	e00b      	b.n	8005f76 <UART_SetConfig+0x216>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	77fb      	strb	r3, [r7, #31]
 8005f62:	e0a1      	b.n	80060a8 <UART_SetConfig+0x348>
 8005f64:	2302      	movs	r3, #2
 8005f66:	77fb      	strb	r3, [r7, #31]
 8005f68:	e09e      	b.n	80060a8 <UART_SetConfig+0x348>
 8005f6a:	2304      	movs	r3, #4
 8005f6c:	77fb      	strb	r3, [r7, #31]
 8005f6e:	e09b      	b.n	80060a8 <UART_SetConfig+0x348>
 8005f70:	2308      	movs	r3, #8
 8005f72:	77fb      	strb	r3, [r7, #31]
 8005f74:	e098      	b.n	80060a8 <UART_SetConfig+0x348>
 8005f76:	2310      	movs	r3, #16
 8005f78:	77fb      	strb	r3, [r7, #31]
 8005f7a:	e095      	b.n	80060a8 <UART_SetConfig+0x348>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a2f      	ldr	r2, [pc, #188]	; (8006040 <UART_SetConfig+0x2e0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d125      	bne.n	8005fd2 <UART_SetConfig+0x272>
 8005f86:	4b29      	ldr	r3, [pc, #164]	; (800602c <UART_SetConfig+0x2cc>)
 8005f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f94:	d017      	beq.n	8005fc6 <UART_SetConfig+0x266>
 8005f96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f9a:	d817      	bhi.n	8005fcc <UART_SetConfig+0x26c>
 8005f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa0:	d00b      	beq.n	8005fba <UART_SetConfig+0x25a>
 8005fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa6:	d811      	bhi.n	8005fcc <UART_SetConfig+0x26c>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <UART_SetConfig+0x254>
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb0:	d006      	beq.n	8005fc0 <UART_SetConfig+0x260>
 8005fb2:	e00b      	b.n	8005fcc <UART_SetConfig+0x26c>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e076      	b.n	80060a8 <UART_SetConfig+0x348>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e073      	b.n	80060a8 <UART_SetConfig+0x348>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e070      	b.n	80060a8 <UART_SetConfig+0x348>
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e06d      	b.n	80060a8 <UART_SetConfig+0x348>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e06a      	b.n	80060a8 <UART_SetConfig+0x348>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1b      	ldr	r2, [pc, #108]	; (8006044 <UART_SetConfig+0x2e4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d138      	bne.n	800604e <UART_SetConfig+0x2ee>
 8005fdc:	4b13      	ldr	r3, [pc, #76]	; (800602c <UART_SetConfig+0x2cc>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fe6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fea:	d017      	beq.n	800601c <UART_SetConfig+0x2bc>
 8005fec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ff0:	d82a      	bhi.n	8006048 <UART_SetConfig+0x2e8>
 8005ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff6:	d00b      	beq.n	8006010 <UART_SetConfig+0x2b0>
 8005ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffc:	d824      	bhi.n	8006048 <UART_SetConfig+0x2e8>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <UART_SetConfig+0x2aa>
 8006002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006006:	d006      	beq.n	8006016 <UART_SetConfig+0x2b6>
 8006008:	e01e      	b.n	8006048 <UART_SetConfig+0x2e8>
 800600a:	2300      	movs	r3, #0
 800600c:	77fb      	strb	r3, [r7, #31]
 800600e:	e04b      	b.n	80060a8 <UART_SetConfig+0x348>
 8006010:	2302      	movs	r3, #2
 8006012:	77fb      	strb	r3, [r7, #31]
 8006014:	e048      	b.n	80060a8 <UART_SetConfig+0x348>
 8006016:	2304      	movs	r3, #4
 8006018:	77fb      	strb	r3, [r7, #31]
 800601a:	e045      	b.n	80060a8 <UART_SetConfig+0x348>
 800601c:	2308      	movs	r3, #8
 800601e:	77fb      	strb	r3, [r7, #31]
 8006020:	e042      	b.n	80060a8 <UART_SetConfig+0x348>
 8006022:	bf00      	nop
 8006024:	efff69f3 	.word	0xefff69f3
 8006028:	40011000 	.word	0x40011000
 800602c:	40023800 	.word	0x40023800
 8006030:	40004400 	.word	0x40004400
 8006034:	40004800 	.word	0x40004800
 8006038:	40004c00 	.word	0x40004c00
 800603c:	40005000 	.word	0x40005000
 8006040:	40011400 	.word	0x40011400
 8006044:	40007800 	.word	0x40007800
 8006048:	2310      	movs	r3, #16
 800604a:	77fb      	strb	r3, [r7, #31]
 800604c:	e02c      	b.n	80060a8 <UART_SetConfig+0x348>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a72      	ldr	r2, [pc, #456]	; (800621c <UART_SetConfig+0x4bc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d125      	bne.n	80060a4 <UART_SetConfig+0x344>
 8006058:	4b71      	ldr	r3, [pc, #452]	; (8006220 <UART_SetConfig+0x4c0>)
 800605a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006062:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006066:	d017      	beq.n	8006098 <UART_SetConfig+0x338>
 8006068:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800606c:	d817      	bhi.n	800609e <UART_SetConfig+0x33e>
 800606e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006072:	d00b      	beq.n	800608c <UART_SetConfig+0x32c>
 8006074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006078:	d811      	bhi.n	800609e <UART_SetConfig+0x33e>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <UART_SetConfig+0x326>
 800607e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006082:	d006      	beq.n	8006092 <UART_SetConfig+0x332>
 8006084:	e00b      	b.n	800609e <UART_SetConfig+0x33e>
 8006086:	2300      	movs	r3, #0
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e00d      	b.n	80060a8 <UART_SetConfig+0x348>
 800608c:	2302      	movs	r3, #2
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e00a      	b.n	80060a8 <UART_SetConfig+0x348>
 8006092:	2304      	movs	r3, #4
 8006094:	77fb      	strb	r3, [r7, #31]
 8006096:	e007      	b.n	80060a8 <UART_SetConfig+0x348>
 8006098:	2308      	movs	r3, #8
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e004      	b.n	80060a8 <UART_SetConfig+0x348>
 800609e:	2310      	movs	r3, #16
 80060a0:	77fb      	strb	r3, [r7, #31]
 80060a2:	e001      	b.n	80060a8 <UART_SetConfig+0x348>
 80060a4:	2310      	movs	r3, #16
 80060a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b0:	d15b      	bne.n	800616a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80060b2:	7ffb      	ldrb	r3, [r7, #31]
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d828      	bhi.n	800610a <UART_SetConfig+0x3aa>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <UART_SetConfig+0x360>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	080060ed 	.word	0x080060ed
 80060c8:	080060f5 	.word	0x080060f5
 80060cc:	0800610b 	.word	0x0800610b
 80060d0:	080060fb 	.word	0x080060fb
 80060d4:	0800610b 	.word	0x0800610b
 80060d8:	0800610b 	.word	0x0800610b
 80060dc:	0800610b 	.word	0x0800610b
 80060e0:	08006103 	.word	0x08006103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7fe f954 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 80060e8:	61b8      	str	r0, [r7, #24]
        break;
 80060ea:	e013      	b.n	8006114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ec:	f7fe f964 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 80060f0:	61b8      	str	r0, [r7, #24]
        break;
 80060f2:	e00f      	b.n	8006114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f4:	4b4b      	ldr	r3, [pc, #300]	; (8006224 <UART_SetConfig+0x4c4>)
 80060f6:	61bb      	str	r3, [r7, #24]
        break;
 80060f8:	e00c      	b.n	8006114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fa:	f7fe f837 	bl	800416c <HAL_RCC_GetSysClockFreq>
 80060fe:	61b8      	str	r0, [r7, #24]
        break;
 8006100:	e008      	b.n	8006114 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006106:	61bb      	str	r3, [r7, #24]
        break;
 8006108:	e004      	b.n	8006114 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	77bb      	strb	r3, [r7, #30]
        break;
 8006112:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d074      	beq.n	8006204 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	005a      	lsls	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	085b      	lsrs	r3, r3, #1
 8006124:	441a      	add	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	fbb2 f3f3 	udiv	r3, r2, r3
 800612e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	2b0f      	cmp	r3, #15
 8006134:	d916      	bls.n	8006164 <UART_SetConfig+0x404>
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613c:	d212      	bcs.n	8006164 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	b29b      	uxth	r3, r3
 8006142:	f023 030f 	bic.w	r3, r3, #15
 8006146:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	b29b      	uxth	r3, r3
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	b29a      	uxth	r2, r3
 8006154:	89fb      	ldrh	r3, [r7, #14]
 8006156:	4313      	orrs	r3, r2
 8006158:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	89fa      	ldrh	r2, [r7, #14]
 8006160:	60da      	str	r2, [r3, #12]
 8006162:	e04f      	b.n	8006204 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	77bb      	strb	r3, [r7, #30]
 8006168:	e04c      	b.n	8006204 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800616a:	7ffb      	ldrb	r3, [r7, #31]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d828      	bhi.n	80061c2 <UART_SetConfig+0x462>
 8006170:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <UART_SetConfig+0x418>)
 8006172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006176:	bf00      	nop
 8006178:	0800619d 	.word	0x0800619d
 800617c:	080061a5 	.word	0x080061a5
 8006180:	080061ad 	.word	0x080061ad
 8006184:	080061c3 	.word	0x080061c3
 8006188:	080061b3 	.word	0x080061b3
 800618c:	080061c3 	.word	0x080061c3
 8006190:	080061c3 	.word	0x080061c3
 8006194:	080061c3 	.word	0x080061c3
 8006198:	080061bb 	.word	0x080061bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800619c:	f7fe f8f8 	bl	8004390 <HAL_RCC_GetPCLK1Freq>
 80061a0:	61b8      	str	r0, [r7, #24]
        break;
 80061a2:	e013      	b.n	80061cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a4:	f7fe f908 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
 80061a8:	61b8      	str	r0, [r7, #24]
        break;
 80061aa:	e00f      	b.n	80061cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061ac:	4b1d      	ldr	r3, [pc, #116]	; (8006224 <UART_SetConfig+0x4c4>)
 80061ae:	61bb      	str	r3, [r7, #24]
        break;
 80061b0:	e00c      	b.n	80061cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061b2:	f7fd ffdb 	bl	800416c <HAL_RCC_GetSysClockFreq>
 80061b6:	61b8      	str	r0, [r7, #24]
        break;
 80061b8:	e008      	b.n	80061cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061be:	61bb      	str	r3, [r7, #24]
        break;
 80061c0:	e004      	b.n	80061cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	77bb      	strb	r3, [r7, #30]
        break;
 80061ca:	bf00      	nop
    }

    if (pclk != 0U)
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d018      	beq.n	8006204 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	085a      	lsrs	r2, r3, #1
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	441a      	add	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b0f      	cmp	r3, #15
 80061ea:	d909      	bls.n	8006200 <UART_SetConfig+0x4a0>
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f2:	d205      	bcs.n	8006200 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60da      	str	r2, [r3, #12]
 80061fe:	e001      	b.n	8006204 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006210:	7fbb      	ldrb	r3, [r7, #30]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3720      	adds	r7, #32
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40007c00 	.word	0x40007c00
 8006220:	40023800 	.word	0x40023800
 8006224:	00f42400 	.word	0x00f42400

08006228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01a      	beq.n	800633e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006326:	d10a      	bne.n	800633e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	605a      	str	r2, [r3, #4]
  }
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af02      	add	r7, sp, #8
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800637c:	f7fc f886 	bl	800248c <HAL_GetTick>
 8006380:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b08      	cmp	r3, #8
 800638e:	d10e      	bne.n	80063ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f81b 	bl	80063da <UART_WaitOnFlagUntilTimeout>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e011      	b.n	80063d2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b09c      	sub	sp, #112	; 0x70
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	603b      	str	r3, [r7, #0]
 80063e6:	4613      	mov	r3, r2
 80063e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ea:	e0a7      	b.n	800653c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	f000 80a3 	beq.w	800653c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f6:	f7fc f849 	bl	800248c <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006402:	429a      	cmp	r2, r3
 8006404:	d302      	bcc.n	800640c <UART_WaitOnFlagUntilTimeout+0x32>
 8006406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006408:	2b00      	cmp	r3, #0
 800640a:	d13f      	bne.n	800648c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800641a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006420:	667b      	str	r3, [r7, #100]	; 0x64
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800642a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800642c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006430:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e6      	bne.n	800640c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3308      	adds	r3, #8
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	f023 0301 	bic.w	r3, r3, #1
 8006454:	663b      	str	r3, [r7, #96]	; 0x60
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3308      	adds	r3, #8
 800645c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800645e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006460:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800646c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e5      	bne.n	800643e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2220      	movs	r2, #32
 8006476:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e068      	b.n	800655e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d050      	beq.n	800653c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a8:	d148      	bne.n	800653c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d2:	637b      	str	r3, [r7, #52]	; 0x34
 80064d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e6      	bne.n	80064b4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3308      	adds	r3, #8
 80064ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	613b      	str	r3, [r7, #16]
   return(result);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f023 0301 	bic.w	r3, r3, #1
 80064fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006506:	623a      	str	r2, [r7, #32]
 8006508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	69f9      	ldr	r1, [r7, #28]
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	61bb      	str	r3, [r7, #24]
   return(result);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e5      	bne.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e010      	b.n	800655e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69da      	ldr	r2, [r3, #28]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4013      	ands	r3, r2
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	429a      	cmp	r2, r3
 800654a:	bf0c      	ite	eq
 800654c:	2301      	moveq	r3, #1
 800654e:	2300      	movne	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	461a      	mov	r2, r3
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	429a      	cmp	r2, r3
 8006558:	f43f af48 	beq.w	80063ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3770      	adds	r7, #112	; 0x70
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006568:	b480      	push	{r7}
 800656a:	b097      	sub	sp, #92	; 0x5c
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	4613      	mov	r3, r2
 8006574:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	88fa      	ldrh	r2, [r7, #6]
 8006580:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	88fa      	ldrh	r2, [r7, #6]
 8006588:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659a:	d10e      	bne.n	80065ba <UART_Start_Receive_IT+0x52>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <UART_Start_Receive_IT+0x48>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065ae:	e02d      	b.n	800660c <UART_Start_Receive_IT+0xa4>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	22ff      	movs	r2, #255	; 0xff
 80065b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065b8:	e028      	b.n	800660c <UART_Start_Receive_IT+0xa4>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10d      	bne.n	80065de <UART_Start_Receive_IT+0x76>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <UART_Start_Receive_IT+0x6c>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	22ff      	movs	r2, #255	; 0xff
 80065ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065d2:	e01b      	b.n	800660c <UART_Start_Receive_IT+0xa4>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	227f      	movs	r2, #127	; 0x7f
 80065d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065dc:	e016      	b.n	800660c <UART_Start_Receive_IT+0xa4>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065e6:	d10d      	bne.n	8006604 <UART_Start_Receive_IT+0x9c>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <UART_Start_Receive_IT+0x92>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	227f      	movs	r2, #127	; 0x7f
 80065f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065f8:	e008      	b.n	800660c <UART_Start_Receive_IT+0xa4>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	223f      	movs	r2, #63	; 0x3f
 80065fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006602:	e003      	b.n	800660c <UART_Start_Receive_IT+0xa4>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2222      	movs	r2, #34	; 0x22
 8006618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3308      	adds	r3, #8
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	657b      	str	r3, [r7, #84]	; 0x54
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3308      	adds	r3, #8
 800663a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800663c:	64ba      	str	r2, [r7, #72]	; 0x48
 800663e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800664a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e5      	bne.n	800661c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006658:	d107      	bne.n	800666a <UART_Start_Receive_IT+0x102>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4a21      	ldr	r2, [pc, #132]	; (80066ec <UART_Start_Receive_IT+0x184>)
 8006666:	669a      	str	r2, [r3, #104]	; 0x68
 8006668:	e002      	b.n	8006670 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4a20      	ldr	r2, [pc, #128]	; (80066f0 <UART_Start_Receive_IT+0x188>)
 800666e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d019      	beq.n	80066ac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800668c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006696:	637b      	str	r3, [r7, #52]	; 0x34
 8006698:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800669c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e6      	bne.n	8006678 <UART_Start_Receive_IT+0x110>
 80066aa:	e018      	b.n	80066de <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f043 0320 	orr.w	r3, r3, #32
 80066c0:	653b      	str	r3, [r7, #80]	; 0x50
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ca:	623b      	str	r3, [r7, #32]
 80066cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	69f9      	ldr	r1, [r7, #28]
 80066d0:	6a3a      	ldr	r2, [r7, #32]
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e6      	bne.n	80066ac <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	375c      	adds	r7, #92	; 0x5c
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	080069a3 	.word	0x080069a3
 80066f0:	0800683d 	.word	0x0800683d

080066f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b095      	sub	sp, #84	; 0x54
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006710:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800671a:	643b      	str	r3, [r7, #64]	; 0x40
 800671c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e6      	bne.n	80066fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3308      	adds	r3, #8
 8006734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	61fb      	str	r3, [r7, #28]
   return(result);
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f023 0301 	bic.w	r3, r3, #1
 8006744:	64bb      	str	r3, [r7, #72]	; 0x48
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3308      	adds	r3, #8
 800674c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800674e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e5      	bne.n	800672e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006766:	2b01      	cmp	r3, #1
 8006768:	d118      	bne.n	800679c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	60bb      	str	r3, [r7, #8]
   return(result);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f023 0310 	bic.w	r3, r3, #16
 800677e:	647b      	str	r3, [r7, #68]	; 0x44
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678c:	6979      	ldr	r1, [r7, #20]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	e841 2300 	strex	r3, r2, [r1]
 8006794:	613b      	str	r3, [r7, #16]
   return(result);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e6      	bne.n	800676a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80067b0:	bf00      	nop
 80067b2:	3754      	adds	r7, #84	; 0x54
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff faaa 	bl	8005d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006804:	61fb      	str	r3, [r7, #28]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	61bb      	str	r3, [r7, #24]
 8006810:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6979      	ldr	r1, [r7, #20]
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	613b      	str	r3, [r7, #16]
   return(result);
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e6      	bne.n	80067f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff fa76 	bl	8005d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006834:	bf00      	nop
 8006836:	3720      	adds	r7, #32
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b096      	sub	sp, #88	; 0x58
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800684a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006854:	2b22      	cmp	r3, #34	; 0x22
 8006856:	f040 8098 	bne.w	800698a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006864:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006868:	b2d9      	uxtb	r1, r3
 800686a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800686e:	b2da      	uxtb	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006874:	400a      	ands	r2, r1
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d17b      	bne.n	800699a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b6:	653b      	str	r3, [r7, #80]	; 0x50
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c0:	647b      	str	r3, [r7, #68]	; 0x44
 80068c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e6      	bne.n	80068a2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	623b      	str	r3, [r7, #32]
   return(result);
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3308      	adds	r3, #8
 80068f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068f4:	633a      	str	r2, [r7, #48]	; 0x30
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e5      	bne.n	80068d4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006920:	2b01      	cmp	r3, #1
 8006922:	d12e      	bne.n	8006982 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	60fb      	str	r3, [r7, #12]
   return(result);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0310 	bic.w	r3, r3, #16
 800693e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	69b9      	ldr	r1, [r7, #24]
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	617b      	str	r3, [r7, #20]
   return(result);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e6      	bne.n	800692a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0310 	and.w	r3, r3, #16
 8006966:	2b10      	cmp	r3, #16
 8006968:	d103      	bne.n	8006972 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2210      	movs	r2, #16
 8006970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff f9e4 	bl	8005d48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006980:	e00b      	b.n	800699a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fb f878 	bl	8001a78 <HAL_UART_RxCpltCallback>
}
 8006988:	e007      	b.n	800699a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699a      	ldr	r2, [r3, #24]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0208 	orr.w	r2, r2, #8
 8006998:	619a      	str	r2, [r3, #24]
}
 800699a:	bf00      	nop
 800699c:	3758      	adds	r7, #88	; 0x58
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b096      	sub	sp, #88	; 0x58
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ba:	2b22      	cmp	r3, #34	; 0x22
 80069bc:	f040 8098 	bne.w	8006af0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ce:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80069d0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80069d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069d8:	4013      	ands	r3, r2
 80069da:	b29a      	uxth	r2, r3
 80069dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d17b      	bne.n	8006b00 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a26:	643b      	str	r3, [r7, #64]	; 0x40
 8006a28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e6      	bne.n	8006a08 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e5      	bne.n	8006a3a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d12e      	bne.n	8006ae8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f023 0310 	bic.w	r3, r3, #16
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aae:	61bb      	str	r3, [r7, #24]
 8006ab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6979      	ldr	r1, [r7, #20]
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	613b      	str	r3, [r7, #16]
   return(result);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e6      	bne.n	8006a90 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f003 0310 	and.w	r3, r3, #16
 8006acc:	2b10      	cmp	r3, #16
 8006ace:	d103      	bne.n	8006ad8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2210      	movs	r2, #16
 8006ad6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff f931 	bl	8005d48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ae6:	e00b      	b.n	8006b00 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7fa ffc5 	bl	8001a78 <HAL_UART_RxCpltCallback>
}
 8006aee:	e007      	b.n	8006b00 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0208 	orr.w	r2, r2, #8
 8006afe:	619a      	str	r2, [r3, #24]
}
 8006b00:	bf00      	nop
 8006b02:	3758      	adds	r7, #88	; 0x58
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <gcvt>:
 8006b08:	b530      	push	{r4, r5, lr}
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	460c      	mov	r4, r1
 8006b10:	4605      	mov	r5, r0
 8006b12:	2300      	movs	r3, #0
 8006b14:	ec51 0b10 	vmov	r0, r1, d0
 8006b18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b1c:	f7f9 fffe 	bl	8000b1c <__aeabi_dcmplt>
 8006b20:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006b24:	4622      	mov	r2, r4
 8006b26:	b118      	cbz	r0, 8006b30 <gcvt+0x28>
 8006b28:	232d      	movs	r3, #45	; 0x2d
 8006b2a:	f802 3b01 	strb.w	r3, [r2], #1
 8006b2e:	3d01      	subs	r5, #1
 8006b30:	2300      	movs	r3, #0
 8006b32:	4806      	ldr	r0, [pc, #24]	; (8006b4c <gcvt+0x44>)
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	4629      	mov	r1, r5
 8006b38:	2367      	movs	r3, #103	; 0x67
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	f000 f8d0 	bl	8006ce0 <_gcvt>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	bf14      	ite	ne
 8006b44:	4620      	movne	r0, r4
 8006b46:	2000      	moveq	r0, #0
 8006b48:	b005      	add	sp, #20
 8006b4a:	bd30      	pop	{r4, r5, pc}
 8006b4c:	20000014 	.word	0x20000014

08006b50 <__errno>:
 8006b50:	4b01      	ldr	r3, [pc, #4]	; (8006b58 <__errno+0x8>)
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000014 	.word	0x20000014

08006b5c <__libc_init_array>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	4d0d      	ldr	r5, [pc, #52]	; (8006b94 <__libc_init_array+0x38>)
 8006b60:	4c0d      	ldr	r4, [pc, #52]	; (8006b98 <__libc_init_array+0x3c>)
 8006b62:	1b64      	subs	r4, r4, r5
 8006b64:	10a4      	asrs	r4, r4, #2
 8006b66:	2600      	movs	r6, #0
 8006b68:	42a6      	cmp	r6, r4
 8006b6a:	d109      	bne.n	8006b80 <__libc_init_array+0x24>
 8006b6c:	4d0b      	ldr	r5, [pc, #44]	; (8006b9c <__libc_init_array+0x40>)
 8006b6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ba0 <__libc_init_array+0x44>)
 8006b70:	f002 fbac 	bl	80092cc <_init>
 8006b74:	1b64      	subs	r4, r4, r5
 8006b76:	10a4      	asrs	r4, r4, #2
 8006b78:	2600      	movs	r6, #0
 8006b7a:	42a6      	cmp	r6, r4
 8006b7c:	d105      	bne.n	8006b8a <__libc_init_array+0x2e>
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b84:	4798      	blx	r3
 8006b86:	3601      	adds	r6, #1
 8006b88:	e7ee      	b.n	8006b68 <__libc_init_array+0xc>
 8006b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8e:	4798      	blx	r3
 8006b90:	3601      	adds	r6, #1
 8006b92:	e7f2      	b.n	8006b7a <__libc_init_array+0x1e>
 8006b94:	08009d60 	.word	0x08009d60
 8006b98:	08009d60 	.word	0x08009d60
 8006b9c:	08009d60 	.word	0x08009d60
 8006ba0:	08009d64 	.word	0x08009d64

08006ba4 <memcpy>:
 8006ba4:	440a      	add	r2, r1
 8006ba6:	4291      	cmp	r1, r2
 8006ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bac:	d100      	bne.n	8006bb0 <memcpy+0xc>
 8006bae:	4770      	bx	lr
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bba:	4291      	cmp	r1, r2
 8006bbc:	d1f9      	bne.n	8006bb2 <memcpy+0xe>
 8006bbe:	bd10      	pop	{r4, pc}

08006bc0 <memset>:
 8006bc0:	4402      	add	r2, r0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d100      	bne.n	8006bca <memset+0xa>
 8006bc8:	4770      	bx	lr
 8006bca:	f803 1b01 	strb.w	r1, [r3], #1
 8006bce:	e7f9      	b.n	8006bc4 <memset+0x4>

08006bd0 <strcat>:
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	7814      	ldrb	r4, [r2, #0]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	3201      	adds	r2, #1
 8006bda:	2c00      	cmp	r4, #0
 8006bdc:	d1fa      	bne.n	8006bd4 <strcat+0x4>
 8006bde:	3b01      	subs	r3, #1
 8006be0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006be4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006be8:	2a00      	cmp	r2, #0
 8006bea:	d1f9      	bne.n	8006be0 <strcat+0x10>
 8006bec:	bd10      	pop	{r4, pc}

08006bee <print_e>:
 8006bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bf0:	b087      	sub	sp, #28
 8006bf2:	ec43 2b10 	vmov	d0, r2, r3
 8006bf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006bf8:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8006bfc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006bfe:	ab04      	add	r3, sp, #16
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	ab03      	add	r3, sp, #12
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	1c62      	adds	r2, r4, #1
 8006c08:	ab05      	add	r3, sp, #20
 8006c0a:	460f      	mov	r7, r1
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	f000 ffcb 	bl	8007ba8 <_dtoa_r>
 8006c12:	9a05      	ldr	r2, [sp, #20]
 8006c14:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d105      	bne.n	8006c28 <print_e+0x3a>
 8006c1c:	4601      	mov	r1, r0
 8006c1e:	4638      	mov	r0, r7
 8006c20:	f000 ff0e 	bl	8007a40 <strcpy>
 8006c24:	b007      	add	sp, #28
 8006c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c28:	463b      	mov	r3, r7
 8006c2a:	7801      	ldrb	r1, [r0, #0]
 8006c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c30:	2c00      	cmp	r4, #0
 8006c32:	bfc8      	it	gt
 8006c34:	2501      	movgt	r5, #1
 8006c36:	212e      	movs	r1, #46	; 0x2e
 8006c38:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8006c3c:	b10f      	cbz	r7, 8006c42 <print_e+0x54>
 8006c3e:	2c00      	cmp	r4, #0
 8006c40:	dc37      	bgt.n	8006cb2 <print_e+0xc4>
 8006c42:	2e67      	cmp	r6, #103	; 0x67
 8006c44:	d046      	beq.n	8006cd4 <print_e+0xe6>
 8006c46:	2e47      	cmp	r6, #71	; 0x47
 8006c48:	d046      	beq.n	8006cd8 <print_e+0xea>
 8006c4a:	212e      	movs	r1, #46	; 0x2e
 8006c4c:	2030      	movs	r0, #48	; 0x30
 8006c4e:	2c00      	cmp	r4, #0
 8006c50:	dc38      	bgt.n	8006cc4 <print_e+0xd6>
 8006c52:	1e51      	subs	r1, r2, #1
 8006c54:	2900      	cmp	r1, #0
 8006c56:	bfb8      	it	lt
 8006c58:	f1c2 0201 	rsblt	r2, r2, #1
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	9105      	str	r1, [sp, #20]
 8006c60:	bfac      	ite	ge
 8006c62:	222b      	movge	r2, #43	; 0x2b
 8006c64:	9205      	strlt	r2, [sp, #20]
 8006c66:	f800 6b02 	strb.w	r6, [r0], #2
 8006c6a:	bfa8      	it	ge
 8006c6c:	705a      	strbge	r2, [r3, #1]
 8006c6e:	9a05      	ldr	r2, [sp, #20]
 8006c70:	bfbc      	itt	lt
 8006c72:	212d      	movlt	r1, #45	; 0x2d
 8006c74:	7059      	strblt	r1, [r3, #1]
 8006c76:	2a63      	cmp	r2, #99	; 0x63
 8006c78:	dd0b      	ble.n	8006c92 <print_e+0xa4>
 8006c7a:	2164      	movs	r1, #100	; 0x64
 8006c7c:	fb92 f1f1 	sdiv	r1, r2, r1
 8006c80:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8006c84:	1cd8      	adds	r0, r3, #3
 8006c86:	709c      	strb	r4, [r3, #2]
 8006c88:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006c8c:	fb03 2201 	mla	r2, r3, r1, r2
 8006c90:	9205      	str	r2, [sp, #20]
 8006c92:	9b05      	ldr	r3, [sp, #20]
 8006c94:	220a      	movs	r2, #10
 8006c96:	fb93 f2f2 	sdiv	r2, r3, r2
 8006c9a:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8006c9e:	7001      	strb	r1, [r0, #0]
 8006ca0:	f06f 0109 	mvn.w	r1, #9
 8006ca4:	fb01 3302 	mla	r3, r1, r2, r3
 8006ca8:	3330      	adds	r3, #48	; 0x30
 8006caa:	7043      	strb	r3, [r0, #1]
 8006cac:	2300      	movs	r3, #0
 8006cae:	7083      	strb	r3, [r0, #2]
 8006cb0:	e7b8      	b.n	8006c24 <print_e+0x36>
 8006cb2:	b10d      	cbz	r5, 8006cb8 <print_e+0xca>
 8006cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb8:	7805      	ldrb	r5, [r0, #0]
 8006cba:	f803 5b01 	strb.w	r5, [r3], #1
 8006cbe:	3c01      	subs	r4, #1
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	e7b9      	b.n	8006c38 <print_e+0x4a>
 8006cc4:	b10d      	cbz	r5, 8006cca <print_e+0xdc>
 8006cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cca:	f803 0b01 	strb.w	r0, [r3], #1
 8006cce:	3c01      	subs	r4, #1
 8006cd0:	2500      	movs	r5, #0
 8006cd2:	e7bc      	b.n	8006c4e <print_e+0x60>
 8006cd4:	2665      	movs	r6, #101	; 0x65
 8006cd6:	e7bc      	b.n	8006c52 <print_e+0x64>
 8006cd8:	2645      	movs	r6, #69	; 0x45
 8006cda:	e7ba      	b.n	8006c52 <print_e+0x64>
 8006cdc:	0000      	movs	r0, r0
	...

08006ce0 <_gcvt>:
 8006ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce4:	ec55 4b10 	vmov	r4, r5, d0
 8006ce8:	b088      	sub	sp, #32
 8006cea:	4681      	mov	r9, r0
 8006cec:	4688      	mov	r8, r1
 8006cee:	4616      	mov	r6, r2
 8006cf0:	469a      	mov	sl, r3
 8006cf2:	ee10 0a10 	vmov	r0, s0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006cfe:	f7f9 ff0d 	bl	8000b1c <__aeabi_dcmplt>
 8006d02:	b110      	cbz	r0, 8006d0a <_gcvt+0x2a>
 8006d04:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006d08:	461d      	mov	r5, r3
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4629      	mov	r1, r5
 8006d12:	f7f9 fef9 	bl	8000b08 <__aeabi_dcmpeq>
 8006d16:	b138      	cbz	r0, 8006d28 <_gcvt+0x48>
 8006d18:	2330      	movs	r3, #48	; 0x30
 8006d1a:	7033      	strb	r3, [r6, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	7073      	strb	r3, [r6, #1]
 8006d20:	4630      	mov	r0, r6
 8006d22:	b008      	add	sp, #32
 8006d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d28:	a34b      	add	r3, pc, #300	; (adr r3, 8006e58 <_gcvt+0x178>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 fefd 	bl	8000b30 <__aeabi_dcmple>
 8006d36:	b158      	cbz	r0, 8006d50 <_gcvt+0x70>
 8006d38:	f108 31ff 	add.w	r1, r8, #4294967295
 8006d3c:	9100      	str	r1, [sp, #0]
 8006d3e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8006d42:	4622      	mov	r2, r4
 8006d44:	462b      	mov	r3, r5
 8006d46:	4631      	mov	r1, r6
 8006d48:	4648      	mov	r0, r9
 8006d4a:	f7ff ff50 	bl	8006bee <print_e>
 8006d4e:	e7e7      	b.n	8006d20 <_gcvt+0x40>
 8006d50:	4640      	mov	r0, r8
 8006d52:	f000 fc09 	bl	8007568 <_mprec_log10>
 8006d56:	4622      	mov	r2, r4
 8006d58:	ec51 0b10 	vmov	r0, r1, d0
 8006d5c:	462b      	mov	r3, r5
 8006d5e:	f7f9 fee7 	bl	8000b30 <__aeabi_dcmple>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d1e8      	bne.n	8006d38 <_gcvt+0x58>
 8006d66:	ab07      	add	r3, sp, #28
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	ab06      	add	r3, sp, #24
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4642      	mov	r2, r8
 8006d70:	ab05      	add	r3, sp, #20
 8006d72:	ec45 4b10 	vmov	d0, r4, r5
 8006d76:	2102      	movs	r1, #2
 8006d78:	4648      	mov	r0, r9
 8006d7a:	f000 ff15 	bl	8007ba8 <_dtoa_r>
 8006d7e:	9a05      	ldr	r2, [sp, #20]
 8006d80:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d00e      	beq.n	8006da6 <_gcvt+0xc6>
 8006d88:	4633      	mov	r3, r6
 8006d8a:	44b0      	add	r8, r6
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006d92:	9c05      	ldr	r4, [sp, #20]
 8006d94:	eba8 0203 	sub.w	r2, r8, r3
 8006d98:	b109      	cbz	r1, 8006d9e <_gcvt+0xbe>
 8006d9a:	2c00      	cmp	r4, #0
 8006d9c:	dc08      	bgt.n	8006db0 <_gcvt+0xd0>
 8006d9e:	2100      	movs	r1, #0
 8006da0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8006da4:	e00d      	b.n	8006dc2 <_gcvt+0xe2>
 8006da6:	4601      	mov	r1, r0
 8006da8:	4630      	mov	r0, r6
 8006daa:	f000 fe49 	bl	8007a40 <strcpy>
 8006dae:	e7b7      	b.n	8006d20 <_gcvt+0x40>
 8006db0:	3c01      	subs	r4, #1
 8006db2:	f803 1b01 	strb.w	r1, [r3], #1
 8006db6:	9405      	str	r4, [sp, #20]
 8006db8:	e7e8      	b.n	8006d8c <_gcvt+0xac>
 8006dba:	f803 cb01 	strb.w	ip, [r3], #1
 8006dbe:	3a01      	subs	r2, #1
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	2c00      	cmp	r4, #0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	dc2a      	bgt.n	8006e1e <_gcvt+0x13e>
 8006dc8:	b101      	cbz	r1, 8006dcc <_gcvt+0xec>
 8006dca:	9405      	str	r4, [sp, #20]
 8006dcc:	b90f      	cbnz	r7, 8006dd2 <_gcvt+0xf2>
 8006dce:	7829      	ldrb	r1, [r5, #0]
 8006dd0:	b311      	cbz	r1, 8006e18 <_gcvt+0x138>
 8006dd2:	42b3      	cmp	r3, r6
 8006dd4:	bf04      	itt	eq
 8006dd6:	2130      	moveq	r1, #48	; 0x30
 8006dd8:	f803 1b01 	strbeq.w	r1, [r3], #1
 8006ddc:	212e      	movs	r1, #46	; 0x2e
 8006dde:	7019      	strb	r1, [r3, #0]
 8006de0:	9905      	ldr	r1, [sp, #20]
 8006de2:	4618      	mov	r0, r3
 8006de4:	2400      	movs	r4, #0
 8006de6:	eba1 0c03 	sub.w	ip, r1, r3
 8006dea:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8006dee:	eb1c 0f00 	cmn.w	ip, r0
 8006df2:	d41c      	bmi.n	8006e2e <_gcvt+0x14e>
 8006df4:	2900      	cmp	r1, #0
 8006df6:	f1c1 0000 	rsb	r0, r1, #0
 8006dfa:	bfc8      	it	gt
 8006dfc:	2000      	movgt	r0, #0
 8006dfe:	f100 0c01 	add.w	ip, r0, #1
 8006e02:	4463      	add	r3, ip
 8006e04:	4401      	add	r1, r0
 8006e06:	b104      	cbz	r4, 8006e0a <_gcvt+0x12a>
 8006e08:	9105      	str	r1, [sp, #20]
 8006e0a:	1e69      	subs	r1, r5, #1
 8006e0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006e10:	b108      	cbz	r0, 8006e16 <_gcvt+0x136>
 8006e12:	2a00      	cmp	r2, #0
 8006e14:	dc0f      	bgt.n	8006e36 <_gcvt+0x156>
 8006e16:	b9df      	cbnz	r7, 8006e50 <_gcvt+0x170>
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e780      	b.n	8006d20 <_gcvt+0x40>
 8006e1e:	2a00      	cmp	r2, #0
 8006e20:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e24:	dcc9      	bgt.n	8006dba <_gcvt+0xda>
 8006e26:	2900      	cmp	r1, #0
 8006e28:	d0d0      	beq.n	8006dcc <_gcvt+0xec>
 8006e2a:	9005      	str	r0, [sp, #20]
 8006e2c:	e7ce      	b.n	8006dcc <_gcvt+0xec>
 8006e2e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8006e32:	2401      	movs	r4, #1
 8006e34:	e7db      	b.n	8006dee <_gcvt+0x10e>
 8006e36:	f803 0b01 	strb.w	r0, [r3], #1
 8006e3a:	3a01      	subs	r2, #1
 8006e3c:	e7e6      	b.n	8006e0c <_gcvt+0x12c>
 8006e3e:	f801 5b01 	strb.w	r5, [r1], #1
 8006e42:	1a60      	subs	r0, r4, r1
 8006e44:	2800      	cmp	r0, #0
 8006e46:	dcfa      	bgt.n	8006e3e <_gcvt+0x15e>
 8006e48:	2a00      	cmp	r2, #0
 8006e4a:	bfa8      	it	ge
 8006e4c:	189b      	addge	r3, r3, r2
 8006e4e:	e7e3      	b.n	8006e18 <_gcvt+0x138>
 8006e50:	4619      	mov	r1, r3
 8006e52:	189c      	adds	r4, r3, r2
 8006e54:	2530      	movs	r5, #48	; 0x30
 8006e56:	e7f4      	b.n	8006e42 <_gcvt+0x162>
 8006e58:	eb1c432d 	.word	0xeb1c432d
 8006e5c:	3f1a36e2 	.word	0x3f1a36e2

08006e60 <_Balloc>:
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e64:	4604      	mov	r4, r0
 8006e66:	460d      	mov	r5, r1
 8006e68:	b976      	cbnz	r6, 8006e88 <_Balloc+0x28>
 8006e6a:	2010      	movs	r0, #16
 8006e6c:	f001 fc9c 	bl	80087a8 <malloc>
 8006e70:	4602      	mov	r2, r0
 8006e72:	6260      	str	r0, [r4, #36]	; 0x24
 8006e74:	b920      	cbnz	r0, 8006e80 <_Balloc+0x20>
 8006e76:	4b18      	ldr	r3, [pc, #96]	; (8006ed8 <_Balloc+0x78>)
 8006e78:	4818      	ldr	r0, [pc, #96]	; (8006edc <_Balloc+0x7c>)
 8006e7a:	2166      	movs	r1, #102	; 0x66
 8006e7c:	f000 fde8 	bl	8007a50 <__assert_func>
 8006e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e84:	6006      	str	r6, [r0, #0]
 8006e86:	60c6      	str	r6, [r0, #12]
 8006e88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e8a:	68f3      	ldr	r3, [r6, #12]
 8006e8c:	b183      	cbz	r3, 8006eb0 <_Balloc+0x50>
 8006e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e96:	b9b8      	cbnz	r0, 8006ec8 <_Balloc+0x68>
 8006e98:	2101      	movs	r1, #1
 8006e9a:	fa01 f605 	lsl.w	r6, r1, r5
 8006e9e:	1d72      	adds	r2, r6, #5
 8006ea0:	0092      	lsls	r2, r2, #2
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 fb7e 	bl	80075a4 <_calloc_r>
 8006ea8:	b160      	cbz	r0, 8006ec4 <_Balloc+0x64>
 8006eaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006eae:	e00e      	b.n	8006ece <_Balloc+0x6e>
 8006eb0:	2221      	movs	r2, #33	; 0x21
 8006eb2:	2104      	movs	r1, #4
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 fb75 	bl	80075a4 <_calloc_r>
 8006eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ebc:	60f0      	str	r0, [r6, #12]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e4      	bne.n	8006e8e <_Balloc+0x2e>
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	6802      	ldr	r2, [r0, #0]
 8006eca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ed4:	e7f7      	b.n	8006ec6 <_Balloc+0x66>
 8006ed6:	bf00      	nop
 8006ed8:	08009a98 	.word	0x08009a98
 8006edc:	08009aaf 	.word	0x08009aaf

08006ee0 <_Bfree>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	b976      	cbnz	r6, 8006f08 <_Bfree+0x28>
 8006eea:	2010      	movs	r0, #16
 8006eec:	f001 fc5c 	bl	80087a8 <malloc>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	6268      	str	r0, [r5, #36]	; 0x24
 8006ef4:	b920      	cbnz	r0, 8006f00 <_Bfree+0x20>
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <_Bfree+0x3c>)
 8006ef8:	4809      	ldr	r0, [pc, #36]	; (8006f20 <_Bfree+0x40>)
 8006efa:	218a      	movs	r1, #138	; 0x8a
 8006efc:	f000 fda8 	bl	8007a50 <__assert_func>
 8006f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f04:	6006      	str	r6, [r0, #0]
 8006f06:	60c6      	str	r6, [r0, #12]
 8006f08:	b13c      	cbz	r4, 8006f1a <_Bfree+0x3a>
 8006f0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f0c:	6862      	ldr	r2, [r4, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f14:	6021      	str	r1, [r4, #0]
 8006f16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	08009a98 	.word	0x08009a98
 8006f20:	08009aaf 	.word	0x08009aaf

08006f24 <__multadd>:
 8006f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f28:	690d      	ldr	r5, [r1, #16]
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	461e      	mov	r6, r3
 8006f30:	f101 0c14 	add.w	ip, r1, #20
 8006f34:	2000      	movs	r0, #0
 8006f36:	f8dc 3000 	ldr.w	r3, [ip]
 8006f3a:	b299      	uxth	r1, r3
 8006f3c:	fb02 6101 	mla	r1, r2, r1, r6
 8006f40:	0c1e      	lsrs	r6, r3, #16
 8006f42:	0c0b      	lsrs	r3, r1, #16
 8006f44:	fb02 3306 	mla	r3, r2, r6, r3
 8006f48:	b289      	uxth	r1, r1
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f50:	4285      	cmp	r5, r0
 8006f52:	f84c 1b04 	str.w	r1, [ip], #4
 8006f56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f5a:	dcec      	bgt.n	8006f36 <__multadd+0x12>
 8006f5c:	b30e      	cbz	r6, 8006fa2 <__multadd+0x7e>
 8006f5e:	68a3      	ldr	r3, [r4, #8]
 8006f60:	42ab      	cmp	r3, r5
 8006f62:	dc19      	bgt.n	8006f98 <__multadd+0x74>
 8006f64:	6861      	ldr	r1, [r4, #4]
 8006f66:	4638      	mov	r0, r7
 8006f68:	3101      	adds	r1, #1
 8006f6a:	f7ff ff79 	bl	8006e60 <_Balloc>
 8006f6e:	4680      	mov	r8, r0
 8006f70:	b928      	cbnz	r0, 8006f7e <__multadd+0x5a>
 8006f72:	4602      	mov	r2, r0
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <__multadd+0x84>)
 8006f76:	480d      	ldr	r0, [pc, #52]	; (8006fac <__multadd+0x88>)
 8006f78:	21b5      	movs	r1, #181	; 0xb5
 8006f7a:	f000 fd69 	bl	8007a50 <__assert_func>
 8006f7e:	6922      	ldr	r2, [r4, #16]
 8006f80:	3202      	adds	r2, #2
 8006f82:	f104 010c 	add.w	r1, r4, #12
 8006f86:	0092      	lsls	r2, r2, #2
 8006f88:	300c      	adds	r0, #12
 8006f8a:	f7ff fe0b 	bl	8006ba4 <memcpy>
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4638      	mov	r0, r7
 8006f92:	f7ff ffa5 	bl	8006ee0 <_Bfree>
 8006f96:	4644      	mov	r4, r8
 8006f98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f9c:	3501      	adds	r5, #1
 8006f9e:	615e      	str	r6, [r3, #20]
 8006fa0:	6125      	str	r5, [r4, #16]
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa8:	08009b0b 	.word	0x08009b0b
 8006fac:	08009aaf 	.word	0x08009aaf

08006fb0 <__hi0bits>:
 8006fb0:	0c03      	lsrs	r3, r0, #16
 8006fb2:	041b      	lsls	r3, r3, #16
 8006fb4:	b9d3      	cbnz	r3, 8006fec <__hi0bits+0x3c>
 8006fb6:	0400      	lsls	r0, r0, #16
 8006fb8:	2310      	movs	r3, #16
 8006fba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006fbe:	bf04      	itt	eq
 8006fc0:	0200      	lsleq	r0, r0, #8
 8006fc2:	3308      	addeq	r3, #8
 8006fc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fc8:	bf04      	itt	eq
 8006fca:	0100      	lsleq	r0, r0, #4
 8006fcc:	3304      	addeq	r3, #4
 8006fce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006fd2:	bf04      	itt	eq
 8006fd4:	0080      	lsleq	r0, r0, #2
 8006fd6:	3302      	addeq	r3, #2
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	db05      	blt.n	8006fe8 <__hi0bits+0x38>
 8006fdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006fe0:	f103 0301 	add.w	r3, r3, #1
 8006fe4:	bf08      	it	eq
 8006fe6:	2320      	moveq	r3, #32
 8006fe8:	4618      	mov	r0, r3
 8006fea:	4770      	bx	lr
 8006fec:	2300      	movs	r3, #0
 8006fee:	e7e4      	b.n	8006fba <__hi0bits+0xa>

08006ff0 <__lo0bits>:
 8006ff0:	6803      	ldr	r3, [r0, #0]
 8006ff2:	f013 0207 	ands.w	r2, r3, #7
 8006ff6:	4601      	mov	r1, r0
 8006ff8:	d00b      	beq.n	8007012 <__lo0bits+0x22>
 8006ffa:	07da      	lsls	r2, r3, #31
 8006ffc:	d423      	bmi.n	8007046 <__lo0bits+0x56>
 8006ffe:	0798      	lsls	r0, r3, #30
 8007000:	bf49      	itett	mi
 8007002:	085b      	lsrmi	r3, r3, #1
 8007004:	089b      	lsrpl	r3, r3, #2
 8007006:	2001      	movmi	r0, #1
 8007008:	600b      	strmi	r3, [r1, #0]
 800700a:	bf5c      	itt	pl
 800700c:	600b      	strpl	r3, [r1, #0]
 800700e:	2002      	movpl	r0, #2
 8007010:	4770      	bx	lr
 8007012:	b298      	uxth	r0, r3
 8007014:	b9a8      	cbnz	r0, 8007042 <__lo0bits+0x52>
 8007016:	0c1b      	lsrs	r3, r3, #16
 8007018:	2010      	movs	r0, #16
 800701a:	b2da      	uxtb	r2, r3
 800701c:	b90a      	cbnz	r2, 8007022 <__lo0bits+0x32>
 800701e:	3008      	adds	r0, #8
 8007020:	0a1b      	lsrs	r3, r3, #8
 8007022:	071a      	lsls	r2, r3, #28
 8007024:	bf04      	itt	eq
 8007026:	091b      	lsreq	r3, r3, #4
 8007028:	3004      	addeq	r0, #4
 800702a:	079a      	lsls	r2, r3, #30
 800702c:	bf04      	itt	eq
 800702e:	089b      	lsreq	r3, r3, #2
 8007030:	3002      	addeq	r0, #2
 8007032:	07da      	lsls	r2, r3, #31
 8007034:	d403      	bmi.n	800703e <__lo0bits+0x4e>
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	f100 0001 	add.w	r0, r0, #1
 800703c:	d005      	beq.n	800704a <__lo0bits+0x5a>
 800703e:	600b      	str	r3, [r1, #0]
 8007040:	4770      	bx	lr
 8007042:	4610      	mov	r0, r2
 8007044:	e7e9      	b.n	800701a <__lo0bits+0x2a>
 8007046:	2000      	movs	r0, #0
 8007048:	4770      	bx	lr
 800704a:	2020      	movs	r0, #32
 800704c:	4770      	bx	lr
	...

08007050 <__i2b>:
 8007050:	b510      	push	{r4, lr}
 8007052:	460c      	mov	r4, r1
 8007054:	2101      	movs	r1, #1
 8007056:	f7ff ff03 	bl	8006e60 <_Balloc>
 800705a:	4602      	mov	r2, r0
 800705c:	b928      	cbnz	r0, 800706a <__i2b+0x1a>
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <__i2b+0x24>)
 8007060:	4805      	ldr	r0, [pc, #20]	; (8007078 <__i2b+0x28>)
 8007062:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007066:	f000 fcf3 	bl	8007a50 <__assert_func>
 800706a:	2301      	movs	r3, #1
 800706c:	6144      	str	r4, [r0, #20]
 800706e:	6103      	str	r3, [r0, #16]
 8007070:	bd10      	pop	{r4, pc}
 8007072:	bf00      	nop
 8007074:	08009b0b 	.word	0x08009b0b
 8007078:	08009aaf 	.word	0x08009aaf

0800707c <__multiply>:
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	4691      	mov	r9, r2
 8007082:	690a      	ldr	r2, [r1, #16]
 8007084:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007088:	429a      	cmp	r2, r3
 800708a:	bfb8      	it	lt
 800708c:	460b      	movlt	r3, r1
 800708e:	460c      	mov	r4, r1
 8007090:	bfbc      	itt	lt
 8007092:	464c      	movlt	r4, r9
 8007094:	4699      	movlt	r9, r3
 8007096:	6927      	ldr	r7, [r4, #16]
 8007098:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800709c:	68a3      	ldr	r3, [r4, #8]
 800709e:	6861      	ldr	r1, [r4, #4]
 80070a0:	eb07 060a 	add.w	r6, r7, sl
 80070a4:	42b3      	cmp	r3, r6
 80070a6:	b085      	sub	sp, #20
 80070a8:	bfb8      	it	lt
 80070aa:	3101      	addlt	r1, #1
 80070ac:	f7ff fed8 	bl	8006e60 <_Balloc>
 80070b0:	b930      	cbnz	r0, 80070c0 <__multiply+0x44>
 80070b2:	4602      	mov	r2, r0
 80070b4:	4b44      	ldr	r3, [pc, #272]	; (80071c8 <__multiply+0x14c>)
 80070b6:	4845      	ldr	r0, [pc, #276]	; (80071cc <__multiply+0x150>)
 80070b8:	f240 115d 	movw	r1, #349	; 0x15d
 80070bc:	f000 fcc8 	bl	8007a50 <__assert_func>
 80070c0:	f100 0514 	add.w	r5, r0, #20
 80070c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070c8:	462b      	mov	r3, r5
 80070ca:	2200      	movs	r2, #0
 80070cc:	4543      	cmp	r3, r8
 80070ce:	d321      	bcc.n	8007114 <__multiply+0x98>
 80070d0:	f104 0314 	add.w	r3, r4, #20
 80070d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070d8:	f109 0314 	add.w	r3, r9, #20
 80070dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070e0:	9202      	str	r2, [sp, #8]
 80070e2:	1b3a      	subs	r2, r7, r4
 80070e4:	3a15      	subs	r2, #21
 80070e6:	f022 0203 	bic.w	r2, r2, #3
 80070ea:	3204      	adds	r2, #4
 80070ec:	f104 0115 	add.w	r1, r4, #21
 80070f0:	428f      	cmp	r7, r1
 80070f2:	bf38      	it	cc
 80070f4:	2204      	movcc	r2, #4
 80070f6:	9201      	str	r2, [sp, #4]
 80070f8:	9a02      	ldr	r2, [sp, #8]
 80070fa:	9303      	str	r3, [sp, #12]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d80c      	bhi.n	800711a <__multiply+0x9e>
 8007100:	2e00      	cmp	r6, #0
 8007102:	dd03      	ble.n	800710c <__multiply+0x90>
 8007104:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007108:	2b00      	cmp	r3, #0
 800710a:	d05a      	beq.n	80071c2 <__multiply+0x146>
 800710c:	6106      	str	r6, [r0, #16]
 800710e:	b005      	add	sp, #20
 8007110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007114:	f843 2b04 	str.w	r2, [r3], #4
 8007118:	e7d8      	b.n	80070cc <__multiply+0x50>
 800711a:	f8b3 a000 	ldrh.w	sl, [r3]
 800711e:	f1ba 0f00 	cmp.w	sl, #0
 8007122:	d024      	beq.n	800716e <__multiply+0xf2>
 8007124:	f104 0e14 	add.w	lr, r4, #20
 8007128:	46a9      	mov	r9, r5
 800712a:	f04f 0c00 	mov.w	ip, #0
 800712e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007132:	f8d9 1000 	ldr.w	r1, [r9]
 8007136:	fa1f fb82 	uxth.w	fp, r2
 800713a:	b289      	uxth	r1, r1
 800713c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007140:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007144:	f8d9 2000 	ldr.w	r2, [r9]
 8007148:	4461      	add	r1, ip
 800714a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800714e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007152:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007156:	b289      	uxth	r1, r1
 8007158:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800715c:	4577      	cmp	r7, lr
 800715e:	f849 1b04 	str.w	r1, [r9], #4
 8007162:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007166:	d8e2      	bhi.n	800712e <__multiply+0xb2>
 8007168:	9a01      	ldr	r2, [sp, #4]
 800716a:	f845 c002 	str.w	ip, [r5, r2]
 800716e:	9a03      	ldr	r2, [sp, #12]
 8007170:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007174:	3304      	adds	r3, #4
 8007176:	f1b9 0f00 	cmp.w	r9, #0
 800717a:	d020      	beq.n	80071be <__multiply+0x142>
 800717c:	6829      	ldr	r1, [r5, #0]
 800717e:	f104 0c14 	add.w	ip, r4, #20
 8007182:	46ae      	mov	lr, r5
 8007184:	f04f 0a00 	mov.w	sl, #0
 8007188:	f8bc b000 	ldrh.w	fp, [ip]
 800718c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007190:	fb09 220b 	mla	r2, r9, fp, r2
 8007194:	4492      	add	sl, r2
 8007196:	b289      	uxth	r1, r1
 8007198:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800719c:	f84e 1b04 	str.w	r1, [lr], #4
 80071a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071a4:	f8be 1000 	ldrh.w	r1, [lr]
 80071a8:	0c12      	lsrs	r2, r2, #16
 80071aa:	fb09 1102 	mla	r1, r9, r2, r1
 80071ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80071b2:	4567      	cmp	r7, ip
 80071b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80071b8:	d8e6      	bhi.n	8007188 <__multiply+0x10c>
 80071ba:	9a01      	ldr	r2, [sp, #4]
 80071bc:	50a9      	str	r1, [r5, r2]
 80071be:	3504      	adds	r5, #4
 80071c0:	e79a      	b.n	80070f8 <__multiply+0x7c>
 80071c2:	3e01      	subs	r6, #1
 80071c4:	e79c      	b.n	8007100 <__multiply+0x84>
 80071c6:	bf00      	nop
 80071c8:	08009b0b 	.word	0x08009b0b
 80071cc:	08009aaf 	.word	0x08009aaf

080071d0 <__pow5mult>:
 80071d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d4:	4615      	mov	r5, r2
 80071d6:	f012 0203 	ands.w	r2, r2, #3
 80071da:	4606      	mov	r6, r0
 80071dc:	460f      	mov	r7, r1
 80071de:	d007      	beq.n	80071f0 <__pow5mult+0x20>
 80071e0:	4c25      	ldr	r4, [pc, #148]	; (8007278 <__pow5mult+0xa8>)
 80071e2:	3a01      	subs	r2, #1
 80071e4:	2300      	movs	r3, #0
 80071e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071ea:	f7ff fe9b 	bl	8006f24 <__multadd>
 80071ee:	4607      	mov	r7, r0
 80071f0:	10ad      	asrs	r5, r5, #2
 80071f2:	d03d      	beq.n	8007270 <__pow5mult+0xa0>
 80071f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071f6:	b97c      	cbnz	r4, 8007218 <__pow5mult+0x48>
 80071f8:	2010      	movs	r0, #16
 80071fa:	f001 fad5 	bl	80087a8 <malloc>
 80071fe:	4602      	mov	r2, r0
 8007200:	6270      	str	r0, [r6, #36]	; 0x24
 8007202:	b928      	cbnz	r0, 8007210 <__pow5mult+0x40>
 8007204:	4b1d      	ldr	r3, [pc, #116]	; (800727c <__pow5mult+0xac>)
 8007206:	481e      	ldr	r0, [pc, #120]	; (8007280 <__pow5mult+0xb0>)
 8007208:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800720c:	f000 fc20 	bl	8007a50 <__assert_func>
 8007210:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007214:	6004      	str	r4, [r0, #0]
 8007216:	60c4      	str	r4, [r0, #12]
 8007218:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800721c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007220:	b94c      	cbnz	r4, 8007236 <__pow5mult+0x66>
 8007222:	f240 2171 	movw	r1, #625	; 0x271
 8007226:	4630      	mov	r0, r6
 8007228:	f7ff ff12 	bl	8007050 <__i2b>
 800722c:	2300      	movs	r3, #0
 800722e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007232:	4604      	mov	r4, r0
 8007234:	6003      	str	r3, [r0, #0]
 8007236:	f04f 0900 	mov.w	r9, #0
 800723a:	07eb      	lsls	r3, r5, #31
 800723c:	d50a      	bpl.n	8007254 <__pow5mult+0x84>
 800723e:	4639      	mov	r1, r7
 8007240:	4622      	mov	r2, r4
 8007242:	4630      	mov	r0, r6
 8007244:	f7ff ff1a 	bl	800707c <__multiply>
 8007248:	4639      	mov	r1, r7
 800724a:	4680      	mov	r8, r0
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff fe47 	bl	8006ee0 <_Bfree>
 8007252:	4647      	mov	r7, r8
 8007254:	106d      	asrs	r5, r5, #1
 8007256:	d00b      	beq.n	8007270 <__pow5mult+0xa0>
 8007258:	6820      	ldr	r0, [r4, #0]
 800725a:	b938      	cbnz	r0, 800726c <__pow5mult+0x9c>
 800725c:	4622      	mov	r2, r4
 800725e:	4621      	mov	r1, r4
 8007260:	4630      	mov	r0, r6
 8007262:	f7ff ff0b 	bl	800707c <__multiply>
 8007266:	6020      	str	r0, [r4, #0]
 8007268:	f8c0 9000 	str.w	r9, [r0]
 800726c:	4604      	mov	r4, r0
 800726e:	e7e4      	b.n	800723a <__pow5mult+0x6a>
 8007270:	4638      	mov	r0, r7
 8007272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007276:	bf00      	nop
 8007278:	08009c10 	.word	0x08009c10
 800727c:	08009a98 	.word	0x08009a98
 8007280:	08009aaf 	.word	0x08009aaf

08007284 <__lshift>:
 8007284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007288:	460c      	mov	r4, r1
 800728a:	6849      	ldr	r1, [r1, #4]
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007292:	68a3      	ldr	r3, [r4, #8]
 8007294:	4607      	mov	r7, r0
 8007296:	4691      	mov	r9, r2
 8007298:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800729c:	f108 0601 	add.w	r6, r8, #1
 80072a0:	42b3      	cmp	r3, r6
 80072a2:	db0b      	blt.n	80072bc <__lshift+0x38>
 80072a4:	4638      	mov	r0, r7
 80072a6:	f7ff fddb 	bl	8006e60 <_Balloc>
 80072aa:	4605      	mov	r5, r0
 80072ac:	b948      	cbnz	r0, 80072c2 <__lshift+0x3e>
 80072ae:	4602      	mov	r2, r0
 80072b0:	4b2a      	ldr	r3, [pc, #168]	; (800735c <__lshift+0xd8>)
 80072b2:	482b      	ldr	r0, [pc, #172]	; (8007360 <__lshift+0xdc>)
 80072b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072b8:	f000 fbca 	bl	8007a50 <__assert_func>
 80072bc:	3101      	adds	r1, #1
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	e7ee      	b.n	80072a0 <__lshift+0x1c>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f100 0114 	add.w	r1, r0, #20
 80072c8:	f100 0210 	add.w	r2, r0, #16
 80072cc:	4618      	mov	r0, r3
 80072ce:	4553      	cmp	r3, sl
 80072d0:	db37      	blt.n	8007342 <__lshift+0xbe>
 80072d2:	6920      	ldr	r0, [r4, #16]
 80072d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072d8:	f104 0314 	add.w	r3, r4, #20
 80072dc:	f019 091f 	ands.w	r9, r9, #31
 80072e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072e8:	d02f      	beq.n	800734a <__lshift+0xc6>
 80072ea:	f1c9 0e20 	rsb	lr, r9, #32
 80072ee:	468a      	mov	sl, r1
 80072f0:	f04f 0c00 	mov.w	ip, #0
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	fa02 f209 	lsl.w	r2, r2, r9
 80072fa:	ea42 020c 	orr.w	r2, r2, ip
 80072fe:	f84a 2b04 	str.w	r2, [sl], #4
 8007302:	f853 2b04 	ldr.w	r2, [r3], #4
 8007306:	4298      	cmp	r0, r3
 8007308:	fa22 fc0e 	lsr.w	ip, r2, lr
 800730c:	d8f2      	bhi.n	80072f4 <__lshift+0x70>
 800730e:	1b03      	subs	r3, r0, r4
 8007310:	3b15      	subs	r3, #21
 8007312:	f023 0303 	bic.w	r3, r3, #3
 8007316:	3304      	adds	r3, #4
 8007318:	f104 0215 	add.w	r2, r4, #21
 800731c:	4290      	cmp	r0, r2
 800731e:	bf38      	it	cc
 8007320:	2304      	movcc	r3, #4
 8007322:	f841 c003 	str.w	ip, [r1, r3]
 8007326:	f1bc 0f00 	cmp.w	ip, #0
 800732a:	d001      	beq.n	8007330 <__lshift+0xac>
 800732c:	f108 0602 	add.w	r6, r8, #2
 8007330:	3e01      	subs	r6, #1
 8007332:	4638      	mov	r0, r7
 8007334:	612e      	str	r6, [r5, #16]
 8007336:	4621      	mov	r1, r4
 8007338:	f7ff fdd2 	bl	8006ee0 <_Bfree>
 800733c:	4628      	mov	r0, r5
 800733e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007342:	f842 0f04 	str.w	r0, [r2, #4]!
 8007346:	3301      	adds	r3, #1
 8007348:	e7c1      	b.n	80072ce <__lshift+0x4a>
 800734a:	3904      	subs	r1, #4
 800734c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007350:	f841 2f04 	str.w	r2, [r1, #4]!
 8007354:	4298      	cmp	r0, r3
 8007356:	d8f9      	bhi.n	800734c <__lshift+0xc8>
 8007358:	e7ea      	b.n	8007330 <__lshift+0xac>
 800735a:	bf00      	nop
 800735c:	08009b0b 	.word	0x08009b0b
 8007360:	08009aaf 	.word	0x08009aaf

08007364 <__mcmp>:
 8007364:	b530      	push	{r4, r5, lr}
 8007366:	6902      	ldr	r2, [r0, #16]
 8007368:	690c      	ldr	r4, [r1, #16]
 800736a:	1b12      	subs	r2, r2, r4
 800736c:	d10e      	bne.n	800738c <__mcmp+0x28>
 800736e:	f100 0314 	add.w	r3, r0, #20
 8007372:	3114      	adds	r1, #20
 8007374:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007378:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800737c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007380:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007384:	42a5      	cmp	r5, r4
 8007386:	d003      	beq.n	8007390 <__mcmp+0x2c>
 8007388:	d305      	bcc.n	8007396 <__mcmp+0x32>
 800738a:	2201      	movs	r2, #1
 800738c:	4610      	mov	r0, r2
 800738e:	bd30      	pop	{r4, r5, pc}
 8007390:	4283      	cmp	r3, r0
 8007392:	d3f3      	bcc.n	800737c <__mcmp+0x18>
 8007394:	e7fa      	b.n	800738c <__mcmp+0x28>
 8007396:	f04f 32ff 	mov.w	r2, #4294967295
 800739a:	e7f7      	b.n	800738c <__mcmp+0x28>

0800739c <__mdiff>:
 800739c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	460c      	mov	r4, r1
 80073a2:	4606      	mov	r6, r0
 80073a4:	4611      	mov	r1, r2
 80073a6:	4620      	mov	r0, r4
 80073a8:	4690      	mov	r8, r2
 80073aa:	f7ff ffdb 	bl	8007364 <__mcmp>
 80073ae:	1e05      	subs	r5, r0, #0
 80073b0:	d110      	bne.n	80073d4 <__mdiff+0x38>
 80073b2:	4629      	mov	r1, r5
 80073b4:	4630      	mov	r0, r6
 80073b6:	f7ff fd53 	bl	8006e60 <_Balloc>
 80073ba:	b930      	cbnz	r0, 80073ca <__mdiff+0x2e>
 80073bc:	4b3a      	ldr	r3, [pc, #232]	; (80074a8 <__mdiff+0x10c>)
 80073be:	4602      	mov	r2, r0
 80073c0:	f240 2132 	movw	r1, #562	; 0x232
 80073c4:	4839      	ldr	r0, [pc, #228]	; (80074ac <__mdiff+0x110>)
 80073c6:	f000 fb43 	bl	8007a50 <__assert_func>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d4:	bfa4      	itt	ge
 80073d6:	4643      	movge	r3, r8
 80073d8:	46a0      	movge	r8, r4
 80073da:	4630      	mov	r0, r6
 80073dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073e0:	bfa6      	itte	ge
 80073e2:	461c      	movge	r4, r3
 80073e4:	2500      	movge	r5, #0
 80073e6:	2501      	movlt	r5, #1
 80073e8:	f7ff fd3a 	bl	8006e60 <_Balloc>
 80073ec:	b920      	cbnz	r0, 80073f8 <__mdiff+0x5c>
 80073ee:	4b2e      	ldr	r3, [pc, #184]	; (80074a8 <__mdiff+0x10c>)
 80073f0:	4602      	mov	r2, r0
 80073f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073f6:	e7e5      	b.n	80073c4 <__mdiff+0x28>
 80073f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073fc:	6926      	ldr	r6, [r4, #16]
 80073fe:	60c5      	str	r5, [r0, #12]
 8007400:	f104 0914 	add.w	r9, r4, #20
 8007404:	f108 0514 	add.w	r5, r8, #20
 8007408:	f100 0e14 	add.w	lr, r0, #20
 800740c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007410:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007414:	f108 0210 	add.w	r2, r8, #16
 8007418:	46f2      	mov	sl, lr
 800741a:	2100      	movs	r1, #0
 800741c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007420:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007424:	fa1f f883 	uxth.w	r8, r3
 8007428:	fa11 f18b 	uxtah	r1, r1, fp
 800742c:	0c1b      	lsrs	r3, r3, #16
 800742e:	eba1 0808 	sub.w	r8, r1, r8
 8007432:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007436:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800743a:	fa1f f888 	uxth.w	r8, r8
 800743e:	1419      	asrs	r1, r3, #16
 8007440:	454e      	cmp	r6, r9
 8007442:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007446:	f84a 3b04 	str.w	r3, [sl], #4
 800744a:	d8e7      	bhi.n	800741c <__mdiff+0x80>
 800744c:	1b33      	subs	r3, r6, r4
 800744e:	3b15      	subs	r3, #21
 8007450:	f023 0303 	bic.w	r3, r3, #3
 8007454:	3304      	adds	r3, #4
 8007456:	3415      	adds	r4, #21
 8007458:	42a6      	cmp	r6, r4
 800745a:	bf38      	it	cc
 800745c:	2304      	movcc	r3, #4
 800745e:	441d      	add	r5, r3
 8007460:	4473      	add	r3, lr
 8007462:	469e      	mov	lr, r3
 8007464:	462e      	mov	r6, r5
 8007466:	4566      	cmp	r6, ip
 8007468:	d30e      	bcc.n	8007488 <__mdiff+0xec>
 800746a:	f10c 0203 	add.w	r2, ip, #3
 800746e:	1b52      	subs	r2, r2, r5
 8007470:	f022 0203 	bic.w	r2, r2, #3
 8007474:	3d03      	subs	r5, #3
 8007476:	45ac      	cmp	ip, r5
 8007478:	bf38      	it	cc
 800747a:	2200      	movcc	r2, #0
 800747c:	441a      	add	r2, r3
 800747e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007482:	b17b      	cbz	r3, 80074a4 <__mdiff+0x108>
 8007484:	6107      	str	r7, [r0, #16]
 8007486:	e7a3      	b.n	80073d0 <__mdiff+0x34>
 8007488:	f856 8b04 	ldr.w	r8, [r6], #4
 800748c:	fa11 f288 	uxtah	r2, r1, r8
 8007490:	1414      	asrs	r4, r2, #16
 8007492:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007496:	b292      	uxth	r2, r2
 8007498:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800749c:	f84e 2b04 	str.w	r2, [lr], #4
 80074a0:	1421      	asrs	r1, r4, #16
 80074a2:	e7e0      	b.n	8007466 <__mdiff+0xca>
 80074a4:	3f01      	subs	r7, #1
 80074a6:	e7ea      	b.n	800747e <__mdiff+0xe2>
 80074a8:	08009b0b 	.word	0x08009b0b
 80074ac:	08009aaf 	.word	0x08009aaf

080074b0 <__d2b>:
 80074b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074b4:	4689      	mov	r9, r1
 80074b6:	2101      	movs	r1, #1
 80074b8:	ec57 6b10 	vmov	r6, r7, d0
 80074bc:	4690      	mov	r8, r2
 80074be:	f7ff fccf 	bl	8006e60 <_Balloc>
 80074c2:	4604      	mov	r4, r0
 80074c4:	b930      	cbnz	r0, 80074d4 <__d2b+0x24>
 80074c6:	4602      	mov	r2, r0
 80074c8:	4b25      	ldr	r3, [pc, #148]	; (8007560 <__d2b+0xb0>)
 80074ca:	4826      	ldr	r0, [pc, #152]	; (8007564 <__d2b+0xb4>)
 80074cc:	f240 310a 	movw	r1, #778	; 0x30a
 80074d0:	f000 fabe 	bl	8007a50 <__assert_func>
 80074d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80074d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074dc:	bb35      	cbnz	r5, 800752c <__d2b+0x7c>
 80074de:	2e00      	cmp	r6, #0
 80074e0:	9301      	str	r3, [sp, #4]
 80074e2:	d028      	beq.n	8007536 <__d2b+0x86>
 80074e4:	4668      	mov	r0, sp
 80074e6:	9600      	str	r6, [sp, #0]
 80074e8:	f7ff fd82 	bl	8006ff0 <__lo0bits>
 80074ec:	9900      	ldr	r1, [sp, #0]
 80074ee:	b300      	cbz	r0, 8007532 <__d2b+0x82>
 80074f0:	9a01      	ldr	r2, [sp, #4]
 80074f2:	f1c0 0320 	rsb	r3, r0, #32
 80074f6:	fa02 f303 	lsl.w	r3, r2, r3
 80074fa:	430b      	orrs	r3, r1
 80074fc:	40c2      	lsrs	r2, r0
 80074fe:	6163      	str	r3, [r4, #20]
 8007500:	9201      	str	r2, [sp, #4]
 8007502:	9b01      	ldr	r3, [sp, #4]
 8007504:	61a3      	str	r3, [r4, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	bf14      	ite	ne
 800750a:	2202      	movne	r2, #2
 800750c:	2201      	moveq	r2, #1
 800750e:	6122      	str	r2, [r4, #16]
 8007510:	b1d5      	cbz	r5, 8007548 <__d2b+0x98>
 8007512:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007516:	4405      	add	r5, r0
 8007518:	f8c9 5000 	str.w	r5, [r9]
 800751c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007520:	f8c8 0000 	str.w	r0, [r8]
 8007524:	4620      	mov	r0, r4
 8007526:	b003      	add	sp, #12
 8007528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800752c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007530:	e7d5      	b.n	80074de <__d2b+0x2e>
 8007532:	6161      	str	r1, [r4, #20]
 8007534:	e7e5      	b.n	8007502 <__d2b+0x52>
 8007536:	a801      	add	r0, sp, #4
 8007538:	f7ff fd5a 	bl	8006ff0 <__lo0bits>
 800753c:	9b01      	ldr	r3, [sp, #4]
 800753e:	6163      	str	r3, [r4, #20]
 8007540:	2201      	movs	r2, #1
 8007542:	6122      	str	r2, [r4, #16]
 8007544:	3020      	adds	r0, #32
 8007546:	e7e3      	b.n	8007510 <__d2b+0x60>
 8007548:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800754c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007550:	f8c9 0000 	str.w	r0, [r9]
 8007554:	6918      	ldr	r0, [r3, #16]
 8007556:	f7ff fd2b 	bl	8006fb0 <__hi0bits>
 800755a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800755e:	e7df      	b.n	8007520 <__d2b+0x70>
 8007560:	08009b0b 	.word	0x08009b0b
 8007564:	08009aaf 	.word	0x08009aaf

08007568 <_mprec_log10>:
 8007568:	2817      	cmp	r0, #23
 800756a:	b5d0      	push	{r4, r6, r7, lr}
 800756c:	4604      	mov	r4, r0
 800756e:	dc07      	bgt.n	8007580 <_mprec_log10+0x18>
 8007570:	4809      	ldr	r0, [pc, #36]	; (8007598 <_mprec_log10+0x30>)
 8007572:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8007576:	e9d4 0100 	ldrd	r0, r1, [r4]
 800757a:	ec41 0b10 	vmov	d0, r0, r1
 800757e:	bdd0      	pop	{r4, r6, r7, pc}
 8007580:	4906      	ldr	r1, [pc, #24]	; (800759c <_mprec_log10+0x34>)
 8007582:	4f07      	ldr	r7, [pc, #28]	; (80075a0 <_mprec_log10+0x38>)
 8007584:	2000      	movs	r0, #0
 8007586:	2600      	movs	r6, #0
 8007588:	4632      	mov	r2, r6
 800758a:	463b      	mov	r3, r7
 800758c:	f7f9 f854 	bl	8000638 <__aeabi_dmul>
 8007590:	3c01      	subs	r4, #1
 8007592:	d1f9      	bne.n	8007588 <_mprec_log10+0x20>
 8007594:	e7f1      	b.n	800757a <_mprec_log10+0x12>
 8007596:	bf00      	nop
 8007598:	08009b48 	.word	0x08009b48
 800759c:	3ff00000 	.word	0x3ff00000
 80075a0:	40240000 	.word	0x40240000

080075a4 <_calloc_r>:
 80075a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a6:	fba1 2402 	umull	r2, r4, r1, r2
 80075aa:	b94c      	cbnz	r4, 80075c0 <_calloc_r+0x1c>
 80075ac:	4611      	mov	r1, r2
 80075ae:	9201      	str	r2, [sp, #4]
 80075b0:	f000 f82e 	bl	8007610 <_malloc_r>
 80075b4:	9a01      	ldr	r2, [sp, #4]
 80075b6:	4605      	mov	r5, r0
 80075b8:	b930      	cbnz	r0, 80075c8 <_calloc_r+0x24>
 80075ba:	4628      	mov	r0, r5
 80075bc:	b003      	add	sp, #12
 80075be:	bd30      	pop	{r4, r5, pc}
 80075c0:	220c      	movs	r2, #12
 80075c2:	6002      	str	r2, [r0, #0]
 80075c4:	2500      	movs	r5, #0
 80075c6:	e7f8      	b.n	80075ba <_calloc_r+0x16>
 80075c8:	4621      	mov	r1, r4
 80075ca:	f7ff faf9 	bl	8006bc0 <memset>
 80075ce:	e7f4      	b.n	80075ba <_calloc_r+0x16>

080075d0 <sbrk_aligned>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	4e0e      	ldr	r6, [pc, #56]	; (800760c <sbrk_aligned+0x3c>)
 80075d4:	460c      	mov	r4, r1
 80075d6:	6831      	ldr	r1, [r6, #0]
 80075d8:	4605      	mov	r5, r0
 80075da:	b911      	cbnz	r1, 80075e2 <sbrk_aligned+0x12>
 80075dc:	f000 fa20 	bl	8007a20 <_sbrk_r>
 80075e0:	6030      	str	r0, [r6, #0]
 80075e2:	4621      	mov	r1, r4
 80075e4:	4628      	mov	r0, r5
 80075e6:	f000 fa1b 	bl	8007a20 <_sbrk_r>
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	d00a      	beq.n	8007604 <sbrk_aligned+0x34>
 80075ee:	1cc4      	adds	r4, r0, #3
 80075f0:	f024 0403 	bic.w	r4, r4, #3
 80075f4:	42a0      	cmp	r0, r4
 80075f6:	d007      	beq.n	8007608 <sbrk_aligned+0x38>
 80075f8:	1a21      	subs	r1, r4, r0
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 fa10 	bl	8007a20 <_sbrk_r>
 8007600:	3001      	adds	r0, #1
 8007602:	d101      	bne.n	8007608 <sbrk_aligned+0x38>
 8007604:	f04f 34ff 	mov.w	r4, #4294967295
 8007608:	4620      	mov	r0, r4
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	200006cc 	.word	0x200006cc

08007610 <_malloc_r>:
 8007610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007614:	1ccd      	adds	r5, r1, #3
 8007616:	f025 0503 	bic.w	r5, r5, #3
 800761a:	3508      	adds	r5, #8
 800761c:	2d0c      	cmp	r5, #12
 800761e:	bf38      	it	cc
 8007620:	250c      	movcc	r5, #12
 8007622:	2d00      	cmp	r5, #0
 8007624:	4607      	mov	r7, r0
 8007626:	db01      	blt.n	800762c <_malloc_r+0x1c>
 8007628:	42a9      	cmp	r1, r5
 800762a:	d905      	bls.n	8007638 <_malloc_r+0x28>
 800762c:	230c      	movs	r3, #12
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	2600      	movs	r6, #0
 8007632:	4630      	mov	r0, r6
 8007634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007638:	4e2e      	ldr	r6, [pc, #184]	; (80076f4 <_malloc_r+0xe4>)
 800763a:	f001 f8bd 	bl	80087b8 <__malloc_lock>
 800763e:	6833      	ldr	r3, [r6, #0]
 8007640:	461c      	mov	r4, r3
 8007642:	bb34      	cbnz	r4, 8007692 <_malloc_r+0x82>
 8007644:	4629      	mov	r1, r5
 8007646:	4638      	mov	r0, r7
 8007648:	f7ff ffc2 	bl	80075d0 <sbrk_aligned>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	4604      	mov	r4, r0
 8007650:	d14d      	bne.n	80076ee <_malloc_r+0xde>
 8007652:	6834      	ldr	r4, [r6, #0]
 8007654:	4626      	mov	r6, r4
 8007656:	2e00      	cmp	r6, #0
 8007658:	d140      	bne.n	80076dc <_malloc_r+0xcc>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	4631      	mov	r1, r6
 800765e:	4638      	mov	r0, r7
 8007660:	eb04 0803 	add.w	r8, r4, r3
 8007664:	f000 f9dc 	bl	8007a20 <_sbrk_r>
 8007668:	4580      	cmp	r8, r0
 800766a:	d13a      	bne.n	80076e2 <_malloc_r+0xd2>
 800766c:	6821      	ldr	r1, [r4, #0]
 800766e:	3503      	adds	r5, #3
 8007670:	1a6d      	subs	r5, r5, r1
 8007672:	f025 0503 	bic.w	r5, r5, #3
 8007676:	3508      	adds	r5, #8
 8007678:	2d0c      	cmp	r5, #12
 800767a:	bf38      	it	cc
 800767c:	250c      	movcc	r5, #12
 800767e:	4629      	mov	r1, r5
 8007680:	4638      	mov	r0, r7
 8007682:	f7ff ffa5 	bl	80075d0 <sbrk_aligned>
 8007686:	3001      	adds	r0, #1
 8007688:	d02b      	beq.n	80076e2 <_malloc_r+0xd2>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	442b      	add	r3, r5
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	e00e      	b.n	80076b0 <_malloc_r+0xa0>
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	1b52      	subs	r2, r2, r5
 8007696:	d41e      	bmi.n	80076d6 <_malloc_r+0xc6>
 8007698:	2a0b      	cmp	r2, #11
 800769a:	d916      	bls.n	80076ca <_malloc_r+0xba>
 800769c:	1961      	adds	r1, r4, r5
 800769e:	42a3      	cmp	r3, r4
 80076a0:	6025      	str	r5, [r4, #0]
 80076a2:	bf18      	it	ne
 80076a4:	6059      	strne	r1, [r3, #4]
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	bf08      	it	eq
 80076aa:	6031      	streq	r1, [r6, #0]
 80076ac:	5162      	str	r2, [r4, r5]
 80076ae:	604b      	str	r3, [r1, #4]
 80076b0:	4638      	mov	r0, r7
 80076b2:	f104 060b 	add.w	r6, r4, #11
 80076b6:	f001 f885 	bl	80087c4 <__malloc_unlock>
 80076ba:	f026 0607 	bic.w	r6, r6, #7
 80076be:	1d23      	adds	r3, r4, #4
 80076c0:	1af2      	subs	r2, r6, r3
 80076c2:	d0b6      	beq.n	8007632 <_malloc_r+0x22>
 80076c4:	1b9b      	subs	r3, r3, r6
 80076c6:	50a3      	str	r3, [r4, r2]
 80076c8:	e7b3      	b.n	8007632 <_malloc_r+0x22>
 80076ca:	6862      	ldr	r2, [r4, #4]
 80076cc:	42a3      	cmp	r3, r4
 80076ce:	bf0c      	ite	eq
 80076d0:	6032      	streq	r2, [r6, #0]
 80076d2:	605a      	strne	r2, [r3, #4]
 80076d4:	e7ec      	b.n	80076b0 <_malloc_r+0xa0>
 80076d6:	4623      	mov	r3, r4
 80076d8:	6864      	ldr	r4, [r4, #4]
 80076da:	e7b2      	b.n	8007642 <_malloc_r+0x32>
 80076dc:	4634      	mov	r4, r6
 80076de:	6876      	ldr	r6, [r6, #4]
 80076e0:	e7b9      	b.n	8007656 <_malloc_r+0x46>
 80076e2:	230c      	movs	r3, #12
 80076e4:	603b      	str	r3, [r7, #0]
 80076e6:	4638      	mov	r0, r7
 80076e8:	f001 f86c 	bl	80087c4 <__malloc_unlock>
 80076ec:	e7a1      	b.n	8007632 <_malloc_r+0x22>
 80076ee:	6025      	str	r5, [r4, #0]
 80076f0:	e7de      	b.n	80076b0 <_malloc_r+0xa0>
 80076f2:	bf00      	nop
 80076f4:	200006c8 	.word	0x200006c8

080076f8 <_printf_common>:
 80076f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076fc:	4616      	mov	r6, r2
 80076fe:	4699      	mov	r9, r3
 8007700:	688a      	ldr	r2, [r1, #8]
 8007702:	690b      	ldr	r3, [r1, #16]
 8007704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007708:	4293      	cmp	r3, r2
 800770a:	bfb8      	it	lt
 800770c:	4613      	movlt	r3, r2
 800770e:	6033      	str	r3, [r6, #0]
 8007710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007714:	4607      	mov	r7, r0
 8007716:	460c      	mov	r4, r1
 8007718:	b10a      	cbz	r2, 800771e <_printf_common+0x26>
 800771a:	3301      	adds	r3, #1
 800771c:	6033      	str	r3, [r6, #0]
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	0699      	lsls	r1, r3, #26
 8007722:	bf42      	ittt	mi
 8007724:	6833      	ldrmi	r3, [r6, #0]
 8007726:	3302      	addmi	r3, #2
 8007728:	6033      	strmi	r3, [r6, #0]
 800772a:	6825      	ldr	r5, [r4, #0]
 800772c:	f015 0506 	ands.w	r5, r5, #6
 8007730:	d106      	bne.n	8007740 <_printf_common+0x48>
 8007732:	f104 0a19 	add.w	sl, r4, #25
 8007736:	68e3      	ldr	r3, [r4, #12]
 8007738:	6832      	ldr	r2, [r6, #0]
 800773a:	1a9b      	subs	r3, r3, r2
 800773c:	42ab      	cmp	r3, r5
 800773e:	dc26      	bgt.n	800778e <_printf_common+0x96>
 8007740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007744:	1e13      	subs	r3, r2, #0
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	bf18      	it	ne
 800774a:	2301      	movne	r3, #1
 800774c:	0692      	lsls	r2, r2, #26
 800774e:	d42b      	bmi.n	80077a8 <_printf_common+0xb0>
 8007750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007754:	4649      	mov	r1, r9
 8007756:	4638      	mov	r0, r7
 8007758:	47c0      	blx	r8
 800775a:	3001      	adds	r0, #1
 800775c:	d01e      	beq.n	800779c <_printf_common+0xa4>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	68e5      	ldr	r5, [r4, #12]
 8007762:	6832      	ldr	r2, [r6, #0]
 8007764:	f003 0306 	and.w	r3, r3, #6
 8007768:	2b04      	cmp	r3, #4
 800776a:	bf08      	it	eq
 800776c:	1aad      	subeq	r5, r5, r2
 800776e:	68a3      	ldr	r3, [r4, #8]
 8007770:	6922      	ldr	r2, [r4, #16]
 8007772:	bf0c      	ite	eq
 8007774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007778:	2500      	movne	r5, #0
 800777a:	4293      	cmp	r3, r2
 800777c:	bfc4      	itt	gt
 800777e:	1a9b      	subgt	r3, r3, r2
 8007780:	18ed      	addgt	r5, r5, r3
 8007782:	2600      	movs	r6, #0
 8007784:	341a      	adds	r4, #26
 8007786:	42b5      	cmp	r5, r6
 8007788:	d11a      	bne.n	80077c0 <_printf_common+0xc8>
 800778a:	2000      	movs	r0, #0
 800778c:	e008      	b.n	80077a0 <_printf_common+0xa8>
 800778e:	2301      	movs	r3, #1
 8007790:	4652      	mov	r2, sl
 8007792:	4649      	mov	r1, r9
 8007794:	4638      	mov	r0, r7
 8007796:	47c0      	blx	r8
 8007798:	3001      	adds	r0, #1
 800779a:	d103      	bne.n	80077a4 <_printf_common+0xac>
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a4:	3501      	adds	r5, #1
 80077a6:	e7c6      	b.n	8007736 <_printf_common+0x3e>
 80077a8:	18e1      	adds	r1, r4, r3
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	2030      	movs	r0, #48	; 0x30
 80077ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077b2:	4422      	add	r2, r4
 80077b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077bc:	3302      	adds	r3, #2
 80077be:	e7c7      	b.n	8007750 <_printf_common+0x58>
 80077c0:	2301      	movs	r3, #1
 80077c2:	4622      	mov	r2, r4
 80077c4:	4649      	mov	r1, r9
 80077c6:	4638      	mov	r0, r7
 80077c8:	47c0      	blx	r8
 80077ca:	3001      	adds	r0, #1
 80077cc:	d0e6      	beq.n	800779c <_printf_common+0xa4>
 80077ce:	3601      	adds	r6, #1
 80077d0:	e7d9      	b.n	8007786 <_printf_common+0x8e>
	...

080077d4 <_printf_i>:
 80077d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	7e0f      	ldrb	r7, [r1, #24]
 80077da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077dc:	2f78      	cmp	r7, #120	; 0x78
 80077de:	4691      	mov	r9, r2
 80077e0:	4680      	mov	r8, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	469a      	mov	sl, r3
 80077e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077ea:	d807      	bhi.n	80077fc <_printf_i+0x28>
 80077ec:	2f62      	cmp	r7, #98	; 0x62
 80077ee:	d80a      	bhi.n	8007806 <_printf_i+0x32>
 80077f0:	2f00      	cmp	r7, #0
 80077f2:	f000 80d8 	beq.w	80079a6 <_printf_i+0x1d2>
 80077f6:	2f58      	cmp	r7, #88	; 0x58
 80077f8:	f000 80a3 	beq.w	8007942 <_printf_i+0x16e>
 80077fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007804:	e03a      	b.n	800787c <_printf_i+0xa8>
 8007806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800780a:	2b15      	cmp	r3, #21
 800780c:	d8f6      	bhi.n	80077fc <_printf_i+0x28>
 800780e:	a101      	add	r1, pc, #4	; (adr r1, 8007814 <_printf_i+0x40>)
 8007810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007814:	0800786d 	.word	0x0800786d
 8007818:	08007881 	.word	0x08007881
 800781c:	080077fd 	.word	0x080077fd
 8007820:	080077fd 	.word	0x080077fd
 8007824:	080077fd 	.word	0x080077fd
 8007828:	080077fd 	.word	0x080077fd
 800782c:	08007881 	.word	0x08007881
 8007830:	080077fd 	.word	0x080077fd
 8007834:	080077fd 	.word	0x080077fd
 8007838:	080077fd 	.word	0x080077fd
 800783c:	080077fd 	.word	0x080077fd
 8007840:	0800798d 	.word	0x0800798d
 8007844:	080078b1 	.word	0x080078b1
 8007848:	0800796f 	.word	0x0800796f
 800784c:	080077fd 	.word	0x080077fd
 8007850:	080077fd 	.word	0x080077fd
 8007854:	080079af 	.word	0x080079af
 8007858:	080077fd 	.word	0x080077fd
 800785c:	080078b1 	.word	0x080078b1
 8007860:	080077fd 	.word	0x080077fd
 8007864:	080077fd 	.word	0x080077fd
 8007868:	08007977 	.word	0x08007977
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	1d1a      	adds	r2, r3, #4
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	602a      	str	r2, [r5, #0]
 8007874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800787c:	2301      	movs	r3, #1
 800787e:	e0a3      	b.n	80079c8 <_printf_i+0x1f4>
 8007880:	6820      	ldr	r0, [r4, #0]
 8007882:	6829      	ldr	r1, [r5, #0]
 8007884:	0606      	lsls	r6, r0, #24
 8007886:	f101 0304 	add.w	r3, r1, #4
 800788a:	d50a      	bpl.n	80078a2 <_printf_i+0xce>
 800788c:	680e      	ldr	r6, [r1, #0]
 800788e:	602b      	str	r3, [r5, #0]
 8007890:	2e00      	cmp	r6, #0
 8007892:	da03      	bge.n	800789c <_printf_i+0xc8>
 8007894:	232d      	movs	r3, #45	; 0x2d
 8007896:	4276      	negs	r6, r6
 8007898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800789c:	485e      	ldr	r0, [pc, #376]	; (8007a18 <_printf_i+0x244>)
 800789e:	230a      	movs	r3, #10
 80078a0:	e019      	b.n	80078d6 <_printf_i+0x102>
 80078a2:	680e      	ldr	r6, [r1, #0]
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078aa:	bf18      	it	ne
 80078ac:	b236      	sxthne	r6, r6
 80078ae:	e7ef      	b.n	8007890 <_printf_i+0xbc>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	6820      	ldr	r0, [r4, #0]
 80078b4:	1d19      	adds	r1, r3, #4
 80078b6:	6029      	str	r1, [r5, #0]
 80078b8:	0601      	lsls	r1, r0, #24
 80078ba:	d501      	bpl.n	80078c0 <_printf_i+0xec>
 80078bc:	681e      	ldr	r6, [r3, #0]
 80078be:	e002      	b.n	80078c6 <_printf_i+0xf2>
 80078c0:	0646      	lsls	r6, r0, #25
 80078c2:	d5fb      	bpl.n	80078bc <_printf_i+0xe8>
 80078c4:	881e      	ldrh	r6, [r3, #0]
 80078c6:	4854      	ldr	r0, [pc, #336]	; (8007a18 <_printf_i+0x244>)
 80078c8:	2f6f      	cmp	r7, #111	; 0x6f
 80078ca:	bf0c      	ite	eq
 80078cc:	2308      	moveq	r3, #8
 80078ce:	230a      	movne	r3, #10
 80078d0:	2100      	movs	r1, #0
 80078d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078d6:	6865      	ldr	r5, [r4, #4]
 80078d8:	60a5      	str	r5, [r4, #8]
 80078da:	2d00      	cmp	r5, #0
 80078dc:	bfa2      	ittt	ge
 80078de:	6821      	ldrge	r1, [r4, #0]
 80078e0:	f021 0104 	bicge.w	r1, r1, #4
 80078e4:	6021      	strge	r1, [r4, #0]
 80078e6:	b90e      	cbnz	r6, 80078ec <_printf_i+0x118>
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	d04d      	beq.n	8007988 <_printf_i+0x1b4>
 80078ec:	4615      	mov	r5, r2
 80078ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80078f2:	fb03 6711 	mls	r7, r3, r1, r6
 80078f6:	5dc7      	ldrb	r7, [r0, r7]
 80078f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078fc:	4637      	mov	r7, r6
 80078fe:	42bb      	cmp	r3, r7
 8007900:	460e      	mov	r6, r1
 8007902:	d9f4      	bls.n	80078ee <_printf_i+0x11a>
 8007904:	2b08      	cmp	r3, #8
 8007906:	d10b      	bne.n	8007920 <_printf_i+0x14c>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	07de      	lsls	r6, r3, #31
 800790c:	d508      	bpl.n	8007920 <_printf_i+0x14c>
 800790e:	6923      	ldr	r3, [r4, #16]
 8007910:	6861      	ldr	r1, [r4, #4]
 8007912:	4299      	cmp	r1, r3
 8007914:	bfde      	ittt	le
 8007916:	2330      	movle	r3, #48	; 0x30
 8007918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800791c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007920:	1b52      	subs	r2, r2, r5
 8007922:	6122      	str	r2, [r4, #16]
 8007924:	f8cd a000 	str.w	sl, [sp]
 8007928:	464b      	mov	r3, r9
 800792a:	aa03      	add	r2, sp, #12
 800792c:	4621      	mov	r1, r4
 800792e:	4640      	mov	r0, r8
 8007930:	f7ff fee2 	bl	80076f8 <_printf_common>
 8007934:	3001      	adds	r0, #1
 8007936:	d14c      	bne.n	80079d2 <_printf_i+0x1fe>
 8007938:	f04f 30ff 	mov.w	r0, #4294967295
 800793c:	b004      	add	sp, #16
 800793e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007942:	4835      	ldr	r0, [pc, #212]	; (8007a18 <_printf_i+0x244>)
 8007944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007948:	6829      	ldr	r1, [r5, #0]
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007950:	6029      	str	r1, [r5, #0]
 8007952:	061d      	lsls	r5, r3, #24
 8007954:	d514      	bpl.n	8007980 <_printf_i+0x1ac>
 8007956:	07df      	lsls	r7, r3, #31
 8007958:	bf44      	itt	mi
 800795a:	f043 0320 	orrmi.w	r3, r3, #32
 800795e:	6023      	strmi	r3, [r4, #0]
 8007960:	b91e      	cbnz	r6, 800796a <_printf_i+0x196>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	f023 0320 	bic.w	r3, r3, #32
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	2310      	movs	r3, #16
 800796c:	e7b0      	b.n	80078d0 <_printf_i+0xfc>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	f043 0320 	orr.w	r3, r3, #32
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	2378      	movs	r3, #120	; 0x78
 8007978:	4828      	ldr	r0, [pc, #160]	; (8007a1c <_printf_i+0x248>)
 800797a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800797e:	e7e3      	b.n	8007948 <_printf_i+0x174>
 8007980:	0659      	lsls	r1, r3, #25
 8007982:	bf48      	it	mi
 8007984:	b2b6      	uxthmi	r6, r6
 8007986:	e7e6      	b.n	8007956 <_printf_i+0x182>
 8007988:	4615      	mov	r5, r2
 800798a:	e7bb      	b.n	8007904 <_printf_i+0x130>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	6826      	ldr	r6, [r4, #0]
 8007990:	6961      	ldr	r1, [r4, #20]
 8007992:	1d18      	adds	r0, r3, #4
 8007994:	6028      	str	r0, [r5, #0]
 8007996:	0635      	lsls	r5, r6, #24
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	d501      	bpl.n	80079a0 <_printf_i+0x1cc>
 800799c:	6019      	str	r1, [r3, #0]
 800799e:	e002      	b.n	80079a6 <_printf_i+0x1d2>
 80079a0:	0670      	lsls	r0, r6, #25
 80079a2:	d5fb      	bpl.n	800799c <_printf_i+0x1c8>
 80079a4:	8019      	strh	r1, [r3, #0]
 80079a6:	2300      	movs	r3, #0
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	4615      	mov	r5, r2
 80079ac:	e7ba      	b.n	8007924 <_printf_i+0x150>
 80079ae:	682b      	ldr	r3, [r5, #0]
 80079b0:	1d1a      	adds	r2, r3, #4
 80079b2:	602a      	str	r2, [r5, #0]
 80079b4:	681d      	ldr	r5, [r3, #0]
 80079b6:	6862      	ldr	r2, [r4, #4]
 80079b8:	2100      	movs	r1, #0
 80079ba:	4628      	mov	r0, r5
 80079bc:	f7f8 fc30 	bl	8000220 <memchr>
 80079c0:	b108      	cbz	r0, 80079c6 <_printf_i+0x1f2>
 80079c2:	1b40      	subs	r0, r0, r5
 80079c4:	6060      	str	r0, [r4, #4]
 80079c6:	6863      	ldr	r3, [r4, #4]
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	2300      	movs	r3, #0
 80079cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079d0:	e7a8      	b.n	8007924 <_printf_i+0x150>
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	462a      	mov	r2, r5
 80079d6:	4649      	mov	r1, r9
 80079d8:	4640      	mov	r0, r8
 80079da:	47d0      	blx	sl
 80079dc:	3001      	adds	r0, #1
 80079de:	d0ab      	beq.n	8007938 <_printf_i+0x164>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	079b      	lsls	r3, r3, #30
 80079e4:	d413      	bmi.n	8007a0e <_printf_i+0x23a>
 80079e6:	68e0      	ldr	r0, [r4, #12]
 80079e8:	9b03      	ldr	r3, [sp, #12]
 80079ea:	4298      	cmp	r0, r3
 80079ec:	bfb8      	it	lt
 80079ee:	4618      	movlt	r0, r3
 80079f0:	e7a4      	b.n	800793c <_printf_i+0x168>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4632      	mov	r2, r6
 80079f6:	4649      	mov	r1, r9
 80079f8:	4640      	mov	r0, r8
 80079fa:	47d0      	blx	sl
 80079fc:	3001      	adds	r0, #1
 80079fe:	d09b      	beq.n	8007938 <_printf_i+0x164>
 8007a00:	3501      	adds	r5, #1
 8007a02:	68e3      	ldr	r3, [r4, #12]
 8007a04:	9903      	ldr	r1, [sp, #12]
 8007a06:	1a5b      	subs	r3, r3, r1
 8007a08:	42ab      	cmp	r3, r5
 8007a0a:	dcf2      	bgt.n	80079f2 <_printf_i+0x21e>
 8007a0c:	e7eb      	b.n	80079e6 <_printf_i+0x212>
 8007a0e:	2500      	movs	r5, #0
 8007a10:	f104 0619 	add.w	r6, r4, #25
 8007a14:	e7f5      	b.n	8007a02 <_printf_i+0x22e>
 8007a16:	bf00      	nop
 8007a18:	08009c1c 	.word	0x08009c1c
 8007a1c:	08009c2d 	.word	0x08009c2d

08007a20 <_sbrk_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d06      	ldr	r5, [pc, #24]	; (8007a3c <_sbrk_r+0x1c>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	f7fa fa8a 	bl	8001f44 <_sbrk>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_sbrk_r+0x1a>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_sbrk_r+0x1a>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	200006d0 	.word	0x200006d0

08007a40 <strcpy>:
 8007a40:	4603      	mov	r3, r0
 8007a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a46:	f803 2b01 	strb.w	r2, [r3], #1
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	d1f9      	bne.n	8007a42 <strcpy+0x2>
 8007a4e:	4770      	bx	lr

08007a50 <__assert_func>:
 8007a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a52:	4614      	mov	r4, r2
 8007a54:	461a      	mov	r2, r3
 8007a56:	4b09      	ldr	r3, [pc, #36]	; (8007a7c <__assert_func+0x2c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	68d8      	ldr	r0, [r3, #12]
 8007a5e:	b14c      	cbz	r4, 8007a74 <__assert_func+0x24>
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <__assert_func+0x30>)
 8007a62:	9100      	str	r1, [sp, #0]
 8007a64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a68:	4906      	ldr	r1, [pc, #24]	; (8007a84 <__assert_func+0x34>)
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	f000 fe8a 	bl	8008784 <fiprintf>
 8007a70:	f001 f914 	bl	8008c9c <abort>
 8007a74:	4b04      	ldr	r3, [pc, #16]	; (8007a88 <__assert_func+0x38>)
 8007a76:	461c      	mov	r4, r3
 8007a78:	e7f3      	b.n	8007a62 <__assert_func+0x12>
 8007a7a:	bf00      	nop
 8007a7c:	20000014 	.word	0x20000014
 8007a80:	08009c3e 	.word	0x08009c3e
 8007a84:	08009c4b 	.word	0x08009c4b
 8007a88:	08009c79 	.word	0x08009c79

08007a8c <quorem>:
 8007a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a90:	6903      	ldr	r3, [r0, #16]
 8007a92:	690c      	ldr	r4, [r1, #16]
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	4607      	mov	r7, r0
 8007a98:	f2c0 8081 	blt.w	8007b9e <quorem+0x112>
 8007a9c:	3c01      	subs	r4, #1
 8007a9e:	f101 0814 	add.w	r8, r1, #20
 8007aa2:	f100 0514 	add.w	r5, r0, #20
 8007aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007abc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ac0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ac4:	d331      	bcc.n	8007b2a <quorem+0x9e>
 8007ac6:	f04f 0e00 	mov.w	lr, #0
 8007aca:	4640      	mov	r0, r8
 8007acc:	46ac      	mov	ip, r5
 8007ace:	46f2      	mov	sl, lr
 8007ad0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ad4:	b293      	uxth	r3, r2
 8007ad6:	fb06 e303 	mla	r3, r6, r3, lr
 8007ada:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	ebaa 0303 	sub.w	r3, sl, r3
 8007ae4:	f8dc a000 	ldr.w	sl, [ip]
 8007ae8:	0c12      	lsrs	r2, r2, #16
 8007aea:	fa13 f38a 	uxtah	r3, r3, sl
 8007aee:	fb06 e202 	mla	r2, r6, r2, lr
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	9b00      	ldr	r3, [sp, #0]
 8007af6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007afa:	b292      	uxth	r2, r2
 8007afc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b04:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b08:	4581      	cmp	r9, r0
 8007b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b0e:	f84c 3b04 	str.w	r3, [ip], #4
 8007b12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b16:	d2db      	bcs.n	8007ad0 <quorem+0x44>
 8007b18:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b1c:	b92b      	cbnz	r3, 8007b2a <quorem+0x9e>
 8007b1e:	9b01      	ldr	r3, [sp, #4]
 8007b20:	3b04      	subs	r3, #4
 8007b22:	429d      	cmp	r5, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	d32e      	bcc.n	8007b86 <quorem+0xfa>
 8007b28:	613c      	str	r4, [r7, #16]
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	f7ff fc1a 	bl	8007364 <__mcmp>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	db24      	blt.n	8007b7e <quorem+0xf2>
 8007b34:	3601      	adds	r6, #1
 8007b36:	4628      	mov	r0, r5
 8007b38:	f04f 0c00 	mov.w	ip, #0
 8007b3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b40:	f8d0 e000 	ldr.w	lr, [r0]
 8007b44:	b293      	uxth	r3, r2
 8007b46:	ebac 0303 	sub.w	r3, ip, r3
 8007b4a:	0c12      	lsrs	r2, r2, #16
 8007b4c:	fa13 f38e 	uxtah	r3, r3, lr
 8007b50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b5e:	45c1      	cmp	r9, r8
 8007b60:	f840 3b04 	str.w	r3, [r0], #4
 8007b64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b68:	d2e8      	bcs.n	8007b3c <quorem+0xb0>
 8007b6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b72:	b922      	cbnz	r2, 8007b7e <quorem+0xf2>
 8007b74:	3b04      	subs	r3, #4
 8007b76:	429d      	cmp	r5, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	d30a      	bcc.n	8007b92 <quorem+0x106>
 8007b7c:	613c      	str	r4, [r7, #16]
 8007b7e:	4630      	mov	r0, r6
 8007b80:	b003      	add	sp, #12
 8007b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b86:	6812      	ldr	r2, [r2, #0]
 8007b88:	3b04      	subs	r3, #4
 8007b8a:	2a00      	cmp	r2, #0
 8007b8c:	d1cc      	bne.n	8007b28 <quorem+0x9c>
 8007b8e:	3c01      	subs	r4, #1
 8007b90:	e7c7      	b.n	8007b22 <quorem+0x96>
 8007b92:	6812      	ldr	r2, [r2, #0]
 8007b94:	3b04      	subs	r3, #4
 8007b96:	2a00      	cmp	r2, #0
 8007b98:	d1f0      	bne.n	8007b7c <quorem+0xf0>
 8007b9a:	3c01      	subs	r4, #1
 8007b9c:	e7eb      	b.n	8007b76 <quorem+0xea>
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	e7ee      	b.n	8007b80 <quorem+0xf4>
 8007ba2:	0000      	movs	r0, r0
 8007ba4:	0000      	movs	r0, r0
	...

08007ba8 <_dtoa_r>:
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	ed2d 8b04 	vpush	{d8-d9}
 8007bb0:	ec57 6b10 	vmov	r6, r7, d0
 8007bb4:	b093      	sub	sp, #76	; 0x4c
 8007bb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bbc:	9106      	str	r1, [sp, #24]
 8007bbe:	ee10 aa10 	vmov	sl, s0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8007bc8:	46bb      	mov	fp, r7
 8007bca:	b975      	cbnz	r5, 8007bea <_dtoa_r+0x42>
 8007bcc:	2010      	movs	r0, #16
 8007bce:	f000 fdeb 	bl	80087a8 <malloc>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	6260      	str	r0, [r4, #36]	; 0x24
 8007bd6:	b920      	cbnz	r0, 8007be2 <_dtoa_r+0x3a>
 8007bd8:	4ba7      	ldr	r3, [pc, #668]	; (8007e78 <_dtoa_r+0x2d0>)
 8007bda:	21ea      	movs	r1, #234	; 0xea
 8007bdc:	48a7      	ldr	r0, [pc, #668]	; (8007e7c <_dtoa_r+0x2d4>)
 8007bde:	f7ff ff37 	bl	8007a50 <__assert_func>
 8007be2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007be6:	6005      	str	r5, [r0, #0]
 8007be8:	60c5      	str	r5, [r0, #12]
 8007bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bec:	6819      	ldr	r1, [r3, #0]
 8007bee:	b151      	cbz	r1, 8007c06 <_dtoa_r+0x5e>
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	604a      	str	r2, [r1, #4]
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	4093      	lsls	r3, r2
 8007bf8:	608b      	str	r3, [r1, #8]
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f7ff f970 	bl	8006ee0 <_Bfree>
 8007c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	1e3b      	subs	r3, r7, #0
 8007c08:	bfaa      	itet	ge
 8007c0a:	2300      	movge	r3, #0
 8007c0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c10:	f8c8 3000 	strge.w	r3, [r8]
 8007c14:	4b9a      	ldr	r3, [pc, #616]	; (8007e80 <_dtoa_r+0x2d8>)
 8007c16:	bfbc      	itt	lt
 8007c18:	2201      	movlt	r2, #1
 8007c1a:	f8c8 2000 	strlt.w	r2, [r8]
 8007c1e:	ea33 030b 	bics.w	r3, r3, fp
 8007c22:	d11b      	bne.n	8007c5c <_dtoa_r+0xb4>
 8007c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c26:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c30:	4333      	orrs	r3, r6
 8007c32:	f000 8592 	beq.w	800875a <_dtoa_r+0xbb2>
 8007c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c38:	b963      	cbnz	r3, 8007c54 <_dtoa_r+0xac>
 8007c3a:	4b92      	ldr	r3, [pc, #584]	; (8007e84 <_dtoa_r+0x2dc>)
 8007c3c:	e022      	b.n	8007c84 <_dtoa_r+0xdc>
 8007c3e:	4b92      	ldr	r3, [pc, #584]	; (8007e88 <_dtoa_r+0x2e0>)
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	3308      	adds	r3, #8
 8007c44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	9801      	ldr	r0, [sp, #4]
 8007c4a:	b013      	add	sp, #76	; 0x4c
 8007c4c:	ecbd 8b04 	vpop	{d8-d9}
 8007c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c54:	4b8b      	ldr	r3, [pc, #556]	; (8007e84 <_dtoa_r+0x2dc>)
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	3303      	adds	r3, #3
 8007c5a:	e7f3      	b.n	8007c44 <_dtoa_r+0x9c>
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4650      	mov	r0, sl
 8007c62:	4659      	mov	r1, fp
 8007c64:	f7f8 ff50 	bl	8000b08 <__aeabi_dcmpeq>
 8007c68:	ec4b ab19 	vmov	d9, sl, fp
 8007c6c:	4680      	mov	r8, r0
 8007c6e:	b158      	cbz	r0, 8007c88 <_dtoa_r+0xe0>
 8007c70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c72:	2301      	movs	r3, #1
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 856b 	beq.w	8008754 <_dtoa_r+0xbac>
 8007c7e:	4883      	ldr	r0, [pc, #524]	; (8007e8c <_dtoa_r+0x2e4>)
 8007c80:	6018      	str	r0, [r3, #0]
 8007c82:	1e43      	subs	r3, r0, #1
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	e7df      	b.n	8007c48 <_dtoa_r+0xa0>
 8007c88:	ec4b ab10 	vmov	d0, sl, fp
 8007c8c:	aa10      	add	r2, sp, #64	; 0x40
 8007c8e:	a911      	add	r1, sp, #68	; 0x44
 8007c90:	4620      	mov	r0, r4
 8007c92:	f7ff fc0d 	bl	80074b0 <__d2b>
 8007c96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c9a:	ee08 0a10 	vmov	s16, r0
 8007c9e:	2d00      	cmp	r5, #0
 8007ca0:	f000 8084 	beq.w	8007dac <_dtoa_r+0x204>
 8007ca4:	ee19 3a90 	vmov	r3, s19
 8007ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007cb0:	4656      	mov	r6, sl
 8007cb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007cba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007cbe:	4b74      	ldr	r3, [pc, #464]	; (8007e90 <_dtoa_r+0x2e8>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	f7f8 faff 	bl	80002c8 <__aeabi_dsub>
 8007cca:	a365      	add	r3, pc, #404	; (adr r3, 8007e60 <_dtoa_r+0x2b8>)
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f7f8 fcb2 	bl	8000638 <__aeabi_dmul>
 8007cd4:	a364      	add	r3, pc, #400	; (adr r3, 8007e68 <_dtoa_r+0x2c0>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f7f8 faf7 	bl	80002cc <__adddf3>
 8007cde:	4606      	mov	r6, r0
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	460f      	mov	r7, r1
 8007ce4:	f7f8 fc3e 	bl	8000564 <__aeabi_i2d>
 8007ce8:	a361      	add	r3, pc, #388	; (adr r3, 8007e70 <_dtoa_r+0x2c8>)
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f7f8 fca3 	bl	8000638 <__aeabi_dmul>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	f7f8 fae7 	bl	80002cc <__adddf3>
 8007cfe:	4606      	mov	r6, r0
 8007d00:	460f      	mov	r7, r1
 8007d02:	f7f8 ff33 	bl	8000b6c <__aeabi_d2iz>
 8007d06:	2200      	movs	r2, #0
 8007d08:	9000      	str	r0, [sp, #0]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	4639      	mov	r1, r7
 8007d10:	f7f8 ff04 	bl	8000b1c <__aeabi_dcmplt>
 8007d14:	b150      	cbz	r0, 8007d2c <_dtoa_r+0x184>
 8007d16:	9800      	ldr	r0, [sp, #0]
 8007d18:	f7f8 fc24 	bl	8000564 <__aeabi_i2d>
 8007d1c:	4632      	mov	r2, r6
 8007d1e:	463b      	mov	r3, r7
 8007d20:	f7f8 fef2 	bl	8000b08 <__aeabi_dcmpeq>
 8007d24:	b910      	cbnz	r0, 8007d2c <_dtoa_r+0x184>
 8007d26:	9b00      	ldr	r3, [sp, #0]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	9b00      	ldr	r3, [sp, #0]
 8007d2e:	2b16      	cmp	r3, #22
 8007d30:	d85a      	bhi.n	8007de8 <_dtoa_r+0x240>
 8007d32:	9a00      	ldr	r2, [sp, #0]
 8007d34:	4b57      	ldr	r3, [pc, #348]	; (8007e94 <_dtoa_r+0x2ec>)
 8007d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	ec51 0b19 	vmov	r0, r1, d9
 8007d42:	f7f8 feeb 	bl	8000b1c <__aeabi_dcmplt>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d050      	beq.n	8007dec <_dtoa_r+0x244>
 8007d4a:	9b00      	ldr	r3, [sp, #0]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	2300      	movs	r3, #0
 8007d52:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d56:	1b5d      	subs	r5, r3, r5
 8007d58:	1e6b      	subs	r3, r5, #1
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	bf45      	ittet	mi
 8007d5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d62:	9304      	strmi	r3, [sp, #16]
 8007d64:	2300      	movpl	r3, #0
 8007d66:	2300      	movmi	r3, #0
 8007d68:	bf4c      	ite	mi
 8007d6a:	9305      	strmi	r3, [sp, #20]
 8007d6c:	9304      	strpl	r3, [sp, #16]
 8007d6e:	9b00      	ldr	r3, [sp, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	db3d      	blt.n	8007df0 <_dtoa_r+0x248>
 8007d74:	9b05      	ldr	r3, [sp, #20]
 8007d76:	9a00      	ldr	r2, [sp, #0]
 8007d78:	920a      	str	r2, [sp, #40]	; 0x28
 8007d7a:	4413      	add	r3, r2
 8007d7c:	9305      	str	r3, [sp, #20]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9307      	str	r3, [sp, #28]
 8007d82:	9b06      	ldr	r3, [sp, #24]
 8007d84:	2b09      	cmp	r3, #9
 8007d86:	f200 8089 	bhi.w	8007e9c <_dtoa_r+0x2f4>
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	bfc4      	itt	gt
 8007d8e:	3b04      	subgt	r3, #4
 8007d90:	9306      	strgt	r3, [sp, #24]
 8007d92:	9b06      	ldr	r3, [sp, #24]
 8007d94:	f1a3 0302 	sub.w	r3, r3, #2
 8007d98:	bfcc      	ite	gt
 8007d9a:	2500      	movgt	r5, #0
 8007d9c:	2501      	movle	r5, #1
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	f200 8087 	bhi.w	8007eb2 <_dtoa_r+0x30a>
 8007da4:	e8df f003 	tbb	[pc, r3]
 8007da8:	59383a2d 	.word	0x59383a2d
 8007dac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007db0:	441d      	add	r5, r3
 8007db2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	bfc1      	itttt	gt
 8007dba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007dc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007dc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007dca:	bfda      	itte	le
 8007dcc:	f1c3 0320 	rsble	r3, r3, #32
 8007dd0:	fa06 f003 	lslle.w	r0, r6, r3
 8007dd4:	4318      	orrgt	r0, r3
 8007dd6:	f7f8 fbb5 	bl	8000544 <__aeabi_ui2d>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4606      	mov	r6, r0
 8007dde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007de2:	3d01      	subs	r5, #1
 8007de4:	930e      	str	r3, [sp, #56]	; 0x38
 8007de6:	e76a      	b.n	8007cbe <_dtoa_r+0x116>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e7b2      	b.n	8007d52 <_dtoa_r+0x1aa>
 8007dec:	900b      	str	r0, [sp, #44]	; 0x2c
 8007dee:	e7b1      	b.n	8007d54 <_dtoa_r+0x1ac>
 8007df0:	9b04      	ldr	r3, [sp, #16]
 8007df2:	9a00      	ldr	r2, [sp, #0]
 8007df4:	1a9b      	subs	r3, r3, r2
 8007df6:	9304      	str	r3, [sp, #16]
 8007df8:	4253      	negs	r3, r2
 8007dfa:	9307      	str	r3, [sp, #28]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8007e00:	e7bf      	b.n	8007d82 <_dtoa_r+0x1da>
 8007e02:	2300      	movs	r3, #0
 8007e04:	9308      	str	r3, [sp, #32]
 8007e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc55      	bgt.n	8007eb8 <_dtoa_r+0x310>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e12:	461a      	mov	r2, r3
 8007e14:	9209      	str	r2, [sp, #36]	; 0x24
 8007e16:	e00c      	b.n	8007e32 <_dtoa_r+0x28a>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e7f3      	b.n	8007e04 <_dtoa_r+0x25c>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e20:	9308      	str	r3, [sp, #32]
 8007e22:	9b00      	ldr	r3, [sp, #0]
 8007e24:	4413      	add	r3, r2
 8007e26:	9302      	str	r3, [sp, #8]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	9303      	str	r3, [sp, #12]
 8007e2e:	bfb8      	it	lt
 8007e30:	2301      	movlt	r3, #1
 8007e32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e34:	2200      	movs	r2, #0
 8007e36:	6042      	str	r2, [r0, #4]
 8007e38:	2204      	movs	r2, #4
 8007e3a:	f102 0614 	add.w	r6, r2, #20
 8007e3e:	429e      	cmp	r6, r3
 8007e40:	6841      	ldr	r1, [r0, #4]
 8007e42:	d93d      	bls.n	8007ec0 <_dtoa_r+0x318>
 8007e44:	4620      	mov	r0, r4
 8007e46:	f7ff f80b 	bl	8006e60 <_Balloc>
 8007e4a:	9001      	str	r0, [sp, #4]
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d13b      	bne.n	8007ec8 <_dtoa_r+0x320>
 8007e50:	4b11      	ldr	r3, [pc, #68]	; (8007e98 <_dtoa_r+0x2f0>)
 8007e52:	4602      	mov	r2, r0
 8007e54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e58:	e6c0      	b.n	8007bdc <_dtoa_r+0x34>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e7df      	b.n	8007e1e <_dtoa_r+0x276>
 8007e5e:	bf00      	nop
 8007e60:	636f4361 	.word	0x636f4361
 8007e64:	3fd287a7 	.word	0x3fd287a7
 8007e68:	8b60c8b3 	.word	0x8b60c8b3
 8007e6c:	3fc68a28 	.word	0x3fc68a28
 8007e70:	509f79fb 	.word	0x509f79fb
 8007e74:	3fd34413 	.word	0x3fd34413
 8007e78:	08009a98 	.word	0x08009a98
 8007e7c:	08009c89 	.word	0x08009c89
 8007e80:	7ff00000 	.word	0x7ff00000
 8007e84:	08009c83 	.word	0x08009c83
 8007e88:	08009c7a 	.word	0x08009c7a
 8007e8c:	08009c88 	.word	0x08009c88
 8007e90:	3ff80000 	.word	0x3ff80000
 8007e94:	08009b48 	.word	0x08009b48
 8007e98:	08009b0b 	.word	0x08009b0b
 8007e9c:	2501      	movs	r5, #1
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9306      	str	r3, [sp, #24]
 8007ea2:	9508      	str	r5, [sp, #32]
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007eac:	2200      	movs	r2, #0
 8007eae:	2312      	movs	r3, #18
 8007eb0:	e7b0      	b.n	8007e14 <_dtoa_r+0x26c>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	9308      	str	r3, [sp, #32]
 8007eb6:	e7f5      	b.n	8007ea4 <_dtoa_r+0x2fc>
 8007eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ebe:	e7b8      	b.n	8007e32 <_dtoa_r+0x28a>
 8007ec0:	3101      	adds	r1, #1
 8007ec2:	6041      	str	r1, [r0, #4]
 8007ec4:	0052      	lsls	r2, r2, #1
 8007ec6:	e7b8      	b.n	8007e3a <_dtoa_r+0x292>
 8007ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eca:	9a01      	ldr	r2, [sp, #4]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	9b03      	ldr	r3, [sp, #12]
 8007ed0:	2b0e      	cmp	r3, #14
 8007ed2:	f200 809d 	bhi.w	8008010 <_dtoa_r+0x468>
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	f000 809a 	beq.w	8008010 <_dtoa_r+0x468>
 8007edc:	9b00      	ldr	r3, [sp, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dd32      	ble.n	8007f48 <_dtoa_r+0x3a0>
 8007ee2:	4ab7      	ldr	r2, [pc, #732]	; (80081c0 <_dtoa_r+0x618>)
 8007ee4:	f003 030f 	and.w	r3, r3, #15
 8007ee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007eec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ef0:	9b00      	ldr	r3, [sp, #0]
 8007ef2:	05d8      	lsls	r0, r3, #23
 8007ef4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ef8:	d516      	bpl.n	8007f28 <_dtoa_r+0x380>
 8007efa:	4bb2      	ldr	r3, [pc, #712]	; (80081c4 <_dtoa_r+0x61c>)
 8007efc:	ec51 0b19 	vmov	r0, r1, d9
 8007f00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f04:	f7f8 fcc2 	bl	800088c <__aeabi_ddiv>
 8007f08:	f007 070f 	and.w	r7, r7, #15
 8007f0c:	4682      	mov	sl, r0
 8007f0e:	468b      	mov	fp, r1
 8007f10:	2503      	movs	r5, #3
 8007f12:	4eac      	ldr	r6, [pc, #688]	; (80081c4 <_dtoa_r+0x61c>)
 8007f14:	b957      	cbnz	r7, 8007f2c <_dtoa_r+0x384>
 8007f16:	4642      	mov	r2, r8
 8007f18:	464b      	mov	r3, r9
 8007f1a:	4650      	mov	r0, sl
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	f7f8 fcb5 	bl	800088c <__aeabi_ddiv>
 8007f22:	4682      	mov	sl, r0
 8007f24:	468b      	mov	fp, r1
 8007f26:	e028      	b.n	8007f7a <_dtoa_r+0x3d2>
 8007f28:	2502      	movs	r5, #2
 8007f2a:	e7f2      	b.n	8007f12 <_dtoa_r+0x36a>
 8007f2c:	07f9      	lsls	r1, r7, #31
 8007f2e:	d508      	bpl.n	8007f42 <_dtoa_r+0x39a>
 8007f30:	4640      	mov	r0, r8
 8007f32:	4649      	mov	r1, r9
 8007f34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f38:	f7f8 fb7e 	bl	8000638 <__aeabi_dmul>
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	4680      	mov	r8, r0
 8007f40:	4689      	mov	r9, r1
 8007f42:	107f      	asrs	r7, r7, #1
 8007f44:	3608      	adds	r6, #8
 8007f46:	e7e5      	b.n	8007f14 <_dtoa_r+0x36c>
 8007f48:	f000 809b 	beq.w	8008082 <_dtoa_r+0x4da>
 8007f4c:	9b00      	ldr	r3, [sp, #0]
 8007f4e:	4f9d      	ldr	r7, [pc, #628]	; (80081c4 <_dtoa_r+0x61c>)
 8007f50:	425e      	negs	r6, r3
 8007f52:	4b9b      	ldr	r3, [pc, #620]	; (80081c0 <_dtoa_r+0x618>)
 8007f54:	f006 020f 	and.w	r2, r6, #15
 8007f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	ec51 0b19 	vmov	r0, r1, d9
 8007f64:	f7f8 fb68 	bl	8000638 <__aeabi_dmul>
 8007f68:	1136      	asrs	r6, r6, #4
 8007f6a:	4682      	mov	sl, r0
 8007f6c:	468b      	mov	fp, r1
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2502      	movs	r5, #2
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	d17a      	bne.n	800806c <_dtoa_r+0x4c4>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1d3      	bne.n	8007f22 <_dtoa_r+0x37a>
 8007f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8082 	beq.w	8008086 <_dtoa_r+0x4de>
 8007f82:	4b91      	ldr	r3, [pc, #580]	; (80081c8 <_dtoa_r+0x620>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	4650      	mov	r0, sl
 8007f88:	4659      	mov	r1, fp
 8007f8a:	f7f8 fdc7 	bl	8000b1c <__aeabi_dcmplt>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d079      	beq.n	8008086 <_dtoa_r+0x4de>
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d076      	beq.n	8008086 <_dtoa_r+0x4de>
 8007f98:	9b02      	ldr	r3, [sp, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dd36      	ble.n	800800c <_dtoa_r+0x464>
 8007f9e:	9b00      	ldr	r3, [sp, #0]
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	4659      	mov	r1, fp
 8007fa4:	1e5f      	subs	r7, r3, #1
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	4b88      	ldr	r3, [pc, #544]	; (80081cc <_dtoa_r+0x624>)
 8007faa:	f7f8 fb45 	bl	8000638 <__aeabi_dmul>
 8007fae:	9e02      	ldr	r6, [sp, #8]
 8007fb0:	4682      	mov	sl, r0
 8007fb2:	468b      	mov	fp, r1
 8007fb4:	3501      	adds	r5, #1
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f7f8 fad4 	bl	8000564 <__aeabi_i2d>
 8007fbc:	4652      	mov	r2, sl
 8007fbe:	465b      	mov	r3, fp
 8007fc0:	f7f8 fb3a 	bl	8000638 <__aeabi_dmul>
 8007fc4:	4b82      	ldr	r3, [pc, #520]	; (80081d0 <_dtoa_r+0x628>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f7f8 f980 	bl	80002cc <__adddf3>
 8007fcc:	46d0      	mov	r8, sl
 8007fce:	46d9      	mov	r9, fp
 8007fd0:	4682      	mov	sl, r0
 8007fd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007fd6:	2e00      	cmp	r6, #0
 8007fd8:	d158      	bne.n	800808c <_dtoa_r+0x4e4>
 8007fda:	4b7e      	ldr	r3, [pc, #504]	; (80081d4 <_dtoa_r+0x62c>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	4640      	mov	r0, r8
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	f7f8 f971 	bl	80002c8 <__aeabi_dsub>
 8007fe6:	4652      	mov	r2, sl
 8007fe8:	465b      	mov	r3, fp
 8007fea:	4680      	mov	r8, r0
 8007fec:	4689      	mov	r9, r1
 8007fee:	f7f8 fdb3 	bl	8000b58 <__aeabi_dcmpgt>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	f040 8295 	bne.w	8008522 <_dtoa_r+0x97a>
 8007ff8:	4652      	mov	r2, sl
 8007ffa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ffe:	4640      	mov	r0, r8
 8008000:	4649      	mov	r1, r9
 8008002:	f7f8 fd8b 	bl	8000b1c <__aeabi_dcmplt>
 8008006:	2800      	cmp	r0, #0
 8008008:	f040 8289 	bne.w	800851e <_dtoa_r+0x976>
 800800c:	ec5b ab19 	vmov	sl, fp, d9
 8008010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008012:	2b00      	cmp	r3, #0
 8008014:	f2c0 8148 	blt.w	80082a8 <_dtoa_r+0x700>
 8008018:	9a00      	ldr	r2, [sp, #0]
 800801a:	2a0e      	cmp	r2, #14
 800801c:	f300 8144 	bgt.w	80082a8 <_dtoa_r+0x700>
 8008020:	4b67      	ldr	r3, [pc, #412]	; (80081c0 <_dtoa_r+0x618>)
 8008022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008026:	e9d3 8900 	ldrd	r8, r9, [r3]
 800802a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	f280 80d5 	bge.w	80081dc <_dtoa_r+0x634>
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f300 80d1 	bgt.w	80081dc <_dtoa_r+0x634>
 800803a:	f040 826f 	bne.w	800851c <_dtoa_r+0x974>
 800803e:	4b65      	ldr	r3, [pc, #404]	; (80081d4 <_dtoa_r+0x62c>)
 8008040:	2200      	movs	r2, #0
 8008042:	4640      	mov	r0, r8
 8008044:	4649      	mov	r1, r9
 8008046:	f7f8 faf7 	bl	8000638 <__aeabi_dmul>
 800804a:	4652      	mov	r2, sl
 800804c:	465b      	mov	r3, fp
 800804e:	f7f8 fd79 	bl	8000b44 <__aeabi_dcmpge>
 8008052:	9e03      	ldr	r6, [sp, #12]
 8008054:	4637      	mov	r7, r6
 8008056:	2800      	cmp	r0, #0
 8008058:	f040 8245 	bne.w	80084e6 <_dtoa_r+0x93e>
 800805c:	9d01      	ldr	r5, [sp, #4]
 800805e:	2331      	movs	r3, #49	; 0x31
 8008060:	f805 3b01 	strb.w	r3, [r5], #1
 8008064:	9b00      	ldr	r3, [sp, #0]
 8008066:	3301      	adds	r3, #1
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	e240      	b.n	80084ee <_dtoa_r+0x946>
 800806c:	07f2      	lsls	r2, r6, #31
 800806e:	d505      	bpl.n	800807c <_dtoa_r+0x4d4>
 8008070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008074:	f7f8 fae0 	bl	8000638 <__aeabi_dmul>
 8008078:	3501      	adds	r5, #1
 800807a:	2301      	movs	r3, #1
 800807c:	1076      	asrs	r6, r6, #1
 800807e:	3708      	adds	r7, #8
 8008080:	e777      	b.n	8007f72 <_dtoa_r+0x3ca>
 8008082:	2502      	movs	r5, #2
 8008084:	e779      	b.n	8007f7a <_dtoa_r+0x3d2>
 8008086:	9f00      	ldr	r7, [sp, #0]
 8008088:	9e03      	ldr	r6, [sp, #12]
 800808a:	e794      	b.n	8007fb6 <_dtoa_r+0x40e>
 800808c:	9901      	ldr	r1, [sp, #4]
 800808e:	4b4c      	ldr	r3, [pc, #304]	; (80081c0 <_dtoa_r+0x618>)
 8008090:	4431      	add	r1, r6
 8008092:	910d      	str	r1, [sp, #52]	; 0x34
 8008094:	9908      	ldr	r1, [sp, #32]
 8008096:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800809a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800809e:	2900      	cmp	r1, #0
 80080a0:	d043      	beq.n	800812a <_dtoa_r+0x582>
 80080a2:	494d      	ldr	r1, [pc, #308]	; (80081d8 <_dtoa_r+0x630>)
 80080a4:	2000      	movs	r0, #0
 80080a6:	f7f8 fbf1 	bl	800088c <__aeabi_ddiv>
 80080aa:	4652      	mov	r2, sl
 80080ac:	465b      	mov	r3, fp
 80080ae:	f7f8 f90b 	bl	80002c8 <__aeabi_dsub>
 80080b2:	9d01      	ldr	r5, [sp, #4]
 80080b4:	4682      	mov	sl, r0
 80080b6:	468b      	mov	fp, r1
 80080b8:	4649      	mov	r1, r9
 80080ba:	4640      	mov	r0, r8
 80080bc:	f7f8 fd56 	bl	8000b6c <__aeabi_d2iz>
 80080c0:	4606      	mov	r6, r0
 80080c2:	f7f8 fa4f 	bl	8000564 <__aeabi_i2d>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4640      	mov	r0, r8
 80080cc:	4649      	mov	r1, r9
 80080ce:	f7f8 f8fb 	bl	80002c8 <__aeabi_dsub>
 80080d2:	3630      	adds	r6, #48	; 0x30
 80080d4:	f805 6b01 	strb.w	r6, [r5], #1
 80080d8:	4652      	mov	r2, sl
 80080da:	465b      	mov	r3, fp
 80080dc:	4680      	mov	r8, r0
 80080de:	4689      	mov	r9, r1
 80080e0:	f7f8 fd1c 	bl	8000b1c <__aeabi_dcmplt>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d163      	bne.n	80081b0 <_dtoa_r+0x608>
 80080e8:	4642      	mov	r2, r8
 80080ea:	464b      	mov	r3, r9
 80080ec:	4936      	ldr	r1, [pc, #216]	; (80081c8 <_dtoa_r+0x620>)
 80080ee:	2000      	movs	r0, #0
 80080f0:	f7f8 f8ea 	bl	80002c8 <__aeabi_dsub>
 80080f4:	4652      	mov	r2, sl
 80080f6:	465b      	mov	r3, fp
 80080f8:	f7f8 fd10 	bl	8000b1c <__aeabi_dcmplt>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	f040 80b5 	bne.w	800826c <_dtoa_r+0x6c4>
 8008102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008104:	429d      	cmp	r5, r3
 8008106:	d081      	beq.n	800800c <_dtoa_r+0x464>
 8008108:	4b30      	ldr	r3, [pc, #192]	; (80081cc <_dtoa_r+0x624>)
 800810a:	2200      	movs	r2, #0
 800810c:	4650      	mov	r0, sl
 800810e:	4659      	mov	r1, fp
 8008110:	f7f8 fa92 	bl	8000638 <__aeabi_dmul>
 8008114:	4b2d      	ldr	r3, [pc, #180]	; (80081cc <_dtoa_r+0x624>)
 8008116:	4682      	mov	sl, r0
 8008118:	468b      	mov	fp, r1
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	2200      	movs	r2, #0
 8008120:	f7f8 fa8a 	bl	8000638 <__aeabi_dmul>
 8008124:	4680      	mov	r8, r0
 8008126:	4689      	mov	r9, r1
 8008128:	e7c6      	b.n	80080b8 <_dtoa_r+0x510>
 800812a:	4650      	mov	r0, sl
 800812c:	4659      	mov	r1, fp
 800812e:	f7f8 fa83 	bl	8000638 <__aeabi_dmul>
 8008132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008134:	9d01      	ldr	r5, [sp, #4]
 8008136:	930f      	str	r3, [sp, #60]	; 0x3c
 8008138:	4682      	mov	sl, r0
 800813a:	468b      	mov	fp, r1
 800813c:	4649      	mov	r1, r9
 800813e:	4640      	mov	r0, r8
 8008140:	f7f8 fd14 	bl	8000b6c <__aeabi_d2iz>
 8008144:	4606      	mov	r6, r0
 8008146:	f7f8 fa0d 	bl	8000564 <__aeabi_i2d>
 800814a:	3630      	adds	r6, #48	; 0x30
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4640      	mov	r0, r8
 8008152:	4649      	mov	r1, r9
 8008154:	f7f8 f8b8 	bl	80002c8 <__aeabi_dsub>
 8008158:	f805 6b01 	strb.w	r6, [r5], #1
 800815c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800815e:	429d      	cmp	r5, r3
 8008160:	4680      	mov	r8, r0
 8008162:	4689      	mov	r9, r1
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	d124      	bne.n	80081b4 <_dtoa_r+0x60c>
 800816a:	4b1b      	ldr	r3, [pc, #108]	; (80081d8 <_dtoa_r+0x630>)
 800816c:	4650      	mov	r0, sl
 800816e:	4659      	mov	r1, fp
 8008170:	f7f8 f8ac 	bl	80002cc <__adddf3>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4640      	mov	r0, r8
 800817a:	4649      	mov	r1, r9
 800817c:	f7f8 fcec 	bl	8000b58 <__aeabi_dcmpgt>
 8008180:	2800      	cmp	r0, #0
 8008182:	d173      	bne.n	800826c <_dtoa_r+0x6c4>
 8008184:	4652      	mov	r2, sl
 8008186:	465b      	mov	r3, fp
 8008188:	4913      	ldr	r1, [pc, #76]	; (80081d8 <_dtoa_r+0x630>)
 800818a:	2000      	movs	r0, #0
 800818c:	f7f8 f89c 	bl	80002c8 <__aeabi_dsub>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4640      	mov	r0, r8
 8008196:	4649      	mov	r1, r9
 8008198:	f7f8 fcc0 	bl	8000b1c <__aeabi_dcmplt>
 800819c:	2800      	cmp	r0, #0
 800819e:	f43f af35 	beq.w	800800c <_dtoa_r+0x464>
 80081a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081a4:	1e6b      	subs	r3, r5, #1
 80081a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081ac:	2b30      	cmp	r3, #48	; 0x30
 80081ae:	d0f8      	beq.n	80081a2 <_dtoa_r+0x5fa>
 80081b0:	9700      	str	r7, [sp, #0]
 80081b2:	e049      	b.n	8008248 <_dtoa_r+0x6a0>
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <_dtoa_r+0x624>)
 80081b6:	f7f8 fa3f 	bl	8000638 <__aeabi_dmul>
 80081ba:	4680      	mov	r8, r0
 80081bc:	4689      	mov	r9, r1
 80081be:	e7bd      	b.n	800813c <_dtoa_r+0x594>
 80081c0:	08009b48 	.word	0x08009b48
 80081c4:	08009b20 	.word	0x08009b20
 80081c8:	3ff00000 	.word	0x3ff00000
 80081cc:	40240000 	.word	0x40240000
 80081d0:	401c0000 	.word	0x401c0000
 80081d4:	40140000 	.word	0x40140000
 80081d8:	3fe00000 	.word	0x3fe00000
 80081dc:	9d01      	ldr	r5, [sp, #4]
 80081de:	4656      	mov	r6, sl
 80081e0:	465f      	mov	r7, fp
 80081e2:	4642      	mov	r2, r8
 80081e4:	464b      	mov	r3, r9
 80081e6:	4630      	mov	r0, r6
 80081e8:	4639      	mov	r1, r7
 80081ea:	f7f8 fb4f 	bl	800088c <__aeabi_ddiv>
 80081ee:	f7f8 fcbd 	bl	8000b6c <__aeabi_d2iz>
 80081f2:	4682      	mov	sl, r0
 80081f4:	f7f8 f9b6 	bl	8000564 <__aeabi_i2d>
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	f7f8 fa1c 	bl	8000638 <__aeabi_dmul>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4630      	mov	r0, r6
 8008206:	4639      	mov	r1, r7
 8008208:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800820c:	f7f8 f85c 	bl	80002c8 <__aeabi_dsub>
 8008210:	f805 6b01 	strb.w	r6, [r5], #1
 8008214:	9e01      	ldr	r6, [sp, #4]
 8008216:	9f03      	ldr	r7, [sp, #12]
 8008218:	1bae      	subs	r6, r5, r6
 800821a:	42b7      	cmp	r7, r6
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	d135      	bne.n	800828e <_dtoa_r+0x6e6>
 8008222:	f7f8 f853 	bl	80002cc <__adddf3>
 8008226:	4642      	mov	r2, r8
 8008228:	464b      	mov	r3, r9
 800822a:	4606      	mov	r6, r0
 800822c:	460f      	mov	r7, r1
 800822e:	f7f8 fc93 	bl	8000b58 <__aeabi_dcmpgt>
 8008232:	b9d0      	cbnz	r0, 800826a <_dtoa_r+0x6c2>
 8008234:	4642      	mov	r2, r8
 8008236:	464b      	mov	r3, r9
 8008238:	4630      	mov	r0, r6
 800823a:	4639      	mov	r1, r7
 800823c:	f7f8 fc64 	bl	8000b08 <__aeabi_dcmpeq>
 8008240:	b110      	cbz	r0, 8008248 <_dtoa_r+0x6a0>
 8008242:	f01a 0f01 	tst.w	sl, #1
 8008246:	d110      	bne.n	800826a <_dtoa_r+0x6c2>
 8008248:	4620      	mov	r0, r4
 800824a:	ee18 1a10 	vmov	r1, s16
 800824e:	f7fe fe47 	bl	8006ee0 <_Bfree>
 8008252:	2300      	movs	r3, #0
 8008254:	9800      	ldr	r0, [sp, #0]
 8008256:	702b      	strb	r3, [r5, #0]
 8008258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800825a:	3001      	adds	r0, #1
 800825c:	6018      	str	r0, [r3, #0]
 800825e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008260:	2b00      	cmp	r3, #0
 8008262:	f43f acf1 	beq.w	8007c48 <_dtoa_r+0xa0>
 8008266:	601d      	str	r5, [r3, #0]
 8008268:	e4ee      	b.n	8007c48 <_dtoa_r+0xa0>
 800826a:	9f00      	ldr	r7, [sp, #0]
 800826c:	462b      	mov	r3, r5
 800826e:	461d      	mov	r5, r3
 8008270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008274:	2a39      	cmp	r2, #57	; 0x39
 8008276:	d106      	bne.n	8008286 <_dtoa_r+0x6de>
 8008278:	9a01      	ldr	r2, [sp, #4]
 800827a:	429a      	cmp	r2, r3
 800827c:	d1f7      	bne.n	800826e <_dtoa_r+0x6c6>
 800827e:	9901      	ldr	r1, [sp, #4]
 8008280:	2230      	movs	r2, #48	; 0x30
 8008282:	3701      	adds	r7, #1
 8008284:	700a      	strb	r2, [r1, #0]
 8008286:	781a      	ldrb	r2, [r3, #0]
 8008288:	3201      	adds	r2, #1
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	e790      	b.n	80081b0 <_dtoa_r+0x608>
 800828e:	4ba6      	ldr	r3, [pc, #664]	; (8008528 <_dtoa_r+0x980>)
 8008290:	2200      	movs	r2, #0
 8008292:	f7f8 f9d1 	bl	8000638 <__aeabi_dmul>
 8008296:	2200      	movs	r2, #0
 8008298:	2300      	movs	r3, #0
 800829a:	4606      	mov	r6, r0
 800829c:	460f      	mov	r7, r1
 800829e:	f7f8 fc33 	bl	8000b08 <__aeabi_dcmpeq>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d09d      	beq.n	80081e2 <_dtoa_r+0x63a>
 80082a6:	e7cf      	b.n	8008248 <_dtoa_r+0x6a0>
 80082a8:	9a08      	ldr	r2, [sp, #32]
 80082aa:	2a00      	cmp	r2, #0
 80082ac:	f000 80d7 	beq.w	800845e <_dtoa_r+0x8b6>
 80082b0:	9a06      	ldr	r2, [sp, #24]
 80082b2:	2a01      	cmp	r2, #1
 80082b4:	f300 80ba 	bgt.w	800842c <_dtoa_r+0x884>
 80082b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	f000 80b2 	beq.w	8008424 <_dtoa_r+0x87c>
 80082c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082c4:	9e07      	ldr	r6, [sp, #28]
 80082c6:	9d04      	ldr	r5, [sp, #16]
 80082c8:	9a04      	ldr	r2, [sp, #16]
 80082ca:	441a      	add	r2, r3
 80082cc:	9204      	str	r2, [sp, #16]
 80082ce:	9a05      	ldr	r2, [sp, #20]
 80082d0:	2101      	movs	r1, #1
 80082d2:	441a      	add	r2, r3
 80082d4:	4620      	mov	r0, r4
 80082d6:	9205      	str	r2, [sp, #20]
 80082d8:	f7fe feba 	bl	8007050 <__i2b>
 80082dc:	4607      	mov	r7, r0
 80082de:	2d00      	cmp	r5, #0
 80082e0:	dd0c      	ble.n	80082fc <_dtoa_r+0x754>
 80082e2:	9b05      	ldr	r3, [sp, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dd09      	ble.n	80082fc <_dtoa_r+0x754>
 80082e8:	42ab      	cmp	r3, r5
 80082ea:	9a04      	ldr	r2, [sp, #16]
 80082ec:	bfa8      	it	ge
 80082ee:	462b      	movge	r3, r5
 80082f0:	1ad2      	subs	r2, r2, r3
 80082f2:	9204      	str	r2, [sp, #16]
 80082f4:	9a05      	ldr	r2, [sp, #20]
 80082f6:	1aed      	subs	r5, r5, r3
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	9305      	str	r3, [sp, #20]
 80082fc:	9b07      	ldr	r3, [sp, #28]
 80082fe:	b31b      	cbz	r3, 8008348 <_dtoa_r+0x7a0>
 8008300:	9b08      	ldr	r3, [sp, #32]
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 80af 	beq.w	8008466 <_dtoa_r+0x8be>
 8008308:	2e00      	cmp	r6, #0
 800830a:	dd13      	ble.n	8008334 <_dtoa_r+0x78c>
 800830c:	4639      	mov	r1, r7
 800830e:	4632      	mov	r2, r6
 8008310:	4620      	mov	r0, r4
 8008312:	f7fe ff5d 	bl	80071d0 <__pow5mult>
 8008316:	ee18 2a10 	vmov	r2, s16
 800831a:	4601      	mov	r1, r0
 800831c:	4607      	mov	r7, r0
 800831e:	4620      	mov	r0, r4
 8008320:	f7fe feac 	bl	800707c <__multiply>
 8008324:	ee18 1a10 	vmov	r1, s16
 8008328:	4680      	mov	r8, r0
 800832a:	4620      	mov	r0, r4
 800832c:	f7fe fdd8 	bl	8006ee0 <_Bfree>
 8008330:	ee08 8a10 	vmov	s16, r8
 8008334:	9b07      	ldr	r3, [sp, #28]
 8008336:	1b9a      	subs	r2, r3, r6
 8008338:	d006      	beq.n	8008348 <_dtoa_r+0x7a0>
 800833a:	ee18 1a10 	vmov	r1, s16
 800833e:	4620      	mov	r0, r4
 8008340:	f7fe ff46 	bl	80071d0 <__pow5mult>
 8008344:	ee08 0a10 	vmov	s16, r0
 8008348:	2101      	movs	r1, #1
 800834a:	4620      	mov	r0, r4
 800834c:	f7fe fe80 	bl	8007050 <__i2b>
 8008350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008352:	2b00      	cmp	r3, #0
 8008354:	4606      	mov	r6, r0
 8008356:	f340 8088 	ble.w	800846a <_dtoa_r+0x8c2>
 800835a:	461a      	mov	r2, r3
 800835c:	4601      	mov	r1, r0
 800835e:	4620      	mov	r0, r4
 8008360:	f7fe ff36 	bl	80071d0 <__pow5mult>
 8008364:	9b06      	ldr	r3, [sp, #24]
 8008366:	2b01      	cmp	r3, #1
 8008368:	4606      	mov	r6, r0
 800836a:	f340 8081 	ble.w	8008470 <_dtoa_r+0x8c8>
 800836e:	f04f 0800 	mov.w	r8, #0
 8008372:	6933      	ldr	r3, [r6, #16]
 8008374:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008378:	6918      	ldr	r0, [r3, #16]
 800837a:	f7fe fe19 	bl	8006fb0 <__hi0bits>
 800837e:	f1c0 0020 	rsb	r0, r0, #32
 8008382:	9b05      	ldr	r3, [sp, #20]
 8008384:	4418      	add	r0, r3
 8008386:	f010 001f 	ands.w	r0, r0, #31
 800838a:	f000 8092 	beq.w	80084b2 <_dtoa_r+0x90a>
 800838e:	f1c0 0320 	rsb	r3, r0, #32
 8008392:	2b04      	cmp	r3, #4
 8008394:	f340 808a 	ble.w	80084ac <_dtoa_r+0x904>
 8008398:	f1c0 001c 	rsb	r0, r0, #28
 800839c:	9b04      	ldr	r3, [sp, #16]
 800839e:	4403      	add	r3, r0
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	9b05      	ldr	r3, [sp, #20]
 80083a4:	4403      	add	r3, r0
 80083a6:	4405      	add	r5, r0
 80083a8:	9305      	str	r3, [sp, #20]
 80083aa:	9b04      	ldr	r3, [sp, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	dd07      	ble.n	80083c0 <_dtoa_r+0x818>
 80083b0:	ee18 1a10 	vmov	r1, s16
 80083b4:	461a      	mov	r2, r3
 80083b6:	4620      	mov	r0, r4
 80083b8:	f7fe ff64 	bl	8007284 <__lshift>
 80083bc:	ee08 0a10 	vmov	s16, r0
 80083c0:	9b05      	ldr	r3, [sp, #20]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	dd05      	ble.n	80083d2 <_dtoa_r+0x82a>
 80083c6:	4631      	mov	r1, r6
 80083c8:	461a      	mov	r2, r3
 80083ca:	4620      	mov	r0, r4
 80083cc:	f7fe ff5a 	bl	8007284 <__lshift>
 80083d0:	4606      	mov	r6, r0
 80083d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d06e      	beq.n	80084b6 <_dtoa_r+0x90e>
 80083d8:	ee18 0a10 	vmov	r0, s16
 80083dc:	4631      	mov	r1, r6
 80083de:	f7fe ffc1 	bl	8007364 <__mcmp>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	da67      	bge.n	80084b6 <_dtoa_r+0x90e>
 80083e6:	9b00      	ldr	r3, [sp, #0]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	ee18 1a10 	vmov	r1, s16
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	220a      	movs	r2, #10
 80083f2:	2300      	movs	r3, #0
 80083f4:	4620      	mov	r0, r4
 80083f6:	f7fe fd95 	bl	8006f24 <__multadd>
 80083fa:	9b08      	ldr	r3, [sp, #32]
 80083fc:	ee08 0a10 	vmov	s16, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 81b1 	beq.w	8008768 <_dtoa_r+0xbc0>
 8008406:	2300      	movs	r3, #0
 8008408:	4639      	mov	r1, r7
 800840a:	220a      	movs	r2, #10
 800840c:	4620      	mov	r0, r4
 800840e:	f7fe fd89 	bl	8006f24 <__multadd>
 8008412:	9b02      	ldr	r3, [sp, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	4607      	mov	r7, r0
 8008418:	f300 808e 	bgt.w	8008538 <_dtoa_r+0x990>
 800841c:	9b06      	ldr	r3, [sp, #24]
 800841e:	2b02      	cmp	r3, #2
 8008420:	dc51      	bgt.n	80084c6 <_dtoa_r+0x91e>
 8008422:	e089      	b.n	8008538 <_dtoa_r+0x990>
 8008424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800842a:	e74b      	b.n	80082c4 <_dtoa_r+0x71c>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	1e5e      	subs	r6, r3, #1
 8008430:	9b07      	ldr	r3, [sp, #28]
 8008432:	42b3      	cmp	r3, r6
 8008434:	bfbf      	itttt	lt
 8008436:	9b07      	ldrlt	r3, [sp, #28]
 8008438:	9607      	strlt	r6, [sp, #28]
 800843a:	1af2      	sublt	r2, r6, r3
 800843c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800843e:	bfb6      	itet	lt
 8008440:	189b      	addlt	r3, r3, r2
 8008442:	1b9e      	subge	r6, r3, r6
 8008444:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	bfb8      	it	lt
 800844a:	2600      	movlt	r6, #0
 800844c:	2b00      	cmp	r3, #0
 800844e:	bfb7      	itett	lt
 8008450:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008454:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008458:	1a9d      	sublt	r5, r3, r2
 800845a:	2300      	movlt	r3, #0
 800845c:	e734      	b.n	80082c8 <_dtoa_r+0x720>
 800845e:	9e07      	ldr	r6, [sp, #28]
 8008460:	9d04      	ldr	r5, [sp, #16]
 8008462:	9f08      	ldr	r7, [sp, #32]
 8008464:	e73b      	b.n	80082de <_dtoa_r+0x736>
 8008466:	9a07      	ldr	r2, [sp, #28]
 8008468:	e767      	b.n	800833a <_dtoa_r+0x792>
 800846a:	9b06      	ldr	r3, [sp, #24]
 800846c:	2b01      	cmp	r3, #1
 800846e:	dc18      	bgt.n	80084a2 <_dtoa_r+0x8fa>
 8008470:	f1ba 0f00 	cmp.w	sl, #0
 8008474:	d115      	bne.n	80084a2 <_dtoa_r+0x8fa>
 8008476:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800847a:	b993      	cbnz	r3, 80084a2 <_dtoa_r+0x8fa>
 800847c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008480:	0d1b      	lsrs	r3, r3, #20
 8008482:	051b      	lsls	r3, r3, #20
 8008484:	b183      	cbz	r3, 80084a8 <_dtoa_r+0x900>
 8008486:	9b04      	ldr	r3, [sp, #16]
 8008488:	3301      	adds	r3, #1
 800848a:	9304      	str	r3, [sp, #16]
 800848c:	9b05      	ldr	r3, [sp, #20]
 800848e:	3301      	adds	r3, #1
 8008490:	9305      	str	r3, [sp, #20]
 8008492:	f04f 0801 	mov.w	r8, #1
 8008496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008498:	2b00      	cmp	r3, #0
 800849a:	f47f af6a 	bne.w	8008372 <_dtoa_r+0x7ca>
 800849e:	2001      	movs	r0, #1
 80084a0:	e76f      	b.n	8008382 <_dtoa_r+0x7da>
 80084a2:	f04f 0800 	mov.w	r8, #0
 80084a6:	e7f6      	b.n	8008496 <_dtoa_r+0x8ee>
 80084a8:	4698      	mov	r8, r3
 80084aa:	e7f4      	b.n	8008496 <_dtoa_r+0x8ee>
 80084ac:	f43f af7d 	beq.w	80083aa <_dtoa_r+0x802>
 80084b0:	4618      	mov	r0, r3
 80084b2:	301c      	adds	r0, #28
 80084b4:	e772      	b.n	800839c <_dtoa_r+0x7f4>
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dc37      	bgt.n	800852c <_dtoa_r+0x984>
 80084bc:	9b06      	ldr	r3, [sp, #24]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	dd34      	ble.n	800852c <_dtoa_r+0x984>
 80084c2:	9b03      	ldr	r3, [sp, #12]
 80084c4:	9302      	str	r3, [sp, #8]
 80084c6:	9b02      	ldr	r3, [sp, #8]
 80084c8:	b96b      	cbnz	r3, 80084e6 <_dtoa_r+0x93e>
 80084ca:	4631      	mov	r1, r6
 80084cc:	2205      	movs	r2, #5
 80084ce:	4620      	mov	r0, r4
 80084d0:	f7fe fd28 	bl	8006f24 <__multadd>
 80084d4:	4601      	mov	r1, r0
 80084d6:	4606      	mov	r6, r0
 80084d8:	ee18 0a10 	vmov	r0, s16
 80084dc:	f7fe ff42 	bl	8007364 <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	f73f adbb 	bgt.w	800805c <_dtoa_r+0x4b4>
 80084e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e8:	9d01      	ldr	r5, [sp, #4]
 80084ea:	43db      	mvns	r3, r3
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	f04f 0800 	mov.w	r8, #0
 80084f2:	4631      	mov	r1, r6
 80084f4:	4620      	mov	r0, r4
 80084f6:	f7fe fcf3 	bl	8006ee0 <_Bfree>
 80084fa:	2f00      	cmp	r7, #0
 80084fc:	f43f aea4 	beq.w	8008248 <_dtoa_r+0x6a0>
 8008500:	f1b8 0f00 	cmp.w	r8, #0
 8008504:	d005      	beq.n	8008512 <_dtoa_r+0x96a>
 8008506:	45b8      	cmp	r8, r7
 8008508:	d003      	beq.n	8008512 <_dtoa_r+0x96a>
 800850a:	4641      	mov	r1, r8
 800850c:	4620      	mov	r0, r4
 800850e:	f7fe fce7 	bl	8006ee0 <_Bfree>
 8008512:	4639      	mov	r1, r7
 8008514:	4620      	mov	r0, r4
 8008516:	f7fe fce3 	bl	8006ee0 <_Bfree>
 800851a:	e695      	b.n	8008248 <_dtoa_r+0x6a0>
 800851c:	2600      	movs	r6, #0
 800851e:	4637      	mov	r7, r6
 8008520:	e7e1      	b.n	80084e6 <_dtoa_r+0x93e>
 8008522:	9700      	str	r7, [sp, #0]
 8008524:	4637      	mov	r7, r6
 8008526:	e599      	b.n	800805c <_dtoa_r+0x4b4>
 8008528:	40240000 	.word	0x40240000
 800852c:	9b08      	ldr	r3, [sp, #32]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 80ca 	beq.w	80086c8 <_dtoa_r+0xb20>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	9302      	str	r3, [sp, #8]
 8008538:	2d00      	cmp	r5, #0
 800853a:	dd05      	ble.n	8008548 <_dtoa_r+0x9a0>
 800853c:	4639      	mov	r1, r7
 800853e:	462a      	mov	r2, r5
 8008540:	4620      	mov	r0, r4
 8008542:	f7fe fe9f 	bl	8007284 <__lshift>
 8008546:	4607      	mov	r7, r0
 8008548:	f1b8 0f00 	cmp.w	r8, #0
 800854c:	d05b      	beq.n	8008606 <_dtoa_r+0xa5e>
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4620      	mov	r0, r4
 8008552:	f7fe fc85 	bl	8006e60 <_Balloc>
 8008556:	4605      	mov	r5, r0
 8008558:	b928      	cbnz	r0, 8008566 <_dtoa_r+0x9be>
 800855a:	4b87      	ldr	r3, [pc, #540]	; (8008778 <_dtoa_r+0xbd0>)
 800855c:	4602      	mov	r2, r0
 800855e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008562:	f7ff bb3b 	b.w	8007bdc <_dtoa_r+0x34>
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	3202      	adds	r2, #2
 800856a:	0092      	lsls	r2, r2, #2
 800856c:	f107 010c 	add.w	r1, r7, #12
 8008570:	300c      	adds	r0, #12
 8008572:	f7fe fb17 	bl	8006ba4 <memcpy>
 8008576:	2201      	movs	r2, #1
 8008578:	4629      	mov	r1, r5
 800857a:	4620      	mov	r0, r4
 800857c:	f7fe fe82 	bl	8007284 <__lshift>
 8008580:	9b01      	ldr	r3, [sp, #4]
 8008582:	f103 0901 	add.w	r9, r3, #1
 8008586:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800858a:	4413      	add	r3, r2
 800858c:	9305      	str	r3, [sp, #20]
 800858e:	f00a 0301 	and.w	r3, sl, #1
 8008592:	46b8      	mov	r8, r7
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	4607      	mov	r7, r0
 8008598:	4631      	mov	r1, r6
 800859a:	ee18 0a10 	vmov	r0, s16
 800859e:	f7ff fa75 	bl	8007a8c <quorem>
 80085a2:	4641      	mov	r1, r8
 80085a4:	9002      	str	r0, [sp, #8]
 80085a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085aa:	ee18 0a10 	vmov	r0, s16
 80085ae:	f7fe fed9 	bl	8007364 <__mcmp>
 80085b2:	463a      	mov	r2, r7
 80085b4:	9003      	str	r0, [sp, #12]
 80085b6:	4631      	mov	r1, r6
 80085b8:	4620      	mov	r0, r4
 80085ba:	f7fe feef 	bl	800739c <__mdiff>
 80085be:	68c2      	ldr	r2, [r0, #12]
 80085c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80085c4:	4605      	mov	r5, r0
 80085c6:	bb02      	cbnz	r2, 800860a <_dtoa_r+0xa62>
 80085c8:	4601      	mov	r1, r0
 80085ca:	ee18 0a10 	vmov	r0, s16
 80085ce:	f7fe fec9 	bl	8007364 <__mcmp>
 80085d2:	4602      	mov	r2, r0
 80085d4:	4629      	mov	r1, r5
 80085d6:	4620      	mov	r0, r4
 80085d8:	9207      	str	r2, [sp, #28]
 80085da:	f7fe fc81 	bl	8006ee0 <_Bfree>
 80085de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80085e2:	ea43 0102 	orr.w	r1, r3, r2
 80085e6:	9b04      	ldr	r3, [sp, #16]
 80085e8:	430b      	orrs	r3, r1
 80085ea:	464d      	mov	r5, r9
 80085ec:	d10f      	bne.n	800860e <_dtoa_r+0xa66>
 80085ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085f2:	d02a      	beq.n	800864a <_dtoa_r+0xaa2>
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dd02      	ble.n	8008600 <_dtoa_r+0xa58>
 80085fa:	9b02      	ldr	r3, [sp, #8]
 80085fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008600:	f88b a000 	strb.w	sl, [fp]
 8008604:	e775      	b.n	80084f2 <_dtoa_r+0x94a>
 8008606:	4638      	mov	r0, r7
 8008608:	e7ba      	b.n	8008580 <_dtoa_r+0x9d8>
 800860a:	2201      	movs	r2, #1
 800860c:	e7e2      	b.n	80085d4 <_dtoa_r+0xa2c>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	db04      	blt.n	800861e <_dtoa_r+0xa76>
 8008614:	9906      	ldr	r1, [sp, #24]
 8008616:	430b      	orrs	r3, r1
 8008618:	9904      	ldr	r1, [sp, #16]
 800861a:	430b      	orrs	r3, r1
 800861c:	d122      	bne.n	8008664 <_dtoa_r+0xabc>
 800861e:	2a00      	cmp	r2, #0
 8008620:	ddee      	ble.n	8008600 <_dtoa_r+0xa58>
 8008622:	ee18 1a10 	vmov	r1, s16
 8008626:	2201      	movs	r2, #1
 8008628:	4620      	mov	r0, r4
 800862a:	f7fe fe2b 	bl	8007284 <__lshift>
 800862e:	4631      	mov	r1, r6
 8008630:	ee08 0a10 	vmov	s16, r0
 8008634:	f7fe fe96 	bl	8007364 <__mcmp>
 8008638:	2800      	cmp	r0, #0
 800863a:	dc03      	bgt.n	8008644 <_dtoa_r+0xa9c>
 800863c:	d1e0      	bne.n	8008600 <_dtoa_r+0xa58>
 800863e:	f01a 0f01 	tst.w	sl, #1
 8008642:	d0dd      	beq.n	8008600 <_dtoa_r+0xa58>
 8008644:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008648:	d1d7      	bne.n	80085fa <_dtoa_r+0xa52>
 800864a:	2339      	movs	r3, #57	; 0x39
 800864c:	f88b 3000 	strb.w	r3, [fp]
 8008650:	462b      	mov	r3, r5
 8008652:	461d      	mov	r5, r3
 8008654:	3b01      	subs	r3, #1
 8008656:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800865a:	2a39      	cmp	r2, #57	; 0x39
 800865c:	d071      	beq.n	8008742 <_dtoa_r+0xb9a>
 800865e:	3201      	adds	r2, #1
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	e746      	b.n	80084f2 <_dtoa_r+0x94a>
 8008664:	2a00      	cmp	r2, #0
 8008666:	dd07      	ble.n	8008678 <_dtoa_r+0xad0>
 8008668:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800866c:	d0ed      	beq.n	800864a <_dtoa_r+0xaa2>
 800866e:	f10a 0301 	add.w	r3, sl, #1
 8008672:	f88b 3000 	strb.w	r3, [fp]
 8008676:	e73c      	b.n	80084f2 <_dtoa_r+0x94a>
 8008678:	9b05      	ldr	r3, [sp, #20]
 800867a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800867e:	4599      	cmp	r9, r3
 8008680:	d047      	beq.n	8008712 <_dtoa_r+0xb6a>
 8008682:	ee18 1a10 	vmov	r1, s16
 8008686:	2300      	movs	r3, #0
 8008688:	220a      	movs	r2, #10
 800868a:	4620      	mov	r0, r4
 800868c:	f7fe fc4a 	bl	8006f24 <__multadd>
 8008690:	45b8      	cmp	r8, r7
 8008692:	ee08 0a10 	vmov	s16, r0
 8008696:	f04f 0300 	mov.w	r3, #0
 800869a:	f04f 020a 	mov.w	r2, #10
 800869e:	4641      	mov	r1, r8
 80086a0:	4620      	mov	r0, r4
 80086a2:	d106      	bne.n	80086b2 <_dtoa_r+0xb0a>
 80086a4:	f7fe fc3e 	bl	8006f24 <__multadd>
 80086a8:	4680      	mov	r8, r0
 80086aa:	4607      	mov	r7, r0
 80086ac:	f109 0901 	add.w	r9, r9, #1
 80086b0:	e772      	b.n	8008598 <_dtoa_r+0x9f0>
 80086b2:	f7fe fc37 	bl	8006f24 <__multadd>
 80086b6:	4639      	mov	r1, r7
 80086b8:	4680      	mov	r8, r0
 80086ba:	2300      	movs	r3, #0
 80086bc:	220a      	movs	r2, #10
 80086be:	4620      	mov	r0, r4
 80086c0:	f7fe fc30 	bl	8006f24 <__multadd>
 80086c4:	4607      	mov	r7, r0
 80086c6:	e7f1      	b.n	80086ac <_dtoa_r+0xb04>
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	9302      	str	r3, [sp, #8]
 80086cc:	9d01      	ldr	r5, [sp, #4]
 80086ce:	ee18 0a10 	vmov	r0, s16
 80086d2:	4631      	mov	r1, r6
 80086d4:	f7ff f9da 	bl	8007a8c <quorem>
 80086d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086dc:	9b01      	ldr	r3, [sp, #4]
 80086de:	f805 ab01 	strb.w	sl, [r5], #1
 80086e2:	1aea      	subs	r2, r5, r3
 80086e4:	9b02      	ldr	r3, [sp, #8]
 80086e6:	4293      	cmp	r3, r2
 80086e8:	dd09      	ble.n	80086fe <_dtoa_r+0xb56>
 80086ea:	ee18 1a10 	vmov	r1, s16
 80086ee:	2300      	movs	r3, #0
 80086f0:	220a      	movs	r2, #10
 80086f2:	4620      	mov	r0, r4
 80086f4:	f7fe fc16 	bl	8006f24 <__multadd>
 80086f8:	ee08 0a10 	vmov	s16, r0
 80086fc:	e7e7      	b.n	80086ce <_dtoa_r+0xb26>
 80086fe:	9b02      	ldr	r3, [sp, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	bfc8      	it	gt
 8008704:	461d      	movgt	r5, r3
 8008706:	9b01      	ldr	r3, [sp, #4]
 8008708:	bfd8      	it	le
 800870a:	2501      	movle	r5, #1
 800870c:	441d      	add	r5, r3
 800870e:	f04f 0800 	mov.w	r8, #0
 8008712:	ee18 1a10 	vmov	r1, s16
 8008716:	2201      	movs	r2, #1
 8008718:	4620      	mov	r0, r4
 800871a:	f7fe fdb3 	bl	8007284 <__lshift>
 800871e:	4631      	mov	r1, r6
 8008720:	ee08 0a10 	vmov	s16, r0
 8008724:	f7fe fe1e 	bl	8007364 <__mcmp>
 8008728:	2800      	cmp	r0, #0
 800872a:	dc91      	bgt.n	8008650 <_dtoa_r+0xaa8>
 800872c:	d102      	bne.n	8008734 <_dtoa_r+0xb8c>
 800872e:	f01a 0f01 	tst.w	sl, #1
 8008732:	d18d      	bne.n	8008650 <_dtoa_r+0xaa8>
 8008734:	462b      	mov	r3, r5
 8008736:	461d      	mov	r5, r3
 8008738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800873c:	2a30      	cmp	r2, #48	; 0x30
 800873e:	d0fa      	beq.n	8008736 <_dtoa_r+0xb8e>
 8008740:	e6d7      	b.n	80084f2 <_dtoa_r+0x94a>
 8008742:	9a01      	ldr	r2, [sp, #4]
 8008744:	429a      	cmp	r2, r3
 8008746:	d184      	bne.n	8008652 <_dtoa_r+0xaaa>
 8008748:	9b00      	ldr	r3, [sp, #0]
 800874a:	3301      	adds	r3, #1
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	2331      	movs	r3, #49	; 0x31
 8008750:	7013      	strb	r3, [r2, #0]
 8008752:	e6ce      	b.n	80084f2 <_dtoa_r+0x94a>
 8008754:	4b09      	ldr	r3, [pc, #36]	; (800877c <_dtoa_r+0xbd4>)
 8008756:	f7ff ba95 	b.w	8007c84 <_dtoa_r+0xdc>
 800875a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800875c:	2b00      	cmp	r3, #0
 800875e:	f47f aa6e 	bne.w	8007c3e <_dtoa_r+0x96>
 8008762:	4b07      	ldr	r3, [pc, #28]	; (8008780 <_dtoa_r+0xbd8>)
 8008764:	f7ff ba8e 	b.w	8007c84 <_dtoa_r+0xdc>
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	dcae      	bgt.n	80086cc <_dtoa_r+0xb24>
 800876e:	9b06      	ldr	r3, [sp, #24]
 8008770:	2b02      	cmp	r3, #2
 8008772:	f73f aea8 	bgt.w	80084c6 <_dtoa_r+0x91e>
 8008776:	e7a9      	b.n	80086cc <_dtoa_r+0xb24>
 8008778:	08009b0b 	.word	0x08009b0b
 800877c:	08009c87 	.word	0x08009c87
 8008780:	08009c7a 	.word	0x08009c7a

08008784 <fiprintf>:
 8008784:	b40e      	push	{r1, r2, r3}
 8008786:	b503      	push	{r0, r1, lr}
 8008788:	4601      	mov	r1, r0
 800878a:	ab03      	add	r3, sp, #12
 800878c:	4805      	ldr	r0, [pc, #20]	; (80087a4 <fiprintf+0x20>)
 800878e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008792:	6800      	ldr	r0, [r0, #0]
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	f000 f891 	bl	80088bc <_vfiprintf_r>
 800879a:	b002      	add	sp, #8
 800879c:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a0:	b003      	add	sp, #12
 80087a2:	4770      	bx	lr
 80087a4:	20000014 	.word	0x20000014

080087a8 <malloc>:
 80087a8:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <malloc+0xc>)
 80087aa:	4601      	mov	r1, r0
 80087ac:	6818      	ldr	r0, [r3, #0]
 80087ae:	f7fe bf2f 	b.w	8007610 <_malloc_r>
 80087b2:	bf00      	nop
 80087b4:	20000014 	.word	0x20000014

080087b8 <__malloc_lock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__malloc_lock+0x8>)
 80087ba:	f000 bc2f 	b.w	800901c <__retarget_lock_acquire_recursive>
 80087be:	bf00      	nop
 80087c0:	200006d4 	.word	0x200006d4

080087c4 <__malloc_unlock>:
 80087c4:	4801      	ldr	r0, [pc, #4]	; (80087cc <__malloc_unlock+0x8>)
 80087c6:	f000 bc2a 	b.w	800901e <__retarget_lock_release_recursive>
 80087ca:	bf00      	nop
 80087cc:	200006d4 	.word	0x200006d4

080087d0 <_free_r>:
 80087d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087d2:	2900      	cmp	r1, #0
 80087d4:	d044      	beq.n	8008860 <_free_r+0x90>
 80087d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087da:	9001      	str	r0, [sp, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f1a1 0404 	sub.w	r4, r1, #4
 80087e2:	bfb8      	it	lt
 80087e4:	18e4      	addlt	r4, r4, r3
 80087e6:	f7ff ffe7 	bl	80087b8 <__malloc_lock>
 80087ea:	4a1e      	ldr	r2, [pc, #120]	; (8008864 <_free_r+0x94>)
 80087ec:	9801      	ldr	r0, [sp, #4]
 80087ee:	6813      	ldr	r3, [r2, #0]
 80087f0:	b933      	cbnz	r3, 8008800 <_free_r+0x30>
 80087f2:	6063      	str	r3, [r4, #4]
 80087f4:	6014      	str	r4, [r2, #0]
 80087f6:	b003      	add	sp, #12
 80087f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087fc:	f7ff bfe2 	b.w	80087c4 <__malloc_unlock>
 8008800:	42a3      	cmp	r3, r4
 8008802:	d908      	bls.n	8008816 <_free_r+0x46>
 8008804:	6825      	ldr	r5, [r4, #0]
 8008806:	1961      	adds	r1, r4, r5
 8008808:	428b      	cmp	r3, r1
 800880a:	bf01      	itttt	eq
 800880c:	6819      	ldreq	r1, [r3, #0]
 800880e:	685b      	ldreq	r3, [r3, #4]
 8008810:	1949      	addeq	r1, r1, r5
 8008812:	6021      	streq	r1, [r4, #0]
 8008814:	e7ed      	b.n	80087f2 <_free_r+0x22>
 8008816:	461a      	mov	r2, r3
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	b10b      	cbz	r3, 8008820 <_free_r+0x50>
 800881c:	42a3      	cmp	r3, r4
 800881e:	d9fa      	bls.n	8008816 <_free_r+0x46>
 8008820:	6811      	ldr	r1, [r2, #0]
 8008822:	1855      	adds	r5, r2, r1
 8008824:	42a5      	cmp	r5, r4
 8008826:	d10b      	bne.n	8008840 <_free_r+0x70>
 8008828:	6824      	ldr	r4, [r4, #0]
 800882a:	4421      	add	r1, r4
 800882c:	1854      	adds	r4, r2, r1
 800882e:	42a3      	cmp	r3, r4
 8008830:	6011      	str	r1, [r2, #0]
 8008832:	d1e0      	bne.n	80087f6 <_free_r+0x26>
 8008834:	681c      	ldr	r4, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	6053      	str	r3, [r2, #4]
 800883a:	4421      	add	r1, r4
 800883c:	6011      	str	r1, [r2, #0]
 800883e:	e7da      	b.n	80087f6 <_free_r+0x26>
 8008840:	d902      	bls.n	8008848 <_free_r+0x78>
 8008842:	230c      	movs	r3, #12
 8008844:	6003      	str	r3, [r0, #0]
 8008846:	e7d6      	b.n	80087f6 <_free_r+0x26>
 8008848:	6825      	ldr	r5, [r4, #0]
 800884a:	1961      	adds	r1, r4, r5
 800884c:	428b      	cmp	r3, r1
 800884e:	bf04      	itt	eq
 8008850:	6819      	ldreq	r1, [r3, #0]
 8008852:	685b      	ldreq	r3, [r3, #4]
 8008854:	6063      	str	r3, [r4, #4]
 8008856:	bf04      	itt	eq
 8008858:	1949      	addeq	r1, r1, r5
 800885a:	6021      	streq	r1, [r4, #0]
 800885c:	6054      	str	r4, [r2, #4]
 800885e:	e7ca      	b.n	80087f6 <_free_r+0x26>
 8008860:	b003      	add	sp, #12
 8008862:	bd30      	pop	{r4, r5, pc}
 8008864:	200006c8 	.word	0x200006c8

08008868 <__sfputc_r>:
 8008868:	6893      	ldr	r3, [r2, #8]
 800886a:	3b01      	subs	r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	b410      	push	{r4}
 8008870:	6093      	str	r3, [r2, #8]
 8008872:	da08      	bge.n	8008886 <__sfputc_r+0x1e>
 8008874:	6994      	ldr	r4, [r2, #24]
 8008876:	42a3      	cmp	r3, r4
 8008878:	db01      	blt.n	800887e <__sfputc_r+0x16>
 800887a:	290a      	cmp	r1, #10
 800887c:	d103      	bne.n	8008886 <__sfputc_r+0x1e>
 800887e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008882:	f000 b94b 	b.w	8008b1c <__swbuf_r>
 8008886:	6813      	ldr	r3, [r2, #0]
 8008888:	1c58      	adds	r0, r3, #1
 800888a:	6010      	str	r0, [r2, #0]
 800888c:	7019      	strb	r1, [r3, #0]
 800888e:	4608      	mov	r0, r1
 8008890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008894:	4770      	bx	lr

08008896 <__sfputs_r>:
 8008896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008898:	4606      	mov	r6, r0
 800889a:	460f      	mov	r7, r1
 800889c:	4614      	mov	r4, r2
 800889e:	18d5      	adds	r5, r2, r3
 80088a0:	42ac      	cmp	r4, r5
 80088a2:	d101      	bne.n	80088a8 <__sfputs_r+0x12>
 80088a4:	2000      	movs	r0, #0
 80088a6:	e007      	b.n	80088b8 <__sfputs_r+0x22>
 80088a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ac:	463a      	mov	r2, r7
 80088ae:	4630      	mov	r0, r6
 80088b0:	f7ff ffda 	bl	8008868 <__sfputc_r>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d1f3      	bne.n	80088a0 <__sfputs_r+0xa>
 80088b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088bc <_vfiprintf_r>:
 80088bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	460d      	mov	r5, r1
 80088c2:	b09d      	sub	sp, #116	; 0x74
 80088c4:	4614      	mov	r4, r2
 80088c6:	4698      	mov	r8, r3
 80088c8:	4606      	mov	r6, r0
 80088ca:	b118      	cbz	r0, 80088d4 <_vfiprintf_r+0x18>
 80088cc:	6983      	ldr	r3, [r0, #24]
 80088ce:	b90b      	cbnz	r3, 80088d4 <_vfiprintf_r+0x18>
 80088d0:	f000 fb06 	bl	8008ee0 <__sinit>
 80088d4:	4b89      	ldr	r3, [pc, #548]	; (8008afc <_vfiprintf_r+0x240>)
 80088d6:	429d      	cmp	r5, r3
 80088d8:	d11b      	bne.n	8008912 <_vfiprintf_r+0x56>
 80088da:	6875      	ldr	r5, [r6, #4]
 80088dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088de:	07d9      	lsls	r1, r3, #31
 80088e0:	d405      	bmi.n	80088ee <_vfiprintf_r+0x32>
 80088e2:	89ab      	ldrh	r3, [r5, #12]
 80088e4:	059a      	lsls	r2, r3, #22
 80088e6:	d402      	bmi.n	80088ee <_vfiprintf_r+0x32>
 80088e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ea:	f000 fb97 	bl	800901c <__retarget_lock_acquire_recursive>
 80088ee:	89ab      	ldrh	r3, [r5, #12]
 80088f0:	071b      	lsls	r3, r3, #28
 80088f2:	d501      	bpl.n	80088f8 <_vfiprintf_r+0x3c>
 80088f4:	692b      	ldr	r3, [r5, #16]
 80088f6:	b9eb      	cbnz	r3, 8008934 <_vfiprintf_r+0x78>
 80088f8:	4629      	mov	r1, r5
 80088fa:	4630      	mov	r0, r6
 80088fc:	f000 f960 	bl	8008bc0 <__swsetup_r>
 8008900:	b1c0      	cbz	r0, 8008934 <_vfiprintf_r+0x78>
 8008902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008904:	07dc      	lsls	r4, r3, #31
 8008906:	d50e      	bpl.n	8008926 <_vfiprintf_r+0x6a>
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	b01d      	add	sp, #116	; 0x74
 800890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008912:	4b7b      	ldr	r3, [pc, #492]	; (8008b00 <_vfiprintf_r+0x244>)
 8008914:	429d      	cmp	r5, r3
 8008916:	d101      	bne.n	800891c <_vfiprintf_r+0x60>
 8008918:	68b5      	ldr	r5, [r6, #8]
 800891a:	e7df      	b.n	80088dc <_vfiprintf_r+0x20>
 800891c:	4b79      	ldr	r3, [pc, #484]	; (8008b04 <_vfiprintf_r+0x248>)
 800891e:	429d      	cmp	r5, r3
 8008920:	bf08      	it	eq
 8008922:	68f5      	ldreq	r5, [r6, #12]
 8008924:	e7da      	b.n	80088dc <_vfiprintf_r+0x20>
 8008926:	89ab      	ldrh	r3, [r5, #12]
 8008928:	0598      	lsls	r0, r3, #22
 800892a:	d4ed      	bmi.n	8008908 <_vfiprintf_r+0x4c>
 800892c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800892e:	f000 fb76 	bl	800901e <__retarget_lock_release_recursive>
 8008932:	e7e9      	b.n	8008908 <_vfiprintf_r+0x4c>
 8008934:	2300      	movs	r3, #0
 8008936:	9309      	str	r3, [sp, #36]	; 0x24
 8008938:	2320      	movs	r3, #32
 800893a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800893e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008942:	2330      	movs	r3, #48	; 0x30
 8008944:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b08 <_vfiprintf_r+0x24c>
 8008948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800894c:	f04f 0901 	mov.w	r9, #1
 8008950:	4623      	mov	r3, r4
 8008952:	469a      	mov	sl, r3
 8008954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008958:	b10a      	cbz	r2, 800895e <_vfiprintf_r+0xa2>
 800895a:	2a25      	cmp	r2, #37	; 0x25
 800895c:	d1f9      	bne.n	8008952 <_vfiprintf_r+0x96>
 800895e:	ebba 0b04 	subs.w	fp, sl, r4
 8008962:	d00b      	beq.n	800897c <_vfiprintf_r+0xc0>
 8008964:	465b      	mov	r3, fp
 8008966:	4622      	mov	r2, r4
 8008968:	4629      	mov	r1, r5
 800896a:	4630      	mov	r0, r6
 800896c:	f7ff ff93 	bl	8008896 <__sfputs_r>
 8008970:	3001      	adds	r0, #1
 8008972:	f000 80aa 	beq.w	8008aca <_vfiprintf_r+0x20e>
 8008976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008978:	445a      	add	r2, fp
 800897a:	9209      	str	r2, [sp, #36]	; 0x24
 800897c:	f89a 3000 	ldrb.w	r3, [sl]
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 80a2 	beq.w	8008aca <_vfiprintf_r+0x20e>
 8008986:	2300      	movs	r3, #0
 8008988:	f04f 32ff 	mov.w	r2, #4294967295
 800898c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008990:	f10a 0a01 	add.w	sl, sl, #1
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	9307      	str	r3, [sp, #28]
 8008998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800899c:	931a      	str	r3, [sp, #104]	; 0x68
 800899e:	4654      	mov	r4, sl
 80089a0:	2205      	movs	r2, #5
 80089a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a6:	4858      	ldr	r0, [pc, #352]	; (8008b08 <_vfiprintf_r+0x24c>)
 80089a8:	f7f7 fc3a 	bl	8000220 <memchr>
 80089ac:	9a04      	ldr	r2, [sp, #16]
 80089ae:	b9d8      	cbnz	r0, 80089e8 <_vfiprintf_r+0x12c>
 80089b0:	06d1      	lsls	r1, r2, #27
 80089b2:	bf44      	itt	mi
 80089b4:	2320      	movmi	r3, #32
 80089b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ba:	0713      	lsls	r3, r2, #28
 80089bc:	bf44      	itt	mi
 80089be:	232b      	movmi	r3, #43	; 0x2b
 80089c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089c4:	f89a 3000 	ldrb.w	r3, [sl]
 80089c8:	2b2a      	cmp	r3, #42	; 0x2a
 80089ca:	d015      	beq.n	80089f8 <_vfiprintf_r+0x13c>
 80089cc:	9a07      	ldr	r2, [sp, #28]
 80089ce:	4654      	mov	r4, sl
 80089d0:	2000      	movs	r0, #0
 80089d2:	f04f 0c0a 	mov.w	ip, #10
 80089d6:	4621      	mov	r1, r4
 80089d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089dc:	3b30      	subs	r3, #48	; 0x30
 80089de:	2b09      	cmp	r3, #9
 80089e0:	d94e      	bls.n	8008a80 <_vfiprintf_r+0x1c4>
 80089e2:	b1b0      	cbz	r0, 8008a12 <_vfiprintf_r+0x156>
 80089e4:	9207      	str	r2, [sp, #28]
 80089e6:	e014      	b.n	8008a12 <_vfiprintf_r+0x156>
 80089e8:	eba0 0308 	sub.w	r3, r0, r8
 80089ec:	fa09 f303 	lsl.w	r3, r9, r3
 80089f0:	4313      	orrs	r3, r2
 80089f2:	9304      	str	r3, [sp, #16]
 80089f4:	46a2      	mov	sl, r4
 80089f6:	e7d2      	b.n	800899e <_vfiprintf_r+0xe2>
 80089f8:	9b03      	ldr	r3, [sp, #12]
 80089fa:	1d19      	adds	r1, r3, #4
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	9103      	str	r1, [sp, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	bfbb      	ittet	lt
 8008a04:	425b      	neglt	r3, r3
 8008a06:	f042 0202 	orrlt.w	r2, r2, #2
 8008a0a:	9307      	strge	r3, [sp, #28]
 8008a0c:	9307      	strlt	r3, [sp, #28]
 8008a0e:	bfb8      	it	lt
 8008a10:	9204      	strlt	r2, [sp, #16]
 8008a12:	7823      	ldrb	r3, [r4, #0]
 8008a14:	2b2e      	cmp	r3, #46	; 0x2e
 8008a16:	d10c      	bne.n	8008a32 <_vfiprintf_r+0x176>
 8008a18:	7863      	ldrb	r3, [r4, #1]
 8008a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a1c:	d135      	bne.n	8008a8a <_vfiprintf_r+0x1ce>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	1d1a      	adds	r2, r3, #4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	9203      	str	r2, [sp, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bfb8      	it	lt
 8008a2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a2e:	3402      	adds	r4, #2
 8008a30:	9305      	str	r3, [sp, #20]
 8008a32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b18 <_vfiprintf_r+0x25c>
 8008a36:	7821      	ldrb	r1, [r4, #0]
 8008a38:	2203      	movs	r2, #3
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	f7f7 fbf0 	bl	8000220 <memchr>
 8008a40:	b140      	cbz	r0, 8008a54 <_vfiprintf_r+0x198>
 8008a42:	2340      	movs	r3, #64	; 0x40
 8008a44:	eba0 000a 	sub.w	r0, r0, sl
 8008a48:	fa03 f000 	lsl.w	r0, r3, r0
 8008a4c:	9b04      	ldr	r3, [sp, #16]
 8008a4e:	4303      	orrs	r3, r0
 8008a50:	3401      	adds	r4, #1
 8008a52:	9304      	str	r3, [sp, #16]
 8008a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a58:	482c      	ldr	r0, [pc, #176]	; (8008b0c <_vfiprintf_r+0x250>)
 8008a5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a5e:	2206      	movs	r2, #6
 8008a60:	f7f7 fbde 	bl	8000220 <memchr>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d03f      	beq.n	8008ae8 <_vfiprintf_r+0x22c>
 8008a68:	4b29      	ldr	r3, [pc, #164]	; (8008b10 <_vfiprintf_r+0x254>)
 8008a6a:	bb1b      	cbnz	r3, 8008ab4 <_vfiprintf_r+0x1f8>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	3307      	adds	r3, #7
 8008a70:	f023 0307 	bic.w	r3, r3, #7
 8008a74:	3308      	adds	r3, #8
 8008a76:	9303      	str	r3, [sp, #12]
 8008a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a7a:	443b      	add	r3, r7
 8008a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a7e:	e767      	b.n	8008950 <_vfiprintf_r+0x94>
 8008a80:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a84:	460c      	mov	r4, r1
 8008a86:	2001      	movs	r0, #1
 8008a88:	e7a5      	b.n	80089d6 <_vfiprintf_r+0x11a>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	3401      	adds	r4, #1
 8008a8e:	9305      	str	r3, [sp, #20]
 8008a90:	4619      	mov	r1, r3
 8008a92:	f04f 0c0a 	mov.w	ip, #10
 8008a96:	4620      	mov	r0, r4
 8008a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a9c:	3a30      	subs	r2, #48	; 0x30
 8008a9e:	2a09      	cmp	r2, #9
 8008aa0:	d903      	bls.n	8008aaa <_vfiprintf_r+0x1ee>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d0c5      	beq.n	8008a32 <_vfiprintf_r+0x176>
 8008aa6:	9105      	str	r1, [sp, #20]
 8008aa8:	e7c3      	b.n	8008a32 <_vfiprintf_r+0x176>
 8008aaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aae:	4604      	mov	r4, r0
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e7f0      	b.n	8008a96 <_vfiprintf_r+0x1da>
 8008ab4:	ab03      	add	r3, sp, #12
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	462a      	mov	r2, r5
 8008aba:	4b16      	ldr	r3, [pc, #88]	; (8008b14 <_vfiprintf_r+0x258>)
 8008abc:	a904      	add	r1, sp, #16
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f3af 8000 	nop.w
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	1c78      	adds	r0, r7, #1
 8008ac8:	d1d6      	bne.n	8008a78 <_vfiprintf_r+0x1bc>
 8008aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008acc:	07d9      	lsls	r1, r3, #31
 8008ace:	d405      	bmi.n	8008adc <_vfiprintf_r+0x220>
 8008ad0:	89ab      	ldrh	r3, [r5, #12]
 8008ad2:	059a      	lsls	r2, r3, #22
 8008ad4:	d402      	bmi.n	8008adc <_vfiprintf_r+0x220>
 8008ad6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ad8:	f000 faa1 	bl	800901e <__retarget_lock_release_recursive>
 8008adc:	89ab      	ldrh	r3, [r5, #12]
 8008ade:	065b      	lsls	r3, r3, #25
 8008ae0:	f53f af12 	bmi.w	8008908 <_vfiprintf_r+0x4c>
 8008ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ae6:	e711      	b.n	800890c <_vfiprintf_r+0x50>
 8008ae8:	ab03      	add	r3, sp, #12
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	462a      	mov	r2, r5
 8008aee:	4b09      	ldr	r3, [pc, #36]	; (8008b14 <_vfiprintf_r+0x258>)
 8008af0:	a904      	add	r1, sp, #16
 8008af2:	4630      	mov	r0, r6
 8008af4:	f7fe fe6e 	bl	80077d4 <_printf_i>
 8008af8:	e7e4      	b.n	8008ac4 <_vfiprintf_r+0x208>
 8008afa:	bf00      	nop
 8008afc:	08009d18 	.word	0x08009d18
 8008b00:	08009d38 	.word	0x08009d38
 8008b04:	08009cf8 	.word	0x08009cf8
 8008b08:	08009ce4 	.word	0x08009ce4
 8008b0c:	08009cee 	.word	0x08009cee
 8008b10:	00000000 	.word	0x00000000
 8008b14:	08008897 	.word	0x08008897
 8008b18:	08009cea 	.word	0x08009cea

08008b1c <__swbuf_r>:
 8008b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1e:	460e      	mov	r6, r1
 8008b20:	4614      	mov	r4, r2
 8008b22:	4605      	mov	r5, r0
 8008b24:	b118      	cbz	r0, 8008b2e <__swbuf_r+0x12>
 8008b26:	6983      	ldr	r3, [r0, #24]
 8008b28:	b90b      	cbnz	r3, 8008b2e <__swbuf_r+0x12>
 8008b2a:	f000 f9d9 	bl	8008ee0 <__sinit>
 8008b2e:	4b21      	ldr	r3, [pc, #132]	; (8008bb4 <__swbuf_r+0x98>)
 8008b30:	429c      	cmp	r4, r3
 8008b32:	d12b      	bne.n	8008b8c <__swbuf_r+0x70>
 8008b34:	686c      	ldr	r4, [r5, #4]
 8008b36:	69a3      	ldr	r3, [r4, #24]
 8008b38:	60a3      	str	r3, [r4, #8]
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	071a      	lsls	r2, r3, #28
 8008b3e:	d52f      	bpl.n	8008ba0 <__swbuf_r+0x84>
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	b36b      	cbz	r3, 8008ba0 <__swbuf_r+0x84>
 8008b44:	6923      	ldr	r3, [r4, #16]
 8008b46:	6820      	ldr	r0, [r4, #0]
 8008b48:	1ac0      	subs	r0, r0, r3
 8008b4a:	6963      	ldr	r3, [r4, #20]
 8008b4c:	b2f6      	uxtb	r6, r6
 8008b4e:	4283      	cmp	r3, r0
 8008b50:	4637      	mov	r7, r6
 8008b52:	dc04      	bgt.n	8008b5e <__swbuf_r+0x42>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4628      	mov	r0, r5
 8008b58:	f000 f92e 	bl	8008db8 <_fflush_r>
 8008b5c:	bb30      	cbnz	r0, 8008bac <__swbuf_r+0x90>
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	60a3      	str	r3, [r4, #8]
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	6022      	str	r2, [r4, #0]
 8008b6a:	701e      	strb	r6, [r3, #0]
 8008b6c:	6963      	ldr	r3, [r4, #20]
 8008b6e:	3001      	adds	r0, #1
 8008b70:	4283      	cmp	r3, r0
 8008b72:	d004      	beq.n	8008b7e <__swbuf_r+0x62>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	07db      	lsls	r3, r3, #31
 8008b78:	d506      	bpl.n	8008b88 <__swbuf_r+0x6c>
 8008b7a:	2e0a      	cmp	r6, #10
 8008b7c:	d104      	bne.n	8008b88 <__swbuf_r+0x6c>
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	f000 f919 	bl	8008db8 <_fflush_r>
 8008b86:	b988      	cbnz	r0, 8008bac <__swbuf_r+0x90>
 8008b88:	4638      	mov	r0, r7
 8008b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	; (8008bb8 <__swbuf_r+0x9c>)
 8008b8e:	429c      	cmp	r4, r3
 8008b90:	d101      	bne.n	8008b96 <__swbuf_r+0x7a>
 8008b92:	68ac      	ldr	r4, [r5, #8]
 8008b94:	e7cf      	b.n	8008b36 <__swbuf_r+0x1a>
 8008b96:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <__swbuf_r+0xa0>)
 8008b98:	429c      	cmp	r4, r3
 8008b9a:	bf08      	it	eq
 8008b9c:	68ec      	ldreq	r4, [r5, #12]
 8008b9e:	e7ca      	b.n	8008b36 <__swbuf_r+0x1a>
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f000 f80c 	bl	8008bc0 <__swsetup_r>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d0cb      	beq.n	8008b44 <__swbuf_r+0x28>
 8008bac:	f04f 37ff 	mov.w	r7, #4294967295
 8008bb0:	e7ea      	b.n	8008b88 <__swbuf_r+0x6c>
 8008bb2:	bf00      	nop
 8008bb4:	08009d18 	.word	0x08009d18
 8008bb8:	08009d38 	.word	0x08009d38
 8008bbc:	08009cf8 	.word	0x08009cf8

08008bc0 <__swsetup_r>:
 8008bc0:	4b32      	ldr	r3, [pc, #200]	; (8008c8c <__swsetup_r+0xcc>)
 8008bc2:	b570      	push	{r4, r5, r6, lr}
 8008bc4:	681d      	ldr	r5, [r3, #0]
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	460c      	mov	r4, r1
 8008bca:	b125      	cbz	r5, 8008bd6 <__swsetup_r+0x16>
 8008bcc:	69ab      	ldr	r3, [r5, #24]
 8008bce:	b913      	cbnz	r3, 8008bd6 <__swsetup_r+0x16>
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	f000 f985 	bl	8008ee0 <__sinit>
 8008bd6:	4b2e      	ldr	r3, [pc, #184]	; (8008c90 <__swsetup_r+0xd0>)
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	d10f      	bne.n	8008bfc <__swsetup_r+0x3c>
 8008bdc:	686c      	ldr	r4, [r5, #4]
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008be4:	0719      	lsls	r1, r3, #28
 8008be6:	d42c      	bmi.n	8008c42 <__swsetup_r+0x82>
 8008be8:	06dd      	lsls	r5, r3, #27
 8008bea:	d411      	bmi.n	8008c10 <__swsetup_r+0x50>
 8008bec:	2309      	movs	r3, #9
 8008bee:	6033      	str	r3, [r6, #0]
 8008bf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bf4:	81a3      	strh	r3, [r4, #12]
 8008bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfa:	e03e      	b.n	8008c7a <__swsetup_r+0xba>
 8008bfc:	4b25      	ldr	r3, [pc, #148]	; (8008c94 <__swsetup_r+0xd4>)
 8008bfe:	429c      	cmp	r4, r3
 8008c00:	d101      	bne.n	8008c06 <__swsetup_r+0x46>
 8008c02:	68ac      	ldr	r4, [r5, #8]
 8008c04:	e7eb      	b.n	8008bde <__swsetup_r+0x1e>
 8008c06:	4b24      	ldr	r3, [pc, #144]	; (8008c98 <__swsetup_r+0xd8>)
 8008c08:	429c      	cmp	r4, r3
 8008c0a:	bf08      	it	eq
 8008c0c:	68ec      	ldreq	r4, [r5, #12]
 8008c0e:	e7e6      	b.n	8008bde <__swsetup_r+0x1e>
 8008c10:	0758      	lsls	r0, r3, #29
 8008c12:	d512      	bpl.n	8008c3a <__swsetup_r+0x7a>
 8008c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c16:	b141      	cbz	r1, 8008c2a <__swsetup_r+0x6a>
 8008c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c1c:	4299      	cmp	r1, r3
 8008c1e:	d002      	beq.n	8008c26 <__swsetup_r+0x66>
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7ff fdd5 	bl	80087d0 <_free_r>
 8008c26:	2300      	movs	r3, #0
 8008c28:	6363      	str	r3, [r4, #52]	; 0x34
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c30:	81a3      	strh	r3, [r4, #12]
 8008c32:	2300      	movs	r3, #0
 8008c34:	6063      	str	r3, [r4, #4]
 8008c36:	6923      	ldr	r3, [r4, #16]
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	f043 0308 	orr.w	r3, r3, #8
 8008c40:	81a3      	strh	r3, [r4, #12]
 8008c42:	6923      	ldr	r3, [r4, #16]
 8008c44:	b94b      	cbnz	r3, 8008c5a <__swsetup_r+0x9a>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c50:	d003      	beq.n	8008c5a <__swsetup_r+0x9a>
 8008c52:	4621      	mov	r1, r4
 8008c54:	4630      	mov	r0, r6
 8008c56:	f000 fa09 	bl	800906c <__smakebuf_r>
 8008c5a:	89a0      	ldrh	r0, [r4, #12]
 8008c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c60:	f010 0301 	ands.w	r3, r0, #1
 8008c64:	d00a      	beq.n	8008c7c <__swsetup_r+0xbc>
 8008c66:	2300      	movs	r3, #0
 8008c68:	60a3      	str	r3, [r4, #8]
 8008c6a:	6963      	ldr	r3, [r4, #20]
 8008c6c:	425b      	negs	r3, r3
 8008c6e:	61a3      	str	r3, [r4, #24]
 8008c70:	6923      	ldr	r3, [r4, #16]
 8008c72:	b943      	cbnz	r3, 8008c86 <__swsetup_r+0xc6>
 8008c74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c78:	d1ba      	bne.n	8008bf0 <__swsetup_r+0x30>
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}
 8008c7c:	0781      	lsls	r1, r0, #30
 8008c7e:	bf58      	it	pl
 8008c80:	6963      	ldrpl	r3, [r4, #20]
 8008c82:	60a3      	str	r3, [r4, #8]
 8008c84:	e7f4      	b.n	8008c70 <__swsetup_r+0xb0>
 8008c86:	2000      	movs	r0, #0
 8008c88:	e7f7      	b.n	8008c7a <__swsetup_r+0xba>
 8008c8a:	bf00      	nop
 8008c8c:	20000014 	.word	0x20000014
 8008c90:	08009d18 	.word	0x08009d18
 8008c94:	08009d38 	.word	0x08009d38
 8008c98:	08009cf8 	.word	0x08009cf8

08008c9c <abort>:
 8008c9c:	b508      	push	{r3, lr}
 8008c9e:	2006      	movs	r0, #6
 8008ca0:	f000 fa4c 	bl	800913c <raise>
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	f7f9 f8d5 	bl	8001e54 <_exit>
	...

08008cac <__sflush_r>:
 8008cac:	898a      	ldrh	r2, [r1, #12]
 8008cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	0710      	lsls	r0, r2, #28
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	d458      	bmi.n	8008d6c <__sflush_r+0xc0>
 8008cba:	684b      	ldr	r3, [r1, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dc05      	bgt.n	8008ccc <__sflush_r+0x20>
 8008cc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dc02      	bgt.n	8008ccc <__sflush_r+0x20>
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	d0f9      	beq.n	8008cc6 <__sflush_r+0x1a>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cd8:	682f      	ldr	r7, [r5, #0]
 8008cda:	602b      	str	r3, [r5, #0]
 8008cdc:	d032      	beq.n	8008d44 <__sflush_r+0x98>
 8008cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	075a      	lsls	r2, r3, #29
 8008ce4:	d505      	bpl.n	8008cf2 <__sflush_r+0x46>
 8008ce6:	6863      	ldr	r3, [r4, #4]
 8008ce8:	1ac0      	subs	r0, r0, r3
 8008cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cec:	b10b      	cbz	r3, 8008cf2 <__sflush_r+0x46>
 8008cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cf0:	1ac0      	subs	r0, r0, r3
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cf8:	6a21      	ldr	r1, [r4, #32]
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	47b0      	blx	r6
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	d106      	bne.n	8008d12 <__sflush_r+0x66>
 8008d04:	6829      	ldr	r1, [r5, #0]
 8008d06:	291d      	cmp	r1, #29
 8008d08:	d82c      	bhi.n	8008d64 <__sflush_r+0xb8>
 8008d0a:	4a2a      	ldr	r2, [pc, #168]	; (8008db4 <__sflush_r+0x108>)
 8008d0c:	40ca      	lsrs	r2, r1
 8008d0e:	07d6      	lsls	r6, r2, #31
 8008d10:	d528      	bpl.n	8008d64 <__sflush_r+0xb8>
 8008d12:	2200      	movs	r2, #0
 8008d14:	6062      	str	r2, [r4, #4]
 8008d16:	04d9      	lsls	r1, r3, #19
 8008d18:	6922      	ldr	r2, [r4, #16]
 8008d1a:	6022      	str	r2, [r4, #0]
 8008d1c:	d504      	bpl.n	8008d28 <__sflush_r+0x7c>
 8008d1e:	1c42      	adds	r2, r0, #1
 8008d20:	d101      	bne.n	8008d26 <__sflush_r+0x7a>
 8008d22:	682b      	ldr	r3, [r5, #0]
 8008d24:	b903      	cbnz	r3, 8008d28 <__sflush_r+0x7c>
 8008d26:	6560      	str	r0, [r4, #84]	; 0x54
 8008d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d2a:	602f      	str	r7, [r5, #0]
 8008d2c:	2900      	cmp	r1, #0
 8008d2e:	d0ca      	beq.n	8008cc6 <__sflush_r+0x1a>
 8008d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d34:	4299      	cmp	r1, r3
 8008d36:	d002      	beq.n	8008d3e <__sflush_r+0x92>
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f7ff fd49 	bl	80087d0 <_free_r>
 8008d3e:	2000      	movs	r0, #0
 8008d40:	6360      	str	r0, [r4, #52]	; 0x34
 8008d42:	e7c1      	b.n	8008cc8 <__sflush_r+0x1c>
 8008d44:	6a21      	ldr	r1, [r4, #32]
 8008d46:	2301      	movs	r3, #1
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b0      	blx	r6
 8008d4c:	1c41      	adds	r1, r0, #1
 8008d4e:	d1c7      	bne.n	8008ce0 <__sflush_r+0x34>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0c4      	beq.n	8008ce0 <__sflush_r+0x34>
 8008d56:	2b1d      	cmp	r3, #29
 8008d58:	d001      	beq.n	8008d5e <__sflush_r+0xb2>
 8008d5a:	2b16      	cmp	r3, #22
 8008d5c:	d101      	bne.n	8008d62 <__sflush_r+0xb6>
 8008d5e:	602f      	str	r7, [r5, #0]
 8008d60:	e7b1      	b.n	8008cc6 <__sflush_r+0x1a>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d68:	81a3      	strh	r3, [r4, #12]
 8008d6a:	e7ad      	b.n	8008cc8 <__sflush_r+0x1c>
 8008d6c:	690f      	ldr	r7, [r1, #16]
 8008d6e:	2f00      	cmp	r7, #0
 8008d70:	d0a9      	beq.n	8008cc6 <__sflush_r+0x1a>
 8008d72:	0793      	lsls	r3, r2, #30
 8008d74:	680e      	ldr	r6, [r1, #0]
 8008d76:	bf08      	it	eq
 8008d78:	694b      	ldreq	r3, [r1, #20]
 8008d7a:	600f      	str	r7, [r1, #0]
 8008d7c:	bf18      	it	ne
 8008d7e:	2300      	movne	r3, #0
 8008d80:	eba6 0807 	sub.w	r8, r6, r7
 8008d84:	608b      	str	r3, [r1, #8]
 8008d86:	f1b8 0f00 	cmp.w	r8, #0
 8008d8a:	dd9c      	ble.n	8008cc6 <__sflush_r+0x1a>
 8008d8c:	6a21      	ldr	r1, [r4, #32]
 8008d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d90:	4643      	mov	r3, r8
 8008d92:	463a      	mov	r2, r7
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b0      	blx	r6
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	dc06      	bgt.n	8008daa <__sflush_r+0xfe>
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da2:	81a3      	strh	r3, [r4, #12]
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295
 8008da8:	e78e      	b.n	8008cc8 <__sflush_r+0x1c>
 8008daa:	4407      	add	r7, r0
 8008dac:	eba8 0800 	sub.w	r8, r8, r0
 8008db0:	e7e9      	b.n	8008d86 <__sflush_r+0xda>
 8008db2:	bf00      	nop
 8008db4:	20400001 	.word	0x20400001

08008db8 <_fflush_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	690b      	ldr	r3, [r1, #16]
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	b913      	cbnz	r3, 8008dc8 <_fflush_r+0x10>
 8008dc2:	2500      	movs	r5, #0
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	b118      	cbz	r0, 8008dd2 <_fflush_r+0x1a>
 8008dca:	6983      	ldr	r3, [r0, #24]
 8008dcc:	b90b      	cbnz	r3, 8008dd2 <_fflush_r+0x1a>
 8008dce:	f000 f887 	bl	8008ee0 <__sinit>
 8008dd2:	4b14      	ldr	r3, [pc, #80]	; (8008e24 <_fflush_r+0x6c>)
 8008dd4:	429c      	cmp	r4, r3
 8008dd6:	d11b      	bne.n	8008e10 <_fflush_r+0x58>
 8008dd8:	686c      	ldr	r4, [r5, #4]
 8008dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0ef      	beq.n	8008dc2 <_fflush_r+0xa>
 8008de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008de4:	07d0      	lsls	r0, r2, #31
 8008de6:	d404      	bmi.n	8008df2 <_fflush_r+0x3a>
 8008de8:	0599      	lsls	r1, r3, #22
 8008dea:	d402      	bmi.n	8008df2 <_fflush_r+0x3a>
 8008dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dee:	f000 f915 	bl	800901c <__retarget_lock_acquire_recursive>
 8008df2:	4628      	mov	r0, r5
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7ff ff59 	bl	8008cac <__sflush_r>
 8008dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dfc:	07da      	lsls	r2, r3, #31
 8008dfe:	4605      	mov	r5, r0
 8008e00:	d4e0      	bmi.n	8008dc4 <_fflush_r+0xc>
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	059b      	lsls	r3, r3, #22
 8008e06:	d4dd      	bmi.n	8008dc4 <_fflush_r+0xc>
 8008e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e0a:	f000 f908 	bl	800901e <__retarget_lock_release_recursive>
 8008e0e:	e7d9      	b.n	8008dc4 <_fflush_r+0xc>
 8008e10:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <_fflush_r+0x70>)
 8008e12:	429c      	cmp	r4, r3
 8008e14:	d101      	bne.n	8008e1a <_fflush_r+0x62>
 8008e16:	68ac      	ldr	r4, [r5, #8]
 8008e18:	e7df      	b.n	8008dda <_fflush_r+0x22>
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <_fflush_r+0x74>)
 8008e1c:	429c      	cmp	r4, r3
 8008e1e:	bf08      	it	eq
 8008e20:	68ec      	ldreq	r4, [r5, #12]
 8008e22:	e7da      	b.n	8008dda <_fflush_r+0x22>
 8008e24:	08009d18 	.word	0x08009d18
 8008e28:	08009d38 	.word	0x08009d38
 8008e2c:	08009cf8 	.word	0x08009cf8

08008e30 <std>:
 8008e30:	2300      	movs	r3, #0
 8008e32:	b510      	push	{r4, lr}
 8008e34:	4604      	mov	r4, r0
 8008e36:	e9c0 3300 	strd	r3, r3, [r0]
 8008e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e3e:	6083      	str	r3, [r0, #8]
 8008e40:	8181      	strh	r1, [r0, #12]
 8008e42:	6643      	str	r3, [r0, #100]	; 0x64
 8008e44:	81c2      	strh	r2, [r0, #14]
 8008e46:	6183      	str	r3, [r0, #24]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	2208      	movs	r2, #8
 8008e4c:	305c      	adds	r0, #92	; 0x5c
 8008e4e:	f7fd feb7 	bl	8006bc0 <memset>
 8008e52:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <std+0x38>)
 8008e54:	6263      	str	r3, [r4, #36]	; 0x24
 8008e56:	4b05      	ldr	r3, [pc, #20]	; (8008e6c <std+0x3c>)
 8008e58:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e5a:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <std+0x40>)
 8008e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <std+0x44>)
 8008e60:	6224      	str	r4, [r4, #32]
 8008e62:	6323      	str	r3, [r4, #48]	; 0x30
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	bf00      	nop
 8008e68:	08009175 	.word	0x08009175
 8008e6c:	08009197 	.word	0x08009197
 8008e70:	080091cf 	.word	0x080091cf
 8008e74:	080091f3 	.word	0x080091f3

08008e78 <_cleanup_r>:
 8008e78:	4901      	ldr	r1, [pc, #4]	; (8008e80 <_cleanup_r+0x8>)
 8008e7a:	f000 b8af 	b.w	8008fdc <_fwalk_reent>
 8008e7e:	bf00      	nop
 8008e80:	08008db9 	.word	0x08008db9

08008e84 <__sfmoreglue>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	2268      	movs	r2, #104	; 0x68
 8008e88:	1e4d      	subs	r5, r1, #1
 8008e8a:	4355      	muls	r5, r2
 8008e8c:	460e      	mov	r6, r1
 8008e8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e92:	f7fe fbbd 	bl	8007610 <_malloc_r>
 8008e96:	4604      	mov	r4, r0
 8008e98:	b140      	cbz	r0, 8008eac <__sfmoreglue+0x28>
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	e9c0 1600 	strd	r1, r6, [r0]
 8008ea0:	300c      	adds	r0, #12
 8008ea2:	60a0      	str	r0, [r4, #8]
 8008ea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ea8:	f7fd fe8a 	bl	8006bc0 <memset>
 8008eac:	4620      	mov	r0, r4
 8008eae:	bd70      	pop	{r4, r5, r6, pc}

08008eb0 <__sfp_lock_acquire>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__sfp_lock_acquire+0x8>)
 8008eb2:	f000 b8b3 	b.w	800901c <__retarget_lock_acquire_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	200006d5 	.word	0x200006d5

08008ebc <__sfp_lock_release>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__sfp_lock_release+0x8>)
 8008ebe:	f000 b8ae 	b.w	800901e <__retarget_lock_release_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	200006d5 	.word	0x200006d5

08008ec8 <__sinit_lock_acquire>:
 8008ec8:	4801      	ldr	r0, [pc, #4]	; (8008ed0 <__sinit_lock_acquire+0x8>)
 8008eca:	f000 b8a7 	b.w	800901c <__retarget_lock_acquire_recursive>
 8008ece:	bf00      	nop
 8008ed0:	200006d6 	.word	0x200006d6

08008ed4 <__sinit_lock_release>:
 8008ed4:	4801      	ldr	r0, [pc, #4]	; (8008edc <__sinit_lock_release+0x8>)
 8008ed6:	f000 b8a2 	b.w	800901e <__retarget_lock_release_recursive>
 8008eda:	bf00      	nop
 8008edc:	200006d6 	.word	0x200006d6

08008ee0 <__sinit>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	f7ff fff0 	bl	8008ec8 <__sinit_lock_acquire>
 8008ee8:	69a3      	ldr	r3, [r4, #24]
 8008eea:	b11b      	cbz	r3, 8008ef4 <__sinit+0x14>
 8008eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ef0:	f7ff bff0 	b.w	8008ed4 <__sinit_lock_release>
 8008ef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8008efa:	4b13      	ldr	r3, [pc, #76]	; (8008f48 <__sinit+0x68>)
 8008efc:	4a13      	ldr	r2, [pc, #76]	; (8008f4c <__sinit+0x6c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	bf04      	itt	eq
 8008f06:	2301      	moveq	r3, #1
 8008f08:	61a3      	streq	r3, [r4, #24]
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f000 f820 	bl	8008f50 <__sfp>
 8008f10:	6060      	str	r0, [r4, #4]
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 f81c 	bl	8008f50 <__sfp>
 8008f18:	60a0      	str	r0, [r4, #8]
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 f818 	bl	8008f50 <__sfp>
 8008f20:	2200      	movs	r2, #0
 8008f22:	60e0      	str	r0, [r4, #12]
 8008f24:	2104      	movs	r1, #4
 8008f26:	6860      	ldr	r0, [r4, #4]
 8008f28:	f7ff ff82 	bl	8008e30 <std>
 8008f2c:	68a0      	ldr	r0, [r4, #8]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	2109      	movs	r1, #9
 8008f32:	f7ff ff7d 	bl	8008e30 <std>
 8008f36:	68e0      	ldr	r0, [r4, #12]
 8008f38:	2202      	movs	r2, #2
 8008f3a:	2112      	movs	r1, #18
 8008f3c:	f7ff ff78 	bl	8008e30 <std>
 8008f40:	2301      	movs	r3, #1
 8008f42:	61a3      	str	r3, [r4, #24]
 8008f44:	e7d2      	b.n	8008eec <__sinit+0xc>
 8008f46:	bf00      	nop
 8008f48:	08009a94 	.word	0x08009a94
 8008f4c:	08008e79 	.word	0x08008e79

08008f50 <__sfp>:
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f52:	4607      	mov	r7, r0
 8008f54:	f7ff ffac 	bl	8008eb0 <__sfp_lock_acquire>
 8008f58:	4b1e      	ldr	r3, [pc, #120]	; (8008fd4 <__sfp+0x84>)
 8008f5a:	681e      	ldr	r6, [r3, #0]
 8008f5c:	69b3      	ldr	r3, [r6, #24]
 8008f5e:	b913      	cbnz	r3, 8008f66 <__sfp+0x16>
 8008f60:	4630      	mov	r0, r6
 8008f62:	f7ff ffbd 	bl	8008ee0 <__sinit>
 8008f66:	3648      	adds	r6, #72	; 0x48
 8008f68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	d503      	bpl.n	8008f78 <__sfp+0x28>
 8008f70:	6833      	ldr	r3, [r6, #0]
 8008f72:	b30b      	cbz	r3, 8008fb8 <__sfp+0x68>
 8008f74:	6836      	ldr	r6, [r6, #0]
 8008f76:	e7f7      	b.n	8008f68 <__sfp+0x18>
 8008f78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f7c:	b9d5      	cbnz	r5, 8008fb4 <__sfp+0x64>
 8008f7e:	4b16      	ldr	r3, [pc, #88]	; (8008fd8 <__sfp+0x88>)
 8008f80:	60e3      	str	r3, [r4, #12]
 8008f82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f86:	6665      	str	r5, [r4, #100]	; 0x64
 8008f88:	f000 f847 	bl	800901a <__retarget_lock_init_recursive>
 8008f8c:	f7ff ff96 	bl	8008ebc <__sfp_lock_release>
 8008f90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f98:	6025      	str	r5, [r4, #0]
 8008f9a:	61a5      	str	r5, [r4, #24]
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fa4:	f7fd fe0c 	bl	8006bc0 <memset>
 8008fa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008fac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb4:	3468      	adds	r4, #104	; 0x68
 8008fb6:	e7d9      	b.n	8008f6c <__sfp+0x1c>
 8008fb8:	2104      	movs	r1, #4
 8008fba:	4638      	mov	r0, r7
 8008fbc:	f7ff ff62 	bl	8008e84 <__sfmoreglue>
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	6030      	str	r0, [r6, #0]
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d1d5      	bne.n	8008f74 <__sfp+0x24>
 8008fc8:	f7ff ff78 	bl	8008ebc <__sfp_lock_release>
 8008fcc:	230c      	movs	r3, #12
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	e7ee      	b.n	8008fb0 <__sfp+0x60>
 8008fd2:	bf00      	nop
 8008fd4:	08009a94 	.word	0x08009a94
 8008fd8:	ffff0001 	.word	0xffff0001

08008fdc <_fwalk_reent>:
 8008fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	4688      	mov	r8, r1
 8008fe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fe8:	2700      	movs	r7, #0
 8008fea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fee:	f1b9 0901 	subs.w	r9, r9, #1
 8008ff2:	d505      	bpl.n	8009000 <_fwalk_reent+0x24>
 8008ff4:	6824      	ldr	r4, [r4, #0]
 8008ff6:	2c00      	cmp	r4, #0
 8008ff8:	d1f7      	bne.n	8008fea <_fwalk_reent+0xe>
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009000:	89ab      	ldrh	r3, [r5, #12]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d907      	bls.n	8009016 <_fwalk_reent+0x3a>
 8009006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800900a:	3301      	adds	r3, #1
 800900c:	d003      	beq.n	8009016 <_fwalk_reent+0x3a>
 800900e:	4629      	mov	r1, r5
 8009010:	4630      	mov	r0, r6
 8009012:	47c0      	blx	r8
 8009014:	4307      	orrs	r7, r0
 8009016:	3568      	adds	r5, #104	; 0x68
 8009018:	e7e9      	b.n	8008fee <_fwalk_reent+0x12>

0800901a <__retarget_lock_init_recursive>:
 800901a:	4770      	bx	lr

0800901c <__retarget_lock_acquire_recursive>:
 800901c:	4770      	bx	lr

0800901e <__retarget_lock_release_recursive>:
 800901e:	4770      	bx	lr

08009020 <__swhatbuf_r>:
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	460e      	mov	r6, r1
 8009024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009028:	2900      	cmp	r1, #0
 800902a:	b096      	sub	sp, #88	; 0x58
 800902c:	4614      	mov	r4, r2
 800902e:	461d      	mov	r5, r3
 8009030:	da08      	bge.n	8009044 <__swhatbuf_r+0x24>
 8009032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	602a      	str	r2, [r5, #0]
 800903a:	061a      	lsls	r2, r3, #24
 800903c:	d410      	bmi.n	8009060 <__swhatbuf_r+0x40>
 800903e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009042:	e00e      	b.n	8009062 <__swhatbuf_r+0x42>
 8009044:	466a      	mov	r2, sp
 8009046:	f000 f8fb 	bl	8009240 <_fstat_r>
 800904a:	2800      	cmp	r0, #0
 800904c:	dbf1      	blt.n	8009032 <__swhatbuf_r+0x12>
 800904e:	9a01      	ldr	r2, [sp, #4]
 8009050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009058:	425a      	negs	r2, r3
 800905a:	415a      	adcs	r2, r3
 800905c:	602a      	str	r2, [r5, #0]
 800905e:	e7ee      	b.n	800903e <__swhatbuf_r+0x1e>
 8009060:	2340      	movs	r3, #64	; 0x40
 8009062:	2000      	movs	r0, #0
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	b016      	add	sp, #88	; 0x58
 8009068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800906c <__smakebuf_r>:
 800906c:	898b      	ldrh	r3, [r1, #12]
 800906e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009070:	079d      	lsls	r5, r3, #30
 8009072:	4606      	mov	r6, r0
 8009074:	460c      	mov	r4, r1
 8009076:	d507      	bpl.n	8009088 <__smakebuf_r+0x1c>
 8009078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	6123      	str	r3, [r4, #16]
 8009080:	2301      	movs	r3, #1
 8009082:	6163      	str	r3, [r4, #20]
 8009084:	b002      	add	sp, #8
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	ab01      	add	r3, sp, #4
 800908a:	466a      	mov	r2, sp
 800908c:	f7ff ffc8 	bl	8009020 <__swhatbuf_r>
 8009090:	9900      	ldr	r1, [sp, #0]
 8009092:	4605      	mov	r5, r0
 8009094:	4630      	mov	r0, r6
 8009096:	f7fe fabb 	bl	8007610 <_malloc_r>
 800909a:	b948      	cbnz	r0, 80090b0 <__smakebuf_r+0x44>
 800909c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a0:	059a      	lsls	r2, r3, #22
 80090a2:	d4ef      	bmi.n	8009084 <__smakebuf_r+0x18>
 80090a4:	f023 0303 	bic.w	r3, r3, #3
 80090a8:	f043 0302 	orr.w	r3, r3, #2
 80090ac:	81a3      	strh	r3, [r4, #12]
 80090ae:	e7e3      	b.n	8009078 <__smakebuf_r+0xc>
 80090b0:	4b0d      	ldr	r3, [pc, #52]	; (80090e8 <__smakebuf_r+0x7c>)
 80090b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	6020      	str	r0, [r4, #0]
 80090b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090bc:	81a3      	strh	r3, [r4, #12]
 80090be:	9b00      	ldr	r3, [sp, #0]
 80090c0:	6163      	str	r3, [r4, #20]
 80090c2:	9b01      	ldr	r3, [sp, #4]
 80090c4:	6120      	str	r0, [r4, #16]
 80090c6:	b15b      	cbz	r3, 80090e0 <__smakebuf_r+0x74>
 80090c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090cc:	4630      	mov	r0, r6
 80090ce:	f000 f8c9 	bl	8009264 <_isatty_r>
 80090d2:	b128      	cbz	r0, 80090e0 <__smakebuf_r+0x74>
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	f023 0303 	bic.w	r3, r3, #3
 80090da:	f043 0301 	orr.w	r3, r3, #1
 80090de:	81a3      	strh	r3, [r4, #12]
 80090e0:	89a0      	ldrh	r0, [r4, #12]
 80090e2:	4305      	orrs	r5, r0
 80090e4:	81a5      	strh	r5, [r4, #12]
 80090e6:	e7cd      	b.n	8009084 <__smakebuf_r+0x18>
 80090e8:	08008e79 	.word	0x08008e79

080090ec <_raise_r>:
 80090ec:	291f      	cmp	r1, #31
 80090ee:	b538      	push	{r3, r4, r5, lr}
 80090f0:	4604      	mov	r4, r0
 80090f2:	460d      	mov	r5, r1
 80090f4:	d904      	bls.n	8009100 <_raise_r+0x14>
 80090f6:	2316      	movs	r3, #22
 80090f8:	6003      	str	r3, [r0, #0]
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009102:	b112      	cbz	r2, 800910a <_raise_r+0x1e>
 8009104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009108:	b94b      	cbnz	r3, 800911e <_raise_r+0x32>
 800910a:	4620      	mov	r0, r4
 800910c:	f000 f830 	bl	8009170 <_getpid_r>
 8009110:	462a      	mov	r2, r5
 8009112:	4601      	mov	r1, r0
 8009114:	4620      	mov	r0, r4
 8009116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800911a:	f000 b817 	b.w	800914c <_kill_r>
 800911e:	2b01      	cmp	r3, #1
 8009120:	d00a      	beq.n	8009138 <_raise_r+0x4c>
 8009122:	1c59      	adds	r1, r3, #1
 8009124:	d103      	bne.n	800912e <_raise_r+0x42>
 8009126:	2316      	movs	r3, #22
 8009128:	6003      	str	r3, [r0, #0]
 800912a:	2001      	movs	r0, #1
 800912c:	e7e7      	b.n	80090fe <_raise_r+0x12>
 800912e:	2400      	movs	r4, #0
 8009130:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009134:	4628      	mov	r0, r5
 8009136:	4798      	blx	r3
 8009138:	2000      	movs	r0, #0
 800913a:	e7e0      	b.n	80090fe <_raise_r+0x12>

0800913c <raise>:
 800913c:	4b02      	ldr	r3, [pc, #8]	; (8009148 <raise+0xc>)
 800913e:	4601      	mov	r1, r0
 8009140:	6818      	ldr	r0, [r3, #0]
 8009142:	f7ff bfd3 	b.w	80090ec <_raise_r>
 8009146:	bf00      	nop
 8009148:	20000014 	.word	0x20000014

0800914c <_kill_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	4d07      	ldr	r5, [pc, #28]	; (800916c <_kill_r+0x20>)
 8009150:	2300      	movs	r3, #0
 8009152:	4604      	mov	r4, r0
 8009154:	4608      	mov	r0, r1
 8009156:	4611      	mov	r1, r2
 8009158:	602b      	str	r3, [r5, #0]
 800915a:	f7f8 fe6b 	bl	8001e34 <_kill>
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	d102      	bne.n	8009168 <_kill_r+0x1c>
 8009162:	682b      	ldr	r3, [r5, #0]
 8009164:	b103      	cbz	r3, 8009168 <_kill_r+0x1c>
 8009166:	6023      	str	r3, [r4, #0]
 8009168:	bd38      	pop	{r3, r4, r5, pc}
 800916a:	bf00      	nop
 800916c:	200006d0 	.word	0x200006d0

08009170 <_getpid_r>:
 8009170:	f7f8 be58 	b.w	8001e24 <_getpid>

08009174 <__sread>:
 8009174:	b510      	push	{r4, lr}
 8009176:	460c      	mov	r4, r1
 8009178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917c:	f000 f894 	bl	80092a8 <_read_r>
 8009180:	2800      	cmp	r0, #0
 8009182:	bfab      	itete	ge
 8009184:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009186:	89a3      	ldrhlt	r3, [r4, #12]
 8009188:	181b      	addge	r3, r3, r0
 800918a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800918e:	bfac      	ite	ge
 8009190:	6563      	strge	r3, [r4, #84]	; 0x54
 8009192:	81a3      	strhlt	r3, [r4, #12]
 8009194:	bd10      	pop	{r4, pc}

08009196 <__swrite>:
 8009196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919a:	461f      	mov	r7, r3
 800919c:	898b      	ldrh	r3, [r1, #12]
 800919e:	05db      	lsls	r3, r3, #23
 80091a0:	4605      	mov	r5, r0
 80091a2:	460c      	mov	r4, r1
 80091a4:	4616      	mov	r6, r2
 80091a6:	d505      	bpl.n	80091b4 <__swrite+0x1e>
 80091a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ac:	2302      	movs	r3, #2
 80091ae:	2200      	movs	r2, #0
 80091b0:	f000 f868 	bl	8009284 <_lseek_r>
 80091b4:	89a3      	ldrh	r3, [r4, #12]
 80091b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091be:	81a3      	strh	r3, [r4, #12]
 80091c0:	4632      	mov	r2, r6
 80091c2:	463b      	mov	r3, r7
 80091c4:	4628      	mov	r0, r5
 80091c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ca:	f000 b817 	b.w	80091fc <_write_r>

080091ce <__sseek>:
 80091ce:	b510      	push	{r4, lr}
 80091d0:	460c      	mov	r4, r1
 80091d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d6:	f000 f855 	bl	8009284 <_lseek_r>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	bf15      	itete	ne
 80091e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80091e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091ea:	81a3      	strheq	r3, [r4, #12]
 80091ec:	bf18      	it	ne
 80091ee:	81a3      	strhne	r3, [r4, #12]
 80091f0:	bd10      	pop	{r4, pc}

080091f2 <__sclose>:
 80091f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f6:	f000 b813 	b.w	8009220 <_close_r>
	...

080091fc <_write_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d07      	ldr	r5, [pc, #28]	; (800921c <_write_r+0x20>)
 8009200:	4604      	mov	r4, r0
 8009202:	4608      	mov	r0, r1
 8009204:	4611      	mov	r1, r2
 8009206:	2200      	movs	r2, #0
 8009208:	602a      	str	r2, [r5, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	f7f8 fe49 	bl	8001ea2 <_write>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_write_r+0x1e>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_write_r+0x1e>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	200006d0 	.word	0x200006d0

08009220 <_close_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d06      	ldr	r5, [pc, #24]	; (800923c <_close_r+0x1c>)
 8009224:	2300      	movs	r3, #0
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	602b      	str	r3, [r5, #0]
 800922c:	f7f8 fe55 	bl	8001eda <_close>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_close_r+0x1a>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_close_r+0x1a>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	200006d0 	.word	0x200006d0

08009240 <_fstat_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d07      	ldr	r5, [pc, #28]	; (8009260 <_fstat_r+0x20>)
 8009244:	2300      	movs	r3, #0
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	602b      	str	r3, [r5, #0]
 800924e:	f7f8 fe50 	bl	8001ef2 <_fstat>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	d102      	bne.n	800925c <_fstat_r+0x1c>
 8009256:	682b      	ldr	r3, [r5, #0]
 8009258:	b103      	cbz	r3, 800925c <_fstat_r+0x1c>
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	bd38      	pop	{r3, r4, r5, pc}
 800925e:	bf00      	nop
 8009260:	200006d0 	.word	0x200006d0

08009264 <_isatty_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4d06      	ldr	r5, [pc, #24]	; (8009280 <_isatty_r+0x1c>)
 8009268:	2300      	movs	r3, #0
 800926a:	4604      	mov	r4, r0
 800926c:	4608      	mov	r0, r1
 800926e:	602b      	str	r3, [r5, #0]
 8009270:	f7f8 fe4f 	bl	8001f12 <_isatty>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d102      	bne.n	800927e <_isatty_r+0x1a>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	b103      	cbz	r3, 800927e <_isatty_r+0x1a>
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	200006d0 	.word	0x200006d0

08009284 <_lseek_r>:
 8009284:	b538      	push	{r3, r4, r5, lr}
 8009286:	4d07      	ldr	r5, [pc, #28]	; (80092a4 <_lseek_r+0x20>)
 8009288:	4604      	mov	r4, r0
 800928a:	4608      	mov	r0, r1
 800928c:	4611      	mov	r1, r2
 800928e:	2200      	movs	r2, #0
 8009290:	602a      	str	r2, [r5, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	f7f8 fe48 	bl	8001f28 <_lseek>
 8009298:	1c43      	adds	r3, r0, #1
 800929a:	d102      	bne.n	80092a2 <_lseek_r+0x1e>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	b103      	cbz	r3, 80092a2 <_lseek_r+0x1e>
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	200006d0 	.word	0x200006d0

080092a8 <_read_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4d07      	ldr	r5, [pc, #28]	; (80092c8 <_read_r+0x20>)
 80092ac:	4604      	mov	r4, r0
 80092ae:	4608      	mov	r0, r1
 80092b0:	4611      	mov	r1, r2
 80092b2:	2200      	movs	r2, #0
 80092b4:	602a      	str	r2, [r5, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	f7f8 fdd6 	bl	8001e68 <_read>
 80092bc:	1c43      	adds	r3, r0, #1
 80092be:	d102      	bne.n	80092c6 <_read_r+0x1e>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	b103      	cbz	r3, 80092c6 <_read_r+0x1e>
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	200006d0 	.word	0x200006d0

080092cc <_init>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr

080092d8 <_fini>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	bf00      	nop
 80092dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092de:	bc08      	pop	{r3}
 80092e0:	469e      	mov	lr, r3
 80092e2:	4770      	bx	lr
