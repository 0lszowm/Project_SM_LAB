
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  0800c7a8  0800c7a8  0001c7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d430  0800d430  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d430  0800d430  0001d430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d438  0800d438  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d438  0800d438  0001d438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d43c  0800d43c  0001d43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  200001f0  0800d630  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a8  0800d630  000209a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3a3  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f2  00000000  00000000  0003a5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028efc  00000000  00000000  000406e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b848  00000000  00000000  000695e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f96f9  00000000  00000000  00084e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad4  00000000  00000000  0017e578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c790 	.word	0x0800c790

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c790 	.word	0x0800c790

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b9aa 	b.w	8001008 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f83c 	bl	8000d38 <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_d2lz>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	f7ff ff21 	bl	8000b1c <__aeabi_dcmplt>
 8000cda:	b928      	cbnz	r0, 8000ce8 <__aeabi_d2lz+0x1c>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce4:	f000 b80a 	b.w	8000cfc <__aeabi_d2ulz>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cee:	f000 f805 	bl	8000cfc <__aeabi_d2ulz>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop

08000cfc <__aeabi_d2ulz>:
 8000cfc:	b5d0      	push	{r4, r6, r7, lr}
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__aeabi_d2ulz+0x34>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	4606      	mov	r6, r0
 8000d04:	460f      	mov	r7, r1
 8000d06:	f7ff fc97 	bl	8000638 <__aeabi_dmul>
 8000d0a:	f7ff ff57 	bl	8000bbc <__aeabi_d2uiz>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fc18 	bl	8000544 <__aeabi_ui2d>
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <__aeabi_d2ulz+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f7ff fc8e 	bl	8000638 <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f7ff fad0 	bl	80002c8 <__aeabi_dsub>
 8000d28:	f7ff ff48 	bl	8000bbc <__aeabi_d2uiz>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d30:	3df00000 	.word	0x3df00000
 8000d34:	41f00000 	.word	0x41f00000

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468e      	mov	lr, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d14d      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d46:	428a      	cmp	r2, r1
 8000d48:	4694      	mov	ip, r2
 8000d4a:	d969      	bls.n	8000e20 <__udivmoddi4+0xe8>
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	b152      	cbz	r2, 8000d68 <__udivmoddi4+0x30>
 8000d52:	fa01 f302 	lsl.w	r3, r1, r2
 8000d56:	f1c2 0120 	rsb	r1, r2, #32
 8000d5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d62:	ea41 0e03 	orr.w	lr, r1, r3
 8000d66:	4094      	lsls	r4, r2
 8000d68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d6c:	0c21      	lsrs	r1, r4, #16
 8000d6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d72:	fa1f f78c 	uxth.w	r7, ip
 8000d76:	fb08 e316 	mls	r3, r8, r6, lr
 8000d7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7e:	fb06 f107 	mul.w	r1, r6, r7
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8e:	f080 811f 	bcs.w	8000fd0 <__udivmoddi4+0x298>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 811c 	bls.w	8000fd0 <__udivmoddi4+0x298>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dac:	fb00 f707 	mul.w	r7, r0, r7
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x92>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	f080 810a 	bcs.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc0:	42a7      	cmp	r7, r4
 8000dc2:	f240 8107 	bls.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dce:	1be4      	subs	r4, r4, r7
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	b11d      	cbz	r5, 8000ddc <__udivmoddi4+0xa4>
 8000dd4:	40d4      	lsrs	r4, r2
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0xc2>
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	f000 80ef 	beq.w	8000fca <__udivmoddi4+0x292>
 8000dec:	2600      	movs	r6, #0
 8000dee:	e9c5 0100 	strd	r0, r1, [r5]
 8000df2:	4630      	mov	r0, r6
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	fab3 f683 	clz	r6, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d14a      	bne.n	8000e98 <__udivmoddi4+0x160>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xd4>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 80f9 	bhi.w	8000ffe <__udivmoddi4+0x2c6>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	469e      	mov	lr, r3
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e0      	beq.n	8000ddc <__udivmoddi4+0xa4>
 8000e1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1e:	e7dd      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000e20:	b902      	cbnz	r2, 8000e24 <__udivmoddi4+0xec>
 8000e22:	deff      	udf	#255	; 0xff
 8000e24:	fab2 f282 	clz	r2, r2
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	f040 8092 	bne.w	8000f52 <__udivmoddi4+0x21a>
 8000e2e:	eba1 010c 	sub.w	r1, r1, ip
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	2601      	movs	r6, #1
 8000e3c:	0c20      	lsrs	r0, r4, #16
 8000e3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e42:	fb07 1113 	mls	r1, r7, r3, r1
 8000e46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4a:	fb0e f003 	mul.w	r0, lr, r3
 8000e4e:	4288      	cmp	r0, r1
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x12c>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x12a>
 8000e5c:	4288      	cmp	r0, r1
 8000e5e:	f200 80cb 	bhi.w	8000ff8 <__udivmoddi4+0x2c0>
 8000e62:	4643      	mov	r3, r8
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e74:	fb0e fe00 	mul.w	lr, lr, r0
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x156>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e84:	d202      	bcs.n	8000e8c <__udivmoddi4+0x154>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f200 80bb 	bhi.w	8001002 <__udivmoddi4+0x2ca>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	eba4 040e 	sub.w	r4, r4, lr
 8000e92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e96:	e79c      	b.n	8000dd2 <__udivmoddi4+0x9a>
 8000e98:	f1c6 0720 	rsb	r7, r6, #32
 8000e9c:	40b3      	lsls	r3, r6
 8000e9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000eae:	431c      	orrs	r4, r3
 8000eb0:	40f9      	lsrs	r1, r7
 8000eb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ebe:	0c20      	lsrs	r0, r4, #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed6:	d90b      	bls.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee0:	f080 8088 	bcs.w	8000ff4 <__udivmoddi4+0x2bc>
 8000ee4:	4288      	cmp	r0, r1
 8000ee6:	f240 8085 	bls.w	8000ff4 <__udivmoddi4+0x2bc>
 8000eea:	f1a8 0802 	sub.w	r8, r8, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef8:	fb09 1110 	mls	r1, r9, r0, r1
 8000efc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f04:	458e      	cmp	lr, r1
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x1e2>
 8000f08:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f10:	d26c      	bcs.n	8000fec <__udivmoddi4+0x2b4>
 8000f12:	458e      	cmp	lr, r1
 8000f14:	d96a      	bls.n	8000fec <__udivmoddi4+0x2b4>
 8000f16:	3802      	subs	r0, #2
 8000f18:	4461      	add	r1, ip
 8000f1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f22:	eba1 010e 	sub.w	r1, r1, lr
 8000f26:	42a1      	cmp	r1, r4
 8000f28:	46c8      	mov	r8, r9
 8000f2a:	46a6      	mov	lr, r4
 8000f2c:	d356      	bcc.n	8000fdc <__udivmoddi4+0x2a4>
 8000f2e:	d053      	beq.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f30:	b15d      	cbz	r5, 8000f4a <__udivmoddi4+0x212>
 8000f32:	ebb3 0208 	subs.w	r2, r3, r8
 8000f36:	eb61 010e 	sbc.w	r1, r1, lr
 8000f3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f42:	40f1      	lsrs	r1, r6
 8000f44:	431f      	orrs	r7, r3
 8000f46:	e9c5 7100 	strd	r7, r1, [r5]
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	f1c2 0320 	rsb	r3, r2, #32
 8000f56:	40d8      	lsrs	r0, r3
 8000f58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f60:	4091      	lsls	r1, r2
 8000f62:	4301      	orrs	r1, r0
 8000f64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f68:	fa1f fe8c 	uxth.w	lr, ip
 8000f6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f70:	fb07 3610 	mls	r6, r7, r0, r3
 8000f74:	0c0b      	lsrs	r3, r1, #16
 8000f76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7e:	429e      	cmp	r6, r3
 8000f80:	fa04 f402 	lsl.w	r4, r4, r2
 8000f84:	d908      	bls.n	8000f98 <__udivmoddi4+0x260>
 8000f86:	eb1c 0303 	adds.w	r3, ip, r3
 8000f8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8e:	d22f      	bcs.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f90:	429e      	cmp	r6, r3
 8000f92:	d92d      	bls.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f94:	3802      	subs	r0, #2
 8000f96:	4463      	add	r3, ip
 8000f98:	1b9b      	subs	r3, r3, r6
 8000f9a:	b289      	uxth	r1, r1
 8000f9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fa0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fac:	428b      	cmp	r3, r1
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x28a>
 8000fb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb8:	d216      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	d914      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fbe:	3e02      	subs	r6, #2
 8000fc0:	4461      	add	r1, ip
 8000fc2:	1ac9      	subs	r1, r1, r3
 8000fc4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc8:	e738      	b.n	8000e3c <__udivmoddi4+0x104>
 8000fca:	462e      	mov	r6, r5
 8000fcc:	4628      	mov	r0, r5
 8000fce:	e705      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	e6e3      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	e6f8      	b.n	8000dca <__udivmoddi4+0x92>
 8000fd8:	454b      	cmp	r3, r9
 8000fda:	d2a9      	bcs.n	8000f30 <__udivmoddi4+0x1f8>
 8000fdc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	e7a3      	b.n	8000f30 <__udivmoddi4+0x1f8>
 8000fe8:	4646      	mov	r6, r8
 8000fea:	e7ea      	b.n	8000fc2 <__udivmoddi4+0x28a>
 8000fec:	4620      	mov	r0, r4
 8000fee:	e794      	b.n	8000f1a <__udivmoddi4+0x1e2>
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	e7d1      	b.n	8000f98 <__udivmoddi4+0x260>
 8000ff4:	46d0      	mov	r8, sl
 8000ff6:	e77b      	b.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ff8:	3b02      	subs	r3, #2
 8000ffa:	4461      	add	r1, ip
 8000ffc:	e732      	b.n	8000e64 <__udivmoddi4+0x12c>
 8000ffe:	4630      	mov	r0, r6
 8001000:	e709      	b.n	8000e16 <__udivmoddi4+0xde>
 8001002:	4464      	add	r4, ip
 8001004:	3802      	subs	r0, #2
 8001006:	e742      	b.n	8000e8e <__udivmoddi4+0x156>

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MCP9808_Init>:
 * write bit.
 *
 * @param hi2c A pointer to the I2C handler.
 * @param addr Address of MCP9808 on I2C bus (default 0x18).
 */
void MCP9808_Init(I2C_HandleTypeDef *hi2c, uint8_t addr) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
	mcp9808.hi2c = hi2c;
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <MCP9808_Init+0x30>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
	mcp9808.address = addr << 1;
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <MCP9808_Init+0x30>)
 8001026:	711a      	strb	r2, [r3, #4]
	mcp9808.resolution = MCP9808_VeryHigh_Res;
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <MCP9808_Init+0x30>)
 800102a:	2203      	movs	r2, #3
 800102c:	715a      	strb	r2, [r3, #5]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000020c 	.word	0x2000020c

08001040 <MCP9808_Write>:
 *
 * @param _reg Pointer to a register.
 * @param value The data on which to send.
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Write(MCP9808_REG_TypeDef *_reg, uint8_t *value) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	uint8_t reg[] = {*_reg, *value};
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	733b      	strb	r3, [r7, #12]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MCP9808_Write+0x40>)
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MCP9808_Write+0x40>)
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	b299      	uxth	r1, r3
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	f002 ffce 	bl	800400c <HAL_I2C_Master_Transmit>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
			reg, sizeof(reg), HAL_MAX_DELAY);

	return res;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000020c 	.word	0x2000020c

08001084 <MCP9808_Read>:
 * @param _reg Pointer to a register.
 * @param buf A pointer to a buffer to store the response in.
 * @param buf_size The size of the buffer (n values).
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Read(MCP9808_REG_TypeDef *_reg, uint8_t *buf, uint8_t buf_size) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af02      	add	r7, sp, #8
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	71fb      	strb	r3, [r7, #7]

	uint8_t reg[1] = {*_reg};
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MCP9808_Read+0x70>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MCP9808_Read+0x70>)
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	f107 0214 	add.w	r2, r7, #20
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	f002 ffad 	bl	800400c <HAL_I2C_Master_Transmit>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
			reg, sizeof(reg), HAL_MAX_DELAY);


	if(res != HAL_OK){
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MCP9808_Read+0x3c>
		return res;
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	e014      	b.n	80010ea <MCP9808_Read+0x66>
	}

	res = HAL_I2C_Master_Receive(mcp9808.hi2c, mcp9808.address, buf, buf_size, HAL_MAX_DELAY);
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MCP9808_Read+0x70>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MCP9808_Read+0x70>)
 80010c6:	791b      	ldrb	r3, [r3, #4]
 80010c8:	b299      	uxth	r1, r3
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	9200      	str	r2, [sp, #0]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	f003 f88d 	bl	80041f4 <HAL_I2C_Master_Receive>
 80010da:	4603      	mov	r3, r0
 80010dc:	75fb      	strb	r3, [r7, #23]

	if(res != HAL_OK){
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MCP9808_Read+0x64>
		return res;
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	e000      	b.n	80010ea <MCP9808_Read+0x66>
	}

	return res;
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000020c 	.word	0x2000020c

080010f8 <MCP9808_MeasureTemperature>:
 *
 * @param temperature A pointer to a temperature float to store a returned
 * value from.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_MeasureTemperature(float *temperature) {
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	MCP9808_REG_TypeDef reg = MCP9808_T_AMBIENT_REG;
 8001100:	2305      	movs	r3, #5
 8001102:	733b      	strb	r3, [r7, #12]
	uint8_t buf[2];
	HAL_StatusTypeDef res = MCP9808_Read(&reg, buf, sizeof(buf));
 8001104:	f107 0108 	add.w	r1, r7, #8
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2202      	movs	r2, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffb8 	bl	8001084 <MCP9808_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d162      	bne.n	80011e4 <MCP9808_MeasureTemperature+0xec>
		uint8_t upper = buf[0];
 800111e:	7a3b      	ldrb	r3, [r7, #8]
 8001120:	73bb      	strb	r3, [r7, #14]
		upper &= 0x1F;
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	73bb      	strb	r3, [r7, #14]
		uint8_t lower = buf[1];
 800112a:	7a7b      	ldrb	r3, [r7, #9]
 800112c:	737b      	strb	r3, [r7, #13]

		if((upper & 0x10) == 0x10) {
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b00      	cmp	r3, #0
 8001136:	d030      	beq.n	800119a <MCP9808_MeasureTemperature+0xa2>
			upper &= 0x0F;
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	73bb      	strb	r3, [r7, #14]
			*temperature = 256 - (upper * 16.0) + (lower / 16.0);
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa0e 	bl	8000564 <__aeabi_i2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 800114e:	f7ff fa73 	bl	8000638 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4926      	ldr	r1, [pc, #152]	; (80011f4 <MCP9808_MeasureTemperature+0xfc>)
 800115c:	f7ff f8b4 	bl	80002c8 <__aeabi_dsub>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9fa 	bl	8000564 <__aeabi_i2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 8001176:	f7ff fb89 	bl	800088c <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f8a3 	bl	80002cc <__adddf3>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fd35 	bl	8000bfc <__aeabi_d2f>
 8001192:	4602      	mov	r2, r0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e024      	b.n	80011e4 <MCP9808_MeasureTemperature+0xec>
		} else {
			*temperature = (upper * 16.0) + (lower / 16.0);
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9e1 	bl	8000564 <__aeabi_i2d>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 80011a8:	f7ff fa46 	bl	8000638 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4614      	mov	r4, r2
 80011b2:	461d      	mov	r5, r3
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9d4 	bl	8000564 <__aeabi_i2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 80011c2:	f7ff fb63 	bl	800088c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f87d 	bl	80002cc <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fd0f 	bl	8000bfc <__aeabi_d2f>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	601a      	str	r2, [r3, #0]
		}
	}

	return res;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bdb0      	pop	{r4, r5, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40300000 	.word	0x40300000
 80011f4:	40700000 	.word	0x40700000

080011f8 <MCP9808_SetResolution>:
 * VeryHigh = 0.0625 (slowest 250 ms)
 *
 * @param resolution Desired resolution to switch to.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_SetResolution(MCP9808_Resolution_TypeDef resolution) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]

	MCP9808_REG_TypeDef reg = MCP9808_RESOLUTION_REG;
 8001202:	2308      	movs	r3, #8
 8001204:	73bb      	strb	r3, [r7, #14]
	uint8_t value = resolution & 0x03;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef res = MCP9808_Write(&reg, &value);
 8001210:	f107 020d 	add.w	r2, r7, #13
 8001214:	f107 030e 	add.w	r3, r7, #14
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff10 	bl	8001040 <MCP9808_Write>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <MCP9808_SetResolution+0x38>
		mcp9808.resolution = resolution;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <MCP9808_SetResolution+0x44>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	7153      	strb	r3, [r2, #5]
	}

	return res;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000020c 	.word	0x2000020c

08001240 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af04      	add	r7, sp, #16
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	2301      	movs	r3, #1
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	2200      	movs	r2, #0
 800126c:	2178      	movs	r1, #120	; 0x78
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <ssd1306_WriteCommand+0x2c>)
 8001270:	f003 f8b6 	bl	80043e0 <HAL_I2C_Mem_Write>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000664 	.word	0x20000664

08001280 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af04      	add	r7, sp, #16
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	f04f 32ff 	mov.w	r2, #4294967295
 8001292:	9202      	str	r2, [sp, #8]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	2178      	movs	r1, #120	; 0x78
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <ssd1306_WriteData+0x30>)
 80012a2:	f003 f89d 	bl	80043e0 <HAL_I2C_Mem_Write>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000664 	.word	0x20000664

080012b4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80012b8:	f7ff ffc2 	bl	8001240 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80012bc:	2064      	movs	r0, #100	; 0x64
 80012be:	f001 fe75 	bl	8002fac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f9da 	bl	800167c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80012c8:	2020      	movs	r0, #32
 80012ca:	f7ff ffc1 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ffbe 	bl	8001250 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012d4:	20b0      	movs	r0, #176	; 0xb0
 80012d6:	f7ff ffbb 	bl	8001250 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012da:	20c8      	movs	r0, #200	; 0xc8
 80012dc:	f7ff ffb8 	bl	8001250 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ffb5 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012e6:	2010      	movs	r0, #16
 80012e8:	f7ff ffb2 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012ec:	2040      	movs	r0, #64	; 0x40
 80012ee:	f7ff ffaf 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012f2:	20ff      	movs	r0, #255	; 0xff
 80012f4:	f000 f9ae 	bl	8001654 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012f8:	20a1      	movs	r0, #161	; 0xa1
 80012fa:	f7ff ffa9 	bl	8001250 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012fe:	20a6      	movs	r0, #166	; 0xa6
 8001300:	f7ff ffa6 	bl	8001250 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001304:	20a8      	movs	r0, #168	; 0xa8
 8001306:	f7ff ffa3 	bl	8001250 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800130a:	203f      	movs	r0, #63	; 0x3f
 800130c:	f7ff ffa0 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001310:	20a4      	movs	r0, #164	; 0xa4
 8001312:	f7ff ff9d 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001316:	20d3      	movs	r0, #211	; 0xd3
 8001318:	f7ff ff9a 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ff97 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001322:	20d5      	movs	r0, #213	; 0xd5
 8001324:	f7ff ff94 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001328:	20f0      	movs	r0, #240	; 0xf0
 800132a:	f7ff ff91 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800132e:	20d9      	movs	r0, #217	; 0xd9
 8001330:	f7ff ff8e 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001334:	2022      	movs	r0, #34	; 0x22
 8001336:	f7ff ff8b 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800133a:	20da      	movs	r0, #218	; 0xda
 800133c:	f7ff ff88 	bl	8001250 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001340:	2012      	movs	r0, #18
 8001342:	f7ff ff85 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001346:	20db      	movs	r0, #219	; 0xdb
 8001348:	f7ff ff82 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800134c:	2020      	movs	r0, #32
 800134e:	f7ff ff7f 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001352:	208d      	movs	r0, #141	; 0x8d
 8001354:	f7ff ff7c 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001358:	2014      	movs	r0, #20
 800135a:	f7ff ff79 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800135e:	2001      	movs	r0, #1
 8001360:	f000 f98c 	bl	800167c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f80f 	bl	8001388 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800136a:	f000 f831 	bl	80013d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <ssd1306_Init+0xd0>)
 8001370:	2200      	movs	r2, #0
 8001372:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <ssd1306_Init+0xd0>)
 8001376:	2200      	movs	r2, #0
 8001378:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800137a:	4b02      	ldr	r3, [pc, #8]	; (8001384 <ssd1306_Init+0xd0>)
 800137c:	2201      	movs	r2, #1
 800137e:	711a      	strb	r2, [r3, #4]
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000614 	.word	0x20000614

08001388 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e00d      	b.n	80013b4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <ssd1306_Fill+0x1a>
 800139e:	2100      	movs	r1, #0
 80013a0:	e000      	b.n	80013a4 <ssd1306_Fill+0x1c>
 80013a2:	21ff      	movs	r1, #255	; 0xff
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <ssd1306_Fill+0x44>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	460a      	mov	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d3ed      	bcc.n	8001398 <ssd1306_Fill+0x10>
    }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000214 	.word	0x20000214

080013d0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e016      	b.n	800140a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3b50      	subs	r3, #80	; 0x50
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff34 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff ff31 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013ee:	2010      	movs	r0, #16
 80013f0:	f7ff ff2e 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	01db      	lsls	r3, r3, #7
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <ssd1306_UpdateScreen+0x4c>)
 80013fa:	4413      	add	r3, r2
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff3e 	bl	8001280 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	3301      	adds	r3, #1
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b07      	cmp	r3, #7
 800140e:	d9e5      	bls.n	80013dc <ssd1306_UpdateScreen+0xc>
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000214 	.word	0x20000214

08001420 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	460b      	mov	r3, r1
 800142c:	71bb      	strb	r3, [r7, #6]
 800142e:	4613      	mov	r3, r2
 8001430:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db3d      	blt.n	80014b6 <ssd1306_DrawPixel+0x96>
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	2b3f      	cmp	r3, #63	; 0x3f
 800143e:	d83a      	bhi.n	80014b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001440:	797b      	ldrb	r3, [r7, #5]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11a      	bne.n	800147c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	4603      	mov	r3, r0
 8001450:	01db      	lsls	r3, r3, #7
 8001452:	4413      	add	r3, r2
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	b25a      	sxtb	r2, r3
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	b25b      	sxtb	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b259      	sxtb	r1, r3
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	4603      	mov	r3, r0
 8001470:	01db      	lsls	r3, r3, #7
 8001472:	4413      	add	r3, r2
 8001474:	b2c9      	uxtb	r1, r1
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 8001478:	54d1      	strb	r1, [r2, r3]
 800147a:	e01d      	b.n	80014b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	4603      	mov	r3, r0
 8001486:	01db      	lsls	r3, r3, #7
 8001488:	4413      	add	r3, r2
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	b25a      	sxtb	r2, r3
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	b25b      	sxtb	r3, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	b259      	sxtb	r1, r3
 80014a6:	79fa      	ldrb	r2, [r7, #7]
 80014a8:	4603      	mov	r3, r0
 80014aa:	01db      	lsls	r3, r3, #7
 80014ac:	4413      	add	r3, r2
 80014ae:	b2c9      	uxtb	r1, r1
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 80014b2:	54d1      	strb	r1, [r2, r3]
 80014b4:	e000      	b.n	80014b8 <ssd1306_DrawPixel+0x98>
        return;
 80014b6:	bf00      	nop
    }
}
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000214 	.word	0x20000214

080014c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4604      	mov	r4, r0
 80014d0:	1d38      	adds	r0, r7, #4
 80014d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80014d6:	461a      	mov	r2, r3
 80014d8:	4623      	mov	r3, r4
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	4613      	mov	r3, r2
 80014de:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b1f      	cmp	r3, #31
 80014e4:	d902      	bls.n	80014ec <ssd1306_WriteChar+0x24>
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b7e      	cmp	r3, #126	; 0x7e
 80014ea:	d901      	bls.n	80014f0 <ssd1306_WriteChar+0x28>
        return 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e06d      	b.n	80015cc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	793b      	ldrb	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	2b80      	cmp	r3, #128	; 0x80
 80014fc:	dc06      	bgt.n	800150c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001500:	885b      	ldrh	r3, [r3, #2]
 8001502:	461a      	mov	r2, r3
 8001504:	797b      	ldrb	r3, [r7, #5]
 8001506:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001508:	2b40      	cmp	r3, #64	; 0x40
 800150a:	dd01      	ble.n	8001510 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800150c:	2300      	movs	r3, #0
 800150e:	e05d      	b.n	80015cc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	e04c      	b.n	80015b0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3b20      	subs	r3, #32
 800151c:	7979      	ldrb	r1, [r7, #5]
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4619      	mov	r1, r3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	440b      	add	r3, r1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e034      	b.n	80015a0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d012      	beq.n	800156c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b2d8      	uxtb	r0, r3
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001556:	885b      	ldrh	r3, [r3, #2]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4413      	add	r3, r2
 8001560:	b2db      	uxtb	r3, r3
 8001562:	7bba      	ldrb	r2, [r7, #14]
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff ff5b 	bl	8001420 <ssd1306_DrawPixel>
 800156a:	e016      	b.n	800159a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b2d8      	uxtb	r0, r3
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b2d9      	uxtb	r1, r3
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	f7ff ff43 	bl	8001420 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	3301      	adds	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	793b      	ldrb	r3, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d3c5      	bcc.n	8001536 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	797b      	ldrb	r3, [r7, #5]
 80015b2:	461a      	mov	r2, r3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d3ad      	bcc.n	8001516 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80015c8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	20000614 	.word	0x20000614

080015d8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	1d38      	adds	r0, r7, #4
 80015e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80015e6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80015e8:	e012      	b.n	8001610 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	7818      	ldrb	r0, [r3, #0]
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	1d3a      	adds	r2, r7, #4
 80015f2:	ca06      	ldmia	r2, {r1, r2}
 80015f4:	f7ff ff68 	bl	80014c8 <ssd1306_WriteChar>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d002      	beq.n	800160a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	e008      	b.n	800161c <ssd1306_WriteString+0x44>
        }
        str++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e8      	bne.n	80015ea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	781b      	ldrb	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	460a      	mov	r2, r1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	4613      	mov	r3, r2
 8001632:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <ssd1306_SetCursor+0x2c>)
 800163a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <ssd1306_SetCursor+0x2c>)
 8001642:	805a      	strh	r2, [r3, #2]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000614 	.word	0x20000614

08001654 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800165e:	2381      	movs	r3, #129	; 0x81
 8001660:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fdf3 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fdef 	bl	8001250 <ssd1306_WriteCommand>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800168c:	23af      	movs	r3, #175	; 0xaf
 800168e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <ssd1306_SetDisplayOn+0x38>)
 8001692:	2201      	movs	r2, #1
 8001694:	715a      	strb	r2, [r3, #5]
 8001696:	e004      	b.n	80016a2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001698:	23ae      	movs	r3, #174	; 0xae
 800169a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <ssd1306_SetDisplayOn+0x38>)
 800169e:	2200      	movs	r2, #0
 80016a0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fdd3 	bl	8001250 <ssd1306_WriteCommand>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000614 	.word	0x20000614

080016b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_ADC1_Init+0x98>)
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_ADC1_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_ADC1_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_ADC1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f8:	4a17      	ldr	r2, [pc, #92]	; (8001758 <MX_ADC1_Init+0xa0>)
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_ADC1_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_ADC1_Init+0x98>)
 8001704:	2201      	movs	r2, #1
 8001706:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_ADC1_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_ADC1_Init+0x98>)
 8001712:	2201      	movs	r2, #1
 8001714:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <MX_ADC1_Init+0x98>)
 8001718:	f001 fc6c 	bl	8002ff4 <HAL_ADC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001722:	f000 fe1f 	bl	8002364 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001726:	2303      	movs	r3, #3
 8001728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800172a:	2301      	movs	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_ADC1_Init+0x98>)
 8001738:	f001 fe06 	bl	8003348 <HAL_ADC_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001742:	f000 fe0f 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000061c 	.word	0x2000061c
 8001754:	40012000 	.word	0x40012000
 8001758:	0f000001 	.word	0x0f000001

0800175c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <HAL_ADC_MspInit+0x74>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d123      	bne.n	80017c6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ae:	2308      	movs	r3, #8
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b2:	2303      	movs	r3, #3
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_ADC_MspInit+0x7c>)
 80017c2:	f002 f9b5 	bl	8003b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40012000 	.word	0x40012000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	; 0x38
 80017e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b89      	ldr	r3, [pc, #548]	; (8001a18 <MX_GPIO_Init+0x23c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a88      	ldr	r2, [pc, #544]	; (8001a18 <MX_GPIO_Init+0x23c>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b86      	ldr	r3, [pc, #536]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800180a:	4b83      	ldr	r3, [pc, #524]	; (8001a18 <MX_GPIO_Init+0x23c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a82      	ldr	r2, [pc, #520]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b80      	ldr	r3, [pc, #512]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001822:	4b7d      	ldr	r3, [pc, #500]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a7c      	ldr	r2, [pc, #496]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b7a      	ldr	r3, [pc, #488]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <MX_GPIO_Init+0x23c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a76      	ldr	r2, [pc, #472]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b74      	ldr	r3, [pc, #464]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b71      	ldr	r3, [pc, #452]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a70      	ldr	r2, [pc, #448]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b6e      	ldr	r3, [pc, #440]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186a:	4b6b      	ldr	r3, [pc, #428]	; (8001a18 <MX_GPIO_Init+0x23c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a6a      	ldr	r2, [pc, #424]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001870:	f043 0310 	orr.w	r3, r3, #16
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b68      	ldr	r3, [pc, #416]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	4b65      	ldr	r3, [pc, #404]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a64      	ldr	r2, [pc, #400]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b62      	ldr	r3, [pc, #392]	; (8001a18 <MX_GPIO_Init+0x23c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800189a:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <MX_GPIO_Init+0x23c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a5e      	ldr	r2, [pc, #376]	; (8001a18 <MX_GPIO_Init+0x23c>)
 80018a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b5c      	ldr	r3, [pc, #368]	; (8001a18 <MX_GPIO_Init+0x23c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80018b8:	4858      	ldr	r0, [pc, #352]	; (8001a1c <MX_GPIO_Init+0x240>)
 80018ba:	f002 fafd 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2140      	movs	r1, #64	; 0x40
 80018c2:	4857      	ldr	r0, [pc, #348]	; (8001a20 <MX_GPIO_Init+0x244>)
 80018c4:	f002 faf8 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	4619      	mov	r1, r3
 80018de:	4851      	ldr	r0, [pc, #324]	; (8001a24 <MX_GPIO_Init+0x248>)
 80018e0:	f002 f926 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018e4:	2332      	movs	r3, #50	; 0x32
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018f4:	230b      	movs	r3, #11
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	4619      	mov	r1, r3
 80018fe:	4849      	ldr	r0, [pc, #292]	; (8001a24 <MX_GPIO_Init+0x248>)
 8001900:	f002 f916 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001904:	2386      	movs	r3, #134	; 0x86
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001914:	230b      	movs	r3, #11
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	4842      	ldr	r0, [pc, #264]	; (8001a28 <MX_GPIO_Init+0x24c>)
 8001920:	f002 f906 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001924:	f244 0381 	movw	r3, #16513	; 0x4081
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193a:	4619      	mov	r1, r3
 800193c:	4837      	ldr	r0, [pc, #220]	; (8001a1c <MX_GPIO_Init+0x240>)
 800193e:	f002 f8f7 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001954:	230b      	movs	r3, #11
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195c:	4619      	mov	r1, r3
 800195e:	482f      	ldr	r0, [pc, #188]	; (8001a1c <MX_GPIO_Init+0x240>)
 8001960:	f002 f8e6 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001964:	2340      	movs	r3, #64	; 0x40
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	4829      	ldr	r0, [pc, #164]	; (8001a20 <MX_GPIO_Init+0x244>)
 800197c:	f002 f8d8 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	4823      	ldr	r0, [pc, #140]	; (8001a20 <MX_GPIO_Init+0x244>)
 8001994:	f002 f8cc 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = przycisk0_Pin;
 8001998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(przycisk0_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	481d      	ldr	r0, [pc, #116]	; (8001a24 <MX_GPIO_Init+0x248>)
 80019ae:	f002 f8bf 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019b2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019c4:	230a      	movs	r3, #10
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	4619      	mov	r1, r3
 80019ce:	4816      	ldr	r0, [pc, #88]	; (8001a28 <MX_GPIO_Init+0x24c>)
 80019d0:	f002 f8ae 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <MX_GPIO_Init+0x24c>)
 80019ea:	f002 f8a1 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a00:	230b      	movs	r3, #11
 8001a02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_GPIO_Init+0x244>)
 8001a0c:	f002 f890 	bl	8003b30 <HAL_GPIO_Init>

}
 8001a10:	bf00      	nop
 8001a12:	3738      	adds	r7, #56	; 0x38
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40021800 	.word	0x40021800
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020000 	.word	0x40020000

08001a2c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <MX_I2C2_Init+0x78>)
 8001a34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00501FE4;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <MX_I2C2_Init+0x7c>)
 8001a3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a66:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a68:	f002 fa40 	bl	8003eec <HAL_I2C_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a72:	f000 fc77 	bl	8002364 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a76:	2100      	movs	r1, #0
 8001a78:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a7a:	f003 f885 	bl	8004b88 <HAL_I2CEx_ConfigAnalogFilter>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a84:	f000 fc6e 	bl	8002364 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_I2C2_Init+0x74>)
 8001a8c:	f003 f8c7 	bl	8004c1e <HAL_I2CEx_ConfigDigitalFilter>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a96:	f000 fc65 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000664 	.word	0x20000664
 8001aa4:	40005800 	.word	0x40005800
 8001aa8:	00501fe4 	.word	0x00501fe4

08001aac <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <MX_I2C4_Init+0x78>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <MX_I2C4_Init+0x7c>)
 8001aba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001ae6:	480e      	ldr	r0, [pc, #56]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001ae8:	f002 fa00 	bl	8003eec <HAL_I2C_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001af2:	f000 fc37 	bl	8002364 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001af6:	2100      	movs	r1, #0
 8001af8:	4809      	ldr	r0, [pc, #36]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001afa:	f003 f845 	bl	8004b88 <HAL_I2CEx_ConfigAnalogFilter>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001b04:	f000 fc2e 	bl	8002364 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_I2C4_Init+0x74>)
 8001b0c:	f003 f887 	bl	8004c1e <HAL_I2CEx_ConfigDigitalFilter>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001b16:	f000 fc25 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200006b8 	.word	0x200006b8
 8001b24:	40006000 	.word	0x40006000
 8001b28:	20404768 	.word	0x20404768

08001b2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0ac      	sub	sp, #176	; 0xb0
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b44:	f107 0318 	add.w	r3, r7, #24
 8001b48:	2284      	movs	r2, #132	; 0x84
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f006 ff39 	bl	80089c4 <memset>
  if(i2cHandle->Instance==I2C2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a44      	ldr	r2, [pc, #272]	; (8001c68 <HAL_I2C_MspInit+0x13c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d13d      	bne.n	8001bd8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fdcd 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b78:	f000 fbf4 	bl	8002364 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b7c:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4a3a      	ldr	r2, [pc, #232]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001b82:	f043 0320 	orr.w	r3, r3, #32
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b94:	2303      	movs	r3, #3
 8001b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9a:	2312      	movs	r3, #18
 8001b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bac:	2304      	movs	r3, #4
 8001bae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	482d      	ldr	r0, [pc, #180]	; (8001c70 <HAL_I2C_MspInit+0x144>)
 8001bba:	f001 ffb9 	bl	8003b30 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001bd6:	e042      	b.n	8001c5e <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <HAL_I2C_MspInit+0x148>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d13d      	bne.n	8001c5e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bee:	f107 0318 	add.w	r3, r7, #24
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fd8a 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001bfe:	f000 fbb1 	bl	8002364 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001c08:	f043 0320 	orr.w	r3, r3, #32
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c22:	2312      	movs	r3, #18
 8001c24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001c34:	2304      	movs	r3, #4
 8001c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480b      	ldr	r0, [pc, #44]	; (8001c70 <HAL_I2C_MspInit+0x144>)
 8001c42:	f001 ff75 	bl	8003b30 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_I2C_MspInit+0x140>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
}
 8001c5e:	bf00      	nop
 8001c60:	37b0      	adds	r7, #176	; 0xb0
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40005800 	.word	0x40005800
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40021400 	.word	0x40021400
 8001c74:	40006000 	.word	0x40006000

08001c78 <HAL_UART_RxCpltCallback>:
/*
 * tu beda przerwania
 */

// Z tym gównem też chyba jest coś nie tak
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart3, received_data, 3); // Tu włącza sie to gowno znowu :)
	zadane = atof(received_data);
 8001c80:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <HAL_UART_RxCpltCallback+0x28>)
 8001c82:	f006 fe3f 	bl	8008904 <atof>
 8001c86:	ec53 2b10 	vmov	r2, r3, d0
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ffb5 	bl	8000bfc <__aeabi_d2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_UART_RxCpltCallback+0x2c>)
 8001c96:	6013      	str	r3, [r2, #0]
	//HAL_Delay(300);
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2000070c 	.word	0x2000070c
 8001ca4:	20000720 	.word	0x20000720

08001ca8 <zadajnik>:

float zadajnik() {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001cae:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <zadajnik+0x40>)
 8001cb0:	f001 f9e4 	bl	800307c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <zadajnik+0x40>)
 8001cba:	f001 faad 	bl	8003218 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8001cbe:	480a      	ldr	r0, [pc, #40]	; (8001ce8 <zadajnik+0x40>)
 8001cc0:	f001 fb35 	bl	800332e <HAL_ADC_GetValue>
 8001cc4:	6078      	str	r0, [r7, #4]
	return 1.0f * value /4095.0f;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001cec <zadajnik+0x44>
 8001cd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cd8:	eef0 7a66 	vmov.f32	s15, s13
}
 8001cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000061c 	.word	0x2000061c
 8001cec:	457ff000 	.word	0x457ff000

08001cf0 <button_state>:

bool button_state() {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(przycisk0_GPIO_Port, przycisk0_Pin) == GPIO_PIN_SET){
 8001cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <button_state+0x20>)
 8001cfa:	f002 f8c5 	bl	8003e88 <HAL_GPIO_ReadPin>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <button_state+0x18>
		return true;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <button_state+0x1a>
	}
	else{
		return false;
 8001d08:	2300      	movs	r3, #0
	}
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40020800 	.word	0x40020800

08001d14 <change_duty_cycle>:

// Jakbym miał powiedzieć gdzie sie wypierdoli ten kod to wlasnie tutaj
void change_duty_cycle(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t duty_cycle)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	80fb      	strh	r3, [r7, #6]
    // calculate the new pulse value
    uint32_t pulse = ((htim->Init.Period+1) * duty_cycle) / 1000;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	3301      	adds	r3, #1
 8001d28:	88fa      	ldrh	r2, [r7, #6]
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	4a1b      	ldr	r2, [pc, #108]	; (8001d9c <change_duty_cycle+0x88>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	099b      	lsrs	r3, r3, #6
 8001d36:	617b      	str	r3, [r7, #20]
    // update the capture/compare register
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d104      	bne.n	8001d48 <change_duty_cycle+0x34>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d46:	e023      	b.n	8001d90 <change_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d104      	bne.n	8001d58 <change_duty_cycle+0x44>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d56:	e01b      	b.n	8001d90 <change_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d104      	bne.n	8001d68 <change_duty_cycle+0x54>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001d66:	e013      	b.n	8001d90 <change_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d104      	bne.n	8001d78 <change_duty_cycle+0x64>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001d76:	e00b      	b.n	8001d90 <change_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d104      	bne.n	8001d88 <change_duty_cycle+0x74>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001d86:	e003      	b.n	8001d90 <change_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	10624dd3 	.word	0x10624dd3

08001da0 <wyswietlacz>:

void wyswietlacz(){
 8001da0:	b5b0      	push	{r4, r5, r7, lr}
 8001da2:	b0a4      	sub	sp, #144	; 0x90
 8001da4:	af00      	add	r7, sp, #0
	uint8_t y = 0; // ktora linia wyswietlacza
 8001da6:	2300      	movs	r3, #0
 8001da8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	ssd1306_Fill(Black);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f7ff faeb 	bl	8001388 <ssd1306_Fill>
	ssd1306_SetCursor(2, y);
 8001db2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001db6:	4619      	mov	r1, r3
 8001db8:	2002      	movs	r0, #2
 8001dba:	f7ff fc33 	bl	8001624 <ssd1306_SetCursor>
	char buf[20] = "COM test: ";
 8001dbe:	4a85      	ldr	r2, [pc, #532]	; (8001fd4 <wyswietlacz+0x234>)
 8001dc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dc6:	c303      	stmia	r3!, {r0, r1}
 8001dc8:	801a      	strh	r2, [r3, #0]
 8001dca:	3302      	adds	r3, #2
 8001dcc:	0c12      	lsrs	r2, r2, #16
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	721a      	strb	r2, [r3, #8]
	ssd1306_WriteString(strcat(buf, received_data), Font_7x10, White);
 8001ddc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001de0:	497d      	ldr	r1, [pc, #500]	; (8001fd8 <wyswietlacz+0x238>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f006 fdf6 	bl	80089d4 <strcat>
 8001de8:	4a7c      	ldr	r2, [pc, #496]	; (8001fdc <wyswietlacz+0x23c>)
 8001dea:	2301      	movs	r3, #1
 8001dec:	ca06      	ldmia	r2, {r1, r2}
 8001dee:	f7ff fbf3 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001df2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001df6:	330a      	adds	r3, #10
 8001df8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	char temp_buf[6];
	gcvt(current_temperature, 6, temp_buf);
 8001dfc:	4b78      	ldr	r3, [pc, #480]	; (8001fe0 <wyswietlacz+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fbc1 	bl	8000588 <__aeabi_f2d>
 8001e06:	4604      	mov	r4, r0
 8001e08:	460d      	mov	r5, r1
 8001e0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2006      	movs	r0, #6
 8001e12:	ec45 4b10 	vmov	d0, r4, r5
 8001e16:	f006 fd79 	bl	800890c <gcvt>
	ssd1306_SetCursor(2, y);
 8001e1a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e1e:	4619      	mov	r1, r3
 8001e20:	2002      	movs	r0, #2
 8001e22:	f7ff fbff 	bl	8001624 <ssd1306_SetCursor>
	char buf0[20] = "Current temp:";
 8001e26:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <wyswietlacz+0x244>)
 8001e28:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001e2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e2e:	c407      	stmia	r4!, {r0, r1, r2}
 8001e30:	8023      	strh	r3, [r4, #0]
 8001e32:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	809a      	strh	r2, [r3, #4]
	ssd1306_WriteString(strcat(buf0, temp_buf), Font_7x10, White);
 8001e3c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001e40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f006 fdc4 	bl	80089d4 <strcat>
 8001e4c:	4a63      	ldr	r2, [pc, #396]	; (8001fdc <wyswietlacz+0x23c>)
 8001e4e:	2301      	movs	r3, #1
 8001e50:	ca06      	ldmia	r2, {r1, r2}
 8001e52:	f7ff fbc1 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001e56:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e5a:	330a      	adds	r3, #10
 8001e5c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	char set_buf[6];
	gcvt(zadane, 4, set_buf);
 8001e60:	4b61      	ldr	r3, [pc, #388]	; (8001fe8 <wyswietlacz+0x248>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb8f 	bl	8000588 <__aeabi_f2d>
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	460d      	mov	r5, r1
 8001e6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e72:	4619      	mov	r1, r3
 8001e74:	2004      	movs	r0, #4
 8001e76:	ec45 4b10 	vmov	d0, r4, r5
 8001e7a:	f006 fd47 	bl	800890c <gcvt>
	ssd1306_SetCursor(2, y);
 8001e7e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e82:	4619      	mov	r1, r3
 8001e84:	2002      	movs	r0, #2
 8001e86:	f7ff fbcd 	bl	8001624 <ssd1306_SetCursor>
	char buf1[20] = "Set temp:";
 8001e8a:	4a58      	ldr	r2, [pc, #352]	; (8001fec <wyswietlacz+0x24c>)
 8001e8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e90:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e92:	c303      	stmia	r3!, {r0, r1}
 8001e94:	801a      	strh	r2, [r3, #0]
 8001e96:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	811a      	strh	r2, [r3, #8]
	ssd1306_WriteString(strcat(buf1, set_buf), Font_7x10, White);
 8001ea2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001ea6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f006 fd91 	bl	80089d4 <strcat>
 8001eb2:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <wyswietlacz+0x23c>)
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	ca06      	ldmia	r2, {r1, r2}
 8001eb8:	f7ff fb8e 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001ebc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001ec0:	330a      	adds	r3, #10
 8001ec2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	ssd1306_SetCursor(2, y);
 8001ec6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001eca:	4619      	mov	r1, r3
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f7ff fba9 	bl	8001624 <ssd1306_SetCursor>
	char buf3[20] = "Przycisk: ";
 8001ed2:	4a47      	ldr	r2, [pc, #284]	; (8001ff0 <wyswietlacz+0x250>)
 8001ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eda:	c303      	stmia	r3!, {r0, r1}
 8001edc:	801a      	strh	r2, [r3, #0]
 8001ede:	3302      	adds	r3, #2
 8001ee0:	0c12      	lsrs	r2, r2, #16
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	721a      	strb	r2, [r3, #8]
	if(stan_przycisku){
 8001ef0:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <wyswietlacz+0x254>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d010      	beq.n	8001f1a <wyswietlacz+0x17a>
		char buf4[2] = "ON";
 8001ef8:	f644 634f 	movw	r3, #20047	; 0x4e4f
 8001efc:	813b      	strh	r3, [r7, #8]
		ssd1306_WriteString(strcat(buf3, buf4), Font_7x10, White);
 8001efe:	f107 0208 	add.w	r2, r7, #8
 8001f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f006 fd63 	bl	80089d4 <strcat>
 8001f0e:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <wyswietlacz+0x23c>)
 8001f10:	2301      	movs	r3, #1
 8001f12:	ca06      	ldmia	r2, {r1, r2}
 8001f14:	f7ff fb60 	bl	80015d8 <ssd1306_WriteString>
 8001f18:	e013      	b.n	8001f42 <wyswietlacz+0x1a2>
	}
	else{
		char buf5[3] = "OFF";
 8001f1a:	4a37      	ldr	r2, [pc, #220]	; (8001ff8 <wyswietlacz+0x258>)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	4611      	mov	r1, r2
 8001f22:	8019      	strh	r1, [r3, #0]
 8001f24:	3302      	adds	r3, #2
 8001f26:	0c12      	lsrs	r2, r2, #16
 8001f28:	701a      	strb	r2, [r3, #0]
		ssd1306_WriteString(strcat(buf3, buf5), Font_7x10, White);
 8001f2a:	1d3a      	adds	r2, r7, #4
 8001f2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f006 fd4e 	bl	80089d4 <strcat>
 8001f38:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <wyswietlacz+0x23c>)
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	ca06      	ldmia	r2, {r1, r2}
 8001f3e:	f7ff fb4b 	bl	80015d8 <ssd1306_WriteString>
	}
	y += 10;
 8001f42:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001f46:	330a      	adds	r3, #10
 8001f48:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f



	float duty_cl = sterowanie/10.0f;
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <wyswietlacz+0x25c>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f58:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f60:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	char duty_buf[6];
	gcvt(duty_cl, 3, duty_buf);
 8001f64:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001f68:	f7fe fb0e 	bl	8000588 <__aeabi_f2d>
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	460d      	mov	r5, r1
 8001f70:	f107 0320 	add.w	r3, r7, #32
 8001f74:	4619      	mov	r1, r3
 8001f76:	2003      	movs	r0, #3
 8001f78:	ec45 4b10 	vmov	d0, r4, r5
 8001f7c:	f006 fcc6 	bl	800890c <gcvt>
	ssd1306_SetCursor(2, y);
 8001f80:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001f84:	4619      	mov	r1, r3
 8001f86:	2002      	movs	r0, #2
 8001f88:	f7ff fb4c 	bl	8001624 <ssd1306_SetCursor>
	char buf2[20] = "Current duty:";
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <wyswietlacz+0x260>)
 8001f8e:	f107 040c 	add.w	r4, r7, #12
 8001f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f94:	c407      	stmia	r4!, {r0, r1, r2}
 8001f96:	8023      	strh	r3, [r4, #0]
 8001f98:	f107 031a 	add.w	r3, r7, #26
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	809a      	strh	r2, [r3, #4]
	ssd1306_WriteString(strcat(buf2, duty_buf), Font_7x10, White);
 8001fa2:	f107 0220 	add.w	r2, r7, #32
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f006 fd11 	bl	80089d4 <strcat>
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <wyswietlacz+0x23c>)
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	ca06      	ldmia	r2, {r1, r2}
 8001fb8:	f7ff fb0e 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001fbc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001fc0:	330a      	adds	r3, #10
 8001fc2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	ssd1306_UpdateScreen();
 8001fc6:	f7ff fa03 	bl	80013d0 <ssd1306_UpdateScreen>
}
 8001fca:	bf00      	nop
 8001fcc:	3790      	adds	r7, #144	; 0x90
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	0800c7a8 	.word	0x0800c7a8
 8001fd8:	2000070c 	.word	0x2000070c
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000710 	.word	0x20000710
 8001fe4:	0800c7bc 	.word	0x0800c7bc
 8001fe8:	20000720 	.word	0x20000720
 8001fec:	0800c7d0 	.word	0x0800c7d0
 8001ff0:	0800c7e4 	.word	0x0800c7e4
 8001ff4:	2000071a 	.word	0x2000071a
 8001ff8:	0800c7f8 	.word	0x0800c7f8
 8001ffc:	2000071c 	.word	0x2000071c
 8002000:	0800c7fc 	.word	0x0800c7fc

08002004 <transmit_data>:

void transmit_data(float current_temp, float set_temp){
 8002004:	b5b0      	push	{r4, r5, r7, lr}
 8002006:	b09c      	sub	sp, #112	; 0x70
 8002008:	af00      	add	r7, sp, #0
 800200a:	ed87 0a01 	vstr	s0, [r7, #4]
 800200e:	edc7 0a00 	vstr	s1, [r7]
    char data_buf[100];
    gcvt(current_temp, 6, data_buf); // convertuje float na string
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fab8 	bl	8000588 <__aeabi_f2d>
 8002018:	4604      	mov	r4, r0
 800201a:	460d      	mov	r5, r1
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	4619      	mov	r1, r3
 8002022:	2006      	movs	r0, #6
 8002024:	ec45 4b10 	vmov	d0, r4, r5
 8002028:	f006 fc70 	bl	800890c <gcvt>
    strcat(data_buf, ";"); // dodaje srednik
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe f8ed 	bl	8000210 <strlen>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	4413      	add	r3, r2
 8002040:	491f      	ldr	r1, [pc, #124]	; (80020c0 <transmit_data+0xbc>)
 8002042:	461a      	mov	r2, r3
 8002044:	460b      	mov	r3, r1
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	8013      	strh	r3, [r2, #0]
    //gcvt(set_temp, 6, data_buf+strlen(data_buf)); // dodaje set_temp do stringa
    gcvt(sterowanie/1.0f, 6, data_buf+strlen(data_buf));
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <transmit_data+0xc0>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002056:	ee17 0a90 	vmov	r0, s15
 800205a:	f7fe fa95 	bl	8000588 <__aeabi_f2d>
 800205e:	4604      	mov	r4, r0
 8002060:	460d      	mov	r5, r1
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f8d2 	bl	8000210 <strlen>
 800206c:	4602      	mov	r2, r0
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	4413      	add	r3, r2
 8002074:	4619      	mov	r1, r3
 8002076:	2006      	movs	r0, #6
 8002078:	ec45 4b10 	vmov	d0, r4, r5
 800207c:	f006 fc46 	bl	800890c <gcvt>
    strcat(data_buf, "\r\n");
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe f8c3 	bl	8000210 <strlen>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	4413      	add	r3, r2
 8002094:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <transmit_data+0xc4>)
 8002096:	8811      	ldrh	r1, [r2, #0]
 8002098:	7892      	ldrb	r2, [r2, #2]
 800209a:	8019      	strh	r1, [r3, #0]
 800209c:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart3, data_buf, strlen(data_buf), 100);
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe f8b4 	bl	8000210 <strlen>
 80020a8:	4603      	mov	r3, r0
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	f107 010c 	add.w	r1, r7, #12
 80020b0:	2364      	movs	r3, #100	; 0x64
 80020b2:	4806      	ldr	r0, [pc, #24]	; (80020cc <transmit_data+0xc8>)
 80020b4:	f005 f998 	bl	80073e8 <HAL_UART_Transmit>
}
 80020b8:	bf00      	nop
 80020ba:	3770      	adds	r7, #112	; 0x70
 80020bc:	46bd      	mov	sp, r7
 80020be:	bdb0      	pop	{r4, r5, r7, pc}
 80020c0:	0800c810 	.word	0x0800c810
 80020c4:	2000071c 	.word	0x2000071c
 80020c8:	0800c814 	.word	0x0800c814
 80020cc:	2000090c 	.word	0x2000090c

080020d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ // If the interrupt is from timer 2 - 10Hz
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e0:	d10f      	bne.n	8002102 <HAL_TIM_PeriodElapsedCallback+0x32>
		transmit_data(current_temperature, value);
 80020e2:	4b2c      	ldr	r3, [pc, #176]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80020ea:	ed93 7a00 	vldr	s14, [r3]
 80020ee:	eef0 0a47 	vmov.f32	s1, s14
 80020f2:	eeb0 0a67 	vmov.f32	s0, s15
 80020f6:	f7ff ff85 	bl	8002004 <transmit_data>
		duty_cycle = sterowanie;
 80020fa:	4b28      	ldr	r3, [pc, #160]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80020fc:	881a      	ldrh	r2, [r3, #0]
 80020fe:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002100:	801a      	strh	r2, [r3, #0]
	}
	if(htim->Instance == TIM3){ // If the interrupt is from timer 3 - 2Hz
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d104      	bne.n	8002116 <HAL_TIM_PeriodElapsedCallback+0x46>
		//ssd1306_TestAll();
		HAL_UART_Receive_IT(&huart3, received_data, 4);
 800210c:	2204      	movs	r2, #4
 800210e:	4926      	ldr	r1, [pc, #152]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002110:	4826      	ldr	r0, [pc, #152]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002112:	f005 f9ec 	bl	80074ee <HAL_UART_Receive_IT>
	}
	if(htim->Instance == TIM4){ // If the interrupt is from timer 4 - 8Hz
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d111      	bne.n	8002144 <HAL_TIM_PeriodElapsedCallback+0x74>
		MCP9808_MeasureTemperature(&current_temperature);
 8002120:	481c      	ldr	r0, [pc, #112]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002122:	f7fe ffe9 	bl	80010f8 <MCP9808_MeasureTemperature>
		stan_przycisku = button_state();
 8002126:	f7ff fde3 	bl	8001cf0 <button_state>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002130:	701a      	strb	r2, [r3, #0]
		value = zadajnik();
 8002132:	f7ff fdb9 	bl	8001ca8 <zadajnik>
 8002136:	eef0 7a40 	vmov.f32	s15, s0
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800213c:	edc3 7a00 	vstr	s15, [r3]
		wyswietlacz();
 8002140:	f7ff fe2e 	bl	8001da0 <wyswietlacz>
	}
	if(htim->Instance == TIM12){ // If the interrupt is from timer 12 - ~83.3kHz
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d11e      	bne.n	800218c <HAL_TIM_PeriodElapsedCallback+0xbc>
			if(stan_przycisku){
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d010      	beq.n	8002178 <HAL_TIM_PeriodElapsedCallback+0xa8>
				sterowanie = pid_calculate(zadane, current_temperature); // te tutej pod testowanie pwm-a sa
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800215e:	ed93 7a00 	vldr	s14, [r3]
 8002162:	eef0 0a47 	vmov.f32	s1, s14
 8002166:	eeb0 0a67 	vmov.f32	s0, s15
 800216a:	f000 f927 	bl	80023bc <pid_calculate>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002174:	801a      	strh	r2, [r3, #0]
 8002176:	e002      	b.n	800217e <HAL_TIM_PeriodElapsedCallback+0xae>
			}
			else{
				sterowanie = 0;
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800217a:	2200      	movs	r2, #0
 800217c:	801a      	strh	r2, [r3, #0]
			}
			change_duty_cycle(&htim1, TIM_CHANNEL_1, sterowanie);
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	2100      	movs	r1, #0
 8002186:	480e      	ldr	r0, [pc, #56]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002188:	f7ff fdc4 	bl	8001d14 <change_duty_cycle>
		}

}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000710 	.word	0x20000710
 8002198:	20000714 	.word	0x20000714
 800219c:	2000071c 	.word	0x2000071c
 80021a0:	20000718 	.word	0x20000718
 80021a4:	40000400 	.word	0x40000400
 80021a8:	2000070c 	.word	0x2000070c
 80021ac:	2000090c 	.word	0x2000090c
 80021b0:	40000800 	.word	0x40000800
 80021b4:	2000071a 	.word	0x2000071a
 80021b8:	40001800 	.word	0x40001800
 80021bc:	20000720 	.word	0x20000720
 80021c0:	20000744 	.word	0x20000744

080021c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c8:	f000 fe93 	bl	8002ef2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021cc:	f000 f85c 	bl	8002288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d0:	f7ff fb04 	bl	80017dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80021d4:	f000 fdcc 	bl	8002d70 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80021d8:	f7ff fc28 	bl	8001a2c <MX_I2C2_Init>
  MX_TIM2_Init();
 80021dc:	f000 fb60 	bl	80028a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80021e0:	f000 fbac 	bl	800293c <MX_TIM3_Init>
  MX_TIM4_Init();
 80021e4:	f000 fbfa 	bl	80029dc <MX_TIM4_Init>
  MX_I2C4_Init();
 80021e8:	f7ff fc60 	bl	8001aac <MX_I2C4_Init>
  MX_ADC1_Init();
 80021ec:	f7ff fa64 	bl	80016b8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80021f0:	f000 fac8 	bl	8002784 <MX_TIM1_Init>
  MX_TIM8_Init();
 80021f4:	f000 fc42 	bl	8002a7c <MX_TIM8_Init>
  MX_TIM12_Init();
 80021f8:	f000 fc94 	bl	8002b24 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_TestAll();
  ssd1306_Init(); // Inicjalizacja wyświetlacza
 80021fc:	f7ff f85a 	bl	80012b4 <ssd1306_Init>
  MCP9808_Init(&hi2c4, 0x18); // inicjalizacja sensora temperatury
 8002200:	2118      	movs	r1, #24
 8002202:	4816      	ldr	r0, [pc, #88]	; (800225c <main+0x98>)
 8002204:	f7fe ff02 	bl	800100c <MCP9808_Init>
  // Tutej nastawiają się dokładności czujnika temperatury :))))
  MCP9808_SetResolution(MCP9808_High_Res);  ///> High 0.125 (130 ms)
 8002208:	2002      	movs	r0, #2
 800220a:	f7fe fff5 	bl	80011f8 <MCP9808_SetResolution>
  pid_init(kp, ki, kd);  // tutaj inicjalizuje i nastawia się wartości PID
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <main+0x9c>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <main+0xa0>)
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <main+0xa4>)
 800221c:	edd3 6a00 	vldr	s13, [r3]
 8002220:	eeb0 1a66 	vmov.f32	s2, s13
 8002224:	eef0 0a47 	vmov.f32	s1, s14
 8002228:	eeb0 0a67 	vmov.f32	s0, s15
 800222c:	f000 f8a0 	bl	8002370 <pid_init>

  HAL_UART_Receive_IT(&huart3, received_data, 4);
 8002230:	2204      	movs	r2, #4
 8002232:	490e      	ldr	r1, [pc, #56]	; (800226c <main+0xa8>)
 8002234:	480e      	ldr	r0, [pc, #56]	; (8002270 <main+0xac>)
 8002236:	f005 f95a 	bl	80074ee <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800223a:	2100      	movs	r1, #0
 800223c:	480d      	ldr	r0, [pc, #52]	; (8002274 <main+0xb0>)
 800223e:	f003 ff7d 	bl	800613c <HAL_TIM_PWM_Start>

// te niżej najlepiej jak beda na koncu // tak powiedzial szef
  HAL_TIM_Base_Start_IT(&htim2);
 8002242:	480d      	ldr	r0, [pc, #52]	; (8002278 <main+0xb4>)
 8002244:	f003 feaa 	bl	8005f9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <main+0xb8>)
 800224a:	f003 fea7 	bl	8005f9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800224e:	480c      	ldr	r0, [pc, #48]	; (8002280 <main+0xbc>)
 8002250:	f003 fea4 	bl	8005f9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim12);
 8002254:	480b      	ldr	r0, [pc, #44]	; (8002284 <main+0xc0>)
 8002256:	f003 fea1 	bl	8005f9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800225a:	e7fe      	b.n	800225a <main+0x96>
 800225c:	200006b8 	.word	0x200006b8
 8002260:	20000008 	.word	0x20000008
 8002264:	2000000c 	.word	0x2000000c
 8002268:	20000724 	.word	0x20000724
 800226c:	2000070c 	.word	0x2000070c
 8002270:	2000090c 	.word	0x2000090c
 8002274:	20000744 	.word	0x20000744
 8002278:	20000790 	.word	0x20000790
 800227c:	200007dc 	.word	0x200007dc
 8002280:	20000828 	.word	0x20000828
 8002284:	200008c0 	.word	0x200008c0

08002288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b094      	sub	sp, #80	; 0x50
 800228c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228e:	f107 0320 	add.w	r3, r7, #32
 8002292:	2230      	movs	r2, #48	; 0x30
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f006 fb94 	bl	80089c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022ac:	f002 fd04 	bl	8004cb8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <SystemClock_Config+0xd4>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <SystemClock_Config+0xd4>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	6413      	str	r3, [r2, #64]	; 0x40
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <SystemClock_Config+0xd4>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <SystemClock_Config+0xd8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a24      	ldr	r2, [pc, #144]	; (8002360 <SystemClock_Config+0xd8>)
 80022ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b22      	ldr	r3, [pc, #136]	; (8002360 <SystemClock_Config+0xd8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022e0:	2301      	movs	r3, #1
 80022e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ea:	2302      	movs	r3, #2
 80022ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022f4:	2304      	movs	r3, #4
 80022f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80022f8:	23d8      	movs	r3, #216	; 0xd8
 80022fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022fc:	2302      	movs	r3, #2
 80022fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002300:	2309      	movs	r3, #9
 8002302:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002304:	f107 0320 	add.w	r3, r7, #32
 8002308:	4618      	mov	r0, r3
 800230a:	f002 fd35 	bl	8004d78 <HAL_RCC_OscConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002314:	f000 f826 	bl	8002364 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002318:	f002 fcde 	bl	8004cd8 <HAL_PWREx_EnableOverDrive>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002322:	f000 f81f 	bl	8002364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002326:	230f      	movs	r3, #15
 8002328:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800232a:	2302      	movs	r3, #2
 800232c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002332:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002336:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002338:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800233c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	2107      	movs	r1, #7
 8002344:	4618      	mov	r0, r3
 8002346:	f002 ffbb 	bl	80052c0 <HAL_RCC_ClockConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002350:	f000 f808 	bl	8002364 <Error_Handler>
  }
}
 8002354:	bf00      	nop
 8002356:	3750      	adds	r7, #80	; 0x50
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40023800 	.word	0x40023800
 8002360:	40007000 	.word	0x40007000

08002364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002368:	b672      	cpsid	i
}
 800236a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800236c:	e7fe      	b.n	800236c <Error_Handler+0x8>
	...

08002370 <pid_init>:
};

static struct pid_params pid_params;

void pid_init(float kp, float ki, float kd)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	ed87 0a03 	vstr	s0, [r7, #12]
 800237a:	edc7 0a02 	vstr	s1, [r7, #8]
 800237e:	ed87 1a01 	vstr	s2, [r7, #4]
	pid_params.kp = kp;
 8002382:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <pid_init+0x48>)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6013      	str	r3, [r2, #0]
	pid_params.ki = ki;
 8002388:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <pid_init+0x48>)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	6053      	str	r3, [r2, #4]
	pid_params.kd = kd;
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <pid_init+0x48>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6093      	str	r3, [r2, #8]
	pid_params.err = 0;
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <pid_init+0x48>)
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	60da      	str	r2, [r3, #12]
	pid_params.err_sum = 0;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <pid_init+0x48>)
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
	pid_params.err_last = 0;
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <pid_init+0x48>)
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	615a      	str	r2, [r3, #20]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	20000728 	.word	0x20000728

080023bc <pid_calculate>:

uint16_t pid_calculate(float set_val, float read_val)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80023c6:	edc7 0a00 	vstr	s1, [r7]
	float err_d, u;
	uint16_t u_ext;

	pid_params.err = set_val - read_val;
 80023ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80023ce:	edd7 7a00 	vldr	s15, [r7]
 80023d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d6:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <pid_calculate+0xfc>)
 80023d8:	edc3 7a03 	vstr	s15, [r3, #12]
	pid_params.err_sum += pid_params.err;
 80023dc:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <pid_calculate+0xfc>)
 80023de:	ed93 7a04 	vldr	s14, [r3, #16]
 80023e2:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <pid_calculate+0xfc>)
 80023e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80023e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ec:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <pid_calculate+0xfc>)
 80023ee:	edc3 7a04 	vstr	s15, [r3, #16]

	if (pid_params.err_sum > ERR_SUM_MAX) {
 80023f2:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <pid_calculate+0xfc>)
 80023f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80023f8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80024bc <pid_calculate+0x100>
 80023fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002404:	dd03      	ble.n	800240e <pid_calculate+0x52>
		pid_params.err_sum = ERR_SUM_MAX;
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <pid_calculate+0xfc>)
 8002408:	4a2d      	ldr	r2, [pc, #180]	; (80024c0 <pid_calculate+0x104>)
 800240a:	611a      	str	r2, [r3, #16]
 800240c:	e00c      	b.n	8002428 <pid_calculate+0x6c>
	} else if (pid_params.err_sum < -ERR_SUM_MAX) {
 800240e:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <pid_calculate+0xfc>)
 8002410:	edd3 7a04 	vldr	s15, [r3, #16]
 8002414:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80024c4 <pid_calculate+0x108>
 8002418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	d502      	bpl.n	8002428 <pid_calculate+0x6c>
		pid_params.err_sum = -ERR_SUM_MAX;
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <pid_calculate+0xfc>)
 8002424:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <pid_calculate+0x10c>)
 8002426:	611a      	str	r2, [r3, #16]
	}

	err_d = pid_params.err_last - pid_params.err;
 8002428:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <pid_calculate+0xfc>)
 800242a:	ed93 7a05 	vldr	s14, [r3, #20]
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <pid_calculate+0xfc>)
 8002430:	edd3 7a03 	vldr	s15, [r3, #12]
 8002434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002438:	edc7 7a04 	vstr	s15, [r7, #16]
	pid_params.err_last = pid_params.err;
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <pid_calculate+0xfc>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a1d      	ldr	r2, [pc, #116]	; (80024b8 <pid_calculate+0xfc>)
 8002442:	6153      	str	r3, [r2, #20]
	u = pid_params.kp * pid_params.err + pid_params.ki * pid_params.err_sum
 8002444:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <pid_calculate+0xfc>)
 8002446:	ed93 7a00 	vldr	s14, [r3]
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <pid_calculate+0xfc>)
 800244c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002450:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <pid_calculate+0xfc>)
 8002456:	edd3 6a01 	vldr	s13, [r3, #4]
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <pid_calculate+0xfc>)
 800245c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002464:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid_params.kd * err_d;
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <pid_calculate+0xfc>)
 800246a:	edd3 6a02 	vldr	s13, [r3, #8]
 800246e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002472:	ee66 7aa7 	vmul.f32	s15, s13, s15
	u = pid_params.kp * pid_params.err + pid_params.ki * pid_params.err_sum
 8002476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247a:	edc7 7a03 	vstr	s15, [r7, #12]
	u_ext = round(u);
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7fe f882 	bl	8000588 <__aeabi_f2d>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	ec43 2b10 	vmov	d0, r2, r3
 800248c:	f00a f93a 	bl	800c704 <round>
 8002490:	ec53 2b10 	vmov	r2, r3, d0
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fb90 	bl	8000bbc <__aeabi_d2uiz>
 800249c:	4603      	mov	r3, r0
 800249e:	82fb      	strh	r3, [r7, #22]
	if(u_ext>1000){
 80024a0:	8afb      	ldrh	r3, [r7, #22]
 80024a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024a6:	d902      	bls.n	80024ae <pid_calculate+0xf2>
		u_ext = 1000;
 80024a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ac:	82fb      	strh	r3, [r7, #22]
	}
	else if(u_ext<0){
		u_ext = 0;
	}
	return u_ext;
 80024ae:	8afb      	ldrh	r3, [r7, #22]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000728 	.word	0x20000728
 80024bc:	459c4000 	.word	0x459c4000
 80024c0:	459c4000 	.word	0x459c4000
 80024c4:	c59c4000 	.word	0xc59c4000
 80024c8:	c59c4000 	.word	0xc59c4000

080024cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_MspInit+0x44>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <HAL_MspInit+0x44>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_MspInit+0x44>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_MspInit+0x44>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	4a08      	ldr	r2, [pc, #32]	; (8002510 <HAL_MspInit+0x44>)
 80024f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f4:	6453      	str	r3, [r2, #68]	; 0x44
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_MspInit+0x44>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <NMI_Handler+0x4>

0800251a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <HardFault_Handler+0x4>

08002520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <MemManage_Handler+0x4>

08002526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <UsageFault_Handler+0x4>

08002532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002560:	f000 fd04 	bl	8002f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}

08002568 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <TIM2_IRQHandler+0x10>)
 800256e:	f003 fedf 	bl	8006330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000790 	.word	0x20000790

0800257c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <TIM3_IRQHandler+0x10>)
 8002582:	f003 fed5 	bl	8006330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200007dc 	.word	0x200007dc

08002590 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <TIM4_IRQHandler+0x10>)
 8002596:	f003 fecb 	bl	8006330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000828 	.word	0x20000828

080025a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <USART3_IRQHandler+0x10>)
 80025aa:	f004 ffe5 	bl	8007578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000090c 	.word	0x2000090c

080025b8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80025bc:	4803      	ldr	r0, [pc, #12]	; (80025cc <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80025be:	f003 feb7 	bl	8006330 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80025c4:	f003 feb4 	bl	8006330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000874 	.word	0x20000874
 80025d0:	200008c0 	.word	0x200008c0

080025d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_kill>:

int _kill(int pid, int sig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ee:	f006 f9b1 	bl	8008954 <__errno>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2216      	movs	r2, #22
 80025f6:	601a      	str	r2, [r3, #0]
  return -1;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_exit>:

void _exit (int status)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ffe7 	bl	80025e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002616:	e7fe      	b.n	8002616 <_exit+0x12>

08002618 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	e00a      	b.n	8002640 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800262a:	f3af 8000 	nop.w
 800262e:	4601      	mov	r1, r0
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	60ba      	str	r2, [r7, #8]
 8002636:	b2ca      	uxtb	r2, r1
 8002638:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	dbf0      	blt.n	800262a <_read+0x12>
  }

  return len;
 8002648:	687b      	ldr	r3, [r7, #4]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e009      	b.n	8002678 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	60ba      	str	r2, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	dbf1      	blt.n	8002664 <_write+0x12>
  }
  return len;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_close>:

int _close(int file)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026b2:	605a      	str	r2, [r3, #4]
  return 0;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <_isatty>:

int _isatty(int file)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026fc:	4a14      	ldr	r2, [pc, #80]	; (8002750 <_sbrk+0x5c>)
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <_sbrk+0x60>)
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <_sbrk+0x64>)
 8002712:	4a12      	ldr	r2, [pc, #72]	; (800275c <_sbrk+0x68>)
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	429a      	cmp	r2, r3
 8002722:	d207      	bcs.n	8002734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002724:	f006 f916 	bl	8008954 <__errno>
 8002728:	4603      	mov	r3, r0
 800272a:	220c      	movs	r2, #12
 800272c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	e009      	b.n	8002748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <_sbrk+0x64>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <_sbrk+0x64>)
 8002744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002746:	68fb      	ldr	r3, [r7, #12]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20050000 	.word	0x20050000
 8002754:	00000400 	.word	0x00000400
 8002758:	20000740 	.word	0x20000740
 800275c:	200009a8 	.word	0x200009a8

08002760 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <SystemInit+0x20>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	4a05      	ldr	r2, [pc, #20]	; (8002780 <SystemInit+0x20>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b096      	sub	sp, #88	; 0x58
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002796:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]
 80027a6:	615a      	str	r2, [r3, #20]
 80027a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	222c      	movs	r2, #44	; 0x2c
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f006 f907 	bl	80089c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027b6:	4b38      	ldr	r3, [pc, #224]	; (8002898 <MX_TIM1_Init+0x114>)
 80027b8:	4a38      	ldr	r2, [pc, #224]	; (800289c <MX_TIM1_Init+0x118>)
 80027ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 80027bc:	4b36      	ldr	r3, [pc, #216]	; (8002898 <MX_TIM1_Init+0x114>)
 80027be:	226b      	movs	r2, #107	; 0x6b
 80027c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c2:	4b35      	ldr	r3, [pc, #212]	; (8002898 <MX_TIM1_Init+0x114>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80027c8:	4b33      	ldr	r3, [pc, #204]	; (8002898 <MX_TIM1_Init+0x114>)
 80027ca:	2263      	movs	r2, #99	; 0x63
 80027cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <MX_TIM1_Init+0x114>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027d4:	4b30      	ldr	r3, [pc, #192]	; (8002898 <MX_TIM1_Init+0x114>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027da:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <MX_TIM1_Init+0x114>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027e0:	482d      	ldr	r0, [pc, #180]	; (8002898 <MX_TIM1_Init+0x114>)
 80027e2:	f003 fc53 	bl	800608c <HAL_TIM_PWM_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80027ec:	f7ff fdba 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f0:	2300      	movs	r3, #0
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002800:	4619      	mov	r1, r3
 8002802:	4825      	ldr	r0, [pc, #148]	; (8002898 <MX_TIM1_Init+0x114>)
 8002804:	f004 fc78 	bl	80070f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800280e:	f7ff fda9 	bl	8002364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002812:	2360      	movs	r3, #96	; 0x60
 8002814:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800281a:	2300      	movs	r3, #0
 800281c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800281e:	2300      	movs	r3, #0
 8002820:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800282e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002832:	2200      	movs	r2, #0
 8002834:	4619      	mov	r1, r3
 8002836:	4818      	ldr	r0, [pc, #96]	; (8002898 <MX_TIM1_Init+0x114>)
 8002838:	f003 fe9a 	bl	8006570 <HAL_TIM_PWM_ConfigChannel>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002842:	f7ff fd8f 	bl	8002364 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800285a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800285e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4807      	ldr	r0, [pc, #28]	; (8002898 <MX_TIM1_Init+0x114>)
 800287c:	f004 fcca 	bl	8007214 <HAL_TIMEx_ConfigBreakDeadTime>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002886:	f7ff fd6d 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800288a:	4803      	ldr	r0, [pc, #12]	; (8002898 <MX_TIM1_Init+0x114>)
 800288c:	f000 fa38 	bl	8002d00 <HAL_TIM_MspPostInit>

}
 8002890:	bf00      	nop
 8002892:	3758      	adds	r7, #88	; 0x58
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000744 	.word	0x20000744
 800289c:	40010000 	.word	0x40010000

080028a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <MX_TIM2_Init+0x98>)
 80028c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10799;
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <MX_TIM2_Init+0x98>)
 80028c8:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80028cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <MX_TIM2_Init+0x98>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <MX_TIM2_Init+0x98>)
 80028d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028dc:	4b16      	ldr	r3, [pc, #88]	; (8002938 <MX_TIM2_Init+0x98>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <MX_TIM2_Init+0x98>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028e8:	4813      	ldr	r0, [pc, #76]	; (8002938 <MX_TIM2_Init+0x98>)
 80028ea:	f003 faff 	bl	8005eec <HAL_TIM_Base_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80028f4:	f7ff fd36 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	4619      	mov	r1, r3
 8002904:	480c      	ldr	r0, [pc, #48]	; (8002938 <MX_TIM2_Init+0x98>)
 8002906:	f003 ff47 	bl	8006798 <HAL_TIM_ConfigClockSource>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002910:	f7ff fd28 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002914:	2300      	movs	r3, #0
 8002916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4805      	ldr	r0, [pc, #20]	; (8002938 <MX_TIM2_Init+0x98>)
 8002922:	f004 fbe9 	bl	80070f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800292c:	f7ff fd1a 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002930:	bf00      	nop
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000790 	.word	0x20000790

0800293c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002942:	f107 0310 	add.w	r3, r7, #16
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <MX_TIM3_Init+0x98>)
 800295c:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <MX_TIM3_Init+0x9c>)
 800295e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 8002960:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <MX_TIM3_Init+0x98>)
 8002962:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002966:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <MX_TIM3_Init+0x98>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <MX_TIM3_Init+0x98>)
 8002970:	f241 3287 	movw	r2, #4999	; 0x1387
 8002974:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <MX_TIM3_Init+0x98>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <MX_TIM3_Init+0x98>)
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002982:	4814      	ldr	r0, [pc, #80]	; (80029d4 <MX_TIM3_Init+0x98>)
 8002984:	f003 fab2 	bl	8005eec <HAL_TIM_Base_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800298e:	f7ff fce9 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002996:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	4619      	mov	r1, r3
 800299e:	480d      	ldr	r0, [pc, #52]	; (80029d4 <MX_TIM3_Init+0x98>)
 80029a0:	f003 fefa 	bl	8006798 <HAL_TIM_ConfigClockSource>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80029aa:	f7ff fcdb 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	4619      	mov	r1, r3
 80029ba:	4806      	ldr	r0, [pc, #24]	; (80029d4 <MX_TIM3_Init+0x98>)
 80029bc:	f004 fb9c 	bl	80070f8 <HAL_TIMEx_MasterConfigSynchronization>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80029c6:	f7ff fccd 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029ca:	bf00      	nop
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200007dc 	.word	0x200007dc
 80029d8:	40000400 	.word	0x40000400

080029dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029fa:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <MX_TIM4_Init+0x98>)
 80029fc:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <MX_TIM4_Init+0x9c>)
 80029fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10799;
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <MX_TIM4_Init+0x98>)
 8002a02:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002a06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <MX_TIM4_Init+0x98>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1249;
 8002a0e:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <MX_TIM4_Init+0x98>)
 8002a10:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002a14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <MX_TIM4_Init+0x98>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1c:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <MX_TIM4_Init+0x98>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a22:	4814      	ldr	r0, [pc, #80]	; (8002a74 <MX_TIM4_Init+0x98>)
 8002a24:	f003 fa62 	bl	8005eec <HAL_TIM_Base_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002a2e:	f7ff fc99 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a38:	f107 0310 	add.w	r3, r7, #16
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480d      	ldr	r0, [pc, #52]	; (8002a74 <MX_TIM4_Init+0x98>)
 8002a40:	f003 feaa 	bl	8006798 <HAL_TIM_ConfigClockSource>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002a4a:	f7ff fc8b 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4806      	ldr	r0, [pc, #24]	; (8002a74 <MX_TIM4_Init+0x98>)
 8002a5c:	f004 fb4c 	bl	80070f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002a66:	f7ff fc7d 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000828 	.word	0x20000828
 8002a78:	40000800 	.word	0x40000800

08002a7c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a82:	f107 0310 	add.w	r3, r7, #16
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <MX_TIM8_Init+0xa0>)
 8002a9c:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <MX_TIM8_Init+0xa4>)
 8002a9e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 107;
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <MX_TIM8_Init+0xa0>)
 8002aa2:	226b      	movs	r2, #107	; 0x6b
 8002aa4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <MX_TIM8_Init+0xa0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <MX_TIM8_Init+0xa0>)
 8002aae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ab2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <MX_TIM8_Init+0xa0>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <MX_TIM8_Init+0xa0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <MX_TIM8_Init+0xa0>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002ac6:	4815      	ldr	r0, [pc, #84]	; (8002b1c <MX_TIM8_Init+0xa0>)
 8002ac8:	f003 fa10 	bl	8005eec <HAL_TIM_Base_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002ad2:	f7ff fc47 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ada:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002adc:	f107 0310 	add.w	r3, r7, #16
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	480e      	ldr	r0, [pc, #56]	; (8002b1c <MX_TIM8_Init+0xa0>)
 8002ae4:	f003 fe58 	bl	8006798 <HAL_TIM_ConfigClockSource>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002aee:	f7ff fc39 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	4619      	mov	r1, r3
 8002b02:	4806      	ldr	r0, [pc, #24]	; (8002b1c <MX_TIM8_Init+0xa0>)
 8002b04:	f004 faf8 	bl	80070f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002b0e:	f7ff fc29 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b12:	bf00      	nop
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000874 	.word	0x20000874
 8002b20:	40010400 	.word	0x40010400

08002b24 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <MX_TIM12_Init+0x6c>)
 8002b38:	4a16      	ldr	r2, [pc, #88]	; (8002b94 <MX_TIM12_Init+0x70>)
 8002b3a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1295;
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <MX_TIM12_Init+0x6c>)
 8002b3e:	f240 520f 	movw	r2, #1295	; 0x50f
 8002b42:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <MX_TIM12_Init+0x6c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <MX_TIM12_Init+0x6c>)
 8002b4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b50:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <MX_TIM12_Init+0x6c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <MX_TIM12_Init+0x6c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002b5e:	480c      	ldr	r0, [pc, #48]	; (8002b90 <MX_TIM12_Init+0x6c>)
 8002b60:	f003 f9c4 	bl	8005eec <HAL_TIM_Base_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8002b6a:	f7ff fbfb 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b72:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002b74:	463b      	mov	r3, r7
 8002b76:	4619      	mov	r1, r3
 8002b78:	4805      	ldr	r0, [pc, #20]	; (8002b90 <MX_TIM12_Init+0x6c>)
 8002b7a:	f003 fe0d 	bl	8006798 <HAL_TIM_ConfigClockSource>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8002b84:	f7ff fbee 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	200008c0 	.word	0x200008c0
 8002b94:	40001800 	.word	0x40001800

08002b98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_TIM_PWM_MspInit+0x38>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40023800 	.word	0x40023800

08002bd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d114      	bne.n	8002c14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bea:	4b40      	ldr	r3, [pc, #256]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4a3f      	ldr	r2, [pc, #252]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2100      	movs	r1, #0
 8002c06:	201c      	movs	r0, #28
 8002c08:	f000 fec9 	bl	800399e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c0c:	201c      	movs	r0, #28
 8002c0e:	f000 fee2 	bl	80039d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002c12:	e066      	b.n	8002ce2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM3)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a35      	ldr	r2, [pc, #212]	; (8002cf0 <HAL_TIM_Base_MspInit+0x118>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d114      	bne.n	8002c48 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1e:	4b33      	ldr	r3, [pc, #204]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a32      	ldr	r2, [pc, #200]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2100      	movs	r1, #0
 8002c3a:	201d      	movs	r0, #29
 8002c3c:	f000 feaf 	bl	800399e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c40:	201d      	movs	r0, #29
 8002c42:	f000 fec8 	bl	80039d6 <HAL_NVIC_EnableIRQ>
}
 8002c46:	e04c      	b.n	8002ce2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM4)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <HAL_TIM_Base_MspInit+0x11c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d114      	bne.n	8002c7c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a25      	ldr	r2, [pc, #148]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	201e      	movs	r0, #30
 8002c70:	f000 fe95 	bl	800399e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c74:	201e      	movs	r0, #30
 8002c76:	f000 feae 	bl	80039d6 <HAL_NVIC_EnableIRQ>
}
 8002c7a:	e032      	b.n	8002ce2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM8)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_TIM_Base_MspInit+0x120>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d114      	bne.n	8002cb0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4a18      	ldr	r2, [pc, #96]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	202b      	movs	r0, #43	; 0x2b
 8002ca4:	f000 fe7b 	bl	800399e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002ca8:	202b      	movs	r0, #43	; 0x2b
 8002caa:	f000 fe94 	bl	80039d6 <HAL_NVIC_EnableIRQ>
}
 8002cae:	e018      	b.n	8002ce2 <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM12)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a11      	ldr	r2, [pc, #68]	; (8002cfc <HAL_TIM_Base_MspInit+0x124>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d113      	bne.n	8002ce2 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_TIM_Base_MspInit+0x114>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	202b      	movs	r0, #43	; 0x2b
 8002cd8:	f000 fe61 	bl	800399e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002cdc:	202b      	movs	r0, #43	; 0x2b
 8002cde:	f000 fe7a 	bl	80039d6 <HAL_NVIC_EnableIRQ>
}
 8002ce2:	bf00      	nop
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40010400 	.word	0x40010400
 8002cfc:	40001800 	.word	0x40001800

08002d00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 030c 	add.w	r3, r7, #12
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_TIM_MspPostInit+0x64>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d11c      	bne.n	8002d5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_TIM_MspPostInit+0x68>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <HAL_TIM_MspPostInit+0x68>)
 8002d28:	f043 0310 	orr.w	r3, r3, #16
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_TIM_MspPostInit+0x68>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	4619      	mov	r1, r3
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <HAL_TIM_MspPostInit+0x6c>)
 8002d58:	f000 feea 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d5c:	bf00      	nop
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40010000 	.word	0x40010000
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40021000 	.word	0x40021000

08002d70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <MX_USART3_UART_Init+0x58>)
 8002d76:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <MX_USART3_UART_Init+0x5c>)
 8002d78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d7a:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <MX_USART3_UART_Init+0x58>)
 8002d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <MX_USART3_UART_Init+0x58>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <MX_USART3_UART_Init+0x58>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <MX_USART3_UART_Init+0x58>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <MX_USART3_UART_Init+0x58>)
 8002d96:	220c      	movs	r2, #12
 8002d98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <MX_USART3_UART_Init+0x58>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <MX_USART3_UART_Init+0x58>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <MX_USART3_UART_Init+0x58>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <MX_USART3_UART_Init+0x58>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002db2:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <MX_USART3_UART_Init+0x58>)
 8002db4:	f004 faca 	bl	800734c <HAL_UART_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002dbe:	f7ff fad1 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	2000090c 	.word	0x2000090c
 8002dcc:	40004800 	.word	0x40004800

08002dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b0aa      	sub	sp, #168	; 0xa8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002de8:	f107 0310 	add.w	r3, r7, #16
 8002dec:	2284      	movs	r2, #132	; 0x84
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f005 fde7 	bl	80089c4 <memset>
  if(uartHandle->Instance==USART3)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a26      	ldr	r2, [pc, #152]	; (8002e94 <HAL_UART_MspInit+0xc4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d144      	bne.n	8002e8a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e04:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e06:	2300      	movs	r3, #0
 8002e08:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e0a:	f107 0310 	add.w	r3, r7, #16
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 fc7c 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e1a:	f7ff faa3 	bl	8002364 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <HAL_UART_MspInit+0xc8>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <HAL_UART_MspInit+0xc8>)
 8002e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_UART_MspInit+0xc8>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e36:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <HAL_UART_MspInit+0xc8>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <HAL_UART_MspInit+0xc8>)
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <HAL_UART_MspInit+0xc8>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e68:	2307      	movs	r3, #7
 8002e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e72:	4619      	mov	r1, r3
 8002e74:	4809      	ldr	r0, [pc, #36]	; (8002e9c <HAL_UART_MspInit+0xcc>)
 8002e76:	f000 fe5b 	bl	8003b30 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2027      	movs	r0, #39	; 0x27
 8002e80:	f000 fd8d 	bl	800399e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e84:	2027      	movs	r0, #39	; 0x27
 8002e86:	f000 fda6 	bl	80039d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	37a8      	adds	r7, #168	; 0xa8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40004800 	.word	0x40004800
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40020c00 	.word	0x40020c00

08002ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ea4:	480d      	ldr	r0, [pc, #52]	; (8002edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ea6:	490e      	ldr	r1, [pc, #56]	; (8002ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ea8:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eac:	e002      	b.n	8002eb4 <LoopCopyDataInit>

08002eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eb2:	3304      	adds	r3, #4

08002eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb8:	d3f9      	bcc.n	8002eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ebc:	4c0b      	ldr	r4, [pc, #44]	; (8002eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec0:	e001      	b.n	8002ec6 <LoopFillZerobss>

08002ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec4:	3204      	adds	r2, #4

08002ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec8:	d3fb      	bcc.n	8002ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eca:	f7ff fc49 	bl	8002760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ece:	f005 fd47 	bl	8008960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ed2:	f7ff f977 	bl	80021c4 <main>
  bx  lr    
 8002ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ed8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002ee4:	0800d440 	.word	0x0800d440
  ldr r2, =_sbss
 8002ee8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002eec:	200009a8 	.word	0x200009a8

08002ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef0:	e7fe      	b.n	8002ef0 <ADC_IRQHandler>

08002ef2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef6:	2003      	movs	r0, #3
 8002ef8:	f000 fd46 	bl	8003988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f000 f805 	bl	8002f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f02:	f7ff fae3 	bl	80024cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_InitTick+0x54>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_InitTick+0x58>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fd61 	bl	80039f2 <HAL_SYSTICK_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e00e      	b.n	8002f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b0f      	cmp	r3, #15
 8002f3e:	d80a      	bhi.n	8002f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f40:	2200      	movs	r2, #0
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	f000 fd29 	bl	800399e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f4c:	4a06      	ldr	r2, [pc, #24]	; (8002f68 <HAL_InitTick+0x5c>)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000010 	.word	0x20000010
 8002f64:	20000018 	.word	0x20000018
 8002f68:	20000014 	.word	0x20000014

08002f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_IncTick+0x20>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_IncTick+0x24>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <HAL_IncTick+0x24>)
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000018 	.word	0x20000018
 8002f90:	20000994 	.word	0x20000994

08002f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return uwTick;
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <HAL_GetTick+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000994 	.word	0x20000994

08002fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff ffee 	bl	8002f94 <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d005      	beq.n	8002fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_Delay+0x44>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fd2:	bf00      	nop
 8002fd4:	f7ff ffde 	bl	8002f94 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d8f7      	bhi.n	8002fd4 <HAL_Delay+0x28>
  {
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000018 	.word	0x20000018

08002ff4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e031      	b.n	800306e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe fba2 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d116      	bne.n	8003060 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_ADC_Init+0x84>)
 8003038:	4013      	ands	r3, r2
 800303a:	f043 0202 	orr.w	r2, r3, #2
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fad6 	bl	80035f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	f043 0201 	orr.w	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
 800305e:	e001      	b.n	8003064 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	ffffeefd 	.word	0xffffeefd

0800307c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_ADC_Start+0x1a>
 8003092:	2302      	movs	r3, #2
 8003094:	e0ad      	b.n	80031f2 <HAL_ADC_Start+0x176>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d018      	beq.n	80030de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80030bc:	4b50      	ldr	r3, [pc, #320]	; (8003200 <HAL_ADC_Start+0x184>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a50      	ldr	r2, [pc, #320]	; (8003204 <HAL_ADC_Start+0x188>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0c9a      	lsrs	r2, r3, #18
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80030d0:	e002      	b.n	80030d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f9      	bne.n	80030d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d175      	bne.n	80031d8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f0:	4b45      	ldr	r3, [pc, #276]	; (8003208 <HAL_ADC_Start+0x18c>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003112:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003126:	d106      	bne.n	8003136 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312c:	f023 0206 	bic.w	r2, r3, #6
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	645a      	str	r2, [r3, #68]	; 0x44
 8003134:	e002      	b.n	800313c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800314c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800314e:	4b2f      	ldr	r3, [pc, #188]	; (800320c <HAL_ADC_Start+0x190>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d143      	bne.n	80031f0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	e03a      	b.n	80031f0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a24      	ldr	r2, [pc, #144]	; (8003210 <HAL_ADC_Start+0x194>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10e      	bne.n	80031a2 <HAL_ADC_Start+0x126>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d107      	bne.n	80031a2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031a0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_ADC_Start+0x190>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d120      	bne.n	80031f0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a18      	ldr	r2, [pc, #96]	; (8003214 <HAL_ADC_Start+0x198>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d11b      	bne.n	80031f0 <HAL_ADC_Start+0x174>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d114      	bne.n	80031f0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	e00b      	b.n	80031f0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f043 0210 	orr.w	r2, r3, #16
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000010 	.word	0x20000010
 8003204:	431bde83 	.word	0x431bde83
 8003208:	fffff8fe 	.word	0xfffff8fe
 800320c:	40012300 	.word	0x40012300
 8003210:	40012000 	.word	0x40012000
 8003214:	40012200 	.word	0x40012200

08003218 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003234:	d113      	bne.n	800325e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003244:	d10b      	bne.n	800325e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e063      	b.n	8003326 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800325e:	f7ff fe99 	bl	8002f94 <HAL_GetTick>
 8003262:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003264:	e021      	b.n	80032aa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d01d      	beq.n	80032aa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_ADC_PollForConversion+0x6c>
 8003274:	f7ff fe8e 	bl	8002f94 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d212      	bcs.n	80032aa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b02      	cmp	r3, #2
 8003290:	d00b      	beq.n	80032aa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e03d      	b.n	8003326 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d1d6      	bne.n	8003266 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0212 	mvn.w	r2, #18
 80032c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d123      	bne.n	8003324 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d11f      	bne.n	8003324 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d111      	bne.n	8003324 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x1c>
 8003360:	2302      	movs	r3, #2
 8003362:	e136      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x28a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b09      	cmp	r3, #9
 8003372:	d93a      	bls.n	80033ea <HAL_ADC_ConfigChannel+0xa2>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800337c:	d035      	beq.n	80033ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68d9      	ldr	r1, [r3, #12]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	3b1e      	subs	r3, #30
 8003394:	2207      	movs	r2, #7
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43da      	mvns	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	400a      	ands	r2, r1
 80033a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a8d      	ldr	r2, [pc, #564]	; (80035e0 <HAL_ADC_ConfigChannel+0x298>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10a      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68d9      	ldr	r1, [r3, #12]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	061a      	lsls	r2, r3, #24
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033c2:	e035      	b.n	8003430 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68d9      	ldr	r1, [r3, #12]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	4618      	mov	r0, r3
 80033d6:	4603      	mov	r3, r0
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4403      	add	r3, r0
 80033dc:	3b1e      	subs	r3, #30
 80033de:	409a      	lsls	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033e8:	e022      	b.n	8003430 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6919      	ldr	r1, [r3, #16]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	2207      	movs	r2, #7
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43da      	mvns	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	400a      	ands	r2, r1
 800340c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6919      	ldr	r1, [r3, #16]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	4618      	mov	r0, r3
 8003420:	4603      	mov	r3, r0
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4403      	add	r3, r0
 8003426:	409a      	lsls	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b06      	cmp	r3, #6
 8003436:	d824      	bhi.n	8003482 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	3b05      	subs	r3, #5
 800344a:	221f      	movs	r2, #31
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43da      	mvns	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	400a      	ands	r2, r1
 8003458:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	4618      	mov	r0, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	3b05      	subs	r3, #5
 8003474:	fa00 f203 	lsl.w	r2, r0, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	635a      	str	r2, [r3, #52]	; 0x34
 8003480:	e04c      	b.n	800351c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d824      	bhi.n	80034d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	3b23      	subs	r3, #35	; 0x23
 800349c:	221f      	movs	r2, #31
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43da      	mvns	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	400a      	ands	r2, r1
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4618      	mov	r0, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	3b23      	subs	r3, #35	; 0x23
 80034c6:	fa00 f203 	lsl.w	r2, r0, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
 80034d2:	e023      	b.n	800351c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	3b41      	subs	r3, #65	; 0x41
 80034e6:	221f      	movs	r2, #31
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43da      	mvns	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	400a      	ands	r2, r1
 80034f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	4618      	mov	r0, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	3b41      	subs	r3, #65	; 0x41
 8003510:	fa00 f203 	lsl.w	r2, r0, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <HAL_ADC_ConfigChannel+0x29c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10a      	bne.n	800353c <HAL_ADC_ConfigChannel+0x1f4>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800352e:	d105      	bne.n	800353c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003530:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a2c      	ldr	r2, [pc, #176]	; (80035e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003536:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800353a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a28      	ldr	r2, [pc, #160]	; (80035e4 <HAL_ADC_ConfigChannel+0x29c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d10f      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x21e>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b12      	cmp	r3, #18
 800354c:	d10b      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800354e:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003554:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003558:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800355a:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <HAL_ADC_ConfigChannel+0x2a0>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003560:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003564:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <HAL_ADC_ConfigChannel+0x29c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d12b      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x280>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1a      	ldr	r2, [pc, #104]	; (80035e0 <HAL_ADC_ConfigChannel+0x298>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d003      	beq.n	8003582 <HAL_ADC_ConfigChannel+0x23a>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b11      	cmp	r3, #17
 8003580:	d122      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003582:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003588:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800358c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003598:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <HAL_ADC_ConfigChannel+0x298>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d111      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_ADC_ConfigChannel+0x2a4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <HAL_ADC_ConfigChannel+0x2a8>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0c9a      	lsrs	r2, r3, #18
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035ba:	e002      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3b01      	subs	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f9      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	10000012 	.word	0x10000012
 80035e4:	40012000 	.word	0x40012000
 80035e8:	40012300 	.word	0x40012300
 80035ec:	20000010 	.word	0x20000010
 80035f0:	431bde83 	.word	0x431bde83

080035f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80035fc:	4b78      	ldr	r3, [pc, #480]	; (80037e0 <ADC_Init+0x1ec>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4a77      	ldr	r2, [pc, #476]	; (80037e0 <ADC_Init+0x1ec>)
 8003602:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003606:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003608:	4b75      	ldr	r3, [pc, #468]	; (80037e0 <ADC_Init+0x1ec>)
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4973      	ldr	r1, [pc, #460]	; (80037e0 <ADC_Init+0x1ec>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	021a      	lsls	r2, r3, #8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800366a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6899      	ldr	r1, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	4a58      	ldr	r2, [pc, #352]	; (80037e4 <ADC_Init+0x1f0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003696:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6899      	ldr	r1, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	e00f      	b.n	80036ee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0202 	bic.w	r2, r2, #2
 80036fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	005a      	lsls	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01b      	beq.n	8003754 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800373a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	3b01      	subs	r3, #1
 8003748:	035a      	lsls	r2, r3, #13
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	e007      	b.n	8003764 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003762:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	3b01      	subs	r3, #1
 8003780:	051a      	lsls	r2, r3, #20
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037a6:	025a      	lsls	r2, r3, #9
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	029a      	lsls	r2, r3, #10
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	609a      	str	r2, [r3, #8]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40012300 	.word	0x40012300
 80037e4:	0f000001 	.word	0x0f000001

080037e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <__NVIC_SetPriorityGrouping+0x40>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003804:	4013      	ands	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <__NVIC_SetPriorityGrouping+0x44>)
 8003812:	4313      	orrs	r3, r2
 8003814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003816:	4a04      	ldr	r2, [pc, #16]	; (8003828 <__NVIC_SetPriorityGrouping+0x40>)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	60d3      	str	r3, [r2, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000ed00 	.word	0xe000ed00
 800382c:	05fa0000 	.word	0x05fa0000

08003830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <__NVIC_GetPriorityGrouping+0x18>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	f003 0307 	and.w	r3, r3, #7
}
 800383e:	4618      	mov	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	2b00      	cmp	r3, #0
 800385c:	db0b      	blt.n	8003876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	4907      	ldr	r1, [pc, #28]	; (8003884 <__NVIC_EnableIRQ+0x38>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2001      	movs	r0, #1
 800386e:	fa00 f202 	lsl.w	r2, r0, r2
 8003872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	e000e100 	.word	0xe000e100

08003888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	6039      	str	r1, [r7, #0]
 8003892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003898:	2b00      	cmp	r3, #0
 800389a:	db0a      	blt.n	80038b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	490c      	ldr	r1, [pc, #48]	; (80038d4 <__NVIC_SetPriority+0x4c>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	0112      	lsls	r2, r2, #4
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	440b      	add	r3, r1
 80038ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b0:	e00a      	b.n	80038c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4908      	ldr	r1, [pc, #32]	; (80038d8 <__NVIC_SetPriority+0x50>)
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	3b04      	subs	r3, #4
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	440b      	add	r3, r1
 80038c6:	761a      	strb	r2, [r3, #24]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000e100 	.word	0xe000e100
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f1c3 0307 	rsb	r3, r3, #7
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	bf28      	it	cs
 80038fa:	2304      	movcs	r3, #4
 80038fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3304      	adds	r3, #4
 8003902:	2b06      	cmp	r3, #6
 8003904:	d902      	bls.n	800390c <NVIC_EncodePriority+0x30>
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3b03      	subs	r3, #3
 800390a:	e000      	b.n	800390e <NVIC_EncodePriority+0x32>
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	f04f 32ff 	mov.w	r2, #4294967295
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43da      	mvns	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	401a      	ands	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003924:	f04f 31ff 	mov.w	r1, #4294967295
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	43d9      	mvns	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003934:	4313      	orrs	r3, r2
         );
}
 8003936:	4618      	mov	r0, r3
 8003938:	3724      	adds	r7, #36	; 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003954:	d301      	bcc.n	800395a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003956:	2301      	movs	r3, #1
 8003958:	e00f      	b.n	800397a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800395a:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <SysTick_Config+0x40>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003962:	210f      	movs	r1, #15
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	f7ff ff8e 	bl	8003888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <SysTick_Config+0x40>)
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003972:	4b04      	ldr	r3, [pc, #16]	; (8003984 <SysTick_Config+0x40>)
 8003974:	2207      	movs	r2, #7
 8003976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	e000e010 	.word	0xe000e010

08003988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ff29 	bl	80037e8 <__NVIC_SetPriorityGrouping>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	4603      	mov	r3, r0
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039b0:	f7ff ff3e 	bl	8003830 <__NVIC_GetPriorityGrouping>
 80039b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	6978      	ldr	r0, [r7, #20]
 80039bc:	f7ff ff8e 	bl	80038dc <NVIC_EncodePriority>
 80039c0:	4602      	mov	r2, r0
 80039c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff5d 	bl	8003888 <__NVIC_SetPriority>
}
 80039ce:	bf00      	nop
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	4603      	mov	r3, r0
 80039de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff31 	bl	800384c <__NVIC_EnableIRQ>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff ffa2 	bl	8003944 <SysTick_Config>
 8003a00:	4603      	mov	r3, r0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a18:	f7ff fabc 	bl	8002f94 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d008      	beq.n	8003a3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e052      	b.n	8003ae2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0216 	bic.w	r2, r2, #22
 8003a4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d103      	bne.n	8003a6c <HAL_DMA_Abort+0x62>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0208 	bic.w	r2, r2, #8
 8003a7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a8c:	e013      	b.n	8003ab6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a8e:	f7ff fa81 	bl	8002f94 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	d90c      	bls.n	8003ab6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e015      	b.n	8003ae2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e4      	bne.n	8003a8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	223f      	movs	r2, #63	; 0x3f
 8003aca:	409a      	lsls	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d004      	beq.n	8003b08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e00c      	b.n	8003b22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2205      	movs	r2, #5
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	; 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	e175      	b.n	8003e3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b50:	2201      	movs	r2, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	f040 8164 	bne.w	8003e36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d005      	beq.n	8003b86 <HAL_GPIO_Init+0x56>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d130      	bne.n	8003be8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	2203      	movs	r2, #3
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 0201 	and.w	r2, r3, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d017      	beq.n	8003c24 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d123      	bne.n	8003c78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	220f      	movs	r2, #15
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	08da      	lsrs	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3208      	adds	r2, #8
 8003c72:	69b9      	ldr	r1, [r7, #24]
 8003c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	2203      	movs	r2, #3
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 0203 	and.w	r2, r3, #3
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80be 	beq.w	8003e36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cba:	4b66      	ldr	r3, [pc, #408]	; (8003e54 <HAL_GPIO_Init+0x324>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	4a65      	ldr	r2, [pc, #404]	; (8003e54 <HAL_GPIO_Init+0x324>)
 8003cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc6:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <HAL_GPIO_Init+0x324>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cd2:	4a61      	ldr	r2, [pc, #388]	; (8003e58 <HAL_GPIO_Init+0x328>)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	3302      	adds	r3, #2
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	220f      	movs	r2, #15
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a58      	ldr	r2, [pc, #352]	; (8003e5c <HAL_GPIO_Init+0x32c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d037      	beq.n	8003d6e <HAL_GPIO_Init+0x23e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a57      	ldr	r2, [pc, #348]	; (8003e60 <HAL_GPIO_Init+0x330>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d031      	beq.n	8003d6a <HAL_GPIO_Init+0x23a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a56      	ldr	r2, [pc, #344]	; (8003e64 <HAL_GPIO_Init+0x334>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02b      	beq.n	8003d66 <HAL_GPIO_Init+0x236>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a55      	ldr	r2, [pc, #340]	; (8003e68 <HAL_GPIO_Init+0x338>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d025      	beq.n	8003d62 <HAL_GPIO_Init+0x232>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a54      	ldr	r2, [pc, #336]	; (8003e6c <HAL_GPIO_Init+0x33c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01f      	beq.n	8003d5e <HAL_GPIO_Init+0x22e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a53      	ldr	r2, [pc, #332]	; (8003e70 <HAL_GPIO_Init+0x340>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d019      	beq.n	8003d5a <HAL_GPIO_Init+0x22a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a52      	ldr	r2, [pc, #328]	; (8003e74 <HAL_GPIO_Init+0x344>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_GPIO_Init+0x226>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a51      	ldr	r2, [pc, #324]	; (8003e78 <HAL_GPIO_Init+0x348>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00d      	beq.n	8003d52 <HAL_GPIO_Init+0x222>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a50      	ldr	r2, [pc, #320]	; (8003e7c <HAL_GPIO_Init+0x34c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <HAL_GPIO_Init+0x21e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4f      	ldr	r2, [pc, #316]	; (8003e80 <HAL_GPIO_Init+0x350>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_GPIO_Init+0x21a>
 8003d46:	2309      	movs	r3, #9
 8003d48:	e012      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d4a:	230a      	movs	r3, #10
 8003d4c:	e010      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d4e:	2308      	movs	r3, #8
 8003d50:	e00e      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d52:	2307      	movs	r3, #7
 8003d54:	e00c      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d56:	2306      	movs	r3, #6
 8003d58:	e00a      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	e008      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	e006      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d62:	2303      	movs	r3, #3
 8003d64:	e004      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e002      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	f002 0203 	and.w	r2, r2, #3
 8003d76:	0092      	lsls	r2, r2, #2
 8003d78:	4093      	lsls	r3, r2
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d80:	4935      	ldr	r1, [pc, #212]	; (8003e58 <HAL_GPIO_Init+0x328>)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3302      	adds	r3, #2
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d8e:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003db2:	4a34      	ldr	r2, [pc, #208]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db8:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ddc:	4a29      	ldr	r2, [pc, #164]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003de2:	4b28      	ldr	r3, [pc, #160]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e06:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e30:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	f67f ae86 	bls.w	8003b50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40020000 	.word	0x40020000
 8003e60:	40020400 	.word	0x40020400
 8003e64:	40020800 	.word	0x40020800
 8003e68:	40020c00 	.word	0x40020c00
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40021400 	.word	0x40021400
 8003e74:	40021800 	.word	0x40021800
 8003e78:	40021c00 	.word	0x40021c00
 8003e7c:	40022000 	.word	0x40022000
 8003e80:	40022400 	.word	0x40022400
 8003e84:	40013c00 	.word	0x40013c00

08003e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	e001      	b.n	8003eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ec8:	787b      	ldrb	r3, [r7, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ed4:	e003      	b.n	8003ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ed6:	887b      	ldrh	r3, [r7, #2]
 8003ed8:	041a      	lsls	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	619a      	str	r2, [r3, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e07f      	b.n	8003ffe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fd fe0a 	bl	8001b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2224      	movs	r2, #36	; 0x24
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d107      	bne.n	8003f66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	e006      	b.n	8003f74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d104      	bne.n	8003f86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <HAL_I2C_Init+0x11c>)
 8003f92:	430b      	orrs	r3, r1
 8003f94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69d9      	ldr	r1, [r3, #28]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	02008000 	.word	0x02008000

0800400c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	461a      	mov	r2, r3
 8004018:	460b      	mov	r3, r1
 800401a:	817b      	strh	r3, [r7, #10]
 800401c:	4613      	mov	r3, r2
 800401e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b20      	cmp	r3, #32
 800402a:	f040 80da 	bne.w	80041e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_I2C_Master_Transmit+0x30>
 8004038:	2302      	movs	r3, #2
 800403a:	e0d3      	b.n	80041e4 <HAL_I2C_Master_Transmit+0x1d8>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004044:	f7fe ffa6 	bl	8002f94 <HAL_GetTick>
 8004048:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	2319      	movs	r3, #25
 8004050:	2201      	movs	r2, #1
 8004052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fb4e 	bl	80046f8 <I2C_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0be      	b.n	80041e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2221      	movs	r2, #33	; 0x21
 800406a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2210      	movs	r2, #16
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	893a      	ldrh	r2, [r7, #8]
 8004086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	2bff      	cmp	r3, #255	; 0xff
 8004096:	d90e      	bls.n	80040b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	22ff      	movs	r2, #255	; 0xff
 800409c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	8979      	ldrh	r1, [r7, #10]
 80040a6:	4b51      	ldr	r3, [pc, #324]	; (80041ec <HAL_I2C_Master_Transmit+0x1e0>)
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fd38 	bl	8004b24 <I2C_TransferConfig>
 80040b4:	e06c      	b.n	8004190 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	8979      	ldrh	r1, [r7, #10]
 80040c8:	4b48      	ldr	r3, [pc, #288]	; (80041ec <HAL_I2C_Master_Transmit+0x1e0>)
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fd27 	bl	8004b24 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80040d6:	e05b      	b.n	8004190 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	6a39      	ldr	r1, [r7, #32]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fb4b 	bl	8004778 <I2C_WaitOnTXISFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e07b      	b.n	80041e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d034      	beq.n	8004190 <HAL_I2C_Master_Transmit+0x184>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d130      	bne.n	8004190 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	2200      	movs	r2, #0
 8004136:	2180      	movs	r1, #128	; 0x80
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 fadd 	bl	80046f8 <I2C_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e04d      	b.n	80041e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2bff      	cmp	r3, #255	; 0xff
 8004150:	d90e      	bls.n	8004170 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	22ff      	movs	r2, #255	; 0xff
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415c:	b2da      	uxtb	r2, r3
 800415e:	8979      	ldrh	r1, [r7, #10]
 8004160:	2300      	movs	r3, #0
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 fcdb 	bl	8004b24 <I2C_TransferConfig>
 800416e:	e00f      	b.n	8004190 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417e:	b2da      	uxtb	r2, r3
 8004180:	8979      	ldrh	r1, [r7, #10]
 8004182:	2300      	movs	r3, #0
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fcca 	bl	8004b24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d19e      	bne.n	80040d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	6a39      	ldr	r1, [r7, #32]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fb2a 	bl	80047f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e01a      	b.n	80041e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2220      	movs	r2, #32
 80041b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80041c2:	400b      	ands	r3, r1
 80041c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	80002000 	.word	0x80002000
 80041f0:	fe00e800 	.word	0xfe00e800

080041f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	461a      	mov	r2, r3
 8004200:	460b      	mov	r3, r1
 8004202:	817b      	strh	r3, [r7, #10]
 8004204:	4613      	mov	r3, r2
 8004206:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b20      	cmp	r3, #32
 8004212:	f040 80db 	bne.w	80043cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_I2C_Master_Receive+0x30>
 8004220:	2302      	movs	r3, #2
 8004222:	e0d4      	b.n	80043ce <HAL_I2C_Master_Receive+0x1da>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800422c:	f7fe feb2 	bl	8002f94 <HAL_GetTick>
 8004230:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	2319      	movs	r3, #25
 8004238:	2201      	movs	r2, #1
 800423a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fa5a 	bl	80046f8 <I2C_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0bf      	b.n	80043ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2222      	movs	r2, #34	; 0x22
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2210      	movs	r2, #16
 800425a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	893a      	ldrh	r2, [r7, #8]
 800426e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	2bff      	cmp	r3, #255	; 0xff
 800427e:	d90e      	bls.n	800429e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	22ff      	movs	r2, #255	; 0xff
 8004284:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	b2da      	uxtb	r2, r3
 800428c:	8979      	ldrh	r1, [r7, #10]
 800428e:	4b52      	ldr	r3, [pc, #328]	; (80043d8 <HAL_I2C_Master_Receive+0x1e4>)
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fc44 	bl	8004b24 <I2C_TransferConfig>
 800429c:	e06d      	b.n	800437a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	8979      	ldrh	r1, [r7, #10]
 80042b0:	4b49      	ldr	r3, [pc, #292]	; (80043d8 <HAL_I2C_Master_Receive+0x1e4>)
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fc33 	bl	8004b24 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80042be:	e05c      	b.n	800437a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	6a39      	ldr	r1, [r7, #32]
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fad3 	bl	8004870 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e07c      	b.n	80043ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d034      	beq.n	800437a <HAL_I2C_Master_Receive+0x186>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d130      	bne.n	800437a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	2200      	movs	r2, #0
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f9e8 	bl	80046f8 <I2C_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e04d      	b.n	80043ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	2bff      	cmp	r3, #255	; 0xff
 800433a:	d90e      	bls.n	800435a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	22ff      	movs	r2, #255	; 0xff
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004346:	b2da      	uxtb	r2, r3
 8004348:	8979      	ldrh	r1, [r7, #10]
 800434a:	2300      	movs	r3, #0
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fbe6 	bl	8004b24 <I2C_TransferConfig>
 8004358:	e00f      	b.n	800437a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	b2da      	uxtb	r2, r3
 800436a:	8979      	ldrh	r1, [r7, #10]
 800436c:	2300      	movs	r3, #0
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fbd5 	bl	8004b24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d19d      	bne.n	80042c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	6a39      	ldr	r1, [r7, #32]
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fa35 	bl	80047f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e01a      	b.n	80043ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2220      	movs	r2, #32
 800439e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6859      	ldr	r1, [r3, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <HAL_I2C_Master_Receive+0x1e8>)
 80043ac:	400b      	ands	r3, r1
 80043ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	80002400 	.word	0x80002400
 80043dc:	fe00e800 	.word	0xfe00e800

080043e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	817b      	strh	r3, [r7, #10]
 80043f2:	460b      	mov	r3, r1
 80043f4:	813b      	strh	r3, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b20      	cmp	r3, #32
 8004404:	f040 80f9 	bne.w	80045fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_I2C_Mem_Write+0x34>
 800440e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d105      	bne.n	8004420 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800441a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0ed      	b.n	80045fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_I2C_Mem_Write+0x4e>
 800442a:	2302      	movs	r3, #2
 800442c:	e0e6      	b.n	80045fc <HAL_I2C_Mem_Write+0x21c>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004436:	f7fe fdad 	bl	8002f94 <HAL_GetTick>
 800443a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	2319      	movs	r3, #25
 8004442:	2201      	movs	r2, #1
 8004444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f955 	bl	80046f8 <I2C_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0d1      	b.n	80045fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2221      	movs	r2, #33	; 0x21
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2240      	movs	r2, #64	; 0x40
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004480:	88f8      	ldrh	r0, [r7, #6]
 8004482:	893a      	ldrh	r2, [r7, #8]
 8004484:	8979      	ldrh	r1, [r7, #10]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	4603      	mov	r3, r0
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f8b9 	bl	8004608 <I2C_RequestMemoryWrite>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0a9      	b.n	80045fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2bff      	cmp	r3, #255	; 0xff
 80044b0:	d90e      	bls.n	80044d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	22ff      	movs	r2, #255	; 0xff
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	8979      	ldrh	r1, [r7, #10]
 80044c0:	2300      	movs	r3, #0
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fb2b 	bl	8004b24 <I2C_TransferConfig>
 80044ce:	e00f      	b.n	80044f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	8979      	ldrh	r1, [r7, #10]
 80044e2:	2300      	movs	r3, #0
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fb1a 	bl	8004b24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f93f 	bl	8004778 <I2C_WaitOnTXISFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e07b      	b.n	80045fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d034      	beq.n	80045a8 <HAL_I2C_Mem_Write+0x1c8>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d130      	bne.n	80045a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	2200      	movs	r2, #0
 800454e:	2180      	movs	r1, #128	; 0x80
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f8d1 	bl	80046f8 <I2C_WaitOnFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e04d      	b.n	80045fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2bff      	cmp	r3, #255	; 0xff
 8004568:	d90e      	bls.n	8004588 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	22ff      	movs	r2, #255	; 0xff
 800456e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004574:	b2da      	uxtb	r2, r3
 8004576:	8979      	ldrh	r1, [r7, #10]
 8004578:	2300      	movs	r3, #0
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 facf 	bl	8004b24 <I2C_TransferConfig>
 8004586:	e00f      	b.n	80045a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004596:	b2da      	uxtb	r2, r3
 8004598:	8979      	ldrh	r1, [r7, #10]
 800459a:	2300      	movs	r3, #0
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 fabe 	bl	8004b24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d19e      	bne.n	80044f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f91e 	bl	80047f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e01a      	b.n	80045fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2220      	movs	r2, #32
 80045cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_I2C_Mem_Write+0x224>)
 80045da:	400b      	ands	r3, r1
 80045dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e000      	b.n	80045fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
  }
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	fe00e800 	.word	0xfe00e800

08004608 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	461a      	mov	r2, r3
 8004616:	4603      	mov	r3, r0
 8004618:	817b      	strh	r3, [r7, #10]
 800461a:	460b      	mov	r3, r1
 800461c:	813b      	strh	r3, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	b2da      	uxtb	r2, r3
 8004626:	8979      	ldrh	r1, [r7, #10]
 8004628:	4b20      	ldr	r3, [pc, #128]	; (80046ac <I2C_RequestMemoryWrite+0xa4>)
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 fa77 	bl	8004b24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	69b9      	ldr	r1, [r7, #24]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f89c 	bl	8004778 <I2C_WaitOnTXISFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e02c      	b.n	80046a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004650:	893b      	ldrh	r3, [r7, #8]
 8004652:	b2da      	uxtb	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	629a      	str	r2, [r3, #40]	; 0x28
 800465a:	e015      	b.n	8004688 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800465c:	893b      	ldrh	r3, [r7, #8]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	b29b      	uxth	r3, r3
 8004662:	b2da      	uxtb	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f882 	bl	8004778 <I2C_WaitOnTXISFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e012      	b.n	80046a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800467e:	893b      	ldrh	r3, [r7, #8]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2200      	movs	r2, #0
 8004690:	2180      	movs	r1, #128	; 0x80
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f830 	bl	80046f8 <I2C_WaitOnFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	80002000 	.word	0x80002000

080046b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d103      	bne.n	80046ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2200      	movs	r2, #0
 80046cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d007      	beq.n	80046ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	619a      	str	r2, [r3, #24]
  }
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004708:	e022      	b.n	8004750 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d01e      	beq.n	8004750 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004712:	f7fe fc3f 	bl	8002f94 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d113      	bne.n	8004750 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e00f      	b.n	8004770 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	4013      	ands	r3, r2
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	429a      	cmp	r2, r3
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	461a      	mov	r2, r3
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	429a      	cmp	r2, r3
 800476c:	d0cd      	beq.n	800470a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004784:	e02c      	b.n	80047e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f8ea 	bl	8004964 <I2C_IsErrorOccurred>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e02a      	b.n	80047f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d01e      	beq.n	80047e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a2:	f7fe fbf7 	bl	8002f94 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d302      	bcc.n	80047b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d113      	bne.n	80047e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e007      	b.n	80047f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d1cb      	bne.n	8004786 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004804:	e028      	b.n	8004858 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f8aa 	bl	8004964 <I2C_IsErrorOccurred>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e026      	b.n	8004868 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	f7fe fbbb 	bl	8002f94 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d113      	bne.n	8004858 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004834:	f043 0220 	orr.w	r2, r3, #32
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e007      	b.n	8004868 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b20      	cmp	r3, #32
 8004864:	d1cf      	bne.n	8004806 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800487c:	e064      	b.n	8004948 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68b9      	ldr	r1, [r7, #8]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f86e 	bl	8004964 <I2C_IsErrorOccurred>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e062      	b.n	8004958 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b20      	cmp	r3, #32
 800489e:	d138      	bne.n	8004912 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d105      	bne.n	80048ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e04e      	b.n	8004958 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d107      	bne.n	80048d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2210      	movs	r2, #16
 80048ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2204      	movs	r2, #4
 80048d4:	645a      	str	r2, [r3, #68]	; 0x44
 80048d6:	e002      	b.n	80048de <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2220      	movs	r2, #32
 80048e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6859      	ldr	r1, [r3, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80048f2:	400b      	ands	r3, r1
 80048f4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e022      	b.n	8004958 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004912:	f7fe fb3f 	bl	8002f94 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10f      	bne.n	8004948 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e007      	b.n	8004958 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b04      	cmp	r3, #4
 8004954:	d193      	bne.n	800487e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	fe00e800 	.word	0xfe00e800

08004964 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	; 0x28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b00      	cmp	r3, #0
 800498e:	d068      	beq.n	8004a62 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2210      	movs	r2, #16
 8004996:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004998:	e049      	b.n	8004a2e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d045      	beq.n	8004a2e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049a2:	f7fe faf7 	bl	8002f94 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d302      	bcc.n	80049b8 <I2C_IsErrorOccurred+0x54>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d13a      	bne.n	8004a2e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049da:	d121      	bne.n	8004a20 <I2C_IsErrorOccurred+0xbc>
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049e2:	d01d      	beq.n	8004a20 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d01a      	beq.n	8004a20 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80049fa:	f7fe facb 	bl	8002f94 <HAL_GetTick>
 80049fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a00:	e00e      	b.n	8004a20 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a02:	f7fe fac7 	bl	8002f94 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b19      	cmp	r3, #25
 8004a0e:	d907      	bls.n	8004a20 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	f043 0320 	orr.w	r3, r3, #32
 8004a16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004a1e:	e006      	b.n	8004a2e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	d1e9      	bne.n	8004a02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d003      	beq.n	8004a44 <I2C_IsErrorOccurred+0xe0>
 8004a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0aa      	beq.n	800499a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d103      	bne.n	8004a54 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2220      	movs	r2, #32
 8004a52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	f043 0304 	orr.w	r3, r3, #4
 8004a5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00b      	beq.n	8004a8c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	f043 0308 	orr.w	r3, r3, #8
 8004a9c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aa6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f043 0302 	orr.w	r3, r3, #2
 8004abe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01c      	beq.n	8004b12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff fde9 	bl	80046b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <I2C_IsErrorOccurred+0x1bc>)
 8004aea:	400b      	ands	r3, r1
 8004aec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3728      	adds	r7, #40	; 0x28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	fe00e800 	.word	0xfe00e800

08004b24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	607b      	str	r3, [r7, #4]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	817b      	strh	r3, [r7, #10]
 8004b32:	4613      	mov	r3, r2
 8004b34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b36:	897b      	ldrh	r3, [r7, #10]
 8004b38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b3c:	7a7b      	ldrb	r3, [r7, #9]
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	0d5b      	lsrs	r3, r3, #21
 8004b5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b62:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <I2C_TransferConfig+0x60>)
 8004b64:	430b      	orrs	r3, r1
 8004b66:	43db      	mvns	r3, r3
 8004b68:	ea02 0103 	and.w	r1, r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	03ff63ff 	.word	0x03ff63ff

08004b88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d138      	bne.n	8004c10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e032      	b.n	8004c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2224      	movs	r2, #36	; 0x24
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6819      	ldr	r1, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e000      	b.n	8004c12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b085      	sub	sp, #20
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d139      	bne.n	8004ca8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e033      	b.n	8004caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2224      	movs	r2, #36	; 0x24
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0201 	bic.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e000      	b.n	8004caa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cbc:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a04      	ldr	r2, [pc, #16]	; (8004cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc6:	6013      	str	r3, [r2, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40007000 	.word	0x40007000

08004cd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ce2:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	4a22      	ldr	r2, [pc, #136]	; (8004d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cec:	6413      	str	r3, [r2, #64]	; 0x40
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004cfa:	4b1e      	ldr	r3, [pc, #120]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d06:	f7fe f945 	bl	8002f94 <HAL_GetTick>
 8004d0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d0c:	e009      	b.n	8004d22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d0e:	f7fe f941 	bl	8002f94 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d1c:	d901      	bls.n	8004d22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e022      	b.n	8004d68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d22:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2e:	d1ee      	bne.n	8004d0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d30:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a0f      	ldr	r2, [pc, #60]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d3c:	f7fe f92a 	bl	8002f94 <HAL_GetTick>
 8004d40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d42:	e009      	b.n	8004d58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d44:	f7fe f926 	bl	8002f94 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d52:	d901      	bls.n	8004d58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e007      	b.n	8004d68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d58:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d64:	d1ee      	bne.n	8004d44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40007000 	.word	0x40007000

08004d78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004d80:	2300      	movs	r3, #0
 8004d82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e291      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 8087 	beq.w	8004eaa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d9c:	4b96      	ldr	r3, [pc, #600]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 030c 	and.w	r3, r3, #12
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d00c      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004da8:	4b93      	ldr	r3, [pc, #588]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d112      	bne.n	8004dda <HAL_RCC_OscConfig+0x62>
 8004db4:	4b90      	ldr	r3, [pc, #576]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc0:	d10b      	bne.n	8004dda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc2:	4b8d      	ldr	r3, [pc, #564]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d06c      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x130>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d168      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e26b      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de2:	d106      	bne.n	8004df2 <HAL_RCC_OscConfig+0x7a>
 8004de4:	4b84      	ldr	r3, [pc, #528]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a83      	ldr	r2, [pc, #524]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e02e      	b.n	8004e50 <HAL_RCC_OscConfig+0xd8>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCC_OscConfig+0x9c>
 8004dfa:	4b7f      	ldr	r3, [pc, #508]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a7e      	ldr	r2, [pc, #504]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	4b7c      	ldr	r3, [pc, #496]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a7b      	ldr	r2, [pc, #492]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e01d      	b.n	8004e50 <HAL_RCC_OscConfig+0xd8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0xc0>
 8004e1e:	4b76      	ldr	r3, [pc, #472]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a75      	ldr	r2, [pc, #468]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4b73      	ldr	r3, [pc, #460]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a72      	ldr	r2, [pc, #456]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e00b      	b.n	8004e50 <HAL_RCC_OscConfig+0xd8>
 8004e38:	4b6f      	ldr	r3, [pc, #444]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a6e      	ldr	r2, [pc, #440]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b6c      	ldr	r3, [pc, #432]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a6b      	ldr	r2, [pc, #428]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fe f89c 	bl	8002f94 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e60:	f7fe f898 	bl	8002f94 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	; 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e21f      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e72:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0xe8>
 8004e7e:	e014      	b.n	8004eaa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fe f888 	bl	8002f94 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fe f884 	bl	8002f94 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e20b      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9a:	4b57      	ldr	r3, [pc, #348]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x110>
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d069      	beq.n	8004f8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eb6:	4b50      	ldr	r3, [pc, #320]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00b      	beq.n	8004eda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ec2:	4b4d      	ldr	r3, [pc, #308]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d11c      	bne.n	8004f08 <HAL_RCC_OscConfig+0x190>
 8004ece:	4b4a      	ldr	r3, [pc, #296]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d116      	bne.n	8004f08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eda:	4b47      	ldr	r3, [pc, #284]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x17a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d001      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e1df      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef2:	4b41      	ldr	r3, [pc, #260]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	493d      	ldr	r1, [pc, #244]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f06:	e040      	b.n	8004f8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d023      	beq.n	8004f58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f10:	4b39      	ldr	r3, [pc, #228]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a38      	ldr	r2, [pc, #224]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1c:	f7fe f83a 	bl	8002f94 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f24:	f7fe f836 	bl	8002f94 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e1bd      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f36:	4b30      	ldr	r3, [pc, #192]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f42:	4b2d      	ldr	r3, [pc, #180]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4929      	ldr	r1, [pc, #164]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	600b      	str	r3, [r1, #0]
 8004f56:	e018      	b.n	8004f8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f58:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a26      	ldr	r2, [pc, #152]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fe f816 	bl	8002f94 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6c:	f7fe f812 	bl	8002f94 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e199      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d038      	beq.n	8005008 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d019      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9e:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa2:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7fd fff3 	bl	8002f94 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb2:	f7fd ffef 	bl	8002f94 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e176      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x23a>
 8004fd0:	e01a      	b.n	8005008 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd6:	4a08      	ldr	r2, [pc, #32]	; (8004ff8 <HAL_RCC_OscConfig+0x280>)
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fde:	f7fd ffd9 	bl	8002f94 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe6:	f7fd ffd5 	bl	8002f94 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d903      	bls.n	8004ffc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e15c      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
 8004ff8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ffc:	4b91      	ldr	r3, [pc, #580]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8004ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1ee      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80a4 	beq.w	800515e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005016:	4b8b      	ldr	r3, [pc, #556]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10d      	bne.n	800503e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005022:	4b88      	ldr	r3, [pc, #544]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	4a87      	ldr	r2, [pc, #540]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502c:	6413      	str	r3, [r2, #64]	; 0x40
 800502e:	4b85      	ldr	r3, [pc, #532]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503a:	2301      	movs	r3, #1
 800503c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800503e:	4b82      	ldr	r3, [pc, #520]	; (8005248 <HAL_RCC_OscConfig+0x4d0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d118      	bne.n	800507c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800504a:	4b7f      	ldr	r3, [pc, #508]	; (8005248 <HAL_RCC_OscConfig+0x4d0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a7e      	ldr	r2, [pc, #504]	; (8005248 <HAL_RCC_OscConfig+0x4d0>)
 8005050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005056:	f7fd ff9d 	bl	8002f94 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505e:	f7fd ff99 	bl	8002f94 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b64      	cmp	r3, #100	; 0x64
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e120      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005070:	4b75      	ldr	r3, [pc, #468]	; (8005248 <HAL_RCC_OscConfig+0x4d0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d106      	bne.n	8005092 <HAL_RCC_OscConfig+0x31a>
 8005084:	4b6f      	ldr	r3, [pc, #444]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	4a6e      	ldr	r2, [pc, #440]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6713      	str	r3, [r2, #112]	; 0x70
 8005090:	e02d      	b.n	80050ee <HAL_RCC_OscConfig+0x376>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x33c>
 800509a:	4b6a      	ldr	r3, [pc, #424]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	4a69      	ldr	r2, [pc, #420]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	6713      	str	r3, [r2, #112]	; 0x70
 80050a6:	4b67      	ldr	r3, [pc, #412]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	4a66      	ldr	r2, [pc, #408]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80050ac:	f023 0304 	bic.w	r3, r3, #4
 80050b0:	6713      	str	r3, [r2, #112]	; 0x70
 80050b2:	e01c      	b.n	80050ee <HAL_RCC_OscConfig+0x376>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b05      	cmp	r3, #5
 80050ba:	d10c      	bne.n	80050d6 <HAL_RCC_OscConfig+0x35e>
 80050bc:	4b61      	ldr	r3, [pc, #388]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	4a60      	ldr	r2, [pc, #384]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80050c2:	f043 0304 	orr.w	r3, r3, #4
 80050c6:	6713      	str	r3, [r2, #112]	; 0x70
 80050c8:	4b5e      	ldr	r3, [pc, #376]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80050ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050cc:	4a5d      	ldr	r2, [pc, #372]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6713      	str	r3, [r2, #112]	; 0x70
 80050d4:	e00b      	b.n	80050ee <HAL_RCC_OscConfig+0x376>
 80050d6:	4b5b      	ldr	r3, [pc, #364]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	4a5a      	ldr	r2, [pc, #360]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
 80050e2:	4b58      	ldr	r3, [pc, #352]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	4a57      	ldr	r2, [pc, #348]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80050e8:	f023 0304 	bic.w	r3, r3, #4
 80050ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d015      	beq.n	8005122 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f6:	f7fd ff4d 	bl	8002f94 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fc:	e00a      	b.n	8005114 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fd ff49 	bl	8002f94 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e0ce      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005114:	4b4b      	ldr	r3, [pc, #300]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ee      	beq.n	80050fe <HAL_RCC_OscConfig+0x386>
 8005120:	e014      	b.n	800514c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005122:	f7fd ff37 	bl	8002f94 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005128:	e00a      	b.n	8005140 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512a:	f7fd ff33 	bl	8002f94 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f241 3288 	movw	r2, #5000	; 0x1388
 8005138:	4293      	cmp	r3, r2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e0b8      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005140:	4b40      	ldr	r3, [pc, #256]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1ee      	bne.n	800512a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005152:	4b3c      	ldr	r3, [pc, #240]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	4a3b      	ldr	r2, [pc, #236]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 80a4 	beq.w	80052b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005168:	4b36      	ldr	r3, [pc, #216]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 030c 	and.w	r3, r3, #12
 8005170:	2b08      	cmp	r3, #8
 8005172:	d06b      	beq.n	800524c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d149      	bne.n	8005210 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517c:	4b31      	ldr	r3, [pc, #196]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a30      	ldr	r2, [pc, #192]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fd ff04 	bl	8002f94 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005190:	f7fd ff00 	bl	8002f94 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e087      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a2:	4b28      	ldr	r3, [pc, #160]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69da      	ldr	r2, [r3, #28]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	019b      	lsls	r3, r3, #6
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	3b01      	subs	r3, #1
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	4313      	orrs	r3, r2
 80051d4:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80051d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051dc:	4b19      	ldr	r3, [pc, #100]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a18      	ldr	r2, [pc, #96]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 80051e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fd fed4 	bl	8002f94 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fd fed0 	bl	8002f94 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e057      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005202:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x478>
 800520e:	e04f      	b.n	80052b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a0b      	ldr	r2, [pc, #44]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800521a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fd feba 	bl	8002f94 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005224:	f7fd feb6 	bl	8002f94 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e03d      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005236:	4b03      	ldr	r3, [pc, #12]	; (8005244 <HAL_RCC_OscConfig+0x4cc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x4ac>
 8005242:	e035      	b.n	80052b0 <HAL_RCC_OscConfig+0x538>
 8005244:	40023800 	.word	0x40023800
 8005248:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800524c:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <HAL_RCC_OscConfig+0x544>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d028      	beq.n	80052ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005264:	429a      	cmp	r2, r3
 8005266:	d121      	bne.n	80052ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d11a      	bne.n	80052ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800527c:	4013      	ands	r3, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005282:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005284:	4293      	cmp	r3, r2
 8005286:	d111      	bne.n	80052ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	3b01      	subs	r3, #1
 8005296:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005298:	429a      	cmp	r2, r3
 800529a:	d107      	bne.n	80052ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800

080052c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0d0      	b.n	800547a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d8:	4b6a      	ldr	r3, [pc, #424]	; (8005484 <HAL_RCC_ClockConfig+0x1c4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d910      	bls.n	8005308 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e6:	4b67      	ldr	r3, [pc, #412]	; (8005484 <HAL_RCC_ClockConfig+0x1c4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f023 020f 	bic.w	r2, r3, #15
 80052ee:	4965      	ldr	r1, [pc, #404]	; (8005484 <HAL_RCC_ClockConfig+0x1c4>)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f6:	4b63      	ldr	r3, [pc, #396]	; (8005484 <HAL_RCC_ClockConfig+0x1c4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d001      	beq.n	8005308 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0b8      	b.n	800547a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d020      	beq.n	8005356 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005320:	4b59      	ldr	r3, [pc, #356]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	4a58      	ldr	r2, [pc, #352]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 8005326:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800532a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005338:	4b53      	ldr	r3, [pc, #332]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	4a52      	ldr	r2, [pc, #328]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 800533e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005342:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005344:	4b50      	ldr	r3, [pc, #320]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	494d      	ldr	r1, [pc, #308]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 8005352:	4313      	orrs	r3, r2
 8005354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d040      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d107      	bne.n	800537a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536a:	4b47      	ldr	r3, [pc, #284]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d115      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e07f      	b.n	800547a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d107      	bne.n	8005392 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005382:	4b41      	ldr	r3, [pc, #260]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e073      	b.n	800547a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005392:	4b3d      	ldr	r3, [pc, #244]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e06b      	b.n	800547a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a2:	4b39      	ldr	r3, [pc, #228]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 0203 	bic.w	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4936      	ldr	r1, [pc, #216]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b4:	f7fd fdee 	bl	8002f94 <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ba:	e00a      	b.n	80053d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053bc:	f7fd fdea 	bl	8002f94 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e053      	b.n	800547a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	4b2d      	ldr	r3, [pc, #180]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 020c 	and.w	r2, r3, #12
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d1eb      	bne.n	80053bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053e4:	4b27      	ldr	r3, [pc, #156]	; (8005484 <HAL_RCC_ClockConfig+0x1c4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d210      	bcs.n	8005414 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <HAL_RCC_ClockConfig+0x1c4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f023 020f 	bic.w	r2, r3, #15
 80053fa:	4922      	ldr	r1, [pc, #136]	; (8005484 <HAL_RCC_ClockConfig+0x1c4>)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	4313      	orrs	r3, r2
 8005400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005402:	4b20      	ldr	r3, [pc, #128]	; (8005484 <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e032      	b.n	800547a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005420:	4b19      	ldr	r3, [pc, #100]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4916      	ldr	r1, [pc, #88]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 800542e:	4313      	orrs	r3, r2
 8005430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	490e      	ldr	r1, [pc, #56]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 800544e:	4313      	orrs	r3, r2
 8005450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005452:	f000 f821 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 8005456:	4602      	mov	r2, r0
 8005458:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <HAL_RCC_ClockConfig+0x1c8>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	091b      	lsrs	r3, r3, #4
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	490a      	ldr	r1, [pc, #40]	; (800548c <HAL_RCC_ClockConfig+0x1cc>)
 8005464:	5ccb      	ldrb	r3, [r1, r3]
 8005466:	fa22 f303 	lsr.w	r3, r2, r3
 800546a:	4a09      	ldr	r2, [pc, #36]	; (8005490 <HAL_RCC_ClockConfig+0x1d0>)
 800546c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <HAL_RCC_ClockConfig+0x1d4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7fd fd4a 	bl	8002f0c <HAL_InitTick>

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40023c00 	.word	0x40023c00
 8005488:	40023800 	.word	0x40023800
 800548c:	0800cf84 	.word	0x0800cf84
 8005490:	20000010 	.word	0x20000010
 8005494:	20000014 	.word	0x20000014

08005498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800549c:	b094      	sub	sp, #80	; 0x50
 800549e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	647b      	str	r3, [r7, #68]	; 0x44
 80054a4:	2300      	movs	r3, #0
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a8:	2300      	movs	r3, #0
 80054aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054b0:	4b79      	ldr	r3, [pc, #484]	; (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d00d      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x40>
 80054bc:	2b08      	cmp	r3, #8
 80054be:	f200 80e1 	bhi.w	8005684 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0x34>
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d003      	beq.n	80054d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80054ca:	e0db      	b.n	8005684 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054cc:	4b73      	ldr	r3, [pc, #460]	; (800569c <HAL_RCC_GetSysClockFreq+0x204>)
 80054ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054d0:	e0db      	b.n	800568a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054d2:	4b73      	ldr	r3, [pc, #460]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80054d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054d6:	e0d8      	b.n	800568a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d8:	4b6f      	ldr	r3, [pc, #444]	; (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80054e2:	4b6d      	ldr	r3, [pc, #436]	; (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d063      	beq.n	80055b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ee:	4b6a      	ldr	r3, [pc, #424]	; (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	099b      	lsrs	r3, r3, #6
 80054f4:	2200      	movs	r2, #0
 80054f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005500:	633b      	str	r3, [r7, #48]	; 0x30
 8005502:	2300      	movs	r3, #0
 8005504:	637b      	str	r3, [r7, #52]	; 0x34
 8005506:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800550a:	4622      	mov	r2, r4
 800550c:	462b      	mov	r3, r5
 800550e:	f04f 0000 	mov.w	r0, #0
 8005512:	f04f 0100 	mov.w	r1, #0
 8005516:	0159      	lsls	r1, r3, #5
 8005518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800551c:	0150      	lsls	r0, r2, #5
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4621      	mov	r1, r4
 8005524:	1a51      	subs	r1, r2, r1
 8005526:	6139      	str	r1, [r7, #16]
 8005528:	4629      	mov	r1, r5
 800552a:	eb63 0301 	sbc.w	r3, r3, r1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800553c:	4659      	mov	r1, fp
 800553e:	018b      	lsls	r3, r1, #6
 8005540:	4651      	mov	r1, sl
 8005542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005546:	4651      	mov	r1, sl
 8005548:	018a      	lsls	r2, r1, #6
 800554a:	4651      	mov	r1, sl
 800554c:	ebb2 0801 	subs.w	r8, r2, r1
 8005550:	4659      	mov	r1, fp
 8005552:	eb63 0901 	sbc.w	r9, r3, r1
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800556a:	4690      	mov	r8, r2
 800556c:	4699      	mov	r9, r3
 800556e:	4623      	mov	r3, r4
 8005570:	eb18 0303 	adds.w	r3, r8, r3
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	462b      	mov	r3, r5
 8005578:	eb49 0303 	adc.w	r3, r9, r3
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800558a:	4629      	mov	r1, r5
 800558c:	024b      	lsls	r3, r1, #9
 800558e:	4621      	mov	r1, r4
 8005590:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005594:	4621      	mov	r1, r4
 8005596:	024a      	lsls	r2, r1, #9
 8005598:	4610      	mov	r0, r2
 800559a:	4619      	mov	r1, r3
 800559c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800559e:	2200      	movs	r2, #0
 80055a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055a8:	f7fb fb78 	bl	8000c9c <__aeabi_uldivmod>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4613      	mov	r3, r2
 80055b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b4:	e058      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b6:	4b38      	ldr	r3, [pc, #224]	; (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	099b      	lsrs	r3, r3, #6
 80055bc:	2200      	movs	r2, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	4611      	mov	r1, r2
 80055c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055c6:	623b      	str	r3, [r7, #32]
 80055c8:	2300      	movs	r3, #0
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
 80055cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055d0:	4642      	mov	r2, r8
 80055d2:	464b      	mov	r3, r9
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	0159      	lsls	r1, r3, #5
 80055de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055e2:	0150      	lsls	r0, r2, #5
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4641      	mov	r1, r8
 80055ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80055ee:	4649      	mov	r1, r9
 80055f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005600:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005604:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005608:	ebb2 040a 	subs.w	r4, r2, sl
 800560c:	eb63 050b 	sbc.w	r5, r3, fp
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	00eb      	lsls	r3, r5, #3
 800561a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800561e:	00e2      	lsls	r2, r4, #3
 8005620:	4614      	mov	r4, r2
 8005622:	461d      	mov	r5, r3
 8005624:	4643      	mov	r3, r8
 8005626:	18e3      	adds	r3, r4, r3
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	464b      	mov	r3, r9
 800562c:	eb45 0303 	adc.w	r3, r5, r3
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800563e:	4629      	mov	r1, r5
 8005640:	028b      	lsls	r3, r1, #10
 8005642:	4621      	mov	r1, r4
 8005644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005648:	4621      	mov	r1, r4
 800564a:	028a      	lsls	r2, r1, #10
 800564c:	4610      	mov	r0, r2
 800564e:	4619      	mov	r1, r3
 8005650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005652:	2200      	movs	r2, #0
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	61fa      	str	r2, [r7, #28]
 8005658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800565c:	f7fb fb1e 	bl	8000c9c <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4613      	mov	r3, r2
 8005666:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005668:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <HAL_RCC_GetSysClockFreq+0x200>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	0c1b      	lsrs	r3, r3, #16
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	3301      	adds	r3, #1
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800567a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005680:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005682:	e002      	b.n	800568a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_RCC_GetSysClockFreq+0x204>)
 8005686:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800568a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800568c:	4618      	mov	r0, r3
 800568e:	3750      	adds	r7, #80	; 0x50
 8005690:	46bd      	mov	sp, r7
 8005692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005696:	bf00      	nop
 8005698:	40023800 	.word	0x40023800
 800569c:	00f42400 	.word	0x00f42400
 80056a0:	007a1200 	.word	0x007a1200

080056a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056a8:	4b03      	ldr	r3, [pc, #12]	; (80056b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056aa:	681b      	ldr	r3, [r3, #0]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	20000010 	.word	0x20000010

080056bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056c0:	f7ff fff0 	bl	80056a4 <HAL_RCC_GetHCLKFreq>
 80056c4:	4602      	mov	r2, r0
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	0a9b      	lsrs	r3, r3, #10
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	4903      	ldr	r1, [pc, #12]	; (80056e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056d2:	5ccb      	ldrb	r3, [r1, r3]
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d8:	4618      	mov	r0, r3
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40023800 	.word	0x40023800
 80056e0:	0800cf94 	.word	0x0800cf94

080056e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056e8:	f7ff ffdc 	bl	80056a4 <HAL_RCC_GetHCLKFreq>
 80056ec:	4602      	mov	r2, r0
 80056ee:	4b05      	ldr	r3, [pc, #20]	; (8005704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	0b5b      	lsrs	r3, r3, #13
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	4903      	ldr	r1, [pc, #12]	; (8005708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056fa:	5ccb      	ldrb	r3, [r1, r3]
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005700:	4618      	mov	r0, r3
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40023800 	.word	0x40023800
 8005708:	0800cf94 	.word	0x0800cf94

0800570c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005724:	2300      	movs	r3, #0
 8005726:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d012      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005734:	4b69      	ldr	r3, [pc, #420]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	4a68      	ldr	r2, [pc, #416]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800573e:	6093      	str	r3, [r2, #8]
 8005740:	4b66      	ldr	r3, [pc, #408]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005748:	4964      	ldr	r1, [pc, #400]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574a:	4313      	orrs	r3, r2
 800574c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005756:	2301      	movs	r3, #1
 8005758:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d017      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005766:	4b5d      	ldr	r3, [pc, #372]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800576c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005774:	4959      	ldr	r1, [pc, #356]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005784:	d101      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005786:	2301      	movs	r3, #1
 8005788:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005792:	2301      	movs	r3, #1
 8005794:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d017      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057a2:	4b4e      	ldr	r3, [pc, #312]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	494a      	ldr	r1, [pc, #296]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c0:	d101      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80057c2:	2301      	movs	r3, #1
 80057c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80057de:	2301      	movs	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 808b 	beq.w	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057f0:	4b3a      	ldr	r3, [pc, #232]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	4a39      	ldr	r2, [pc, #228]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fa:	6413      	str	r3, [r2, #64]	; 0x40
 80057fc:	4b37      	ldr	r3, [pc, #220]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005808:	4b35      	ldr	r3, [pc, #212]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a34      	ldr	r2, [pc, #208]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800580e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005814:	f7fd fbbe 	bl	8002f94 <HAL_GetTick>
 8005818:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800581a:	e008      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581c:	f7fd fbba 	bl	8002f94 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	; 0x64
 8005828:	d901      	bls.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e357      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800582e:	4b2c      	ldr	r3, [pc, #176]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800583a:	4b28      	ldr	r3, [pc, #160]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005842:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d035      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	429a      	cmp	r2, r3
 8005856:	d02e      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005858:	4b20      	ldr	r3, [pc, #128]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005860:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800586c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800586e:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005878:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800587a:	4a18      	ldr	r2, [pc, #96]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005880:	4b16      	ldr	r3, [pc, #88]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b01      	cmp	r3, #1
 800588a:	d114      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588c:	f7fd fb82 	bl	8002f94 <HAL_GetTick>
 8005890:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005892:	e00a      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005894:	f7fd fb7e 	bl	8002f94 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d901      	bls.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e319      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058aa:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0ee      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058c2:	d111      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80058c4:	4b05      	ldr	r3, [pc, #20]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058d0:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058d2:	400b      	ands	r3, r1
 80058d4:	4901      	ldr	r1, [pc, #4]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	608b      	str	r3, [r1, #8]
 80058da:	e00b      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80058dc:	40023800 	.word	0x40023800
 80058e0:	40007000 	.word	0x40007000
 80058e4:	0ffffcff 	.word	0x0ffffcff
 80058e8:	4baa      	ldr	r3, [pc, #680]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4aa9      	ldr	r2, [pc, #676]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80058f2:	6093      	str	r3, [r2, #8]
 80058f4:	4ba7      	ldr	r3, [pc, #668]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005900:	49a4      	ldr	r1, [pc, #656]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005902:	4313      	orrs	r3, r2
 8005904:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	2b00      	cmp	r3, #0
 8005910:	d010      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005912:	4ba0      	ldr	r3, [pc, #640]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005918:	4a9e      	ldr	r2, [pc, #632]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800591a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800591e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005922:	4b9c      	ldr	r3, [pc, #624]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005924:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	4999      	ldr	r1, [pc, #612]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005940:	4b94      	ldr	r3, [pc, #592]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800594e:	4991      	ldr	r1, [pc, #580]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005962:	4b8c      	ldr	r3, [pc, #560]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005968:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005970:	4988      	ldr	r1, [pc, #544]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005984:	4b83      	ldr	r3, [pc, #524]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005992:	4980      	ldr	r1, [pc, #512]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059a6:	4b7b      	ldr	r3, [pc, #492]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	4977      	ldr	r1, [pc, #476]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059c8:	4b72      	ldr	r3, [pc, #456]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ce:	f023 0203 	bic.w	r2, r3, #3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d6:	496f      	ldr	r1, [pc, #444]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059ea:	4b6a      	ldr	r3, [pc, #424]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f0:	f023 020c 	bic.w	r2, r3, #12
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f8:	4966      	ldr	r1, [pc, #408]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a0c:	4b61      	ldr	r3, [pc, #388]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1a:	495e      	ldr	r1, [pc, #376]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a2e:	4b59      	ldr	r3, [pc, #356]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a34:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	4955      	ldr	r1, [pc, #340]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a50:	4b50      	ldr	r3, [pc, #320]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	494d      	ldr	r1, [pc, #308]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005a72:	4b48      	ldr	r3, [pc, #288]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a80:	4944      	ldr	r1, [pc, #272]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005a94:	4b3f      	ldr	r3, [pc, #252]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa2:	493c      	ldr	r1, [pc, #240]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005ab6:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac4:	4933      	ldr	r1, [pc, #204]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ad8:	4b2e      	ldr	r3, [pc, #184]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae6:	492b      	ldr	r1, [pc, #172]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d011      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005afa:	4b26      	ldr	r3, [pc, #152]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b00:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b08:	4922      	ldr	r1, [pc, #136]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b18:	d101      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b3a:	4b16      	ldr	r3, [pc, #88]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b40:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b48:	4912      	ldr	r1, [pc, #72]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b6c:	4909      	ldr	r1, [pc, #36]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d006      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 80d9 	beq.w	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b88:	4b02      	ldr	r3, [pc, #8]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a01      	ldr	r2, [pc, #4]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b92:	e001      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005b94:	40023800 	.word	0x40023800
 8005b98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9a:	f7fd f9fb 	bl	8002f94 <HAL_GetTick>
 8005b9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ba2:	f7fd f9f7 	bl	8002f94 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b64      	cmp	r3, #100	; 0x64
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e194      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bb4:	4b6c      	ldr	r3, [pc, #432]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f0      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d021      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d11d      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bd4:	4b64      	ldr	r3, [pc, #400]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bda:	0c1b      	lsrs	r3, r3, #16
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005be2:	4b61      	ldr	r3, [pc, #388]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be8:	0e1b      	lsrs	r3, r3, #24
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	019a      	lsls	r2, r3, #6
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	061b      	lsls	r3, r3, #24
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	071b      	lsls	r3, r3, #28
 8005c08:	4957      	ldr	r1, [pc, #348]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c24:	d00a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02e      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c3a:	d129      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c3c:	4b4a      	ldr	r3, [pc, #296]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c42:	0c1b      	lsrs	r3, r3, #16
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c4a:	4b47      	ldr	r3, [pc, #284]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c50:	0f1b      	lsrs	r3, r3, #28
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	019a      	lsls	r2, r3, #6
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	061b      	lsls	r3, r3, #24
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	071b      	lsls	r3, r3, #28
 8005c70:	493d      	ldr	r1, [pc, #244]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c78:	4b3b      	ldr	r3, [pc, #236]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c7e:	f023 021f 	bic.w	r2, r3, #31
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	3b01      	subs	r3, #1
 8005c88:	4937      	ldr	r1, [pc, #220]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c9c:	4b32      	ldr	r3, [pc, #200]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca2:	0e1b      	lsrs	r3, r3, #24
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005caa:	4b2f      	ldr	r3, [pc, #188]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb0:	0f1b      	lsrs	r3, r3, #28
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	019a      	lsls	r2, r3, #6
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	061b      	lsls	r3, r3, #24
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	071b      	lsls	r3, r3, #28
 8005cd0:	4925      	ldr	r1, [pc, #148]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d011      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	019a      	lsls	r2, r3, #6
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	041b      	lsls	r3, r3, #16
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	061b      	lsls	r3, r3, #24
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	071b      	lsls	r3, r3, #28
 8005d00:	4919      	ldr	r1, [pc, #100]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d08:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a16      	ldr	r2, [pc, #88]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d14:	f7fd f93e 	bl	8002f94 <HAL_GetTick>
 8005d18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d1c:	f7fd f93a 	bl	8002f94 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b64      	cmp	r3, #100	; 0x64
 8005d28:	d901      	bls.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e0d7      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	f040 80cd 	bne.w	8005edc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a08      	ldr	r2, [pc, #32]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4e:	f7fd f921 	bl	8002f94 <HAL_GetTick>
 8005d52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d54:	e00a      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d56:	f7fd f91d 	bl	8002f94 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b64      	cmp	r3, #100	; 0x64
 8005d62:	d903      	bls.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e0ba      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005d68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d6c:	4b5e      	ldr	r3, [pc, #376]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d78:	d0ed      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d02e      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d12a      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005da2:	4b51      	ldr	r3, [pc, #324]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005db0:	4b4d      	ldr	r3, [pc, #308]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	0f1b      	lsrs	r3, r3, #28
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	019a      	lsls	r2, r3, #6
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	041b      	lsls	r3, r3, #16
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	061b      	lsls	r3, r3, #24
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	071b      	lsls	r3, r3, #28
 8005dd6:	4944      	ldr	r1, [pc, #272]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005dde:	4b42      	ldr	r3, [pc, #264]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005de4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	3b01      	subs	r3, #1
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	493d      	ldr	r1, [pc, #244]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d022      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e0c:	d11d      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e0e:	4b36      	ldr	r3, [pc, #216]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e14:	0e1b      	lsrs	r3, r3, #24
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e1c:	4b32      	ldr	r3, [pc, #200]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e22:	0f1b      	lsrs	r3, r3, #28
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	019a      	lsls	r2, r3, #6
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	431a      	orrs	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	061b      	lsls	r3, r3, #24
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	071b      	lsls	r3, r3, #28
 8005e42:	4929      	ldr	r1, [pc, #164]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d028      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e56:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5c:	0e1b      	lsrs	r3, r3, #24
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e64:	4b20      	ldr	r3, [pc, #128]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	0c1b      	lsrs	r3, r3, #16
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	019a      	lsls	r2, r3, #6
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	041b      	lsls	r3, r3, #16
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	061b      	lsls	r3, r3, #24
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	071b      	lsls	r3, r3, #28
 8005e8a:	4917      	ldr	r1, [pc, #92]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	4911      	ldr	r1, [pc, #68]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ea8:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a0e      	ldr	r2, [pc, #56]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb4:	f7fd f86e 	bl	8002f94 <HAL_GetTick>
 8005eb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005eba:	e008      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ebc:	f7fd f86a 	bl	8002f94 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b64      	cmp	r3, #100	; 0x64
 8005ec8:	d901      	bls.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e007      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ece:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eda:	d1ef      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3720      	adds	r7, #32
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40023800 	.word	0x40023800

08005eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e049      	b.n	8005f92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fc fe60 	bl	8002bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3304      	adds	r3, #4
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	f000 fd26 	bl	800697c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d001      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e054      	b.n	800605e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a26      	ldr	r2, [pc, #152]	; (800606c <HAL_TIM_Base_Start_IT+0xd0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d022      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d01d      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d018      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a21      	ldr	r2, [pc, #132]	; (8006074 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d013      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00e      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_TIM_Base_Start_IT+0xe0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d009      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_TIM_Base_Start_IT+0xe4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <HAL_TIM_Base_Start_IT+0xe8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d115      	bne.n	8006048 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	4b19      	ldr	r3, [pc, #100]	; (8006088 <HAL_TIM_Base_Start_IT+0xec>)
 8006024:	4013      	ands	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b06      	cmp	r3, #6
 800602c:	d015      	beq.n	800605a <HAL_TIM_Base_Start_IT+0xbe>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006034:	d011      	beq.n	800605a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0201 	orr.w	r2, r2, #1
 8006044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006046:	e008      	b.n	800605a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e000      	b.n	800605c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40010000 	.word	0x40010000
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40010400 	.word	0x40010400
 8006080:	40014000 	.word	0x40014000
 8006084:	40001800 	.word	0x40001800
 8006088:	00010007 	.word	0x00010007

0800608c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e049      	b.n	8006132 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fc fd70 	bl	8002b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 fc56 	bl	800697c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <HAL_TIM_PWM_Start+0x24>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	e03c      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b04      	cmp	r3, #4
 8006164:	d109      	bne.n	800617a <HAL_TIM_PWM_Start+0x3e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	bf14      	ite	ne
 8006172:	2301      	movne	r3, #1
 8006174:	2300      	moveq	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	e02f      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d109      	bne.n	8006194 <HAL_TIM_PWM_Start+0x58>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	bf14      	ite	ne
 800618c:	2301      	movne	r3, #1
 800618e:	2300      	moveq	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	e022      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b0c      	cmp	r3, #12
 8006198:	d109      	bne.n	80061ae <HAL_TIM_PWM_Start+0x72>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	bf14      	ite	ne
 80061a6:	2301      	movne	r3, #1
 80061a8:	2300      	moveq	r3, #0
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	e015      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d109      	bne.n	80061c8 <HAL_TIM_PWM_Start+0x8c>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	bf14      	ite	ne
 80061c0:	2301      	movne	r3, #1
 80061c2:	2300      	moveq	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e008      	b.n	80061da <HAL_TIM_PWM_Start+0x9e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e092      	b.n	8006308 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_PWM_Start+0xb6>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f0:	e023      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d104      	bne.n	8006202 <HAL_TIM_PWM_Start+0xc6>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006200:	e01b      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b08      	cmp	r3, #8
 8006206:	d104      	bne.n	8006212 <HAL_TIM_PWM_Start+0xd6>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006210:	e013      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b0c      	cmp	r3, #12
 8006216:	d104      	bne.n	8006222 <HAL_TIM_PWM_Start+0xe6>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006220:	e00b      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b10      	cmp	r3, #16
 8006226:	d104      	bne.n	8006232 <HAL_TIM_PWM_Start+0xf6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006230:	e003      	b.n	800623a <HAL_TIM_PWM_Start+0xfe>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2201      	movs	r2, #1
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 ff32 	bl	80070ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a30      	ldr	r2, [pc, #192]	; (8006310 <HAL_TIM_PWM_Start+0x1d4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <HAL_TIM_PWM_Start+0x120>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a2f      	ldr	r2, [pc, #188]	; (8006314 <HAL_TIM_PWM_Start+0x1d8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d101      	bne.n	8006260 <HAL_TIM_PWM_Start+0x124>
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <HAL_TIM_PWM_Start+0x126>
 8006260:	2300      	movs	r3, #0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006274:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a25      	ldr	r2, [pc, #148]	; (8006310 <HAL_TIM_PWM_Start+0x1d4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d022      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006288:	d01d      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a22      	ldr	r2, [pc, #136]	; (8006318 <HAL_TIM_PWM_Start+0x1dc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d018      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a20      	ldr	r2, [pc, #128]	; (800631c <HAL_TIM_PWM_Start+0x1e0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <HAL_TIM_PWM_Start+0x1e4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00e      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a19      	ldr	r2, [pc, #100]	; (8006314 <HAL_TIM_PWM_Start+0x1d8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d009      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <HAL_TIM_PWM_Start+0x1e8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d004      	beq.n	80062c6 <HAL_TIM_PWM_Start+0x18a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a19      	ldr	r2, [pc, #100]	; (8006328 <HAL_TIM_PWM_Start+0x1ec>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d115      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	4b17      	ldr	r3, [pc, #92]	; (800632c <HAL_TIM_PWM_Start+0x1f0>)
 80062ce:	4013      	ands	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b06      	cmp	r3, #6
 80062d6:	d015      	beq.n	8006304 <HAL_TIM_PWM_Start+0x1c8>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062de:	d011      	beq.n	8006304 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f0:	e008      	b.n	8006304 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e000      	b.n	8006306 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006304:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40010000 	.word	0x40010000
 8006314:	40010400 	.word	0x40010400
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40000c00 	.word	0x40000c00
 8006324:	40014000 	.word	0x40014000
 8006328:	40001800 	.word	0x40001800
 800632c:	00010007 	.word	0x00010007

08006330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b02      	cmp	r3, #2
 8006344:	d122      	bne.n	800638c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b02      	cmp	r3, #2
 8006352:	d11b      	bne.n	800638c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f06f 0202 	mvn.w	r2, #2
 800635c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fae4 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 8006378:	e005      	b.n	8006386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fad6 	bl	800692c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fae7 	bl	8006954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b04      	cmp	r3, #4
 8006398:	d122      	bne.n	80063e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d11b      	bne.n	80063e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0204 	mvn.w	r2, #4
 80063b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 faba 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 80063cc:	e005      	b.n	80063da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 faac 	bl	800692c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fabd 	bl	8006954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d122      	bne.n	8006434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d11b      	bne.n	8006434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f06f 0208 	mvn.w	r2, #8
 8006404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2204      	movs	r2, #4
 800640a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fa90 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 8006420:	e005      	b.n	800642e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fa82 	bl	800692c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fa93 	bl	8006954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0310 	and.w	r3, r3, #16
 800643e:	2b10      	cmp	r3, #16
 8006440:	d122      	bne.n	8006488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b10      	cmp	r3, #16
 800644e:	d11b      	bne.n	8006488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0210 	mvn.w	r2, #16
 8006458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2208      	movs	r2, #8
 800645e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa66 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 8006474:	e005      	b.n	8006482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fa58 	bl	800692c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fa69 	bl	8006954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b01      	cmp	r3, #1
 8006494:	d10e      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d107      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f06f 0201 	mvn.w	r2, #1
 80064ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fb fe0e 	bl	80020d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064be:	2b80      	cmp	r3, #128	; 0x80
 80064c0:	d10e      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064cc:	2b80      	cmp	r3, #128	; 0x80
 80064ce:	d107      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 ff22 	bl	8007324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ee:	d10e      	bne.n	800650e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fa:	2b80      	cmp	r3, #128	; 0x80
 80064fc:	d107      	bne.n	800650e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 ff15 	bl	8007338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d10e      	bne.n	800653a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006526:	2b40      	cmp	r3, #64	; 0x40
 8006528:	d107      	bne.n	800653a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fa17 	bl	8006968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b20      	cmp	r3, #32
 8006546:	d10e      	bne.n	8006566 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b20      	cmp	r3, #32
 8006554:	d107      	bne.n	8006566 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f06f 0220 	mvn.w	r2, #32
 800655e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fed5 	bl	8007310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006566:	bf00      	nop
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800658a:	2302      	movs	r3, #2
 800658c:	e0ff      	b.n	800678e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b14      	cmp	r3, #20
 800659a:	f200 80f0 	bhi.w	800677e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800659e:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065f9 	.word	0x080065f9
 80065a8:	0800677f 	.word	0x0800677f
 80065ac:	0800677f 	.word	0x0800677f
 80065b0:	0800677f 	.word	0x0800677f
 80065b4:	08006639 	.word	0x08006639
 80065b8:	0800677f 	.word	0x0800677f
 80065bc:	0800677f 	.word	0x0800677f
 80065c0:	0800677f 	.word	0x0800677f
 80065c4:	0800667b 	.word	0x0800667b
 80065c8:	0800677f 	.word	0x0800677f
 80065cc:	0800677f 	.word	0x0800677f
 80065d0:	0800677f 	.word	0x0800677f
 80065d4:	080066bb 	.word	0x080066bb
 80065d8:	0800677f 	.word	0x0800677f
 80065dc:	0800677f 	.word	0x0800677f
 80065e0:	0800677f 	.word	0x0800677f
 80065e4:	080066fd 	.word	0x080066fd
 80065e8:	0800677f 	.word	0x0800677f
 80065ec:	0800677f 	.word	0x0800677f
 80065f0:	0800677f 	.word	0x0800677f
 80065f4:	0800673d 	.word	0x0800673d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68b9      	ldr	r1, [r7, #8]
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fa5c 	bl	8006abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0208 	orr.w	r2, r2, #8
 8006612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0204 	bic.w	r2, r2, #4
 8006622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6999      	ldr	r1, [r3, #24]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	619a      	str	r2, [r3, #24]
      break;
 8006636:	e0a5      	b.n	8006784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 faae 	bl	8006ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6999      	ldr	r1, [r3, #24]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	021a      	lsls	r2, r3, #8
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	619a      	str	r2, [r3, #24]
      break;
 8006678:	e084      	b.n	8006784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fb05 	bl	8006c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0208 	orr.w	r2, r2, #8
 8006694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69da      	ldr	r2, [r3, #28]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0204 	bic.w	r2, r2, #4
 80066a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69d9      	ldr	r1, [r3, #28]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	61da      	str	r2, [r3, #28]
      break;
 80066b8:	e064      	b.n	8006784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fb5b 	bl	8006d7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69d9      	ldr	r1, [r3, #28]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	021a      	lsls	r2, r3, #8
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	61da      	str	r2, [r3, #28]
      break;
 80066fa:	e043      	b.n	8006784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fb92 	bl	8006e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0208 	orr.w	r2, r2, #8
 8006716:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0204 	bic.w	r2, r2, #4
 8006726:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800673a:	e023      	b.n	8006784 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fbc4 	bl	8006ed0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006756:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006766:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	021a      	lsls	r2, r3, #8
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800677c:	e002      	b.n	8006784 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	75fb      	strb	r3, [r7, #23]
      break;
 8006782:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800678c:	7dfb      	ldrb	r3, [r7, #23]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop

08006798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_TIM_ConfigClockSource+0x1c>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e0b4      	b.n	800691e <HAL_TIM_ConfigClockSource+0x186>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	4b56      	ldr	r3, [pc, #344]	; (8006928 <HAL_TIM_ConfigClockSource+0x190>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ec:	d03e      	beq.n	800686c <HAL_TIM_ConfigClockSource+0xd4>
 80067ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f2:	f200 8087 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fa:	f000 8086 	beq.w	800690a <HAL_TIM_ConfigClockSource+0x172>
 80067fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006802:	d87f      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006804:	2b70      	cmp	r3, #112	; 0x70
 8006806:	d01a      	beq.n	800683e <HAL_TIM_ConfigClockSource+0xa6>
 8006808:	2b70      	cmp	r3, #112	; 0x70
 800680a:	d87b      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 800680c:	2b60      	cmp	r3, #96	; 0x60
 800680e:	d050      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x11a>
 8006810:	2b60      	cmp	r3, #96	; 0x60
 8006812:	d877      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006814:	2b50      	cmp	r3, #80	; 0x50
 8006816:	d03c      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0xfa>
 8006818:	2b50      	cmp	r3, #80	; 0x50
 800681a:	d873      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d058      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x13a>
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d86f      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006824:	2b30      	cmp	r3, #48	; 0x30
 8006826:	d064      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006828:	2b30      	cmp	r3, #48	; 0x30
 800682a:	d86b      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 800682c:	2b20      	cmp	r3, #32
 800682e:	d060      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006830:	2b20      	cmp	r3, #32
 8006832:	d867      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d05c      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006838:	2b10      	cmp	r3, #16
 800683a:	d05a      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15a>
 800683c:	e062      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	6899      	ldr	r1, [r3, #8]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f000 fc0d 	bl	800706c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	609a      	str	r2, [r3, #8]
      break;
 800686a:	e04f      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	6899      	ldr	r1, [r3, #8]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f000 fbf6 	bl	800706c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800688e:	609a      	str	r2, [r3, #8]
      break;
 8006890:	e03c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	461a      	mov	r2, r3
 80068a0:	f000 fb6a 	bl	8006f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2150      	movs	r1, #80	; 0x50
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fbc3 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 80068b0:	e02c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6859      	ldr	r1, [r3, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	461a      	mov	r2, r3
 80068c0:	f000 fb89 	bl	8006fd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2160      	movs	r1, #96	; 0x60
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fbb3 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 80068d0:	e01c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	461a      	mov	r2, r3
 80068e0:	f000 fb4a 	bl	8006f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2140      	movs	r1, #64	; 0x40
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fba3 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 80068f0:	e00c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f000 fb9a 	bl	8007036 <TIM_ITRx_SetConfig>
      break;
 8006902:	e003      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	e000      	b.n	800690c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800690a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	fffeff88 	.word	0xfffeff88

0800692c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a40      	ldr	r2, [pc, #256]	; (8006a90 <TIM_Base_SetConfig+0x114>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d013      	beq.n	80069bc <TIM_Base_SetConfig+0x40>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699a:	d00f      	beq.n	80069bc <TIM_Base_SetConfig+0x40>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a3d      	ldr	r2, [pc, #244]	; (8006a94 <TIM_Base_SetConfig+0x118>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00b      	beq.n	80069bc <TIM_Base_SetConfig+0x40>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a3c      	ldr	r2, [pc, #240]	; (8006a98 <TIM_Base_SetConfig+0x11c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d007      	beq.n	80069bc <TIM_Base_SetConfig+0x40>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a3b      	ldr	r2, [pc, #236]	; (8006a9c <TIM_Base_SetConfig+0x120>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_Base_SetConfig+0x40>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a3a      	ldr	r2, [pc, #232]	; (8006aa0 <TIM_Base_SetConfig+0x124>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d108      	bne.n	80069ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a2f      	ldr	r2, [pc, #188]	; (8006a90 <TIM_Base_SetConfig+0x114>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d02b      	beq.n	8006a2e <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069dc:	d027      	beq.n	8006a2e <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a2c      	ldr	r2, [pc, #176]	; (8006a94 <TIM_Base_SetConfig+0x118>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d023      	beq.n	8006a2e <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a2b      	ldr	r2, [pc, #172]	; (8006a98 <TIM_Base_SetConfig+0x11c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d01f      	beq.n	8006a2e <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a2a      	ldr	r2, [pc, #168]	; (8006a9c <TIM_Base_SetConfig+0x120>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d01b      	beq.n	8006a2e <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a29      	ldr	r2, [pc, #164]	; (8006aa0 <TIM_Base_SetConfig+0x124>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d017      	beq.n	8006a2e <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a28      	ldr	r2, [pc, #160]	; (8006aa4 <TIM_Base_SetConfig+0x128>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d013      	beq.n	8006a2e <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a27      	ldr	r2, [pc, #156]	; (8006aa8 <TIM_Base_SetConfig+0x12c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00f      	beq.n	8006a2e <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a26      	ldr	r2, [pc, #152]	; (8006aac <TIM_Base_SetConfig+0x130>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d00b      	beq.n	8006a2e <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a25      	ldr	r2, [pc, #148]	; (8006ab0 <TIM_Base_SetConfig+0x134>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d007      	beq.n	8006a2e <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a24      	ldr	r2, [pc, #144]	; (8006ab4 <TIM_Base_SetConfig+0x138>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d003      	beq.n	8006a2e <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a23      	ldr	r2, [pc, #140]	; (8006ab8 <TIM_Base_SetConfig+0x13c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d108      	bne.n	8006a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a0a      	ldr	r2, [pc, #40]	; (8006a90 <TIM_Base_SetConfig+0x114>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_Base_SetConfig+0xf8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a0c      	ldr	r2, [pc, #48]	; (8006aa0 <TIM_Base_SetConfig+0x124>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d103      	bne.n	8006a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	615a      	str	r2, [r3, #20]
}
 8006a82:	bf00      	nop
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40010000 	.word	0x40010000
 8006a94:	40000400 	.word	0x40000400
 8006a98:	40000800 	.word	0x40000800
 8006a9c:	40000c00 	.word	0x40000c00
 8006aa0:	40010400 	.word	0x40010400
 8006aa4:	40014000 	.word	0x40014000
 8006aa8:	40014400 	.word	0x40014400
 8006aac:	40014800 	.word	0x40014800
 8006ab0:	40001800 	.word	0x40001800
 8006ab4:	40001c00 	.word	0x40001c00
 8006ab8:	40002000 	.word	0x40002000

08006abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	f023 0201 	bic.w	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4b2b      	ldr	r3, [pc, #172]	; (8006b94 <TIM_OC1_SetConfig+0xd8>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 0303 	bic.w	r3, r3, #3
 8006af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f023 0302 	bic.w	r3, r3, #2
 8006b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a21      	ldr	r2, [pc, #132]	; (8006b98 <TIM_OC1_SetConfig+0xdc>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <TIM_OC1_SetConfig+0x64>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a20      	ldr	r2, [pc, #128]	; (8006b9c <TIM_OC1_SetConfig+0xe0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d10c      	bne.n	8006b3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f023 0308 	bic.w	r3, r3, #8
 8006b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f023 0304 	bic.w	r3, r3, #4
 8006b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a16      	ldr	r2, [pc, #88]	; (8006b98 <TIM_OC1_SetConfig+0xdc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_OC1_SetConfig+0x8e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <TIM_OC1_SetConfig+0xe0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d111      	bne.n	8006b6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	621a      	str	r2, [r3, #32]
}
 8006b88:	bf00      	nop
 8006b8a:	371c      	adds	r7, #28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	fffeff8f 	.word	0xfffeff8f
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40010400 	.word	0x40010400

08006ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f023 0210 	bic.w	r2, r3, #16
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4b2e      	ldr	r3, [pc, #184]	; (8006c84 <TIM_OC2_SetConfig+0xe4>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f023 0320 	bic.w	r3, r3, #32
 8006bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a23      	ldr	r2, [pc, #140]	; (8006c88 <TIM_OC2_SetConfig+0xe8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d003      	beq.n	8006c08 <TIM_OC2_SetConfig+0x68>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a22      	ldr	r2, [pc, #136]	; (8006c8c <TIM_OC2_SetConfig+0xec>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d10d      	bne.n	8006c24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <TIM_OC2_SetConfig+0xe8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d003      	beq.n	8006c34 <TIM_OC2_SetConfig+0x94>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a17      	ldr	r2, [pc, #92]	; (8006c8c <TIM_OC2_SetConfig+0xec>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d113      	bne.n	8006c5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	feff8fff 	.word	0xfeff8fff
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40010400 	.word	0x40010400

08006c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4b2d      	ldr	r3, [pc, #180]	; (8006d70 <TIM_OC3_SetConfig+0xe0>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0303 	bic.w	r3, r3, #3
 8006cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	021b      	lsls	r3, r3, #8
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a22      	ldr	r2, [pc, #136]	; (8006d74 <TIM_OC3_SetConfig+0xe4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d003      	beq.n	8006cf6 <TIM_OC3_SetConfig+0x66>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a21      	ldr	r2, [pc, #132]	; (8006d78 <TIM_OC3_SetConfig+0xe8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d10d      	bne.n	8006d12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	021b      	lsls	r3, r3, #8
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a17      	ldr	r2, [pc, #92]	; (8006d74 <TIM_OC3_SetConfig+0xe4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_OC3_SetConfig+0x92>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a16      	ldr	r2, [pc, #88]	; (8006d78 <TIM_OC3_SetConfig+0xe8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d113      	bne.n	8006d4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	621a      	str	r2, [r3, #32]
}
 8006d64:	bf00      	nop
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	fffeff8f 	.word	0xfffeff8f
 8006d74:	40010000 	.word	0x40010000
 8006d78:	40010400 	.word	0x40010400

08006d7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <TIM_OC4_SetConfig+0xa4>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	031b      	lsls	r3, r3, #12
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a13      	ldr	r2, [pc, #76]	; (8006e24 <TIM_OC4_SetConfig+0xa8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_OC4_SetConfig+0x68>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a12      	ldr	r2, [pc, #72]	; (8006e28 <TIM_OC4_SetConfig+0xac>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d109      	bne.n	8006df8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	019b      	lsls	r3, r3, #6
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	621a      	str	r2, [r3, #32]
}
 8006e12:	bf00      	nop
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	feff8fff 	.word	0xfeff8fff
 8006e24:	40010000 	.word	0x40010000
 8006e28:	40010400 	.word	0x40010400

08006e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <TIM_OC5_SetConfig+0x98>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	041b      	lsls	r3, r3, #16
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a12      	ldr	r2, [pc, #72]	; (8006ec8 <TIM_OC5_SetConfig+0x9c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_OC5_SetConfig+0x5e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a11      	ldr	r2, [pc, #68]	; (8006ecc <TIM_OC5_SetConfig+0xa0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d109      	bne.n	8006e9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	621a      	str	r2, [r3, #32]
}
 8006eb8:	bf00      	nop
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	fffeff8f 	.word	0xfffeff8f
 8006ec8:	40010000 	.word	0x40010000
 8006ecc:	40010400 	.word	0x40010400

08006ed0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4b1c      	ldr	r3, [pc, #112]	; (8006f6c <TIM_OC6_SetConfig+0x9c>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	021b      	lsls	r3, r3, #8
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	051b      	lsls	r3, r3, #20
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <TIM_OC6_SetConfig+0xa0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d003      	beq.n	8006f30 <TIM_OC6_SetConfig+0x60>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a12      	ldr	r2, [pc, #72]	; (8006f74 <TIM_OC6_SetConfig+0xa4>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d109      	bne.n	8006f44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	029b      	lsls	r3, r3, #10
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	feff8fff 	.word	0xfeff8fff
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40010400 	.word	0x40010400

08006f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f023 0201 	bic.w	r2, r3, #1
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f023 030a 	bic.w	r3, r3, #10
 8006fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	621a      	str	r2, [r3, #32]
}
 8006fca:	bf00      	nop
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b087      	sub	sp, #28
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f023 0210 	bic.w	r2, r3, #16
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	031b      	lsls	r3, r3, #12
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	4313      	orrs	r3, r2
 800701c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	621a      	str	r2, [r3, #32]
}
 800702a:	bf00      	nop
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	f043 0307 	orr.w	r3, r3, #7
 8007058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	609a      	str	r2, [r3, #8]
}
 8007060:	bf00      	nop
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	021a      	lsls	r2, r3, #8
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	431a      	orrs	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4313      	orrs	r3, r2
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	2201      	movs	r2, #1
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a1a      	ldr	r2, [r3, #32]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	43db      	mvns	r3, r3
 80070ce:	401a      	ands	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a1a      	ldr	r2, [r3, #32]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 031f 	and.w	r3, r3, #31
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	fa01 f303 	lsl.w	r3, r1, r3
 80070e4:	431a      	orrs	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	621a      	str	r2, [r3, #32]
}
 80070ea:	bf00      	nop
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
	...

080070f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800710c:	2302      	movs	r3, #2
 800710e:	e06d      	b.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a30      	ldr	r2, [pc, #192]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d004      	beq.n	8007144 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a2f      	ldr	r2, [pc, #188]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d108      	bne.n	8007156 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800714a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d022      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007182:	d01d      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a1d      	ldr	r2, [pc, #116]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d018      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a1c      	ldr	r2, [pc, #112]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1a      	ldr	r2, [pc, #104]	; (8007208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00e      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a15      	ldr	r2, [pc, #84]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d009      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a16      	ldr	r2, [pc, #88]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d004      	beq.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a15      	ldr	r2, [pc, #84]	; (8007210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d10c      	bne.n	80071da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	40010000 	.word	0x40010000
 80071fc:	40010400 	.word	0x40010400
 8007200:	40000400 	.word	0x40000400
 8007204:	40000800 	.word	0x40000800
 8007208:	40000c00 	.word	0x40000c00
 800720c:	40014000 	.word	0x40014000
 8007210:	40001800 	.word	0x40001800

08007214 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800722c:	2302      	movs	r3, #2
 800722e:	e065      	b.n	80072fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	041b      	lsls	r3, r3, #16
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a16      	ldr	r2, [pc, #88]	; (8007308 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a14      	ldr	r2, [pc, #80]	; (800730c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d115      	bne.n	80072ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	051b      	lsls	r3, r3, #20
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40010000 	.word	0x40010000
 800730c:	40010400 	.word	0x40010400

08007310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e040      	b.n	80073e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d106      	bne.n	8007374 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7fb fd2e 	bl	8002dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2224      	movs	r2, #36	; 0x24
 8007378:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0201 	bic.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fbe6 	bl	8007b5c <UART_SetConfig>
 8007390:	4603      	mov	r3, r0
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e022      	b.n	80073e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fe3e 	bl	8008024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0201 	orr.w	r2, r2, #1
 80073d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fec5 	bl	8008168 <UART_CheckIdleState>
 80073de:	4603      	mov	r3, r0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	; 0x28
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d171      	bne.n	80074e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <HAL_UART_Transmit+0x24>
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e06a      	b.n	80074e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2221      	movs	r2, #33	; 0x21
 800741c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800741e:	f7fb fdb9 	bl	8002f94 <HAL_GetTick>
 8007422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	88fa      	ldrh	r2, [r7, #6]
 8007428:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743c:	d108      	bne.n	8007450 <HAL_UART_Transmit+0x68>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d104      	bne.n	8007450 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007446:	2300      	movs	r3, #0
 8007448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	e003      	b.n	8007458 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007454:	2300      	movs	r3, #0
 8007456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007458:	e02c      	b.n	80074b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2200      	movs	r2, #0
 8007462:	2180      	movs	r1, #128	; 0x80
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 feb6 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e038      	b.n	80074e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10b      	bne.n	8007492 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007488:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	3302      	adds	r3, #2
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	e007      	b.n	80074a2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	781a      	ldrb	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	3301      	adds	r3, #1
 80074a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1cc      	bne.n	800745a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2200      	movs	r2, #0
 80074c8:	2140      	movs	r1, #64	; 0x40
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fe83 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e005      	b.n	80074e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2220      	movs	r2, #32
 80074de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	e000      	b.n	80074e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80074e4:	2302      	movs	r3, #2
  }
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3720      	adds	r7, #32
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b08a      	sub	sp, #40	; 0x28
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	4613      	mov	r3, r2
 80074fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007502:	2b20      	cmp	r3, #32
 8007504:	d132      	bne.n	800756c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <HAL_UART_Receive_IT+0x24>
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e02b      	b.n	800756e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d018      	beq.n	800755c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	613b      	str	r3, [r7, #16]
   return(result);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	623b      	str	r3, [r7, #32]
 800754a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	69f9      	ldr	r1, [r7, #28]
 800754e:	6a3a      	ldr	r2, [r7, #32]
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	61bb      	str	r3, [r7, #24]
   return(result);
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e6      	bne.n	800752a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	461a      	mov	r2, r3
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fefe 	bl	8008364 <UART_Start_Receive_IT>
 8007568:	4603      	mov	r3, r0
 800756a:	e000      	b.n	800756e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800756c:	2302      	movs	r3, #2
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3728      	adds	r7, #40	; 0x28
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b0ba      	sub	sp, #232	; 0xe8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800759e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80075a6:	4013      	ands	r3, r2
 80075a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d115      	bne.n	80075e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00f      	beq.n	80075e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8297 	beq.w	8007b04 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
      }
      return;
 80075de:	e291      	b.n	8007b04 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 8117 	beq.w	8007818 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d106      	bne.n	8007604 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80075fa:	4b85      	ldr	r3, [pc, #532]	; (8007810 <HAL_UART_IRQHandler+0x298>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 810a 	beq.w	8007818 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d011      	beq.n	8007634 <HAL_UART_IRQHandler+0xbc>
 8007610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2201      	movs	r2, #1
 8007622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800762a:	f043 0201 	orr.w	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d011      	beq.n	8007664 <HAL_UART_IRQHandler+0xec>
 8007640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2202      	movs	r2, #2
 8007652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800765a:	f043 0204 	orr.w	r2, r3, #4
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b00      	cmp	r3, #0
 800766e:	d011      	beq.n	8007694 <HAL_UART_IRQHandler+0x11c>
 8007670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2204      	movs	r2, #4
 8007682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800768a:	f043 0202 	orr.w	r2, r3, #2
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007698:	f003 0308 	and.w	r3, r3, #8
 800769c:	2b00      	cmp	r3, #0
 800769e:	d017      	beq.n	80076d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a4:	f003 0320 	and.w	r3, r3, #32
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d105      	bne.n	80076b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00b      	beq.n	80076d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2208      	movs	r2, #8
 80076be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076c6:	f043 0208 	orr.w	r2, r3, #8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d012      	beq.n	8007702 <HAL_UART_IRQHandler+0x18a>
 80076dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00c      	beq.n	8007702 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f8:	f043 0220 	orr.w	r2, r3, #32
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 81fd 	beq.w	8007b08 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800770e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00d      	beq.n	8007736 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800771a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d007      	beq.n	8007736 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774a:	2b40      	cmp	r3, #64	; 0x40
 800774c:	d005      	beq.n	800775a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800774e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007752:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007756:	2b00      	cmp	r3, #0
 8007758:	d04f      	beq.n	80077fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fec8 	bl	80084f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776a:	2b40      	cmp	r3, #64	; 0x40
 800776c:	d141      	bne.n	80077f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3308      	adds	r3, #8
 8007774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800778c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3308      	adds	r3, #8
 8007796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800779a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800779e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1d9      	bne.n	800776e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d013      	beq.n	80077ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c6:	4a13      	ldr	r2, [pc, #76]	; (8007814 <HAL_UART_IRQHandler+0x29c>)
 80077c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fc f98b 	bl	8003aea <HAL_DMA_Abort_IT>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d017      	beq.n	800780a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077e4:	4610      	mov	r0, r2
 80077e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e8:	e00f      	b.n	800780a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f9a0 	bl	8007b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	e00b      	b.n	800780a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f99c 	bl	8007b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f8:	e007      	b.n	800780a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f998 	bl	8007b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007808:	e17e      	b.n	8007b08 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780a:	bf00      	nop
    return;
 800780c:	e17c      	b.n	8007b08 <HAL_UART_IRQHandler+0x590>
 800780e:	bf00      	nop
 8007810:	04000120 	.word	0x04000120
 8007814:	080085b9 	.word	0x080085b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800781c:	2b01      	cmp	r3, #1
 800781e:	f040 814c 	bne.w	8007aba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007826:	f003 0310 	and.w	r3, r3, #16
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 8145 	beq.w	8007aba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007834:	f003 0310 	and.w	r3, r3, #16
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 813e 	beq.w	8007aba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2210      	movs	r2, #16
 8007844:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007850:	2b40      	cmp	r3, #64	; 0x40
 8007852:	f040 80b6 	bne.w	80079c2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007862:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007866:	2b00      	cmp	r3, #0
 8007868:	f000 8150 	beq.w	8007b0c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007876:	429a      	cmp	r2, r3
 8007878:	f080 8148 	bcs.w	8007b0c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007882:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007890:	f000 8086 	beq.w	80079a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1da      	bne.n	8007894 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3308      	adds	r3, #8
 80078e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078f0:	f023 0301 	bic.w	r3, r3, #1
 80078f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3308      	adds	r3, #8
 80078fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007902:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007906:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800790a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e1      	bne.n	80078de <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3308      	adds	r3, #8
 8007920:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800792a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800792c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3308      	adds	r3, #8
 800793a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800793e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007940:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007944:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800794c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e3      	bne.n	800791a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2220      	movs	r2, #32
 8007956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800796e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007970:	f023 0310 	bic.w	r3, r3, #16
 8007974:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007982:	65bb      	str	r3, [r7, #88]	; 0x58
 8007984:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e4      	bne.n	8007960 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799a:	4618      	mov	r0, r3
 800799c:	f7fc f835 	bl	8003a0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8c2 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079c0:	e0a4      	b.n	8007b0c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 8096 	beq.w	8007b10 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80079e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 8091 	beq.w	8007b10 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a10:	647b      	str	r3, [r7, #68]	; 0x44
 8007a12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e4      	bne.n	80079ee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	623b      	str	r3, [r7, #32]
   return(result);
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	f023 0301 	bic.w	r3, r3, #1
 8007a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3308      	adds	r3, #8
 8007a44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a48:	633a      	str	r2, [r7, #48]	; 0x30
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e3      	bne.n	8007a24 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f023 0310 	bic.w	r3, r3, #16
 8007a84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a92:	61fb      	str	r3, [r7, #28]
 8007a94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	69b9      	ldr	r1, [r7, #24]
 8007a98:	69fa      	ldr	r2, [r7, #28]
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	617b      	str	r3, [r7, #20]
   return(result);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e4      	bne.n	8007a70 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f846 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ab8:	e02a      	b.n	8007b10 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00e      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d008      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01c      	beq.n	8007b14 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
    }
    return;
 8007ae2:	e017      	b.n	8007b14 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d012      	beq.n	8007b16 <HAL_UART_IRQHandler+0x59e>
 8007af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00c      	beq.n	8007b16 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fd71 	bl	80085e4 <UART_EndTransmit_IT>
    return;
 8007b02:	e008      	b.n	8007b16 <HAL_UART_IRQHandler+0x59e>
      return;
 8007b04:	bf00      	nop
 8007b06:	e006      	b.n	8007b16 <HAL_UART_IRQHandler+0x59e>
    return;
 8007b08:	bf00      	nop
 8007b0a:	e004      	b.n	8007b16 <HAL_UART_IRQHandler+0x59e>
      return;
 8007b0c:	bf00      	nop
 8007b0e:	e002      	b.n	8007b16 <HAL_UART_IRQHandler+0x59e>
      return;
 8007b10:	bf00      	nop
 8007b12:	e000      	b.n	8007b16 <HAL_UART_IRQHandler+0x59e>
    return;
 8007b14:	bf00      	nop
  }

}
 8007b16:	37e8      	adds	r7, #232	; 0xe8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	431a      	orrs	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	4ba6      	ldr	r3, [pc, #664]	; (8007e20 <UART_SetConfig+0x2c4>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	6979      	ldr	r1, [r7, #20]
 8007b90:	430b      	orrs	r3, r1
 8007b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a94      	ldr	r2, [pc, #592]	; (8007e24 <UART_SetConfig+0x2c8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d120      	bne.n	8007c1a <UART_SetConfig+0xbe>
 8007bd8:	4b93      	ldr	r3, [pc, #588]	; (8007e28 <UART_SetConfig+0x2cc>)
 8007bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d816      	bhi.n	8007c14 <UART_SetConfig+0xb8>
 8007be6:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <UART_SetConfig+0x90>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007bfd 	.word	0x08007bfd
 8007bf0:	08007c09 	.word	0x08007c09
 8007bf4:	08007c03 	.word	0x08007c03
 8007bf8:	08007c0f 	.word	0x08007c0f
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	77fb      	strb	r3, [r7, #31]
 8007c00:	e150      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007c02:	2302      	movs	r3, #2
 8007c04:	77fb      	strb	r3, [r7, #31]
 8007c06:	e14d      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007c08:	2304      	movs	r3, #4
 8007c0a:	77fb      	strb	r3, [r7, #31]
 8007c0c:	e14a      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007c0e:	2308      	movs	r3, #8
 8007c10:	77fb      	strb	r3, [r7, #31]
 8007c12:	e147      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007c14:	2310      	movs	r3, #16
 8007c16:	77fb      	strb	r3, [r7, #31]
 8007c18:	e144      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a83      	ldr	r2, [pc, #524]	; (8007e2c <UART_SetConfig+0x2d0>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d132      	bne.n	8007c8a <UART_SetConfig+0x12e>
 8007c24:	4b80      	ldr	r3, [pc, #512]	; (8007e28 <UART_SetConfig+0x2cc>)
 8007c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2a:	f003 030c 	and.w	r3, r3, #12
 8007c2e:	2b0c      	cmp	r3, #12
 8007c30:	d828      	bhi.n	8007c84 <UART_SetConfig+0x128>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <UART_SetConfig+0xdc>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c6d 	.word	0x08007c6d
 8007c3c:	08007c85 	.word	0x08007c85
 8007c40:	08007c85 	.word	0x08007c85
 8007c44:	08007c85 	.word	0x08007c85
 8007c48:	08007c79 	.word	0x08007c79
 8007c4c:	08007c85 	.word	0x08007c85
 8007c50:	08007c85 	.word	0x08007c85
 8007c54:	08007c85 	.word	0x08007c85
 8007c58:	08007c73 	.word	0x08007c73
 8007c5c:	08007c85 	.word	0x08007c85
 8007c60:	08007c85 	.word	0x08007c85
 8007c64:	08007c85 	.word	0x08007c85
 8007c68:	08007c7f 	.word	0x08007c7f
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	77fb      	strb	r3, [r7, #31]
 8007c70:	e118      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007c72:	2302      	movs	r3, #2
 8007c74:	77fb      	strb	r3, [r7, #31]
 8007c76:	e115      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	77fb      	strb	r3, [r7, #31]
 8007c7c:	e112      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007c7e:	2308      	movs	r3, #8
 8007c80:	77fb      	strb	r3, [r7, #31]
 8007c82:	e10f      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007c84:	2310      	movs	r3, #16
 8007c86:	77fb      	strb	r3, [r7, #31]
 8007c88:	e10c      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a68      	ldr	r2, [pc, #416]	; (8007e30 <UART_SetConfig+0x2d4>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d120      	bne.n	8007cd6 <UART_SetConfig+0x17a>
 8007c94:	4b64      	ldr	r3, [pc, #400]	; (8007e28 <UART_SetConfig+0x2cc>)
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c9e:	2b30      	cmp	r3, #48	; 0x30
 8007ca0:	d013      	beq.n	8007cca <UART_SetConfig+0x16e>
 8007ca2:	2b30      	cmp	r3, #48	; 0x30
 8007ca4:	d814      	bhi.n	8007cd0 <UART_SetConfig+0x174>
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	d009      	beq.n	8007cbe <UART_SetConfig+0x162>
 8007caa:	2b20      	cmp	r3, #32
 8007cac:	d810      	bhi.n	8007cd0 <UART_SetConfig+0x174>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <UART_SetConfig+0x15c>
 8007cb2:	2b10      	cmp	r3, #16
 8007cb4:	d006      	beq.n	8007cc4 <UART_SetConfig+0x168>
 8007cb6:	e00b      	b.n	8007cd0 <UART_SetConfig+0x174>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	77fb      	strb	r3, [r7, #31]
 8007cbc:	e0f2      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	77fb      	strb	r3, [r7, #31]
 8007cc2:	e0ef      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	77fb      	strb	r3, [r7, #31]
 8007cc8:	e0ec      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007cca:	2308      	movs	r3, #8
 8007ccc:	77fb      	strb	r3, [r7, #31]
 8007cce:	e0e9      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007cd0:	2310      	movs	r3, #16
 8007cd2:	77fb      	strb	r3, [r7, #31]
 8007cd4:	e0e6      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a56      	ldr	r2, [pc, #344]	; (8007e34 <UART_SetConfig+0x2d8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d120      	bne.n	8007d22 <UART_SetConfig+0x1c6>
 8007ce0:	4b51      	ldr	r3, [pc, #324]	; (8007e28 <UART_SetConfig+0x2cc>)
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cea:	2bc0      	cmp	r3, #192	; 0xc0
 8007cec:	d013      	beq.n	8007d16 <UART_SetConfig+0x1ba>
 8007cee:	2bc0      	cmp	r3, #192	; 0xc0
 8007cf0:	d814      	bhi.n	8007d1c <UART_SetConfig+0x1c0>
 8007cf2:	2b80      	cmp	r3, #128	; 0x80
 8007cf4:	d009      	beq.n	8007d0a <UART_SetConfig+0x1ae>
 8007cf6:	2b80      	cmp	r3, #128	; 0x80
 8007cf8:	d810      	bhi.n	8007d1c <UART_SetConfig+0x1c0>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <UART_SetConfig+0x1a8>
 8007cfe:	2b40      	cmp	r3, #64	; 0x40
 8007d00:	d006      	beq.n	8007d10 <UART_SetConfig+0x1b4>
 8007d02:	e00b      	b.n	8007d1c <UART_SetConfig+0x1c0>
 8007d04:	2300      	movs	r3, #0
 8007d06:	77fb      	strb	r3, [r7, #31]
 8007d08:	e0cc      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	77fb      	strb	r3, [r7, #31]
 8007d0e:	e0c9      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007d10:	2304      	movs	r3, #4
 8007d12:	77fb      	strb	r3, [r7, #31]
 8007d14:	e0c6      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007d16:	2308      	movs	r3, #8
 8007d18:	77fb      	strb	r3, [r7, #31]
 8007d1a:	e0c3      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	77fb      	strb	r3, [r7, #31]
 8007d20:	e0c0      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a44      	ldr	r2, [pc, #272]	; (8007e38 <UART_SetConfig+0x2dc>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d125      	bne.n	8007d78 <UART_SetConfig+0x21c>
 8007d2c:	4b3e      	ldr	r3, [pc, #248]	; (8007e28 <UART_SetConfig+0x2cc>)
 8007d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d3a:	d017      	beq.n	8007d6c <UART_SetConfig+0x210>
 8007d3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d40:	d817      	bhi.n	8007d72 <UART_SetConfig+0x216>
 8007d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d46:	d00b      	beq.n	8007d60 <UART_SetConfig+0x204>
 8007d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d4c:	d811      	bhi.n	8007d72 <UART_SetConfig+0x216>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <UART_SetConfig+0x1fe>
 8007d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d56:	d006      	beq.n	8007d66 <UART_SetConfig+0x20a>
 8007d58:	e00b      	b.n	8007d72 <UART_SetConfig+0x216>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	77fb      	strb	r3, [r7, #31]
 8007d5e:	e0a1      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007d60:	2302      	movs	r3, #2
 8007d62:	77fb      	strb	r3, [r7, #31]
 8007d64:	e09e      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007d66:	2304      	movs	r3, #4
 8007d68:	77fb      	strb	r3, [r7, #31]
 8007d6a:	e09b      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007d6c:	2308      	movs	r3, #8
 8007d6e:	77fb      	strb	r3, [r7, #31]
 8007d70:	e098      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007d72:	2310      	movs	r3, #16
 8007d74:	77fb      	strb	r3, [r7, #31]
 8007d76:	e095      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a2f      	ldr	r2, [pc, #188]	; (8007e3c <UART_SetConfig+0x2e0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d125      	bne.n	8007dce <UART_SetConfig+0x272>
 8007d82:	4b29      	ldr	r3, [pc, #164]	; (8007e28 <UART_SetConfig+0x2cc>)
 8007d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d90:	d017      	beq.n	8007dc2 <UART_SetConfig+0x266>
 8007d92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d96:	d817      	bhi.n	8007dc8 <UART_SetConfig+0x26c>
 8007d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d9c:	d00b      	beq.n	8007db6 <UART_SetConfig+0x25a>
 8007d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da2:	d811      	bhi.n	8007dc8 <UART_SetConfig+0x26c>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <UART_SetConfig+0x254>
 8007da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dac:	d006      	beq.n	8007dbc <UART_SetConfig+0x260>
 8007dae:	e00b      	b.n	8007dc8 <UART_SetConfig+0x26c>
 8007db0:	2301      	movs	r3, #1
 8007db2:	77fb      	strb	r3, [r7, #31]
 8007db4:	e076      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007db6:	2302      	movs	r3, #2
 8007db8:	77fb      	strb	r3, [r7, #31]
 8007dba:	e073      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007dbc:	2304      	movs	r3, #4
 8007dbe:	77fb      	strb	r3, [r7, #31]
 8007dc0:	e070      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007dc2:	2308      	movs	r3, #8
 8007dc4:	77fb      	strb	r3, [r7, #31]
 8007dc6:	e06d      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007dc8:	2310      	movs	r3, #16
 8007dca:	77fb      	strb	r3, [r7, #31]
 8007dcc:	e06a      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a1b      	ldr	r2, [pc, #108]	; (8007e40 <UART_SetConfig+0x2e4>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d138      	bne.n	8007e4a <UART_SetConfig+0x2ee>
 8007dd8:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <UART_SetConfig+0x2cc>)
 8007dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007de2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007de6:	d017      	beq.n	8007e18 <UART_SetConfig+0x2bc>
 8007de8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dec:	d82a      	bhi.n	8007e44 <UART_SetConfig+0x2e8>
 8007dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df2:	d00b      	beq.n	8007e0c <UART_SetConfig+0x2b0>
 8007df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df8:	d824      	bhi.n	8007e44 <UART_SetConfig+0x2e8>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <UART_SetConfig+0x2aa>
 8007dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e02:	d006      	beq.n	8007e12 <UART_SetConfig+0x2b6>
 8007e04:	e01e      	b.n	8007e44 <UART_SetConfig+0x2e8>
 8007e06:	2300      	movs	r3, #0
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e04b      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	77fb      	strb	r3, [r7, #31]
 8007e10:	e048      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007e12:	2304      	movs	r3, #4
 8007e14:	77fb      	strb	r3, [r7, #31]
 8007e16:	e045      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007e18:	2308      	movs	r3, #8
 8007e1a:	77fb      	strb	r3, [r7, #31]
 8007e1c:	e042      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007e1e:	bf00      	nop
 8007e20:	efff69f3 	.word	0xefff69f3
 8007e24:	40011000 	.word	0x40011000
 8007e28:	40023800 	.word	0x40023800
 8007e2c:	40004400 	.word	0x40004400
 8007e30:	40004800 	.word	0x40004800
 8007e34:	40004c00 	.word	0x40004c00
 8007e38:	40005000 	.word	0x40005000
 8007e3c:	40011400 	.word	0x40011400
 8007e40:	40007800 	.word	0x40007800
 8007e44:	2310      	movs	r3, #16
 8007e46:	77fb      	strb	r3, [r7, #31]
 8007e48:	e02c      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a72      	ldr	r2, [pc, #456]	; (8008018 <UART_SetConfig+0x4bc>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d125      	bne.n	8007ea0 <UART_SetConfig+0x344>
 8007e54:	4b71      	ldr	r3, [pc, #452]	; (800801c <UART_SetConfig+0x4c0>)
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e62:	d017      	beq.n	8007e94 <UART_SetConfig+0x338>
 8007e64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e68:	d817      	bhi.n	8007e9a <UART_SetConfig+0x33e>
 8007e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e6e:	d00b      	beq.n	8007e88 <UART_SetConfig+0x32c>
 8007e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e74:	d811      	bhi.n	8007e9a <UART_SetConfig+0x33e>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <UART_SetConfig+0x326>
 8007e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e7e:	d006      	beq.n	8007e8e <UART_SetConfig+0x332>
 8007e80:	e00b      	b.n	8007e9a <UART_SetConfig+0x33e>
 8007e82:	2300      	movs	r3, #0
 8007e84:	77fb      	strb	r3, [r7, #31]
 8007e86:	e00d      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	77fb      	strb	r3, [r7, #31]
 8007e8c:	e00a      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007e8e:	2304      	movs	r3, #4
 8007e90:	77fb      	strb	r3, [r7, #31]
 8007e92:	e007      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007e94:	2308      	movs	r3, #8
 8007e96:	77fb      	strb	r3, [r7, #31]
 8007e98:	e004      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007e9a:	2310      	movs	r3, #16
 8007e9c:	77fb      	strb	r3, [r7, #31]
 8007e9e:	e001      	b.n	8007ea4 <UART_SetConfig+0x348>
 8007ea0:	2310      	movs	r3, #16
 8007ea2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eac:	d15b      	bne.n	8007f66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007eae:	7ffb      	ldrb	r3, [r7, #31]
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d828      	bhi.n	8007f06 <UART_SetConfig+0x3aa>
 8007eb4:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <UART_SetConfig+0x360>)
 8007eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eba:	bf00      	nop
 8007ebc:	08007ee1 	.word	0x08007ee1
 8007ec0:	08007ee9 	.word	0x08007ee9
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	08007f07 	.word	0x08007f07
 8007ecc:	08007ef7 	.word	0x08007ef7
 8007ed0:	08007f07 	.word	0x08007f07
 8007ed4:	08007f07 	.word	0x08007f07
 8007ed8:	08007f07 	.word	0x08007f07
 8007edc:	08007eff 	.word	0x08007eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ee0:	f7fd fbec 	bl	80056bc <HAL_RCC_GetPCLK1Freq>
 8007ee4:	61b8      	str	r0, [r7, #24]
        break;
 8007ee6:	e013      	b.n	8007f10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ee8:	f7fd fbfc 	bl	80056e4 <HAL_RCC_GetPCLK2Freq>
 8007eec:	61b8      	str	r0, [r7, #24]
        break;
 8007eee:	e00f      	b.n	8007f10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ef0:	4b4b      	ldr	r3, [pc, #300]	; (8008020 <UART_SetConfig+0x4c4>)
 8007ef2:	61bb      	str	r3, [r7, #24]
        break;
 8007ef4:	e00c      	b.n	8007f10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ef6:	f7fd facf 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 8007efa:	61b8      	str	r0, [r7, #24]
        break;
 8007efc:	e008      	b.n	8007f10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f02:	61bb      	str	r3, [r7, #24]
        break;
 8007f04:	e004      	b.n	8007f10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	77bb      	strb	r3, [r7, #30]
        break;
 8007f0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d074      	beq.n	8008000 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	005a      	lsls	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	085b      	lsrs	r3, r3, #1
 8007f20:	441a      	add	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	2b0f      	cmp	r3, #15
 8007f30:	d916      	bls.n	8007f60 <UART_SetConfig+0x404>
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f38:	d212      	bcs.n	8007f60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	f023 030f 	bic.w	r3, r3, #15
 8007f42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	085b      	lsrs	r3, r3, #1
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	89fb      	ldrh	r3, [r7, #14]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	89fa      	ldrh	r2, [r7, #14]
 8007f5c:	60da      	str	r2, [r3, #12]
 8007f5e:	e04f      	b.n	8008000 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	77bb      	strb	r3, [r7, #30]
 8007f64:	e04c      	b.n	8008000 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f66:	7ffb      	ldrb	r3, [r7, #31]
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d828      	bhi.n	8007fbe <UART_SetConfig+0x462>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <UART_SetConfig+0x418>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007f99 	.word	0x08007f99
 8007f78:	08007fa1 	.word	0x08007fa1
 8007f7c:	08007fa9 	.word	0x08007fa9
 8007f80:	08007fbf 	.word	0x08007fbf
 8007f84:	08007faf 	.word	0x08007faf
 8007f88:	08007fbf 	.word	0x08007fbf
 8007f8c:	08007fbf 	.word	0x08007fbf
 8007f90:	08007fbf 	.word	0x08007fbf
 8007f94:	08007fb7 	.word	0x08007fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f98:	f7fd fb90 	bl	80056bc <HAL_RCC_GetPCLK1Freq>
 8007f9c:	61b8      	str	r0, [r7, #24]
        break;
 8007f9e:	e013      	b.n	8007fc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fa0:	f7fd fba0 	bl	80056e4 <HAL_RCC_GetPCLK2Freq>
 8007fa4:	61b8      	str	r0, [r7, #24]
        break;
 8007fa6:	e00f      	b.n	8007fc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fa8:	4b1d      	ldr	r3, [pc, #116]	; (8008020 <UART_SetConfig+0x4c4>)
 8007faa:	61bb      	str	r3, [r7, #24]
        break;
 8007fac:	e00c      	b.n	8007fc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fae:	f7fd fa73 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 8007fb2:	61b8      	str	r0, [r7, #24]
        break;
 8007fb4:	e008      	b.n	8007fc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fba:	61bb      	str	r3, [r7, #24]
        break;
 8007fbc:	e004      	b.n	8007fc8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	77bb      	strb	r3, [r7, #30]
        break;
 8007fc6:	bf00      	nop
    }

    if (pclk != 0U)
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d018      	beq.n	8008000 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	085a      	lsrs	r2, r3, #1
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	441a      	add	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	2b0f      	cmp	r3, #15
 8007fe6:	d909      	bls.n	8007ffc <UART_SetConfig+0x4a0>
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fee:	d205      	bcs.n	8007ffc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	60da      	str	r2, [r3, #12]
 8007ffa:	e001      	b.n	8008000 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800800c:	7fbb      	ldrb	r3, [r7, #30]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	40007c00 	.word	0x40007c00
 800801c:	40023800 	.word	0x40023800
 8008020:	00f42400 	.word	0x00f42400

08008024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00a      	beq.n	8008092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	f003 0308 	and.w	r3, r3, #8
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00a      	beq.n	80080d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00a      	beq.n	80080f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01a      	beq.n	800813a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008122:	d10a      	bne.n	800813a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	605a      	str	r2, [r3, #4]
  }
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af02      	add	r7, sp, #8
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008178:	f7fa ff0c 	bl	8002f94 <HAL_GetTick>
 800817c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0308 	and.w	r3, r3, #8
 8008188:	2b08      	cmp	r3, #8
 800818a:	d10e      	bne.n	80081aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800818c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f81b 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e011      	b.n	80081ce <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b09c      	sub	sp, #112	; 0x70
 80081da:	af00      	add	r7, sp, #0
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	603b      	str	r3, [r7, #0]
 80081e2:	4613      	mov	r3, r2
 80081e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e6:	e0a7      	b.n	8008338 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	f000 80a3 	beq.w	8008338 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f2:	f7fa fecf 	bl	8002f94 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081fe:	429a      	cmp	r2, r3
 8008200:	d302      	bcc.n	8008208 <UART_WaitOnFlagUntilTimeout+0x32>
 8008202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008204:	2b00      	cmp	r3, #0
 8008206:	d13f      	bne.n	8008288 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800821c:	667b      	str	r3, [r7, #100]	; 0x64
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008228:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800822c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e6      	bne.n	8008208 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	663b      	str	r3, [r7, #96]	; 0x60
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800825a:	64ba      	str	r2, [r7, #72]	; 0x48
 800825c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e5      	bne.n	800823a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2220      	movs	r2, #32
 8008272:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2220      	movs	r2, #32
 8008278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e068      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	d050      	beq.n	8008338 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a4:	d148      	bne.n	8008338 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34
 80082d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e6      	bne.n	80082b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3308      	adds	r3, #8
 80082e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	613b      	str	r3, [r7, #16]
   return(result);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f023 0301 	bic.w	r3, r3, #1
 80082f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3308      	adds	r3, #8
 8008300:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008302:	623a      	str	r2, [r7, #32]
 8008304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	69f9      	ldr	r1, [r7, #28]
 8008308:	6a3a      	ldr	r2, [r7, #32]
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e5      	bne.n	80082e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2220      	movs	r2, #32
 800831a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2220      	movs	r2, #32
 8008320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2220      	movs	r2, #32
 8008328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e010      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	69da      	ldr	r2, [r3, #28]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	4013      	ands	r3, r2
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	429a      	cmp	r2, r3
 8008346:	bf0c      	ite	eq
 8008348:	2301      	moveq	r3, #1
 800834a:	2300      	movne	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	461a      	mov	r2, r3
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	429a      	cmp	r2, r3
 8008354:	f43f af48 	beq.w	80081e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3770      	adds	r7, #112	; 0x70
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008364:	b480      	push	{r7}
 8008366:	b097      	sub	sp, #92	; 0x5c
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	88fa      	ldrh	r2, [r7, #6]
 800837c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008396:	d10e      	bne.n	80083b6 <UART_Start_Receive_IT+0x52>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d105      	bne.n	80083ac <UART_Start_Receive_IT+0x48>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80083a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083aa:	e02d      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	22ff      	movs	r2, #255	; 0xff
 80083b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083b4:	e028      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10d      	bne.n	80083da <UART_Start_Receive_IT+0x76>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d104      	bne.n	80083d0 <UART_Start_Receive_IT+0x6c>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	22ff      	movs	r2, #255	; 0xff
 80083ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083ce:	e01b      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	227f      	movs	r2, #127	; 0x7f
 80083d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083d8:	e016      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083e2:	d10d      	bne.n	8008400 <UART_Start_Receive_IT+0x9c>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d104      	bne.n	80083f6 <UART_Start_Receive_IT+0x92>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	227f      	movs	r2, #127	; 0x7f
 80083f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083f4:	e008      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	223f      	movs	r2, #63	; 0x3f
 80083fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083fe:	e003      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2222      	movs	r2, #34	; 0x22
 8008414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3308      	adds	r3, #8
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008422:	e853 3f00 	ldrex	r3, [r3]
 8008426:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	f043 0301 	orr.w	r3, r3, #1
 800842e:	657b      	str	r3, [r7, #84]	; 0x54
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3308      	adds	r3, #8
 8008436:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008438:	64ba      	str	r2, [r7, #72]	; 0x48
 800843a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800843e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e5      	bne.n	8008418 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008454:	d107      	bne.n	8008466 <UART_Start_Receive_IT+0x102>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d103      	bne.n	8008466 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4a21      	ldr	r2, [pc, #132]	; (80084e8 <UART_Start_Receive_IT+0x184>)
 8008462:	669a      	str	r2, [r3, #104]	; 0x68
 8008464:	e002      	b.n	800846c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4a20      	ldr	r2, [pc, #128]	; (80084ec <UART_Start_Receive_IT+0x188>)
 800846a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d019      	beq.n	80084a8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	e853 3f00 	ldrex	r3, [r3]
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008492:	637b      	str	r3, [r7, #52]	; 0x34
 8008494:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e6      	bne.n	8008474 <UART_Start_Receive_IT+0x110>
 80084a6:	e018      	b.n	80084da <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	613b      	str	r3, [r7, #16]
   return(result);
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f043 0320 	orr.w	r3, r3, #32
 80084bc:	653b      	str	r3, [r7, #80]	; 0x50
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c6:	623b      	str	r3, [r7, #32]
 80084c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	69f9      	ldr	r1, [r7, #28]
 80084cc:	6a3a      	ldr	r2, [r7, #32]
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e6      	bne.n	80084a8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	375c      	adds	r7, #92	; 0x5c
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	0800879f 	.word	0x0800879f
 80084ec:	08008639 	.word	0x08008639

080084f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b095      	sub	sp, #84	; 0x54
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008500:	e853 3f00 	ldrex	r3, [r3]
 8008504:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800850c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008516:	643b      	str	r3, [r7, #64]	; 0x40
 8008518:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800851c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e6      	bne.n	80084f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3308      	adds	r3, #8
 8008530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	61fb      	str	r3, [r7, #28]
   return(result);
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	64bb      	str	r3, [r7, #72]	; 0x48
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3308      	adds	r3, #8
 8008548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800854a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800854c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1e5      	bne.n	800852a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008562:	2b01      	cmp	r3, #1
 8008564:	d118      	bne.n	8008598 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	60bb      	str	r3, [r7, #8]
   return(result);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f023 0310 	bic.w	r3, r3, #16
 800857a:	647b      	str	r3, [r7, #68]	; 0x44
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	461a      	mov	r2, r3
 8008582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008584:	61bb      	str	r3, [r7, #24]
 8008586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008588:	6979      	ldr	r1, [r7, #20]
 800858a:	69ba      	ldr	r2, [r7, #24]
 800858c:	e841 2300 	strex	r3, r2, [r1]
 8008590:	613b      	str	r3, [r7, #16]
   return(result);
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1e6      	bne.n	8008566 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80085ac:	bf00      	nop
 80085ae:	3754      	adds	r7, #84	; 0x54
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7ff faaa 	bl	8007b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085dc:	bf00      	nop
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008600:	61fb      	str	r3, [r7, #28]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	61bb      	str	r3, [r7, #24]
 800860c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860e:	6979      	ldr	r1, [r7, #20]
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	e841 2300 	strex	r3, r2, [r1]
 8008616:	613b      	str	r3, [r7, #16]
   return(result);
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1e6      	bne.n	80085ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2220      	movs	r2, #32
 8008622:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7ff fa76 	bl	8007b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008630:	bf00      	nop
 8008632:	3720      	adds	r7, #32
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b096      	sub	sp, #88	; 0x58
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008646:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008650:	2b22      	cmp	r3, #34	; 0x22
 8008652:	f040 8098 	bne.w	8008786 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008660:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008664:	b2d9      	uxtb	r1, r3
 8008666:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800866a:	b2da      	uxtb	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008670:	400a      	ands	r2, r1
 8008672:	b2d2      	uxtb	r2, r2
 8008674:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008686:	b29b      	uxth	r3, r3
 8008688:	3b01      	subs	r3, #1
 800868a:	b29a      	uxth	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008698:	b29b      	uxth	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d17b      	bne.n	8008796 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	e853 3f00 	ldrex	r3, [r3]
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086b2:	653b      	str	r3, [r7, #80]	; 0x50
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	461a      	mov	r2, r3
 80086ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086bc:	647b      	str	r3, [r7, #68]	; 0x44
 80086be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086c4:	e841 2300 	strex	r3, r2, [r1]
 80086c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1e6      	bne.n	800869e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3308      	adds	r3, #8
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	623b      	str	r3, [r7, #32]
   return(result);
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	f023 0301 	bic.w	r3, r3, #1
 80086e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3308      	adds	r3, #8
 80086ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086f0:	633a      	str	r2, [r7, #48]	; 0x30
 80086f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e5      	bne.n	80086d0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2220      	movs	r2, #32
 8008708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800871c:	2b01      	cmp	r3, #1
 800871e:	d12e      	bne.n	800877e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	60fb      	str	r3, [r7, #12]
   return(result);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0310 	bic.w	r3, r3, #16
 800873a:	64bb      	str	r3, [r7, #72]	; 0x48
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	69b9      	ldr	r1, [r7, #24]
 800874a:	69fa      	ldr	r2, [r7, #28]
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	617b      	str	r3, [r7, #20]
   return(result);
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e6      	bne.n	8008726 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	f003 0310 	and.w	r3, r3, #16
 8008762:	2b10      	cmp	r3, #16
 8008764:	d103      	bne.n	800876e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2210      	movs	r2, #16
 800876c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7ff f9e4 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800877c:	e00b      	b.n	8008796 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7f9 fa7a 	bl	8001c78 <HAL_UART_RxCpltCallback>
}
 8008784:	e007      	b.n	8008796 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	699a      	ldr	r2, [r3, #24]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f042 0208 	orr.w	r2, r2, #8
 8008794:	619a      	str	r2, [r3, #24]
}
 8008796:	bf00      	nop
 8008798:	3758      	adds	r7, #88	; 0x58
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b096      	sub	sp, #88	; 0x58
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087b6:	2b22      	cmp	r3, #34	; 0x22
 80087b8:	f040 8098 	bne.w	80088ec <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80087cc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80087d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087d4:	4013      	ands	r3, r2
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e0:	1c9a      	adds	r2, r3, #2
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087fe:	b29b      	uxth	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d17b      	bne.n	80088fc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008818:	64fb      	str	r3, [r7, #76]	; 0x4c
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008822:	643b      	str	r3, [r7, #64]	; 0x40
 8008824:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e6      	bne.n	8008804 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3308      	adds	r3, #8
 800883c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	61fb      	str	r3, [r7, #28]
   return(result);
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	f023 0301 	bic.w	r3, r3, #1
 800884c:	64bb      	str	r3, [r7, #72]	; 0x48
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3308      	adds	r3, #8
 8008854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800885c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e5      	bne.n	8008836 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2220      	movs	r2, #32
 800886e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008882:	2b01      	cmp	r3, #1
 8008884:	d12e      	bne.n	80088e4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	60bb      	str	r3, [r7, #8]
   return(result);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f023 0310 	bic.w	r3, r3, #16
 80088a0:	647b      	str	r3, [r7, #68]	; 0x44
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088aa:	61bb      	str	r3, [r7, #24]
 80088ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	6979      	ldr	r1, [r7, #20]
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	613b      	str	r3, [r7, #16]
   return(result);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e6      	bne.n	800888c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	f003 0310 	and.w	r3, r3, #16
 80088c8:	2b10      	cmp	r3, #16
 80088ca:	d103      	bne.n	80088d4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2210      	movs	r2, #16
 80088d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff f931 	bl	8007b44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088e2:	e00b      	b.n	80088fc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7f9 f9c7 	bl	8001c78 <HAL_UART_RxCpltCallback>
}
 80088ea:	e007      	b.n	80088fc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	699a      	ldr	r2, [r3, #24]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0208 	orr.w	r2, r2, #8
 80088fa:	619a      	str	r2, [r3, #24]
}
 80088fc:	bf00      	nop
 80088fe:	3758      	adds	r7, #88	; 0x58
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <atof>:
 8008904:	2100      	movs	r1, #0
 8008906:	f000 be99 	b.w	800963c <strtod>
	...

0800890c <gcvt>:
 800890c:	b530      	push	{r4, r5, lr}
 800890e:	2200      	movs	r2, #0
 8008910:	b085      	sub	sp, #20
 8008912:	460c      	mov	r4, r1
 8008914:	4605      	mov	r5, r0
 8008916:	2300      	movs	r3, #0
 8008918:	ec51 0b10 	vmov	r0, r1, d0
 800891c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008920:	f7f8 f8fc 	bl	8000b1c <__aeabi_dcmplt>
 8008924:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008928:	4622      	mov	r2, r4
 800892a:	b118      	cbz	r0, 8008934 <gcvt+0x28>
 800892c:	232d      	movs	r3, #45	; 0x2d
 800892e:	f802 3b01 	strb.w	r3, [r2], #1
 8008932:	3d01      	subs	r5, #1
 8008934:	2300      	movs	r3, #0
 8008936:	4806      	ldr	r0, [pc, #24]	; (8008950 <gcvt+0x44>)
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	4629      	mov	r1, r5
 800893c:	2367      	movs	r3, #103	; 0x67
 800893e:	6800      	ldr	r0, [r0, #0]
 8008940:	f000 ff02 	bl	8009748 <_gcvt>
 8008944:	2800      	cmp	r0, #0
 8008946:	bf14      	ite	ne
 8008948:	4620      	movne	r0, r4
 800894a:	2000      	moveq	r0, #0
 800894c:	b005      	add	sp, #20
 800894e:	bd30      	pop	{r4, r5, pc}
 8008950:	2000001c 	.word	0x2000001c

08008954 <__errno>:
 8008954:	4b01      	ldr	r3, [pc, #4]	; (800895c <__errno+0x8>)
 8008956:	6818      	ldr	r0, [r3, #0]
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	2000001c 	.word	0x2000001c

08008960 <__libc_init_array>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	4d0d      	ldr	r5, [pc, #52]	; (8008998 <__libc_init_array+0x38>)
 8008964:	4c0d      	ldr	r4, [pc, #52]	; (800899c <__libc_init_array+0x3c>)
 8008966:	1b64      	subs	r4, r4, r5
 8008968:	10a4      	asrs	r4, r4, #2
 800896a:	2600      	movs	r6, #0
 800896c:	42a6      	cmp	r6, r4
 800896e:	d109      	bne.n	8008984 <__libc_init_array+0x24>
 8008970:	4d0b      	ldr	r5, [pc, #44]	; (80089a0 <__libc_init_array+0x40>)
 8008972:	4c0c      	ldr	r4, [pc, #48]	; (80089a4 <__libc_init_array+0x44>)
 8008974:	f003 ff0c 	bl	800c790 <_init>
 8008978:	1b64      	subs	r4, r4, r5
 800897a:	10a4      	asrs	r4, r4, #2
 800897c:	2600      	movs	r6, #0
 800897e:	42a6      	cmp	r6, r4
 8008980:	d105      	bne.n	800898e <__libc_init_array+0x2e>
 8008982:	bd70      	pop	{r4, r5, r6, pc}
 8008984:	f855 3b04 	ldr.w	r3, [r5], #4
 8008988:	4798      	blx	r3
 800898a:	3601      	adds	r6, #1
 800898c:	e7ee      	b.n	800896c <__libc_init_array+0xc>
 800898e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008992:	4798      	blx	r3
 8008994:	3601      	adds	r6, #1
 8008996:	e7f2      	b.n	800897e <__libc_init_array+0x1e>
 8008998:	0800d438 	.word	0x0800d438
 800899c:	0800d438 	.word	0x0800d438
 80089a0:	0800d438 	.word	0x0800d438
 80089a4:	0800d43c 	.word	0x0800d43c

080089a8 <memcpy>:
 80089a8:	440a      	add	r2, r1
 80089aa:	4291      	cmp	r1, r2
 80089ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80089b0:	d100      	bne.n	80089b4 <memcpy+0xc>
 80089b2:	4770      	bx	lr
 80089b4:	b510      	push	{r4, lr}
 80089b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089be:	4291      	cmp	r1, r2
 80089c0:	d1f9      	bne.n	80089b6 <memcpy+0xe>
 80089c2:	bd10      	pop	{r4, pc}

080089c4 <memset>:
 80089c4:	4402      	add	r2, r0
 80089c6:	4603      	mov	r3, r0
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d100      	bne.n	80089ce <memset+0xa>
 80089cc:	4770      	bx	lr
 80089ce:	f803 1b01 	strb.w	r1, [r3], #1
 80089d2:	e7f9      	b.n	80089c8 <memset+0x4>

080089d4 <strcat>:
 80089d4:	b510      	push	{r4, lr}
 80089d6:	4602      	mov	r2, r0
 80089d8:	7814      	ldrb	r4, [r2, #0]
 80089da:	4613      	mov	r3, r2
 80089dc:	3201      	adds	r2, #1
 80089de:	2c00      	cmp	r4, #0
 80089e0:	d1fa      	bne.n	80089d8 <strcat+0x4>
 80089e2:	3b01      	subs	r3, #1
 80089e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089ec:	2a00      	cmp	r2, #0
 80089ee:	d1f9      	bne.n	80089e4 <strcat+0x10>
 80089f0:	bd10      	pop	{r4, pc}

080089f2 <sulp>:
 80089f2:	b570      	push	{r4, r5, r6, lr}
 80089f4:	4604      	mov	r4, r0
 80089f6:	460d      	mov	r5, r1
 80089f8:	ec45 4b10 	vmov	d0, r4, r5
 80089fc:	4616      	mov	r6, r2
 80089fe:	f001 fe57 	bl	800a6b0 <__ulp>
 8008a02:	ec51 0b10 	vmov	r0, r1, d0
 8008a06:	b17e      	cbz	r6, 8008a28 <sulp+0x36>
 8008a08:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a0c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dd09      	ble.n	8008a28 <sulp+0x36>
 8008a14:	051b      	lsls	r3, r3, #20
 8008a16:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a1a:	2400      	movs	r4, #0
 8008a1c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a20:	4622      	mov	r2, r4
 8008a22:	462b      	mov	r3, r5
 8008a24:	f7f7 fe08 	bl	8000638 <__aeabi_dmul>
 8008a28:	bd70      	pop	{r4, r5, r6, pc}
 8008a2a:	0000      	movs	r0, r0
 8008a2c:	0000      	movs	r0, r0
	...

08008a30 <_strtod_l>:
 8008a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	ed2d 8b02 	vpush	{d8}
 8008a38:	b09d      	sub	sp, #116	; 0x74
 8008a3a:	461f      	mov	r7, r3
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9318      	str	r3, [sp, #96]	; 0x60
 8008a40:	4ba2      	ldr	r3, [pc, #648]	; (8008ccc <_strtod_l+0x29c>)
 8008a42:	9213      	str	r2, [sp, #76]	; 0x4c
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	9305      	str	r3, [sp, #20]
 8008a48:	4604      	mov	r4, r0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	4688      	mov	r8, r1
 8008a4e:	f7f7 fbdf 	bl	8000210 <strlen>
 8008a52:	f04f 0a00 	mov.w	sl, #0
 8008a56:	4605      	mov	r5, r0
 8008a58:	f04f 0b00 	mov.w	fp, #0
 8008a5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a62:	781a      	ldrb	r2, [r3, #0]
 8008a64:	2a2b      	cmp	r2, #43	; 0x2b
 8008a66:	d04e      	beq.n	8008b06 <_strtod_l+0xd6>
 8008a68:	d83b      	bhi.n	8008ae2 <_strtod_l+0xb2>
 8008a6a:	2a0d      	cmp	r2, #13
 8008a6c:	d834      	bhi.n	8008ad8 <_strtod_l+0xa8>
 8008a6e:	2a08      	cmp	r2, #8
 8008a70:	d834      	bhi.n	8008adc <_strtod_l+0xac>
 8008a72:	2a00      	cmp	r2, #0
 8008a74:	d03e      	beq.n	8008af4 <_strtod_l+0xc4>
 8008a76:	2300      	movs	r3, #0
 8008a78:	930a      	str	r3, [sp, #40]	; 0x28
 8008a7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008a7c:	7833      	ldrb	r3, [r6, #0]
 8008a7e:	2b30      	cmp	r3, #48	; 0x30
 8008a80:	f040 80b0 	bne.w	8008be4 <_strtod_l+0x1b4>
 8008a84:	7873      	ldrb	r3, [r6, #1]
 8008a86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a8a:	2b58      	cmp	r3, #88	; 0x58
 8008a8c:	d168      	bne.n	8008b60 <_strtod_l+0x130>
 8008a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	ab18      	add	r3, sp, #96	; 0x60
 8008a94:	9702      	str	r7, [sp, #8]
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	4a8d      	ldr	r2, [pc, #564]	; (8008cd0 <_strtod_l+0x2a0>)
 8008a9a:	ab19      	add	r3, sp, #100	; 0x64
 8008a9c:	a917      	add	r1, sp, #92	; 0x5c
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 ff7a 	bl	8009998 <__gethex>
 8008aa4:	f010 0707 	ands.w	r7, r0, #7
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	d005      	beq.n	8008ab8 <_strtod_l+0x88>
 8008aac:	2f06      	cmp	r7, #6
 8008aae:	d12c      	bne.n	8008b0a <_strtod_l+0xda>
 8008ab0:	3601      	adds	r6, #1
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9617      	str	r6, [sp, #92]	; 0x5c
 8008ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f040 8590 	bne.w	80095e0 <_strtod_l+0xbb0>
 8008ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac2:	b1eb      	cbz	r3, 8008b00 <_strtod_l+0xd0>
 8008ac4:	4652      	mov	r2, sl
 8008ac6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008aca:	ec43 2b10 	vmov	d0, r2, r3
 8008ace:	b01d      	add	sp, #116	; 0x74
 8008ad0:	ecbd 8b02 	vpop	{d8}
 8008ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad8:	2a20      	cmp	r2, #32
 8008ada:	d1cc      	bne.n	8008a76 <_strtod_l+0x46>
 8008adc:	3301      	adds	r3, #1
 8008ade:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ae0:	e7be      	b.n	8008a60 <_strtod_l+0x30>
 8008ae2:	2a2d      	cmp	r2, #45	; 0x2d
 8008ae4:	d1c7      	bne.n	8008a76 <_strtod_l+0x46>
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8008aea:	1c5a      	adds	r2, r3, #1
 8008aec:	9217      	str	r2, [sp, #92]	; 0x5c
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1c2      	bne.n	8008a7a <_strtod_l+0x4a>
 8008af4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008af6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f040 856e 	bne.w	80095dc <_strtod_l+0xbac>
 8008b00:	4652      	mov	r2, sl
 8008b02:	465b      	mov	r3, fp
 8008b04:	e7e1      	b.n	8008aca <_strtod_l+0x9a>
 8008b06:	2200      	movs	r2, #0
 8008b08:	e7ee      	b.n	8008ae8 <_strtod_l+0xb8>
 8008b0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b0c:	b13a      	cbz	r2, 8008b1e <_strtod_l+0xee>
 8008b0e:	2135      	movs	r1, #53	; 0x35
 8008b10:	a81a      	add	r0, sp, #104	; 0x68
 8008b12:	f001 fef7 	bl	800a904 <__copybits>
 8008b16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f001 fa97 	bl	800a04c <_Bfree>
 8008b1e:	3f01      	subs	r7, #1
 8008b20:	2f04      	cmp	r7, #4
 8008b22:	d806      	bhi.n	8008b32 <_strtod_l+0x102>
 8008b24:	e8df f007 	tbb	[pc, r7]
 8008b28:	1714030a 	.word	0x1714030a
 8008b2c:	0a          	.byte	0x0a
 8008b2d:	00          	.byte	0x00
 8008b2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008b32:	0728      	lsls	r0, r5, #28
 8008b34:	d5c0      	bpl.n	8008ab8 <_strtod_l+0x88>
 8008b36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b3a:	e7bd      	b.n	8008ab8 <_strtod_l+0x88>
 8008b3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008b40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b4e:	e7f0      	b.n	8008b32 <_strtod_l+0x102>
 8008b50:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008cd4 <_strtod_l+0x2a4>
 8008b54:	e7ed      	b.n	8008b32 <_strtod_l+0x102>
 8008b56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b5a:	f04f 3aff 	mov.w	sl, #4294967295
 8008b5e:	e7e8      	b.n	8008b32 <_strtod_l+0x102>
 8008b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b66:	785b      	ldrb	r3, [r3, #1]
 8008b68:	2b30      	cmp	r3, #48	; 0x30
 8008b6a:	d0f9      	beq.n	8008b60 <_strtod_l+0x130>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0a3      	beq.n	8008ab8 <_strtod_l+0x88>
 8008b70:	2301      	movs	r3, #1
 8008b72:	f04f 0900 	mov.w	r9, #0
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b7a:	9308      	str	r3, [sp, #32]
 8008b7c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b80:	464f      	mov	r7, r9
 8008b82:	220a      	movs	r2, #10
 8008b84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008b86:	7806      	ldrb	r6, [r0, #0]
 8008b88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b8c:	b2d9      	uxtb	r1, r3
 8008b8e:	2909      	cmp	r1, #9
 8008b90:	d92a      	bls.n	8008be8 <_strtod_l+0x1b8>
 8008b92:	9905      	ldr	r1, [sp, #20]
 8008b94:	462a      	mov	r2, r5
 8008b96:	f002 f957 	bl	800ae48 <strncmp>
 8008b9a:	b398      	cbz	r0, 8008c04 <_strtod_l+0x1d4>
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	463d      	mov	r5, r7
 8008ba2:	9005      	str	r0, [sp, #20]
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2a65      	cmp	r2, #101	; 0x65
 8008ba8:	d001      	beq.n	8008bae <_strtod_l+0x17e>
 8008baa:	2a45      	cmp	r2, #69	; 0x45
 8008bac:	d118      	bne.n	8008be0 <_strtod_l+0x1b0>
 8008bae:	b91d      	cbnz	r5, 8008bb8 <_strtod_l+0x188>
 8008bb0:	9a04      	ldr	r2, [sp, #16]
 8008bb2:	4302      	orrs	r2, r0
 8008bb4:	d09e      	beq.n	8008af4 <_strtod_l+0xc4>
 8008bb6:	2500      	movs	r5, #0
 8008bb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008bbc:	f108 0201 	add.w	r2, r8, #1
 8008bc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bc2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008bc6:	2a2b      	cmp	r2, #43	; 0x2b
 8008bc8:	d075      	beq.n	8008cb6 <_strtod_l+0x286>
 8008bca:	2a2d      	cmp	r2, #45	; 0x2d
 8008bcc:	d07b      	beq.n	8008cc6 <_strtod_l+0x296>
 8008bce:	f04f 0c00 	mov.w	ip, #0
 8008bd2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008bd6:	2909      	cmp	r1, #9
 8008bd8:	f240 8082 	bls.w	8008ce0 <_strtod_l+0x2b0>
 8008bdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008be0:	2600      	movs	r6, #0
 8008be2:	e09d      	b.n	8008d20 <_strtod_l+0x2f0>
 8008be4:	2300      	movs	r3, #0
 8008be6:	e7c4      	b.n	8008b72 <_strtod_l+0x142>
 8008be8:	2f08      	cmp	r7, #8
 8008bea:	bfd8      	it	le
 8008bec:	9907      	ldrle	r1, [sp, #28]
 8008bee:	f100 0001 	add.w	r0, r0, #1
 8008bf2:	bfda      	itte	le
 8008bf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bf8:	9307      	strle	r3, [sp, #28]
 8008bfa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008bfe:	3701      	adds	r7, #1
 8008c00:	9017      	str	r0, [sp, #92]	; 0x5c
 8008c02:	e7bf      	b.n	8008b84 <_strtod_l+0x154>
 8008c04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c06:	195a      	adds	r2, r3, r5
 8008c08:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c0a:	5d5a      	ldrb	r2, [r3, r5]
 8008c0c:	2f00      	cmp	r7, #0
 8008c0e:	d037      	beq.n	8008c80 <_strtod_l+0x250>
 8008c10:	9005      	str	r0, [sp, #20]
 8008c12:	463d      	mov	r5, r7
 8008c14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008c18:	2b09      	cmp	r3, #9
 8008c1a:	d912      	bls.n	8008c42 <_strtod_l+0x212>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e7c2      	b.n	8008ba6 <_strtod_l+0x176>
 8008c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c26:	785a      	ldrb	r2, [r3, #1]
 8008c28:	3001      	adds	r0, #1
 8008c2a:	2a30      	cmp	r2, #48	; 0x30
 8008c2c:	d0f8      	beq.n	8008c20 <_strtod_l+0x1f0>
 8008c2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008c32:	2b08      	cmp	r3, #8
 8008c34:	f200 84d9 	bhi.w	80095ea <_strtod_l+0xbba>
 8008c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c3a:	9005      	str	r0, [sp, #20]
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	9308      	str	r3, [sp, #32]
 8008c40:	4605      	mov	r5, r0
 8008c42:	3a30      	subs	r2, #48	; 0x30
 8008c44:	f100 0301 	add.w	r3, r0, #1
 8008c48:	d014      	beq.n	8008c74 <_strtod_l+0x244>
 8008c4a:	9905      	ldr	r1, [sp, #20]
 8008c4c:	4419      	add	r1, r3
 8008c4e:	9105      	str	r1, [sp, #20]
 8008c50:	462b      	mov	r3, r5
 8008c52:	eb00 0e05 	add.w	lr, r0, r5
 8008c56:	210a      	movs	r1, #10
 8008c58:	4573      	cmp	r3, lr
 8008c5a:	d113      	bne.n	8008c84 <_strtod_l+0x254>
 8008c5c:	182b      	adds	r3, r5, r0
 8008c5e:	2b08      	cmp	r3, #8
 8008c60:	f105 0501 	add.w	r5, r5, #1
 8008c64:	4405      	add	r5, r0
 8008c66:	dc1c      	bgt.n	8008ca2 <_strtod_l+0x272>
 8008c68:	9907      	ldr	r1, [sp, #28]
 8008c6a:	230a      	movs	r3, #10
 8008c6c:	fb03 2301 	mla	r3, r3, r1, r2
 8008c70:	9307      	str	r3, [sp, #28]
 8008c72:	2300      	movs	r3, #0
 8008c74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c76:	1c51      	adds	r1, r2, #1
 8008c78:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c7a:	7852      	ldrb	r2, [r2, #1]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	e7c9      	b.n	8008c14 <_strtod_l+0x1e4>
 8008c80:	4638      	mov	r0, r7
 8008c82:	e7d2      	b.n	8008c2a <_strtod_l+0x1fa>
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	dc04      	bgt.n	8008c92 <_strtod_l+0x262>
 8008c88:	9e07      	ldr	r6, [sp, #28]
 8008c8a:	434e      	muls	r6, r1
 8008c8c:	9607      	str	r6, [sp, #28]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	e7e2      	b.n	8008c58 <_strtod_l+0x228>
 8008c92:	f103 0c01 	add.w	ip, r3, #1
 8008c96:	f1bc 0f10 	cmp.w	ip, #16
 8008c9a:	bfd8      	it	le
 8008c9c:	fb01 f909 	mulle.w	r9, r1, r9
 8008ca0:	e7f5      	b.n	8008c8e <_strtod_l+0x25e>
 8008ca2:	2d10      	cmp	r5, #16
 8008ca4:	bfdc      	itt	le
 8008ca6:	230a      	movle	r3, #10
 8008ca8:	fb03 2909 	mlale	r9, r3, r9, r2
 8008cac:	e7e1      	b.n	8008c72 <_strtod_l+0x242>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	9305      	str	r3, [sp, #20]
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e77c      	b.n	8008bb0 <_strtod_l+0x180>
 8008cb6:	f04f 0c00 	mov.w	ip, #0
 8008cba:	f108 0202 	add.w	r2, r8, #2
 8008cbe:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cc0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008cc4:	e785      	b.n	8008bd2 <_strtod_l+0x1a2>
 8008cc6:	f04f 0c01 	mov.w	ip, #1
 8008cca:	e7f6      	b.n	8008cba <_strtod_l+0x28a>
 8008ccc:	0800d070 	.word	0x0800d070
 8008cd0:	0800cfa8 	.word	0x0800cfa8
 8008cd4:	7ff00000 	.word	0x7ff00000
 8008cd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cda:	1c51      	adds	r1, r2, #1
 8008cdc:	9117      	str	r1, [sp, #92]	; 0x5c
 8008cde:	7852      	ldrb	r2, [r2, #1]
 8008ce0:	2a30      	cmp	r2, #48	; 0x30
 8008ce2:	d0f9      	beq.n	8008cd8 <_strtod_l+0x2a8>
 8008ce4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ce8:	2908      	cmp	r1, #8
 8008cea:	f63f af79 	bhi.w	8008be0 <_strtod_l+0x1b0>
 8008cee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008cf2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cf4:	9206      	str	r2, [sp, #24]
 8008cf6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cf8:	1c51      	adds	r1, r2, #1
 8008cfa:	9117      	str	r1, [sp, #92]	; 0x5c
 8008cfc:	7852      	ldrb	r2, [r2, #1]
 8008cfe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008d02:	2e09      	cmp	r6, #9
 8008d04:	d937      	bls.n	8008d76 <_strtod_l+0x346>
 8008d06:	9e06      	ldr	r6, [sp, #24]
 8008d08:	1b89      	subs	r1, r1, r6
 8008d0a:	2908      	cmp	r1, #8
 8008d0c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008d10:	dc02      	bgt.n	8008d18 <_strtod_l+0x2e8>
 8008d12:	4576      	cmp	r6, lr
 8008d14:	bfa8      	it	ge
 8008d16:	4676      	movge	r6, lr
 8008d18:	f1bc 0f00 	cmp.w	ip, #0
 8008d1c:	d000      	beq.n	8008d20 <_strtod_l+0x2f0>
 8008d1e:	4276      	negs	r6, r6
 8008d20:	2d00      	cmp	r5, #0
 8008d22:	d14d      	bne.n	8008dc0 <_strtod_l+0x390>
 8008d24:	9904      	ldr	r1, [sp, #16]
 8008d26:	4301      	orrs	r1, r0
 8008d28:	f47f aec6 	bne.w	8008ab8 <_strtod_l+0x88>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f47f aee1 	bne.w	8008af4 <_strtod_l+0xc4>
 8008d32:	2a69      	cmp	r2, #105	; 0x69
 8008d34:	d027      	beq.n	8008d86 <_strtod_l+0x356>
 8008d36:	dc24      	bgt.n	8008d82 <_strtod_l+0x352>
 8008d38:	2a49      	cmp	r2, #73	; 0x49
 8008d3a:	d024      	beq.n	8008d86 <_strtod_l+0x356>
 8008d3c:	2a4e      	cmp	r2, #78	; 0x4e
 8008d3e:	f47f aed9 	bne.w	8008af4 <_strtod_l+0xc4>
 8008d42:	499f      	ldr	r1, [pc, #636]	; (8008fc0 <_strtod_l+0x590>)
 8008d44:	a817      	add	r0, sp, #92	; 0x5c
 8008d46:	f001 f87f 	bl	8009e48 <__match>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	f43f aed2 	beq.w	8008af4 <_strtod_l+0xc4>
 8008d50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b28      	cmp	r3, #40	; 0x28
 8008d56:	d12d      	bne.n	8008db4 <_strtod_l+0x384>
 8008d58:	499a      	ldr	r1, [pc, #616]	; (8008fc4 <_strtod_l+0x594>)
 8008d5a:	aa1a      	add	r2, sp, #104	; 0x68
 8008d5c:	a817      	add	r0, sp, #92	; 0x5c
 8008d5e:	f001 f887 	bl	8009e70 <__hexnan>
 8008d62:	2805      	cmp	r0, #5
 8008d64:	d126      	bne.n	8008db4 <_strtod_l+0x384>
 8008d66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008d6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008d70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008d74:	e6a0      	b.n	8008ab8 <_strtod_l+0x88>
 8008d76:	210a      	movs	r1, #10
 8008d78:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008d7c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008d80:	e7b9      	b.n	8008cf6 <_strtod_l+0x2c6>
 8008d82:	2a6e      	cmp	r2, #110	; 0x6e
 8008d84:	e7db      	b.n	8008d3e <_strtod_l+0x30e>
 8008d86:	4990      	ldr	r1, [pc, #576]	; (8008fc8 <_strtod_l+0x598>)
 8008d88:	a817      	add	r0, sp, #92	; 0x5c
 8008d8a:	f001 f85d 	bl	8009e48 <__match>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f43f aeb0 	beq.w	8008af4 <_strtod_l+0xc4>
 8008d94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d96:	498d      	ldr	r1, [pc, #564]	; (8008fcc <_strtod_l+0x59c>)
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	a817      	add	r0, sp, #92	; 0x5c
 8008d9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d9e:	f001 f853 	bl	8009e48 <__match>
 8008da2:	b910      	cbnz	r0, 8008daa <_strtod_l+0x37a>
 8008da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008da6:	3301      	adds	r3, #1
 8008da8:	9317      	str	r3, [sp, #92]	; 0x5c
 8008daa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008fdc <_strtod_l+0x5ac>
 8008dae:	f04f 0a00 	mov.w	sl, #0
 8008db2:	e681      	b.n	8008ab8 <_strtod_l+0x88>
 8008db4:	4886      	ldr	r0, [pc, #536]	; (8008fd0 <_strtod_l+0x5a0>)
 8008db6:	f002 f827 	bl	800ae08 <nan>
 8008dba:	ec5b ab10 	vmov	sl, fp, d0
 8008dbe:	e67b      	b.n	8008ab8 <_strtod_l+0x88>
 8008dc0:	9b05      	ldr	r3, [sp, #20]
 8008dc2:	9807      	ldr	r0, [sp, #28]
 8008dc4:	1af3      	subs	r3, r6, r3
 8008dc6:	2f00      	cmp	r7, #0
 8008dc8:	bf08      	it	eq
 8008dca:	462f      	moveq	r7, r5
 8008dcc:	2d10      	cmp	r5, #16
 8008dce:	9306      	str	r3, [sp, #24]
 8008dd0:	46a8      	mov	r8, r5
 8008dd2:	bfa8      	it	ge
 8008dd4:	f04f 0810 	movge.w	r8, #16
 8008dd8:	f7f7 fbb4 	bl	8000544 <__aeabi_ui2d>
 8008ddc:	2d09      	cmp	r5, #9
 8008dde:	4682      	mov	sl, r0
 8008de0:	468b      	mov	fp, r1
 8008de2:	dd13      	ble.n	8008e0c <_strtod_l+0x3dc>
 8008de4:	4b7b      	ldr	r3, [pc, #492]	; (8008fd4 <_strtod_l+0x5a4>)
 8008de6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008dea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008dee:	f7f7 fc23 	bl	8000638 <__aeabi_dmul>
 8008df2:	4682      	mov	sl, r0
 8008df4:	4648      	mov	r0, r9
 8008df6:	468b      	mov	fp, r1
 8008df8:	f7f7 fba4 	bl	8000544 <__aeabi_ui2d>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4650      	mov	r0, sl
 8008e02:	4659      	mov	r1, fp
 8008e04:	f7f7 fa62 	bl	80002cc <__adddf3>
 8008e08:	4682      	mov	sl, r0
 8008e0a:	468b      	mov	fp, r1
 8008e0c:	2d0f      	cmp	r5, #15
 8008e0e:	dc38      	bgt.n	8008e82 <_strtod_l+0x452>
 8008e10:	9b06      	ldr	r3, [sp, #24]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f43f ae50 	beq.w	8008ab8 <_strtod_l+0x88>
 8008e18:	dd24      	ble.n	8008e64 <_strtod_l+0x434>
 8008e1a:	2b16      	cmp	r3, #22
 8008e1c:	dc0b      	bgt.n	8008e36 <_strtod_l+0x406>
 8008e1e:	496d      	ldr	r1, [pc, #436]	; (8008fd4 <_strtod_l+0x5a4>)
 8008e20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e28:	4652      	mov	r2, sl
 8008e2a:	465b      	mov	r3, fp
 8008e2c:	f7f7 fc04 	bl	8000638 <__aeabi_dmul>
 8008e30:	4682      	mov	sl, r0
 8008e32:	468b      	mov	fp, r1
 8008e34:	e640      	b.n	8008ab8 <_strtod_l+0x88>
 8008e36:	9a06      	ldr	r2, [sp, #24]
 8008e38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	db20      	blt.n	8008e82 <_strtod_l+0x452>
 8008e40:	4c64      	ldr	r4, [pc, #400]	; (8008fd4 <_strtod_l+0x5a4>)
 8008e42:	f1c5 050f 	rsb	r5, r5, #15
 8008e46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e4a:	4652      	mov	r2, sl
 8008e4c:	465b      	mov	r3, fp
 8008e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e52:	f7f7 fbf1 	bl	8000638 <__aeabi_dmul>
 8008e56:	9b06      	ldr	r3, [sp, #24]
 8008e58:	1b5d      	subs	r5, r3, r5
 8008e5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e62:	e7e3      	b.n	8008e2c <_strtod_l+0x3fc>
 8008e64:	9b06      	ldr	r3, [sp, #24]
 8008e66:	3316      	adds	r3, #22
 8008e68:	db0b      	blt.n	8008e82 <_strtod_l+0x452>
 8008e6a:	9b05      	ldr	r3, [sp, #20]
 8008e6c:	1b9e      	subs	r6, r3, r6
 8008e6e:	4b59      	ldr	r3, [pc, #356]	; (8008fd4 <_strtod_l+0x5a4>)
 8008e70:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008e74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e78:	4650      	mov	r0, sl
 8008e7a:	4659      	mov	r1, fp
 8008e7c:	f7f7 fd06 	bl	800088c <__aeabi_ddiv>
 8008e80:	e7d6      	b.n	8008e30 <_strtod_l+0x400>
 8008e82:	9b06      	ldr	r3, [sp, #24]
 8008e84:	eba5 0808 	sub.w	r8, r5, r8
 8008e88:	4498      	add	r8, r3
 8008e8a:	f1b8 0f00 	cmp.w	r8, #0
 8008e8e:	dd74      	ble.n	8008f7a <_strtod_l+0x54a>
 8008e90:	f018 030f 	ands.w	r3, r8, #15
 8008e94:	d00a      	beq.n	8008eac <_strtod_l+0x47c>
 8008e96:	494f      	ldr	r1, [pc, #316]	; (8008fd4 <_strtod_l+0x5a4>)
 8008e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e9c:	4652      	mov	r2, sl
 8008e9e:	465b      	mov	r3, fp
 8008ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea4:	f7f7 fbc8 	bl	8000638 <__aeabi_dmul>
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	468b      	mov	fp, r1
 8008eac:	f038 080f 	bics.w	r8, r8, #15
 8008eb0:	d04f      	beq.n	8008f52 <_strtod_l+0x522>
 8008eb2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008eb6:	dd22      	ble.n	8008efe <_strtod_l+0x4ce>
 8008eb8:	2500      	movs	r5, #0
 8008eba:	462e      	mov	r6, r5
 8008ebc:	9507      	str	r5, [sp, #28]
 8008ebe:	9505      	str	r5, [sp, #20]
 8008ec0:	2322      	movs	r3, #34	; 0x22
 8008ec2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008fdc <_strtod_l+0x5ac>
 8008ec6:	6023      	str	r3, [r4, #0]
 8008ec8:	f04f 0a00 	mov.w	sl, #0
 8008ecc:	9b07      	ldr	r3, [sp, #28]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f43f adf2 	beq.w	8008ab8 <_strtod_l+0x88>
 8008ed4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f001 f8b8 	bl	800a04c <_Bfree>
 8008edc:	9905      	ldr	r1, [sp, #20]
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f001 f8b4 	bl	800a04c <_Bfree>
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f001 f8b0 	bl	800a04c <_Bfree>
 8008eec:	9907      	ldr	r1, [sp, #28]
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f001 f8ac 	bl	800a04c <_Bfree>
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f001 f8a8 	bl	800a04c <_Bfree>
 8008efc:	e5dc      	b.n	8008ab8 <_strtod_l+0x88>
 8008efe:	4b36      	ldr	r3, [pc, #216]	; (8008fd8 <_strtod_l+0x5a8>)
 8008f00:	9304      	str	r3, [sp, #16]
 8008f02:	2300      	movs	r3, #0
 8008f04:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f08:	4650      	mov	r0, sl
 8008f0a:	4659      	mov	r1, fp
 8008f0c:	4699      	mov	r9, r3
 8008f0e:	f1b8 0f01 	cmp.w	r8, #1
 8008f12:	dc21      	bgt.n	8008f58 <_strtod_l+0x528>
 8008f14:	b10b      	cbz	r3, 8008f1a <_strtod_l+0x4ea>
 8008f16:	4682      	mov	sl, r0
 8008f18:	468b      	mov	fp, r1
 8008f1a:	4b2f      	ldr	r3, [pc, #188]	; (8008fd8 <_strtod_l+0x5a8>)
 8008f1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f20:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008f24:	4652      	mov	r2, sl
 8008f26:	465b      	mov	r3, fp
 8008f28:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008f2c:	f7f7 fb84 	bl	8000638 <__aeabi_dmul>
 8008f30:	4b2a      	ldr	r3, [pc, #168]	; (8008fdc <_strtod_l+0x5ac>)
 8008f32:	460a      	mov	r2, r1
 8008f34:	400b      	ands	r3, r1
 8008f36:	492a      	ldr	r1, [pc, #168]	; (8008fe0 <_strtod_l+0x5b0>)
 8008f38:	428b      	cmp	r3, r1
 8008f3a:	4682      	mov	sl, r0
 8008f3c:	d8bc      	bhi.n	8008eb8 <_strtod_l+0x488>
 8008f3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f42:	428b      	cmp	r3, r1
 8008f44:	bf86      	itte	hi
 8008f46:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008fe4 <_strtod_l+0x5b4>
 8008f4a:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f52:	2300      	movs	r3, #0
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	e084      	b.n	8009062 <_strtod_l+0x632>
 8008f58:	f018 0f01 	tst.w	r8, #1
 8008f5c:	d005      	beq.n	8008f6a <_strtod_l+0x53a>
 8008f5e:	9b04      	ldr	r3, [sp, #16]
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	f7f7 fb68 	bl	8000638 <__aeabi_dmul>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	9a04      	ldr	r2, [sp, #16]
 8008f6c:	3208      	adds	r2, #8
 8008f6e:	f109 0901 	add.w	r9, r9, #1
 8008f72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f76:	9204      	str	r2, [sp, #16]
 8008f78:	e7c9      	b.n	8008f0e <_strtod_l+0x4de>
 8008f7a:	d0ea      	beq.n	8008f52 <_strtod_l+0x522>
 8008f7c:	f1c8 0800 	rsb	r8, r8, #0
 8008f80:	f018 020f 	ands.w	r2, r8, #15
 8008f84:	d00a      	beq.n	8008f9c <_strtod_l+0x56c>
 8008f86:	4b13      	ldr	r3, [pc, #76]	; (8008fd4 <_strtod_l+0x5a4>)
 8008f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f8c:	4650      	mov	r0, sl
 8008f8e:	4659      	mov	r1, fp
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	f7f7 fc7a 	bl	800088c <__aeabi_ddiv>
 8008f98:	4682      	mov	sl, r0
 8008f9a:	468b      	mov	fp, r1
 8008f9c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008fa0:	d0d7      	beq.n	8008f52 <_strtod_l+0x522>
 8008fa2:	f1b8 0f1f 	cmp.w	r8, #31
 8008fa6:	dd1f      	ble.n	8008fe8 <_strtod_l+0x5b8>
 8008fa8:	2500      	movs	r5, #0
 8008faa:	462e      	mov	r6, r5
 8008fac:	9507      	str	r5, [sp, #28]
 8008fae:	9505      	str	r5, [sp, #20]
 8008fb0:	2322      	movs	r3, #34	; 0x22
 8008fb2:	f04f 0a00 	mov.w	sl, #0
 8008fb6:	f04f 0b00 	mov.w	fp, #0
 8008fba:	6023      	str	r3, [r4, #0]
 8008fbc:	e786      	b.n	8008ecc <_strtod_l+0x49c>
 8008fbe:	bf00      	nop
 8008fc0:	0800cfa3 	.word	0x0800cfa3
 8008fc4:	0800cfbc 	.word	0x0800cfbc
 8008fc8:	0800cfa0 	.word	0x0800cfa0
 8008fcc:	0800d356 	.word	0x0800d356
 8008fd0:	0800d251 	.word	0x0800d251
 8008fd4:	0800d120 	.word	0x0800d120
 8008fd8:	0800d0f8 	.word	0x0800d0f8
 8008fdc:	7ff00000 	.word	0x7ff00000
 8008fe0:	7ca00000 	.word	0x7ca00000
 8008fe4:	7fefffff 	.word	0x7fefffff
 8008fe8:	f018 0310 	ands.w	r3, r8, #16
 8008fec:	bf18      	it	ne
 8008fee:	236a      	movne	r3, #106	; 0x6a
 8008ff0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80093a0 <_strtod_l+0x970>
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	4650      	mov	r0, sl
 8008ff8:	4659      	mov	r1, fp
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f018 0f01 	tst.w	r8, #1
 8009000:	d004      	beq.n	800900c <_strtod_l+0x5dc>
 8009002:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009006:	f7f7 fb17 	bl	8000638 <__aeabi_dmul>
 800900a:	2301      	movs	r3, #1
 800900c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009010:	f109 0908 	add.w	r9, r9, #8
 8009014:	d1f2      	bne.n	8008ffc <_strtod_l+0x5cc>
 8009016:	b10b      	cbz	r3, 800901c <_strtod_l+0x5ec>
 8009018:	4682      	mov	sl, r0
 800901a:	468b      	mov	fp, r1
 800901c:	9b04      	ldr	r3, [sp, #16]
 800901e:	b1c3      	cbz	r3, 8009052 <_strtod_l+0x622>
 8009020:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009024:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009028:	2b00      	cmp	r3, #0
 800902a:	4659      	mov	r1, fp
 800902c:	dd11      	ble.n	8009052 <_strtod_l+0x622>
 800902e:	2b1f      	cmp	r3, #31
 8009030:	f340 8124 	ble.w	800927c <_strtod_l+0x84c>
 8009034:	2b34      	cmp	r3, #52	; 0x34
 8009036:	bfde      	ittt	le
 8009038:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800903c:	f04f 33ff 	movle.w	r3, #4294967295
 8009040:	fa03 f202 	lslle.w	r2, r3, r2
 8009044:	f04f 0a00 	mov.w	sl, #0
 8009048:	bfcc      	ite	gt
 800904a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800904e:	ea02 0b01 	andle.w	fp, r2, r1
 8009052:	2200      	movs	r2, #0
 8009054:	2300      	movs	r3, #0
 8009056:	4650      	mov	r0, sl
 8009058:	4659      	mov	r1, fp
 800905a:	f7f7 fd55 	bl	8000b08 <__aeabi_dcmpeq>
 800905e:	2800      	cmp	r0, #0
 8009060:	d1a2      	bne.n	8008fa8 <_strtod_l+0x578>
 8009062:	9b07      	ldr	r3, [sp, #28]
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	9908      	ldr	r1, [sp, #32]
 8009068:	462b      	mov	r3, r5
 800906a:	463a      	mov	r2, r7
 800906c:	4620      	mov	r0, r4
 800906e:	f001 f855 	bl	800a11c <__s2b>
 8009072:	9007      	str	r0, [sp, #28]
 8009074:	2800      	cmp	r0, #0
 8009076:	f43f af1f 	beq.w	8008eb8 <_strtod_l+0x488>
 800907a:	9b05      	ldr	r3, [sp, #20]
 800907c:	1b9e      	subs	r6, r3, r6
 800907e:	9b06      	ldr	r3, [sp, #24]
 8009080:	2b00      	cmp	r3, #0
 8009082:	bfb4      	ite	lt
 8009084:	4633      	movlt	r3, r6
 8009086:	2300      	movge	r3, #0
 8009088:	930c      	str	r3, [sp, #48]	; 0x30
 800908a:	9b06      	ldr	r3, [sp, #24]
 800908c:	2500      	movs	r5, #0
 800908e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009092:	9312      	str	r3, [sp, #72]	; 0x48
 8009094:	462e      	mov	r6, r5
 8009096:	9b07      	ldr	r3, [sp, #28]
 8009098:	4620      	mov	r0, r4
 800909a:	6859      	ldr	r1, [r3, #4]
 800909c:	f000 ff96 	bl	8009fcc <_Balloc>
 80090a0:	9005      	str	r0, [sp, #20]
 80090a2:	2800      	cmp	r0, #0
 80090a4:	f43f af0c 	beq.w	8008ec0 <_strtod_l+0x490>
 80090a8:	9b07      	ldr	r3, [sp, #28]
 80090aa:	691a      	ldr	r2, [r3, #16]
 80090ac:	3202      	adds	r2, #2
 80090ae:	f103 010c 	add.w	r1, r3, #12
 80090b2:	0092      	lsls	r2, r2, #2
 80090b4:	300c      	adds	r0, #12
 80090b6:	f7ff fc77 	bl	80089a8 <memcpy>
 80090ba:	ec4b ab10 	vmov	d0, sl, fp
 80090be:	aa1a      	add	r2, sp, #104	; 0x68
 80090c0:	a919      	add	r1, sp, #100	; 0x64
 80090c2:	4620      	mov	r0, r4
 80090c4:	f001 fb70 	bl	800a7a8 <__d2b>
 80090c8:	ec4b ab18 	vmov	d8, sl, fp
 80090cc:	9018      	str	r0, [sp, #96]	; 0x60
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f43f aef6 	beq.w	8008ec0 <_strtod_l+0x490>
 80090d4:	2101      	movs	r1, #1
 80090d6:	4620      	mov	r0, r4
 80090d8:	f001 f8ba 	bl	800a250 <__i2b>
 80090dc:	4606      	mov	r6, r0
 80090de:	2800      	cmp	r0, #0
 80090e0:	f43f aeee 	beq.w	8008ec0 <_strtod_l+0x490>
 80090e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090e6:	9904      	ldr	r1, [sp, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	bfab      	itete	ge
 80090ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80090ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80090f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80090f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80090f6:	bfac      	ite	ge
 80090f8:	eb03 0902 	addge.w	r9, r3, r2
 80090fc:	1ad7      	sublt	r7, r2, r3
 80090fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009100:	eba3 0801 	sub.w	r8, r3, r1
 8009104:	4490      	add	r8, r2
 8009106:	4ba1      	ldr	r3, [pc, #644]	; (800938c <_strtod_l+0x95c>)
 8009108:	f108 38ff 	add.w	r8, r8, #4294967295
 800910c:	4598      	cmp	r8, r3
 800910e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009112:	f280 80c7 	bge.w	80092a4 <_strtod_l+0x874>
 8009116:	eba3 0308 	sub.w	r3, r3, r8
 800911a:	2b1f      	cmp	r3, #31
 800911c:	eba2 0203 	sub.w	r2, r2, r3
 8009120:	f04f 0101 	mov.w	r1, #1
 8009124:	f300 80b1 	bgt.w	800928a <_strtod_l+0x85a>
 8009128:	fa01 f303 	lsl.w	r3, r1, r3
 800912c:	930d      	str	r3, [sp, #52]	; 0x34
 800912e:	2300      	movs	r3, #0
 8009130:	9308      	str	r3, [sp, #32]
 8009132:	eb09 0802 	add.w	r8, r9, r2
 8009136:	9b04      	ldr	r3, [sp, #16]
 8009138:	45c1      	cmp	r9, r8
 800913a:	4417      	add	r7, r2
 800913c:	441f      	add	r7, r3
 800913e:	464b      	mov	r3, r9
 8009140:	bfa8      	it	ge
 8009142:	4643      	movge	r3, r8
 8009144:	42bb      	cmp	r3, r7
 8009146:	bfa8      	it	ge
 8009148:	463b      	movge	r3, r7
 800914a:	2b00      	cmp	r3, #0
 800914c:	bfc2      	ittt	gt
 800914e:	eba8 0803 	subgt.w	r8, r8, r3
 8009152:	1aff      	subgt	r7, r7, r3
 8009154:	eba9 0903 	subgt.w	r9, r9, r3
 8009158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800915a:	2b00      	cmp	r3, #0
 800915c:	dd17      	ble.n	800918e <_strtod_l+0x75e>
 800915e:	4631      	mov	r1, r6
 8009160:	461a      	mov	r2, r3
 8009162:	4620      	mov	r0, r4
 8009164:	f001 f934 	bl	800a3d0 <__pow5mult>
 8009168:	4606      	mov	r6, r0
 800916a:	2800      	cmp	r0, #0
 800916c:	f43f aea8 	beq.w	8008ec0 <_strtod_l+0x490>
 8009170:	4601      	mov	r1, r0
 8009172:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009174:	4620      	mov	r0, r4
 8009176:	f001 f881 	bl	800a27c <__multiply>
 800917a:	900b      	str	r0, [sp, #44]	; 0x2c
 800917c:	2800      	cmp	r0, #0
 800917e:	f43f ae9f 	beq.w	8008ec0 <_strtod_l+0x490>
 8009182:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009184:	4620      	mov	r0, r4
 8009186:	f000 ff61 	bl	800a04c <_Bfree>
 800918a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800918c:	9318      	str	r3, [sp, #96]	; 0x60
 800918e:	f1b8 0f00 	cmp.w	r8, #0
 8009192:	f300 808c 	bgt.w	80092ae <_strtod_l+0x87e>
 8009196:	9b06      	ldr	r3, [sp, #24]
 8009198:	2b00      	cmp	r3, #0
 800919a:	dd08      	ble.n	80091ae <_strtod_l+0x77e>
 800919c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800919e:	9905      	ldr	r1, [sp, #20]
 80091a0:	4620      	mov	r0, r4
 80091a2:	f001 f915 	bl	800a3d0 <__pow5mult>
 80091a6:	9005      	str	r0, [sp, #20]
 80091a8:	2800      	cmp	r0, #0
 80091aa:	f43f ae89 	beq.w	8008ec0 <_strtod_l+0x490>
 80091ae:	2f00      	cmp	r7, #0
 80091b0:	dd08      	ble.n	80091c4 <_strtod_l+0x794>
 80091b2:	9905      	ldr	r1, [sp, #20]
 80091b4:	463a      	mov	r2, r7
 80091b6:	4620      	mov	r0, r4
 80091b8:	f001 f964 	bl	800a484 <__lshift>
 80091bc:	9005      	str	r0, [sp, #20]
 80091be:	2800      	cmp	r0, #0
 80091c0:	f43f ae7e 	beq.w	8008ec0 <_strtod_l+0x490>
 80091c4:	f1b9 0f00 	cmp.w	r9, #0
 80091c8:	dd08      	ble.n	80091dc <_strtod_l+0x7ac>
 80091ca:	4631      	mov	r1, r6
 80091cc:	464a      	mov	r2, r9
 80091ce:	4620      	mov	r0, r4
 80091d0:	f001 f958 	bl	800a484 <__lshift>
 80091d4:	4606      	mov	r6, r0
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f43f ae72 	beq.w	8008ec0 <_strtod_l+0x490>
 80091dc:	9a05      	ldr	r2, [sp, #20]
 80091de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091e0:	4620      	mov	r0, r4
 80091e2:	f001 f9db 	bl	800a59c <__mdiff>
 80091e6:	4605      	mov	r5, r0
 80091e8:	2800      	cmp	r0, #0
 80091ea:	f43f ae69 	beq.w	8008ec0 <_strtod_l+0x490>
 80091ee:	68c3      	ldr	r3, [r0, #12]
 80091f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80091f2:	2300      	movs	r3, #0
 80091f4:	60c3      	str	r3, [r0, #12]
 80091f6:	4631      	mov	r1, r6
 80091f8:	f001 f9b4 	bl	800a564 <__mcmp>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	da60      	bge.n	80092c2 <_strtod_l+0x892>
 8009200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009202:	ea53 030a 	orrs.w	r3, r3, sl
 8009206:	f040 8082 	bne.w	800930e <_strtod_l+0x8de>
 800920a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800920e:	2b00      	cmp	r3, #0
 8009210:	d17d      	bne.n	800930e <_strtod_l+0x8de>
 8009212:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009216:	0d1b      	lsrs	r3, r3, #20
 8009218:	051b      	lsls	r3, r3, #20
 800921a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800921e:	d976      	bls.n	800930e <_strtod_l+0x8de>
 8009220:	696b      	ldr	r3, [r5, #20]
 8009222:	b913      	cbnz	r3, 800922a <_strtod_l+0x7fa>
 8009224:	692b      	ldr	r3, [r5, #16]
 8009226:	2b01      	cmp	r3, #1
 8009228:	dd71      	ble.n	800930e <_strtod_l+0x8de>
 800922a:	4629      	mov	r1, r5
 800922c:	2201      	movs	r2, #1
 800922e:	4620      	mov	r0, r4
 8009230:	f001 f928 	bl	800a484 <__lshift>
 8009234:	4631      	mov	r1, r6
 8009236:	4605      	mov	r5, r0
 8009238:	f001 f994 	bl	800a564 <__mcmp>
 800923c:	2800      	cmp	r0, #0
 800923e:	dd66      	ble.n	800930e <_strtod_l+0x8de>
 8009240:	9904      	ldr	r1, [sp, #16]
 8009242:	4a53      	ldr	r2, [pc, #332]	; (8009390 <_strtod_l+0x960>)
 8009244:	465b      	mov	r3, fp
 8009246:	2900      	cmp	r1, #0
 8009248:	f000 8081 	beq.w	800934e <_strtod_l+0x91e>
 800924c:	ea02 010b 	and.w	r1, r2, fp
 8009250:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009254:	dc7b      	bgt.n	800934e <_strtod_l+0x91e>
 8009256:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800925a:	f77f aea9 	ble.w	8008fb0 <_strtod_l+0x580>
 800925e:	4b4d      	ldr	r3, [pc, #308]	; (8009394 <_strtod_l+0x964>)
 8009260:	4650      	mov	r0, sl
 8009262:	4659      	mov	r1, fp
 8009264:	2200      	movs	r2, #0
 8009266:	f7f7 f9e7 	bl	8000638 <__aeabi_dmul>
 800926a:	460b      	mov	r3, r1
 800926c:	4303      	orrs	r3, r0
 800926e:	bf08      	it	eq
 8009270:	2322      	moveq	r3, #34	; 0x22
 8009272:	4682      	mov	sl, r0
 8009274:	468b      	mov	fp, r1
 8009276:	bf08      	it	eq
 8009278:	6023      	streq	r3, [r4, #0]
 800927a:	e62b      	b.n	8008ed4 <_strtod_l+0x4a4>
 800927c:	f04f 32ff 	mov.w	r2, #4294967295
 8009280:	fa02 f303 	lsl.w	r3, r2, r3
 8009284:	ea03 0a0a 	and.w	sl, r3, sl
 8009288:	e6e3      	b.n	8009052 <_strtod_l+0x622>
 800928a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800928e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009292:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009296:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800929a:	fa01 f308 	lsl.w	r3, r1, r8
 800929e:	9308      	str	r3, [sp, #32]
 80092a0:	910d      	str	r1, [sp, #52]	; 0x34
 80092a2:	e746      	b.n	8009132 <_strtod_l+0x702>
 80092a4:	2300      	movs	r3, #0
 80092a6:	9308      	str	r3, [sp, #32]
 80092a8:	2301      	movs	r3, #1
 80092aa:	930d      	str	r3, [sp, #52]	; 0x34
 80092ac:	e741      	b.n	8009132 <_strtod_l+0x702>
 80092ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092b0:	4642      	mov	r2, r8
 80092b2:	4620      	mov	r0, r4
 80092b4:	f001 f8e6 	bl	800a484 <__lshift>
 80092b8:	9018      	str	r0, [sp, #96]	; 0x60
 80092ba:	2800      	cmp	r0, #0
 80092bc:	f47f af6b 	bne.w	8009196 <_strtod_l+0x766>
 80092c0:	e5fe      	b.n	8008ec0 <_strtod_l+0x490>
 80092c2:	465f      	mov	r7, fp
 80092c4:	d16e      	bne.n	80093a4 <_strtod_l+0x974>
 80092c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092cc:	b342      	cbz	r2, 8009320 <_strtod_l+0x8f0>
 80092ce:	4a32      	ldr	r2, [pc, #200]	; (8009398 <_strtod_l+0x968>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d128      	bne.n	8009326 <_strtod_l+0x8f6>
 80092d4:	9b04      	ldr	r3, [sp, #16]
 80092d6:	4651      	mov	r1, sl
 80092d8:	b1eb      	cbz	r3, 8009316 <_strtod_l+0x8e6>
 80092da:	4b2d      	ldr	r3, [pc, #180]	; (8009390 <_strtod_l+0x960>)
 80092dc:	403b      	ands	r3, r7
 80092de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80092e2:	f04f 32ff 	mov.w	r2, #4294967295
 80092e6:	d819      	bhi.n	800931c <_strtod_l+0x8ec>
 80092e8:	0d1b      	lsrs	r3, r3, #20
 80092ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092ee:	fa02 f303 	lsl.w	r3, r2, r3
 80092f2:	4299      	cmp	r1, r3
 80092f4:	d117      	bne.n	8009326 <_strtod_l+0x8f6>
 80092f6:	4b29      	ldr	r3, [pc, #164]	; (800939c <_strtod_l+0x96c>)
 80092f8:	429f      	cmp	r7, r3
 80092fa:	d102      	bne.n	8009302 <_strtod_l+0x8d2>
 80092fc:	3101      	adds	r1, #1
 80092fe:	f43f addf 	beq.w	8008ec0 <_strtod_l+0x490>
 8009302:	4b23      	ldr	r3, [pc, #140]	; (8009390 <_strtod_l+0x960>)
 8009304:	403b      	ands	r3, r7
 8009306:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800930a:	f04f 0a00 	mov.w	sl, #0
 800930e:	9b04      	ldr	r3, [sp, #16]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1a4      	bne.n	800925e <_strtod_l+0x82e>
 8009314:	e5de      	b.n	8008ed4 <_strtod_l+0x4a4>
 8009316:	f04f 33ff 	mov.w	r3, #4294967295
 800931a:	e7ea      	b.n	80092f2 <_strtod_l+0x8c2>
 800931c:	4613      	mov	r3, r2
 800931e:	e7e8      	b.n	80092f2 <_strtod_l+0x8c2>
 8009320:	ea53 030a 	orrs.w	r3, r3, sl
 8009324:	d08c      	beq.n	8009240 <_strtod_l+0x810>
 8009326:	9b08      	ldr	r3, [sp, #32]
 8009328:	b1db      	cbz	r3, 8009362 <_strtod_l+0x932>
 800932a:	423b      	tst	r3, r7
 800932c:	d0ef      	beq.n	800930e <_strtod_l+0x8de>
 800932e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009330:	9a04      	ldr	r2, [sp, #16]
 8009332:	4650      	mov	r0, sl
 8009334:	4659      	mov	r1, fp
 8009336:	b1c3      	cbz	r3, 800936a <_strtod_l+0x93a>
 8009338:	f7ff fb5b 	bl	80089f2 <sulp>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	ec51 0b18 	vmov	r0, r1, d8
 8009344:	f7f6 ffc2 	bl	80002cc <__adddf3>
 8009348:	4682      	mov	sl, r0
 800934a:	468b      	mov	fp, r1
 800934c:	e7df      	b.n	800930e <_strtod_l+0x8de>
 800934e:	4013      	ands	r3, r2
 8009350:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009354:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009358:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800935c:	f04f 3aff 	mov.w	sl, #4294967295
 8009360:	e7d5      	b.n	800930e <_strtod_l+0x8de>
 8009362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009364:	ea13 0f0a 	tst.w	r3, sl
 8009368:	e7e0      	b.n	800932c <_strtod_l+0x8fc>
 800936a:	f7ff fb42 	bl	80089f2 <sulp>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	ec51 0b18 	vmov	r0, r1, d8
 8009376:	f7f6 ffa7 	bl	80002c8 <__aeabi_dsub>
 800937a:	2200      	movs	r2, #0
 800937c:	2300      	movs	r3, #0
 800937e:	4682      	mov	sl, r0
 8009380:	468b      	mov	fp, r1
 8009382:	f7f7 fbc1 	bl	8000b08 <__aeabi_dcmpeq>
 8009386:	2800      	cmp	r0, #0
 8009388:	d0c1      	beq.n	800930e <_strtod_l+0x8de>
 800938a:	e611      	b.n	8008fb0 <_strtod_l+0x580>
 800938c:	fffffc02 	.word	0xfffffc02
 8009390:	7ff00000 	.word	0x7ff00000
 8009394:	39500000 	.word	0x39500000
 8009398:	000fffff 	.word	0x000fffff
 800939c:	7fefffff 	.word	0x7fefffff
 80093a0:	0800cfd0 	.word	0x0800cfd0
 80093a4:	4631      	mov	r1, r6
 80093a6:	4628      	mov	r0, r5
 80093a8:	f001 fa5a 	bl	800a860 <__ratio>
 80093ac:	ec59 8b10 	vmov	r8, r9, d0
 80093b0:	ee10 0a10 	vmov	r0, s0
 80093b4:	2200      	movs	r2, #0
 80093b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093ba:	4649      	mov	r1, r9
 80093bc:	f7f7 fbb8 	bl	8000b30 <__aeabi_dcmple>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d07a      	beq.n	80094ba <_strtod_l+0xa8a>
 80093c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d04a      	beq.n	8009460 <_strtod_l+0xa30>
 80093ca:	4b95      	ldr	r3, [pc, #596]	; (8009620 <_strtod_l+0xbf0>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009620 <_strtod_l+0xbf0>
 80093d6:	f04f 0800 	mov.w	r8, #0
 80093da:	4b92      	ldr	r3, [pc, #584]	; (8009624 <_strtod_l+0xbf4>)
 80093dc:	403b      	ands	r3, r7
 80093de:	930d      	str	r3, [sp, #52]	; 0x34
 80093e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093e2:	4b91      	ldr	r3, [pc, #580]	; (8009628 <_strtod_l+0xbf8>)
 80093e4:	429a      	cmp	r2, r3
 80093e6:	f040 80b0 	bne.w	800954a <_strtod_l+0xb1a>
 80093ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80093f2:	ec4b ab10 	vmov	d0, sl, fp
 80093f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093fa:	f001 f959 	bl	800a6b0 <__ulp>
 80093fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009402:	ec53 2b10 	vmov	r2, r3, d0
 8009406:	f7f7 f917 	bl	8000638 <__aeabi_dmul>
 800940a:	4652      	mov	r2, sl
 800940c:	465b      	mov	r3, fp
 800940e:	f7f6 ff5d 	bl	80002cc <__adddf3>
 8009412:	460b      	mov	r3, r1
 8009414:	4983      	ldr	r1, [pc, #524]	; (8009624 <_strtod_l+0xbf4>)
 8009416:	4a85      	ldr	r2, [pc, #532]	; (800962c <_strtod_l+0xbfc>)
 8009418:	4019      	ands	r1, r3
 800941a:	4291      	cmp	r1, r2
 800941c:	4682      	mov	sl, r0
 800941e:	d960      	bls.n	80094e2 <_strtod_l+0xab2>
 8009420:	ee18 3a90 	vmov	r3, s17
 8009424:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009428:	4293      	cmp	r3, r2
 800942a:	d104      	bne.n	8009436 <_strtod_l+0xa06>
 800942c:	ee18 3a10 	vmov	r3, s16
 8009430:	3301      	adds	r3, #1
 8009432:	f43f ad45 	beq.w	8008ec0 <_strtod_l+0x490>
 8009436:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009638 <_strtod_l+0xc08>
 800943a:	f04f 3aff 	mov.w	sl, #4294967295
 800943e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fe03 	bl	800a04c <_Bfree>
 8009446:	9905      	ldr	r1, [sp, #20]
 8009448:	4620      	mov	r0, r4
 800944a:	f000 fdff 	bl	800a04c <_Bfree>
 800944e:	4631      	mov	r1, r6
 8009450:	4620      	mov	r0, r4
 8009452:	f000 fdfb 	bl	800a04c <_Bfree>
 8009456:	4629      	mov	r1, r5
 8009458:	4620      	mov	r0, r4
 800945a:	f000 fdf7 	bl	800a04c <_Bfree>
 800945e:	e61a      	b.n	8009096 <_strtod_l+0x666>
 8009460:	f1ba 0f00 	cmp.w	sl, #0
 8009464:	d11b      	bne.n	800949e <_strtod_l+0xa6e>
 8009466:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800946a:	b9f3      	cbnz	r3, 80094aa <_strtod_l+0xa7a>
 800946c:	4b6c      	ldr	r3, [pc, #432]	; (8009620 <_strtod_l+0xbf0>)
 800946e:	2200      	movs	r2, #0
 8009470:	4640      	mov	r0, r8
 8009472:	4649      	mov	r1, r9
 8009474:	f7f7 fb52 	bl	8000b1c <__aeabi_dcmplt>
 8009478:	b9d0      	cbnz	r0, 80094b0 <_strtod_l+0xa80>
 800947a:	4640      	mov	r0, r8
 800947c:	4649      	mov	r1, r9
 800947e:	4b6c      	ldr	r3, [pc, #432]	; (8009630 <_strtod_l+0xc00>)
 8009480:	2200      	movs	r2, #0
 8009482:	f7f7 f8d9 	bl	8000638 <__aeabi_dmul>
 8009486:	4680      	mov	r8, r0
 8009488:	4689      	mov	r9, r1
 800948a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800948e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009492:	9315      	str	r3, [sp, #84]	; 0x54
 8009494:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009498:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800949c:	e79d      	b.n	80093da <_strtod_l+0x9aa>
 800949e:	f1ba 0f01 	cmp.w	sl, #1
 80094a2:	d102      	bne.n	80094aa <_strtod_l+0xa7a>
 80094a4:	2f00      	cmp	r7, #0
 80094a6:	f43f ad83 	beq.w	8008fb0 <_strtod_l+0x580>
 80094aa:	4b62      	ldr	r3, [pc, #392]	; (8009634 <_strtod_l+0xc04>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	e78e      	b.n	80093ce <_strtod_l+0x99e>
 80094b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009630 <_strtod_l+0xc00>
 80094b4:	f04f 0800 	mov.w	r8, #0
 80094b8:	e7e7      	b.n	800948a <_strtod_l+0xa5a>
 80094ba:	4b5d      	ldr	r3, [pc, #372]	; (8009630 <_strtod_l+0xc00>)
 80094bc:	4640      	mov	r0, r8
 80094be:	4649      	mov	r1, r9
 80094c0:	2200      	movs	r2, #0
 80094c2:	f7f7 f8b9 	bl	8000638 <__aeabi_dmul>
 80094c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c8:	4680      	mov	r8, r0
 80094ca:	4689      	mov	r9, r1
 80094cc:	b933      	cbnz	r3, 80094dc <_strtod_l+0xaac>
 80094ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094d2:	900e      	str	r0, [sp, #56]	; 0x38
 80094d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80094d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80094da:	e7dd      	b.n	8009498 <_strtod_l+0xa68>
 80094dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80094e0:	e7f9      	b.n	80094d6 <_strtod_l+0xaa6>
 80094e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1a8      	bne.n	800943e <_strtod_l+0xa0e>
 80094ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094f2:	0d1b      	lsrs	r3, r3, #20
 80094f4:	051b      	lsls	r3, r3, #20
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d1a1      	bne.n	800943e <_strtod_l+0xa0e>
 80094fa:	4640      	mov	r0, r8
 80094fc:	4649      	mov	r1, r9
 80094fe:	f7f7 fbe5 	bl	8000ccc <__aeabi_d2lz>
 8009502:	f7f7 f86b 	bl	80005dc <__aeabi_l2d>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4640      	mov	r0, r8
 800950c:	4649      	mov	r1, r9
 800950e:	f7f6 fedb 	bl	80002c8 <__aeabi_dsub>
 8009512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009518:	ea43 030a 	orr.w	r3, r3, sl
 800951c:	4313      	orrs	r3, r2
 800951e:	4680      	mov	r8, r0
 8009520:	4689      	mov	r9, r1
 8009522:	d055      	beq.n	80095d0 <_strtod_l+0xba0>
 8009524:	a336      	add	r3, pc, #216	; (adr r3, 8009600 <_strtod_l+0xbd0>)
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f7f7 faf7 	bl	8000b1c <__aeabi_dcmplt>
 800952e:	2800      	cmp	r0, #0
 8009530:	f47f acd0 	bne.w	8008ed4 <_strtod_l+0x4a4>
 8009534:	a334      	add	r3, pc, #208	; (adr r3, 8009608 <_strtod_l+0xbd8>)
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	4640      	mov	r0, r8
 800953c:	4649      	mov	r1, r9
 800953e:	f7f7 fb0b 	bl	8000b58 <__aeabi_dcmpgt>
 8009542:	2800      	cmp	r0, #0
 8009544:	f43f af7b 	beq.w	800943e <_strtod_l+0xa0e>
 8009548:	e4c4      	b.n	8008ed4 <_strtod_l+0x4a4>
 800954a:	9b04      	ldr	r3, [sp, #16]
 800954c:	b333      	cbz	r3, 800959c <_strtod_l+0xb6c>
 800954e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009550:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009554:	d822      	bhi.n	800959c <_strtod_l+0xb6c>
 8009556:	a32e      	add	r3, pc, #184	; (adr r3, 8009610 <_strtod_l+0xbe0>)
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	4640      	mov	r0, r8
 800955e:	4649      	mov	r1, r9
 8009560:	f7f7 fae6 	bl	8000b30 <__aeabi_dcmple>
 8009564:	b1a0      	cbz	r0, 8009590 <_strtod_l+0xb60>
 8009566:	4649      	mov	r1, r9
 8009568:	4640      	mov	r0, r8
 800956a:	f7f7 fb27 	bl	8000bbc <__aeabi_d2uiz>
 800956e:	2801      	cmp	r0, #1
 8009570:	bf38      	it	cc
 8009572:	2001      	movcc	r0, #1
 8009574:	f7f6 ffe6 	bl	8000544 <__aeabi_ui2d>
 8009578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800957a:	4680      	mov	r8, r0
 800957c:	4689      	mov	r9, r1
 800957e:	bb23      	cbnz	r3, 80095ca <_strtod_l+0xb9a>
 8009580:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009584:	9010      	str	r0, [sp, #64]	; 0x40
 8009586:	9311      	str	r3, [sp, #68]	; 0x44
 8009588:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800958c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009594:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009598:	1a9b      	subs	r3, r3, r2
 800959a:	9309      	str	r3, [sp, #36]	; 0x24
 800959c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095a0:	eeb0 0a48 	vmov.f32	s0, s16
 80095a4:	eef0 0a68 	vmov.f32	s1, s17
 80095a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095ac:	f001 f880 	bl	800a6b0 <__ulp>
 80095b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095b4:	ec53 2b10 	vmov	r2, r3, d0
 80095b8:	f7f7 f83e 	bl	8000638 <__aeabi_dmul>
 80095bc:	ec53 2b18 	vmov	r2, r3, d8
 80095c0:	f7f6 fe84 	bl	80002cc <__adddf3>
 80095c4:	4682      	mov	sl, r0
 80095c6:	468b      	mov	fp, r1
 80095c8:	e78d      	b.n	80094e6 <_strtod_l+0xab6>
 80095ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80095ce:	e7db      	b.n	8009588 <_strtod_l+0xb58>
 80095d0:	a311      	add	r3, pc, #68	; (adr r3, 8009618 <_strtod_l+0xbe8>)
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	f7f7 faa1 	bl	8000b1c <__aeabi_dcmplt>
 80095da:	e7b2      	b.n	8009542 <_strtod_l+0xb12>
 80095dc:	2300      	movs	r3, #0
 80095de:	930a      	str	r3, [sp, #40]	; 0x28
 80095e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	f7ff ba6b 	b.w	8008ac0 <_strtod_l+0x90>
 80095ea:	2a65      	cmp	r2, #101	; 0x65
 80095ec:	f43f ab5f 	beq.w	8008cae <_strtod_l+0x27e>
 80095f0:	2a45      	cmp	r2, #69	; 0x45
 80095f2:	f43f ab5c 	beq.w	8008cae <_strtod_l+0x27e>
 80095f6:	2301      	movs	r3, #1
 80095f8:	f7ff bb94 	b.w	8008d24 <_strtod_l+0x2f4>
 80095fc:	f3af 8000 	nop.w
 8009600:	94a03595 	.word	0x94a03595
 8009604:	3fdfffff 	.word	0x3fdfffff
 8009608:	35afe535 	.word	0x35afe535
 800960c:	3fe00000 	.word	0x3fe00000
 8009610:	ffc00000 	.word	0xffc00000
 8009614:	41dfffff 	.word	0x41dfffff
 8009618:	94a03595 	.word	0x94a03595
 800961c:	3fcfffff 	.word	0x3fcfffff
 8009620:	3ff00000 	.word	0x3ff00000
 8009624:	7ff00000 	.word	0x7ff00000
 8009628:	7fe00000 	.word	0x7fe00000
 800962c:	7c9fffff 	.word	0x7c9fffff
 8009630:	3fe00000 	.word	0x3fe00000
 8009634:	bff00000 	.word	0xbff00000
 8009638:	7fefffff 	.word	0x7fefffff

0800963c <strtod>:
 800963c:	460a      	mov	r2, r1
 800963e:	4601      	mov	r1, r0
 8009640:	4802      	ldr	r0, [pc, #8]	; (800964c <strtod+0x10>)
 8009642:	4b03      	ldr	r3, [pc, #12]	; (8009650 <strtod+0x14>)
 8009644:	6800      	ldr	r0, [r0, #0]
 8009646:	f7ff b9f3 	b.w	8008a30 <_strtod_l>
 800964a:	bf00      	nop
 800964c:	2000001c 	.word	0x2000001c
 8009650:	20000084 	.word	0x20000084

08009654 <print_e>:
 8009654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009656:	b087      	sub	sp, #28
 8009658:	ec43 2b10 	vmov	d0, r2, r3
 800965c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800965e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8009662:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009664:	ab04      	add	r3, sp, #16
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	ab03      	add	r3, sp, #12
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	1c62      	adds	r2, r4, #1
 800966e:	ab05      	add	r3, sp, #20
 8009670:	460f      	mov	r7, r1
 8009672:	2102      	movs	r1, #2
 8009674:	f001 fcb4 	bl	800afe0 <_dtoa_r>
 8009678:	9a05      	ldr	r2, [sp, #20]
 800967a:	f242 730f 	movw	r3, #9999	; 0x270f
 800967e:	429a      	cmp	r2, r3
 8009680:	d105      	bne.n	800968e <print_e+0x3a>
 8009682:	4601      	mov	r1, r0
 8009684:	4638      	mov	r0, r7
 8009686:	f001 fbd7 	bl	800ae38 <strcpy>
 800968a:	b007      	add	sp, #28
 800968c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968e:	463b      	mov	r3, r7
 8009690:	7801      	ldrb	r1, [r0, #0]
 8009692:	f803 1b01 	strb.w	r1, [r3], #1
 8009696:	2c00      	cmp	r4, #0
 8009698:	bfc8      	it	gt
 800969a:	2501      	movgt	r5, #1
 800969c:	212e      	movs	r1, #46	; 0x2e
 800969e:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 80096a2:	b10f      	cbz	r7, 80096a8 <print_e+0x54>
 80096a4:	2c00      	cmp	r4, #0
 80096a6:	dc37      	bgt.n	8009718 <print_e+0xc4>
 80096a8:	2e67      	cmp	r6, #103	; 0x67
 80096aa:	d046      	beq.n	800973a <print_e+0xe6>
 80096ac:	2e47      	cmp	r6, #71	; 0x47
 80096ae:	d046      	beq.n	800973e <print_e+0xea>
 80096b0:	212e      	movs	r1, #46	; 0x2e
 80096b2:	2030      	movs	r0, #48	; 0x30
 80096b4:	2c00      	cmp	r4, #0
 80096b6:	dc38      	bgt.n	800972a <print_e+0xd6>
 80096b8:	1e51      	subs	r1, r2, #1
 80096ba:	2900      	cmp	r1, #0
 80096bc:	bfb8      	it	lt
 80096be:	f1c2 0201 	rsblt	r2, r2, #1
 80096c2:	4618      	mov	r0, r3
 80096c4:	9105      	str	r1, [sp, #20]
 80096c6:	bfac      	ite	ge
 80096c8:	222b      	movge	r2, #43	; 0x2b
 80096ca:	9205      	strlt	r2, [sp, #20]
 80096cc:	f800 6b02 	strb.w	r6, [r0], #2
 80096d0:	bfa8      	it	ge
 80096d2:	705a      	strbge	r2, [r3, #1]
 80096d4:	9a05      	ldr	r2, [sp, #20]
 80096d6:	bfbc      	itt	lt
 80096d8:	212d      	movlt	r1, #45	; 0x2d
 80096da:	7059      	strblt	r1, [r3, #1]
 80096dc:	2a63      	cmp	r2, #99	; 0x63
 80096de:	dd0b      	ble.n	80096f8 <print_e+0xa4>
 80096e0:	2164      	movs	r1, #100	; 0x64
 80096e2:	fb92 f1f1 	sdiv	r1, r2, r1
 80096e6:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80096ea:	1cd8      	adds	r0, r3, #3
 80096ec:	709c      	strb	r4, [r3, #2]
 80096ee:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80096f2:	fb03 2201 	mla	r2, r3, r1, r2
 80096f6:	9205      	str	r2, [sp, #20]
 80096f8:	9b05      	ldr	r3, [sp, #20]
 80096fa:	220a      	movs	r2, #10
 80096fc:	fb93 f2f2 	sdiv	r2, r3, r2
 8009700:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8009704:	7001      	strb	r1, [r0, #0]
 8009706:	f06f 0109 	mvn.w	r1, #9
 800970a:	fb01 3302 	mla	r3, r1, r2, r3
 800970e:	3330      	adds	r3, #48	; 0x30
 8009710:	7043      	strb	r3, [r0, #1]
 8009712:	2300      	movs	r3, #0
 8009714:	7083      	strb	r3, [r0, #2]
 8009716:	e7b8      	b.n	800968a <print_e+0x36>
 8009718:	b10d      	cbz	r5, 800971e <print_e+0xca>
 800971a:	f803 1b01 	strb.w	r1, [r3], #1
 800971e:	7805      	ldrb	r5, [r0, #0]
 8009720:	f803 5b01 	strb.w	r5, [r3], #1
 8009724:	3c01      	subs	r4, #1
 8009726:	2500      	movs	r5, #0
 8009728:	e7b9      	b.n	800969e <print_e+0x4a>
 800972a:	b10d      	cbz	r5, 8009730 <print_e+0xdc>
 800972c:	f803 1b01 	strb.w	r1, [r3], #1
 8009730:	f803 0b01 	strb.w	r0, [r3], #1
 8009734:	3c01      	subs	r4, #1
 8009736:	2500      	movs	r5, #0
 8009738:	e7bc      	b.n	80096b4 <print_e+0x60>
 800973a:	2665      	movs	r6, #101	; 0x65
 800973c:	e7bc      	b.n	80096b8 <print_e+0x64>
 800973e:	2645      	movs	r6, #69	; 0x45
 8009740:	e7ba      	b.n	80096b8 <print_e+0x64>
 8009742:	0000      	movs	r0, r0
 8009744:	0000      	movs	r0, r0
	...

08009748 <_gcvt>:
 8009748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800974c:	ec55 4b10 	vmov	r4, r5, d0
 8009750:	b088      	sub	sp, #32
 8009752:	4681      	mov	r9, r0
 8009754:	4688      	mov	r8, r1
 8009756:	4616      	mov	r6, r2
 8009758:	469a      	mov	sl, r3
 800975a:	ee10 0a10 	vmov	r0, s0
 800975e:	2200      	movs	r2, #0
 8009760:	2300      	movs	r3, #0
 8009762:	4629      	mov	r1, r5
 8009764:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8009766:	f7f7 f9d9 	bl	8000b1c <__aeabi_dcmplt>
 800976a:	b110      	cbz	r0, 8009772 <_gcvt+0x2a>
 800976c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009770:	461d      	mov	r5, r3
 8009772:	2200      	movs	r2, #0
 8009774:	2300      	movs	r3, #0
 8009776:	4620      	mov	r0, r4
 8009778:	4629      	mov	r1, r5
 800977a:	f7f7 f9c5 	bl	8000b08 <__aeabi_dcmpeq>
 800977e:	b138      	cbz	r0, 8009790 <_gcvt+0x48>
 8009780:	2330      	movs	r3, #48	; 0x30
 8009782:	7033      	strb	r3, [r6, #0]
 8009784:	2300      	movs	r3, #0
 8009786:	7073      	strb	r3, [r6, #1]
 8009788:	4630      	mov	r0, r6
 800978a:	b008      	add	sp, #32
 800978c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009790:	a34b      	add	r3, pc, #300	; (adr r3, 80098c0 <_gcvt+0x178>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	4620      	mov	r0, r4
 8009798:	4629      	mov	r1, r5
 800979a:	f7f7 f9c9 	bl	8000b30 <__aeabi_dcmple>
 800979e:	b158      	cbz	r0, 80097b8 <_gcvt+0x70>
 80097a0:	f108 31ff 	add.w	r1, r8, #4294967295
 80097a4:	9100      	str	r1, [sp, #0]
 80097a6:	e9cd a701 	strd	sl, r7, [sp, #4]
 80097aa:	4622      	mov	r2, r4
 80097ac:	462b      	mov	r3, r5
 80097ae:	4631      	mov	r1, r6
 80097b0:	4648      	mov	r0, r9
 80097b2:	f7ff ff4f 	bl	8009654 <print_e>
 80097b6:	e7e7      	b.n	8009788 <_gcvt+0x40>
 80097b8:	4640      	mov	r0, r8
 80097ba:	f001 f885 	bl	800a8c8 <_mprec_log10>
 80097be:	4622      	mov	r2, r4
 80097c0:	ec51 0b10 	vmov	r0, r1, d0
 80097c4:	462b      	mov	r3, r5
 80097c6:	f7f7 f9b3 	bl	8000b30 <__aeabi_dcmple>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d1e8      	bne.n	80097a0 <_gcvt+0x58>
 80097ce:	ab07      	add	r3, sp, #28
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	ab06      	add	r3, sp, #24
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	4642      	mov	r2, r8
 80097d8:	ab05      	add	r3, sp, #20
 80097da:	ec45 4b10 	vmov	d0, r4, r5
 80097de:	2102      	movs	r1, #2
 80097e0:	4648      	mov	r0, r9
 80097e2:	f001 fbfd 	bl	800afe0 <_dtoa_r>
 80097e6:	9a05      	ldr	r2, [sp, #20]
 80097e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d00e      	beq.n	800980e <_gcvt+0xc6>
 80097f0:	4633      	mov	r3, r6
 80097f2:	44b0      	add	r8, r6
 80097f4:	4605      	mov	r5, r0
 80097f6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80097fa:	9c05      	ldr	r4, [sp, #20]
 80097fc:	eba8 0203 	sub.w	r2, r8, r3
 8009800:	b109      	cbz	r1, 8009806 <_gcvt+0xbe>
 8009802:	2c00      	cmp	r4, #0
 8009804:	dc08      	bgt.n	8009818 <_gcvt+0xd0>
 8009806:	2100      	movs	r1, #0
 8009808:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800980c:	e00d      	b.n	800982a <_gcvt+0xe2>
 800980e:	4601      	mov	r1, r0
 8009810:	4630      	mov	r0, r6
 8009812:	f001 fb11 	bl	800ae38 <strcpy>
 8009816:	e7b7      	b.n	8009788 <_gcvt+0x40>
 8009818:	3c01      	subs	r4, #1
 800981a:	f803 1b01 	strb.w	r1, [r3], #1
 800981e:	9405      	str	r4, [sp, #20]
 8009820:	e7e8      	b.n	80097f4 <_gcvt+0xac>
 8009822:	f803 cb01 	strb.w	ip, [r3], #1
 8009826:	3a01      	subs	r2, #1
 8009828:	2101      	movs	r1, #1
 800982a:	2c00      	cmp	r4, #0
 800982c:	4620      	mov	r0, r4
 800982e:	dc2a      	bgt.n	8009886 <_gcvt+0x13e>
 8009830:	b101      	cbz	r1, 8009834 <_gcvt+0xec>
 8009832:	9405      	str	r4, [sp, #20]
 8009834:	b90f      	cbnz	r7, 800983a <_gcvt+0xf2>
 8009836:	7829      	ldrb	r1, [r5, #0]
 8009838:	b311      	cbz	r1, 8009880 <_gcvt+0x138>
 800983a:	42b3      	cmp	r3, r6
 800983c:	bf04      	itt	eq
 800983e:	2130      	moveq	r1, #48	; 0x30
 8009840:	f803 1b01 	strbeq.w	r1, [r3], #1
 8009844:	212e      	movs	r1, #46	; 0x2e
 8009846:	7019      	strb	r1, [r3, #0]
 8009848:	9905      	ldr	r1, [sp, #20]
 800984a:	4618      	mov	r0, r3
 800984c:	2400      	movs	r4, #0
 800984e:	eba1 0c03 	sub.w	ip, r1, r3
 8009852:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8009856:	eb1c 0f00 	cmn.w	ip, r0
 800985a:	d41c      	bmi.n	8009896 <_gcvt+0x14e>
 800985c:	2900      	cmp	r1, #0
 800985e:	f1c1 0000 	rsb	r0, r1, #0
 8009862:	bfc8      	it	gt
 8009864:	2000      	movgt	r0, #0
 8009866:	f100 0c01 	add.w	ip, r0, #1
 800986a:	4463      	add	r3, ip
 800986c:	4401      	add	r1, r0
 800986e:	b104      	cbz	r4, 8009872 <_gcvt+0x12a>
 8009870:	9105      	str	r1, [sp, #20]
 8009872:	1e69      	subs	r1, r5, #1
 8009874:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009878:	b108      	cbz	r0, 800987e <_gcvt+0x136>
 800987a:	2a00      	cmp	r2, #0
 800987c:	dc0f      	bgt.n	800989e <_gcvt+0x156>
 800987e:	b9df      	cbnz	r7, 80098b8 <_gcvt+0x170>
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
 8009884:	e780      	b.n	8009788 <_gcvt+0x40>
 8009886:	2a00      	cmp	r2, #0
 8009888:	f104 34ff 	add.w	r4, r4, #4294967295
 800988c:	dcc9      	bgt.n	8009822 <_gcvt+0xda>
 800988e:	2900      	cmp	r1, #0
 8009890:	d0d0      	beq.n	8009834 <_gcvt+0xec>
 8009892:	9005      	str	r0, [sp, #20]
 8009894:	e7ce      	b.n	8009834 <_gcvt+0xec>
 8009896:	f800 ef01 	strb.w	lr, [r0, #1]!
 800989a:	2401      	movs	r4, #1
 800989c:	e7db      	b.n	8009856 <_gcvt+0x10e>
 800989e:	f803 0b01 	strb.w	r0, [r3], #1
 80098a2:	3a01      	subs	r2, #1
 80098a4:	e7e6      	b.n	8009874 <_gcvt+0x12c>
 80098a6:	f801 5b01 	strb.w	r5, [r1], #1
 80098aa:	1a60      	subs	r0, r4, r1
 80098ac:	2800      	cmp	r0, #0
 80098ae:	dcfa      	bgt.n	80098a6 <_gcvt+0x15e>
 80098b0:	2a00      	cmp	r2, #0
 80098b2:	bfa8      	it	ge
 80098b4:	189b      	addge	r3, r3, r2
 80098b6:	e7e3      	b.n	8009880 <_gcvt+0x138>
 80098b8:	4619      	mov	r1, r3
 80098ba:	189c      	adds	r4, r3, r2
 80098bc:	2530      	movs	r5, #48	; 0x30
 80098be:	e7f4      	b.n	80098aa <_gcvt+0x162>
 80098c0:	eb1c432d 	.word	0xeb1c432d
 80098c4:	3f1a36e2 	.word	0x3f1a36e2

080098c8 <rshift>:
 80098c8:	6903      	ldr	r3, [r0, #16]
 80098ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80098ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80098d6:	f100 0414 	add.w	r4, r0, #20
 80098da:	dd45      	ble.n	8009968 <rshift+0xa0>
 80098dc:	f011 011f 	ands.w	r1, r1, #31
 80098e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80098e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80098e8:	d10c      	bne.n	8009904 <rshift+0x3c>
 80098ea:	f100 0710 	add.w	r7, r0, #16
 80098ee:	4629      	mov	r1, r5
 80098f0:	42b1      	cmp	r1, r6
 80098f2:	d334      	bcc.n	800995e <rshift+0x96>
 80098f4:	1a9b      	subs	r3, r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	1eea      	subs	r2, r5, #3
 80098fa:	4296      	cmp	r6, r2
 80098fc:	bf38      	it	cc
 80098fe:	2300      	movcc	r3, #0
 8009900:	4423      	add	r3, r4
 8009902:	e015      	b.n	8009930 <rshift+0x68>
 8009904:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009908:	f1c1 0820 	rsb	r8, r1, #32
 800990c:	40cf      	lsrs	r7, r1
 800990e:	f105 0e04 	add.w	lr, r5, #4
 8009912:	46a1      	mov	r9, r4
 8009914:	4576      	cmp	r6, lr
 8009916:	46f4      	mov	ip, lr
 8009918:	d815      	bhi.n	8009946 <rshift+0x7e>
 800991a:	1a9a      	subs	r2, r3, r2
 800991c:	0092      	lsls	r2, r2, #2
 800991e:	3a04      	subs	r2, #4
 8009920:	3501      	adds	r5, #1
 8009922:	42ae      	cmp	r6, r5
 8009924:	bf38      	it	cc
 8009926:	2200      	movcc	r2, #0
 8009928:	18a3      	adds	r3, r4, r2
 800992a:	50a7      	str	r7, [r4, r2]
 800992c:	b107      	cbz	r7, 8009930 <rshift+0x68>
 800992e:	3304      	adds	r3, #4
 8009930:	1b1a      	subs	r2, r3, r4
 8009932:	42a3      	cmp	r3, r4
 8009934:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009938:	bf08      	it	eq
 800993a:	2300      	moveq	r3, #0
 800993c:	6102      	str	r2, [r0, #16]
 800993e:	bf08      	it	eq
 8009940:	6143      	streq	r3, [r0, #20]
 8009942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009946:	f8dc c000 	ldr.w	ip, [ip]
 800994a:	fa0c fc08 	lsl.w	ip, ip, r8
 800994e:	ea4c 0707 	orr.w	r7, ip, r7
 8009952:	f849 7b04 	str.w	r7, [r9], #4
 8009956:	f85e 7b04 	ldr.w	r7, [lr], #4
 800995a:	40cf      	lsrs	r7, r1
 800995c:	e7da      	b.n	8009914 <rshift+0x4c>
 800995e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009962:	f847 cf04 	str.w	ip, [r7, #4]!
 8009966:	e7c3      	b.n	80098f0 <rshift+0x28>
 8009968:	4623      	mov	r3, r4
 800996a:	e7e1      	b.n	8009930 <rshift+0x68>

0800996c <__hexdig_fun>:
 800996c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009970:	2b09      	cmp	r3, #9
 8009972:	d802      	bhi.n	800997a <__hexdig_fun+0xe>
 8009974:	3820      	subs	r0, #32
 8009976:	b2c0      	uxtb	r0, r0
 8009978:	4770      	bx	lr
 800997a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800997e:	2b05      	cmp	r3, #5
 8009980:	d801      	bhi.n	8009986 <__hexdig_fun+0x1a>
 8009982:	3847      	subs	r0, #71	; 0x47
 8009984:	e7f7      	b.n	8009976 <__hexdig_fun+0xa>
 8009986:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800998a:	2b05      	cmp	r3, #5
 800998c:	d801      	bhi.n	8009992 <__hexdig_fun+0x26>
 800998e:	3827      	subs	r0, #39	; 0x27
 8009990:	e7f1      	b.n	8009976 <__hexdig_fun+0xa>
 8009992:	2000      	movs	r0, #0
 8009994:	4770      	bx	lr
	...

08009998 <__gethex>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	ed2d 8b02 	vpush	{d8}
 80099a0:	b089      	sub	sp, #36	; 0x24
 80099a2:	ee08 0a10 	vmov	s16, r0
 80099a6:	9304      	str	r3, [sp, #16]
 80099a8:	4bb4      	ldr	r3, [pc, #720]	; (8009c7c <__gethex+0x2e4>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	4618      	mov	r0, r3
 80099b0:	468b      	mov	fp, r1
 80099b2:	4690      	mov	r8, r2
 80099b4:	f7f6 fc2c 	bl	8000210 <strlen>
 80099b8:	9b01      	ldr	r3, [sp, #4]
 80099ba:	f8db 2000 	ldr.w	r2, [fp]
 80099be:	4403      	add	r3, r0
 80099c0:	4682      	mov	sl, r0
 80099c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80099c6:	9305      	str	r3, [sp, #20]
 80099c8:	1c93      	adds	r3, r2, #2
 80099ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80099ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80099d2:	32fe      	adds	r2, #254	; 0xfe
 80099d4:	18d1      	adds	r1, r2, r3
 80099d6:	461f      	mov	r7, r3
 80099d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80099dc:	9100      	str	r1, [sp, #0]
 80099de:	2830      	cmp	r0, #48	; 0x30
 80099e0:	d0f8      	beq.n	80099d4 <__gethex+0x3c>
 80099e2:	f7ff ffc3 	bl	800996c <__hexdig_fun>
 80099e6:	4604      	mov	r4, r0
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d13a      	bne.n	8009a62 <__gethex+0xca>
 80099ec:	9901      	ldr	r1, [sp, #4]
 80099ee:	4652      	mov	r2, sl
 80099f0:	4638      	mov	r0, r7
 80099f2:	f001 fa29 	bl	800ae48 <strncmp>
 80099f6:	4605      	mov	r5, r0
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d168      	bne.n	8009ace <__gethex+0x136>
 80099fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009a00:	eb07 060a 	add.w	r6, r7, sl
 8009a04:	f7ff ffb2 	bl	800996c <__hexdig_fun>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d062      	beq.n	8009ad2 <__gethex+0x13a>
 8009a0c:	4633      	mov	r3, r6
 8009a0e:	7818      	ldrb	r0, [r3, #0]
 8009a10:	2830      	cmp	r0, #48	; 0x30
 8009a12:	461f      	mov	r7, r3
 8009a14:	f103 0301 	add.w	r3, r3, #1
 8009a18:	d0f9      	beq.n	8009a0e <__gethex+0x76>
 8009a1a:	f7ff ffa7 	bl	800996c <__hexdig_fun>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	fab0 f480 	clz	r4, r0
 8009a24:	0964      	lsrs	r4, r4, #5
 8009a26:	4635      	mov	r5, r6
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	463a      	mov	r2, r7
 8009a2c:	4616      	mov	r6, r2
 8009a2e:	3201      	adds	r2, #1
 8009a30:	7830      	ldrb	r0, [r6, #0]
 8009a32:	f7ff ff9b 	bl	800996c <__hexdig_fun>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d1f8      	bne.n	8009a2c <__gethex+0x94>
 8009a3a:	9901      	ldr	r1, [sp, #4]
 8009a3c:	4652      	mov	r2, sl
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f001 fa02 	bl	800ae48 <strncmp>
 8009a44:	b980      	cbnz	r0, 8009a68 <__gethex+0xd0>
 8009a46:	b94d      	cbnz	r5, 8009a5c <__gethex+0xc4>
 8009a48:	eb06 050a 	add.w	r5, r6, sl
 8009a4c:	462a      	mov	r2, r5
 8009a4e:	4616      	mov	r6, r2
 8009a50:	3201      	adds	r2, #1
 8009a52:	7830      	ldrb	r0, [r6, #0]
 8009a54:	f7ff ff8a 	bl	800996c <__hexdig_fun>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d1f8      	bne.n	8009a4e <__gethex+0xb6>
 8009a5c:	1bad      	subs	r5, r5, r6
 8009a5e:	00ad      	lsls	r5, r5, #2
 8009a60:	e004      	b.n	8009a6c <__gethex+0xd4>
 8009a62:	2400      	movs	r4, #0
 8009a64:	4625      	mov	r5, r4
 8009a66:	e7e0      	b.n	8009a2a <__gethex+0x92>
 8009a68:	2d00      	cmp	r5, #0
 8009a6a:	d1f7      	bne.n	8009a5c <__gethex+0xc4>
 8009a6c:	7833      	ldrb	r3, [r6, #0]
 8009a6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a72:	2b50      	cmp	r3, #80	; 0x50
 8009a74:	d13b      	bne.n	8009aee <__gethex+0x156>
 8009a76:	7873      	ldrb	r3, [r6, #1]
 8009a78:	2b2b      	cmp	r3, #43	; 0x2b
 8009a7a:	d02c      	beq.n	8009ad6 <__gethex+0x13e>
 8009a7c:	2b2d      	cmp	r3, #45	; 0x2d
 8009a7e:	d02e      	beq.n	8009ade <__gethex+0x146>
 8009a80:	1c71      	adds	r1, r6, #1
 8009a82:	f04f 0900 	mov.w	r9, #0
 8009a86:	7808      	ldrb	r0, [r1, #0]
 8009a88:	f7ff ff70 	bl	800996c <__hexdig_fun>
 8009a8c:	1e43      	subs	r3, r0, #1
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b18      	cmp	r3, #24
 8009a92:	d82c      	bhi.n	8009aee <__gethex+0x156>
 8009a94:	f1a0 0210 	sub.w	r2, r0, #16
 8009a98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a9c:	f7ff ff66 	bl	800996c <__hexdig_fun>
 8009aa0:	1e43      	subs	r3, r0, #1
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b18      	cmp	r3, #24
 8009aa6:	d91d      	bls.n	8009ae4 <__gethex+0x14c>
 8009aa8:	f1b9 0f00 	cmp.w	r9, #0
 8009aac:	d000      	beq.n	8009ab0 <__gethex+0x118>
 8009aae:	4252      	negs	r2, r2
 8009ab0:	4415      	add	r5, r2
 8009ab2:	f8cb 1000 	str.w	r1, [fp]
 8009ab6:	b1e4      	cbz	r4, 8009af2 <__gethex+0x15a>
 8009ab8:	9b00      	ldr	r3, [sp, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	bf14      	ite	ne
 8009abe:	2700      	movne	r7, #0
 8009ac0:	2706      	moveq	r7, #6
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	b009      	add	sp, #36	; 0x24
 8009ac6:	ecbd 8b02 	vpop	{d8}
 8009aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ace:	463e      	mov	r6, r7
 8009ad0:	4625      	mov	r5, r4
 8009ad2:	2401      	movs	r4, #1
 8009ad4:	e7ca      	b.n	8009a6c <__gethex+0xd4>
 8009ad6:	f04f 0900 	mov.w	r9, #0
 8009ada:	1cb1      	adds	r1, r6, #2
 8009adc:	e7d3      	b.n	8009a86 <__gethex+0xee>
 8009ade:	f04f 0901 	mov.w	r9, #1
 8009ae2:	e7fa      	b.n	8009ada <__gethex+0x142>
 8009ae4:	230a      	movs	r3, #10
 8009ae6:	fb03 0202 	mla	r2, r3, r2, r0
 8009aea:	3a10      	subs	r2, #16
 8009aec:	e7d4      	b.n	8009a98 <__gethex+0x100>
 8009aee:	4631      	mov	r1, r6
 8009af0:	e7df      	b.n	8009ab2 <__gethex+0x11a>
 8009af2:	1bf3      	subs	r3, r6, r7
 8009af4:	3b01      	subs	r3, #1
 8009af6:	4621      	mov	r1, r4
 8009af8:	2b07      	cmp	r3, #7
 8009afa:	dc0b      	bgt.n	8009b14 <__gethex+0x17c>
 8009afc:	ee18 0a10 	vmov	r0, s16
 8009b00:	f000 fa64 	bl	8009fcc <_Balloc>
 8009b04:	4604      	mov	r4, r0
 8009b06:	b940      	cbnz	r0, 8009b1a <__gethex+0x182>
 8009b08:	4b5d      	ldr	r3, [pc, #372]	; (8009c80 <__gethex+0x2e8>)
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	21de      	movs	r1, #222	; 0xde
 8009b0e:	485d      	ldr	r0, [pc, #372]	; (8009c84 <__gethex+0x2ec>)
 8009b10:	f001 f9bc 	bl	800ae8c <__assert_func>
 8009b14:	3101      	adds	r1, #1
 8009b16:	105b      	asrs	r3, r3, #1
 8009b18:	e7ee      	b.n	8009af8 <__gethex+0x160>
 8009b1a:	f100 0914 	add.w	r9, r0, #20
 8009b1e:	f04f 0b00 	mov.w	fp, #0
 8009b22:	f1ca 0301 	rsb	r3, sl, #1
 8009b26:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b2a:	f8cd b000 	str.w	fp, [sp]
 8009b2e:	9306      	str	r3, [sp, #24]
 8009b30:	42b7      	cmp	r7, r6
 8009b32:	d340      	bcc.n	8009bb6 <__gethex+0x21e>
 8009b34:	9802      	ldr	r0, [sp, #8]
 8009b36:	9b00      	ldr	r3, [sp, #0]
 8009b38:	f840 3b04 	str.w	r3, [r0], #4
 8009b3c:	eba0 0009 	sub.w	r0, r0, r9
 8009b40:	1080      	asrs	r0, r0, #2
 8009b42:	0146      	lsls	r6, r0, #5
 8009b44:	6120      	str	r0, [r4, #16]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fb32 	bl	800a1b0 <__hi0bits>
 8009b4c:	1a30      	subs	r0, r6, r0
 8009b4e:	f8d8 6000 	ldr.w	r6, [r8]
 8009b52:	42b0      	cmp	r0, r6
 8009b54:	dd63      	ble.n	8009c1e <__gethex+0x286>
 8009b56:	1b87      	subs	r7, r0, r6
 8009b58:	4639      	mov	r1, r7
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f000 fef5 	bl	800a94a <__any_on>
 8009b60:	4682      	mov	sl, r0
 8009b62:	b1a8      	cbz	r0, 8009b90 <__gethex+0x1f8>
 8009b64:	1e7b      	subs	r3, r7, #1
 8009b66:	1159      	asrs	r1, r3, #5
 8009b68:	f003 021f 	and.w	r2, r3, #31
 8009b6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009b70:	f04f 0a01 	mov.w	sl, #1
 8009b74:	fa0a f202 	lsl.w	r2, sl, r2
 8009b78:	420a      	tst	r2, r1
 8009b7a:	d009      	beq.n	8009b90 <__gethex+0x1f8>
 8009b7c:	4553      	cmp	r3, sl
 8009b7e:	dd05      	ble.n	8009b8c <__gethex+0x1f4>
 8009b80:	1eb9      	subs	r1, r7, #2
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 fee1 	bl	800a94a <__any_on>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d145      	bne.n	8009c18 <__gethex+0x280>
 8009b8c:	f04f 0a02 	mov.w	sl, #2
 8009b90:	4639      	mov	r1, r7
 8009b92:	4620      	mov	r0, r4
 8009b94:	f7ff fe98 	bl	80098c8 <rshift>
 8009b98:	443d      	add	r5, r7
 8009b9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b9e:	42ab      	cmp	r3, r5
 8009ba0:	da4c      	bge.n	8009c3c <__gethex+0x2a4>
 8009ba2:	ee18 0a10 	vmov	r0, s16
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	f000 fa50 	bl	800a04c <_Bfree>
 8009bac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bae:	2300      	movs	r3, #0
 8009bb0:	6013      	str	r3, [r2, #0]
 8009bb2:	27a3      	movs	r7, #163	; 0xa3
 8009bb4:	e785      	b.n	8009ac2 <__gethex+0x12a>
 8009bb6:	1e73      	subs	r3, r6, #1
 8009bb8:	9a05      	ldr	r2, [sp, #20]
 8009bba:	9303      	str	r3, [sp, #12]
 8009bbc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d019      	beq.n	8009bf8 <__gethex+0x260>
 8009bc4:	f1bb 0f20 	cmp.w	fp, #32
 8009bc8:	d107      	bne.n	8009bda <__gethex+0x242>
 8009bca:	9b02      	ldr	r3, [sp, #8]
 8009bcc:	9a00      	ldr	r2, [sp, #0]
 8009bce:	f843 2b04 	str.w	r2, [r3], #4
 8009bd2:	9302      	str	r3, [sp, #8]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	469b      	mov	fp, r3
 8009bda:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009bde:	f7ff fec5 	bl	800996c <__hexdig_fun>
 8009be2:	9b00      	ldr	r3, [sp, #0]
 8009be4:	f000 000f 	and.w	r0, r0, #15
 8009be8:	fa00 f00b 	lsl.w	r0, r0, fp
 8009bec:	4303      	orrs	r3, r0
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	f10b 0b04 	add.w	fp, fp, #4
 8009bf4:	9b03      	ldr	r3, [sp, #12]
 8009bf6:	e00d      	b.n	8009c14 <__gethex+0x27c>
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	9a06      	ldr	r2, [sp, #24]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	42bb      	cmp	r3, r7
 8009c00:	d3e0      	bcc.n	8009bc4 <__gethex+0x22c>
 8009c02:	4618      	mov	r0, r3
 8009c04:	9901      	ldr	r1, [sp, #4]
 8009c06:	9307      	str	r3, [sp, #28]
 8009c08:	4652      	mov	r2, sl
 8009c0a:	f001 f91d 	bl	800ae48 <strncmp>
 8009c0e:	9b07      	ldr	r3, [sp, #28]
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d1d7      	bne.n	8009bc4 <__gethex+0x22c>
 8009c14:	461e      	mov	r6, r3
 8009c16:	e78b      	b.n	8009b30 <__gethex+0x198>
 8009c18:	f04f 0a03 	mov.w	sl, #3
 8009c1c:	e7b8      	b.n	8009b90 <__gethex+0x1f8>
 8009c1e:	da0a      	bge.n	8009c36 <__gethex+0x29e>
 8009c20:	1a37      	subs	r7, r6, r0
 8009c22:	4621      	mov	r1, r4
 8009c24:	ee18 0a10 	vmov	r0, s16
 8009c28:	463a      	mov	r2, r7
 8009c2a:	f000 fc2b 	bl	800a484 <__lshift>
 8009c2e:	1bed      	subs	r5, r5, r7
 8009c30:	4604      	mov	r4, r0
 8009c32:	f100 0914 	add.w	r9, r0, #20
 8009c36:	f04f 0a00 	mov.w	sl, #0
 8009c3a:	e7ae      	b.n	8009b9a <__gethex+0x202>
 8009c3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009c40:	42a8      	cmp	r0, r5
 8009c42:	dd72      	ble.n	8009d2a <__gethex+0x392>
 8009c44:	1b45      	subs	r5, r0, r5
 8009c46:	42ae      	cmp	r6, r5
 8009c48:	dc36      	bgt.n	8009cb8 <__gethex+0x320>
 8009c4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d02a      	beq.n	8009ca8 <__gethex+0x310>
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d02c      	beq.n	8009cb0 <__gethex+0x318>
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d11c      	bne.n	8009c94 <__gethex+0x2fc>
 8009c5a:	42ae      	cmp	r6, r5
 8009c5c:	d11a      	bne.n	8009c94 <__gethex+0x2fc>
 8009c5e:	2e01      	cmp	r6, #1
 8009c60:	d112      	bne.n	8009c88 <__gethex+0x2f0>
 8009c62:	9a04      	ldr	r2, [sp, #16]
 8009c64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	6123      	str	r3, [r4, #16]
 8009c6e:	f8c9 3000 	str.w	r3, [r9]
 8009c72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c74:	2762      	movs	r7, #98	; 0x62
 8009c76:	601c      	str	r4, [r3, #0]
 8009c78:	e723      	b.n	8009ac2 <__gethex+0x12a>
 8009c7a:	bf00      	nop
 8009c7c:	0800d070 	.word	0x0800d070
 8009c80:	0800cff8 	.word	0x0800cff8
 8009c84:	0800d009 	.word	0x0800d009
 8009c88:	1e71      	subs	r1, r6, #1
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 fe5d 	bl	800a94a <__any_on>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d1e6      	bne.n	8009c62 <__gethex+0x2ca>
 8009c94:	ee18 0a10 	vmov	r0, s16
 8009c98:	4621      	mov	r1, r4
 8009c9a:	f000 f9d7 	bl	800a04c <_Bfree>
 8009c9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	2750      	movs	r7, #80	; 0x50
 8009ca6:	e70c      	b.n	8009ac2 <__gethex+0x12a>
 8009ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1f2      	bne.n	8009c94 <__gethex+0x2fc>
 8009cae:	e7d8      	b.n	8009c62 <__gethex+0x2ca>
 8009cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1d5      	bne.n	8009c62 <__gethex+0x2ca>
 8009cb6:	e7ed      	b.n	8009c94 <__gethex+0x2fc>
 8009cb8:	1e6f      	subs	r7, r5, #1
 8009cba:	f1ba 0f00 	cmp.w	sl, #0
 8009cbe:	d131      	bne.n	8009d24 <__gethex+0x38c>
 8009cc0:	b127      	cbz	r7, 8009ccc <__gethex+0x334>
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f000 fe40 	bl	800a94a <__any_on>
 8009cca:	4682      	mov	sl, r0
 8009ccc:	117b      	asrs	r3, r7, #5
 8009cce:	2101      	movs	r1, #1
 8009cd0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009cd4:	f007 071f 	and.w	r7, r7, #31
 8009cd8:	fa01 f707 	lsl.w	r7, r1, r7
 8009cdc:	421f      	tst	r7, r3
 8009cde:	4629      	mov	r1, r5
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	bf18      	it	ne
 8009ce4:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ce8:	1b76      	subs	r6, r6, r5
 8009cea:	f7ff fded 	bl	80098c8 <rshift>
 8009cee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009cf2:	2702      	movs	r7, #2
 8009cf4:	f1ba 0f00 	cmp.w	sl, #0
 8009cf8:	d048      	beq.n	8009d8c <__gethex+0x3f4>
 8009cfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d015      	beq.n	8009d2e <__gethex+0x396>
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	d017      	beq.n	8009d36 <__gethex+0x39e>
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d109      	bne.n	8009d1e <__gethex+0x386>
 8009d0a:	f01a 0f02 	tst.w	sl, #2
 8009d0e:	d006      	beq.n	8009d1e <__gethex+0x386>
 8009d10:	f8d9 0000 	ldr.w	r0, [r9]
 8009d14:	ea4a 0a00 	orr.w	sl, sl, r0
 8009d18:	f01a 0f01 	tst.w	sl, #1
 8009d1c:	d10e      	bne.n	8009d3c <__gethex+0x3a4>
 8009d1e:	f047 0710 	orr.w	r7, r7, #16
 8009d22:	e033      	b.n	8009d8c <__gethex+0x3f4>
 8009d24:	f04f 0a01 	mov.w	sl, #1
 8009d28:	e7d0      	b.n	8009ccc <__gethex+0x334>
 8009d2a:	2701      	movs	r7, #1
 8009d2c:	e7e2      	b.n	8009cf4 <__gethex+0x35c>
 8009d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d30:	f1c3 0301 	rsb	r3, r3, #1
 8009d34:	9315      	str	r3, [sp, #84]	; 0x54
 8009d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0f0      	beq.n	8009d1e <__gethex+0x386>
 8009d3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d40:	f104 0314 	add.w	r3, r4, #20
 8009d44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009d48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009d4c:	f04f 0c00 	mov.w	ip, #0
 8009d50:	4618      	mov	r0, r3
 8009d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d56:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009d5a:	d01c      	beq.n	8009d96 <__gethex+0x3fe>
 8009d5c:	3201      	adds	r2, #1
 8009d5e:	6002      	str	r2, [r0, #0]
 8009d60:	2f02      	cmp	r7, #2
 8009d62:	f104 0314 	add.w	r3, r4, #20
 8009d66:	d13f      	bne.n	8009de8 <__gethex+0x450>
 8009d68:	f8d8 2000 	ldr.w	r2, [r8]
 8009d6c:	3a01      	subs	r2, #1
 8009d6e:	42b2      	cmp	r2, r6
 8009d70:	d10a      	bne.n	8009d88 <__gethex+0x3f0>
 8009d72:	1171      	asrs	r1, r6, #5
 8009d74:	2201      	movs	r2, #1
 8009d76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d7a:	f006 061f 	and.w	r6, r6, #31
 8009d7e:	fa02 f606 	lsl.w	r6, r2, r6
 8009d82:	421e      	tst	r6, r3
 8009d84:	bf18      	it	ne
 8009d86:	4617      	movne	r7, r2
 8009d88:	f047 0720 	orr.w	r7, r7, #32
 8009d8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d8e:	601c      	str	r4, [r3, #0]
 8009d90:	9b04      	ldr	r3, [sp, #16]
 8009d92:	601d      	str	r5, [r3, #0]
 8009d94:	e695      	b.n	8009ac2 <__gethex+0x12a>
 8009d96:	4299      	cmp	r1, r3
 8009d98:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d9c:	d8d8      	bhi.n	8009d50 <__gethex+0x3b8>
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	459b      	cmp	fp, r3
 8009da2:	db19      	blt.n	8009dd8 <__gethex+0x440>
 8009da4:	6861      	ldr	r1, [r4, #4]
 8009da6:	ee18 0a10 	vmov	r0, s16
 8009daa:	3101      	adds	r1, #1
 8009dac:	f000 f90e 	bl	8009fcc <_Balloc>
 8009db0:	4681      	mov	r9, r0
 8009db2:	b918      	cbnz	r0, 8009dbc <__gethex+0x424>
 8009db4:	4b1a      	ldr	r3, [pc, #104]	; (8009e20 <__gethex+0x488>)
 8009db6:	4602      	mov	r2, r0
 8009db8:	2184      	movs	r1, #132	; 0x84
 8009dba:	e6a8      	b.n	8009b0e <__gethex+0x176>
 8009dbc:	6922      	ldr	r2, [r4, #16]
 8009dbe:	3202      	adds	r2, #2
 8009dc0:	f104 010c 	add.w	r1, r4, #12
 8009dc4:	0092      	lsls	r2, r2, #2
 8009dc6:	300c      	adds	r0, #12
 8009dc8:	f7fe fdee 	bl	80089a8 <memcpy>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	ee18 0a10 	vmov	r0, s16
 8009dd2:	f000 f93b 	bl	800a04c <_Bfree>
 8009dd6:	464c      	mov	r4, r9
 8009dd8:	6923      	ldr	r3, [r4, #16]
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009de0:	6122      	str	r2, [r4, #16]
 8009de2:	2201      	movs	r2, #1
 8009de4:	615a      	str	r2, [r3, #20]
 8009de6:	e7bb      	b.n	8009d60 <__gethex+0x3c8>
 8009de8:	6922      	ldr	r2, [r4, #16]
 8009dea:	455a      	cmp	r2, fp
 8009dec:	dd0b      	ble.n	8009e06 <__gethex+0x46e>
 8009dee:	2101      	movs	r1, #1
 8009df0:	4620      	mov	r0, r4
 8009df2:	f7ff fd69 	bl	80098c8 <rshift>
 8009df6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009dfa:	3501      	adds	r5, #1
 8009dfc:	42ab      	cmp	r3, r5
 8009dfe:	f6ff aed0 	blt.w	8009ba2 <__gethex+0x20a>
 8009e02:	2701      	movs	r7, #1
 8009e04:	e7c0      	b.n	8009d88 <__gethex+0x3f0>
 8009e06:	f016 061f 	ands.w	r6, r6, #31
 8009e0a:	d0fa      	beq.n	8009e02 <__gethex+0x46a>
 8009e0c:	4453      	add	r3, sl
 8009e0e:	f1c6 0620 	rsb	r6, r6, #32
 8009e12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e16:	f000 f9cb 	bl	800a1b0 <__hi0bits>
 8009e1a:	42b0      	cmp	r0, r6
 8009e1c:	dbe7      	blt.n	8009dee <__gethex+0x456>
 8009e1e:	e7f0      	b.n	8009e02 <__gethex+0x46a>
 8009e20:	0800cff8 	.word	0x0800cff8

08009e24 <L_shift>:
 8009e24:	f1c2 0208 	rsb	r2, r2, #8
 8009e28:	0092      	lsls	r2, r2, #2
 8009e2a:	b570      	push	{r4, r5, r6, lr}
 8009e2c:	f1c2 0620 	rsb	r6, r2, #32
 8009e30:	6843      	ldr	r3, [r0, #4]
 8009e32:	6804      	ldr	r4, [r0, #0]
 8009e34:	fa03 f506 	lsl.w	r5, r3, r6
 8009e38:	432c      	orrs	r4, r5
 8009e3a:	40d3      	lsrs	r3, r2
 8009e3c:	6004      	str	r4, [r0, #0]
 8009e3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e42:	4288      	cmp	r0, r1
 8009e44:	d3f4      	bcc.n	8009e30 <L_shift+0xc>
 8009e46:	bd70      	pop	{r4, r5, r6, pc}

08009e48 <__match>:
 8009e48:	b530      	push	{r4, r5, lr}
 8009e4a:	6803      	ldr	r3, [r0, #0]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e52:	b914      	cbnz	r4, 8009e5a <__match+0x12>
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	2001      	movs	r0, #1
 8009e58:	bd30      	pop	{r4, r5, pc}
 8009e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009e62:	2d19      	cmp	r5, #25
 8009e64:	bf98      	it	ls
 8009e66:	3220      	addls	r2, #32
 8009e68:	42a2      	cmp	r2, r4
 8009e6a:	d0f0      	beq.n	8009e4e <__match+0x6>
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	e7f3      	b.n	8009e58 <__match+0x10>

08009e70 <__hexnan>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	680b      	ldr	r3, [r1, #0]
 8009e76:	115e      	asrs	r6, r3, #5
 8009e78:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e7c:	f013 031f 	ands.w	r3, r3, #31
 8009e80:	b087      	sub	sp, #28
 8009e82:	bf18      	it	ne
 8009e84:	3604      	addne	r6, #4
 8009e86:	2500      	movs	r5, #0
 8009e88:	1f37      	subs	r7, r6, #4
 8009e8a:	4690      	mov	r8, r2
 8009e8c:	6802      	ldr	r2, [r0, #0]
 8009e8e:	9301      	str	r3, [sp, #4]
 8009e90:	4682      	mov	sl, r0
 8009e92:	f846 5c04 	str.w	r5, [r6, #-4]
 8009e96:	46b9      	mov	r9, r7
 8009e98:	463c      	mov	r4, r7
 8009e9a:	9502      	str	r5, [sp, #8]
 8009e9c:	46ab      	mov	fp, r5
 8009e9e:	7851      	ldrb	r1, [r2, #1]
 8009ea0:	1c53      	adds	r3, r2, #1
 8009ea2:	9303      	str	r3, [sp, #12]
 8009ea4:	b341      	cbz	r1, 8009ef8 <__hexnan+0x88>
 8009ea6:	4608      	mov	r0, r1
 8009ea8:	9205      	str	r2, [sp, #20]
 8009eaa:	9104      	str	r1, [sp, #16]
 8009eac:	f7ff fd5e 	bl	800996c <__hexdig_fun>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d14f      	bne.n	8009f54 <__hexnan+0xe4>
 8009eb4:	9904      	ldr	r1, [sp, #16]
 8009eb6:	9a05      	ldr	r2, [sp, #20]
 8009eb8:	2920      	cmp	r1, #32
 8009eba:	d818      	bhi.n	8009eee <__hexnan+0x7e>
 8009ebc:	9b02      	ldr	r3, [sp, #8]
 8009ebe:	459b      	cmp	fp, r3
 8009ec0:	dd13      	ble.n	8009eea <__hexnan+0x7a>
 8009ec2:	454c      	cmp	r4, r9
 8009ec4:	d206      	bcs.n	8009ed4 <__hexnan+0x64>
 8009ec6:	2d07      	cmp	r5, #7
 8009ec8:	dc04      	bgt.n	8009ed4 <__hexnan+0x64>
 8009eca:	462a      	mov	r2, r5
 8009ecc:	4649      	mov	r1, r9
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f7ff ffa8 	bl	8009e24 <L_shift>
 8009ed4:	4544      	cmp	r4, r8
 8009ed6:	d950      	bls.n	8009f7a <__hexnan+0x10a>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f1a4 0904 	sub.w	r9, r4, #4
 8009ede:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ee2:	f8cd b008 	str.w	fp, [sp, #8]
 8009ee6:	464c      	mov	r4, r9
 8009ee8:	461d      	mov	r5, r3
 8009eea:	9a03      	ldr	r2, [sp, #12]
 8009eec:	e7d7      	b.n	8009e9e <__hexnan+0x2e>
 8009eee:	2929      	cmp	r1, #41	; 0x29
 8009ef0:	d156      	bne.n	8009fa0 <__hexnan+0x130>
 8009ef2:	3202      	adds	r2, #2
 8009ef4:	f8ca 2000 	str.w	r2, [sl]
 8009ef8:	f1bb 0f00 	cmp.w	fp, #0
 8009efc:	d050      	beq.n	8009fa0 <__hexnan+0x130>
 8009efe:	454c      	cmp	r4, r9
 8009f00:	d206      	bcs.n	8009f10 <__hexnan+0xa0>
 8009f02:	2d07      	cmp	r5, #7
 8009f04:	dc04      	bgt.n	8009f10 <__hexnan+0xa0>
 8009f06:	462a      	mov	r2, r5
 8009f08:	4649      	mov	r1, r9
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f7ff ff8a 	bl	8009e24 <L_shift>
 8009f10:	4544      	cmp	r4, r8
 8009f12:	d934      	bls.n	8009f7e <__hexnan+0x10e>
 8009f14:	f1a8 0204 	sub.w	r2, r8, #4
 8009f18:	4623      	mov	r3, r4
 8009f1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009f22:	429f      	cmp	r7, r3
 8009f24:	d2f9      	bcs.n	8009f1a <__hexnan+0xaa>
 8009f26:	1b3b      	subs	r3, r7, r4
 8009f28:	f023 0303 	bic.w	r3, r3, #3
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	3401      	adds	r4, #1
 8009f30:	3e03      	subs	r6, #3
 8009f32:	42b4      	cmp	r4, r6
 8009f34:	bf88      	it	hi
 8009f36:	2304      	movhi	r3, #4
 8009f38:	4443      	add	r3, r8
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f843 2b04 	str.w	r2, [r3], #4
 8009f40:	429f      	cmp	r7, r3
 8009f42:	d2fb      	bcs.n	8009f3c <__hexnan+0xcc>
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	b91b      	cbnz	r3, 8009f50 <__hexnan+0xe0>
 8009f48:	4547      	cmp	r7, r8
 8009f4a:	d127      	bne.n	8009f9c <__hexnan+0x12c>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	2005      	movs	r0, #5
 8009f52:	e026      	b.n	8009fa2 <__hexnan+0x132>
 8009f54:	3501      	adds	r5, #1
 8009f56:	2d08      	cmp	r5, #8
 8009f58:	f10b 0b01 	add.w	fp, fp, #1
 8009f5c:	dd06      	ble.n	8009f6c <__hexnan+0xfc>
 8009f5e:	4544      	cmp	r4, r8
 8009f60:	d9c3      	bls.n	8009eea <__hexnan+0x7a>
 8009f62:	2300      	movs	r3, #0
 8009f64:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f68:	2501      	movs	r5, #1
 8009f6a:	3c04      	subs	r4, #4
 8009f6c:	6822      	ldr	r2, [r4, #0]
 8009f6e:	f000 000f 	and.w	r0, r0, #15
 8009f72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009f76:	6022      	str	r2, [r4, #0]
 8009f78:	e7b7      	b.n	8009eea <__hexnan+0x7a>
 8009f7a:	2508      	movs	r5, #8
 8009f7c:	e7b5      	b.n	8009eea <__hexnan+0x7a>
 8009f7e:	9b01      	ldr	r3, [sp, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0df      	beq.n	8009f44 <__hexnan+0xd4>
 8009f84:	f04f 32ff 	mov.w	r2, #4294967295
 8009f88:	f1c3 0320 	rsb	r3, r3, #32
 8009f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f94:	401a      	ands	r2, r3
 8009f96:	f846 2c04 	str.w	r2, [r6, #-4]
 8009f9a:	e7d3      	b.n	8009f44 <__hexnan+0xd4>
 8009f9c:	3f04      	subs	r7, #4
 8009f9e:	e7d1      	b.n	8009f44 <__hexnan+0xd4>
 8009fa0:	2004      	movs	r0, #4
 8009fa2:	b007      	add	sp, #28
 8009fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fa8 <__ascii_mbtowc>:
 8009fa8:	b082      	sub	sp, #8
 8009faa:	b901      	cbnz	r1, 8009fae <__ascii_mbtowc+0x6>
 8009fac:	a901      	add	r1, sp, #4
 8009fae:	b142      	cbz	r2, 8009fc2 <__ascii_mbtowc+0x1a>
 8009fb0:	b14b      	cbz	r3, 8009fc6 <__ascii_mbtowc+0x1e>
 8009fb2:	7813      	ldrb	r3, [r2, #0]
 8009fb4:	600b      	str	r3, [r1, #0]
 8009fb6:	7812      	ldrb	r2, [r2, #0]
 8009fb8:	1e10      	subs	r0, r2, #0
 8009fba:	bf18      	it	ne
 8009fbc:	2001      	movne	r0, #1
 8009fbe:	b002      	add	sp, #8
 8009fc0:	4770      	bx	lr
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	e7fb      	b.n	8009fbe <__ascii_mbtowc+0x16>
 8009fc6:	f06f 0001 	mvn.w	r0, #1
 8009fca:	e7f8      	b.n	8009fbe <__ascii_mbtowc+0x16>

08009fcc <_Balloc>:
 8009fcc:	b570      	push	{r4, r5, r6, lr}
 8009fce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	460d      	mov	r5, r1
 8009fd4:	b976      	cbnz	r6, 8009ff4 <_Balloc+0x28>
 8009fd6:	2010      	movs	r0, #16
 8009fd8:	f001 fe02 	bl	800bbe0 <malloc>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	6260      	str	r0, [r4, #36]	; 0x24
 8009fe0:	b920      	cbnz	r0, 8009fec <_Balloc+0x20>
 8009fe2:	4b18      	ldr	r3, [pc, #96]	; (800a044 <_Balloc+0x78>)
 8009fe4:	4818      	ldr	r0, [pc, #96]	; (800a048 <_Balloc+0x7c>)
 8009fe6:	2166      	movs	r1, #102	; 0x66
 8009fe8:	f000 ff50 	bl	800ae8c <__assert_func>
 8009fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ff0:	6006      	str	r6, [r0, #0]
 8009ff2:	60c6      	str	r6, [r0, #12]
 8009ff4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ff6:	68f3      	ldr	r3, [r6, #12]
 8009ff8:	b183      	cbz	r3, 800a01c <_Balloc+0x50>
 8009ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a002:	b9b8      	cbnz	r0, 800a034 <_Balloc+0x68>
 800a004:	2101      	movs	r1, #1
 800a006:	fa01 f605 	lsl.w	r6, r1, r5
 800a00a:	1d72      	adds	r2, r6, #5
 800a00c:	0092      	lsls	r2, r2, #2
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 fcbc 	bl	800a98c <_calloc_r>
 800a014:	b160      	cbz	r0, 800a030 <_Balloc+0x64>
 800a016:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a01a:	e00e      	b.n	800a03a <_Balloc+0x6e>
 800a01c:	2221      	movs	r2, #33	; 0x21
 800a01e:	2104      	movs	r1, #4
 800a020:	4620      	mov	r0, r4
 800a022:	f000 fcb3 	bl	800a98c <_calloc_r>
 800a026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a028:	60f0      	str	r0, [r6, #12]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e4      	bne.n	8009ffa <_Balloc+0x2e>
 800a030:	2000      	movs	r0, #0
 800a032:	bd70      	pop	{r4, r5, r6, pc}
 800a034:	6802      	ldr	r2, [r0, #0]
 800a036:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a03a:	2300      	movs	r3, #0
 800a03c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a040:	e7f7      	b.n	800a032 <_Balloc+0x66>
 800a042:	bf00      	nop
 800a044:	0800d084 	.word	0x0800d084
 800a048:	0800d09b 	.word	0x0800d09b

0800a04c <_Bfree>:
 800a04c:	b570      	push	{r4, r5, r6, lr}
 800a04e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a050:	4605      	mov	r5, r0
 800a052:	460c      	mov	r4, r1
 800a054:	b976      	cbnz	r6, 800a074 <_Bfree+0x28>
 800a056:	2010      	movs	r0, #16
 800a058:	f001 fdc2 	bl	800bbe0 <malloc>
 800a05c:	4602      	mov	r2, r0
 800a05e:	6268      	str	r0, [r5, #36]	; 0x24
 800a060:	b920      	cbnz	r0, 800a06c <_Bfree+0x20>
 800a062:	4b09      	ldr	r3, [pc, #36]	; (800a088 <_Bfree+0x3c>)
 800a064:	4809      	ldr	r0, [pc, #36]	; (800a08c <_Bfree+0x40>)
 800a066:	218a      	movs	r1, #138	; 0x8a
 800a068:	f000 ff10 	bl	800ae8c <__assert_func>
 800a06c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a070:	6006      	str	r6, [r0, #0]
 800a072:	60c6      	str	r6, [r0, #12]
 800a074:	b13c      	cbz	r4, 800a086 <_Bfree+0x3a>
 800a076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a078:	6862      	ldr	r2, [r4, #4]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a080:	6021      	str	r1, [r4, #0]
 800a082:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a086:	bd70      	pop	{r4, r5, r6, pc}
 800a088:	0800d084 	.word	0x0800d084
 800a08c:	0800d09b 	.word	0x0800d09b

0800a090 <__multadd>:
 800a090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a094:	690d      	ldr	r5, [r1, #16]
 800a096:	4607      	mov	r7, r0
 800a098:	460c      	mov	r4, r1
 800a09a:	461e      	mov	r6, r3
 800a09c:	f101 0c14 	add.w	ip, r1, #20
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a0a6:	b299      	uxth	r1, r3
 800a0a8:	fb02 6101 	mla	r1, r2, r1, r6
 800a0ac:	0c1e      	lsrs	r6, r3, #16
 800a0ae:	0c0b      	lsrs	r3, r1, #16
 800a0b0:	fb02 3306 	mla	r3, r2, r6, r3
 800a0b4:	b289      	uxth	r1, r1
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0bc:	4285      	cmp	r5, r0
 800a0be:	f84c 1b04 	str.w	r1, [ip], #4
 800a0c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0c6:	dcec      	bgt.n	800a0a2 <__multadd+0x12>
 800a0c8:	b30e      	cbz	r6, 800a10e <__multadd+0x7e>
 800a0ca:	68a3      	ldr	r3, [r4, #8]
 800a0cc:	42ab      	cmp	r3, r5
 800a0ce:	dc19      	bgt.n	800a104 <__multadd+0x74>
 800a0d0:	6861      	ldr	r1, [r4, #4]
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	3101      	adds	r1, #1
 800a0d6:	f7ff ff79 	bl	8009fcc <_Balloc>
 800a0da:	4680      	mov	r8, r0
 800a0dc:	b928      	cbnz	r0, 800a0ea <__multadd+0x5a>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	4b0c      	ldr	r3, [pc, #48]	; (800a114 <__multadd+0x84>)
 800a0e2:	480d      	ldr	r0, [pc, #52]	; (800a118 <__multadd+0x88>)
 800a0e4:	21b5      	movs	r1, #181	; 0xb5
 800a0e6:	f000 fed1 	bl	800ae8c <__assert_func>
 800a0ea:	6922      	ldr	r2, [r4, #16]
 800a0ec:	3202      	adds	r2, #2
 800a0ee:	f104 010c 	add.w	r1, r4, #12
 800a0f2:	0092      	lsls	r2, r2, #2
 800a0f4:	300c      	adds	r0, #12
 800a0f6:	f7fe fc57 	bl	80089a8 <memcpy>
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4638      	mov	r0, r7
 800a0fe:	f7ff ffa5 	bl	800a04c <_Bfree>
 800a102:	4644      	mov	r4, r8
 800a104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a108:	3501      	adds	r5, #1
 800a10a:	615e      	str	r6, [r3, #20]
 800a10c:	6125      	str	r5, [r4, #16]
 800a10e:	4620      	mov	r0, r4
 800a110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a114:	0800cff8 	.word	0x0800cff8
 800a118:	0800d09b 	.word	0x0800d09b

0800a11c <__s2b>:
 800a11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a120:	460c      	mov	r4, r1
 800a122:	4615      	mov	r5, r2
 800a124:	461f      	mov	r7, r3
 800a126:	2209      	movs	r2, #9
 800a128:	3308      	adds	r3, #8
 800a12a:	4606      	mov	r6, r0
 800a12c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a130:	2100      	movs	r1, #0
 800a132:	2201      	movs	r2, #1
 800a134:	429a      	cmp	r2, r3
 800a136:	db09      	blt.n	800a14c <__s2b+0x30>
 800a138:	4630      	mov	r0, r6
 800a13a:	f7ff ff47 	bl	8009fcc <_Balloc>
 800a13e:	b940      	cbnz	r0, 800a152 <__s2b+0x36>
 800a140:	4602      	mov	r2, r0
 800a142:	4b19      	ldr	r3, [pc, #100]	; (800a1a8 <__s2b+0x8c>)
 800a144:	4819      	ldr	r0, [pc, #100]	; (800a1ac <__s2b+0x90>)
 800a146:	21ce      	movs	r1, #206	; 0xce
 800a148:	f000 fea0 	bl	800ae8c <__assert_func>
 800a14c:	0052      	lsls	r2, r2, #1
 800a14e:	3101      	adds	r1, #1
 800a150:	e7f0      	b.n	800a134 <__s2b+0x18>
 800a152:	9b08      	ldr	r3, [sp, #32]
 800a154:	6143      	str	r3, [r0, #20]
 800a156:	2d09      	cmp	r5, #9
 800a158:	f04f 0301 	mov.w	r3, #1
 800a15c:	6103      	str	r3, [r0, #16]
 800a15e:	dd16      	ble.n	800a18e <__s2b+0x72>
 800a160:	f104 0909 	add.w	r9, r4, #9
 800a164:	46c8      	mov	r8, r9
 800a166:	442c      	add	r4, r5
 800a168:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a16c:	4601      	mov	r1, r0
 800a16e:	3b30      	subs	r3, #48	; 0x30
 800a170:	220a      	movs	r2, #10
 800a172:	4630      	mov	r0, r6
 800a174:	f7ff ff8c 	bl	800a090 <__multadd>
 800a178:	45a0      	cmp	r8, r4
 800a17a:	d1f5      	bne.n	800a168 <__s2b+0x4c>
 800a17c:	f1a5 0408 	sub.w	r4, r5, #8
 800a180:	444c      	add	r4, r9
 800a182:	1b2d      	subs	r5, r5, r4
 800a184:	1963      	adds	r3, r4, r5
 800a186:	42bb      	cmp	r3, r7
 800a188:	db04      	blt.n	800a194 <__s2b+0x78>
 800a18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a18e:	340a      	adds	r4, #10
 800a190:	2509      	movs	r5, #9
 800a192:	e7f6      	b.n	800a182 <__s2b+0x66>
 800a194:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a198:	4601      	mov	r1, r0
 800a19a:	3b30      	subs	r3, #48	; 0x30
 800a19c:	220a      	movs	r2, #10
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7ff ff76 	bl	800a090 <__multadd>
 800a1a4:	e7ee      	b.n	800a184 <__s2b+0x68>
 800a1a6:	bf00      	nop
 800a1a8:	0800cff8 	.word	0x0800cff8
 800a1ac:	0800d09b 	.word	0x0800d09b

0800a1b0 <__hi0bits>:
 800a1b0:	0c03      	lsrs	r3, r0, #16
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	b9d3      	cbnz	r3, 800a1ec <__hi0bits+0x3c>
 800a1b6:	0400      	lsls	r0, r0, #16
 800a1b8:	2310      	movs	r3, #16
 800a1ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a1be:	bf04      	itt	eq
 800a1c0:	0200      	lsleq	r0, r0, #8
 800a1c2:	3308      	addeq	r3, #8
 800a1c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a1c8:	bf04      	itt	eq
 800a1ca:	0100      	lsleq	r0, r0, #4
 800a1cc:	3304      	addeq	r3, #4
 800a1ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a1d2:	bf04      	itt	eq
 800a1d4:	0080      	lsleq	r0, r0, #2
 800a1d6:	3302      	addeq	r3, #2
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	db05      	blt.n	800a1e8 <__hi0bits+0x38>
 800a1dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a1e0:	f103 0301 	add.w	r3, r3, #1
 800a1e4:	bf08      	it	eq
 800a1e6:	2320      	moveq	r3, #32
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	4770      	bx	lr
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	e7e4      	b.n	800a1ba <__hi0bits+0xa>

0800a1f0 <__lo0bits>:
 800a1f0:	6803      	ldr	r3, [r0, #0]
 800a1f2:	f013 0207 	ands.w	r2, r3, #7
 800a1f6:	4601      	mov	r1, r0
 800a1f8:	d00b      	beq.n	800a212 <__lo0bits+0x22>
 800a1fa:	07da      	lsls	r2, r3, #31
 800a1fc:	d423      	bmi.n	800a246 <__lo0bits+0x56>
 800a1fe:	0798      	lsls	r0, r3, #30
 800a200:	bf49      	itett	mi
 800a202:	085b      	lsrmi	r3, r3, #1
 800a204:	089b      	lsrpl	r3, r3, #2
 800a206:	2001      	movmi	r0, #1
 800a208:	600b      	strmi	r3, [r1, #0]
 800a20a:	bf5c      	itt	pl
 800a20c:	600b      	strpl	r3, [r1, #0]
 800a20e:	2002      	movpl	r0, #2
 800a210:	4770      	bx	lr
 800a212:	b298      	uxth	r0, r3
 800a214:	b9a8      	cbnz	r0, 800a242 <__lo0bits+0x52>
 800a216:	0c1b      	lsrs	r3, r3, #16
 800a218:	2010      	movs	r0, #16
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	b90a      	cbnz	r2, 800a222 <__lo0bits+0x32>
 800a21e:	3008      	adds	r0, #8
 800a220:	0a1b      	lsrs	r3, r3, #8
 800a222:	071a      	lsls	r2, r3, #28
 800a224:	bf04      	itt	eq
 800a226:	091b      	lsreq	r3, r3, #4
 800a228:	3004      	addeq	r0, #4
 800a22a:	079a      	lsls	r2, r3, #30
 800a22c:	bf04      	itt	eq
 800a22e:	089b      	lsreq	r3, r3, #2
 800a230:	3002      	addeq	r0, #2
 800a232:	07da      	lsls	r2, r3, #31
 800a234:	d403      	bmi.n	800a23e <__lo0bits+0x4e>
 800a236:	085b      	lsrs	r3, r3, #1
 800a238:	f100 0001 	add.w	r0, r0, #1
 800a23c:	d005      	beq.n	800a24a <__lo0bits+0x5a>
 800a23e:	600b      	str	r3, [r1, #0]
 800a240:	4770      	bx	lr
 800a242:	4610      	mov	r0, r2
 800a244:	e7e9      	b.n	800a21a <__lo0bits+0x2a>
 800a246:	2000      	movs	r0, #0
 800a248:	4770      	bx	lr
 800a24a:	2020      	movs	r0, #32
 800a24c:	4770      	bx	lr
	...

0800a250 <__i2b>:
 800a250:	b510      	push	{r4, lr}
 800a252:	460c      	mov	r4, r1
 800a254:	2101      	movs	r1, #1
 800a256:	f7ff feb9 	bl	8009fcc <_Balloc>
 800a25a:	4602      	mov	r2, r0
 800a25c:	b928      	cbnz	r0, 800a26a <__i2b+0x1a>
 800a25e:	4b05      	ldr	r3, [pc, #20]	; (800a274 <__i2b+0x24>)
 800a260:	4805      	ldr	r0, [pc, #20]	; (800a278 <__i2b+0x28>)
 800a262:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a266:	f000 fe11 	bl	800ae8c <__assert_func>
 800a26a:	2301      	movs	r3, #1
 800a26c:	6144      	str	r4, [r0, #20]
 800a26e:	6103      	str	r3, [r0, #16]
 800a270:	bd10      	pop	{r4, pc}
 800a272:	bf00      	nop
 800a274:	0800cff8 	.word	0x0800cff8
 800a278:	0800d09b 	.word	0x0800d09b

0800a27c <__multiply>:
 800a27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a280:	4691      	mov	r9, r2
 800a282:	690a      	ldr	r2, [r1, #16]
 800a284:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a288:	429a      	cmp	r2, r3
 800a28a:	bfb8      	it	lt
 800a28c:	460b      	movlt	r3, r1
 800a28e:	460c      	mov	r4, r1
 800a290:	bfbc      	itt	lt
 800a292:	464c      	movlt	r4, r9
 800a294:	4699      	movlt	r9, r3
 800a296:	6927      	ldr	r7, [r4, #16]
 800a298:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a29c:	68a3      	ldr	r3, [r4, #8]
 800a29e:	6861      	ldr	r1, [r4, #4]
 800a2a0:	eb07 060a 	add.w	r6, r7, sl
 800a2a4:	42b3      	cmp	r3, r6
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	bfb8      	it	lt
 800a2aa:	3101      	addlt	r1, #1
 800a2ac:	f7ff fe8e 	bl	8009fcc <_Balloc>
 800a2b0:	b930      	cbnz	r0, 800a2c0 <__multiply+0x44>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	4b44      	ldr	r3, [pc, #272]	; (800a3c8 <__multiply+0x14c>)
 800a2b6:	4845      	ldr	r0, [pc, #276]	; (800a3cc <__multiply+0x150>)
 800a2b8:	f240 115d 	movw	r1, #349	; 0x15d
 800a2bc:	f000 fde6 	bl	800ae8c <__assert_func>
 800a2c0:	f100 0514 	add.w	r5, r0, #20
 800a2c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	4543      	cmp	r3, r8
 800a2ce:	d321      	bcc.n	800a314 <__multiply+0x98>
 800a2d0:	f104 0314 	add.w	r3, r4, #20
 800a2d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a2d8:	f109 0314 	add.w	r3, r9, #20
 800a2dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a2e0:	9202      	str	r2, [sp, #8]
 800a2e2:	1b3a      	subs	r2, r7, r4
 800a2e4:	3a15      	subs	r2, #21
 800a2e6:	f022 0203 	bic.w	r2, r2, #3
 800a2ea:	3204      	adds	r2, #4
 800a2ec:	f104 0115 	add.w	r1, r4, #21
 800a2f0:	428f      	cmp	r7, r1
 800a2f2:	bf38      	it	cc
 800a2f4:	2204      	movcc	r2, #4
 800a2f6:	9201      	str	r2, [sp, #4]
 800a2f8:	9a02      	ldr	r2, [sp, #8]
 800a2fa:	9303      	str	r3, [sp, #12]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d80c      	bhi.n	800a31a <__multiply+0x9e>
 800a300:	2e00      	cmp	r6, #0
 800a302:	dd03      	ble.n	800a30c <__multiply+0x90>
 800a304:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d05a      	beq.n	800a3c2 <__multiply+0x146>
 800a30c:	6106      	str	r6, [r0, #16]
 800a30e:	b005      	add	sp, #20
 800a310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a314:	f843 2b04 	str.w	r2, [r3], #4
 800a318:	e7d8      	b.n	800a2cc <__multiply+0x50>
 800a31a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a31e:	f1ba 0f00 	cmp.w	sl, #0
 800a322:	d024      	beq.n	800a36e <__multiply+0xf2>
 800a324:	f104 0e14 	add.w	lr, r4, #20
 800a328:	46a9      	mov	r9, r5
 800a32a:	f04f 0c00 	mov.w	ip, #0
 800a32e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a332:	f8d9 1000 	ldr.w	r1, [r9]
 800a336:	fa1f fb82 	uxth.w	fp, r2
 800a33a:	b289      	uxth	r1, r1
 800a33c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a340:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a344:	f8d9 2000 	ldr.w	r2, [r9]
 800a348:	4461      	add	r1, ip
 800a34a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a34e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a352:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a356:	b289      	uxth	r1, r1
 800a358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a35c:	4577      	cmp	r7, lr
 800a35e:	f849 1b04 	str.w	r1, [r9], #4
 800a362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a366:	d8e2      	bhi.n	800a32e <__multiply+0xb2>
 800a368:	9a01      	ldr	r2, [sp, #4]
 800a36a:	f845 c002 	str.w	ip, [r5, r2]
 800a36e:	9a03      	ldr	r2, [sp, #12]
 800a370:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a374:	3304      	adds	r3, #4
 800a376:	f1b9 0f00 	cmp.w	r9, #0
 800a37a:	d020      	beq.n	800a3be <__multiply+0x142>
 800a37c:	6829      	ldr	r1, [r5, #0]
 800a37e:	f104 0c14 	add.w	ip, r4, #20
 800a382:	46ae      	mov	lr, r5
 800a384:	f04f 0a00 	mov.w	sl, #0
 800a388:	f8bc b000 	ldrh.w	fp, [ip]
 800a38c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a390:	fb09 220b 	mla	r2, r9, fp, r2
 800a394:	4492      	add	sl, r2
 800a396:	b289      	uxth	r1, r1
 800a398:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a39c:	f84e 1b04 	str.w	r1, [lr], #4
 800a3a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3a4:	f8be 1000 	ldrh.w	r1, [lr]
 800a3a8:	0c12      	lsrs	r2, r2, #16
 800a3aa:	fb09 1102 	mla	r1, r9, r2, r1
 800a3ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a3b2:	4567      	cmp	r7, ip
 800a3b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3b8:	d8e6      	bhi.n	800a388 <__multiply+0x10c>
 800a3ba:	9a01      	ldr	r2, [sp, #4]
 800a3bc:	50a9      	str	r1, [r5, r2]
 800a3be:	3504      	adds	r5, #4
 800a3c0:	e79a      	b.n	800a2f8 <__multiply+0x7c>
 800a3c2:	3e01      	subs	r6, #1
 800a3c4:	e79c      	b.n	800a300 <__multiply+0x84>
 800a3c6:	bf00      	nop
 800a3c8:	0800cff8 	.word	0x0800cff8
 800a3cc:	0800d09b 	.word	0x0800d09b

0800a3d0 <__pow5mult>:
 800a3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d4:	4615      	mov	r5, r2
 800a3d6:	f012 0203 	ands.w	r2, r2, #3
 800a3da:	4606      	mov	r6, r0
 800a3dc:	460f      	mov	r7, r1
 800a3de:	d007      	beq.n	800a3f0 <__pow5mult+0x20>
 800a3e0:	4c25      	ldr	r4, [pc, #148]	; (800a478 <__pow5mult+0xa8>)
 800a3e2:	3a01      	subs	r2, #1
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3ea:	f7ff fe51 	bl	800a090 <__multadd>
 800a3ee:	4607      	mov	r7, r0
 800a3f0:	10ad      	asrs	r5, r5, #2
 800a3f2:	d03d      	beq.n	800a470 <__pow5mult+0xa0>
 800a3f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3f6:	b97c      	cbnz	r4, 800a418 <__pow5mult+0x48>
 800a3f8:	2010      	movs	r0, #16
 800a3fa:	f001 fbf1 	bl	800bbe0 <malloc>
 800a3fe:	4602      	mov	r2, r0
 800a400:	6270      	str	r0, [r6, #36]	; 0x24
 800a402:	b928      	cbnz	r0, 800a410 <__pow5mult+0x40>
 800a404:	4b1d      	ldr	r3, [pc, #116]	; (800a47c <__pow5mult+0xac>)
 800a406:	481e      	ldr	r0, [pc, #120]	; (800a480 <__pow5mult+0xb0>)
 800a408:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a40c:	f000 fd3e 	bl	800ae8c <__assert_func>
 800a410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a414:	6004      	str	r4, [r0, #0]
 800a416:	60c4      	str	r4, [r0, #12]
 800a418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a41c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a420:	b94c      	cbnz	r4, 800a436 <__pow5mult+0x66>
 800a422:	f240 2171 	movw	r1, #625	; 0x271
 800a426:	4630      	mov	r0, r6
 800a428:	f7ff ff12 	bl	800a250 <__i2b>
 800a42c:	2300      	movs	r3, #0
 800a42e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a432:	4604      	mov	r4, r0
 800a434:	6003      	str	r3, [r0, #0]
 800a436:	f04f 0900 	mov.w	r9, #0
 800a43a:	07eb      	lsls	r3, r5, #31
 800a43c:	d50a      	bpl.n	800a454 <__pow5mult+0x84>
 800a43e:	4639      	mov	r1, r7
 800a440:	4622      	mov	r2, r4
 800a442:	4630      	mov	r0, r6
 800a444:	f7ff ff1a 	bl	800a27c <__multiply>
 800a448:	4639      	mov	r1, r7
 800a44a:	4680      	mov	r8, r0
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff fdfd 	bl	800a04c <_Bfree>
 800a452:	4647      	mov	r7, r8
 800a454:	106d      	asrs	r5, r5, #1
 800a456:	d00b      	beq.n	800a470 <__pow5mult+0xa0>
 800a458:	6820      	ldr	r0, [r4, #0]
 800a45a:	b938      	cbnz	r0, 800a46c <__pow5mult+0x9c>
 800a45c:	4622      	mov	r2, r4
 800a45e:	4621      	mov	r1, r4
 800a460:	4630      	mov	r0, r6
 800a462:	f7ff ff0b 	bl	800a27c <__multiply>
 800a466:	6020      	str	r0, [r4, #0]
 800a468:	f8c0 9000 	str.w	r9, [r0]
 800a46c:	4604      	mov	r4, r0
 800a46e:	e7e4      	b.n	800a43a <__pow5mult+0x6a>
 800a470:	4638      	mov	r0, r7
 800a472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a476:	bf00      	nop
 800a478:	0800d1e8 	.word	0x0800d1e8
 800a47c:	0800d084 	.word	0x0800d084
 800a480:	0800d09b 	.word	0x0800d09b

0800a484 <__lshift>:
 800a484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a488:	460c      	mov	r4, r1
 800a48a:	6849      	ldr	r1, [r1, #4]
 800a48c:	6923      	ldr	r3, [r4, #16]
 800a48e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a492:	68a3      	ldr	r3, [r4, #8]
 800a494:	4607      	mov	r7, r0
 800a496:	4691      	mov	r9, r2
 800a498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a49c:	f108 0601 	add.w	r6, r8, #1
 800a4a0:	42b3      	cmp	r3, r6
 800a4a2:	db0b      	blt.n	800a4bc <__lshift+0x38>
 800a4a4:	4638      	mov	r0, r7
 800a4a6:	f7ff fd91 	bl	8009fcc <_Balloc>
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	b948      	cbnz	r0, 800a4c2 <__lshift+0x3e>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	4b2a      	ldr	r3, [pc, #168]	; (800a55c <__lshift+0xd8>)
 800a4b2:	482b      	ldr	r0, [pc, #172]	; (800a560 <__lshift+0xdc>)
 800a4b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a4b8:	f000 fce8 	bl	800ae8c <__assert_func>
 800a4bc:	3101      	adds	r1, #1
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	e7ee      	b.n	800a4a0 <__lshift+0x1c>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f100 0114 	add.w	r1, r0, #20
 800a4c8:	f100 0210 	add.w	r2, r0, #16
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	4553      	cmp	r3, sl
 800a4d0:	db37      	blt.n	800a542 <__lshift+0xbe>
 800a4d2:	6920      	ldr	r0, [r4, #16]
 800a4d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4d8:	f104 0314 	add.w	r3, r4, #20
 800a4dc:	f019 091f 	ands.w	r9, r9, #31
 800a4e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a4e8:	d02f      	beq.n	800a54a <__lshift+0xc6>
 800a4ea:	f1c9 0e20 	rsb	lr, r9, #32
 800a4ee:	468a      	mov	sl, r1
 800a4f0:	f04f 0c00 	mov.w	ip, #0
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	fa02 f209 	lsl.w	r2, r2, r9
 800a4fa:	ea42 020c 	orr.w	r2, r2, ip
 800a4fe:	f84a 2b04 	str.w	r2, [sl], #4
 800a502:	f853 2b04 	ldr.w	r2, [r3], #4
 800a506:	4298      	cmp	r0, r3
 800a508:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a50c:	d8f2      	bhi.n	800a4f4 <__lshift+0x70>
 800a50e:	1b03      	subs	r3, r0, r4
 800a510:	3b15      	subs	r3, #21
 800a512:	f023 0303 	bic.w	r3, r3, #3
 800a516:	3304      	adds	r3, #4
 800a518:	f104 0215 	add.w	r2, r4, #21
 800a51c:	4290      	cmp	r0, r2
 800a51e:	bf38      	it	cc
 800a520:	2304      	movcc	r3, #4
 800a522:	f841 c003 	str.w	ip, [r1, r3]
 800a526:	f1bc 0f00 	cmp.w	ip, #0
 800a52a:	d001      	beq.n	800a530 <__lshift+0xac>
 800a52c:	f108 0602 	add.w	r6, r8, #2
 800a530:	3e01      	subs	r6, #1
 800a532:	4638      	mov	r0, r7
 800a534:	612e      	str	r6, [r5, #16]
 800a536:	4621      	mov	r1, r4
 800a538:	f7ff fd88 	bl	800a04c <_Bfree>
 800a53c:	4628      	mov	r0, r5
 800a53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a542:	f842 0f04 	str.w	r0, [r2, #4]!
 800a546:	3301      	adds	r3, #1
 800a548:	e7c1      	b.n	800a4ce <__lshift+0x4a>
 800a54a:	3904      	subs	r1, #4
 800a54c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a550:	f841 2f04 	str.w	r2, [r1, #4]!
 800a554:	4298      	cmp	r0, r3
 800a556:	d8f9      	bhi.n	800a54c <__lshift+0xc8>
 800a558:	e7ea      	b.n	800a530 <__lshift+0xac>
 800a55a:	bf00      	nop
 800a55c:	0800cff8 	.word	0x0800cff8
 800a560:	0800d09b 	.word	0x0800d09b

0800a564 <__mcmp>:
 800a564:	b530      	push	{r4, r5, lr}
 800a566:	6902      	ldr	r2, [r0, #16]
 800a568:	690c      	ldr	r4, [r1, #16]
 800a56a:	1b12      	subs	r2, r2, r4
 800a56c:	d10e      	bne.n	800a58c <__mcmp+0x28>
 800a56e:	f100 0314 	add.w	r3, r0, #20
 800a572:	3114      	adds	r1, #20
 800a574:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a578:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a57c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a580:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a584:	42a5      	cmp	r5, r4
 800a586:	d003      	beq.n	800a590 <__mcmp+0x2c>
 800a588:	d305      	bcc.n	800a596 <__mcmp+0x32>
 800a58a:	2201      	movs	r2, #1
 800a58c:	4610      	mov	r0, r2
 800a58e:	bd30      	pop	{r4, r5, pc}
 800a590:	4283      	cmp	r3, r0
 800a592:	d3f3      	bcc.n	800a57c <__mcmp+0x18>
 800a594:	e7fa      	b.n	800a58c <__mcmp+0x28>
 800a596:	f04f 32ff 	mov.w	r2, #4294967295
 800a59a:	e7f7      	b.n	800a58c <__mcmp+0x28>

0800a59c <__mdiff>:
 800a59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	4690      	mov	r8, r2
 800a5aa:	f7ff ffdb 	bl	800a564 <__mcmp>
 800a5ae:	1e05      	subs	r5, r0, #0
 800a5b0:	d110      	bne.n	800a5d4 <__mdiff+0x38>
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f7ff fd09 	bl	8009fcc <_Balloc>
 800a5ba:	b930      	cbnz	r0, 800a5ca <__mdiff+0x2e>
 800a5bc:	4b3a      	ldr	r3, [pc, #232]	; (800a6a8 <__mdiff+0x10c>)
 800a5be:	4602      	mov	r2, r0
 800a5c0:	f240 2132 	movw	r1, #562	; 0x232
 800a5c4:	4839      	ldr	r0, [pc, #228]	; (800a6ac <__mdiff+0x110>)
 800a5c6:	f000 fc61 	bl	800ae8c <__assert_func>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d4:	bfa4      	itt	ge
 800a5d6:	4643      	movge	r3, r8
 800a5d8:	46a0      	movge	r8, r4
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a5e0:	bfa6      	itte	ge
 800a5e2:	461c      	movge	r4, r3
 800a5e4:	2500      	movge	r5, #0
 800a5e6:	2501      	movlt	r5, #1
 800a5e8:	f7ff fcf0 	bl	8009fcc <_Balloc>
 800a5ec:	b920      	cbnz	r0, 800a5f8 <__mdiff+0x5c>
 800a5ee:	4b2e      	ldr	r3, [pc, #184]	; (800a6a8 <__mdiff+0x10c>)
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a5f6:	e7e5      	b.n	800a5c4 <__mdiff+0x28>
 800a5f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a5fc:	6926      	ldr	r6, [r4, #16]
 800a5fe:	60c5      	str	r5, [r0, #12]
 800a600:	f104 0914 	add.w	r9, r4, #20
 800a604:	f108 0514 	add.w	r5, r8, #20
 800a608:	f100 0e14 	add.w	lr, r0, #20
 800a60c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a610:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a614:	f108 0210 	add.w	r2, r8, #16
 800a618:	46f2      	mov	sl, lr
 800a61a:	2100      	movs	r1, #0
 800a61c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a620:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a624:	fa1f f883 	uxth.w	r8, r3
 800a628:	fa11 f18b 	uxtah	r1, r1, fp
 800a62c:	0c1b      	lsrs	r3, r3, #16
 800a62e:	eba1 0808 	sub.w	r8, r1, r8
 800a632:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a636:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a63a:	fa1f f888 	uxth.w	r8, r8
 800a63e:	1419      	asrs	r1, r3, #16
 800a640:	454e      	cmp	r6, r9
 800a642:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a646:	f84a 3b04 	str.w	r3, [sl], #4
 800a64a:	d8e7      	bhi.n	800a61c <__mdiff+0x80>
 800a64c:	1b33      	subs	r3, r6, r4
 800a64e:	3b15      	subs	r3, #21
 800a650:	f023 0303 	bic.w	r3, r3, #3
 800a654:	3304      	adds	r3, #4
 800a656:	3415      	adds	r4, #21
 800a658:	42a6      	cmp	r6, r4
 800a65a:	bf38      	it	cc
 800a65c:	2304      	movcc	r3, #4
 800a65e:	441d      	add	r5, r3
 800a660:	4473      	add	r3, lr
 800a662:	469e      	mov	lr, r3
 800a664:	462e      	mov	r6, r5
 800a666:	4566      	cmp	r6, ip
 800a668:	d30e      	bcc.n	800a688 <__mdiff+0xec>
 800a66a:	f10c 0203 	add.w	r2, ip, #3
 800a66e:	1b52      	subs	r2, r2, r5
 800a670:	f022 0203 	bic.w	r2, r2, #3
 800a674:	3d03      	subs	r5, #3
 800a676:	45ac      	cmp	ip, r5
 800a678:	bf38      	it	cc
 800a67a:	2200      	movcc	r2, #0
 800a67c:	441a      	add	r2, r3
 800a67e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a682:	b17b      	cbz	r3, 800a6a4 <__mdiff+0x108>
 800a684:	6107      	str	r7, [r0, #16]
 800a686:	e7a3      	b.n	800a5d0 <__mdiff+0x34>
 800a688:	f856 8b04 	ldr.w	r8, [r6], #4
 800a68c:	fa11 f288 	uxtah	r2, r1, r8
 800a690:	1414      	asrs	r4, r2, #16
 800a692:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a696:	b292      	uxth	r2, r2
 800a698:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a69c:	f84e 2b04 	str.w	r2, [lr], #4
 800a6a0:	1421      	asrs	r1, r4, #16
 800a6a2:	e7e0      	b.n	800a666 <__mdiff+0xca>
 800a6a4:	3f01      	subs	r7, #1
 800a6a6:	e7ea      	b.n	800a67e <__mdiff+0xe2>
 800a6a8:	0800cff8 	.word	0x0800cff8
 800a6ac:	0800d09b 	.word	0x0800d09b

0800a6b0 <__ulp>:
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	ed8d 0b00 	vstr	d0, [sp]
 800a6b6:	9b01      	ldr	r3, [sp, #4]
 800a6b8:	4912      	ldr	r1, [pc, #72]	; (800a704 <__ulp+0x54>)
 800a6ba:	4019      	ands	r1, r3
 800a6bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a6c0:	2900      	cmp	r1, #0
 800a6c2:	dd05      	ble.n	800a6d0 <__ulp+0x20>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	ec43 2b10 	vmov	d0, r2, r3
 800a6cc:	b002      	add	sp, #8
 800a6ce:	4770      	bx	lr
 800a6d0:	4249      	negs	r1, r1
 800a6d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a6d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a6da:	f04f 0200 	mov.w	r2, #0
 800a6de:	f04f 0300 	mov.w	r3, #0
 800a6e2:	da04      	bge.n	800a6ee <__ulp+0x3e>
 800a6e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a6e8:	fa41 f300 	asr.w	r3, r1, r0
 800a6ec:	e7ec      	b.n	800a6c8 <__ulp+0x18>
 800a6ee:	f1a0 0114 	sub.w	r1, r0, #20
 800a6f2:	291e      	cmp	r1, #30
 800a6f4:	bfda      	itte	le
 800a6f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a6fa:	fa20 f101 	lsrle.w	r1, r0, r1
 800a6fe:	2101      	movgt	r1, #1
 800a700:	460a      	mov	r2, r1
 800a702:	e7e1      	b.n	800a6c8 <__ulp+0x18>
 800a704:	7ff00000 	.word	0x7ff00000

0800a708 <__b2d>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	6905      	ldr	r5, [r0, #16]
 800a70c:	f100 0714 	add.w	r7, r0, #20
 800a710:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a714:	1f2e      	subs	r6, r5, #4
 800a716:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a71a:	4620      	mov	r0, r4
 800a71c:	f7ff fd48 	bl	800a1b0 <__hi0bits>
 800a720:	f1c0 0320 	rsb	r3, r0, #32
 800a724:	280a      	cmp	r0, #10
 800a726:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a7a4 <__b2d+0x9c>
 800a72a:	600b      	str	r3, [r1, #0]
 800a72c:	dc14      	bgt.n	800a758 <__b2d+0x50>
 800a72e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a732:	fa24 f10e 	lsr.w	r1, r4, lr
 800a736:	42b7      	cmp	r7, r6
 800a738:	ea41 030c 	orr.w	r3, r1, ip
 800a73c:	bf34      	ite	cc
 800a73e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a742:	2100      	movcs	r1, #0
 800a744:	3015      	adds	r0, #21
 800a746:	fa04 f000 	lsl.w	r0, r4, r0
 800a74a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a74e:	ea40 0201 	orr.w	r2, r0, r1
 800a752:	ec43 2b10 	vmov	d0, r2, r3
 800a756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a758:	42b7      	cmp	r7, r6
 800a75a:	bf3a      	itte	cc
 800a75c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a760:	f1a5 0608 	subcc.w	r6, r5, #8
 800a764:	2100      	movcs	r1, #0
 800a766:	380b      	subs	r0, #11
 800a768:	d017      	beq.n	800a79a <__b2d+0x92>
 800a76a:	f1c0 0c20 	rsb	ip, r0, #32
 800a76e:	fa04 f500 	lsl.w	r5, r4, r0
 800a772:	42be      	cmp	r6, r7
 800a774:	fa21 f40c 	lsr.w	r4, r1, ip
 800a778:	ea45 0504 	orr.w	r5, r5, r4
 800a77c:	bf8c      	ite	hi
 800a77e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a782:	2400      	movls	r4, #0
 800a784:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a788:	fa01 f000 	lsl.w	r0, r1, r0
 800a78c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a790:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a794:	ea40 0204 	orr.w	r2, r0, r4
 800a798:	e7db      	b.n	800a752 <__b2d+0x4a>
 800a79a:	ea44 030c 	orr.w	r3, r4, ip
 800a79e:	460a      	mov	r2, r1
 800a7a0:	e7d7      	b.n	800a752 <__b2d+0x4a>
 800a7a2:	bf00      	nop
 800a7a4:	3ff00000 	.word	0x3ff00000

0800a7a8 <__d2b>:
 800a7a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7ac:	4689      	mov	r9, r1
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	ec57 6b10 	vmov	r6, r7, d0
 800a7b4:	4690      	mov	r8, r2
 800a7b6:	f7ff fc09 	bl	8009fcc <_Balloc>
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	b930      	cbnz	r0, 800a7cc <__d2b+0x24>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	4b25      	ldr	r3, [pc, #148]	; (800a858 <__d2b+0xb0>)
 800a7c2:	4826      	ldr	r0, [pc, #152]	; (800a85c <__d2b+0xb4>)
 800a7c4:	f240 310a 	movw	r1, #778	; 0x30a
 800a7c8:	f000 fb60 	bl	800ae8c <__assert_func>
 800a7cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a7d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7d4:	bb35      	cbnz	r5, 800a824 <__d2b+0x7c>
 800a7d6:	2e00      	cmp	r6, #0
 800a7d8:	9301      	str	r3, [sp, #4]
 800a7da:	d028      	beq.n	800a82e <__d2b+0x86>
 800a7dc:	4668      	mov	r0, sp
 800a7de:	9600      	str	r6, [sp, #0]
 800a7e0:	f7ff fd06 	bl	800a1f0 <__lo0bits>
 800a7e4:	9900      	ldr	r1, [sp, #0]
 800a7e6:	b300      	cbz	r0, 800a82a <__d2b+0x82>
 800a7e8:	9a01      	ldr	r2, [sp, #4]
 800a7ea:	f1c0 0320 	rsb	r3, r0, #32
 800a7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f2:	430b      	orrs	r3, r1
 800a7f4:	40c2      	lsrs	r2, r0
 800a7f6:	6163      	str	r3, [r4, #20]
 800a7f8:	9201      	str	r2, [sp, #4]
 800a7fa:	9b01      	ldr	r3, [sp, #4]
 800a7fc:	61a3      	str	r3, [r4, #24]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bf14      	ite	ne
 800a802:	2202      	movne	r2, #2
 800a804:	2201      	moveq	r2, #1
 800a806:	6122      	str	r2, [r4, #16]
 800a808:	b1d5      	cbz	r5, 800a840 <__d2b+0x98>
 800a80a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a80e:	4405      	add	r5, r0
 800a810:	f8c9 5000 	str.w	r5, [r9]
 800a814:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a818:	f8c8 0000 	str.w	r0, [r8]
 800a81c:	4620      	mov	r0, r4
 800a81e:	b003      	add	sp, #12
 800a820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a828:	e7d5      	b.n	800a7d6 <__d2b+0x2e>
 800a82a:	6161      	str	r1, [r4, #20]
 800a82c:	e7e5      	b.n	800a7fa <__d2b+0x52>
 800a82e:	a801      	add	r0, sp, #4
 800a830:	f7ff fcde 	bl	800a1f0 <__lo0bits>
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	6163      	str	r3, [r4, #20]
 800a838:	2201      	movs	r2, #1
 800a83a:	6122      	str	r2, [r4, #16]
 800a83c:	3020      	adds	r0, #32
 800a83e:	e7e3      	b.n	800a808 <__d2b+0x60>
 800a840:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a844:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a848:	f8c9 0000 	str.w	r0, [r9]
 800a84c:	6918      	ldr	r0, [r3, #16]
 800a84e:	f7ff fcaf 	bl	800a1b0 <__hi0bits>
 800a852:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a856:	e7df      	b.n	800a818 <__d2b+0x70>
 800a858:	0800cff8 	.word	0x0800cff8
 800a85c:	0800d09b 	.word	0x0800d09b

0800a860 <__ratio>:
 800a860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	4688      	mov	r8, r1
 800a866:	4669      	mov	r1, sp
 800a868:	4681      	mov	r9, r0
 800a86a:	f7ff ff4d 	bl	800a708 <__b2d>
 800a86e:	a901      	add	r1, sp, #4
 800a870:	4640      	mov	r0, r8
 800a872:	ec55 4b10 	vmov	r4, r5, d0
 800a876:	f7ff ff47 	bl	800a708 <__b2d>
 800a87a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a87e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a882:	eba3 0c02 	sub.w	ip, r3, r2
 800a886:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a88a:	1a9b      	subs	r3, r3, r2
 800a88c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a890:	ec51 0b10 	vmov	r0, r1, d0
 800a894:	2b00      	cmp	r3, #0
 800a896:	bfd6      	itet	le
 800a898:	460a      	movle	r2, r1
 800a89a:	462a      	movgt	r2, r5
 800a89c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8a0:	468b      	mov	fp, r1
 800a8a2:	462f      	mov	r7, r5
 800a8a4:	bfd4      	ite	le
 800a8a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a8aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	ee10 2a10 	vmov	r2, s0
 800a8b4:	465b      	mov	r3, fp
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	f7f5 ffe8 	bl	800088c <__aeabi_ddiv>
 800a8bc:	ec41 0b10 	vmov	d0, r0, r1
 800a8c0:	b003      	add	sp, #12
 800a8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a8c8 <_mprec_log10>:
 800a8c8:	2817      	cmp	r0, #23
 800a8ca:	b5d0      	push	{r4, r6, r7, lr}
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	dc07      	bgt.n	800a8e0 <_mprec_log10+0x18>
 800a8d0:	4809      	ldr	r0, [pc, #36]	; (800a8f8 <_mprec_log10+0x30>)
 800a8d2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800a8d6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a8da:	ec41 0b10 	vmov	d0, r0, r1
 800a8de:	bdd0      	pop	{r4, r6, r7, pc}
 800a8e0:	4906      	ldr	r1, [pc, #24]	; (800a8fc <_mprec_log10+0x34>)
 800a8e2:	4f07      	ldr	r7, [pc, #28]	; (800a900 <_mprec_log10+0x38>)
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	2600      	movs	r6, #0
 800a8e8:	4632      	mov	r2, r6
 800a8ea:	463b      	mov	r3, r7
 800a8ec:	f7f5 fea4 	bl	8000638 <__aeabi_dmul>
 800a8f0:	3c01      	subs	r4, #1
 800a8f2:	d1f9      	bne.n	800a8e8 <_mprec_log10+0x20>
 800a8f4:	e7f1      	b.n	800a8da <_mprec_log10+0x12>
 800a8f6:	bf00      	nop
 800a8f8:	0800d120 	.word	0x0800d120
 800a8fc:	3ff00000 	.word	0x3ff00000
 800a900:	40240000 	.word	0x40240000

0800a904 <__copybits>:
 800a904:	3901      	subs	r1, #1
 800a906:	b570      	push	{r4, r5, r6, lr}
 800a908:	1149      	asrs	r1, r1, #5
 800a90a:	6914      	ldr	r4, [r2, #16]
 800a90c:	3101      	adds	r1, #1
 800a90e:	f102 0314 	add.w	r3, r2, #20
 800a912:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a916:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a91a:	1f05      	subs	r5, r0, #4
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	d30c      	bcc.n	800a93a <__copybits+0x36>
 800a920:	1aa3      	subs	r3, r4, r2
 800a922:	3b11      	subs	r3, #17
 800a924:	f023 0303 	bic.w	r3, r3, #3
 800a928:	3211      	adds	r2, #17
 800a92a:	42a2      	cmp	r2, r4
 800a92c:	bf88      	it	hi
 800a92e:	2300      	movhi	r3, #0
 800a930:	4418      	add	r0, r3
 800a932:	2300      	movs	r3, #0
 800a934:	4288      	cmp	r0, r1
 800a936:	d305      	bcc.n	800a944 <__copybits+0x40>
 800a938:	bd70      	pop	{r4, r5, r6, pc}
 800a93a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a93e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a942:	e7eb      	b.n	800a91c <__copybits+0x18>
 800a944:	f840 3b04 	str.w	r3, [r0], #4
 800a948:	e7f4      	b.n	800a934 <__copybits+0x30>

0800a94a <__any_on>:
 800a94a:	f100 0214 	add.w	r2, r0, #20
 800a94e:	6900      	ldr	r0, [r0, #16]
 800a950:	114b      	asrs	r3, r1, #5
 800a952:	4298      	cmp	r0, r3
 800a954:	b510      	push	{r4, lr}
 800a956:	db11      	blt.n	800a97c <__any_on+0x32>
 800a958:	dd0a      	ble.n	800a970 <__any_on+0x26>
 800a95a:	f011 011f 	ands.w	r1, r1, #31
 800a95e:	d007      	beq.n	800a970 <__any_on+0x26>
 800a960:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a964:	fa24 f001 	lsr.w	r0, r4, r1
 800a968:	fa00 f101 	lsl.w	r1, r0, r1
 800a96c:	428c      	cmp	r4, r1
 800a96e:	d10b      	bne.n	800a988 <__any_on+0x3e>
 800a970:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a974:	4293      	cmp	r3, r2
 800a976:	d803      	bhi.n	800a980 <__any_on+0x36>
 800a978:	2000      	movs	r0, #0
 800a97a:	bd10      	pop	{r4, pc}
 800a97c:	4603      	mov	r3, r0
 800a97e:	e7f7      	b.n	800a970 <__any_on+0x26>
 800a980:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a984:	2900      	cmp	r1, #0
 800a986:	d0f5      	beq.n	800a974 <__any_on+0x2a>
 800a988:	2001      	movs	r0, #1
 800a98a:	e7f6      	b.n	800a97a <__any_on+0x30>

0800a98c <_calloc_r>:
 800a98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a98e:	fba1 2402 	umull	r2, r4, r1, r2
 800a992:	b94c      	cbnz	r4, 800a9a8 <_calloc_r+0x1c>
 800a994:	4611      	mov	r1, r2
 800a996:	9201      	str	r2, [sp, #4]
 800a998:	f000 f82e 	bl	800a9f8 <_malloc_r>
 800a99c:	9a01      	ldr	r2, [sp, #4]
 800a99e:	4605      	mov	r5, r0
 800a9a0:	b930      	cbnz	r0, 800a9b0 <_calloc_r+0x24>
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	b003      	add	sp, #12
 800a9a6:	bd30      	pop	{r4, r5, pc}
 800a9a8:	220c      	movs	r2, #12
 800a9aa:	6002      	str	r2, [r0, #0]
 800a9ac:	2500      	movs	r5, #0
 800a9ae:	e7f8      	b.n	800a9a2 <_calloc_r+0x16>
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	f7fe f807 	bl	80089c4 <memset>
 800a9b6:	e7f4      	b.n	800a9a2 <_calloc_r+0x16>

0800a9b8 <sbrk_aligned>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	4e0e      	ldr	r6, [pc, #56]	; (800a9f4 <sbrk_aligned+0x3c>)
 800a9bc:	460c      	mov	r4, r1
 800a9be:	6831      	ldr	r1, [r6, #0]
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	b911      	cbnz	r1, 800a9ca <sbrk_aligned+0x12>
 800a9c4:	f000 fa28 	bl	800ae18 <_sbrk_r>
 800a9c8:	6030      	str	r0, [r6, #0]
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	f000 fa23 	bl	800ae18 <_sbrk_r>
 800a9d2:	1c43      	adds	r3, r0, #1
 800a9d4:	d00a      	beq.n	800a9ec <sbrk_aligned+0x34>
 800a9d6:	1cc4      	adds	r4, r0, #3
 800a9d8:	f024 0403 	bic.w	r4, r4, #3
 800a9dc:	42a0      	cmp	r0, r4
 800a9de:	d007      	beq.n	800a9f0 <sbrk_aligned+0x38>
 800a9e0:	1a21      	subs	r1, r4, r0
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	f000 fa18 	bl	800ae18 <_sbrk_r>
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	d101      	bne.n	800a9f0 <sbrk_aligned+0x38>
 800a9ec:	f04f 34ff 	mov.w	r4, #4294967295
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	2000099c 	.word	0x2000099c

0800a9f8 <_malloc_r>:
 800a9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fc:	1ccd      	adds	r5, r1, #3
 800a9fe:	f025 0503 	bic.w	r5, r5, #3
 800aa02:	3508      	adds	r5, #8
 800aa04:	2d0c      	cmp	r5, #12
 800aa06:	bf38      	it	cc
 800aa08:	250c      	movcc	r5, #12
 800aa0a:	2d00      	cmp	r5, #0
 800aa0c:	4607      	mov	r7, r0
 800aa0e:	db01      	blt.n	800aa14 <_malloc_r+0x1c>
 800aa10:	42a9      	cmp	r1, r5
 800aa12:	d905      	bls.n	800aa20 <_malloc_r+0x28>
 800aa14:	230c      	movs	r3, #12
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	2600      	movs	r6, #0
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa20:	4e2e      	ldr	r6, [pc, #184]	; (800aadc <_malloc_r+0xe4>)
 800aa22:	f001 f8e5 	bl	800bbf0 <__malloc_lock>
 800aa26:	6833      	ldr	r3, [r6, #0]
 800aa28:	461c      	mov	r4, r3
 800aa2a:	bb34      	cbnz	r4, 800aa7a <_malloc_r+0x82>
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	4638      	mov	r0, r7
 800aa30:	f7ff ffc2 	bl	800a9b8 <sbrk_aligned>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	4604      	mov	r4, r0
 800aa38:	d14d      	bne.n	800aad6 <_malloc_r+0xde>
 800aa3a:	6834      	ldr	r4, [r6, #0]
 800aa3c:	4626      	mov	r6, r4
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	d140      	bne.n	800aac4 <_malloc_r+0xcc>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	4631      	mov	r1, r6
 800aa46:	4638      	mov	r0, r7
 800aa48:	eb04 0803 	add.w	r8, r4, r3
 800aa4c:	f000 f9e4 	bl	800ae18 <_sbrk_r>
 800aa50:	4580      	cmp	r8, r0
 800aa52:	d13a      	bne.n	800aaca <_malloc_r+0xd2>
 800aa54:	6821      	ldr	r1, [r4, #0]
 800aa56:	3503      	adds	r5, #3
 800aa58:	1a6d      	subs	r5, r5, r1
 800aa5a:	f025 0503 	bic.w	r5, r5, #3
 800aa5e:	3508      	adds	r5, #8
 800aa60:	2d0c      	cmp	r5, #12
 800aa62:	bf38      	it	cc
 800aa64:	250c      	movcc	r5, #12
 800aa66:	4629      	mov	r1, r5
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7ff ffa5 	bl	800a9b8 <sbrk_aligned>
 800aa6e:	3001      	adds	r0, #1
 800aa70:	d02b      	beq.n	800aaca <_malloc_r+0xd2>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	442b      	add	r3, r5
 800aa76:	6023      	str	r3, [r4, #0]
 800aa78:	e00e      	b.n	800aa98 <_malloc_r+0xa0>
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	1b52      	subs	r2, r2, r5
 800aa7e:	d41e      	bmi.n	800aabe <_malloc_r+0xc6>
 800aa80:	2a0b      	cmp	r2, #11
 800aa82:	d916      	bls.n	800aab2 <_malloc_r+0xba>
 800aa84:	1961      	adds	r1, r4, r5
 800aa86:	42a3      	cmp	r3, r4
 800aa88:	6025      	str	r5, [r4, #0]
 800aa8a:	bf18      	it	ne
 800aa8c:	6059      	strne	r1, [r3, #4]
 800aa8e:	6863      	ldr	r3, [r4, #4]
 800aa90:	bf08      	it	eq
 800aa92:	6031      	streq	r1, [r6, #0]
 800aa94:	5162      	str	r2, [r4, r5]
 800aa96:	604b      	str	r3, [r1, #4]
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f104 060b 	add.w	r6, r4, #11
 800aa9e:	f001 f8ad 	bl	800bbfc <__malloc_unlock>
 800aaa2:	f026 0607 	bic.w	r6, r6, #7
 800aaa6:	1d23      	adds	r3, r4, #4
 800aaa8:	1af2      	subs	r2, r6, r3
 800aaaa:	d0b6      	beq.n	800aa1a <_malloc_r+0x22>
 800aaac:	1b9b      	subs	r3, r3, r6
 800aaae:	50a3      	str	r3, [r4, r2]
 800aab0:	e7b3      	b.n	800aa1a <_malloc_r+0x22>
 800aab2:	6862      	ldr	r2, [r4, #4]
 800aab4:	42a3      	cmp	r3, r4
 800aab6:	bf0c      	ite	eq
 800aab8:	6032      	streq	r2, [r6, #0]
 800aaba:	605a      	strne	r2, [r3, #4]
 800aabc:	e7ec      	b.n	800aa98 <_malloc_r+0xa0>
 800aabe:	4623      	mov	r3, r4
 800aac0:	6864      	ldr	r4, [r4, #4]
 800aac2:	e7b2      	b.n	800aa2a <_malloc_r+0x32>
 800aac4:	4634      	mov	r4, r6
 800aac6:	6876      	ldr	r6, [r6, #4]
 800aac8:	e7b9      	b.n	800aa3e <_malloc_r+0x46>
 800aaca:	230c      	movs	r3, #12
 800aacc:	603b      	str	r3, [r7, #0]
 800aace:	4638      	mov	r0, r7
 800aad0:	f001 f894 	bl	800bbfc <__malloc_unlock>
 800aad4:	e7a1      	b.n	800aa1a <_malloc_r+0x22>
 800aad6:	6025      	str	r5, [r4, #0]
 800aad8:	e7de      	b.n	800aa98 <_malloc_r+0xa0>
 800aada:	bf00      	nop
 800aadc:	20000998 	.word	0x20000998

0800aae0 <_printf_common>:
 800aae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae4:	4616      	mov	r6, r2
 800aae6:	4699      	mov	r9, r3
 800aae8:	688a      	ldr	r2, [r1, #8]
 800aaea:	690b      	ldr	r3, [r1, #16]
 800aaec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	bfb8      	it	lt
 800aaf4:	4613      	movlt	r3, r2
 800aaf6:	6033      	str	r3, [r6, #0]
 800aaf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aafc:	4607      	mov	r7, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	b10a      	cbz	r2, 800ab06 <_printf_common+0x26>
 800ab02:	3301      	adds	r3, #1
 800ab04:	6033      	str	r3, [r6, #0]
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	0699      	lsls	r1, r3, #26
 800ab0a:	bf42      	ittt	mi
 800ab0c:	6833      	ldrmi	r3, [r6, #0]
 800ab0e:	3302      	addmi	r3, #2
 800ab10:	6033      	strmi	r3, [r6, #0]
 800ab12:	6825      	ldr	r5, [r4, #0]
 800ab14:	f015 0506 	ands.w	r5, r5, #6
 800ab18:	d106      	bne.n	800ab28 <_printf_common+0x48>
 800ab1a:	f104 0a19 	add.w	sl, r4, #25
 800ab1e:	68e3      	ldr	r3, [r4, #12]
 800ab20:	6832      	ldr	r2, [r6, #0]
 800ab22:	1a9b      	subs	r3, r3, r2
 800ab24:	42ab      	cmp	r3, r5
 800ab26:	dc26      	bgt.n	800ab76 <_printf_common+0x96>
 800ab28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab2c:	1e13      	subs	r3, r2, #0
 800ab2e:	6822      	ldr	r2, [r4, #0]
 800ab30:	bf18      	it	ne
 800ab32:	2301      	movne	r3, #1
 800ab34:	0692      	lsls	r2, r2, #26
 800ab36:	d42b      	bmi.n	800ab90 <_printf_common+0xb0>
 800ab38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	4638      	mov	r0, r7
 800ab40:	47c0      	blx	r8
 800ab42:	3001      	adds	r0, #1
 800ab44:	d01e      	beq.n	800ab84 <_printf_common+0xa4>
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	68e5      	ldr	r5, [r4, #12]
 800ab4a:	6832      	ldr	r2, [r6, #0]
 800ab4c:	f003 0306 	and.w	r3, r3, #6
 800ab50:	2b04      	cmp	r3, #4
 800ab52:	bf08      	it	eq
 800ab54:	1aad      	subeq	r5, r5, r2
 800ab56:	68a3      	ldr	r3, [r4, #8]
 800ab58:	6922      	ldr	r2, [r4, #16]
 800ab5a:	bf0c      	ite	eq
 800ab5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab60:	2500      	movne	r5, #0
 800ab62:	4293      	cmp	r3, r2
 800ab64:	bfc4      	itt	gt
 800ab66:	1a9b      	subgt	r3, r3, r2
 800ab68:	18ed      	addgt	r5, r5, r3
 800ab6a:	2600      	movs	r6, #0
 800ab6c:	341a      	adds	r4, #26
 800ab6e:	42b5      	cmp	r5, r6
 800ab70:	d11a      	bne.n	800aba8 <_printf_common+0xc8>
 800ab72:	2000      	movs	r0, #0
 800ab74:	e008      	b.n	800ab88 <_printf_common+0xa8>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4652      	mov	r2, sl
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	47c0      	blx	r8
 800ab80:	3001      	adds	r0, #1
 800ab82:	d103      	bne.n	800ab8c <_printf_common+0xac>
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab8c:	3501      	adds	r5, #1
 800ab8e:	e7c6      	b.n	800ab1e <_printf_common+0x3e>
 800ab90:	18e1      	adds	r1, r4, r3
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	2030      	movs	r0, #48	; 0x30
 800ab96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab9a:	4422      	add	r2, r4
 800ab9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aba4:	3302      	adds	r3, #2
 800aba6:	e7c7      	b.n	800ab38 <_printf_common+0x58>
 800aba8:	2301      	movs	r3, #1
 800abaa:	4622      	mov	r2, r4
 800abac:	4649      	mov	r1, r9
 800abae:	4638      	mov	r0, r7
 800abb0:	47c0      	blx	r8
 800abb2:	3001      	adds	r0, #1
 800abb4:	d0e6      	beq.n	800ab84 <_printf_common+0xa4>
 800abb6:	3601      	adds	r6, #1
 800abb8:	e7d9      	b.n	800ab6e <_printf_common+0x8e>
	...

0800abbc <_printf_i>:
 800abbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abc0:	7e0f      	ldrb	r7, [r1, #24]
 800abc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abc4:	2f78      	cmp	r7, #120	; 0x78
 800abc6:	4691      	mov	r9, r2
 800abc8:	4680      	mov	r8, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	469a      	mov	sl, r3
 800abce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abd2:	d807      	bhi.n	800abe4 <_printf_i+0x28>
 800abd4:	2f62      	cmp	r7, #98	; 0x62
 800abd6:	d80a      	bhi.n	800abee <_printf_i+0x32>
 800abd8:	2f00      	cmp	r7, #0
 800abda:	f000 80d8 	beq.w	800ad8e <_printf_i+0x1d2>
 800abde:	2f58      	cmp	r7, #88	; 0x58
 800abe0:	f000 80a3 	beq.w	800ad2a <_printf_i+0x16e>
 800abe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abec:	e03a      	b.n	800ac64 <_printf_i+0xa8>
 800abee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abf2:	2b15      	cmp	r3, #21
 800abf4:	d8f6      	bhi.n	800abe4 <_printf_i+0x28>
 800abf6:	a101      	add	r1, pc, #4	; (adr r1, 800abfc <_printf_i+0x40>)
 800abf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abfc:	0800ac55 	.word	0x0800ac55
 800ac00:	0800ac69 	.word	0x0800ac69
 800ac04:	0800abe5 	.word	0x0800abe5
 800ac08:	0800abe5 	.word	0x0800abe5
 800ac0c:	0800abe5 	.word	0x0800abe5
 800ac10:	0800abe5 	.word	0x0800abe5
 800ac14:	0800ac69 	.word	0x0800ac69
 800ac18:	0800abe5 	.word	0x0800abe5
 800ac1c:	0800abe5 	.word	0x0800abe5
 800ac20:	0800abe5 	.word	0x0800abe5
 800ac24:	0800abe5 	.word	0x0800abe5
 800ac28:	0800ad75 	.word	0x0800ad75
 800ac2c:	0800ac99 	.word	0x0800ac99
 800ac30:	0800ad57 	.word	0x0800ad57
 800ac34:	0800abe5 	.word	0x0800abe5
 800ac38:	0800abe5 	.word	0x0800abe5
 800ac3c:	0800ad97 	.word	0x0800ad97
 800ac40:	0800abe5 	.word	0x0800abe5
 800ac44:	0800ac99 	.word	0x0800ac99
 800ac48:	0800abe5 	.word	0x0800abe5
 800ac4c:	0800abe5 	.word	0x0800abe5
 800ac50:	0800ad5f 	.word	0x0800ad5f
 800ac54:	682b      	ldr	r3, [r5, #0]
 800ac56:	1d1a      	adds	r2, r3, #4
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	602a      	str	r2, [r5, #0]
 800ac5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac64:	2301      	movs	r3, #1
 800ac66:	e0a3      	b.n	800adb0 <_printf_i+0x1f4>
 800ac68:	6820      	ldr	r0, [r4, #0]
 800ac6a:	6829      	ldr	r1, [r5, #0]
 800ac6c:	0606      	lsls	r6, r0, #24
 800ac6e:	f101 0304 	add.w	r3, r1, #4
 800ac72:	d50a      	bpl.n	800ac8a <_printf_i+0xce>
 800ac74:	680e      	ldr	r6, [r1, #0]
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	2e00      	cmp	r6, #0
 800ac7a:	da03      	bge.n	800ac84 <_printf_i+0xc8>
 800ac7c:	232d      	movs	r3, #45	; 0x2d
 800ac7e:	4276      	negs	r6, r6
 800ac80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac84:	485e      	ldr	r0, [pc, #376]	; (800ae00 <_printf_i+0x244>)
 800ac86:	230a      	movs	r3, #10
 800ac88:	e019      	b.n	800acbe <_printf_i+0x102>
 800ac8a:	680e      	ldr	r6, [r1, #0]
 800ac8c:	602b      	str	r3, [r5, #0]
 800ac8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac92:	bf18      	it	ne
 800ac94:	b236      	sxthne	r6, r6
 800ac96:	e7ef      	b.n	800ac78 <_printf_i+0xbc>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	6820      	ldr	r0, [r4, #0]
 800ac9c:	1d19      	adds	r1, r3, #4
 800ac9e:	6029      	str	r1, [r5, #0]
 800aca0:	0601      	lsls	r1, r0, #24
 800aca2:	d501      	bpl.n	800aca8 <_printf_i+0xec>
 800aca4:	681e      	ldr	r6, [r3, #0]
 800aca6:	e002      	b.n	800acae <_printf_i+0xf2>
 800aca8:	0646      	lsls	r6, r0, #25
 800acaa:	d5fb      	bpl.n	800aca4 <_printf_i+0xe8>
 800acac:	881e      	ldrh	r6, [r3, #0]
 800acae:	4854      	ldr	r0, [pc, #336]	; (800ae00 <_printf_i+0x244>)
 800acb0:	2f6f      	cmp	r7, #111	; 0x6f
 800acb2:	bf0c      	ite	eq
 800acb4:	2308      	moveq	r3, #8
 800acb6:	230a      	movne	r3, #10
 800acb8:	2100      	movs	r1, #0
 800acba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acbe:	6865      	ldr	r5, [r4, #4]
 800acc0:	60a5      	str	r5, [r4, #8]
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	bfa2      	ittt	ge
 800acc6:	6821      	ldrge	r1, [r4, #0]
 800acc8:	f021 0104 	bicge.w	r1, r1, #4
 800accc:	6021      	strge	r1, [r4, #0]
 800acce:	b90e      	cbnz	r6, 800acd4 <_printf_i+0x118>
 800acd0:	2d00      	cmp	r5, #0
 800acd2:	d04d      	beq.n	800ad70 <_printf_i+0x1b4>
 800acd4:	4615      	mov	r5, r2
 800acd6:	fbb6 f1f3 	udiv	r1, r6, r3
 800acda:	fb03 6711 	mls	r7, r3, r1, r6
 800acde:	5dc7      	ldrb	r7, [r0, r7]
 800ace0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ace4:	4637      	mov	r7, r6
 800ace6:	42bb      	cmp	r3, r7
 800ace8:	460e      	mov	r6, r1
 800acea:	d9f4      	bls.n	800acd6 <_printf_i+0x11a>
 800acec:	2b08      	cmp	r3, #8
 800acee:	d10b      	bne.n	800ad08 <_printf_i+0x14c>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	07de      	lsls	r6, r3, #31
 800acf4:	d508      	bpl.n	800ad08 <_printf_i+0x14c>
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	6861      	ldr	r1, [r4, #4]
 800acfa:	4299      	cmp	r1, r3
 800acfc:	bfde      	ittt	le
 800acfe:	2330      	movle	r3, #48	; 0x30
 800ad00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad08:	1b52      	subs	r2, r2, r5
 800ad0a:	6122      	str	r2, [r4, #16]
 800ad0c:	f8cd a000 	str.w	sl, [sp]
 800ad10:	464b      	mov	r3, r9
 800ad12:	aa03      	add	r2, sp, #12
 800ad14:	4621      	mov	r1, r4
 800ad16:	4640      	mov	r0, r8
 800ad18:	f7ff fee2 	bl	800aae0 <_printf_common>
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d14c      	bne.n	800adba <_printf_i+0x1fe>
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	b004      	add	sp, #16
 800ad26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2a:	4835      	ldr	r0, [pc, #212]	; (800ae00 <_printf_i+0x244>)
 800ad2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad30:	6829      	ldr	r1, [r5, #0]
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad38:	6029      	str	r1, [r5, #0]
 800ad3a:	061d      	lsls	r5, r3, #24
 800ad3c:	d514      	bpl.n	800ad68 <_printf_i+0x1ac>
 800ad3e:	07df      	lsls	r7, r3, #31
 800ad40:	bf44      	itt	mi
 800ad42:	f043 0320 	orrmi.w	r3, r3, #32
 800ad46:	6023      	strmi	r3, [r4, #0]
 800ad48:	b91e      	cbnz	r6, 800ad52 <_printf_i+0x196>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	f023 0320 	bic.w	r3, r3, #32
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	2310      	movs	r3, #16
 800ad54:	e7b0      	b.n	800acb8 <_printf_i+0xfc>
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	f043 0320 	orr.w	r3, r3, #32
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	2378      	movs	r3, #120	; 0x78
 800ad60:	4828      	ldr	r0, [pc, #160]	; (800ae04 <_printf_i+0x248>)
 800ad62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad66:	e7e3      	b.n	800ad30 <_printf_i+0x174>
 800ad68:	0659      	lsls	r1, r3, #25
 800ad6a:	bf48      	it	mi
 800ad6c:	b2b6      	uxthmi	r6, r6
 800ad6e:	e7e6      	b.n	800ad3e <_printf_i+0x182>
 800ad70:	4615      	mov	r5, r2
 800ad72:	e7bb      	b.n	800acec <_printf_i+0x130>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	6826      	ldr	r6, [r4, #0]
 800ad78:	6961      	ldr	r1, [r4, #20]
 800ad7a:	1d18      	adds	r0, r3, #4
 800ad7c:	6028      	str	r0, [r5, #0]
 800ad7e:	0635      	lsls	r5, r6, #24
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	d501      	bpl.n	800ad88 <_printf_i+0x1cc>
 800ad84:	6019      	str	r1, [r3, #0]
 800ad86:	e002      	b.n	800ad8e <_printf_i+0x1d2>
 800ad88:	0670      	lsls	r0, r6, #25
 800ad8a:	d5fb      	bpl.n	800ad84 <_printf_i+0x1c8>
 800ad8c:	8019      	strh	r1, [r3, #0]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	6123      	str	r3, [r4, #16]
 800ad92:	4615      	mov	r5, r2
 800ad94:	e7ba      	b.n	800ad0c <_printf_i+0x150>
 800ad96:	682b      	ldr	r3, [r5, #0]
 800ad98:	1d1a      	adds	r2, r3, #4
 800ad9a:	602a      	str	r2, [r5, #0]
 800ad9c:	681d      	ldr	r5, [r3, #0]
 800ad9e:	6862      	ldr	r2, [r4, #4]
 800ada0:	2100      	movs	r1, #0
 800ada2:	4628      	mov	r0, r5
 800ada4:	f7f5 fa3c 	bl	8000220 <memchr>
 800ada8:	b108      	cbz	r0, 800adae <_printf_i+0x1f2>
 800adaa:	1b40      	subs	r0, r0, r5
 800adac:	6060      	str	r0, [r4, #4]
 800adae:	6863      	ldr	r3, [r4, #4]
 800adb0:	6123      	str	r3, [r4, #16]
 800adb2:	2300      	movs	r3, #0
 800adb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb8:	e7a8      	b.n	800ad0c <_printf_i+0x150>
 800adba:	6923      	ldr	r3, [r4, #16]
 800adbc:	462a      	mov	r2, r5
 800adbe:	4649      	mov	r1, r9
 800adc0:	4640      	mov	r0, r8
 800adc2:	47d0      	blx	sl
 800adc4:	3001      	adds	r0, #1
 800adc6:	d0ab      	beq.n	800ad20 <_printf_i+0x164>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	079b      	lsls	r3, r3, #30
 800adcc:	d413      	bmi.n	800adf6 <_printf_i+0x23a>
 800adce:	68e0      	ldr	r0, [r4, #12]
 800add0:	9b03      	ldr	r3, [sp, #12]
 800add2:	4298      	cmp	r0, r3
 800add4:	bfb8      	it	lt
 800add6:	4618      	movlt	r0, r3
 800add8:	e7a4      	b.n	800ad24 <_printf_i+0x168>
 800adda:	2301      	movs	r3, #1
 800addc:	4632      	mov	r2, r6
 800adde:	4649      	mov	r1, r9
 800ade0:	4640      	mov	r0, r8
 800ade2:	47d0      	blx	sl
 800ade4:	3001      	adds	r0, #1
 800ade6:	d09b      	beq.n	800ad20 <_printf_i+0x164>
 800ade8:	3501      	adds	r5, #1
 800adea:	68e3      	ldr	r3, [r4, #12]
 800adec:	9903      	ldr	r1, [sp, #12]
 800adee:	1a5b      	subs	r3, r3, r1
 800adf0:	42ab      	cmp	r3, r5
 800adf2:	dcf2      	bgt.n	800adda <_printf_i+0x21e>
 800adf4:	e7eb      	b.n	800adce <_printf_i+0x212>
 800adf6:	2500      	movs	r5, #0
 800adf8:	f104 0619 	add.w	r6, r4, #25
 800adfc:	e7f5      	b.n	800adea <_printf_i+0x22e>
 800adfe:	bf00      	nop
 800ae00:	0800d1f4 	.word	0x0800d1f4
 800ae04:	0800d205 	.word	0x0800d205

0800ae08 <nan>:
 800ae08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae10 <nan+0x8>
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	00000000 	.word	0x00000000
 800ae14:	7ff80000 	.word	0x7ff80000

0800ae18 <_sbrk_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4d06      	ldr	r5, [pc, #24]	; (800ae34 <_sbrk_r+0x1c>)
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	4604      	mov	r4, r0
 800ae20:	4608      	mov	r0, r1
 800ae22:	602b      	str	r3, [r5, #0]
 800ae24:	f7f7 fc66 	bl	80026f4 <_sbrk>
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	d102      	bne.n	800ae32 <_sbrk_r+0x1a>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	b103      	cbz	r3, 800ae32 <_sbrk_r+0x1a>
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
 800ae34:	200009a0 	.word	0x200009a0

0800ae38 <strcpy>:
 800ae38:	4603      	mov	r3, r0
 800ae3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae3e:	f803 2b01 	strb.w	r2, [r3], #1
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	d1f9      	bne.n	800ae3a <strcpy+0x2>
 800ae46:	4770      	bx	lr

0800ae48 <strncmp>:
 800ae48:	b510      	push	{r4, lr}
 800ae4a:	b17a      	cbz	r2, 800ae6c <strncmp+0x24>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	3901      	subs	r1, #1
 800ae50:	1884      	adds	r4, r0, r2
 800ae52:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae5a:	4290      	cmp	r0, r2
 800ae5c:	d101      	bne.n	800ae62 <strncmp+0x1a>
 800ae5e:	42a3      	cmp	r3, r4
 800ae60:	d101      	bne.n	800ae66 <strncmp+0x1e>
 800ae62:	1a80      	subs	r0, r0, r2
 800ae64:	bd10      	pop	{r4, pc}
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d1f3      	bne.n	800ae52 <strncmp+0xa>
 800ae6a:	e7fa      	b.n	800ae62 <strncmp+0x1a>
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	e7f9      	b.n	800ae64 <strncmp+0x1c>

0800ae70 <__ascii_wctomb>:
 800ae70:	b149      	cbz	r1, 800ae86 <__ascii_wctomb+0x16>
 800ae72:	2aff      	cmp	r2, #255	; 0xff
 800ae74:	bf85      	ittet	hi
 800ae76:	238a      	movhi	r3, #138	; 0x8a
 800ae78:	6003      	strhi	r3, [r0, #0]
 800ae7a:	700a      	strbls	r2, [r1, #0]
 800ae7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae80:	bf98      	it	ls
 800ae82:	2001      	movls	r0, #1
 800ae84:	4770      	bx	lr
 800ae86:	4608      	mov	r0, r1
 800ae88:	4770      	bx	lr
	...

0800ae8c <__assert_func>:
 800ae8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae8e:	4614      	mov	r4, r2
 800ae90:	461a      	mov	r2, r3
 800ae92:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <__assert_func+0x2c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4605      	mov	r5, r0
 800ae98:	68d8      	ldr	r0, [r3, #12]
 800ae9a:	b14c      	cbz	r4, 800aeb0 <__assert_func+0x24>
 800ae9c:	4b07      	ldr	r3, [pc, #28]	; (800aebc <__assert_func+0x30>)
 800ae9e:	9100      	str	r1, [sp, #0]
 800aea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aea4:	4906      	ldr	r1, [pc, #24]	; (800aec0 <__assert_func+0x34>)
 800aea6:	462b      	mov	r3, r5
 800aea8:	f000 fe88 	bl	800bbbc <fiprintf>
 800aeac:	f001 f912 	bl	800c0d4 <abort>
 800aeb0:	4b04      	ldr	r3, [pc, #16]	; (800aec4 <__assert_func+0x38>)
 800aeb2:	461c      	mov	r4, r3
 800aeb4:	e7f3      	b.n	800ae9e <__assert_func+0x12>
 800aeb6:	bf00      	nop
 800aeb8:	2000001c 	.word	0x2000001c
 800aebc:	0800d216 	.word	0x0800d216
 800aec0:	0800d223 	.word	0x0800d223
 800aec4:	0800d251 	.word	0x0800d251

0800aec8 <quorem>:
 800aec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	6903      	ldr	r3, [r0, #16]
 800aece:	690c      	ldr	r4, [r1, #16]
 800aed0:	42a3      	cmp	r3, r4
 800aed2:	4607      	mov	r7, r0
 800aed4:	f2c0 8081 	blt.w	800afda <quorem+0x112>
 800aed8:	3c01      	subs	r4, #1
 800aeda:	f101 0814 	add.w	r8, r1, #20
 800aede:	f100 0514 	add.w	r5, r0, #20
 800aee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aee6:	9301      	str	r3, [sp, #4]
 800aee8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aeec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aef0:	3301      	adds	r3, #1
 800aef2:	429a      	cmp	r2, r3
 800aef4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aef8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aefc:	fbb2 f6f3 	udiv	r6, r2, r3
 800af00:	d331      	bcc.n	800af66 <quorem+0x9e>
 800af02:	f04f 0e00 	mov.w	lr, #0
 800af06:	4640      	mov	r0, r8
 800af08:	46ac      	mov	ip, r5
 800af0a:	46f2      	mov	sl, lr
 800af0c:	f850 2b04 	ldr.w	r2, [r0], #4
 800af10:	b293      	uxth	r3, r2
 800af12:	fb06 e303 	mla	r3, r6, r3, lr
 800af16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	ebaa 0303 	sub.w	r3, sl, r3
 800af20:	f8dc a000 	ldr.w	sl, [ip]
 800af24:	0c12      	lsrs	r2, r2, #16
 800af26:	fa13 f38a 	uxtah	r3, r3, sl
 800af2a:	fb06 e202 	mla	r2, r6, r2, lr
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	9b00      	ldr	r3, [sp, #0]
 800af32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af36:	b292      	uxth	r2, r2
 800af38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af40:	f8bd 3000 	ldrh.w	r3, [sp]
 800af44:	4581      	cmp	r9, r0
 800af46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af4a:	f84c 3b04 	str.w	r3, [ip], #4
 800af4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af52:	d2db      	bcs.n	800af0c <quorem+0x44>
 800af54:	f855 300b 	ldr.w	r3, [r5, fp]
 800af58:	b92b      	cbnz	r3, 800af66 <quorem+0x9e>
 800af5a:	9b01      	ldr	r3, [sp, #4]
 800af5c:	3b04      	subs	r3, #4
 800af5e:	429d      	cmp	r5, r3
 800af60:	461a      	mov	r2, r3
 800af62:	d32e      	bcc.n	800afc2 <quorem+0xfa>
 800af64:	613c      	str	r4, [r7, #16]
 800af66:	4638      	mov	r0, r7
 800af68:	f7ff fafc 	bl	800a564 <__mcmp>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	db24      	blt.n	800afba <quorem+0xf2>
 800af70:	3601      	adds	r6, #1
 800af72:	4628      	mov	r0, r5
 800af74:	f04f 0c00 	mov.w	ip, #0
 800af78:	f858 2b04 	ldr.w	r2, [r8], #4
 800af7c:	f8d0 e000 	ldr.w	lr, [r0]
 800af80:	b293      	uxth	r3, r2
 800af82:	ebac 0303 	sub.w	r3, ip, r3
 800af86:	0c12      	lsrs	r2, r2, #16
 800af88:	fa13 f38e 	uxtah	r3, r3, lr
 800af8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800af90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af94:	b29b      	uxth	r3, r3
 800af96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af9a:	45c1      	cmp	r9, r8
 800af9c:	f840 3b04 	str.w	r3, [r0], #4
 800afa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800afa4:	d2e8      	bcs.n	800af78 <quorem+0xb0>
 800afa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afae:	b922      	cbnz	r2, 800afba <quorem+0xf2>
 800afb0:	3b04      	subs	r3, #4
 800afb2:	429d      	cmp	r5, r3
 800afb4:	461a      	mov	r2, r3
 800afb6:	d30a      	bcc.n	800afce <quorem+0x106>
 800afb8:	613c      	str	r4, [r7, #16]
 800afba:	4630      	mov	r0, r6
 800afbc:	b003      	add	sp, #12
 800afbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc2:	6812      	ldr	r2, [r2, #0]
 800afc4:	3b04      	subs	r3, #4
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	d1cc      	bne.n	800af64 <quorem+0x9c>
 800afca:	3c01      	subs	r4, #1
 800afcc:	e7c7      	b.n	800af5e <quorem+0x96>
 800afce:	6812      	ldr	r2, [r2, #0]
 800afd0:	3b04      	subs	r3, #4
 800afd2:	2a00      	cmp	r2, #0
 800afd4:	d1f0      	bne.n	800afb8 <quorem+0xf0>
 800afd6:	3c01      	subs	r4, #1
 800afd8:	e7eb      	b.n	800afb2 <quorem+0xea>
 800afda:	2000      	movs	r0, #0
 800afdc:	e7ee      	b.n	800afbc <quorem+0xf4>
	...

0800afe0 <_dtoa_r>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	ed2d 8b04 	vpush	{d8-d9}
 800afe8:	ec57 6b10 	vmov	r6, r7, d0
 800afec:	b093      	sub	sp, #76	; 0x4c
 800afee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aff4:	9106      	str	r1, [sp, #24]
 800aff6:	ee10 aa10 	vmov	sl, s0
 800affa:	4604      	mov	r4, r0
 800affc:	9209      	str	r2, [sp, #36]	; 0x24
 800affe:	930c      	str	r3, [sp, #48]	; 0x30
 800b000:	46bb      	mov	fp, r7
 800b002:	b975      	cbnz	r5, 800b022 <_dtoa_r+0x42>
 800b004:	2010      	movs	r0, #16
 800b006:	f000 fdeb 	bl	800bbe0 <malloc>
 800b00a:	4602      	mov	r2, r0
 800b00c:	6260      	str	r0, [r4, #36]	; 0x24
 800b00e:	b920      	cbnz	r0, 800b01a <_dtoa_r+0x3a>
 800b010:	4ba7      	ldr	r3, [pc, #668]	; (800b2b0 <_dtoa_r+0x2d0>)
 800b012:	21ea      	movs	r1, #234	; 0xea
 800b014:	48a7      	ldr	r0, [pc, #668]	; (800b2b4 <_dtoa_r+0x2d4>)
 800b016:	f7ff ff39 	bl	800ae8c <__assert_func>
 800b01a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b01e:	6005      	str	r5, [r0, #0]
 800b020:	60c5      	str	r5, [r0, #12]
 800b022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b024:	6819      	ldr	r1, [r3, #0]
 800b026:	b151      	cbz	r1, 800b03e <_dtoa_r+0x5e>
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	604a      	str	r2, [r1, #4]
 800b02c:	2301      	movs	r3, #1
 800b02e:	4093      	lsls	r3, r2
 800b030:	608b      	str	r3, [r1, #8]
 800b032:	4620      	mov	r0, r4
 800b034:	f7ff f80a 	bl	800a04c <_Bfree>
 800b038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b03a:	2200      	movs	r2, #0
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	1e3b      	subs	r3, r7, #0
 800b040:	bfaa      	itet	ge
 800b042:	2300      	movge	r3, #0
 800b044:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b048:	f8c8 3000 	strge.w	r3, [r8]
 800b04c:	4b9a      	ldr	r3, [pc, #616]	; (800b2b8 <_dtoa_r+0x2d8>)
 800b04e:	bfbc      	itt	lt
 800b050:	2201      	movlt	r2, #1
 800b052:	f8c8 2000 	strlt.w	r2, [r8]
 800b056:	ea33 030b 	bics.w	r3, r3, fp
 800b05a:	d11b      	bne.n	800b094 <_dtoa_r+0xb4>
 800b05c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b05e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b068:	4333      	orrs	r3, r6
 800b06a:	f000 8592 	beq.w	800bb92 <_dtoa_r+0xbb2>
 800b06e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b070:	b963      	cbnz	r3, 800b08c <_dtoa_r+0xac>
 800b072:	4b92      	ldr	r3, [pc, #584]	; (800b2bc <_dtoa_r+0x2dc>)
 800b074:	e022      	b.n	800b0bc <_dtoa_r+0xdc>
 800b076:	4b92      	ldr	r3, [pc, #584]	; (800b2c0 <_dtoa_r+0x2e0>)
 800b078:	9301      	str	r3, [sp, #4]
 800b07a:	3308      	adds	r3, #8
 800b07c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b07e:	6013      	str	r3, [r2, #0]
 800b080:	9801      	ldr	r0, [sp, #4]
 800b082:	b013      	add	sp, #76	; 0x4c
 800b084:	ecbd 8b04 	vpop	{d8-d9}
 800b088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08c:	4b8b      	ldr	r3, [pc, #556]	; (800b2bc <_dtoa_r+0x2dc>)
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	3303      	adds	r3, #3
 800b092:	e7f3      	b.n	800b07c <_dtoa_r+0x9c>
 800b094:	2200      	movs	r2, #0
 800b096:	2300      	movs	r3, #0
 800b098:	4650      	mov	r0, sl
 800b09a:	4659      	mov	r1, fp
 800b09c:	f7f5 fd34 	bl	8000b08 <__aeabi_dcmpeq>
 800b0a0:	ec4b ab19 	vmov	d9, sl, fp
 800b0a4:	4680      	mov	r8, r0
 800b0a6:	b158      	cbz	r0, 800b0c0 <_dtoa_r+0xe0>
 800b0a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 856b 	beq.w	800bb8c <_dtoa_r+0xbac>
 800b0b6:	4883      	ldr	r0, [pc, #524]	; (800b2c4 <_dtoa_r+0x2e4>)
 800b0b8:	6018      	str	r0, [r3, #0]
 800b0ba:	1e43      	subs	r3, r0, #1
 800b0bc:	9301      	str	r3, [sp, #4]
 800b0be:	e7df      	b.n	800b080 <_dtoa_r+0xa0>
 800b0c0:	ec4b ab10 	vmov	d0, sl, fp
 800b0c4:	aa10      	add	r2, sp, #64	; 0x40
 800b0c6:	a911      	add	r1, sp, #68	; 0x44
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f7ff fb6d 	bl	800a7a8 <__d2b>
 800b0ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b0d2:	ee08 0a10 	vmov	s16, r0
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	f000 8084 	beq.w	800b1e4 <_dtoa_r+0x204>
 800b0dc:	ee19 3a90 	vmov	r3, s19
 800b0e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b0e8:	4656      	mov	r6, sl
 800b0ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b0ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b0f6:	4b74      	ldr	r3, [pc, #464]	; (800b2c8 <_dtoa_r+0x2e8>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	f7f5 f8e3 	bl	80002c8 <__aeabi_dsub>
 800b102:	a365      	add	r3, pc, #404	; (adr r3, 800b298 <_dtoa_r+0x2b8>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	f7f5 fa96 	bl	8000638 <__aeabi_dmul>
 800b10c:	a364      	add	r3, pc, #400	; (adr r3, 800b2a0 <_dtoa_r+0x2c0>)
 800b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b112:	f7f5 f8db 	bl	80002cc <__adddf3>
 800b116:	4606      	mov	r6, r0
 800b118:	4628      	mov	r0, r5
 800b11a:	460f      	mov	r7, r1
 800b11c:	f7f5 fa22 	bl	8000564 <__aeabi_i2d>
 800b120:	a361      	add	r3, pc, #388	; (adr r3, 800b2a8 <_dtoa_r+0x2c8>)
 800b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b126:	f7f5 fa87 	bl	8000638 <__aeabi_dmul>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4630      	mov	r0, r6
 800b130:	4639      	mov	r1, r7
 800b132:	f7f5 f8cb 	bl	80002cc <__adddf3>
 800b136:	4606      	mov	r6, r0
 800b138:	460f      	mov	r7, r1
 800b13a:	f7f5 fd17 	bl	8000b6c <__aeabi_d2iz>
 800b13e:	2200      	movs	r2, #0
 800b140:	9000      	str	r0, [sp, #0]
 800b142:	2300      	movs	r3, #0
 800b144:	4630      	mov	r0, r6
 800b146:	4639      	mov	r1, r7
 800b148:	f7f5 fce8 	bl	8000b1c <__aeabi_dcmplt>
 800b14c:	b150      	cbz	r0, 800b164 <_dtoa_r+0x184>
 800b14e:	9800      	ldr	r0, [sp, #0]
 800b150:	f7f5 fa08 	bl	8000564 <__aeabi_i2d>
 800b154:	4632      	mov	r2, r6
 800b156:	463b      	mov	r3, r7
 800b158:	f7f5 fcd6 	bl	8000b08 <__aeabi_dcmpeq>
 800b15c:	b910      	cbnz	r0, 800b164 <_dtoa_r+0x184>
 800b15e:	9b00      	ldr	r3, [sp, #0]
 800b160:	3b01      	subs	r3, #1
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	9b00      	ldr	r3, [sp, #0]
 800b166:	2b16      	cmp	r3, #22
 800b168:	d85a      	bhi.n	800b220 <_dtoa_r+0x240>
 800b16a:	9a00      	ldr	r2, [sp, #0]
 800b16c:	4b57      	ldr	r3, [pc, #348]	; (800b2cc <_dtoa_r+0x2ec>)
 800b16e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	ec51 0b19 	vmov	r0, r1, d9
 800b17a:	f7f5 fccf 	bl	8000b1c <__aeabi_dcmplt>
 800b17e:	2800      	cmp	r0, #0
 800b180:	d050      	beq.n	800b224 <_dtoa_r+0x244>
 800b182:	9b00      	ldr	r3, [sp, #0]
 800b184:	3b01      	subs	r3, #1
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	2300      	movs	r3, #0
 800b18a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b18c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b18e:	1b5d      	subs	r5, r3, r5
 800b190:	1e6b      	subs	r3, r5, #1
 800b192:	9305      	str	r3, [sp, #20]
 800b194:	bf45      	ittet	mi
 800b196:	f1c5 0301 	rsbmi	r3, r5, #1
 800b19a:	9304      	strmi	r3, [sp, #16]
 800b19c:	2300      	movpl	r3, #0
 800b19e:	2300      	movmi	r3, #0
 800b1a0:	bf4c      	ite	mi
 800b1a2:	9305      	strmi	r3, [sp, #20]
 800b1a4:	9304      	strpl	r3, [sp, #16]
 800b1a6:	9b00      	ldr	r3, [sp, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	db3d      	blt.n	800b228 <_dtoa_r+0x248>
 800b1ac:	9b05      	ldr	r3, [sp, #20]
 800b1ae:	9a00      	ldr	r2, [sp, #0]
 800b1b0:	920a      	str	r2, [sp, #40]	; 0x28
 800b1b2:	4413      	add	r3, r2
 800b1b4:	9305      	str	r3, [sp, #20]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	9307      	str	r3, [sp, #28]
 800b1ba:	9b06      	ldr	r3, [sp, #24]
 800b1bc:	2b09      	cmp	r3, #9
 800b1be:	f200 8089 	bhi.w	800b2d4 <_dtoa_r+0x2f4>
 800b1c2:	2b05      	cmp	r3, #5
 800b1c4:	bfc4      	itt	gt
 800b1c6:	3b04      	subgt	r3, #4
 800b1c8:	9306      	strgt	r3, [sp, #24]
 800b1ca:	9b06      	ldr	r3, [sp, #24]
 800b1cc:	f1a3 0302 	sub.w	r3, r3, #2
 800b1d0:	bfcc      	ite	gt
 800b1d2:	2500      	movgt	r5, #0
 800b1d4:	2501      	movle	r5, #1
 800b1d6:	2b03      	cmp	r3, #3
 800b1d8:	f200 8087 	bhi.w	800b2ea <_dtoa_r+0x30a>
 800b1dc:	e8df f003 	tbb	[pc, r3]
 800b1e0:	59383a2d 	.word	0x59383a2d
 800b1e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b1e8:	441d      	add	r5, r3
 800b1ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b1ee:	2b20      	cmp	r3, #32
 800b1f0:	bfc1      	itttt	gt
 800b1f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b1fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800b1fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b202:	bfda      	itte	le
 800b204:	f1c3 0320 	rsble	r3, r3, #32
 800b208:	fa06 f003 	lslle.w	r0, r6, r3
 800b20c:	4318      	orrgt	r0, r3
 800b20e:	f7f5 f999 	bl	8000544 <__aeabi_ui2d>
 800b212:	2301      	movs	r3, #1
 800b214:	4606      	mov	r6, r0
 800b216:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b21a:	3d01      	subs	r5, #1
 800b21c:	930e      	str	r3, [sp, #56]	; 0x38
 800b21e:	e76a      	b.n	800b0f6 <_dtoa_r+0x116>
 800b220:	2301      	movs	r3, #1
 800b222:	e7b2      	b.n	800b18a <_dtoa_r+0x1aa>
 800b224:	900b      	str	r0, [sp, #44]	; 0x2c
 800b226:	e7b1      	b.n	800b18c <_dtoa_r+0x1ac>
 800b228:	9b04      	ldr	r3, [sp, #16]
 800b22a:	9a00      	ldr	r2, [sp, #0]
 800b22c:	1a9b      	subs	r3, r3, r2
 800b22e:	9304      	str	r3, [sp, #16]
 800b230:	4253      	negs	r3, r2
 800b232:	9307      	str	r3, [sp, #28]
 800b234:	2300      	movs	r3, #0
 800b236:	930a      	str	r3, [sp, #40]	; 0x28
 800b238:	e7bf      	b.n	800b1ba <_dtoa_r+0x1da>
 800b23a:	2300      	movs	r3, #0
 800b23c:	9308      	str	r3, [sp, #32]
 800b23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b240:	2b00      	cmp	r3, #0
 800b242:	dc55      	bgt.n	800b2f0 <_dtoa_r+0x310>
 800b244:	2301      	movs	r3, #1
 800b246:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b24a:	461a      	mov	r2, r3
 800b24c:	9209      	str	r2, [sp, #36]	; 0x24
 800b24e:	e00c      	b.n	800b26a <_dtoa_r+0x28a>
 800b250:	2301      	movs	r3, #1
 800b252:	e7f3      	b.n	800b23c <_dtoa_r+0x25c>
 800b254:	2300      	movs	r3, #0
 800b256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b258:	9308      	str	r3, [sp, #32]
 800b25a:	9b00      	ldr	r3, [sp, #0]
 800b25c:	4413      	add	r3, r2
 800b25e:	9302      	str	r3, [sp, #8]
 800b260:	3301      	adds	r3, #1
 800b262:	2b01      	cmp	r3, #1
 800b264:	9303      	str	r3, [sp, #12]
 800b266:	bfb8      	it	lt
 800b268:	2301      	movlt	r3, #1
 800b26a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b26c:	2200      	movs	r2, #0
 800b26e:	6042      	str	r2, [r0, #4]
 800b270:	2204      	movs	r2, #4
 800b272:	f102 0614 	add.w	r6, r2, #20
 800b276:	429e      	cmp	r6, r3
 800b278:	6841      	ldr	r1, [r0, #4]
 800b27a:	d93d      	bls.n	800b2f8 <_dtoa_r+0x318>
 800b27c:	4620      	mov	r0, r4
 800b27e:	f7fe fea5 	bl	8009fcc <_Balloc>
 800b282:	9001      	str	r0, [sp, #4]
 800b284:	2800      	cmp	r0, #0
 800b286:	d13b      	bne.n	800b300 <_dtoa_r+0x320>
 800b288:	4b11      	ldr	r3, [pc, #68]	; (800b2d0 <_dtoa_r+0x2f0>)
 800b28a:	4602      	mov	r2, r0
 800b28c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b290:	e6c0      	b.n	800b014 <_dtoa_r+0x34>
 800b292:	2301      	movs	r3, #1
 800b294:	e7df      	b.n	800b256 <_dtoa_r+0x276>
 800b296:	bf00      	nop
 800b298:	636f4361 	.word	0x636f4361
 800b29c:	3fd287a7 	.word	0x3fd287a7
 800b2a0:	8b60c8b3 	.word	0x8b60c8b3
 800b2a4:	3fc68a28 	.word	0x3fc68a28
 800b2a8:	509f79fb 	.word	0x509f79fb
 800b2ac:	3fd34413 	.word	0x3fd34413
 800b2b0:	0800d084 	.word	0x0800d084
 800b2b4:	0800d362 	.word	0x0800d362
 800b2b8:	7ff00000 	.word	0x7ff00000
 800b2bc:	0800d35c 	.word	0x0800d35c
 800b2c0:	0800d353 	.word	0x0800d353
 800b2c4:	0800d361 	.word	0x0800d361
 800b2c8:	3ff80000 	.word	0x3ff80000
 800b2cc:	0800d120 	.word	0x0800d120
 800b2d0:	0800cff8 	.word	0x0800cff8
 800b2d4:	2501      	movs	r5, #1
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	9306      	str	r3, [sp, #24]
 800b2da:	9508      	str	r5, [sp, #32]
 800b2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	2312      	movs	r3, #18
 800b2e8:	e7b0      	b.n	800b24c <_dtoa_r+0x26c>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	9308      	str	r3, [sp, #32]
 800b2ee:	e7f5      	b.n	800b2dc <_dtoa_r+0x2fc>
 800b2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2f6:	e7b8      	b.n	800b26a <_dtoa_r+0x28a>
 800b2f8:	3101      	adds	r1, #1
 800b2fa:	6041      	str	r1, [r0, #4]
 800b2fc:	0052      	lsls	r2, r2, #1
 800b2fe:	e7b8      	b.n	800b272 <_dtoa_r+0x292>
 800b300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b302:	9a01      	ldr	r2, [sp, #4]
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	9b03      	ldr	r3, [sp, #12]
 800b308:	2b0e      	cmp	r3, #14
 800b30a:	f200 809d 	bhi.w	800b448 <_dtoa_r+0x468>
 800b30e:	2d00      	cmp	r5, #0
 800b310:	f000 809a 	beq.w	800b448 <_dtoa_r+0x468>
 800b314:	9b00      	ldr	r3, [sp, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	dd32      	ble.n	800b380 <_dtoa_r+0x3a0>
 800b31a:	4ab7      	ldr	r2, [pc, #732]	; (800b5f8 <_dtoa_r+0x618>)
 800b31c:	f003 030f 	and.w	r3, r3, #15
 800b320:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b324:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b328:	9b00      	ldr	r3, [sp, #0]
 800b32a:	05d8      	lsls	r0, r3, #23
 800b32c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b330:	d516      	bpl.n	800b360 <_dtoa_r+0x380>
 800b332:	4bb2      	ldr	r3, [pc, #712]	; (800b5fc <_dtoa_r+0x61c>)
 800b334:	ec51 0b19 	vmov	r0, r1, d9
 800b338:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b33c:	f7f5 faa6 	bl	800088c <__aeabi_ddiv>
 800b340:	f007 070f 	and.w	r7, r7, #15
 800b344:	4682      	mov	sl, r0
 800b346:	468b      	mov	fp, r1
 800b348:	2503      	movs	r5, #3
 800b34a:	4eac      	ldr	r6, [pc, #688]	; (800b5fc <_dtoa_r+0x61c>)
 800b34c:	b957      	cbnz	r7, 800b364 <_dtoa_r+0x384>
 800b34e:	4642      	mov	r2, r8
 800b350:	464b      	mov	r3, r9
 800b352:	4650      	mov	r0, sl
 800b354:	4659      	mov	r1, fp
 800b356:	f7f5 fa99 	bl	800088c <__aeabi_ddiv>
 800b35a:	4682      	mov	sl, r0
 800b35c:	468b      	mov	fp, r1
 800b35e:	e028      	b.n	800b3b2 <_dtoa_r+0x3d2>
 800b360:	2502      	movs	r5, #2
 800b362:	e7f2      	b.n	800b34a <_dtoa_r+0x36a>
 800b364:	07f9      	lsls	r1, r7, #31
 800b366:	d508      	bpl.n	800b37a <_dtoa_r+0x39a>
 800b368:	4640      	mov	r0, r8
 800b36a:	4649      	mov	r1, r9
 800b36c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b370:	f7f5 f962 	bl	8000638 <__aeabi_dmul>
 800b374:	3501      	adds	r5, #1
 800b376:	4680      	mov	r8, r0
 800b378:	4689      	mov	r9, r1
 800b37a:	107f      	asrs	r7, r7, #1
 800b37c:	3608      	adds	r6, #8
 800b37e:	e7e5      	b.n	800b34c <_dtoa_r+0x36c>
 800b380:	f000 809b 	beq.w	800b4ba <_dtoa_r+0x4da>
 800b384:	9b00      	ldr	r3, [sp, #0]
 800b386:	4f9d      	ldr	r7, [pc, #628]	; (800b5fc <_dtoa_r+0x61c>)
 800b388:	425e      	negs	r6, r3
 800b38a:	4b9b      	ldr	r3, [pc, #620]	; (800b5f8 <_dtoa_r+0x618>)
 800b38c:	f006 020f 	and.w	r2, r6, #15
 800b390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	ec51 0b19 	vmov	r0, r1, d9
 800b39c:	f7f5 f94c 	bl	8000638 <__aeabi_dmul>
 800b3a0:	1136      	asrs	r6, r6, #4
 800b3a2:	4682      	mov	sl, r0
 800b3a4:	468b      	mov	fp, r1
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	2502      	movs	r5, #2
 800b3aa:	2e00      	cmp	r6, #0
 800b3ac:	d17a      	bne.n	800b4a4 <_dtoa_r+0x4c4>
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1d3      	bne.n	800b35a <_dtoa_r+0x37a>
 800b3b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 8082 	beq.w	800b4be <_dtoa_r+0x4de>
 800b3ba:	4b91      	ldr	r3, [pc, #580]	; (800b600 <_dtoa_r+0x620>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	4650      	mov	r0, sl
 800b3c0:	4659      	mov	r1, fp
 800b3c2:	f7f5 fbab 	bl	8000b1c <__aeabi_dcmplt>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d079      	beq.n	800b4be <_dtoa_r+0x4de>
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d076      	beq.n	800b4be <_dtoa_r+0x4de>
 800b3d0:	9b02      	ldr	r3, [sp, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dd36      	ble.n	800b444 <_dtoa_r+0x464>
 800b3d6:	9b00      	ldr	r3, [sp, #0]
 800b3d8:	4650      	mov	r0, sl
 800b3da:	4659      	mov	r1, fp
 800b3dc:	1e5f      	subs	r7, r3, #1
 800b3de:	2200      	movs	r2, #0
 800b3e0:	4b88      	ldr	r3, [pc, #544]	; (800b604 <_dtoa_r+0x624>)
 800b3e2:	f7f5 f929 	bl	8000638 <__aeabi_dmul>
 800b3e6:	9e02      	ldr	r6, [sp, #8]
 800b3e8:	4682      	mov	sl, r0
 800b3ea:	468b      	mov	fp, r1
 800b3ec:	3501      	adds	r5, #1
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	f7f5 f8b8 	bl	8000564 <__aeabi_i2d>
 800b3f4:	4652      	mov	r2, sl
 800b3f6:	465b      	mov	r3, fp
 800b3f8:	f7f5 f91e 	bl	8000638 <__aeabi_dmul>
 800b3fc:	4b82      	ldr	r3, [pc, #520]	; (800b608 <_dtoa_r+0x628>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	f7f4 ff64 	bl	80002cc <__adddf3>
 800b404:	46d0      	mov	r8, sl
 800b406:	46d9      	mov	r9, fp
 800b408:	4682      	mov	sl, r0
 800b40a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b40e:	2e00      	cmp	r6, #0
 800b410:	d158      	bne.n	800b4c4 <_dtoa_r+0x4e4>
 800b412:	4b7e      	ldr	r3, [pc, #504]	; (800b60c <_dtoa_r+0x62c>)
 800b414:	2200      	movs	r2, #0
 800b416:	4640      	mov	r0, r8
 800b418:	4649      	mov	r1, r9
 800b41a:	f7f4 ff55 	bl	80002c8 <__aeabi_dsub>
 800b41e:	4652      	mov	r2, sl
 800b420:	465b      	mov	r3, fp
 800b422:	4680      	mov	r8, r0
 800b424:	4689      	mov	r9, r1
 800b426:	f7f5 fb97 	bl	8000b58 <__aeabi_dcmpgt>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	f040 8295 	bne.w	800b95a <_dtoa_r+0x97a>
 800b430:	4652      	mov	r2, sl
 800b432:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b436:	4640      	mov	r0, r8
 800b438:	4649      	mov	r1, r9
 800b43a:	f7f5 fb6f 	bl	8000b1c <__aeabi_dcmplt>
 800b43e:	2800      	cmp	r0, #0
 800b440:	f040 8289 	bne.w	800b956 <_dtoa_r+0x976>
 800b444:	ec5b ab19 	vmov	sl, fp, d9
 800b448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f2c0 8148 	blt.w	800b6e0 <_dtoa_r+0x700>
 800b450:	9a00      	ldr	r2, [sp, #0]
 800b452:	2a0e      	cmp	r2, #14
 800b454:	f300 8144 	bgt.w	800b6e0 <_dtoa_r+0x700>
 800b458:	4b67      	ldr	r3, [pc, #412]	; (800b5f8 <_dtoa_r+0x618>)
 800b45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b45e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b464:	2b00      	cmp	r3, #0
 800b466:	f280 80d5 	bge.w	800b614 <_dtoa_r+0x634>
 800b46a:	9b03      	ldr	r3, [sp, #12]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f300 80d1 	bgt.w	800b614 <_dtoa_r+0x634>
 800b472:	f040 826f 	bne.w	800b954 <_dtoa_r+0x974>
 800b476:	4b65      	ldr	r3, [pc, #404]	; (800b60c <_dtoa_r+0x62c>)
 800b478:	2200      	movs	r2, #0
 800b47a:	4640      	mov	r0, r8
 800b47c:	4649      	mov	r1, r9
 800b47e:	f7f5 f8db 	bl	8000638 <__aeabi_dmul>
 800b482:	4652      	mov	r2, sl
 800b484:	465b      	mov	r3, fp
 800b486:	f7f5 fb5d 	bl	8000b44 <__aeabi_dcmpge>
 800b48a:	9e03      	ldr	r6, [sp, #12]
 800b48c:	4637      	mov	r7, r6
 800b48e:	2800      	cmp	r0, #0
 800b490:	f040 8245 	bne.w	800b91e <_dtoa_r+0x93e>
 800b494:	9d01      	ldr	r5, [sp, #4]
 800b496:	2331      	movs	r3, #49	; 0x31
 800b498:	f805 3b01 	strb.w	r3, [r5], #1
 800b49c:	9b00      	ldr	r3, [sp, #0]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	e240      	b.n	800b926 <_dtoa_r+0x946>
 800b4a4:	07f2      	lsls	r2, r6, #31
 800b4a6:	d505      	bpl.n	800b4b4 <_dtoa_r+0x4d4>
 800b4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4ac:	f7f5 f8c4 	bl	8000638 <__aeabi_dmul>
 800b4b0:	3501      	adds	r5, #1
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	1076      	asrs	r6, r6, #1
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	e777      	b.n	800b3aa <_dtoa_r+0x3ca>
 800b4ba:	2502      	movs	r5, #2
 800b4bc:	e779      	b.n	800b3b2 <_dtoa_r+0x3d2>
 800b4be:	9f00      	ldr	r7, [sp, #0]
 800b4c0:	9e03      	ldr	r6, [sp, #12]
 800b4c2:	e794      	b.n	800b3ee <_dtoa_r+0x40e>
 800b4c4:	9901      	ldr	r1, [sp, #4]
 800b4c6:	4b4c      	ldr	r3, [pc, #304]	; (800b5f8 <_dtoa_r+0x618>)
 800b4c8:	4431      	add	r1, r6
 800b4ca:	910d      	str	r1, [sp, #52]	; 0x34
 800b4cc:	9908      	ldr	r1, [sp, #32]
 800b4ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4d6:	2900      	cmp	r1, #0
 800b4d8:	d043      	beq.n	800b562 <_dtoa_r+0x582>
 800b4da:	494d      	ldr	r1, [pc, #308]	; (800b610 <_dtoa_r+0x630>)
 800b4dc:	2000      	movs	r0, #0
 800b4de:	f7f5 f9d5 	bl	800088c <__aeabi_ddiv>
 800b4e2:	4652      	mov	r2, sl
 800b4e4:	465b      	mov	r3, fp
 800b4e6:	f7f4 feef 	bl	80002c8 <__aeabi_dsub>
 800b4ea:	9d01      	ldr	r5, [sp, #4]
 800b4ec:	4682      	mov	sl, r0
 800b4ee:	468b      	mov	fp, r1
 800b4f0:	4649      	mov	r1, r9
 800b4f2:	4640      	mov	r0, r8
 800b4f4:	f7f5 fb3a 	bl	8000b6c <__aeabi_d2iz>
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	f7f5 f833 	bl	8000564 <__aeabi_i2d>
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	4640      	mov	r0, r8
 800b504:	4649      	mov	r1, r9
 800b506:	f7f4 fedf 	bl	80002c8 <__aeabi_dsub>
 800b50a:	3630      	adds	r6, #48	; 0x30
 800b50c:	f805 6b01 	strb.w	r6, [r5], #1
 800b510:	4652      	mov	r2, sl
 800b512:	465b      	mov	r3, fp
 800b514:	4680      	mov	r8, r0
 800b516:	4689      	mov	r9, r1
 800b518:	f7f5 fb00 	bl	8000b1c <__aeabi_dcmplt>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d163      	bne.n	800b5e8 <_dtoa_r+0x608>
 800b520:	4642      	mov	r2, r8
 800b522:	464b      	mov	r3, r9
 800b524:	4936      	ldr	r1, [pc, #216]	; (800b600 <_dtoa_r+0x620>)
 800b526:	2000      	movs	r0, #0
 800b528:	f7f4 fece 	bl	80002c8 <__aeabi_dsub>
 800b52c:	4652      	mov	r2, sl
 800b52e:	465b      	mov	r3, fp
 800b530:	f7f5 faf4 	bl	8000b1c <__aeabi_dcmplt>
 800b534:	2800      	cmp	r0, #0
 800b536:	f040 80b5 	bne.w	800b6a4 <_dtoa_r+0x6c4>
 800b53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b53c:	429d      	cmp	r5, r3
 800b53e:	d081      	beq.n	800b444 <_dtoa_r+0x464>
 800b540:	4b30      	ldr	r3, [pc, #192]	; (800b604 <_dtoa_r+0x624>)
 800b542:	2200      	movs	r2, #0
 800b544:	4650      	mov	r0, sl
 800b546:	4659      	mov	r1, fp
 800b548:	f7f5 f876 	bl	8000638 <__aeabi_dmul>
 800b54c:	4b2d      	ldr	r3, [pc, #180]	; (800b604 <_dtoa_r+0x624>)
 800b54e:	4682      	mov	sl, r0
 800b550:	468b      	mov	fp, r1
 800b552:	4640      	mov	r0, r8
 800b554:	4649      	mov	r1, r9
 800b556:	2200      	movs	r2, #0
 800b558:	f7f5 f86e 	bl	8000638 <__aeabi_dmul>
 800b55c:	4680      	mov	r8, r0
 800b55e:	4689      	mov	r9, r1
 800b560:	e7c6      	b.n	800b4f0 <_dtoa_r+0x510>
 800b562:	4650      	mov	r0, sl
 800b564:	4659      	mov	r1, fp
 800b566:	f7f5 f867 	bl	8000638 <__aeabi_dmul>
 800b56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b56c:	9d01      	ldr	r5, [sp, #4]
 800b56e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b570:	4682      	mov	sl, r0
 800b572:	468b      	mov	fp, r1
 800b574:	4649      	mov	r1, r9
 800b576:	4640      	mov	r0, r8
 800b578:	f7f5 faf8 	bl	8000b6c <__aeabi_d2iz>
 800b57c:	4606      	mov	r6, r0
 800b57e:	f7f4 fff1 	bl	8000564 <__aeabi_i2d>
 800b582:	3630      	adds	r6, #48	; 0x30
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	4640      	mov	r0, r8
 800b58a:	4649      	mov	r1, r9
 800b58c:	f7f4 fe9c 	bl	80002c8 <__aeabi_dsub>
 800b590:	f805 6b01 	strb.w	r6, [r5], #1
 800b594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b596:	429d      	cmp	r5, r3
 800b598:	4680      	mov	r8, r0
 800b59a:	4689      	mov	r9, r1
 800b59c:	f04f 0200 	mov.w	r2, #0
 800b5a0:	d124      	bne.n	800b5ec <_dtoa_r+0x60c>
 800b5a2:	4b1b      	ldr	r3, [pc, #108]	; (800b610 <_dtoa_r+0x630>)
 800b5a4:	4650      	mov	r0, sl
 800b5a6:	4659      	mov	r1, fp
 800b5a8:	f7f4 fe90 	bl	80002cc <__adddf3>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	4640      	mov	r0, r8
 800b5b2:	4649      	mov	r1, r9
 800b5b4:	f7f5 fad0 	bl	8000b58 <__aeabi_dcmpgt>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d173      	bne.n	800b6a4 <_dtoa_r+0x6c4>
 800b5bc:	4652      	mov	r2, sl
 800b5be:	465b      	mov	r3, fp
 800b5c0:	4913      	ldr	r1, [pc, #76]	; (800b610 <_dtoa_r+0x630>)
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	f7f4 fe80 	bl	80002c8 <__aeabi_dsub>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	f7f5 faa4 	bl	8000b1c <__aeabi_dcmplt>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	f43f af35 	beq.w	800b444 <_dtoa_r+0x464>
 800b5da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b5dc:	1e6b      	subs	r3, r5, #1
 800b5de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5e4:	2b30      	cmp	r3, #48	; 0x30
 800b5e6:	d0f8      	beq.n	800b5da <_dtoa_r+0x5fa>
 800b5e8:	9700      	str	r7, [sp, #0]
 800b5ea:	e049      	b.n	800b680 <_dtoa_r+0x6a0>
 800b5ec:	4b05      	ldr	r3, [pc, #20]	; (800b604 <_dtoa_r+0x624>)
 800b5ee:	f7f5 f823 	bl	8000638 <__aeabi_dmul>
 800b5f2:	4680      	mov	r8, r0
 800b5f4:	4689      	mov	r9, r1
 800b5f6:	e7bd      	b.n	800b574 <_dtoa_r+0x594>
 800b5f8:	0800d120 	.word	0x0800d120
 800b5fc:	0800d0f8 	.word	0x0800d0f8
 800b600:	3ff00000 	.word	0x3ff00000
 800b604:	40240000 	.word	0x40240000
 800b608:	401c0000 	.word	0x401c0000
 800b60c:	40140000 	.word	0x40140000
 800b610:	3fe00000 	.word	0x3fe00000
 800b614:	9d01      	ldr	r5, [sp, #4]
 800b616:	4656      	mov	r6, sl
 800b618:	465f      	mov	r7, fp
 800b61a:	4642      	mov	r2, r8
 800b61c:	464b      	mov	r3, r9
 800b61e:	4630      	mov	r0, r6
 800b620:	4639      	mov	r1, r7
 800b622:	f7f5 f933 	bl	800088c <__aeabi_ddiv>
 800b626:	f7f5 faa1 	bl	8000b6c <__aeabi_d2iz>
 800b62a:	4682      	mov	sl, r0
 800b62c:	f7f4 ff9a 	bl	8000564 <__aeabi_i2d>
 800b630:	4642      	mov	r2, r8
 800b632:	464b      	mov	r3, r9
 800b634:	f7f5 f800 	bl	8000638 <__aeabi_dmul>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b644:	f7f4 fe40 	bl	80002c8 <__aeabi_dsub>
 800b648:	f805 6b01 	strb.w	r6, [r5], #1
 800b64c:	9e01      	ldr	r6, [sp, #4]
 800b64e:	9f03      	ldr	r7, [sp, #12]
 800b650:	1bae      	subs	r6, r5, r6
 800b652:	42b7      	cmp	r7, r6
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	d135      	bne.n	800b6c6 <_dtoa_r+0x6e6>
 800b65a:	f7f4 fe37 	bl	80002cc <__adddf3>
 800b65e:	4642      	mov	r2, r8
 800b660:	464b      	mov	r3, r9
 800b662:	4606      	mov	r6, r0
 800b664:	460f      	mov	r7, r1
 800b666:	f7f5 fa77 	bl	8000b58 <__aeabi_dcmpgt>
 800b66a:	b9d0      	cbnz	r0, 800b6a2 <_dtoa_r+0x6c2>
 800b66c:	4642      	mov	r2, r8
 800b66e:	464b      	mov	r3, r9
 800b670:	4630      	mov	r0, r6
 800b672:	4639      	mov	r1, r7
 800b674:	f7f5 fa48 	bl	8000b08 <__aeabi_dcmpeq>
 800b678:	b110      	cbz	r0, 800b680 <_dtoa_r+0x6a0>
 800b67a:	f01a 0f01 	tst.w	sl, #1
 800b67e:	d110      	bne.n	800b6a2 <_dtoa_r+0x6c2>
 800b680:	4620      	mov	r0, r4
 800b682:	ee18 1a10 	vmov	r1, s16
 800b686:	f7fe fce1 	bl	800a04c <_Bfree>
 800b68a:	2300      	movs	r3, #0
 800b68c:	9800      	ldr	r0, [sp, #0]
 800b68e:	702b      	strb	r3, [r5, #0]
 800b690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b692:	3001      	adds	r0, #1
 800b694:	6018      	str	r0, [r3, #0]
 800b696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f43f acf1 	beq.w	800b080 <_dtoa_r+0xa0>
 800b69e:	601d      	str	r5, [r3, #0]
 800b6a0:	e4ee      	b.n	800b080 <_dtoa_r+0xa0>
 800b6a2:	9f00      	ldr	r7, [sp, #0]
 800b6a4:	462b      	mov	r3, r5
 800b6a6:	461d      	mov	r5, r3
 800b6a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6ac:	2a39      	cmp	r2, #57	; 0x39
 800b6ae:	d106      	bne.n	800b6be <_dtoa_r+0x6de>
 800b6b0:	9a01      	ldr	r2, [sp, #4]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d1f7      	bne.n	800b6a6 <_dtoa_r+0x6c6>
 800b6b6:	9901      	ldr	r1, [sp, #4]
 800b6b8:	2230      	movs	r2, #48	; 0x30
 800b6ba:	3701      	adds	r7, #1
 800b6bc:	700a      	strb	r2, [r1, #0]
 800b6be:	781a      	ldrb	r2, [r3, #0]
 800b6c0:	3201      	adds	r2, #1
 800b6c2:	701a      	strb	r2, [r3, #0]
 800b6c4:	e790      	b.n	800b5e8 <_dtoa_r+0x608>
 800b6c6:	4ba6      	ldr	r3, [pc, #664]	; (800b960 <_dtoa_r+0x980>)
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f7f4 ffb5 	bl	8000638 <__aeabi_dmul>
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	460f      	mov	r7, r1
 800b6d6:	f7f5 fa17 	bl	8000b08 <__aeabi_dcmpeq>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d09d      	beq.n	800b61a <_dtoa_r+0x63a>
 800b6de:	e7cf      	b.n	800b680 <_dtoa_r+0x6a0>
 800b6e0:	9a08      	ldr	r2, [sp, #32]
 800b6e2:	2a00      	cmp	r2, #0
 800b6e4:	f000 80d7 	beq.w	800b896 <_dtoa_r+0x8b6>
 800b6e8:	9a06      	ldr	r2, [sp, #24]
 800b6ea:	2a01      	cmp	r2, #1
 800b6ec:	f300 80ba 	bgt.w	800b864 <_dtoa_r+0x884>
 800b6f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6f2:	2a00      	cmp	r2, #0
 800b6f4:	f000 80b2 	beq.w	800b85c <_dtoa_r+0x87c>
 800b6f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6fc:	9e07      	ldr	r6, [sp, #28]
 800b6fe:	9d04      	ldr	r5, [sp, #16]
 800b700:	9a04      	ldr	r2, [sp, #16]
 800b702:	441a      	add	r2, r3
 800b704:	9204      	str	r2, [sp, #16]
 800b706:	9a05      	ldr	r2, [sp, #20]
 800b708:	2101      	movs	r1, #1
 800b70a:	441a      	add	r2, r3
 800b70c:	4620      	mov	r0, r4
 800b70e:	9205      	str	r2, [sp, #20]
 800b710:	f7fe fd9e 	bl	800a250 <__i2b>
 800b714:	4607      	mov	r7, r0
 800b716:	2d00      	cmp	r5, #0
 800b718:	dd0c      	ble.n	800b734 <_dtoa_r+0x754>
 800b71a:	9b05      	ldr	r3, [sp, #20]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	dd09      	ble.n	800b734 <_dtoa_r+0x754>
 800b720:	42ab      	cmp	r3, r5
 800b722:	9a04      	ldr	r2, [sp, #16]
 800b724:	bfa8      	it	ge
 800b726:	462b      	movge	r3, r5
 800b728:	1ad2      	subs	r2, r2, r3
 800b72a:	9204      	str	r2, [sp, #16]
 800b72c:	9a05      	ldr	r2, [sp, #20]
 800b72e:	1aed      	subs	r5, r5, r3
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	9305      	str	r3, [sp, #20]
 800b734:	9b07      	ldr	r3, [sp, #28]
 800b736:	b31b      	cbz	r3, 800b780 <_dtoa_r+0x7a0>
 800b738:	9b08      	ldr	r3, [sp, #32]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 80af 	beq.w	800b89e <_dtoa_r+0x8be>
 800b740:	2e00      	cmp	r6, #0
 800b742:	dd13      	ble.n	800b76c <_dtoa_r+0x78c>
 800b744:	4639      	mov	r1, r7
 800b746:	4632      	mov	r2, r6
 800b748:	4620      	mov	r0, r4
 800b74a:	f7fe fe41 	bl	800a3d0 <__pow5mult>
 800b74e:	ee18 2a10 	vmov	r2, s16
 800b752:	4601      	mov	r1, r0
 800b754:	4607      	mov	r7, r0
 800b756:	4620      	mov	r0, r4
 800b758:	f7fe fd90 	bl	800a27c <__multiply>
 800b75c:	ee18 1a10 	vmov	r1, s16
 800b760:	4680      	mov	r8, r0
 800b762:	4620      	mov	r0, r4
 800b764:	f7fe fc72 	bl	800a04c <_Bfree>
 800b768:	ee08 8a10 	vmov	s16, r8
 800b76c:	9b07      	ldr	r3, [sp, #28]
 800b76e:	1b9a      	subs	r2, r3, r6
 800b770:	d006      	beq.n	800b780 <_dtoa_r+0x7a0>
 800b772:	ee18 1a10 	vmov	r1, s16
 800b776:	4620      	mov	r0, r4
 800b778:	f7fe fe2a 	bl	800a3d0 <__pow5mult>
 800b77c:	ee08 0a10 	vmov	s16, r0
 800b780:	2101      	movs	r1, #1
 800b782:	4620      	mov	r0, r4
 800b784:	f7fe fd64 	bl	800a250 <__i2b>
 800b788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	4606      	mov	r6, r0
 800b78e:	f340 8088 	ble.w	800b8a2 <_dtoa_r+0x8c2>
 800b792:	461a      	mov	r2, r3
 800b794:	4601      	mov	r1, r0
 800b796:	4620      	mov	r0, r4
 800b798:	f7fe fe1a 	bl	800a3d0 <__pow5mult>
 800b79c:	9b06      	ldr	r3, [sp, #24]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	f340 8081 	ble.w	800b8a8 <_dtoa_r+0x8c8>
 800b7a6:	f04f 0800 	mov.w	r8, #0
 800b7aa:	6933      	ldr	r3, [r6, #16]
 800b7ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b7b0:	6918      	ldr	r0, [r3, #16]
 800b7b2:	f7fe fcfd 	bl	800a1b0 <__hi0bits>
 800b7b6:	f1c0 0020 	rsb	r0, r0, #32
 800b7ba:	9b05      	ldr	r3, [sp, #20]
 800b7bc:	4418      	add	r0, r3
 800b7be:	f010 001f 	ands.w	r0, r0, #31
 800b7c2:	f000 8092 	beq.w	800b8ea <_dtoa_r+0x90a>
 800b7c6:	f1c0 0320 	rsb	r3, r0, #32
 800b7ca:	2b04      	cmp	r3, #4
 800b7cc:	f340 808a 	ble.w	800b8e4 <_dtoa_r+0x904>
 800b7d0:	f1c0 001c 	rsb	r0, r0, #28
 800b7d4:	9b04      	ldr	r3, [sp, #16]
 800b7d6:	4403      	add	r3, r0
 800b7d8:	9304      	str	r3, [sp, #16]
 800b7da:	9b05      	ldr	r3, [sp, #20]
 800b7dc:	4403      	add	r3, r0
 800b7de:	4405      	add	r5, r0
 800b7e0:	9305      	str	r3, [sp, #20]
 800b7e2:	9b04      	ldr	r3, [sp, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	dd07      	ble.n	800b7f8 <_dtoa_r+0x818>
 800b7e8:	ee18 1a10 	vmov	r1, s16
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f7fe fe48 	bl	800a484 <__lshift>
 800b7f4:	ee08 0a10 	vmov	s16, r0
 800b7f8:	9b05      	ldr	r3, [sp, #20]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	dd05      	ble.n	800b80a <_dtoa_r+0x82a>
 800b7fe:	4631      	mov	r1, r6
 800b800:	461a      	mov	r2, r3
 800b802:	4620      	mov	r0, r4
 800b804:	f7fe fe3e 	bl	800a484 <__lshift>
 800b808:	4606      	mov	r6, r0
 800b80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d06e      	beq.n	800b8ee <_dtoa_r+0x90e>
 800b810:	ee18 0a10 	vmov	r0, s16
 800b814:	4631      	mov	r1, r6
 800b816:	f7fe fea5 	bl	800a564 <__mcmp>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	da67      	bge.n	800b8ee <_dtoa_r+0x90e>
 800b81e:	9b00      	ldr	r3, [sp, #0]
 800b820:	3b01      	subs	r3, #1
 800b822:	ee18 1a10 	vmov	r1, s16
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	220a      	movs	r2, #10
 800b82a:	2300      	movs	r3, #0
 800b82c:	4620      	mov	r0, r4
 800b82e:	f7fe fc2f 	bl	800a090 <__multadd>
 800b832:	9b08      	ldr	r3, [sp, #32]
 800b834:	ee08 0a10 	vmov	s16, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 81b1 	beq.w	800bba0 <_dtoa_r+0xbc0>
 800b83e:	2300      	movs	r3, #0
 800b840:	4639      	mov	r1, r7
 800b842:	220a      	movs	r2, #10
 800b844:	4620      	mov	r0, r4
 800b846:	f7fe fc23 	bl	800a090 <__multadd>
 800b84a:	9b02      	ldr	r3, [sp, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	4607      	mov	r7, r0
 800b850:	f300 808e 	bgt.w	800b970 <_dtoa_r+0x990>
 800b854:	9b06      	ldr	r3, [sp, #24]
 800b856:	2b02      	cmp	r3, #2
 800b858:	dc51      	bgt.n	800b8fe <_dtoa_r+0x91e>
 800b85a:	e089      	b.n	800b970 <_dtoa_r+0x990>
 800b85c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b85e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b862:	e74b      	b.n	800b6fc <_dtoa_r+0x71c>
 800b864:	9b03      	ldr	r3, [sp, #12]
 800b866:	1e5e      	subs	r6, r3, #1
 800b868:	9b07      	ldr	r3, [sp, #28]
 800b86a:	42b3      	cmp	r3, r6
 800b86c:	bfbf      	itttt	lt
 800b86e:	9b07      	ldrlt	r3, [sp, #28]
 800b870:	9607      	strlt	r6, [sp, #28]
 800b872:	1af2      	sublt	r2, r6, r3
 800b874:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b876:	bfb6      	itet	lt
 800b878:	189b      	addlt	r3, r3, r2
 800b87a:	1b9e      	subge	r6, r3, r6
 800b87c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b87e:	9b03      	ldr	r3, [sp, #12]
 800b880:	bfb8      	it	lt
 800b882:	2600      	movlt	r6, #0
 800b884:	2b00      	cmp	r3, #0
 800b886:	bfb7      	itett	lt
 800b888:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b88c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b890:	1a9d      	sublt	r5, r3, r2
 800b892:	2300      	movlt	r3, #0
 800b894:	e734      	b.n	800b700 <_dtoa_r+0x720>
 800b896:	9e07      	ldr	r6, [sp, #28]
 800b898:	9d04      	ldr	r5, [sp, #16]
 800b89a:	9f08      	ldr	r7, [sp, #32]
 800b89c:	e73b      	b.n	800b716 <_dtoa_r+0x736>
 800b89e:	9a07      	ldr	r2, [sp, #28]
 800b8a0:	e767      	b.n	800b772 <_dtoa_r+0x792>
 800b8a2:	9b06      	ldr	r3, [sp, #24]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	dc18      	bgt.n	800b8da <_dtoa_r+0x8fa>
 800b8a8:	f1ba 0f00 	cmp.w	sl, #0
 800b8ac:	d115      	bne.n	800b8da <_dtoa_r+0x8fa>
 800b8ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8b2:	b993      	cbnz	r3, 800b8da <_dtoa_r+0x8fa>
 800b8b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b8b8:	0d1b      	lsrs	r3, r3, #20
 800b8ba:	051b      	lsls	r3, r3, #20
 800b8bc:	b183      	cbz	r3, 800b8e0 <_dtoa_r+0x900>
 800b8be:	9b04      	ldr	r3, [sp, #16]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	9b05      	ldr	r3, [sp, #20]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	9305      	str	r3, [sp, #20]
 800b8ca:	f04f 0801 	mov.w	r8, #1
 800b8ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f47f af6a 	bne.w	800b7aa <_dtoa_r+0x7ca>
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	e76f      	b.n	800b7ba <_dtoa_r+0x7da>
 800b8da:	f04f 0800 	mov.w	r8, #0
 800b8de:	e7f6      	b.n	800b8ce <_dtoa_r+0x8ee>
 800b8e0:	4698      	mov	r8, r3
 800b8e2:	e7f4      	b.n	800b8ce <_dtoa_r+0x8ee>
 800b8e4:	f43f af7d 	beq.w	800b7e2 <_dtoa_r+0x802>
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	301c      	adds	r0, #28
 800b8ec:	e772      	b.n	800b7d4 <_dtoa_r+0x7f4>
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	dc37      	bgt.n	800b964 <_dtoa_r+0x984>
 800b8f4:	9b06      	ldr	r3, [sp, #24]
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	dd34      	ble.n	800b964 <_dtoa_r+0x984>
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	9302      	str	r3, [sp, #8]
 800b8fe:	9b02      	ldr	r3, [sp, #8]
 800b900:	b96b      	cbnz	r3, 800b91e <_dtoa_r+0x93e>
 800b902:	4631      	mov	r1, r6
 800b904:	2205      	movs	r2, #5
 800b906:	4620      	mov	r0, r4
 800b908:	f7fe fbc2 	bl	800a090 <__multadd>
 800b90c:	4601      	mov	r1, r0
 800b90e:	4606      	mov	r6, r0
 800b910:	ee18 0a10 	vmov	r0, s16
 800b914:	f7fe fe26 	bl	800a564 <__mcmp>
 800b918:	2800      	cmp	r0, #0
 800b91a:	f73f adbb 	bgt.w	800b494 <_dtoa_r+0x4b4>
 800b91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b920:	9d01      	ldr	r5, [sp, #4]
 800b922:	43db      	mvns	r3, r3
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	f04f 0800 	mov.w	r8, #0
 800b92a:	4631      	mov	r1, r6
 800b92c:	4620      	mov	r0, r4
 800b92e:	f7fe fb8d 	bl	800a04c <_Bfree>
 800b932:	2f00      	cmp	r7, #0
 800b934:	f43f aea4 	beq.w	800b680 <_dtoa_r+0x6a0>
 800b938:	f1b8 0f00 	cmp.w	r8, #0
 800b93c:	d005      	beq.n	800b94a <_dtoa_r+0x96a>
 800b93e:	45b8      	cmp	r8, r7
 800b940:	d003      	beq.n	800b94a <_dtoa_r+0x96a>
 800b942:	4641      	mov	r1, r8
 800b944:	4620      	mov	r0, r4
 800b946:	f7fe fb81 	bl	800a04c <_Bfree>
 800b94a:	4639      	mov	r1, r7
 800b94c:	4620      	mov	r0, r4
 800b94e:	f7fe fb7d 	bl	800a04c <_Bfree>
 800b952:	e695      	b.n	800b680 <_dtoa_r+0x6a0>
 800b954:	2600      	movs	r6, #0
 800b956:	4637      	mov	r7, r6
 800b958:	e7e1      	b.n	800b91e <_dtoa_r+0x93e>
 800b95a:	9700      	str	r7, [sp, #0]
 800b95c:	4637      	mov	r7, r6
 800b95e:	e599      	b.n	800b494 <_dtoa_r+0x4b4>
 800b960:	40240000 	.word	0x40240000
 800b964:	9b08      	ldr	r3, [sp, #32]
 800b966:	2b00      	cmp	r3, #0
 800b968:	f000 80ca 	beq.w	800bb00 <_dtoa_r+0xb20>
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	9302      	str	r3, [sp, #8]
 800b970:	2d00      	cmp	r5, #0
 800b972:	dd05      	ble.n	800b980 <_dtoa_r+0x9a0>
 800b974:	4639      	mov	r1, r7
 800b976:	462a      	mov	r2, r5
 800b978:	4620      	mov	r0, r4
 800b97a:	f7fe fd83 	bl	800a484 <__lshift>
 800b97e:	4607      	mov	r7, r0
 800b980:	f1b8 0f00 	cmp.w	r8, #0
 800b984:	d05b      	beq.n	800ba3e <_dtoa_r+0xa5e>
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	4620      	mov	r0, r4
 800b98a:	f7fe fb1f 	bl	8009fcc <_Balloc>
 800b98e:	4605      	mov	r5, r0
 800b990:	b928      	cbnz	r0, 800b99e <_dtoa_r+0x9be>
 800b992:	4b87      	ldr	r3, [pc, #540]	; (800bbb0 <_dtoa_r+0xbd0>)
 800b994:	4602      	mov	r2, r0
 800b996:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b99a:	f7ff bb3b 	b.w	800b014 <_dtoa_r+0x34>
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	3202      	adds	r2, #2
 800b9a2:	0092      	lsls	r2, r2, #2
 800b9a4:	f107 010c 	add.w	r1, r7, #12
 800b9a8:	300c      	adds	r0, #12
 800b9aa:	f7fc fffd 	bl	80089a8 <memcpy>
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f7fe fd66 	bl	800a484 <__lshift>
 800b9b8:	9b01      	ldr	r3, [sp, #4]
 800b9ba:	f103 0901 	add.w	r9, r3, #1
 800b9be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	9305      	str	r3, [sp, #20]
 800b9c6:	f00a 0301 	and.w	r3, sl, #1
 800b9ca:	46b8      	mov	r8, r7
 800b9cc:	9304      	str	r3, [sp, #16]
 800b9ce:	4607      	mov	r7, r0
 800b9d0:	4631      	mov	r1, r6
 800b9d2:	ee18 0a10 	vmov	r0, s16
 800b9d6:	f7ff fa77 	bl	800aec8 <quorem>
 800b9da:	4641      	mov	r1, r8
 800b9dc:	9002      	str	r0, [sp, #8]
 800b9de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9e2:	ee18 0a10 	vmov	r0, s16
 800b9e6:	f7fe fdbd 	bl	800a564 <__mcmp>
 800b9ea:	463a      	mov	r2, r7
 800b9ec:	9003      	str	r0, [sp, #12]
 800b9ee:	4631      	mov	r1, r6
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7fe fdd3 	bl	800a59c <__mdiff>
 800b9f6:	68c2      	ldr	r2, [r0, #12]
 800b9f8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	bb02      	cbnz	r2, 800ba42 <_dtoa_r+0xa62>
 800ba00:	4601      	mov	r1, r0
 800ba02:	ee18 0a10 	vmov	r0, s16
 800ba06:	f7fe fdad 	bl	800a564 <__mcmp>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	4620      	mov	r0, r4
 800ba10:	9207      	str	r2, [sp, #28]
 800ba12:	f7fe fb1b 	bl	800a04c <_Bfree>
 800ba16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ba1a:	ea43 0102 	orr.w	r1, r3, r2
 800ba1e:	9b04      	ldr	r3, [sp, #16]
 800ba20:	430b      	orrs	r3, r1
 800ba22:	464d      	mov	r5, r9
 800ba24:	d10f      	bne.n	800ba46 <_dtoa_r+0xa66>
 800ba26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba2a:	d02a      	beq.n	800ba82 <_dtoa_r+0xaa2>
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	dd02      	ble.n	800ba38 <_dtoa_r+0xa58>
 800ba32:	9b02      	ldr	r3, [sp, #8]
 800ba34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ba38:	f88b a000 	strb.w	sl, [fp]
 800ba3c:	e775      	b.n	800b92a <_dtoa_r+0x94a>
 800ba3e:	4638      	mov	r0, r7
 800ba40:	e7ba      	b.n	800b9b8 <_dtoa_r+0x9d8>
 800ba42:	2201      	movs	r2, #1
 800ba44:	e7e2      	b.n	800ba0c <_dtoa_r+0xa2c>
 800ba46:	9b03      	ldr	r3, [sp, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	db04      	blt.n	800ba56 <_dtoa_r+0xa76>
 800ba4c:	9906      	ldr	r1, [sp, #24]
 800ba4e:	430b      	orrs	r3, r1
 800ba50:	9904      	ldr	r1, [sp, #16]
 800ba52:	430b      	orrs	r3, r1
 800ba54:	d122      	bne.n	800ba9c <_dtoa_r+0xabc>
 800ba56:	2a00      	cmp	r2, #0
 800ba58:	ddee      	ble.n	800ba38 <_dtoa_r+0xa58>
 800ba5a:	ee18 1a10 	vmov	r1, s16
 800ba5e:	2201      	movs	r2, #1
 800ba60:	4620      	mov	r0, r4
 800ba62:	f7fe fd0f 	bl	800a484 <__lshift>
 800ba66:	4631      	mov	r1, r6
 800ba68:	ee08 0a10 	vmov	s16, r0
 800ba6c:	f7fe fd7a 	bl	800a564 <__mcmp>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	dc03      	bgt.n	800ba7c <_dtoa_r+0xa9c>
 800ba74:	d1e0      	bne.n	800ba38 <_dtoa_r+0xa58>
 800ba76:	f01a 0f01 	tst.w	sl, #1
 800ba7a:	d0dd      	beq.n	800ba38 <_dtoa_r+0xa58>
 800ba7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba80:	d1d7      	bne.n	800ba32 <_dtoa_r+0xa52>
 800ba82:	2339      	movs	r3, #57	; 0x39
 800ba84:	f88b 3000 	strb.w	r3, [fp]
 800ba88:	462b      	mov	r3, r5
 800ba8a:	461d      	mov	r5, r3
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba92:	2a39      	cmp	r2, #57	; 0x39
 800ba94:	d071      	beq.n	800bb7a <_dtoa_r+0xb9a>
 800ba96:	3201      	adds	r2, #1
 800ba98:	701a      	strb	r2, [r3, #0]
 800ba9a:	e746      	b.n	800b92a <_dtoa_r+0x94a>
 800ba9c:	2a00      	cmp	r2, #0
 800ba9e:	dd07      	ble.n	800bab0 <_dtoa_r+0xad0>
 800baa0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800baa4:	d0ed      	beq.n	800ba82 <_dtoa_r+0xaa2>
 800baa6:	f10a 0301 	add.w	r3, sl, #1
 800baaa:	f88b 3000 	strb.w	r3, [fp]
 800baae:	e73c      	b.n	800b92a <_dtoa_r+0x94a>
 800bab0:	9b05      	ldr	r3, [sp, #20]
 800bab2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bab6:	4599      	cmp	r9, r3
 800bab8:	d047      	beq.n	800bb4a <_dtoa_r+0xb6a>
 800baba:	ee18 1a10 	vmov	r1, s16
 800babe:	2300      	movs	r3, #0
 800bac0:	220a      	movs	r2, #10
 800bac2:	4620      	mov	r0, r4
 800bac4:	f7fe fae4 	bl	800a090 <__multadd>
 800bac8:	45b8      	cmp	r8, r7
 800baca:	ee08 0a10 	vmov	s16, r0
 800bace:	f04f 0300 	mov.w	r3, #0
 800bad2:	f04f 020a 	mov.w	r2, #10
 800bad6:	4641      	mov	r1, r8
 800bad8:	4620      	mov	r0, r4
 800bada:	d106      	bne.n	800baea <_dtoa_r+0xb0a>
 800badc:	f7fe fad8 	bl	800a090 <__multadd>
 800bae0:	4680      	mov	r8, r0
 800bae2:	4607      	mov	r7, r0
 800bae4:	f109 0901 	add.w	r9, r9, #1
 800bae8:	e772      	b.n	800b9d0 <_dtoa_r+0x9f0>
 800baea:	f7fe fad1 	bl	800a090 <__multadd>
 800baee:	4639      	mov	r1, r7
 800baf0:	4680      	mov	r8, r0
 800baf2:	2300      	movs	r3, #0
 800baf4:	220a      	movs	r2, #10
 800baf6:	4620      	mov	r0, r4
 800baf8:	f7fe faca 	bl	800a090 <__multadd>
 800bafc:	4607      	mov	r7, r0
 800bafe:	e7f1      	b.n	800bae4 <_dtoa_r+0xb04>
 800bb00:	9b03      	ldr	r3, [sp, #12]
 800bb02:	9302      	str	r3, [sp, #8]
 800bb04:	9d01      	ldr	r5, [sp, #4]
 800bb06:	ee18 0a10 	vmov	r0, s16
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	f7ff f9dc 	bl	800aec8 <quorem>
 800bb10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb14:	9b01      	ldr	r3, [sp, #4]
 800bb16:	f805 ab01 	strb.w	sl, [r5], #1
 800bb1a:	1aea      	subs	r2, r5, r3
 800bb1c:	9b02      	ldr	r3, [sp, #8]
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	dd09      	ble.n	800bb36 <_dtoa_r+0xb56>
 800bb22:	ee18 1a10 	vmov	r1, s16
 800bb26:	2300      	movs	r3, #0
 800bb28:	220a      	movs	r2, #10
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f7fe fab0 	bl	800a090 <__multadd>
 800bb30:	ee08 0a10 	vmov	s16, r0
 800bb34:	e7e7      	b.n	800bb06 <_dtoa_r+0xb26>
 800bb36:	9b02      	ldr	r3, [sp, #8]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	bfc8      	it	gt
 800bb3c:	461d      	movgt	r5, r3
 800bb3e:	9b01      	ldr	r3, [sp, #4]
 800bb40:	bfd8      	it	le
 800bb42:	2501      	movle	r5, #1
 800bb44:	441d      	add	r5, r3
 800bb46:	f04f 0800 	mov.w	r8, #0
 800bb4a:	ee18 1a10 	vmov	r1, s16
 800bb4e:	2201      	movs	r2, #1
 800bb50:	4620      	mov	r0, r4
 800bb52:	f7fe fc97 	bl	800a484 <__lshift>
 800bb56:	4631      	mov	r1, r6
 800bb58:	ee08 0a10 	vmov	s16, r0
 800bb5c:	f7fe fd02 	bl	800a564 <__mcmp>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	dc91      	bgt.n	800ba88 <_dtoa_r+0xaa8>
 800bb64:	d102      	bne.n	800bb6c <_dtoa_r+0xb8c>
 800bb66:	f01a 0f01 	tst.w	sl, #1
 800bb6a:	d18d      	bne.n	800ba88 <_dtoa_r+0xaa8>
 800bb6c:	462b      	mov	r3, r5
 800bb6e:	461d      	mov	r5, r3
 800bb70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb74:	2a30      	cmp	r2, #48	; 0x30
 800bb76:	d0fa      	beq.n	800bb6e <_dtoa_r+0xb8e>
 800bb78:	e6d7      	b.n	800b92a <_dtoa_r+0x94a>
 800bb7a:	9a01      	ldr	r2, [sp, #4]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d184      	bne.n	800ba8a <_dtoa_r+0xaaa>
 800bb80:	9b00      	ldr	r3, [sp, #0]
 800bb82:	3301      	adds	r3, #1
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	2331      	movs	r3, #49	; 0x31
 800bb88:	7013      	strb	r3, [r2, #0]
 800bb8a:	e6ce      	b.n	800b92a <_dtoa_r+0x94a>
 800bb8c:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <_dtoa_r+0xbd4>)
 800bb8e:	f7ff ba95 	b.w	800b0bc <_dtoa_r+0xdc>
 800bb92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f47f aa6e 	bne.w	800b076 <_dtoa_r+0x96>
 800bb9a:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <_dtoa_r+0xbd8>)
 800bb9c:	f7ff ba8e 	b.w	800b0bc <_dtoa_r+0xdc>
 800bba0:	9b02      	ldr	r3, [sp, #8]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	dcae      	bgt.n	800bb04 <_dtoa_r+0xb24>
 800bba6:	9b06      	ldr	r3, [sp, #24]
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	f73f aea8 	bgt.w	800b8fe <_dtoa_r+0x91e>
 800bbae:	e7a9      	b.n	800bb04 <_dtoa_r+0xb24>
 800bbb0:	0800cff8 	.word	0x0800cff8
 800bbb4:	0800d360 	.word	0x0800d360
 800bbb8:	0800d353 	.word	0x0800d353

0800bbbc <fiprintf>:
 800bbbc:	b40e      	push	{r1, r2, r3}
 800bbbe:	b503      	push	{r0, r1, lr}
 800bbc0:	4601      	mov	r1, r0
 800bbc2:	ab03      	add	r3, sp, #12
 800bbc4:	4805      	ldr	r0, [pc, #20]	; (800bbdc <fiprintf+0x20>)
 800bbc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbca:	6800      	ldr	r0, [r0, #0]
 800bbcc:	9301      	str	r3, [sp, #4]
 800bbce:	f000 f891 	bl	800bcf4 <_vfiprintf_r>
 800bbd2:	b002      	add	sp, #8
 800bbd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbd8:	b003      	add	sp, #12
 800bbda:	4770      	bx	lr
 800bbdc:	2000001c 	.word	0x2000001c

0800bbe0 <malloc>:
 800bbe0:	4b02      	ldr	r3, [pc, #8]	; (800bbec <malloc+0xc>)
 800bbe2:	4601      	mov	r1, r0
 800bbe4:	6818      	ldr	r0, [r3, #0]
 800bbe6:	f7fe bf07 	b.w	800a9f8 <_malloc_r>
 800bbea:	bf00      	nop
 800bbec:	2000001c 	.word	0x2000001c

0800bbf0 <__malloc_lock>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	; (800bbf8 <__malloc_lock+0x8>)
 800bbf2:	f000 bc2f 	b.w	800c454 <__retarget_lock_acquire_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	200009a4 	.word	0x200009a4

0800bbfc <__malloc_unlock>:
 800bbfc:	4801      	ldr	r0, [pc, #4]	; (800bc04 <__malloc_unlock+0x8>)
 800bbfe:	f000 bc2a 	b.w	800c456 <__retarget_lock_release_recursive>
 800bc02:	bf00      	nop
 800bc04:	200009a4 	.word	0x200009a4

0800bc08 <_free_r>:
 800bc08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc0a:	2900      	cmp	r1, #0
 800bc0c:	d044      	beq.n	800bc98 <_free_r+0x90>
 800bc0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc12:	9001      	str	r0, [sp, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f1a1 0404 	sub.w	r4, r1, #4
 800bc1a:	bfb8      	it	lt
 800bc1c:	18e4      	addlt	r4, r4, r3
 800bc1e:	f7ff ffe7 	bl	800bbf0 <__malloc_lock>
 800bc22:	4a1e      	ldr	r2, [pc, #120]	; (800bc9c <_free_r+0x94>)
 800bc24:	9801      	ldr	r0, [sp, #4]
 800bc26:	6813      	ldr	r3, [r2, #0]
 800bc28:	b933      	cbnz	r3, 800bc38 <_free_r+0x30>
 800bc2a:	6063      	str	r3, [r4, #4]
 800bc2c:	6014      	str	r4, [r2, #0]
 800bc2e:	b003      	add	sp, #12
 800bc30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc34:	f7ff bfe2 	b.w	800bbfc <__malloc_unlock>
 800bc38:	42a3      	cmp	r3, r4
 800bc3a:	d908      	bls.n	800bc4e <_free_r+0x46>
 800bc3c:	6825      	ldr	r5, [r4, #0]
 800bc3e:	1961      	adds	r1, r4, r5
 800bc40:	428b      	cmp	r3, r1
 800bc42:	bf01      	itttt	eq
 800bc44:	6819      	ldreq	r1, [r3, #0]
 800bc46:	685b      	ldreq	r3, [r3, #4]
 800bc48:	1949      	addeq	r1, r1, r5
 800bc4a:	6021      	streq	r1, [r4, #0]
 800bc4c:	e7ed      	b.n	800bc2a <_free_r+0x22>
 800bc4e:	461a      	mov	r2, r3
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	b10b      	cbz	r3, 800bc58 <_free_r+0x50>
 800bc54:	42a3      	cmp	r3, r4
 800bc56:	d9fa      	bls.n	800bc4e <_free_r+0x46>
 800bc58:	6811      	ldr	r1, [r2, #0]
 800bc5a:	1855      	adds	r5, r2, r1
 800bc5c:	42a5      	cmp	r5, r4
 800bc5e:	d10b      	bne.n	800bc78 <_free_r+0x70>
 800bc60:	6824      	ldr	r4, [r4, #0]
 800bc62:	4421      	add	r1, r4
 800bc64:	1854      	adds	r4, r2, r1
 800bc66:	42a3      	cmp	r3, r4
 800bc68:	6011      	str	r1, [r2, #0]
 800bc6a:	d1e0      	bne.n	800bc2e <_free_r+0x26>
 800bc6c:	681c      	ldr	r4, [r3, #0]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	6053      	str	r3, [r2, #4]
 800bc72:	4421      	add	r1, r4
 800bc74:	6011      	str	r1, [r2, #0]
 800bc76:	e7da      	b.n	800bc2e <_free_r+0x26>
 800bc78:	d902      	bls.n	800bc80 <_free_r+0x78>
 800bc7a:	230c      	movs	r3, #12
 800bc7c:	6003      	str	r3, [r0, #0]
 800bc7e:	e7d6      	b.n	800bc2e <_free_r+0x26>
 800bc80:	6825      	ldr	r5, [r4, #0]
 800bc82:	1961      	adds	r1, r4, r5
 800bc84:	428b      	cmp	r3, r1
 800bc86:	bf04      	itt	eq
 800bc88:	6819      	ldreq	r1, [r3, #0]
 800bc8a:	685b      	ldreq	r3, [r3, #4]
 800bc8c:	6063      	str	r3, [r4, #4]
 800bc8e:	bf04      	itt	eq
 800bc90:	1949      	addeq	r1, r1, r5
 800bc92:	6021      	streq	r1, [r4, #0]
 800bc94:	6054      	str	r4, [r2, #4]
 800bc96:	e7ca      	b.n	800bc2e <_free_r+0x26>
 800bc98:	b003      	add	sp, #12
 800bc9a:	bd30      	pop	{r4, r5, pc}
 800bc9c:	20000998 	.word	0x20000998

0800bca0 <__sfputc_r>:
 800bca0:	6893      	ldr	r3, [r2, #8]
 800bca2:	3b01      	subs	r3, #1
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	b410      	push	{r4}
 800bca8:	6093      	str	r3, [r2, #8]
 800bcaa:	da08      	bge.n	800bcbe <__sfputc_r+0x1e>
 800bcac:	6994      	ldr	r4, [r2, #24]
 800bcae:	42a3      	cmp	r3, r4
 800bcb0:	db01      	blt.n	800bcb6 <__sfputc_r+0x16>
 800bcb2:	290a      	cmp	r1, #10
 800bcb4:	d103      	bne.n	800bcbe <__sfputc_r+0x1e>
 800bcb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcba:	f000 b94b 	b.w	800bf54 <__swbuf_r>
 800bcbe:	6813      	ldr	r3, [r2, #0]
 800bcc0:	1c58      	adds	r0, r3, #1
 800bcc2:	6010      	str	r0, [r2, #0]
 800bcc4:	7019      	strb	r1, [r3, #0]
 800bcc6:	4608      	mov	r0, r1
 800bcc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bccc:	4770      	bx	lr

0800bcce <__sfputs_r>:
 800bcce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	460f      	mov	r7, r1
 800bcd4:	4614      	mov	r4, r2
 800bcd6:	18d5      	adds	r5, r2, r3
 800bcd8:	42ac      	cmp	r4, r5
 800bcda:	d101      	bne.n	800bce0 <__sfputs_r+0x12>
 800bcdc:	2000      	movs	r0, #0
 800bcde:	e007      	b.n	800bcf0 <__sfputs_r+0x22>
 800bce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce4:	463a      	mov	r2, r7
 800bce6:	4630      	mov	r0, r6
 800bce8:	f7ff ffda 	bl	800bca0 <__sfputc_r>
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	d1f3      	bne.n	800bcd8 <__sfputs_r+0xa>
 800bcf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcf4 <_vfiprintf_r>:
 800bcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf8:	460d      	mov	r5, r1
 800bcfa:	b09d      	sub	sp, #116	; 0x74
 800bcfc:	4614      	mov	r4, r2
 800bcfe:	4698      	mov	r8, r3
 800bd00:	4606      	mov	r6, r0
 800bd02:	b118      	cbz	r0, 800bd0c <_vfiprintf_r+0x18>
 800bd04:	6983      	ldr	r3, [r0, #24]
 800bd06:	b90b      	cbnz	r3, 800bd0c <_vfiprintf_r+0x18>
 800bd08:	f000 fb06 	bl	800c318 <__sinit>
 800bd0c:	4b89      	ldr	r3, [pc, #548]	; (800bf34 <_vfiprintf_r+0x240>)
 800bd0e:	429d      	cmp	r5, r3
 800bd10:	d11b      	bne.n	800bd4a <_vfiprintf_r+0x56>
 800bd12:	6875      	ldr	r5, [r6, #4]
 800bd14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd16:	07d9      	lsls	r1, r3, #31
 800bd18:	d405      	bmi.n	800bd26 <_vfiprintf_r+0x32>
 800bd1a:	89ab      	ldrh	r3, [r5, #12]
 800bd1c:	059a      	lsls	r2, r3, #22
 800bd1e:	d402      	bmi.n	800bd26 <_vfiprintf_r+0x32>
 800bd20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd22:	f000 fb97 	bl	800c454 <__retarget_lock_acquire_recursive>
 800bd26:	89ab      	ldrh	r3, [r5, #12]
 800bd28:	071b      	lsls	r3, r3, #28
 800bd2a:	d501      	bpl.n	800bd30 <_vfiprintf_r+0x3c>
 800bd2c:	692b      	ldr	r3, [r5, #16]
 800bd2e:	b9eb      	cbnz	r3, 800bd6c <_vfiprintf_r+0x78>
 800bd30:	4629      	mov	r1, r5
 800bd32:	4630      	mov	r0, r6
 800bd34:	f000 f960 	bl	800bff8 <__swsetup_r>
 800bd38:	b1c0      	cbz	r0, 800bd6c <_vfiprintf_r+0x78>
 800bd3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd3c:	07dc      	lsls	r4, r3, #31
 800bd3e:	d50e      	bpl.n	800bd5e <_vfiprintf_r+0x6a>
 800bd40:	f04f 30ff 	mov.w	r0, #4294967295
 800bd44:	b01d      	add	sp, #116	; 0x74
 800bd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4a:	4b7b      	ldr	r3, [pc, #492]	; (800bf38 <_vfiprintf_r+0x244>)
 800bd4c:	429d      	cmp	r5, r3
 800bd4e:	d101      	bne.n	800bd54 <_vfiprintf_r+0x60>
 800bd50:	68b5      	ldr	r5, [r6, #8]
 800bd52:	e7df      	b.n	800bd14 <_vfiprintf_r+0x20>
 800bd54:	4b79      	ldr	r3, [pc, #484]	; (800bf3c <_vfiprintf_r+0x248>)
 800bd56:	429d      	cmp	r5, r3
 800bd58:	bf08      	it	eq
 800bd5a:	68f5      	ldreq	r5, [r6, #12]
 800bd5c:	e7da      	b.n	800bd14 <_vfiprintf_r+0x20>
 800bd5e:	89ab      	ldrh	r3, [r5, #12]
 800bd60:	0598      	lsls	r0, r3, #22
 800bd62:	d4ed      	bmi.n	800bd40 <_vfiprintf_r+0x4c>
 800bd64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd66:	f000 fb76 	bl	800c456 <__retarget_lock_release_recursive>
 800bd6a:	e7e9      	b.n	800bd40 <_vfiprintf_r+0x4c>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd70:	2320      	movs	r3, #32
 800bd72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd76:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd7a:	2330      	movs	r3, #48	; 0x30
 800bd7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf40 <_vfiprintf_r+0x24c>
 800bd80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd84:	f04f 0901 	mov.w	r9, #1
 800bd88:	4623      	mov	r3, r4
 800bd8a:	469a      	mov	sl, r3
 800bd8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd90:	b10a      	cbz	r2, 800bd96 <_vfiprintf_r+0xa2>
 800bd92:	2a25      	cmp	r2, #37	; 0x25
 800bd94:	d1f9      	bne.n	800bd8a <_vfiprintf_r+0x96>
 800bd96:	ebba 0b04 	subs.w	fp, sl, r4
 800bd9a:	d00b      	beq.n	800bdb4 <_vfiprintf_r+0xc0>
 800bd9c:	465b      	mov	r3, fp
 800bd9e:	4622      	mov	r2, r4
 800bda0:	4629      	mov	r1, r5
 800bda2:	4630      	mov	r0, r6
 800bda4:	f7ff ff93 	bl	800bcce <__sfputs_r>
 800bda8:	3001      	adds	r0, #1
 800bdaa:	f000 80aa 	beq.w	800bf02 <_vfiprintf_r+0x20e>
 800bdae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdb0:	445a      	add	r2, fp
 800bdb2:	9209      	str	r2, [sp, #36]	; 0x24
 800bdb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 80a2 	beq.w	800bf02 <_vfiprintf_r+0x20e>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdc8:	f10a 0a01 	add.w	sl, sl, #1
 800bdcc:	9304      	str	r3, [sp, #16]
 800bdce:	9307      	str	r3, [sp, #28]
 800bdd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdd4:	931a      	str	r3, [sp, #104]	; 0x68
 800bdd6:	4654      	mov	r4, sl
 800bdd8:	2205      	movs	r2, #5
 800bdda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdde:	4858      	ldr	r0, [pc, #352]	; (800bf40 <_vfiprintf_r+0x24c>)
 800bde0:	f7f4 fa1e 	bl	8000220 <memchr>
 800bde4:	9a04      	ldr	r2, [sp, #16]
 800bde6:	b9d8      	cbnz	r0, 800be20 <_vfiprintf_r+0x12c>
 800bde8:	06d1      	lsls	r1, r2, #27
 800bdea:	bf44      	itt	mi
 800bdec:	2320      	movmi	r3, #32
 800bdee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdf2:	0713      	lsls	r3, r2, #28
 800bdf4:	bf44      	itt	mi
 800bdf6:	232b      	movmi	r3, #43	; 0x2b
 800bdf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdfc:	f89a 3000 	ldrb.w	r3, [sl]
 800be00:	2b2a      	cmp	r3, #42	; 0x2a
 800be02:	d015      	beq.n	800be30 <_vfiprintf_r+0x13c>
 800be04:	9a07      	ldr	r2, [sp, #28]
 800be06:	4654      	mov	r4, sl
 800be08:	2000      	movs	r0, #0
 800be0a:	f04f 0c0a 	mov.w	ip, #10
 800be0e:	4621      	mov	r1, r4
 800be10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be14:	3b30      	subs	r3, #48	; 0x30
 800be16:	2b09      	cmp	r3, #9
 800be18:	d94e      	bls.n	800beb8 <_vfiprintf_r+0x1c4>
 800be1a:	b1b0      	cbz	r0, 800be4a <_vfiprintf_r+0x156>
 800be1c:	9207      	str	r2, [sp, #28]
 800be1e:	e014      	b.n	800be4a <_vfiprintf_r+0x156>
 800be20:	eba0 0308 	sub.w	r3, r0, r8
 800be24:	fa09 f303 	lsl.w	r3, r9, r3
 800be28:	4313      	orrs	r3, r2
 800be2a:	9304      	str	r3, [sp, #16]
 800be2c:	46a2      	mov	sl, r4
 800be2e:	e7d2      	b.n	800bdd6 <_vfiprintf_r+0xe2>
 800be30:	9b03      	ldr	r3, [sp, #12]
 800be32:	1d19      	adds	r1, r3, #4
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	9103      	str	r1, [sp, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	bfbb      	ittet	lt
 800be3c:	425b      	neglt	r3, r3
 800be3e:	f042 0202 	orrlt.w	r2, r2, #2
 800be42:	9307      	strge	r3, [sp, #28]
 800be44:	9307      	strlt	r3, [sp, #28]
 800be46:	bfb8      	it	lt
 800be48:	9204      	strlt	r2, [sp, #16]
 800be4a:	7823      	ldrb	r3, [r4, #0]
 800be4c:	2b2e      	cmp	r3, #46	; 0x2e
 800be4e:	d10c      	bne.n	800be6a <_vfiprintf_r+0x176>
 800be50:	7863      	ldrb	r3, [r4, #1]
 800be52:	2b2a      	cmp	r3, #42	; 0x2a
 800be54:	d135      	bne.n	800bec2 <_vfiprintf_r+0x1ce>
 800be56:	9b03      	ldr	r3, [sp, #12]
 800be58:	1d1a      	adds	r2, r3, #4
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	9203      	str	r2, [sp, #12]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	bfb8      	it	lt
 800be62:	f04f 33ff 	movlt.w	r3, #4294967295
 800be66:	3402      	adds	r4, #2
 800be68:	9305      	str	r3, [sp, #20]
 800be6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf50 <_vfiprintf_r+0x25c>
 800be6e:	7821      	ldrb	r1, [r4, #0]
 800be70:	2203      	movs	r2, #3
 800be72:	4650      	mov	r0, sl
 800be74:	f7f4 f9d4 	bl	8000220 <memchr>
 800be78:	b140      	cbz	r0, 800be8c <_vfiprintf_r+0x198>
 800be7a:	2340      	movs	r3, #64	; 0x40
 800be7c:	eba0 000a 	sub.w	r0, r0, sl
 800be80:	fa03 f000 	lsl.w	r0, r3, r0
 800be84:	9b04      	ldr	r3, [sp, #16]
 800be86:	4303      	orrs	r3, r0
 800be88:	3401      	adds	r4, #1
 800be8a:	9304      	str	r3, [sp, #16]
 800be8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be90:	482c      	ldr	r0, [pc, #176]	; (800bf44 <_vfiprintf_r+0x250>)
 800be92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be96:	2206      	movs	r2, #6
 800be98:	f7f4 f9c2 	bl	8000220 <memchr>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d03f      	beq.n	800bf20 <_vfiprintf_r+0x22c>
 800bea0:	4b29      	ldr	r3, [pc, #164]	; (800bf48 <_vfiprintf_r+0x254>)
 800bea2:	bb1b      	cbnz	r3, 800beec <_vfiprintf_r+0x1f8>
 800bea4:	9b03      	ldr	r3, [sp, #12]
 800bea6:	3307      	adds	r3, #7
 800bea8:	f023 0307 	bic.w	r3, r3, #7
 800beac:	3308      	adds	r3, #8
 800beae:	9303      	str	r3, [sp, #12]
 800beb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb2:	443b      	add	r3, r7
 800beb4:	9309      	str	r3, [sp, #36]	; 0x24
 800beb6:	e767      	b.n	800bd88 <_vfiprintf_r+0x94>
 800beb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bebc:	460c      	mov	r4, r1
 800bebe:	2001      	movs	r0, #1
 800bec0:	e7a5      	b.n	800be0e <_vfiprintf_r+0x11a>
 800bec2:	2300      	movs	r3, #0
 800bec4:	3401      	adds	r4, #1
 800bec6:	9305      	str	r3, [sp, #20]
 800bec8:	4619      	mov	r1, r3
 800beca:	f04f 0c0a 	mov.w	ip, #10
 800bece:	4620      	mov	r0, r4
 800bed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bed4:	3a30      	subs	r2, #48	; 0x30
 800bed6:	2a09      	cmp	r2, #9
 800bed8:	d903      	bls.n	800bee2 <_vfiprintf_r+0x1ee>
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d0c5      	beq.n	800be6a <_vfiprintf_r+0x176>
 800bede:	9105      	str	r1, [sp, #20]
 800bee0:	e7c3      	b.n	800be6a <_vfiprintf_r+0x176>
 800bee2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bee6:	4604      	mov	r4, r0
 800bee8:	2301      	movs	r3, #1
 800beea:	e7f0      	b.n	800bece <_vfiprintf_r+0x1da>
 800beec:	ab03      	add	r3, sp, #12
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	462a      	mov	r2, r5
 800bef2:	4b16      	ldr	r3, [pc, #88]	; (800bf4c <_vfiprintf_r+0x258>)
 800bef4:	a904      	add	r1, sp, #16
 800bef6:	4630      	mov	r0, r6
 800bef8:	f3af 8000 	nop.w
 800befc:	4607      	mov	r7, r0
 800befe:	1c78      	adds	r0, r7, #1
 800bf00:	d1d6      	bne.n	800beb0 <_vfiprintf_r+0x1bc>
 800bf02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf04:	07d9      	lsls	r1, r3, #31
 800bf06:	d405      	bmi.n	800bf14 <_vfiprintf_r+0x220>
 800bf08:	89ab      	ldrh	r3, [r5, #12]
 800bf0a:	059a      	lsls	r2, r3, #22
 800bf0c:	d402      	bmi.n	800bf14 <_vfiprintf_r+0x220>
 800bf0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf10:	f000 faa1 	bl	800c456 <__retarget_lock_release_recursive>
 800bf14:	89ab      	ldrh	r3, [r5, #12]
 800bf16:	065b      	lsls	r3, r3, #25
 800bf18:	f53f af12 	bmi.w	800bd40 <_vfiprintf_r+0x4c>
 800bf1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf1e:	e711      	b.n	800bd44 <_vfiprintf_r+0x50>
 800bf20:	ab03      	add	r3, sp, #12
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	462a      	mov	r2, r5
 800bf26:	4b09      	ldr	r3, [pc, #36]	; (800bf4c <_vfiprintf_r+0x258>)
 800bf28:	a904      	add	r1, sp, #16
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	f7fe fe46 	bl	800abbc <_printf_i>
 800bf30:	e7e4      	b.n	800befc <_vfiprintf_r+0x208>
 800bf32:	bf00      	nop
 800bf34:	0800d3f0 	.word	0x0800d3f0
 800bf38:	0800d410 	.word	0x0800d410
 800bf3c:	0800d3d0 	.word	0x0800d3d0
 800bf40:	0800d3bd 	.word	0x0800d3bd
 800bf44:	0800d3c7 	.word	0x0800d3c7
 800bf48:	00000000 	.word	0x00000000
 800bf4c:	0800bccf 	.word	0x0800bccf
 800bf50:	0800d3c3 	.word	0x0800d3c3

0800bf54 <__swbuf_r>:
 800bf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf56:	460e      	mov	r6, r1
 800bf58:	4614      	mov	r4, r2
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	b118      	cbz	r0, 800bf66 <__swbuf_r+0x12>
 800bf5e:	6983      	ldr	r3, [r0, #24]
 800bf60:	b90b      	cbnz	r3, 800bf66 <__swbuf_r+0x12>
 800bf62:	f000 f9d9 	bl	800c318 <__sinit>
 800bf66:	4b21      	ldr	r3, [pc, #132]	; (800bfec <__swbuf_r+0x98>)
 800bf68:	429c      	cmp	r4, r3
 800bf6a:	d12b      	bne.n	800bfc4 <__swbuf_r+0x70>
 800bf6c:	686c      	ldr	r4, [r5, #4]
 800bf6e:	69a3      	ldr	r3, [r4, #24]
 800bf70:	60a3      	str	r3, [r4, #8]
 800bf72:	89a3      	ldrh	r3, [r4, #12]
 800bf74:	071a      	lsls	r2, r3, #28
 800bf76:	d52f      	bpl.n	800bfd8 <__swbuf_r+0x84>
 800bf78:	6923      	ldr	r3, [r4, #16]
 800bf7a:	b36b      	cbz	r3, 800bfd8 <__swbuf_r+0x84>
 800bf7c:	6923      	ldr	r3, [r4, #16]
 800bf7e:	6820      	ldr	r0, [r4, #0]
 800bf80:	1ac0      	subs	r0, r0, r3
 800bf82:	6963      	ldr	r3, [r4, #20]
 800bf84:	b2f6      	uxtb	r6, r6
 800bf86:	4283      	cmp	r3, r0
 800bf88:	4637      	mov	r7, r6
 800bf8a:	dc04      	bgt.n	800bf96 <__swbuf_r+0x42>
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f000 f92e 	bl	800c1f0 <_fflush_r>
 800bf94:	bb30      	cbnz	r0, 800bfe4 <__swbuf_r+0x90>
 800bf96:	68a3      	ldr	r3, [r4, #8]
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	60a3      	str	r3, [r4, #8]
 800bf9c:	6823      	ldr	r3, [r4, #0]
 800bf9e:	1c5a      	adds	r2, r3, #1
 800bfa0:	6022      	str	r2, [r4, #0]
 800bfa2:	701e      	strb	r6, [r3, #0]
 800bfa4:	6963      	ldr	r3, [r4, #20]
 800bfa6:	3001      	adds	r0, #1
 800bfa8:	4283      	cmp	r3, r0
 800bfaa:	d004      	beq.n	800bfb6 <__swbuf_r+0x62>
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	07db      	lsls	r3, r3, #31
 800bfb0:	d506      	bpl.n	800bfc0 <__swbuf_r+0x6c>
 800bfb2:	2e0a      	cmp	r6, #10
 800bfb4:	d104      	bne.n	800bfc0 <__swbuf_r+0x6c>
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f000 f919 	bl	800c1f0 <_fflush_r>
 800bfbe:	b988      	cbnz	r0, 800bfe4 <__swbuf_r+0x90>
 800bfc0:	4638      	mov	r0, r7
 800bfc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfc4:	4b0a      	ldr	r3, [pc, #40]	; (800bff0 <__swbuf_r+0x9c>)
 800bfc6:	429c      	cmp	r4, r3
 800bfc8:	d101      	bne.n	800bfce <__swbuf_r+0x7a>
 800bfca:	68ac      	ldr	r4, [r5, #8]
 800bfcc:	e7cf      	b.n	800bf6e <__swbuf_r+0x1a>
 800bfce:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <__swbuf_r+0xa0>)
 800bfd0:	429c      	cmp	r4, r3
 800bfd2:	bf08      	it	eq
 800bfd4:	68ec      	ldreq	r4, [r5, #12]
 800bfd6:	e7ca      	b.n	800bf6e <__swbuf_r+0x1a>
 800bfd8:	4621      	mov	r1, r4
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f000 f80c 	bl	800bff8 <__swsetup_r>
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d0cb      	beq.n	800bf7c <__swbuf_r+0x28>
 800bfe4:	f04f 37ff 	mov.w	r7, #4294967295
 800bfe8:	e7ea      	b.n	800bfc0 <__swbuf_r+0x6c>
 800bfea:	bf00      	nop
 800bfec:	0800d3f0 	.word	0x0800d3f0
 800bff0:	0800d410 	.word	0x0800d410
 800bff4:	0800d3d0 	.word	0x0800d3d0

0800bff8 <__swsetup_r>:
 800bff8:	4b32      	ldr	r3, [pc, #200]	; (800c0c4 <__swsetup_r+0xcc>)
 800bffa:	b570      	push	{r4, r5, r6, lr}
 800bffc:	681d      	ldr	r5, [r3, #0]
 800bffe:	4606      	mov	r6, r0
 800c000:	460c      	mov	r4, r1
 800c002:	b125      	cbz	r5, 800c00e <__swsetup_r+0x16>
 800c004:	69ab      	ldr	r3, [r5, #24]
 800c006:	b913      	cbnz	r3, 800c00e <__swsetup_r+0x16>
 800c008:	4628      	mov	r0, r5
 800c00a:	f000 f985 	bl	800c318 <__sinit>
 800c00e:	4b2e      	ldr	r3, [pc, #184]	; (800c0c8 <__swsetup_r+0xd0>)
 800c010:	429c      	cmp	r4, r3
 800c012:	d10f      	bne.n	800c034 <__swsetup_r+0x3c>
 800c014:	686c      	ldr	r4, [r5, #4]
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c01c:	0719      	lsls	r1, r3, #28
 800c01e:	d42c      	bmi.n	800c07a <__swsetup_r+0x82>
 800c020:	06dd      	lsls	r5, r3, #27
 800c022:	d411      	bmi.n	800c048 <__swsetup_r+0x50>
 800c024:	2309      	movs	r3, #9
 800c026:	6033      	str	r3, [r6, #0]
 800c028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c02c:	81a3      	strh	r3, [r4, #12]
 800c02e:	f04f 30ff 	mov.w	r0, #4294967295
 800c032:	e03e      	b.n	800c0b2 <__swsetup_r+0xba>
 800c034:	4b25      	ldr	r3, [pc, #148]	; (800c0cc <__swsetup_r+0xd4>)
 800c036:	429c      	cmp	r4, r3
 800c038:	d101      	bne.n	800c03e <__swsetup_r+0x46>
 800c03a:	68ac      	ldr	r4, [r5, #8]
 800c03c:	e7eb      	b.n	800c016 <__swsetup_r+0x1e>
 800c03e:	4b24      	ldr	r3, [pc, #144]	; (800c0d0 <__swsetup_r+0xd8>)
 800c040:	429c      	cmp	r4, r3
 800c042:	bf08      	it	eq
 800c044:	68ec      	ldreq	r4, [r5, #12]
 800c046:	e7e6      	b.n	800c016 <__swsetup_r+0x1e>
 800c048:	0758      	lsls	r0, r3, #29
 800c04a:	d512      	bpl.n	800c072 <__swsetup_r+0x7a>
 800c04c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c04e:	b141      	cbz	r1, 800c062 <__swsetup_r+0x6a>
 800c050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c054:	4299      	cmp	r1, r3
 800c056:	d002      	beq.n	800c05e <__swsetup_r+0x66>
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff fdd5 	bl	800bc08 <_free_r>
 800c05e:	2300      	movs	r3, #0
 800c060:	6363      	str	r3, [r4, #52]	; 0x34
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c068:	81a3      	strh	r3, [r4, #12]
 800c06a:	2300      	movs	r3, #0
 800c06c:	6063      	str	r3, [r4, #4]
 800c06e:	6923      	ldr	r3, [r4, #16]
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	89a3      	ldrh	r3, [r4, #12]
 800c074:	f043 0308 	orr.w	r3, r3, #8
 800c078:	81a3      	strh	r3, [r4, #12]
 800c07a:	6923      	ldr	r3, [r4, #16]
 800c07c:	b94b      	cbnz	r3, 800c092 <__swsetup_r+0x9a>
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c088:	d003      	beq.n	800c092 <__swsetup_r+0x9a>
 800c08a:	4621      	mov	r1, r4
 800c08c:	4630      	mov	r0, r6
 800c08e:	f000 fa09 	bl	800c4a4 <__smakebuf_r>
 800c092:	89a0      	ldrh	r0, [r4, #12]
 800c094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c098:	f010 0301 	ands.w	r3, r0, #1
 800c09c:	d00a      	beq.n	800c0b4 <__swsetup_r+0xbc>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	60a3      	str	r3, [r4, #8]
 800c0a2:	6963      	ldr	r3, [r4, #20]
 800c0a4:	425b      	negs	r3, r3
 800c0a6:	61a3      	str	r3, [r4, #24]
 800c0a8:	6923      	ldr	r3, [r4, #16]
 800c0aa:	b943      	cbnz	r3, 800c0be <__swsetup_r+0xc6>
 800c0ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0b0:	d1ba      	bne.n	800c028 <__swsetup_r+0x30>
 800c0b2:	bd70      	pop	{r4, r5, r6, pc}
 800c0b4:	0781      	lsls	r1, r0, #30
 800c0b6:	bf58      	it	pl
 800c0b8:	6963      	ldrpl	r3, [r4, #20]
 800c0ba:	60a3      	str	r3, [r4, #8]
 800c0bc:	e7f4      	b.n	800c0a8 <__swsetup_r+0xb0>
 800c0be:	2000      	movs	r0, #0
 800c0c0:	e7f7      	b.n	800c0b2 <__swsetup_r+0xba>
 800c0c2:	bf00      	nop
 800c0c4:	2000001c 	.word	0x2000001c
 800c0c8:	0800d3f0 	.word	0x0800d3f0
 800c0cc:	0800d410 	.word	0x0800d410
 800c0d0:	0800d3d0 	.word	0x0800d3d0

0800c0d4 <abort>:
 800c0d4:	b508      	push	{r3, lr}
 800c0d6:	2006      	movs	r0, #6
 800c0d8:	f000 fa4c 	bl	800c574 <raise>
 800c0dc:	2001      	movs	r0, #1
 800c0de:	f7f6 fa91 	bl	8002604 <_exit>
	...

0800c0e4 <__sflush_r>:
 800c0e4:	898a      	ldrh	r2, [r1, #12]
 800c0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ea:	4605      	mov	r5, r0
 800c0ec:	0710      	lsls	r0, r2, #28
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	d458      	bmi.n	800c1a4 <__sflush_r+0xc0>
 800c0f2:	684b      	ldr	r3, [r1, #4]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	dc05      	bgt.n	800c104 <__sflush_r+0x20>
 800c0f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	dc02      	bgt.n	800c104 <__sflush_r+0x20>
 800c0fe:	2000      	movs	r0, #0
 800c100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c106:	2e00      	cmp	r6, #0
 800c108:	d0f9      	beq.n	800c0fe <__sflush_r+0x1a>
 800c10a:	2300      	movs	r3, #0
 800c10c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c110:	682f      	ldr	r7, [r5, #0]
 800c112:	602b      	str	r3, [r5, #0]
 800c114:	d032      	beq.n	800c17c <__sflush_r+0x98>
 800c116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	075a      	lsls	r2, r3, #29
 800c11c:	d505      	bpl.n	800c12a <__sflush_r+0x46>
 800c11e:	6863      	ldr	r3, [r4, #4]
 800c120:	1ac0      	subs	r0, r0, r3
 800c122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c124:	b10b      	cbz	r3, 800c12a <__sflush_r+0x46>
 800c126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c128:	1ac0      	subs	r0, r0, r3
 800c12a:	2300      	movs	r3, #0
 800c12c:	4602      	mov	r2, r0
 800c12e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c130:	6a21      	ldr	r1, [r4, #32]
 800c132:	4628      	mov	r0, r5
 800c134:	47b0      	blx	r6
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	d106      	bne.n	800c14a <__sflush_r+0x66>
 800c13c:	6829      	ldr	r1, [r5, #0]
 800c13e:	291d      	cmp	r1, #29
 800c140:	d82c      	bhi.n	800c19c <__sflush_r+0xb8>
 800c142:	4a2a      	ldr	r2, [pc, #168]	; (800c1ec <__sflush_r+0x108>)
 800c144:	40ca      	lsrs	r2, r1
 800c146:	07d6      	lsls	r6, r2, #31
 800c148:	d528      	bpl.n	800c19c <__sflush_r+0xb8>
 800c14a:	2200      	movs	r2, #0
 800c14c:	6062      	str	r2, [r4, #4]
 800c14e:	04d9      	lsls	r1, r3, #19
 800c150:	6922      	ldr	r2, [r4, #16]
 800c152:	6022      	str	r2, [r4, #0]
 800c154:	d504      	bpl.n	800c160 <__sflush_r+0x7c>
 800c156:	1c42      	adds	r2, r0, #1
 800c158:	d101      	bne.n	800c15e <__sflush_r+0x7a>
 800c15a:	682b      	ldr	r3, [r5, #0]
 800c15c:	b903      	cbnz	r3, 800c160 <__sflush_r+0x7c>
 800c15e:	6560      	str	r0, [r4, #84]	; 0x54
 800c160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c162:	602f      	str	r7, [r5, #0]
 800c164:	2900      	cmp	r1, #0
 800c166:	d0ca      	beq.n	800c0fe <__sflush_r+0x1a>
 800c168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c16c:	4299      	cmp	r1, r3
 800c16e:	d002      	beq.n	800c176 <__sflush_r+0x92>
 800c170:	4628      	mov	r0, r5
 800c172:	f7ff fd49 	bl	800bc08 <_free_r>
 800c176:	2000      	movs	r0, #0
 800c178:	6360      	str	r0, [r4, #52]	; 0x34
 800c17a:	e7c1      	b.n	800c100 <__sflush_r+0x1c>
 800c17c:	6a21      	ldr	r1, [r4, #32]
 800c17e:	2301      	movs	r3, #1
 800c180:	4628      	mov	r0, r5
 800c182:	47b0      	blx	r6
 800c184:	1c41      	adds	r1, r0, #1
 800c186:	d1c7      	bne.n	800c118 <__sflush_r+0x34>
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d0c4      	beq.n	800c118 <__sflush_r+0x34>
 800c18e:	2b1d      	cmp	r3, #29
 800c190:	d001      	beq.n	800c196 <__sflush_r+0xb2>
 800c192:	2b16      	cmp	r3, #22
 800c194:	d101      	bne.n	800c19a <__sflush_r+0xb6>
 800c196:	602f      	str	r7, [r5, #0]
 800c198:	e7b1      	b.n	800c0fe <__sflush_r+0x1a>
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a0:	81a3      	strh	r3, [r4, #12]
 800c1a2:	e7ad      	b.n	800c100 <__sflush_r+0x1c>
 800c1a4:	690f      	ldr	r7, [r1, #16]
 800c1a6:	2f00      	cmp	r7, #0
 800c1a8:	d0a9      	beq.n	800c0fe <__sflush_r+0x1a>
 800c1aa:	0793      	lsls	r3, r2, #30
 800c1ac:	680e      	ldr	r6, [r1, #0]
 800c1ae:	bf08      	it	eq
 800c1b0:	694b      	ldreq	r3, [r1, #20]
 800c1b2:	600f      	str	r7, [r1, #0]
 800c1b4:	bf18      	it	ne
 800c1b6:	2300      	movne	r3, #0
 800c1b8:	eba6 0807 	sub.w	r8, r6, r7
 800c1bc:	608b      	str	r3, [r1, #8]
 800c1be:	f1b8 0f00 	cmp.w	r8, #0
 800c1c2:	dd9c      	ble.n	800c0fe <__sflush_r+0x1a>
 800c1c4:	6a21      	ldr	r1, [r4, #32]
 800c1c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1c8:	4643      	mov	r3, r8
 800c1ca:	463a      	mov	r2, r7
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	47b0      	blx	r6
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	dc06      	bgt.n	800c1e2 <__sflush_r+0xfe>
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1da:	81a3      	strh	r3, [r4, #12]
 800c1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e0:	e78e      	b.n	800c100 <__sflush_r+0x1c>
 800c1e2:	4407      	add	r7, r0
 800c1e4:	eba8 0800 	sub.w	r8, r8, r0
 800c1e8:	e7e9      	b.n	800c1be <__sflush_r+0xda>
 800c1ea:	bf00      	nop
 800c1ec:	20400001 	.word	0x20400001

0800c1f0 <_fflush_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	690b      	ldr	r3, [r1, #16]
 800c1f4:	4605      	mov	r5, r0
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	b913      	cbnz	r3, 800c200 <_fflush_r+0x10>
 800c1fa:	2500      	movs	r5, #0
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	b118      	cbz	r0, 800c20a <_fflush_r+0x1a>
 800c202:	6983      	ldr	r3, [r0, #24]
 800c204:	b90b      	cbnz	r3, 800c20a <_fflush_r+0x1a>
 800c206:	f000 f887 	bl	800c318 <__sinit>
 800c20a:	4b14      	ldr	r3, [pc, #80]	; (800c25c <_fflush_r+0x6c>)
 800c20c:	429c      	cmp	r4, r3
 800c20e:	d11b      	bne.n	800c248 <_fflush_r+0x58>
 800c210:	686c      	ldr	r4, [r5, #4]
 800c212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d0ef      	beq.n	800c1fa <_fflush_r+0xa>
 800c21a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c21c:	07d0      	lsls	r0, r2, #31
 800c21e:	d404      	bmi.n	800c22a <_fflush_r+0x3a>
 800c220:	0599      	lsls	r1, r3, #22
 800c222:	d402      	bmi.n	800c22a <_fflush_r+0x3a>
 800c224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c226:	f000 f915 	bl	800c454 <__retarget_lock_acquire_recursive>
 800c22a:	4628      	mov	r0, r5
 800c22c:	4621      	mov	r1, r4
 800c22e:	f7ff ff59 	bl	800c0e4 <__sflush_r>
 800c232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c234:	07da      	lsls	r2, r3, #31
 800c236:	4605      	mov	r5, r0
 800c238:	d4e0      	bmi.n	800c1fc <_fflush_r+0xc>
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	059b      	lsls	r3, r3, #22
 800c23e:	d4dd      	bmi.n	800c1fc <_fflush_r+0xc>
 800c240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c242:	f000 f908 	bl	800c456 <__retarget_lock_release_recursive>
 800c246:	e7d9      	b.n	800c1fc <_fflush_r+0xc>
 800c248:	4b05      	ldr	r3, [pc, #20]	; (800c260 <_fflush_r+0x70>)
 800c24a:	429c      	cmp	r4, r3
 800c24c:	d101      	bne.n	800c252 <_fflush_r+0x62>
 800c24e:	68ac      	ldr	r4, [r5, #8]
 800c250:	e7df      	b.n	800c212 <_fflush_r+0x22>
 800c252:	4b04      	ldr	r3, [pc, #16]	; (800c264 <_fflush_r+0x74>)
 800c254:	429c      	cmp	r4, r3
 800c256:	bf08      	it	eq
 800c258:	68ec      	ldreq	r4, [r5, #12]
 800c25a:	e7da      	b.n	800c212 <_fflush_r+0x22>
 800c25c:	0800d3f0 	.word	0x0800d3f0
 800c260:	0800d410 	.word	0x0800d410
 800c264:	0800d3d0 	.word	0x0800d3d0

0800c268 <std>:
 800c268:	2300      	movs	r3, #0
 800c26a:	b510      	push	{r4, lr}
 800c26c:	4604      	mov	r4, r0
 800c26e:	e9c0 3300 	strd	r3, r3, [r0]
 800c272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c276:	6083      	str	r3, [r0, #8]
 800c278:	8181      	strh	r1, [r0, #12]
 800c27a:	6643      	str	r3, [r0, #100]	; 0x64
 800c27c:	81c2      	strh	r2, [r0, #14]
 800c27e:	6183      	str	r3, [r0, #24]
 800c280:	4619      	mov	r1, r3
 800c282:	2208      	movs	r2, #8
 800c284:	305c      	adds	r0, #92	; 0x5c
 800c286:	f7fc fb9d 	bl	80089c4 <memset>
 800c28a:	4b05      	ldr	r3, [pc, #20]	; (800c2a0 <std+0x38>)
 800c28c:	6263      	str	r3, [r4, #36]	; 0x24
 800c28e:	4b05      	ldr	r3, [pc, #20]	; (800c2a4 <std+0x3c>)
 800c290:	62a3      	str	r3, [r4, #40]	; 0x28
 800c292:	4b05      	ldr	r3, [pc, #20]	; (800c2a8 <std+0x40>)
 800c294:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c296:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <std+0x44>)
 800c298:	6224      	str	r4, [r4, #32]
 800c29a:	6323      	str	r3, [r4, #48]	; 0x30
 800c29c:	bd10      	pop	{r4, pc}
 800c29e:	bf00      	nop
 800c2a0:	0800c5ad 	.word	0x0800c5ad
 800c2a4:	0800c5cf 	.word	0x0800c5cf
 800c2a8:	0800c607 	.word	0x0800c607
 800c2ac:	0800c62b 	.word	0x0800c62b

0800c2b0 <_cleanup_r>:
 800c2b0:	4901      	ldr	r1, [pc, #4]	; (800c2b8 <_cleanup_r+0x8>)
 800c2b2:	f000 b8af 	b.w	800c414 <_fwalk_reent>
 800c2b6:	bf00      	nop
 800c2b8:	0800c1f1 	.word	0x0800c1f1

0800c2bc <__sfmoreglue>:
 800c2bc:	b570      	push	{r4, r5, r6, lr}
 800c2be:	2268      	movs	r2, #104	; 0x68
 800c2c0:	1e4d      	subs	r5, r1, #1
 800c2c2:	4355      	muls	r5, r2
 800c2c4:	460e      	mov	r6, r1
 800c2c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2ca:	f7fe fb95 	bl	800a9f8 <_malloc_r>
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	b140      	cbz	r0, 800c2e4 <__sfmoreglue+0x28>
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	e9c0 1600 	strd	r1, r6, [r0]
 800c2d8:	300c      	adds	r0, #12
 800c2da:	60a0      	str	r0, [r4, #8]
 800c2dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2e0:	f7fc fb70 	bl	80089c4 <memset>
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	bd70      	pop	{r4, r5, r6, pc}

0800c2e8 <__sfp_lock_acquire>:
 800c2e8:	4801      	ldr	r0, [pc, #4]	; (800c2f0 <__sfp_lock_acquire+0x8>)
 800c2ea:	f000 b8b3 	b.w	800c454 <__retarget_lock_acquire_recursive>
 800c2ee:	bf00      	nop
 800c2f0:	200009a5 	.word	0x200009a5

0800c2f4 <__sfp_lock_release>:
 800c2f4:	4801      	ldr	r0, [pc, #4]	; (800c2fc <__sfp_lock_release+0x8>)
 800c2f6:	f000 b8ae 	b.w	800c456 <__retarget_lock_release_recursive>
 800c2fa:	bf00      	nop
 800c2fc:	200009a5 	.word	0x200009a5

0800c300 <__sinit_lock_acquire>:
 800c300:	4801      	ldr	r0, [pc, #4]	; (800c308 <__sinit_lock_acquire+0x8>)
 800c302:	f000 b8a7 	b.w	800c454 <__retarget_lock_acquire_recursive>
 800c306:	bf00      	nop
 800c308:	200009a6 	.word	0x200009a6

0800c30c <__sinit_lock_release>:
 800c30c:	4801      	ldr	r0, [pc, #4]	; (800c314 <__sinit_lock_release+0x8>)
 800c30e:	f000 b8a2 	b.w	800c456 <__retarget_lock_release_recursive>
 800c312:	bf00      	nop
 800c314:	200009a6 	.word	0x200009a6

0800c318 <__sinit>:
 800c318:	b510      	push	{r4, lr}
 800c31a:	4604      	mov	r4, r0
 800c31c:	f7ff fff0 	bl	800c300 <__sinit_lock_acquire>
 800c320:	69a3      	ldr	r3, [r4, #24]
 800c322:	b11b      	cbz	r3, 800c32c <__sinit+0x14>
 800c324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c328:	f7ff bff0 	b.w	800c30c <__sinit_lock_release>
 800c32c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c330:	6523      	str	r3, [r4, #80]	; 0x50
 800c332:	4b13      	ldr	r3, [pc, #76]	; (800c380 <__sinit+0x68>)
 800c334:	4a13      	ldr	r2, [pc, #76]	; (800c384 <__sinit+0x6c>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	62a2      	str	r2, [r4, #40]	; 0x28
 800c33a:	42a3      	cmp	r3, r4
 800c33c:	bf04      	itt	eq
 800c33e:	2301      	moveq	r3, #1
 800c340:	61a3      	streq	r3, [r4, #24]
 800c342:	4620      	mov	r0, r4
 800c344:	f000 f820 	bl	800c388 <__sfp>
 800c348:	6060      	str	r0, [r4, #4]
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 f81c 	bl	800c388 <__sfp>
 800c350:	60a0      	str	r0, [r4, #8]
 800c352:	4620      	mov	r0, r4
 800c354:	f000 f818 	bl	800c388 <__sfp>
 800c358:	2200      	movs	r2, #0
 800c35a:	60e0      	str	r0, [r4, #12]
 800c35c:	2104      	movs	r1, #4
 800c35e:	6860      	ldr	r0, [r4, #4]
 800c360:	f7ff ff82 	bl	800c268 <std>
 800c364:	68a0      	ldr	r0, [r4, #8]
 800c366:	2201      	movs	r2, #1
 800c368:	2109      	movs	r1, #9
 800c36a:	f7ff ff7d 	bl	800c268 <std>
 800c36e:	68e0      	ldr	r0, [r4, #12]
 800c370:	2202      	movs	r2, #2
 800c372:	2112      	movs	r1, #18
 800c374:	f7ff ff78 	bl	800c268 <std>
 800c378:	2301      	movs	r3, #1
 800c37a:	61a3      	str	r3, [r4, #24]
 800c37c:	e7d2      	b.n	800c324 <__sinit+0xc>
 800c37e:	bf00      	nop
 800c380:	0800cf9c 	.word	0x0800cf9c
 800c384:	0800c2b1 	.word	0x0800c2b1

0800c388 <__sfp>:
 800c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38a:	4607      	mov	r7, r0
 800c38c:	f7ff ffac 	bl	800c2e8 <__sfp_lock_acquire>
 800c390:	4b1e      	ldr	r3, [pc, #120]	; (800c40c <__sfp+0x84>)
 800c392:	681e      	ldr	r6, [r3, #0]
 800c394:	69b3      	ldr	r3, [r6, #24]
 800c396:	b913      	cbnz	r3, 800c39e <__sfp+0x16>
 800c398:	4630      	mov	r0, r6
 800c39a:	f7ff ffbd 	bl	800c318 <__sinit>
 800c39e:	3648      	adds	r6, #72	; 0x48
 800c3a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	d503      	bpl.n	800c3b0 <__sfp+0x28>
 800c3a8:	6833      	ldr	r3, [r6, #0]
 800c3aa:	b30b      	cbz	r3, 800c3f0 <__sfp+0x68>
 800c3ac:	6836      	ldr	r6, [r6, #0]
 800c3ae:	e7f7      	b.n	800c3a0 <__sfp+0x18>
 800c3b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3b4:	b9d5      	cbnz	r5, 800c3ec <__sfp+0x64>
 800c3b6:	4b16      	ldr	r3, [pc, #88]	; (800c410 <__sfp+0x88>)
 800c3b8:	60e3      	str	r3, [r4, #12]
 800c3ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3be:	6665      	str	r5, [r4, #100]	; 0x64
 800c3c0:	f000 f847 	bl	800c452 <__retarget_lock_init_recursive>
 800c3c4:	f7ff ff96 	bl	800c2f4 <__sfp_lock_release>
 800c3c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3d0:	6025      	str	r5, [r4, #0]
 800c3d2:	61a5      	str	r5, [r4, #24]
 800c3d4:	2208      	movs	r2, #8
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3dc:	f7fc faf2 	bl	80089c4 <memset>
 800c3e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3ec:	3468      	adds	r4, #104	; 0x68
 800c3ee:	e7d9      	b.n	800c3a4 <__sfp+0x1c>
 800c3f0:	2104      	movs	r1, #4
 800c3f2:	4638      	mov	r0, r7
 800c3f4:	f7ff ff62 	bl	800c2bc <__sfmoreglue>
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	6030      	str	r0, [r6, #0]
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d1d5      	bne.n	800c3ac <__sfp+0x24>
 800c400:	f7ff ff78 	bl	800c2f4 <__sfp_lock_release>
 800c404:	230c      	movs	r3, #12
 800c406:	603b      	str	r3, [r7, #0]
 800c408:	e7ee      	b.n	800c3e8 <__sfp+0x60>
 800c40a:	bf00      	nop
 800c40c:	0800cf9c 	.word	0x0800cf9c
 800c410:	ffff0001 	.word	0xffff0001

0800c414 <_fwalk_reent>:
 800c414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c418:	4606      	mov	r6, r0
 800c41a:	4688      	mov	r8, r1
 800c41c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c420:	2700      	movs	r7, #0
 800c422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c426:	f1b9 0901 	subs.w	r9, r9, #1
 800c42a:	d505      	bpl.n	800c438 <_fwalk_reent+0x24>
 800c42c:	6824      	ldr	r4, [r4, #0]
 800c42e:	2c00      	cmp	r4, #0
 800c430:	d1f7      	bne.n	800c422 <_fwalk_reent+0xe>
 800c432:	4638      	mov	r0, r7
 800c434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c438:	89ab      	ldrh	r3, [r5, #12]
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d907      	bls.n	800c44e <_fwalk_reent+0x3a>
 800c43e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c442:	3301      	adds	r3, #1
 800c444:	d003      	beq.n	800c44e <_fwalk_reent+0x3a>
 800c446:	4629      	mov	r1, r5
 800c448:	4630      	mov	r0, r6
 800c44a:	47c0      	blx	r8
 800c44c:	4307      	orrs	r7, r0
 800c44e:	3568      	adds	r5, #104	; 0x68
 800c450:	e7e9      	b.n	800c426 <_fwalk_reent+0x12>

0800c452 <__retarget_lock_init_recursive>:
 800c452:	4770      	bx	lr

0800c454 <__retarget_lock_acquire_recursive>:
 800c454:	4770      	bx	lr

0800c456 <__retarget_lock_release_recursive>:
 800c456:	4770      	bx	lr

0800c458 <__swhatbuf_r>:
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	460e      	mov	r6, r1
 800c45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c460:	2900      	cmp	r1, #0
 800c462:	b096      	sub	sp, #88	; 0x58
 800c464:	4614      	mov	r4, r2
 800c466:	461d      	mov	r5, r3
 800c468:	da08      	bge.n	800c47c <__swhatbuf_r+0x24>
 800c46a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c46e:	2200      	movs	r2, #0
 800c470:	602a      	str	r2, [r5, #0]
 800c472:	061a      	lsls	r2, r3, #24
 800c474:	d410      	bmi.n	800c498 <__swhatbuf_r+0x40>
 800c476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c47a:	e00e      	b.n	800c49a <__swhatbuf_r+0x42>
 800c47c:	466a      	mov	r2, sp
 800c47e:	f000 f8fb 	bl	800c678 <_fstat_r>
 800c482:	2800      	cmp	r0, #0
 800c484:	dbf1      	blt.n	800c46a <__swhatbuf_r+0x12>
 800c486:	9a01      	ldr	r2, [sp, #4]
 800c488:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c48c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c490:	425a      	negs	r2, r3
 800c492:	415a      	adcs	r2, r3
 800c494:	602a      	str	r2, [r5, #0]
 800c496:	e7ee      	b.n	800c476 <__swhatbuf_r+0x1e>
 800c498:	2340      	movs	r3, #64	; 0x40
 800c49a:	2000      	movs	r0, #0
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	b016      	add	sp, #88	; 0x58
 800c4a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c4a4 <__smakebuf_r>:
 800c4a4:	898b      	ldrh	r3, [r1, #12]
 800c4a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4a8:	079d      	lsls	r5, r3, #30
 800c4aa:	4606      	mov	r6, r0
 800c4ac:	460c      	mov	r4, r1
 800c4ae:	d507      	bpl.n	800c4c0 <__smakebuf_r+0x1c>
 800c4b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	6123      	str	r3, [r4, #16]
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	6163      	str	r3, [r4, #20]
 800c4bc:	b002      	add	sp, #8
 800c4be:	bd70      	pop	{r4, r5, r6, pc}
 800c4c0:	ab01      	add	r3, sp, #4
 800c4c2:	466a      	mov	r2, sp
 800c4c4:	f7ff ffc8 	bl	800c458 <__swhatbuf_r>
 800c4c8:	9900      	ldr	r1, [sp, #0]
 800c4ca:	4605      	mov	r5, r0
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f7fe fa93 	bl	800a9f8 <_malloc_r>
 800c4d2:	b948      	cbnz	r0, 800c4e8 <__smakebuf_r+0x44>
 800c4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d8:	059a      	lsls	r2, r3, #22
 800c4da:	d4ef      	bmi.n	800c4bc <__smakebuf_r+0x18>
 800c4dc:	f023 0303 	bic.w	r3, r3, #3
 800c4e0:	f043 0302 	orr.w	r3, r3, #2
 800c4e4:	81a3      	strh	r3, [r4, #12]
 800c4e6:	e7e3      	b.n	800c4b0 <__smakebuf_r+0xc>
 800c4e8:	4b0d      	ldr	r3, [pc, #52]	; (800c520 <__smakebuf_r+0x7c>)
 800c4ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	6020      	str	r0, [r4, #0]
 800c4f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f4:	81a3      	strh	r3, [r4, #12]
 800c4f6:	9b00      	ldr	r3, [sp, #0]
 800c4f8:	6163      	str	r3, [r4, #20]
 800c4fa:	9b01      	ldr	r3, [sp, #4]
 800c4fc:	6120      	str	r0, [r4, #16]
 800c4fe:	b15b      	cbz	r3, 800c518 <__smakebuf_r+0x74>
 800c500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c504:	4630      	mov	r0, r6
 800c506:	f000 f8c9 	bl	800c69c <_isatty_r>
 800c50a:	b128      	cbz	r0, 800c518 <__smakebuf_r+0x74>
 800c50c:	89a3      	ldrh	r3, [r4, #12]
 800c50e:	f023 0303 	bic.w	r3, r3, #3
 800c512:	f043 0301 	orr.w	r3, r3, #1
 800c516:	81a3      	strh	r3, [r4, #12]
 800c518:	89a0      	ldrh	r0, [r4, #12]
 800c51a:	4305      	orrs	r5, r0
 800c51c:	81a5      	strh	r5, [r4, #12]
 800c51e:	e7cd      	b.n	800c4bc <__smakebuf_r+0x18>
 800c520:	0800c2b1 	.word	0x0800c2b1

0800c524 <_raise_r>:
 800c524:	291f      	cmp	r1, #31
 800c526:	b538      	push	{r3, r4, r5, lr}
 800c528:	4604      	mov	r4, r0
 800c52a:	460d      	mov	r5, r1
 800c52c:	d904      	bls.n	800c538 <_raise_r+0x14>
 800c52e:	2316      	movs	r3, #22
 800c530:	6003      	str	r3, [r0, #0]
 800c532:	f04f 30ff 	mov.w	r0, #4294967295
 800c536:	bd38      	pop	{r3, r4, r5, pc}
 800c538:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c53a:	b112      	cbz	r2, 800c542 <_raise_r+0x1e>
 800c53c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c540:	b94b      	cbnz	r3, 800c556 <_raise_r+0x32>
 800c542:	4620      	mov	r0, r4
 800c544:	f000 f830 	bl	800c5a8 <_getpid_r>
 800c548:	462a      	mov	r2, r5
 800c54a:	4601      	mov	r1, r0
 800c54c:	4620      	mov	r0, r4
 800c54e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c552:	f000 b817 	b.w	800c584 <_kill_r>
 800c556:	2b01      	cmp	r3, #1
 800c558:	d00a      	beq.n	800c570 <_raise_r+0x4c>
 800c55a:	1c59      	adds	r1, r3, #1
 800c55c:	d103      	bne.n	800c566 <_raise_r+0x42>
 800c55e:	2316      	movs	r3, #22
 800c560:	6003      	str	r3, [r0, #0]
 800c562:	2001      	movs	r0, #1
 800c564:	e7e7      	b.n	800c536 <_raise_r+0x12>
 800c566:	2400      	movs	r4, #0
 800c568:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c56c:	4628      	mov	r0, r5
 800c56e:	4798      	blx	r3
 800c570:	2000      	movs	r0, #0
 800c572:	e7e0      	b.n	800c536 <_raise_r+0x12>

0800c574 <raise>:
 800c574:	4b02      	ldr	r3, [pc, #8]	; (800c580 <raise+0xc>)
 800c576:	4601      	mov	r1, r0
 800c578:	6818      	ldr	r0, [r3, #0]
 800c57a:	f7ff bfd3 	b.w	800c524 <_raise_r>
 800c57e:	bf00      	nop
 800c580:	2000001c 	.word	0x2000001c

0800c584 <_kill_r>:
 800c584:	b538      	push	{r3, r4, r5, lr}
 800c586:	4d07      	ldr	r5, [pc, #28]	; (800c5a4 <_kill_r+0x20>)
 800c588:	2300      	movs	r3, #0
 800c58a:	4604      	mov	r4, r0
 800c58c:	4608      	mov	r0, r1
 800c58e:	4611      	mov	r1, r2
 800c590:	602b      	str	r3, [r5, #0]
 800c592:	f7f6 f827 	bl	80025e4 <_kill>
 800c596:	1c43      	adds	r3, r0, #1
 800c598:	d102      	bne.n	800c5a0 <_kill_r+0x1c>
 800c59a:	682b      	ldr	r3, [r5, #0]
 800c59c:	b103      	cbz	r3, 800c5a0 <_kill_r+0x1c>
 800c59e:	6023      	str	r3, [r4, #0]
 800c5a0:	bd38      	pop	{r3, r4, r5, pc}
 800c5a2:	bf00      	nop
 800c5a4:	200009a0 	.word	0x200009a0

0800c5a8 <_getpid_r>:
 800c5a8:	f7f6 b814 	b.w	80025d4 <_getpid>

0800c5ac <__sread>:
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b4:	f000 f894 	bl	800c6e0 <_read_r>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	bfab      	itete	ge
 800c5bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5be:	89a3      	ldrhlt	r3, [r4, #12]
 800c5c0:	181b      	addge	r3, r3, r0
 800c5c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5c6:	bfac      	ite	ge
 800c5c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5ca:	81a3      	strhlt	r3, [r4, #12]
 800c5cc:	bd10      	pop	{r4, pc}

0800c5ce <__swrite>:
 800c5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d2:	461f      	mov	r7, r3
 800c5d4:	898b      	ldrh	r3, [r1, #12]
 800c5d6:	05db      	lsls	r3, r3, #23
 800c5d8:	4605      	mov	r5, r0
 800c5da:	460c      	mov	r4, r1
 800c5dc:	4616      	mov	r6, r2
 800c5de:	d505      	bpl.n	800c5ec <__swrite+0x1e>
 800c5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e4:	2302      	movs	r3, #2
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f000 f868 	bl	800c6bc <_lseek_r>
 800c5ec:	89a3      	ldrh	r3, [r4, #12]
 800c5ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5f6:	81a3      	strh	r3, [r4, #12]
 800c5f8:	4632      	mov	r2, r6
 800c5fa:	463b      	mov	r3, r7
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c602:	f000 b817 	b.w	800c634 <_write_r>

0800c606 <__sseek>:
 800c606:	b510      	push	{r4, lr}
 800c608:	460c      	mov	r4, r1
 800c60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c60e:	f000 f855 	bl	800c6bc <_lseek_r>
 800c612:	1c43      	adds	r3, r0, #1
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	bf15      	itete	ne
 800c618:	6560      	strne	r0, [r4, #84]	; 0x54
 800c61a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c61e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c622:	81a3      	strheq	r3, [r4, #12]
 800c624:	bf18      	it	ne
 800c626:	81a3      	strhne	r3, [r4, #12]
 800c628:	bd10      	pop	{r4, pc}

0800c62a <__sclose>:
 800c62a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c62e:	f000 b813 	b.w	800c658 <_close_r>
	...

0800c634 <_write_r>:
 800c634:	b538      	push	{r3, r4, r5, lr}
 800c636:	4d07      	ldr	r5, [pc, #28]	; (800c654 <_write_r+0x20>)
 800c638:	4604      	mov	r4, r0
 800c63a:	4608      	mov	r0, r1
 800c63c:	4611      	mov	r1, r2
 800c63e:	2200      	movs	r2, #0
 800c640:	602a      	str	r2, [r5, #0]
 800c642:	461a      	mov	r2, r3
 800c644:	f7f6 f805 	bl	8002652 <_write>
 800c648:	1c43      	adds	r3, r0, #1
 800c64a:	d102      	bne.n	800c652 <_write_r+0x1e>
 800c64c:	682b      	ldr	r3, [r5, #0]
 800c64e:	b103      	cbz	r3, 800c652 <_write_r+0x1e>
 800c650:	6023      	str	r3, [r4, #0]
 800c652:	bd38      	pop	{r3, r4, r5, pc}
 800c654:	200009a0 	.word	0x200009a0

0800c658 <_close_r>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	4d06      	ldr	r5, [pc, #24]	; (800c674 <_close_r+0x1c>)
 800c65c:	2300      	movs	r3, #0
 800c65e:	4604      	mov	r4, r0
 800c660:	4608      	mov	r0, r1
 800c662:	602b      	str	r3, [r5, #0]
 800c664:	f7f6 f811 	bl	800268a <_close>
 800c668:	1c43      	adds	r3, r0, #1
 800c66a:	d102      	bne.n	800c672 <_close_r+0x1a>
 800c66c:	682b      	ldr	r3, [r5, #0]
 800c66e:	b103      	cbz	r3, 800c672 <_close_r+0x1a>
 800c670:	6023      	str	r3, [r4, #0]
 800c672:	bd38      	pop	{r3, r4, r5, pc}
 800c674:	200009a0 	.word	0x200009a0

0800c678 <_fstat_r>:
 800c678:	b538      	push	{r3, r4, r5, lr}
 800c67a:	4d07      	ldr	r5, [pc, #28]	; (800c698 <_fstat_r+0x20>)
 800c67c:	2300      	movs	r3, #0
 800c67e:	4604      	mov	r4, r0
 800c680:	4608      	mov	r0, r1
 800c682:	4611      	mov	r1, r2
 800c684:	602b      	str	r3, [r5, #0]
 800c686:	f7f6 f80c 	bl	80026a2 <_fstat>
 800c68a:	1c43      	adds	r3, r0, #1
 800c68c:	d102      	bne.n	800c694 <_fstat_r+0x1c>
 800c68e:	682b      	ldr	r3, [r5, #0]
 800c690:	b103      	cbz	r3, 800c694 <_fstat_r+0x1c>
 800c692:	6023      	str	r3, [r4, #0]
 800c694:	bd38      	pop	{r3, r4, r5, pc}
 800c696:	bf00      	nop
 800c698:	200009a0 	.word	0x200009a0

0800c69c <_isatty_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	4d06      	ldr	r5, [pc, #24]	; (800c6b8 <_isatty_r+0x1c>)
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	4608      	mov	r0, r1
 800c6a6:	602b      	str	r3, [r5, #0]
 800c6a8:	f7f6 f80b 	bl	80026c2 <_isatty>
 800c6ac:	1c43      	adds	r3, r0, #1
 800c6ae:	d102      	bne.n	800c6b6 <_isatty_r+0x1a>
 800c6b0:	682b      	ldr	r3, [r5, #0]
 800c6b2:	b103      	cbz	r3, 800c6b6 <_isatty_r+0x1a>
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	bd38      	pop	{r3, r4, r5, pc}
 800c6b8:	200009a0 	.word	0x200009a0

0800c6bc <_lseek_r>:
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	4d07      	ldr	r5, [pc, #28]	; (800c6dc <_lseek_r+0x20>)
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	4608      	mov	r0, r1
 800c6c4:	4611      	mov	r1, r2
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	602a      	str	r2, [r5, #0]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	f7f6 f804 	bl	80026d8 <_lseek>
 800c6d0:	1c43      	adds	r3, r0, #1
 800c6d2:	d102      	bne.n	800c6da <_lseek_r+0x1e>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	b103      	cbz	r3, 800c6da <_lseek_r+0x1e>
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	bd38      	pop	{r3, r4, r5, pc}
 800c6dc:	200009a0 	.word	0x200009a0

0800c6e0 <_read_r>:
 800c6e0:	b538      	push	{r3, r4, r5, lr}
 800c6e2:	4d07      	ldr	r5, [pc, #28]	; (800c700 <_read_r+0x20>)
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	4608      	mov	r0, r1
 800c6e8:	4611      	mov	r1, r2
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	602a      	str	r2, [r5, #0]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	f7f5 ff92 	bl	8002618 <_read>
 800c6f4:	1c43      	adds	r3, r0, #1
 800c6f6:	d102      	bne.n	800c6fe <_read_r+0x1e>
 800c6f8:	682b      	ldr	r3, [r5, #0]
 800c6fa:	b103      	cbz	r3, 800c6fe <_read_r+0x1e>
 800c6fc:	6023      	str	r3, [r4, #0]
 800c6fe:	bd38      	pop	{r3, r4, r5, pc}
 800c700:	200009a0 	.word	0x200009a0

0800c704 <round>:
 800c704:	ec51 0b10 	vmov	r0, r1, d0
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c70e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c712:	2c13      	cmp	r4, #19
 800c714:	ee10 2a10 	vmov	r2, s0
 800c718:	460b      	mov	r3, r1
 800c71a:	dc19      	bgt.n	800c750 <round+0x4c>
 800c71c:	2c00      	cmp	r4, #0
 800c71e:	da09      	bge.n	800c734 <round+0x30>
 800c720:	3401      	adds	r4, #1
 800c722:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c726:	d103      	bne.n	800c730 <round+0x2c>
 800c728:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c72c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c730:	2200      	movs	r2, #0
 800c732:	e028      	b.n	800c786 <round+0x82>
 800c734:	4d15      	ldr	r5, [pc, #84]	; (800c78c <round+0x88>)
 800c736:	4125      	asrs	r5, r4
 800c738:	ea01 0605 	and.w	r6, r1, r5
 800c73c:	4332      	orrs	r2, r6
 800c73e:	d00e      	beq.n	800c75e <round+0x5a>
 800c740:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c744:	fa42 f404 	asr.w	r4, r2, r4
 800c748:	4423      	add	r3, r4
 800c74a:	ea23 0305 	bic.w	r3, r3, r5
 800c74e:	e7ef      	b.n	800c730 <round+0x2c>
 800c750:	2c33      	cmp	r4, #51	; 0x33
 800c752:	dd07      	ble.n	800c764 <round+0x60>
 800c754:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c758:	d101      	bne.n	800c75e <round+0x5a>
 800c75a:	f7f3 fdb7 	bl	80002cc <__adddf3>
 800c75e:	ec41 0b10 	vmov	d0, r0, r1
 800c762:	bd70      	pop	{r4, r5, r6, pc}
 800c764:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c768:	f04f 35ff 	mov.w	r5, #4294967295
 800c76c:	40f5      	lsrs	r5, r6
 800c76e:	4228      	tst	r0, r5
 800c770:	d0f5      	beq.n	800c75e <round+0x5a>
 800c772:	2101      	movs	r1, #1
 800c774:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c778:	fa01 f404 	lsl.w	r4, r1, r4
 800c77c:	1912      	adds	r2, r2, r4
 800c77e:	bf28      	it	cs
 800c780:	185b      	addcs	r3, r3, r1
 800c782:	ea22 0205 	bic.w	r2, r2, r5
 800c786:	4619      	mov	r1, r3
 800c788:	4610      	mov	r0, r2
 800c78a:	e7e8      	b.n	800c75e <round+0x5a>
 800c78c:	000fffff 	.word	0x000fffff

0800c790 <_init>:
 800c790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c792:	bf00      	nop
 800c794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c796:	bc08      	pop	{r3}
 800c798:	469e      	mov	lr, r3
 800c79a:	4770      	bx	lr

0800c79c <_fini>:
 800c79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c79e:	bf00      	nop
 800c7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7a2:	bc08      	pop	{r3}
 800c7a4:	469e      	mov	lr, r3
 800c7a6:	4770      	bx	lr
