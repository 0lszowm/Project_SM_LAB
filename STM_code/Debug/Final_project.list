
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca0  0800c980  0800c980  0001c980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d620  0800d620  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d620  0800d620  0001d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d628  0800d628  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d628  0800d628  0001d628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d62c  0800d62c  0001d62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b4  200001f0  0800d820  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  0800d820  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a3c5  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f2  00000000  00000000  0003a5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0003ded8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f14  00000000  00000000  00040728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8e0  00000000  00000000  0006963c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9795  00000000  00000000  00084f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e6b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b14  00000000  00000000  0017e704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c968 	.word	0x0800c968

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c968 	.word	0x0800c968

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b9aa 	b.w	8001008 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f83c 	bl	8000d38 <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_d2lz>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	f7ff ff21 	bl	8000b1c <__aeabi_dcmplt>
 8000cda:	b928      	cbnz	r0, 8000ce8 <__aeabi_d2lz+0x1c>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce4:	f000 b80a 	b.w	8000cfc <__aeabi_d2ulz>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cee:	f000 f805 	bl	8000cfc <__aeabi_d2ulz>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop

08000cfc <__aeabi_d2ulz>:
 8000cfc:	b5d0      	push	{r4, r6, r7, lr}
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__aeabi_d2ulz+0x34>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	4606      	mov	r6, r0
 8000d04:	460f      	mov	r7, r1
 8000d06:	f7ff fc97 	bl	8000638 <__aeabi_dmul>
 8000d0a:	f7ff ff57 	bl	8000bbc <__aeabi_d2uiz>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fc18 	bl	8000544 <__aeabi_ui2d>
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <__aeabi_d2ulz+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f7ff fc8e 	bl	8000638 <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f7ff fad0 	bl	80002c8 <__aeabi_dsub>
 8000d28:	f7ff ff48 	bl	8000bbc <__aeabi_d2uiz>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d30:	3df00000 	.word	0x3df00000
 8000d34:	41f00000 	.word	0x41f00000

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468e      	mov	lr, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d14d      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d46:	428a      	cmp	r2, r1
 8000d48:	4694      	mov	ip, r2
 8000d4a:	d969      	bls.n	8000e20 <__udivmoddi4+0xe8>
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	b152      	cbz	r2, 8000d68 <__udivmoddi4+0x30>
 8000d52:	fa01 f302 	lsl.w	r3, r1, r2
 8000d56:	f1c2 0120 	rsb	r1, r2, #32
 8000d5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d62:	ea41 0e03 	orr.w	lr, r1, r3
 8000d66:	4094      	lsls	r4, r2
 8000d68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d6c:	0c21      	lsrs	r1, r4, #16
 8000d6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d72:	fa1f f78c 	uxth.w	r7, ip
 8000d76:	fb08 e316 	mls	r3, r8, r6, lr
 8000d7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7e:	fb06 f107 	mul.w	r1, r6, r7
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8e:	f080 811f 	bcs.w	8000fd0 <__udivmoddi4+0x298>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 811c 	bls.w	8000fd0 <__udivmoddi4+0x298>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dac:	fb00 f707 	mul.w	r7, r0, r7
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x92>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	f080 810a 	bcs.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc0:	42a7      	cmp	r7, r4
 8000dc2:	f240 8107 	bls.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dce:	1be4      	subs	r4, r4, r7
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	b11d      	cbz	r5, 8000ddc <__udivmoddi4+0xa4>
 8000dd4:	40d4      	lsrs	r4, r2
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0xc2>
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	f000 80ef 	beq.w	8000fca <__udivmoddi4+0x292>
 8000dec:	2600      	movs	r6, #0
 8000dee:	e9c5 0100 	strd	r0, r1, [r5]
 8000df2:	4630      	mov	r0, r6
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	fab3 f683 	clz	r6, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d14a      	bne.n	8000e98 <__udivmoddi4+0x160>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xd4>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 80f9 	bhi.w	8000ffe <__udivmoddi4+0x2c6>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	469e      	mov	lr, r3
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e0      	beq.n	8000ddc <__udivmoddi4+0xa4>
 8000e1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1e:	e7dd      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000e20:	b902      	cbnz	r2, 8000e24 <__udivmoddi4+0xec>
 8000e22:	deff      	udf	#255	; 0xff
 8000e24:	fab2 f282 	clz	r2, r2
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	f040 8092 	bne.w	8000f52 <__udivmoddi4+0x21a>
 8000e2e:	eba1 010c 	sub.w	r1, r1, ip
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	2601      	movs	r6, #1
 8000e3c:	0c20      	lsrs	r0, r4, #16
 8000e3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e42:	fb07 1113 	mls	r1, r7, r3, r1
 8000e46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4a:	fb0e f003 	mul.w	r0, lr, r3
 8000e4e:	4288      	cmp	r0, r1
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x12c>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x12a>
 8000e5c:	4288      	cmp	r0, r1
 8000e5e:	f200 80cb 	bhi.w	8000ff8 <__udivmoddi4+0x2c0>
 8000e62:	4643      	mov	r3, r8
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e74:	fb0e fe00 	mul.w	lr, lr, r0
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x156>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e84:	d202      	bcs.n	8000e8c <__udivmoddi4+0x154>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f200 80bb 	bhi.w	8001002 <__udivmoddi4+0x2ca>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	eba4 040e 	sub.w	r4, r4, lr
 8000e92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e96:	e79c      	b.n	8000dd2 <__udivmoddi4+0x9a>
 8000e98:	f1c6 0720 	rsb	r7, r6, #32
 8000e9c:	40b3      	lsls	r3, r6
 8000e9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000eae:	431c      	orrs	r4, r3
 8000eb0:	40f9      	lsrs	r1, r7
 8000eb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ebe:	0c20      	lsrs	r0, r4, #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed6:	d90b      	bls.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee0:	f080 8088 	bcs.w	8000ff4 <__udivmoddi4+0x2bc>
 8000ee4:	4288      	cmp	r0, r1
 8000ee6:	f240 8085 	bls.w	8000ff4 <__udivmoddi4+0x2bc>
 8000eea:	f1a8 0802 	sub.w	r8, r8, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef8:	fb09 1110 	mls	r1, r9, r0, r1
 8000efc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f04:	458e      	cmp	lr, r1
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x1e2>
 8000f08:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f10:	d26c      	bcs.n	8000fec <__udivmoddi4+0x2b4>
 8000f12:	458e      	cmp	lr, r1
 8000f14:	d96a      	bls.n	8000fec <__udivmoddi4+0x2b4>
 8000f16:	3802      	subs	r0, #2
 8000f18:	4461      	add	r1, ip
 8000f1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f22:	eba1 010e 	sub.w	r1, r1, lr
 8000f26:	42a1      	cmp	r1, r4
 8000f28:	46c8      	mov	r8, r9
 8000f2a:	46a6      	mov	lr, r4
 8000f2c:	d356      	bcc.n	8000fdc <__udivmoddi4+0x2a4>
 8000f2e:	d053      	beq.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f30:	b15d      	cbz	r5, 8000f4a <__udivmoddi4+0x212>
 8000f32:	ebb3 0208 	subs.w	r2, r3, r8
 8000f36:	eb61 010e 	sbc.w	r1, r1, lr
 8000f3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f42:	40f1      	lsrs	r1, r6
 8000f44:	431f      	orrs	r7, r3
 8000f46:	e9c5 7100 	strd	r7, r1, [r5]
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	f1c2 0320 	rsb	r3, r2, #32
 8000f56:	40d8      	lsrs	r0, r3
 8000f58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f60:	4091      	lsls	r1, r2
 8000f62:	4301      	orrs	r1, r0
 8000f64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f68:	fa1f fe8c 	uxth.w	lr, ip
 8000f6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f70:	fb07 3610 	mls	r6, r7, r0, r3
 8000f74:	0c0b      	lsrs	r3, r1, #16
 8000f76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7e:	429e      	cmp	r6, r3
 8000f80:	fa04 f402 	lsl.w	r4, r4, r2
 8000f84:	d908      	bls.n	8000f98 <__udivmoddi4+0x260>
 8000f86:	eb1c 0303 	adds.w	r3, ip, r3
 8000f8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8e:	d22f      	bcs.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f90:	429e      	cmp	r6, r3
 8000f92:	d92d      	bls.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f94:	3802      	subs	r0, #2
 8000f96:	4463      	add	r3, ip
 8000f98:	1b9b      	subs	r3, r3, r6
 8000f9a:	b289      	uxth	r1, r1
 8000f9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fa0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fac:	428b      	cmp	r3, r1
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x28a>
 8000fb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb8:	d216      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	d914      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fbe:	3e02      	subs	r6, #2
 8000fc0:	4461      	add	r1, ip
 8000fc2:	1ac9      	subs	r1, r1, r3
 8000fc4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc8:	e738      	b.n	8000e3c <__udivmoddi4+0x104>
 8000fca:	462e      	mov	r6, r5
 8000fcc:	4628      	mov	r0, r5
 8000fce:	e705      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	e6e3      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	e6f8      	b.n	8000dca <__udivmoddi4+0x92>
 8000fd8:	454b      	cmp	r3, r9
 8000fda:	d2a9      	bcs.n	8000f30 <__udivmoddi4+0x1f8>
 8000fdc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	e7a3      	b.n	8000f30 <__udivmoddi4+0x1f8>
 8000fe8:	4646      	mov	r6, r8
 8000fea:	e7ea      	b.n	8000fc2 <__udivmoddi4+0x28a>
 8000fec:	4620      	mov	r0, r4
 8000fee:	e794      	b.n	8000f1a <__udivmoddi4+0x1e2>
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	e7d1      	b.n	8000f98 <__udivmoddi4+0x260>
 8000ff4:	46d0      	mov	r8, sl
 8000ff6:	e77b      	b.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ff8:	3b02      	subs	r3, #2
 8000ffa:	4461      	add	r1, ip
 8000ffc:	e732      	b.n	8000e64 <__udivmoddi4+0x12c>
 8000ffe:	4630      	mov	r0, r6
 8001000:	e709      	b.n	8000e16 <__udivmoddi4+0xde>
 8001002:	4464      	add	r4, ip
 8001004:	3802      	subs	r0, #2
 8001006:	e742      	b.n	8000e8e <__udivmoddi4+0x156>

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MCP9808_Init>:
 * write bit.
 *
 * @param hi2c A pointer to the I2C handler.
 * @param addr Address of MCP9808 on I2C bus (default 0x18).
 */
void MCP9808_Init(I2C_HandleTypeDef *hi2c, uint8_t addr) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
	mcp9808.hi2c = hi2c;
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <MCP9808_Init+0x30>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
	mcp9808.address = addr << 1;
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <MCP9808_Init+0x30>)
 8001026:	711a      	strb	r2, [r3, #4]
	mcp9808.resolution = MCP9808_VeryHigh_Res;
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <MCP9808_Init+0x30>)
 800102a:	2203      	movs	r2, #3
 800102c:	715a      	strb	r2, [r3, #5]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000020c 	.word	0x2000020c

08001040 <MCP9808_Write>:
 *
 * @param _reg Pointer to a register.
 * @param value The data on which to send.
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Write(MCP9808_REG_TypeDef *_reg, uint8_t *value) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	uint8_t reg[] = {*_reg, *value};
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	733b      	strb	r3, [r7, #12]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MCP9808_Write+0x40>)
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MCP9808_Write+0x40>)
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	b299      	uxth	r1, r3
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	f003 f8bc 	bl	80041e8 <HAL_I2C_Master_Transmit>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
			reg, sizeof(reg), HAL_MAX_DELAY);

	return res;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000020c 	.word	0x2000020c

08001084 <MCP9808_Read>:
 * @param _reg Pointer to a register.
 * @param buf A pointer to a buffer to store the response in.
 * @param buf_size The size of the buffer (n values).
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Read(MCP9808_REG_TypeDef *_reg, uint8_t *buf, uint8_t buf_size) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af02      	add	r7, sp, #8
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	71fb      	strb	r3, [r7, #7]

	uint8_t reg[1] = {*_reg};
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MCP9808_Read+0x70>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MCP9808_Read+0x70>)
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	f107 0214 	add.w	r2, r7, #20
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	f003 f89b 	bl	80041e8 <HAL_I2C_Master_Transmit>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
			reg, sizeof(reg), HAL_MAX_DELAY);


	if(res != HAL_OK){
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MCP9808_Read+0x3c>
		return res;
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	e014      	b.n	80010ea <MCP9808_Read+0x66>
	}

	res = HAL_I2C_Master_Receive(mcp9808.hi2c, mcp9808.address, buf, buf_size, HAL_MAX_DELAY);
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MCP9808_Read+0x70>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MCP9808_Read+0x70>)
 80010c6:	791b      	ldrb	r3, [r3, #4]
 80010c8:	b299      	uxth	r1, r3
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	9200      	str	r2, [sp, #0]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	f003 f97b 	bl	80043d0 <HAL_I2C_Master_Receive>
 80010da:	4603      	mov	r3, r0
 80010dc:	75fb      	strb	r3, [r7, #23]

	if(res != HAL_OK){
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MCP9808_Read+0x64>
		return res;
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	e000      	b.n	80010ea <MCP9808_Read+0x66>
	}

	return res;
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000020c 	.word	0x2000020c

080010f8 <MCP9808_MeasureTemperature>:
 *
 * @param temperature A pointer to a temperature float to store a returned
 * value from.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_MeasureTemperature(float *temperature) {
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	MCP9808_REG_TypeDef reg = MCP9808_T_AMBIENT_REG;
 8001100:	2305      	movs	r3, #5
 8001102:	733b      	strb	r3, [r7, #12]
	uint8_t buf[2];
	HAL_StatusTypeDef res = MCP9808_Read(&reg, buf, sizeof(buf));
 8001104:	f107 0108 	add.w	r1, r7, #8
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2202      	movs	r2, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffb8 	bl	8001084 <MCP9808_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d162      	bne.n	80011e4 <MCP9808_MeasureTemperature+0xec>
		uint8_t upper = buf[0];
 800111e:	7a3b      	ldrb	r3, [r7, #8]
 8001120:	73bb      	strb	r3, [r7, #14]
		upper &= 0x1F;
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	73bb      	strb	r3, [r7, #14]
		uint8_t lower = buf[1];
 800112a:	7a7b      	ldrb	r3, [r7, #9]
 800112c:	737b      	strb	r3, [r7, #13]

		if((upper & 0x10) == 0x10) {
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b00      	cmp	r3, #0
 8001136:	d030      	beq.n	800119a <MCP9808_MeasureTemperature+0xa2>
			upper &= 0x0F;
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	73bb      	strb	r3, [r7, #14]
			*temperature = 256 - (upper * 16.0) + (lower / 16.0);
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa0e 	bl	8000564 <__aeabi_i2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 800114e:	f7ff fa73 	bl	8000638 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4926      	ldr	r1, [pc, #152]	; (80011f4 <MCP9808_MeasureTemperature+0xfc>)
 800115c:	f7ff f8b4 	bl	80002c8 <__aeabi_dsub>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9fa 	bl	8000564 <__aeabi_i2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 8001176:	f7ff fb89 	bl	800088c <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f8a3 	bl	80002cc <__adddf3>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fd35 	bl	8000bfc <__aeabi_d2f>
 8001192:	4602      	mov	r2, r0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e024      	b.n	80011e4 <MCP9808_MeasureTemperature+0xec>
		} else {
			*temperature = (upper * 16.0) + (lower / 16.0);
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9e1 	bl	8000564 <__aeabi_i2d>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 80011a8:	f7ff fa46 	bl	8000638 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4614      	mov	r4, r2
 80011b2:	461d      	mov	r5, r3
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9d4 	bl	8000564 <__aeabi_i2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 80011c2:	f7ff fb63 	bl	800088c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f87d 	bl	80002cc <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fd0f 	bl	8000bfc <__aeabi_d2f>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	601a      	str	r2, [r3, #0]
		}
	}

	return res;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bdb0      	pop	{r4, r5, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40300000 	.word	0x40300000
 80011f4:	40700000 	.word	0x40700000

080011f8 <MCP9808_SetResolution>:
 * VeryHigh = 0.0625 (slowest 250 ms)
 *
 * @param resolution Desired resolution to switch to.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_SetResolution(MCP9808_Resolution_TypeDef resolution) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]

	MCP9808_REG_TypeDef reg = MCP9808_RESOLUTION_REG;
 8001202:	2308      	movs	r3, #8
 8001204:	73bb      	strb	r3, [r7, #14]
	uint8_t value = resolution & 0x03;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef res = MCP9808_Write(&reg, &value);
 8001210:	f107 020d 	add.w	r2, r7, #13
 8001214:	f107 030e 	add.w	r3, r7, #14
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff10 	bl	8001040 <MCP9808_Write>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <MCP9808_SetResolution+0x38>
		mcp9808.resolution = resolution;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <MCP9808_SetResolution+0x44>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	7153      	strb	r3, [r2, #5]
	}

	return res;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000020c 	.word	0x2000020c

08001240 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af04      	add	r7, sp, #16
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	2301      	movs	r3, #1
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	2200      	movs	r2, #0
 800126c:	2178      	movs	r1, #120	; 0x78
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <ssd1306_WriteCommand+0x2c>)
 8001270:	f003 f9a4 	bl	80045bc <HAL_I2C_Mem_Write>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000664 	.word	0x20000664

08001280 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af04      	add	r7, sp, #16
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	f04f 32ff 	mov.w	r2, #4294967295
 8001292:	9202      	str	r2, [sp, #8]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	2178      	movs	r1, #120	; 0x78
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <ssd1306_WriteData+0x30>)
 80012a2:	f003 f98b 	bl	80045bc <HAL_I2C_Mem_Write>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000664 	.word	0x20000664

080012b4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80012b8:	f7ff ffc2 	bl	8001240 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80012bc:	2064      	movs	r0, #100	; 0x64
 80012be:	f001 ff63 	bl	8003188 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f9da 	bl	800167c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80012c8:	2020      	movs	r0, #32
 80012ca:	f7ff ffc1 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ffbe 	bl	8001250 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012d4:	20b0      	movs	r0, #176	; 0xb0
 80012d6:	f7ff ffbb 	bl	8001250 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012da:	20c8      	movs	r0, #200	; 0xc8
 80012dc:	f7ff ffb8 	bl	8001250 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ffb5 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012e6:	2010      	movs	r0, #16
 80012e8:	f7ff ffb2 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012ec:	2040      	movs	r0, #64	; 0x40
 80012ee:	f7ff ffaf 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012f2:	20ff      	movs	r0, #255	; 0xff
 80012f4:	f000 f9ae 	bl	8001654 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012f8:	20a1      	movs	r0, #161	; 0xa1
 80012fa:	f7ff ffa9 	bl	8001250 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012fe:	20a6      	movs	r0, #166	; 0xa6
 8001300:	f7ff ffa6 	bl	8001250 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001304:	20a8      	movs	r0, #168	; 0xa8
 8001306:	f7ff ffa3 	bl	8001250 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800130a:	203f      	movs	r0, #63	; 0x3f
 800130c:	f7ff ffa0 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001310:	20a4      	movs	r0, #164	; 0xa4
 8001312:	f7ff ff9d 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001316:	20d3      	movs	r0, #211	; 0xd3
 8001318:	f7ff ff9a 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ff97 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001322:	20d5      	movs	r0, #213	; 0xd5
 8001324:	f7ff ff94 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001328:	20f0      	movs	r0, #240	; 0xf0
 800132a:	f7ff ff91 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800132e:	20d9      	movs	r0, #217	; 0xd9
 8001330:	f7ff ff8e 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001334:	2022      	movs	r0, #34	; 0x22
 8001336:	f7ff ff8b 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800133a:	20da      	movs	r0, #218	; 0xda
 800133c:	f7ff ff88 	bl	8001250 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001340:	2012      	movs	r0, #18
 8001342:	f7ff ff85 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001346:	20db      	movs	r0, #219	; 0xdb
 8001348:	f7ff ff82 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800134c:	2020      	movs	r0, #32
 800134e:	f7ff ff7f 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001352:	208d      	movs	r0, #141	; 0x8d
 8001354:	f7ff ff7c 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001358:	2014      	movs	r0, #20
 800135a:	f7ff ff79 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800135e:	2001      	movs	r0, #1
 8001360:	f000 f98c 	bl	800167c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f80f 	bl	8001388 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800136a:	f000 f831 	bl	80013d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <ssd1306_Init+0xd0>)
 8001370:	2200      	movs	r2, #0
 8001372:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <ssd1306_Init+0xd0>)
 8001376:	2200      	movs	r2, #0
 8001378:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800137a:	4b02      	ldr	r3, [pc, #8]	; (8001384 <ssd1306_Init+0xd0>)
 800137c:	2201      	movs	r2, #1
 800137e:	711a      	strb	r2, [r3, #4]
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000614 	.word	0x20000614

08001388 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e00d      	b.n	80013b4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <ssd1306_Fill+0x1a>
 800139e:	2100      	movs	r1, #0
 80013a0:	e000      	b.n	80013a4 <ssd1306_Fill+0x1c>
 80013a2:	21ff      	movs	r1, #255	; 0xff
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <ssd1306_Fill+0x44>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	460a      	mov	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d3ed      	bcc.n	8001398 <ssd1306_Fill+0x10>
    }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000214 	.word	0x20000214

080013d0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e016      	b.n	800140a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3b50      	subs	r3, #80	; 0x50
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff34 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff ff31 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013ee:	2010      	movs	r0, #16
 80013f0:	f7ff ff2e 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	01db      	lsls	r3, r3, #7
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <ssd1306_UpdateScreen+0x4c>)
 80013fa:	4413      	add	r3, r2
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff3e 	bl	8001280 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	3301      	adds	r3, #1
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b07      	cmp	r3, #7
 800140e:	d9e5      	bls.n	80013dc <ssd1306_UpdateScreen+0xc>
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000214 	.word	0x20000214

08001420 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	460b      	mov	r3, r1
 800142c:	71bb      	strb	r3, [r7, #6]
 800142e:	4613      	mov	r3, r2
 8001430:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db3d      	blt.n	80014b6 <ssd1306_DrawPixel+0x96>
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	2b3f      	cmp	r3, #63	; 0x3f
 800143e:	d83a      	bhi.n	80014b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001440:	797b      	ldrb	r3, [r7, #5]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11a      	bne.n	800147c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	4603      	mov	r3, r0
 8001450:	01db      	lsls	r3, r3, #7
 8001452:	4413      	add	r3, r2
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	b25a      	sxtb	r2, r3
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	b25b      	sxtb	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b259      	sxtb	r1, r3
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	4603      	mov	r3, r0
 8001470:	01db      	lsls	r3, r3, #7
 8001472:	4413      	add	r3, r2
 8001474:	b2c9      	uxtb	r1, r1
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 8001478:	54d1      	strb	r1, [r2, r3]
 800147a:	e01d      	b.n	80014b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	4603      	mov	r3, r0
 8001486:	01db      	lsls	r3, r3, #7
 8001488:	4413      	add	r3, r2
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	b25a      	sxtb	r2, r3
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	b25b      	sxtb	r3, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	b259      	sxtb	r1, r3
 80014a6:	79fa      	ldrb	r2, [r7, #7]
 80014a8:	4603      	mov	r3, r0
 80014aa:	01db      	lsls	r3, r3, #7
 80014ac:	4413      	add	r3, r2
 80014ae:	b2c9      	uxtb	r1, r1
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 80014b2:	54d1      	strb	r1, [r2, r3]
 80014b4:	e000      	b.n	80014b8 <ssd1306_DrawPixel+0x98>
        return;
 80014b6:	bf00      	nop
    }
}
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000214 	.word	0x20000214

080014c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4604      	mov	r4, r0
 80014d0:	1d38      	adds	r0, r7, #4
 80014d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80014d6:	461a      	mov	r2, r3
 80014d8:	4623      	mov	r3, r4
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	4613      	mov	r3, r2
 80014de:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b1f      	cmp	r3, #31
 80014e4:	d902      	bls.n	80014ec <ssd1306_WriteChar+0x24>
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b7e      	cmp	r3, #126	; 0x7e
 80014ea:	d901      	bls.n	80014f0 <ssd1306_WriteChar+0x28>
        return 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e06d      	b.n	80015cc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	793b      	ldrb	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	2b80      	cmp	r3, #128	; 0x80
 80014fc:	dc06      	bgt.n	800150c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001500:	885b      	ldrh	r3, [r3, #2]
 8001502:	461a      	mov	r2, r3
 8001504:	797b      	ldrb	r3, [r7, #5]
 8001506:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001508:	2b40      	cmp	r3, #64	; 0x40
 800150a:	dd01      	ble.n	8001510 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800150c:	2300      	movs	r3, #0
 800150e:	e05d      	b.n	80015cc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	e04c      	b.n	80015b0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3b20      	subs	r3, #32
 800151c:	7979      	ldrb	r1, [r7, #5]
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4619      	mov	r1, r3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	440b      	add	r3, r1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e034      	b.n	80015a0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d012      	beq.n	800156c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b2d8      	uxtb	r0, r3
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001556:	885b      	ldrh	r3, [r3, #2]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4413      	add	r3, r2
 8001560:	b2db      	uxtb	r3, r3
 8001562:	7bba      	ldrb	r2, [r7, #14]
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff ff5b 	bl	8001420 <ssd1306_DrawPixel>
 800156a:	e016      	b.n	800159a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b2d8      	uxtb	r0, r3
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b2d9      	uxtb	r1, r3
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	f7ff ff43 	bl	8001420 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	3301      	adds	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	793b      	ldrb	r3, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d3c5      	bcc.n	8001536 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	797b      	ldrb	r3, [r7, #5]
 80015b2:	461a      	mov	r2, r3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d3ad      	bcc.n	8001516 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80015c8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	20000614 	.word	0x20000614

080015d8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	1d38      	adds	r0, r7, #4
 80015e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80015e6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80015e8:	e012      	b.n	8001610 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	7818      	ldrb	r0, [r3, #0]
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	1d3a      	adds	r2, r7, #4
 80015f2:	ca06      	ldmia	r2, {r1, r2}
 80015f4:	f7ff ff68 	bl	80014c8 <ssd1306_WriteChar>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d002      	beq.n	800160a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	e008      	b.n	800161c <ssd1306_WriteString+0x44>
        }
        str++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e8      	bne.n	80015ea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	781b      	ldrb	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	460a      	mov	r2, r1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	4613      	mov	r3, r2
 8001632:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <ssd1306_SetCursor+0x2c>)
 800163a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <ssd1306_SetCursor+0x2c>)
 8001642:	805a      	strh	r2, [r3, #2]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000614 	.word	0x20000614

08001654 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800165e:	2381      	movs	r3, #129	; 0x81
 8001660:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fdf3 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fdef 	bl	8001250 <ssd1306_WriteCommand>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800168c:	23af      	movs	r3, #175	; 0xaf
 800168e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <ssd1306_SetDisplayOn+0x38>)
 8001692:	2201      	movs	r2, #1
 8001694:	715a      	strb	r2, [r3, #5]
 8001696:	e004      	b.n	80016a2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001698:	23ae      	movs	r3, #174	; 0xae
 800169a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <ssd1306_SetDisplayOn+0x38>)
 800169e:	2200      	movs	r2, #0
 80016a0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fdd3 	bl	8001250 <ssd1306_WriteCommand>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000614 	.word	0x20000614

080016b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_ADC1_Init+0x98>)
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_ADC1_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_ADC1_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_ADC1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f8:	4a17      	ldr	r2, [pc, #92]	; (8001758 <MX_ADC1_Init+0xa0>)
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_ADC1_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_ADC1_Init+0x98>)
 8001704:	2201      	movs	r2, #1
 8001706:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_ADC1_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_ADC1_Init+0x98>)
 8001712:	2201      	movs	r2, #1
 8001714:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <MX_ADC1_Init+0x98>)
 8001718:	f001 fd5a 	bl	80031d0 <HAL_ADC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001722:	f000 ff11 	bl	8002548 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001726:	2303      	movs	r3, #3
 8001728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800172a:	2301      	movs	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_ADC1_Init+0x98>)
 8001738:	f001 fef4 	bl	8003524 <HAL_ADC_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001742:	f000 ff01 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000061c 	.word	0x2000061c
 8001754:	40012000 	.word	0x40012000
 8001758:	0f000001 	.word	0x0f000001

0800175c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <HAL_ADC_MspInit+0x74>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d123      	bne.n	80017c6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ae:	2308      	movs	r3, #8
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b2:	2303      	movs	r3, #3
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_ADC_MspInit+0x7c>)
 80017c2:	f002 faa3 	bl	8003d0c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40012000 	.word	0x40012000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	; 0x38
 80017e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <MX_GPIO_Init+0x268>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a93      	ldr	r2, [pc, #588]	; (8001a44 <MX_GPIO_Init+0x268>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800180a:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <MX_GPIO_Init+0x268>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a8d      	ldr	r2, [pc, #564]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a87      	ldr	r2, [pc, #540]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b85      	ldr	r3, [pc, #532]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b82      	ldr	r3, [pc, #520]	; (8001a44 <MX_GPIO_Init+0x268>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a81      	ldr	r2, [pc, #516]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b7f      	ldr	r3, [pc, #508]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a7b      	ldr	r2, [pc, #492]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b79      	ldr	r3, [pc, #484]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <MX_GPIO_Init+0x268>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001870:	f043 0310 	orr.w	r3, r3, #16
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	4b70      	ldr	r3, [pc, #448]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a6f      	ldr	r2, [pc, #444]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800189a:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <MX_GPIO_Init+0x268>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a69      	ldr	r2, [pc, #420]	; (8001a44 <MX_GPIO_Init+0x268>)
 80018a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <MX_GPIO_Init+0x268>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80018b8:	4863      	ldr	r0, [pc, #396]	; (8001a48 <MX_GPIO_Init+0x26c>)
 80018ba:	f002 fbeb 	bl	8004094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2140      	movs	r1, #64	; 0x40
 80018c2:	4862      	ldr	r0, [pc, #392]	; (8001a4c <MX_GPIO_Init+0x270>)
 80018c4:	f002 fbe6 	bl	8004094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ce:	4860      	ldr	r0, [pc, #384]	; (8001a50 <MX_GPIO_Init+0x274>)
 80018d0:	f002 fbe0 	bl	8004094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4859      	ldr	r0, [pc, #356]	; (8001a50 <MX_GPIO_Init+0x274>)
 80018ec:	f002 fa0e 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018f0:	2332      	movs	r3, #50	; 0x32
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001900:	230b      	movs	r3, #11
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4851      	ldr	r0, [pc, #324]	; (8001a50 <MX_GPIO_Init+0x274>)
 800190c:	f002 f9fe 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001910:	2386      	movs	r3, #134	; 0x86
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001920:	230b      	movs	r3, #11
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	4619      	mov	r1, r3
 800192a:	484a      	ldr	r0, [pc, #296]	; (8001a54 <MX_GPIO_Init+0x278>)
 800192c:	f002 f9ee 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001930:	f244 0381 	movw	r3, #16513	; 0x4081
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	483f      	ldr	r0, [pc, #252]	; (8001a48 <MX_GPIO_Init+0x26c>)
 800194a:	f002 f9df 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800194e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001960:	230b      	movs	r3, #11
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	4837      	ldr	r0, [pc, #220]	; (8001a48 <MX_GPIO_Init+0x26c>)
 800196c:	f002 f9ce 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001970:	2340      	movs	r3, #64	; 0x40
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4831      	ldr	r0, [pc, #196]	; (8001a4c <MX_GPIO_Init+0x270>)
 8001988:	f002 f9c0 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	4619      	mov	r1, r3
 800199e:	482b      	ldr	r0, [pc, #172]	; (8001a4c <MX_GPIO_Init+0x270>)
 80019a0:	f002 f9b4 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = przycisk1_Pin|przycisk0_Pin;
 80019a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	4825      	ldr	r0, [pc, #148]	; (8001a50 <MX_GPIO_Init+0x274>)
 80019ba:	f002 f9a7 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019d0:	230a      	movs	r3, #10
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <MX_GPIO_Init+0x278>)
 80019dc:	f002 f996 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	4817      	ldr	r0, [pc, #92]	; (8001a54 <MX_GPIO_Init+0x278>)
 80019f6:	f002 f989 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = wentylator_Pin;
 80019fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(wentylator_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	4619      	mov	r1, r3
 8001a12:	480f      	ldr	r0, [pc, #60]	; (8001a50 <MX_GPIO_Init+0x274>)
 8001a14:	f002 f97a 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a2a:	230b      	movs	r3, #11
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_GPIO_Init+0x270>)
 8001a36:	f002 f969 	bl	8003d0c <HAL_GPIO_Init>

}
 8001a3a:	bf00      	nop
 8001a3c:	3738      	adds	r7, #56	; 0x38
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020000 	.word	0x40020000

08001a58 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <MX_I2C2_Init+0x78>)
 8001a60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00501FE4;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <MX_I2C2_Init+0x7c>)
 8001a66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a92:	480e      	ldr	r0, [pc, #56]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a94:	f002 fb18 	bl	80040c8 <HAL_I2C_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a9e:	f000 fd53 	bl	8002548 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <MX_I2C2_Init+0x74>)
 8001aa6:	f003 f95d 	bl	8004d64 <HAL_I2CEx_ConfigAnalogFilter>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ab0:	f000 fd4a 	bl	8002548 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_I2C2_Init+0x74>)
 8001ab8:	f003 f99f 	bl	8004dfa <HAL_I2CEx_ConfigDigitalFilter>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ac2:	f000 fd41 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000664 	.word	0x20000664
 8001ad0:	40005800 	.word	0x40005800
 8001ad4:	00501fe4 	.word	0x00501fe4

08001ad8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <MX_I2C4_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <MX_I2C4_Init+0x7c>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001b12:	480e      	ldr	r0, [pc, #56]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b14:	f002 fad8 	bl	80040c8 <HAL_I2C_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001b1e:	f000 fd13 	bl	8002548 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b26:	f003 f91d 	bl	8004d64 <HAL_I2CEx_ConfigAnalogFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001b30:	f000 fd0a 	bl	8002548 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001b34:	2100      	movs	r1, #0
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b38:	f003 f95f 	bl	8004dfa <HAL_I2CEx_ConfigDigitalFilter>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f000 fd01 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200006b8 	.word	0x200006b8
 8001b50:	40006000 	.word	0x40006000
 8001b54:	20404768 	.word	0x20404768

08001b58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0ac      	sub	sp, #176	; 0xb0
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	2284      	movs	r2, #132	; 0x84
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f007 f811 	bl	8008ba0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a44      	ldr	r2, [pc, #272]	; (8001c94 <HAL_I2C_MspInit+0x13c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d13d      	bne.n	8001c04 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fea5 	bl	80058e8 <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001ba4:	f000 fcd0 	bl	8002548 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a3a      	ldr	r2, [pc, #232]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bae:	f043 0320 	orr.w	r3, r3, #32
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc6:	2312      	movs	r3, #18
 8001bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001be2:	4619      	mov	r1, r3
 8001be4:	482d      	ldr	r0, [pc, #180]	; (8001c9c <HAL_I2C_MspInit+0x144>)
 8001be6:	f002 f891 	bl	8003d0c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bea:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001c02:	e042      	b.n	8001c8a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <HAL_I2C_MspInit+0x148>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d13d      	bne.n	8001c8a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 fe62 	bl	80058e8 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001c2a:	f000 fc8d 	bl	8002548 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001c60:	2304      	movs	r3, #4
 8001c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <HAL_I2C_MspInit+0x144>)
 8001c6e:	f002 f84d 	bl	8003d0c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
}
 8001c8a:	bf00      	nop
 8001c8c:	37b0      	adds	r7, #176	; 0xb0
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40005800 	.word	0x40005800
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40021400 	.word	0x40021400
 8001ca0:	40006000 	.word	0x40006000

08001ca4 <grzanie_on_off>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

bool grzanie_on_off() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(przycisk0_GPIO_Port, przycisk0_Pin) == GPIO_PIN_SET){
 8001ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <grzanie_on_off+0x20>)
 8001cae:	f002 f9d9 	bl	8004064 <HAL_GPIO_ReadPin>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <grzanie_on_off+0x18>
		return true;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <grzanie_on_off+0x1a>
	}
	else{
		return false;
 8001cbc:	2300      	movs	r3, #0
	}
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40020800 	.word	0x40020800

08001cc8 <auto_manual_on_off>:

bool auto_manual_on_off() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(przycisk1_GPIO_Port, przycisk1_Pin) == GPIO_PIN_SET){
 8001ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <auto_manual_on_off+0x20>)
 8001cd2:	f002 f9c7 	bl	8004064 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <auto_manual_on_off+0x18>
		return true;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <auto_manual_on_off+0x1a>
	}
	else{
		return false;
 8001ce0:	2300      	movs	r3, #0
	}
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40020800 	.word	0x40020800

08001cec <HAL_UART_RxCpltCallback>:

// Z tym gównem też chyba jest coś nie tak
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart3, received_data, 3); // Tu włącza sie to gowno znowu :)
	if(auto_manual_on_off()){
 8001cf4:	f7ff ffe8 	bl	8001cc8 <auto_manual_on_off>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d02d      	beq.n	8001d5a <HAL_UART_RxCpltCallback+0x6e>
		if(atof(received_data)>50){
 8001cfe:	4819      	ldr	r0, [pc, #100]	; (8001d64 <HAL_UART_RxCpltCallback+0x78>)
 8001d00:	f006 feee 	bl	8008ae0 <atof>
 8001d04:	ec51 0b10 	vmov	r0, r1, d0
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_UART_RxCpltCallback+0x7c>)
 8001d0e:	f7fe ff23 	bl	8000b58 <__aeabi_dcmpgt>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_UART_RxCpltCallback+0x34>
			zadana_temperatura = 50;
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_UART_RxCpltCallback+0x80>)
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <HAL_UART_RxCpltCallback+0x84>)
 8001d1c:	601a      	str	r2, [r3, #0]
		}
		else{
			zadana_temperatura = atof(received_data);
		}
	}
}
 8001d1e:	e01c      	b.n	8001d5a <HAL_UART_RxCpltCallback+0x6e>
		else if(atof(received_data)<20){
 8001d20:	4810      	ldr	r0, [pc, #64]	; (8001d64 <HAL_UART_RxCpltCallback+0x78>)
 8001d22:	f006 fedd 	bl	8008ae0 <atof>
 8001d26:	ec51 0b10 	vmov	r0, r1, d0
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_UART_RxCpltCallback+0x88>)
 8001d30:	f7fe fef4 	bl	8000b1c <__aeabi_dcmplt>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_UART_RxCpltCallback+0x56>
			zadana_temperatura = 20;
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_UART_RxCpltCallback+0x80>)
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_UART_RxCpltCallback+0x8c>)
 8001d3e:	601a      	str	r2, [r3, #0]
}
 8001d40:	e00b      	b.n	8001d5a <HAL_UART_RxCpltCallback+0x6e>
			zadana_temperatura = atof(received_data);
 8001d42:	4808      	ldr	r0, [pc, #32]	; (8001d64 <HAL_UART_RxCpltCallback+0x78>)
 8001d44:	f006 fecc 	bl	8008ae0 <atof>
 8001d48:	ec53 2b10 	vmov	r2, r3, d0
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f7fe ff54 	bl	8000bfc <__aeabi_d2f>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <HAL_UART_RxCpltCallback+0x80>)
 8001d58:	6013      	str	r3, [r2, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000070c 	.word	0x2000070c
 8001d68:	40490000 	.word	0x40490000
 8001d6c:	2000071c 	.word	0x2000071c
 8001d70:	42480000 	.word	0x42480000
 8001d74:	40340000 	.word	0x40340000
 8001d78:	41a00000 	.word	0x41a00000

08001d7c <zadajnik>:

float zadajnik() {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001d82:	4813      	ldr	r0, [pc, #76]	; (8001dd0 <zadajnik+0x54>)
 8001d84:	f001 fa68 	bl	8003258 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	4810      	ldr	r0, [pc, #64]	; (8001dd0 <zadajnik+0x54>)
 8001d8e:	f001 fb31 	bl	80033f4 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8001d92:	480f      	ldr	r0, [pc, #60]	; (8001dd0 <zadajnik+0x54>)
 8001d94:	f001 fbb9 	bl	800350a <HAL_ADC_GetValue>
 8001d98:	6078      	str	r0, [r7, #4]
	float ser = (1.0f * value /4095.0f)*30+20;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da4:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001dd4 <zadajnik+0x58>
 8001da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dac:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001db8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dbc:	edc7 7a00 	vstr	s15, [r7]
	return ser;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	ee07 3a90 	vmov	s15, r3
}
 8001dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000061c 	.word	0x2000061c
 8001dd4:	457ff000 	.word	0x457ff000

08001dd8 <wentyl>:

void wentyl(){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
	float blad = zadana_temperatura - akutalna_temperatura;
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <wentyl+0x64>)
 8001de0:	ed93 7a00 	vldr	s14, [r3]
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <wentyl+0x68>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dee:	edc7 7a01 	vstr	s15, [r7, #4]
	float hist = -0.5;
 8001df2:	f04f 433f 	mov.w	r3, #3204448256	; 0xbf000000
 8001df6:	603b      	str	r3, [r7, #0]
	if (blad<=hist){
 8001df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dfc:	edd7 7a00 	vldr	s15, [r7]
 8001e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	d805      	bhi.n	8001e16 <wentyl+0x3e>
		HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_SET);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <wentyl+0x6c>)
 8001e12:	f002 f93f 	bl	8004094 <HAL_GPIO_WritePin>
	}
	if (blad>=0){
 8001e16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	da00      	bge.n	8001e26 <wentyl+0x4e>
		HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
	}
}
 8001e24:	e005      	b.n	8001e32 <wentyl+0x5a>
		HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <wentyl+0x6c>)
 8001e2e:	f002 f931 	bl	8004094 <HAL_GPIO_WritePin>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000071c 	.word	0x2000071c
 8001e40:	20000710 	.word	0x20000710
 8001e44:	40020800 	.word	0x40020800

08001e48 <change_current_duty_cycle>:

// Jakbym miał powiedzieć gdzie sie wypierdoli ten kod to wlasnie tutaj
void change_current_duty_cycle(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t current_duty_cycle)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	4613      	mov	r3, r2
 8001e54:	80fb      	strh	r3, [r7, #6]
    // calculate the new pulse value
    uint32_t pulse = ((htim->Init.Period+1) * current_duty_cycle) / 1000;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	88fa      	ldrh	r2, [r7, #6]
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <change_current_duty_cycle+0x88>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	617b      	str	r3, [r7, #20]
    // update the capture/compare register
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d104      	bne.n	8001e7c <change_current_duty_cycle+0x34>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e7a:	e023      	b.n	8001ec4 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d104      	bne.n	8001e8c <change_current_duty_cycle+0x44>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e8a:	e01b      	b.n	8001ec4 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d104      	bne.n	8001e9c <change_current_duty_cycle+0x54>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001e9a:	e013      	b.n	8001ec4 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d104      	bne.n	8001eac <change_current_duty_cycle+0x64>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001eaa:	e00b      	b.n	8001ec4 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d104      	bne.n	8001ebc <change_current_duty_cycle+0x74>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001eba:	e003      	b.n	8001ec4 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001ec4:	bf00      	nop
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <wyswietlacz>:

void wyswietlacz(){
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b0a2      	sub	sp, #136	; 0x88
 8001ed8:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff fa54 	bl	8001388 <ssd1306_Fill>
	uint8_t y = 0; // ktora linia wyswietlacza
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char temp_buf[6];
	gcvt(akutalna_temperatura, 6, temp_buf);
 8001ee6:	4ba8      	ldr	r3, [pc, #672]	; (8002188 <wyswietlacz+0x2b4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fb4c 	bl	8000588 <__aeabi_f2d>
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	460d      	mov	r5, r1
 8001ef4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ef8:	4619      	mov	r1, r3
 8001efa:	2006      	movs	r0, #6
 8001efc:	ec45 4b10 	vmov	d0, r4, r5
 8001f00:	f006 fdf2 	bl	8008ae8 <gcvt>
	ssd1306_SetCursor(2, y);
 8001f04:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001f08:	4619      	mov	r1, r3
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f7ff fb8a 	bl	8001624 <ssd1306_SetCursor>
	char buf0[20] = "Temperatura:";
 8001f10:	4b9e      	ldr	r3, [pc, #632]	; (800218c <wyswietlacz+0x2b8>)
 8001f12:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f18:	c407      	stmia	r4!, {r0, r1, r2}
 8001f1a:	7023      	strb	r3, [r4, #0]
 8001f1c:	f107 0371 	add.w	r3, r7, #113	; 0x71
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f8c3 2003 	str.w	r2, [r3, #3]
	ssd1306_WriteString(strcat(buf0, temp_buf), Font_7x10, White);
 8001f28:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001f2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f006 fe3c 	bl	8008bb0 <strcat>
 8001f38:	4a95      	ldr	r2, [pc, #596]	; (8002190 <wyswietlacz+0x2bc>)
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	ca06      	ldmia	r2, {r1, r2}
 8001f3e:	f7ff fb4b 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001f42:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001f46:	330a      	adds	r3, #10
 8001f48:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char set_buf[6];
	gcvt(zadana_temperatura, 4, set_buf);
 8001f4c:	4b91      	ldr	r3, [pc, #580]	; (8002194 <wyswietlacz+0x2c0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fb19 	bl	8000588 <__aeabi_f2d>
 8001f56:	4604      	mov	r4, r0
 8001f58:	460d      	mov	r5, r1
 8001f5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	2004      	movs	r0, #4
 8001f62:	ec45 4b10 	vmov	d0, r4, r5
 8001f66:	f006 fdbf 	bl	8008ae8 <gcvt>
	ssd1306_SetCursor(2, y);
 8001f6a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001f6e:	4619      	mov	r1, r3
 8001f70:	2002      	movs	r0, #2
 8001f72:	f7ff fb57 	bl	8001624 <ssd1306_SetCursor>
	char buf1[20] = "Nastawa:";
 8001f76:	4a88      	ldr	r2, [pc, #544]	; (8002198 <wyswietlacz+0x2c4>)
 8001f78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f7e:	c303      	stmia	r3!, {r0, r1}
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	f107 0351 	add.w	r3, r7, #81	; 0x51
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	f8c3 2007 	str.w	r2, [r3, #7]
	ssd1306_WriteString(strcat(buf1, set_buf), Font_7x10, White);
 8001f90:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f006 fe08 	bl	8008bb0 <strcat>
 8001fa0:	4a7b      	ldr	r2, [pc, #492]	; (8002190 <wyswietlacz+0x2bc>)
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	ca06      	ldmia	r2, {r1, r2}
 8001fa6:	f7ff fb17 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001faa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001fae:	330a      	adds	r3, #10
 8001fb0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	float duty_cl = sterowanie/10.0f;
 8001fb4:	4b79      	ldr	r3, [pc, #484]	; (800219c <wyswietlacz+0x2c8>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	char duty_buf[6];
	gcvt(duty_cl, 3, duty_buf);
 8001fcc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001fd0:	f7fe fada 	bl	8000588 <__aeabi_f2d>
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	460d      	mov	r5, r1
 8001fd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fdc:	4619      	mov	r1, r3
 8001fde:	2003      	movs	r0, #3
 8001fe0:	ec45 4b10 	vmov	d0, r4, r5
 8001fe4:	f006 fd80 	bl	8008ae8 <gcvt>
	ssd1306_SetCursor(2, y);
 8001fe8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001fec:	4619      	mov	r1, r3
 8001fee:	2002      	movs	r0, #2
 8001ff0:	f7ff fb18 	bl	8001624 <ssd1306_SetCursor>
	char buf2[20] = "PWM: ";
 8001ff4:	4a6a      	ldr	r2, [pc, #424]	; (80021a0 <wyswietlacz+0x2cc>)
 8001ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ffe:	6018      	str	r0, [r3, #0]
 8002000:	3304      	adds	r3, #4
 8002002:	8019      	strh	r1, [r3, #0]
 8002004:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	819a      	strh	r2, [r3, #12]
	strcat(buf2, duty_buf);
 8002012:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f006 fdc7 	bl	8008bb0 <strcat>
	ssd1306_WriteString(strcat(buf2, "%"), Font_7x10, White);
 8002022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe f8f2 	bl	8000210 <strlen>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002034:	4413      	add	r3, r2
 8002036:	495b      	ldr	r1, [pc, #364]	; (80021a4 <wyswietlacz+0x2d0>)
 8002038:	461a      	mov	r2, r3
 800203a:	460b      	mov	r3, r1
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	8013      	strh	r3, [r2, #0]
 8002040:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <wyswietlacz+0x2bc>)
 8002046:	2301      	movs	r3, #1
 8002048:	ca06      	ldmia	r2, {r1, r2}
 800204a:	f7ff fac5 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 800204e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002052:	330a      	adds	r3, #10
 8002054:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	ssd1306_SetCursor(2, y);
 8002058:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800205c:	4619      	mov	r1, r3
 800205e:	2002      	movs	r0, #2
 8002060:	f7ff fae0 	bl	8001624 <ssd1306_SetCursor>
	char buf3[20] = "Dziala: ";
 8002064:	4a50      	ldr	r2, [pc, #320]	; (80021a8 <wyswietlacz+0x2d4>)
 8002066:	f107 0318 	add.w	r3, r7, #24
 800206a:	ca07      	ldmia	r2, {r0, r1, r2}
 800206c:	c303      	stmia	r3!, {r0, r1}
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	f8c3 2007 	str.w	r2, [r3, #7]
	if(grzanie_on_off()){
 800207e:	f7ff fe11 	bl	8001ca4 <grzanie_on_off>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d014      	beq.n	80020b2 <wyswietlacz+0x1de>
		ssd1306_WriteString(strcat(buf3, "TAK"), Font_7x10, White);
 8002088:	f107 0318 	add.w	r3, r7, #24
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe f8bf 	bl	8000210 <strlen>
 8002092:	4603      	mov	r3, r0
 8002094:	461a      	mov	r2, r3
 8002096:	f107 0318 	add.w	r3, r7, #24
 800209a:	4413      	add	r3, r2
 800209c:	4a43      	ldr	r2, [pc, #268]	; (80021ac <wyswietlacz+0x2d8>)
 800209e:	6810      	ldr	r0, [r2, #0]
 80020a0:	6018      	str	r0, [r3, #0]
 80020a2:	f107 0018 	add.w	r0, r7, #24
 80020a6:	4a3a      	ldr	r2, [pc, #232]	; (8002190 <wyswietlacz+0x2bc>)
 80020a8:	2301      	movs	r3, #1
 80020aa:	ca06      	ldmia	r2, {r1, r2}
 80020ac:	f7ff fa94 	bl	80015d8 <ssd1306_WriteString>
 80020b0:	e013      	b.n	80020da <wyswietlacz+0x206>
	}
	else{
		ssd1306_WriteString(strcat(buf3, "NIE"), Font_7x10, White);
 80020b2:	f107 0318 	add.w	r3, r7, #24
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe f8aa 	bl	8000210 <strlen>
 80020bc:	4603      	mov	r3, r0
 80020be:	461a      	mov	r2, r3
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	4413      	add	r3, r2
 80020c6:	4a3a      	ldr	r2, [pc, #232]	; (80021b0 <wyswietlacz+0x2dc>)
 80020c8:	6810      	ldr	r0, [r2, #0]
 80020ca:	6018      	str	r0, [r3, #0]
 80020cc:	f107 0018 	add.w	r0, r7, #24
 80020d0:	4a2f      	ldr	r2, [pc, #188]	; (8002190 <wyswietlacz+0x2bc>)
 80020d2:	2301      	movs	r3, #1
 80020d4:	ca06      	ldmia	r2, {r1, r2}
 80020d6:	f7ff fa7f 	bl	80015d8 <ssd1306_WriteString>
	}
	y += 10;
 80020da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80020de:	330a      	adds	r3, #10
 80020e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	ssd1306_SetCursor(2, y);
 80020e4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80020e8:	4619      	mov	r1, r3
 80020ea:	2002      	movs	r0, #2
 80020ec:	f7ff fa9a 	bl	8001624 <ssd1306_SetCursor>
		char buf6[20] = "Tryb: ";
 80020f0:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <wyswietlacz+0x2e0>)
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020f8:	6018      	str	r0, [r3, #0]
 80020fa:	3304      	adds	r3, #4
 80020fc:	8019      	strh	r1, [r3, #0]
 80020fe:	3302      	adds	r3, #2
 8002100:	0c0a      	lsrs	r2, r1, #16
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	f107 030b 	add.w	r3, r7, #11
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	731a      	strb	r2, [r3, #12]
		if(auto_manual_on_off()){
 8002112:	f7ff fdd9 	bl	8001cc8 <auto_manual_on_off>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d014      	beq.n	8002146 <wyswietlacz+0x272>
			ssd1306_WriteString(strcat(buf6, "AUTOMAT"), Font_7x10, White);
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f876 	bl	8000210 <strlen>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	4413      	add	r3, r2
 800212c:	4922      	ldr	r1, [pc, #136]	; (80021b8 <wyswietlacz+0x2e4>)
 800212e:	461a      	mov	r2, r3
 8002130:	460b      	mov	r3, r1
 8002132:	cb03      	ldmia	r3!, {r0, r1}
 8002134:	6010      	str	r0, [r2, #0]
 8002136:	6051      	str	r1, [r2, #4]
 8002138:	1d38      	adds	r0, r7, #4
 800213a:	4a15      	ldr	r2, [pc, #84]	; (8002190 <wyswietlacz+0x2bc>)
 800213c:	2301      	movs	r3, #1
 800213e:	ca06      	ldmia	r2, {r1, r2}
 8002140:	f7ff fa4a 	bl	80015d8 <ssd1306_WriteString>
 8002144:	e014      	b.n	8002170 <wyswietlacz+0x29c>
		}
		else{
			ssd1306_WriteString(strcat(buf6, "MANUAL"), Font_7x10, White);
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe f861 	bl	8000210 <strlen>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4413      	add	r3, r2
 8002156:	4a19      	ldr	r2, [pc, #100]	; (80021bc <wyswietlacz+0x2e8>)
 8002158:	6810      	ldr	r0, [r2, #0]
 800215a:	6018      	str	r0, [r3, #0]
 800215c:	8891      	ldrh	r1, [r2, #4]
 800215e:	7992      	ldrb	r2, [r2, #6]
 8002160:	8099      	strh	r1, [r3, #4]
 8002162:	719a      	strb	r2, [r3, #6]
 8002164:	1d38      	adds	r0, r7, #4
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <wyswietlacz+0x2bc>)
 8002168:	2301      	movs	r3, #1
 800216a:	ca06      	ldmia	r2, {r1, r2}
 800216c:	f7ff fa34 	bl	80015d8 <ssd1306_WriteString>
		}
		y += 10;
 8002170:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002174:	330a      	adds	r3, #10
 8002176:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87


	ssd1306_UpdateScreen();
 800217a:	f7ff f929 	bl	80013d0 <ssd1306_UpdateScreen>
}
 800217e:	bf00      	nop
 8002180:	3788      	adds	r7, #136	; 0x88
 8002182:	46bd      	mov	sp, r7
 8002184:	bdb0      	pop	{r4, r5, r7, pc}
 8002186:	bf00      	nop
 8002188:	20000710 	.word	0x20000710
 800218c:	0800c99c 	.word	0x0800c99c
 8002190:	20000000 	.word	0x20000000
 8002194:	2000071c 	.word	0x2000071c
 8002198:	0800c9b0 	.word	0x0800c9b0
 800219c:	2000071a 	.word	0x2000071a
 80021a0:	0800c9c4 	.word	0x0800c9c4
 80021a4:	0800c980 	.word	0x0800c980
 80021a8:	0800c9d8 	.word	0x0800c9d8
 80021ac:	0800c984 	.word	0x0800c984
 80021b0:	0800c988 	.word	0x0800c988
 80021b4:	0800c9ec 	.word	0x0800c9ec
 80021b8:	0800c98c 	.word	0x0800c98c
 80021bc:	0800c994 	.word	0x0800c994

080021c0 <transmit_data>:

void transmit_data(float current_temp, float set_temp){
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b09c      	sub	sp, #112	; 0x70
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80021ca:	edc7 0a00 	vstr	s1, [r7]
    char data_buf[100];
    gcvt(current_temp, 6, data_buf); // convertuje float na string
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe f9da 	bl	8000588 <__aeabi_f2d>
 80021d4:	4604      	mov	r4, r0
 80021d6:	460d      	mov	r5, r1
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	4619      	mov	r1, r3
 80021de:	2006      	movs	r0, #6
 80021e0:	ec45 4b10 	vmov	d0, r4, r5
 80021e4:	f006 fc80 	bl	8008ae8 <gcvt>
    strcat(data_buf, ";"); // dodaje srednik
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f80f 	bl	8000210 <strlen>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	4413      	add	r3, r2
 80021fc:	491f      	ldr	r1, [pc, #124]	; (800227c <transmit_data+0xbc>)
 80021fe:	461a      	mov	r2, r3
 8002200:	460b      	mov	r3, r1
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	8013      	strh	r3, [r2, #0]
    //gcvt(set_temp, 6, data_buf+strlen(data_buf)); // dodaje set_temp do stringa
    gcvt(sterowanie/1.0f, 6, data_buf+strlen(data_buf));
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <transmit_data+0xc0>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002212:	ee17 0a90 	vmov	r0, s15
 8002216:	f7fe f9b7 	bl	8000588 <__aeabi_f2d>
 800221a:	4604      	mov	r4, r0
 800221c:	460d      	mov	r5, r1
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	4618      	mov	r0, r3
 8002224:	f7fd fff4 	bl	8000210 <strlen>
 8002228:	4602      	mov	r2, r0
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	4413      	add	r3, r2
 8002230:	4619      	mov	r1, r3
 8002232:	2006      	movs	r0, #6
 8002234:	ec45 4b10 	vmov	d0, r4, r5
 8002238:	f006 fc56 	bl	8008ae8 <gcvt>
    strcat(data_buf, "\r\n");
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	4618      	mov	r0, r3
 8002242:	f7fd ffe5 	bl	8000210 <strlen>
 8002246:	4603      	mov	r3, r0
 8002248:	461a      	mov	r2, r3
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	4413      	add	r3, r2
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <transmit_data+0xc4>)
 8002252:	8811      	ldrh	r1, [r2, #0]
 8002254:	7892      	ldrb	r2, [r2, #2]
 8002256:	8019      	strh	r1, [r3, #0]
 8002258:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart3, data_buf, strlen(data_buf), 100);
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4618      	mov	r0, r3
 8002260:	f7fd ffd6 	bl	8000210 <strlen>
 8002264:	4603      	mov	r3, r0
 8002266:	b29a      	uxth	r2, r3
 8002268:	f107 010c 	add.w	r1, r7, #12
 800226c:	2364      	movs	r3, #100	; 0x64
 800226e:	4806      	ldr	r0, [pc, #24]	; (8002288 <transmit_data+0xc8>)
 8002270:	f005 f9a8 	bl	80075c4 <HAL_UART_Transmit>
}
 8002274:	bf00      	nop
 8002276:	3770      	adds	r7, #112	; 0x70
 8002278:	46bd      	mov	sp, r7
 800227a:	bdb0      	pop	{r4, r5, r7, pc}
 800227c:	0800ca00 	.word	0x0800ca00
 8002280:	2000071a 	.word	0x2000071a
 8002284:	0800ca04 	.word	0x0800ca04
 8002288:	20000908 	.word	0x20000908

0800228c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ // If the interrupt is from timer 2 - 10Hz
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229c:	d10f      	bne.n	80022be <HAL_TIM_PeriodElapsedCallback+0x32>
		transmit_data(akutalna_temperatura, value);
 800229e:	4b37      	ldr	r3, [pc, #220]	; (800237c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80022a6:	ed93 7a00 	vldr	s14, [r3]
 80022aa:	eef0 0a47 	vmov.f32	s1, s14
 80022ae:	eeb0 0a67 	vmov.f32	s0, s15
 80022b2:	f7ff ff85 	bl	80021c0 <transmit_data>
		current_duty_cycle = sterowanie;
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80022b8:	881a      	ldrh	r2, [r3, #0]
 80022ba:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80022bc:	801a      	strh	r2, [r3, #0]
	}
	if(htim->Instance == TIM3){ // If the interrupt is from timer 3 - 2Hz
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a32      	ldr	r2, [pc, #200]	; (800238c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d104      	bne.n	80022d2 <HAL_TIM_PeriodElapsedCallback+0x46>
		//ssd1306_TestAll();
		HAL_UART_Receive_IT(&huart3, received_data, 4);
 80022c8:	2204      	movs	r2, #4
 80022ca:	4931      	ldr	r1, [pc, #196]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80022cc:	4831      	ldr	r0, [pc, #196]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80022ce:	f005 f9fc 	bl	80076ca <HAL_UART_Receive_IT>
	}
	if(htim->Instance == TIM4){ // If the interrupt is from timer 4 - 8Hz
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a30      	ldr	r2, [pc, #192]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d122      	bne.n	8002322 <HAL_TIM_PeriodElapsedCallback+0x96>
		MCP9808_MeasureTemperature(&akutalna_temperatura);
 80022dc:	4827      	ldr	r0, [pc, #156]	; (800237c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80022de:	f7fe ff0b 	bl	80010f8 <MCP9808_MeasureTemperature>
		if(auto_manual_on_off()==false){
 80022e2:	f7ff fcf1 	bl	8001cc8 <auto_manual_on_off>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f083 0301 	eor.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d015      	beq.n	800231e <HAL_TIM_PeriodElapsedCallback+0x92>
			zadana_temperatura = round(zadajnik());
 80022f2:	f7ff fd43 	bl	8001d7c <zadajnik>
 80022f6:	ee10 3a10 	vmov	r3, s0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f944 	bl	8000588 <__aeabi_f2d>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	ec43 2b10 	vmov	d0, r2, r3
 8002308:	f00a fae8 	bl	800c8dc <round>
 800230c:	ec53 2b10 	vmov	r2, r3, d0
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	f7fe fc72 	bl	8000bfc <__aeabi_d2f>
 8002318:	4603      	mov	r3, r0
 800231a:	4a20      	ldr	r2, [pc, #128]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800231c:	6013      	str	r3, [r2, #0]
		}
		wyswietlacz();
 800231e:	f7ff fdd9 	bl	8001ed4 <wyswietlacz>
	}
	if(htim->Instance == TIM12){ // If the interrupt is from timer 12 - ~83.3kHz
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1e      	ldr	r2, [pc, #120]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d123      	bne.n	8002374 <HAL_TIM_PeriodElapsedCallback+0xe8>
			if(grzanie_on_off()){
 800232c:	f7ff fcba 	bl	8001ca4 <grzanie_on_off>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d012      	beq.n	800235c <HAL_TIM_PeriodElapsedCallback+0xd0>
				sterowanie = pid_calculate(zadana_temperatura, akutalna_temperatura);
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800233e:	ed93 7a00 	vldr	s14, [r3]
 8002342:	eef0 0a47 	vmov.f32	s1, s14
 8002346:	eeb0 0a67 	vmov.f32	s0, s15
 800234a:	f000 f929 	bl	80025a0 <pid_calculate>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002354:	801a      	strh	r2, [r3, #0]
				//sterowanie = 500;
				wentyl();
 8002356:	f7ff fd3f 	bl	8001dd8 <wentyl>
 800235a:	e004      	b.n	8002366 <HAL_TIM_PeriodElapsedCallback+0xda>
			}
			else{
				sterowanie = 0;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800235e:	2200      	movs	r2, #0
 8002360:	801a      	strh	r2, [r3, #0]
				wentyl();
 8002362:	f7ff fd39 	bl	8001dd8 <wentyl>
			}
			change_current_duty_cycle(&htim1, TIM_CHANNEL_1, sterowanie);
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	2100      	movs	r1, #0
 800236e:	480d      	ldr	r0, [pc, #52]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002370:	f7ff fd6a 	bl	8001e48 <change_current_duty_cycle>
		}

}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000710 	.word	0x20000710
 8002380:	20000714 	.word	0x20000714
 8002384:	2000071a 	.word	0x2000071a
 8002388:	20000718 	.word	0x20000718
 800238c:	40000400 	.word	0x40000400
 8002390:	2000070c 	.word	0x2000070c
 8002394:	20000908 	.word	0x20000908
 8002398:	40000800 	.word	0x40000800
 800239c:	2000071c 	.word	0x2000071c
 80023a0:	40001800 	.word	0x40001800
 80023a4:	20000740 	.word	0x20000740

080023a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ac:	f000 fe8f 	bl	80030ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b0:	f000 f85c 	bl	800246c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023b4:	f7ff fa12 	bl	80017dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80023b8:	f000 fdc8 	bl	8002f4c <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80023bc:	f7ff fb4c 	bl	8001a58 <MX_I2C2_Init>
  MX_TIM2_Init();
 80023c0:	f000 fb5c 	bl	8002a7c <MX_TIM2_Init>
  MX_TIM3_Init();
 80023c4:	f000 fba8 	bl	8002b18 <MX_TIM3_Init>
  MX_TIM4_Init();
 80023c8:	f000 fbf6 	bl	8002bb8 <MX_TIM4_Init>
  MX_I2C4_Init();
 80023cc:	f7ff fb84 	bl	8001ad8 <MX_I2C4_Init>
  MX_ADC1_Init();
 80023d0:	f7ff f972 	bl	80016b8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80023d4:	f000 fac4 	bl	8002960 <MX_TIM1_Init>
  MX_TIM8_Init();
 80023d8:	f000 fc3e 	bl	8002c58 <MX_TIM8_Init>
  MX_TIM12_Init();
 80023dc:	f000 fc90 	bl	8002d00 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_TestAll();
  ssd1306_Init(); // Inicjalizacja wyświetlacza
 80023e0:	f7fe ff68 	bl	80012b4 <ssd1306_Init>
  MCP9808_Init(&hi2c4, 0x18); // inicjalizacja sensora temperatury
 80023e4:	2118      	movs	r1, #24
 80023e6:	4816      	ldr	r0, [pc, #88]	; (8002440 <main+0x98>)
 80023e8:	f7fe fe10 	bl	800100c <MCP9808_Init>
  // Tutej nastawiają się dokładności czujnika temperatury :))))
  MCP9808_SetResolution(MCP9808_High_Res);  ///> High 0.125 (130 ms)
 80023ec:	2002      	movs	r0, #2
 80023ee:	f7fe ff03 	bl	80011f8 <MCP9808_SetResolution>
  pid_init(kp, ki, kd);  // tutaj inicjalizuje i nastawia się wartości PID
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <main+0x9c>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <main+0xa0>)
 80023fa:	ed93 7a00 	vldr	s14, [r3]
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <main+0xa4>)
 8002400:	edd3 6a00 	vldr	s13, [r3]
 8002404:	eeb0 1a66 	vmov.f32	s2, s13
 8002408:	eef0 0a47 	vmov.f32	s1, s14
 800240c:	eeb0 0a67 	vmov.f32	s0, s15
 8002410:	f000 f8a0 	bl	8002554 <pid_init>

  HAL_UART_Receive_IT(&huart3, received_data, 4);
 8002414:	2204      	movs	r2, #4
 8002416:	490e      	ldr	r1, [pc, #56]	; (8002450 <main+0xa8>)
 8002418:	480e      	ldr	r0, [pc, #56]	; (8002454 <main+0xac>)
 800241a:	f005 f956 	bl	80076ca <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800241e:	2100      	movs	r1, #0
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <main+0xb0>)
 8002422:	f003 ff79 	bl	8006318 <HAL_TIM_PWM_Start>

// te niżej najlepiej jak beda na koncu // tak powiedzial szef
  HAL_TIM_Base_Start_IT(&htim2);
 8002426:	480d      	ldr	r0, [pc, #52]	; (800245c <main+0xb4>)
 8002428:	f003 fea6 	bl	8006178 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800242c:	480c      	ldr	r0, [pc, #48]	; (8002460 <main+0xb8>)
 800242e:	f003 fea3 	bl	8006178 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002432:	480c      	ldr	r0, [pc, #48]	; (8002464 <main+0xbc>)
 8002434:	f003 fea0 	bl	8006178 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim12);
 8002438:	480b      	ldr	r0, [pc, #44]	; (8002468 <main+0xc0>)
 800243a:	f003 fe9d 	bl	8006178 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800243e:	e7fe      	b.n	800243e <main+0x96>
 8002440:	200006b8 	.word	0x200006b8
 8002444:	20000008 	.word	0x20000008
 8002448:	2000000c 	.word	0x2000000c
 800244c:	20000720 	.word	0x20000720
 8002450:	2000070c 	.word	0x2000070c
 8002454:	20000908 	.word	0x20000908
 8002458:	20000740 	.word	0x20000740
 800245c:	2000078c 	.word	0x2000078c
 8002460:	200007d8 	.word	0x200007d8
 8002464:	20000824 	.word	0x20000824
 8002468:	200008bc 	.word	0x200008bc

0800246c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b094      	sub	sp, #80	; 0x50
 8002470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002472:	f107 0320 	add.w	r3, r7, #32
 8002476:	2230      	movs	r2, #48	; 0x30
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f006 fb90 	bl	8008ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002490:	f002 fd00 	bl	8004e94 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <SystemClock_Config+0xd4>)
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	4a29      	ldr	r2, [pc, #164]	; (8002540 <SystemClock_Config+0xd4>)
 800249a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249e:	6413      	str	r3, [r2, #64]	; 0x40
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <SystemClock_Config+0xd4>)
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <SystemClock_Config+0xd8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a24      	ldr	r2, [pc, #144]	; (8002544 <SystemClock_Config+0xd8>)
 80024b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <SystemClock_Config+0xd8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024c4:	2301      	movs	r3, #1
 80024c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ce:	2302      	movs	r3, #2
 80024d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024d8:	2304      	movs	r3, #4
 80024da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80024dc:	23d8      	movs	r3, #216	; 0xd8
 80024de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024e0:	2302      	movs	r3, #2
 80024e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80024e4:	2309      	movs	r3, #9
 80024e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e8:	f107 0320 	add.w	r3, r7, #32
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 fd31 	bl	8004f54 <HAL_RCC_OscConfig>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80024f8:	f000 f826 	bl	8002548 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80024fc:	f002 fcda 	bl	8004eb4 <HAL_PWREx_EnableOverDrive>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002506:	f000 f81f 	bl	8002548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250a:	230f      	movs	r3, #15
 800250c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800250e:	2302      	movs	r3, #2
 8002510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002516:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800251a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800251c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002520:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	2107      	movs	r1, #7
 8002528:	4618      	mov	r0, r3
 800252a:	f002 ffb7 	bl	800549c <HAL_RCC_ClockConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002534:	f000 f808 	bl	8002548 <Error_Handler>
  }
}
 8002538:	bf00      	nop
 800253a:	3750      	adds	r7, #80	; 0x50
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000

08002548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800254c:	b672      	cpsid	i
}
 800254e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002550:	e7fe      	b.n	8002550 <Error_Handler+0x8>
	...

08002554 <pid_init>:
};

static struct pid_params pid_params;

void pid_init(float kp, float ki, float kd)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	ed87 0a03 	vstr	s0, [r7, #12]
 800255e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002562:	ed87 1a01 	vstr	s2, [r7, #4]
	pid_params.kp = kp;
 8002566:	4a0d      	ldr	r2, [pc, #52]	; (800259c <pid_init+0x48>)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6013      	str	r3, [r2, #0]
	pid_params.ki = ki;
 800256c:	4a0b      	ldr	r2, [pc, #44]	; (800259c <pid_init+0x48>)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	6053      	str	r3, [r2, #4]
	pid_params.kd = kd;
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <pid_init+0x48>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6093      	str	r3, [r2, #8]
	pid_params.err = 0;
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <pid_init+0x48>)
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	60da      	str	r2, [r3, #12]
	pid_params.err_sum = 0;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <pid_init+0x48>)
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
	pid_params.err_last = 0;
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <pid_init+0x48>)
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	20000724 	.word	0x20000724

080025a0 <pid_calculate>:

uint16_t pid_calculate(float set_val, float read_val)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80025aa:	edc7 0a00 	vstr	s1, [r7]
	float err_d, u;
	uint16_t u_ext;

	pid_params.err = set_val - read_val;
 80025ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80025b2:	edd7 7a00 	vldr	s15, [r7]
 80025b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ba:	4b38      	ldr	r3, [pc, #224]	; (800269c <pid_calculate+0xfc>)
 80025bc:	edc3 7a03 	vstr	s15, [r3, #12]
	pid_params.err_sum += pid_params.err;
 80025c0:	4b36      	ldr	r3, [pc, #216]	; (800269c <pid_calculate+0xfc>)
 80025c2:	ed93 7a04 	vldr	s14, [r3, #16]
 80025c6:	4b35      	ldr	r3, [pc, #212]	; (800269c <pid_calculate+0xfc>)
 80025c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80025cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <pid_calculate+0xfc>)
 80025d2:	edc3 7a04 	vstr	s15, [r3, #16]

	if (pid_params.err_sum > ERR_SUM_MAX) {
 80025d6:	4b31      	ldr	r3, [pc, #196]	; (800269c <pid_calculate+0xfc>)
 80025d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80025dc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80026a0 <pid_calculate+0x100>
 80025e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e8:	dd03      	ble.n	80025f2 <pid_calculate+0x52>
		pid_params.err_sum = ERR_SUM_MAX;
 80025ea:	4b2c      	ldr	r3, [pc, #176]	; (800269c <pid_calculate+0xfc>)
 80025ec:	4a2d      	ldr	r2, [pc, #180]	; (80026a4 <pid_calculate+0x104>)
 80025ee:	611a      	str	r2, [r3, #16]
 80025f0:	e00b      	b.n	800260a <pid_calculate+0x6a>
	} else if (pid_params.err_sum < 0) {
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <pid_calculate+0xfc>)
 80025f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80025f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	d503      	bpl.n	800260a <pid_calculate+0x6a>
		pid_params.err_sum = 0;
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <pid_calculate+0xfc>)
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
	}

	err_d = pid_params.err_last - pid_params.err;
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <pid_calculate+0xfc>)
 800260c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002610:	4b22      	ldr	r3, [pc, #136]	; (800269c <pid_calculate+0xfc>)
 8002612:	edd3 7a03 	vldr	s15, [r3, #12]
 8002616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800261a:	edc7 7a04 	vstr	s15, [r7, #16]
	pid_params.err_last = pid_params.err;
 800261e:	4b1f      	ldr	r3, [pc, #124]	; (800269c <pid_calculate+0xfc>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	4a1e      	ldr	r2, [pc, #120]	; (800269c <pid_calculate+0xfc>)
 8002624:	6153      	str	r3, [r2, #20]
	u = pid_params.kp * pid_params.err + pid_params.ki * pid_params.err_sum
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <pid_calculate+0xfc>)
 8002628:	ed93 7a00 	vldr	s14, [r3]
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <pid_calculate+0xfc>)
 800262e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <pid_calculate+0xfc>)
 8002638:	edd3 6a01 	vldr	s13, [r3, #4]
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <pid_calculate+0xfc>)
 800263e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002646:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid_params.kd * err_d;
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <pid_calculate+0xfc>)
 800264c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002650:	edd7 7a04 	vldr	s15, [r7, #16]
 8002654:	ee66 7aa7 	vmul.f32	s15, s13, s15
	u = pid_params.kp * pid_params.err + pid_params.ki * pid_params.err_sum
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	edc7 7a03 	vstr	s15, [r7, #12]
	u_ext = round(u);
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f7fd ff91 	bl	8000588 <__aeabi_f2d>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	ec43 2b10 	vmov	d0, r2, r3
 800266e:	f00a f935 	bl	800c8dc <round>
 8002672:	ec53 2b10 	vmov	r2, r3, d0
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	f7fe fa9f 	bl	8000bbc <__aeabi_d2uiz>
 800267e:	4603      	mov	r3, r0
 8002680:	82fb      	strh	r3, [r7, #22]
	if(u_ext>500){
 8002682:	8afb      	ldrh	r3, [r7, #22]
 8002684:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002688:	d902      	bls.n	8002690 <pid_calculate+0xf0>
		u_ext = 500;
 800268a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800268e:	82fb      	strh	r3, [r7, #22]
	}
	else if(u_ext<0){
		u_ext = 0;
	}
	return u_ext;
 8002690:	8afb      	ldrh	r3, [r7, #22]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000724 	.word	0x20000724
 80026a0:	451c4000 	.word	0x451c4000
 80026a4:	451c4000 	.word	0x451c4000

080026a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_MspInit+0x44>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <HAL_MspInit+0x44>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_MspInit+0x44>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_MspInit+0x44>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a08      	ldr	r2, [pc, #32]	; (80026ec <HAL_MspInit+0x44>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_MspInit+0x44>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <NMI_Handler+0x4>

080026f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026fa:	e7fe      	b.n	80026fa <HardFault_Handler+0x4>

080026fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <MemManage_Handler+0x4>

08002702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <BusFault_Handler+0x4>

08002708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800270c:	e7fe      	b.n	800270c <UsageFault_Handler+0x4>

0800270e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800273c:	f000 fd04 	bl	8003148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}

08002744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <TIM2_IRQHandler+0x10>)
 800274a:	f003 fedf 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000078c 	.word	0x2000078c

08002758 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <TIM3_IRQHandler+0x10>)
 800275e:	f003 fed5 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200007d8 	.word	0x200007d8

0800276c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <TIM4_IRQHandler+0x10>)
 8002772:	f003 fecb 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000824 	.word	0x20000824

08002780 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <USART3_IRQHandler+0x10>)
 8002786:	f004 ffe5 	bl	8007754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000908 	.word	0x20000908

08002794 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002798:	4803      	ldr	r0, [pc, #12]	; (80027a8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800279a:	f003 feb7 	bl	800650c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800279e:	4803      	ldr	r0, [pc, #12]	; (80027ac <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80027a0:	f003 feb4 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000870 	.word	0x20000870
 80027ac:	200008bc 	.word	0x200008bc

080027b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return 1;
 80027b4:	2301      	movs	r3, #1
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <_kill>:

int _kill(int pid, int sig)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027ca:	f006 f9b1 	bl	8008b30 <__errno>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2216      	movs	r2, #22
 80027d2:	601a      	str	r2, [r3, #0]
  return -1;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_exit>:

void _exit (int status)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ffe7 	bl	80027c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027f2:	e7fe      	b.n	80027f2 <_exit+0x12>

080027f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e00a      	b.n	800281c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002806:	f3af 8000 	nop.w
 800280a:	4601      	mov	r1, r0
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	60ba      	str	r2, [r7, #8]
 8002812:	b2ca      	uxtb	r2, r1
 8002814:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3301      	adds	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	dbf0      	blt.n	8002806 <_read+0x12>
  }

  return len;
 8002824:	687b      	ldr	r3, [r7, #4]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e009      	b.n	8002854 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	60ba      	str	r2, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3301      	adds	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	dbf1      	blt.n	8002840 <_write+0x12>
  }
  return len;
 800285c:	687b      	ldr	r3, [r7, #4]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <_close>:

int _close(int file)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288e:	605a      	str	r2, [r3, #4]
  return 0;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_isatty>:

int _isatty(int file)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d8:	4a14      	ldr	r2, [pc, #80]	; (800292c <_sbrk+0x5c>)
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <_sbrk+0x60>)
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <_sbrk+0x64>)
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <_sbrk+0x68>)
 80028f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <_sbrk+0x64>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d207      	bcs.n	8002910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002900:	f006 f916 	bl	8008b30 <__errno>
 8002904:	4603      	mov	r3, r0
 8002906:	220c      	movs	r2, #12
 8002908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	e009      	b.n	8002924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <_sbrk+0x64>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <_sbrk+0x64>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <_sbrk+0x64>)
 8002920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20050000 	.word	0x20050000
 8002930:	00000400 	.word	0x00000400
 8002934:	2000073c 	.word	0x2000073c
 8002938:	200009a8 	.word	0x200009a8

0800293c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <SystemInit+0x20>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <SystemInit+0x20>)
 8002948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800294c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b096      	sub	sp, #88	; 0x58
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002966:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002972:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
 8002980:	611a      	str	r2, [r3, #16]
 8002982:	615a      	str	r2, [r3, #20]
 8002984:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	222c      	movs	r2, #44	; 0x2c
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f006 f907 	bl	8008ba0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002992:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <MX_TIM1_Init+0x114>)
 8002994:	4a38      	ldr	r2, [pc, #224]	; (8002a78 <MX_TIM1_Init+0x118>)
 8002996:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 8002998:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <MX_TIM1_Init+0x114>)
 800299a:	226b      	movs	r2, #107	; 0x6b
 800299c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299e:	4b35      	ldr	r3, [pc, #212]	; (8002a74 <MX_TIM1_Init+0x114>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <MX_TIM1_Init+0x114>)
 80029a6:	2263      	movs	r2, #99	; 0x63
 80029a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029aa:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <MX_TIM1_Init+0x114>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029b0:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <MX_TIM1_Init+0x114>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b6:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <MX_TIM1_Init+0x114>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029bc:	482d      	ldr	r0, [pc, #180]	; (8002a74 <MX_TIM1_Init+0x114>)
 80029be:	f003 fc53 	bl	8006268 <HAL_TIM_PWM_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80029c8:	f7ff fdbe 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029cc:	2300      	movs	r3, #0
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029dc:	4619      	mov	r1, r3
 80029de:	4825      	ldr	r0, [pc, #148]	; (8002a74 <MX_TIM1_Init+0x114>)
 80029e0:	f004 fc78 	bl	80072d4 <HAL_TIMEx_MasterConfigSynchronization>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80029ea:	f7ff fdad 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ee:	2360      	movs	r3, #96	; 0x60
 80029f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f6:	2300      	movs	r3, #0
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029fa:	2300      	movs	r3, #0
 80029fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4619      	mov	r1, r3
 8002a12:	4818      	ldr	r0, [pc, #96]	; (8002a74 <MX_TIM1_Init+0x114>)
 8002a14:	f003 fe9a 	bl	800674c <HAL_TIM_PWM_ConfigChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002a1e:	f7ff fd93 	bl	8002548 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4807      	ldr	r0, [pc, #28]	; (8002a74 <MX_TIM1_Init+0x114>)
 8002a58:	f004 fcca 	bl	80073f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002a62:	f7ff fd71 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a66:	4803      	ldr	r0, [pc, #12]	; (8002a74 <MX_TIM1_Init+0x114>)
 8002a68:	f000 fa38 	bl	8002edc <HAL_TIM_MspPostInit>

}
 8002a6c:	bf00      	nop
 8002a6e:	3758      	adds	r7, #88	; 0x58
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000740 	.word	0x20000740
 8002a78:	40010000 	.word	0x40010000

08002a7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a82:	f107 0310 	add.w	r3, r7, #16
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002a9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10799;
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002aa4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002aa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002ab2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ab6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab8:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ac4:	4813      	ldr	r0, [pc, #76]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002ac6:	f003 faff 	bl	80060c8 <HAL_TIM_Base_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002ad0:	f7ff fd3a 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ada:	f107 0310 	add.w	r3, r7, #16
 8002ade:	4619      	mov	r1, r3
 8002ae0:	480c      	ldr	r0, [pc, #48]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002ae2:	f003 ff47 	bl	8006974 <HAL_TIM_ConfigClockSource>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002aec:	f7ff fd2c 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	4619      	mov	r1, r3
 8002afc:	4805      	ldr	r0, [pc, #20]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002afe:	f004 fbe9 	bl	80072d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002b08:	f7ff fd1e 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b0c:	bf00      	nop
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	2000078c 	.word	0x2000078c

08002b18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b36:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b38:	4a1e      	ldr	r2, [pc, #120]	; (8002bb4 <MX_TIM3_Init+0x9c>)
 8002b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b3e:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002b42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8002b4a:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b4c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b5e:	4814      	ldr	r0, [pc, #80]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b60:	f003 fab2 	bl	80060c8 <HAL_TIM_Base_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002b6a:	f7ff fced 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	4619      	mov	r1, r3
 8002b7a:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b7c:	f003 fefa 	bl	8006974 <HAL_TIM_ConfigClockSource>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002b86:	f7ff fcdf 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4806      	ldr	r0, [pc, #24]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b98:	f004 fb9c 	bl	80072d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002ba2:	f7ff fcd1 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200007d8 	.word	0x200007d8
 8002bb4:	40000400 	.word	0x40000400

08002bb8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <MX_TIM4_Init+0x98>)
 8002bd8:	4a1e      	ldr	r2, [pc, #120]	; (8002c54 <MX_TIM4_Init+0x9c>)
 8002bda:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10799;
 8002bdc:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <MX_TIM4_Init+0x98>)
 8002bde:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002be2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <MX_TIM4_Init+0x98>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1249;
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <MX_TIM4_Init+0x98>)
 8002bec:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002bf0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <MX_TIM4_Init+0x98>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <MX_TIM4_Init+0x98>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002bfe:	4814      	ldr	r0, [pc, #80]	; (8002c50 <MX_TIM4_Init+0x98>)
 8002c00:	f003 fa62 	bl	80060c8 <HAL_TIM_Base_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002c0a:	f7ff fc9d 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480d      	ldr	r0, [pc, #52]	; (8002c50 <MX_TIM4_Init+0x98>)
 8002c1c:	f003 feaa 	bl	8006974 <HAL_TIM_ConfigClockSource>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002c26:	f7ff fc8f 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4806      	ldr	r0, [pc, #24]	; (8002c50 <MX_TIM4_Init+0x98>)
 8002c38:	f004 fb4c 	bl	80072d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002c42:	f7ff fc81 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000824 	.word	0x20000824
 8002c54:	40000800 	.word	0x40000800

08002c58 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5e:	f107 0310 	add.w	r3, r7, #16
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <MX_TIM8_Init+0xa0>)
 8002c78:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <MX_TIM8_Init+0xa4>)
 8002c7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 107;
 8002c7c:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <MX_TIM8_Init+0xa0>)
 8002c7e:	226b      	movs	r2, #107	; 0x6b
 8002c80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <MX_TIM8_Init+0xa0>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <MX_TIM8_Init+0xa0>)
 8002c8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c8e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <MX_TIM8_Init+0xa0>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c96:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <MX_TIM8_Init+0xa0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <MX_TIM8_Init+0xa0>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002ca2:	4815      	ldr	r0, [pc, #84]	; (8002cf8 <MX_TIM8_Init+0xa0>)
 8002ca4:	f003 fa10 	bl	80060c8 <HAL_TIM_Base_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002cae:	f7ff fc4b 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002cb8:	f107 0310 	add.w	r3, r7, #16
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	480e      	ldr	r0, [pc, #56]	; (8002cf8 <MX_TIM8_Init+0xa0>)
 8002cc0:	f003 fe58 	bl	8006974 <HAL_TIM_ConfigClockSource>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002cca:	f7ff fc3d 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <MX_TIM8_Init+0xa0>)
 8002ce0:	f004 faf8 	bl	80072d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002cea:	f7ff fc2d 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002cee:	bf00      	nop
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000870 	.word	0x20000870
 8002cfc:	40010400 	.word	0x40010400

08002d00 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d06:	463b      	mov	r3, r7
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002d12:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <MX_TIM12_Init+0x6c>)
 8002d14:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <MX_TIM12_Init+0x70>)
 8002d16:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 161;
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <MX_TIM12_Init+0x6c>)
 8002d1a:	22a1      	movs	r2, #161	; 0xa1
 8002d1c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1e:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <MX_TIM12_Init+0x6c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_TIM12_Init+0x6c>)
 8002d26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d2a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <MX_TIM12_Init+0x6c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MX_TIM12_Init+0x6c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002d38:	480c      	ldr	r0, [pc, #48]	; (8002d6c <MX_TIM12_Init+0x6c>)
 8002d3a:	f003 f9c5 	bl	80060c8 <HAL_TIM_Base_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8002d44:	f7ff fc00 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002d4e:	463b      	mov	r3, r7
 8002d50:	4619      	mov	r1, r3
 8002d52:	4806      	ldr	r0, [pc, #24]	; (8002d6c <MX_TIM12_Init+0x6c>)
 8002d54:	f003 fe0e 	bl	8006974 <HAL_TIM_ConfigClockSource>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8002d5e:	f7ff fbf3 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200008bc 	.word	0x200008bc
 8002d70:	40001800 	.word	0x40001800

08002d74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <HAL_TIM_PWM_MspInit+0x38>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10b      	bne.n	8002d9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40010000 	.word	0x40010000
 8002db0:	40023800 	.word	0x40023800

08002db4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d114      	bne.n	8002df0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dc6:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a3f      	ldr	r2, [pc, #252]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	201c      	movs	r0, #28
 8002de4:	f000 fec9 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002de8:	201c      	movs	r0, #28
 8002dea:	f000 fee2 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002dee:	e066      	b.n	8002ebe <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM3)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a35      	ldr	r2, [pc, #212]	; (8002ecc <HAL_TIM_Base_MspInit+0x118>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d114      	bne.n	8002e24 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dfa:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a32      	ldr	r2, [pc, #200]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	61bb      	str	r3, [r7, #24]
 8002e10:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2100      	movs	r1, #0
 8002e16:	201d      	movs	r0, #29
 8002e18:	f000 feaf 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e1c:	201d      	movs	r0, #29
 8002e1e:	f000 fec8 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
}
 8002e22:	e04c      	b.n	8002ebe <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM4)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a29      	ldr	r2, [pc, #164]	; (8002ed0 <HAL_TIM_Base_MspInit+0x11c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d114      	bne.n	8002e58 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e2e:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a25      	ldr	r2, [pc, #148]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	201e      	movs	r0, #30
 8002e4c:	f000 fe95 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e50:	201e      	movs	r0, #30
 8002e52:	f000 feae 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
}
 8002e56:	e032      	b.n	8002ebe <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM8)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <HAL_TIM_Base_MspInit+0x120>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d114      	bne.n	8002e8c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e62:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6e:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	202b      	movs	r0, #43	; 0x2b
 8002e80:	f000 fe7b 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002e84:	202b      	movs	r0, #43	; 0x2b
 8002e86:	f000 fe94 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
}
 8002e8a:	e018      	b.n	8002ebe <HAL_TIM_Base_MspInit+0x10a>
  else if(tim_baseHandle->Instance==TIM12)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <HAL_TIM_Base_MspInit+0x124>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d113      	bne.n	8002ebe <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4a0b      	ldr	r2, [pc, #44]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_TIM_Base_MspInit+0x114>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	202b      	movs	r0, #43	; 0x2b
 8002eb4:	f000 fe61 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002eb8:	202b      	movs	r0, #43	; 0x2b
 8002eba:	f000 fe7a 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
}
 8002ebe:	bf00      	nop
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40010400 	.word	0x40010400
 8002ed8:	40001800 	.word	0x40001800

08002edc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 030c 	add.w	r3, r7, #12
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a11      	ldr	r2, [pc, #68]	; (8002f40 <HAL_TIM_MspPostInit+0x64>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d11c      	bne.n	8002f38 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_TIM_MspPostInit+0x68>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a10      	ldr	r2, [pc, #64]	; (8002f44 <HAL_TIM_MspPostInit+0x68>)
 8002f04:	f043 0310 	orr.w	r3, r3, #16
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <HAL_TIM_MspPostInit+0x68>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	4619      	mov	r1, r3
 8002f32:	4805      	ldr	r0, [pc, #20]	; (8002f48 <HAL_TIM_MspPostInit+0x6c>)
 8002f34:	f000 feea 	bl	8003d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f38:	bf00      	nop
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40021000 	.word	0x40021000

08002f4c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <MX_USART3_UART_Init+0x58>)
 8002f52:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <MX_USART3_UART_Init+0x5c>)
 8002f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f56:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <MX_USART3_UART_Init+0x58>)
 8002f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <MX_USART3_UART_Init+0x58>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f64:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <MX_USART3_UART_Init+0x58>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <MX_USART3_UART_Init+0x58>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <MX_USART3_UART_Init+0x58>)
 8002f72:	220c      	movs	r2, #12
 8002f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <MX_USART3_UART_Init+0x58>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <MX_USART3_UART_Init+0x58>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <MX_USART3_UART_Init+0x58>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <MX_USART3_UART_Init+0x58>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f8e:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <MX_USART3_UART_Init+0x58>)
 8002f90:	f004 faca 	bl	8007528 <HAL_UART_Init>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002f9a:	f7ff fad5 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000908 	.word	0x20000908
 8002fa8:	40004800 	.word	0x40004800

08002fac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0aa      	sub	sp, #168	; 0xa8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fc4:	f107 0310 	add.w	r3, r7, #16
 8002fc8:	2284      	movs	r2, #132	; 0x84
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f005 fde7 	bl	8008ba0 <memset>
  if(uartHandle->Instance==USART3)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a26      	ldr	r2, [pc, #152]	; (8003070 <HAL_UART_MspInit+0xc4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d144      	bne.n	8003066 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fe0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fe6:	f107 0310 	add.w	r3, r7, #16
 8002fea:	4618      	mov	r0, r3
 8002fec:	f002 fc7c 	bl	80058e8 <HAL_RCCEx_PeriphCLKConfig>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ff6:	f7ff faa7 	bl	8002548 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <HAL_UART_MspInit+0xc8>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <HAL_UART_MspInit+0xc8>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_UART_MspInit+0xc8>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <HAL_UART_MspInit+0xc8>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <HAL_UART_MspInit+0xc8>)
 8003018:	f043 0308 	orr.w	r3, r3, #8
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_UART_MspInit+0xc8>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800302a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800302e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003038:	2301      	movs	r3, #1
 800303a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303e:	2303      	movs	r3, #3
 8003040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003044:	2307      	movs	r3, #7
 8003046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800304a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800304e:	4619      	mov	r1, r3
 8003050:	4809      	ldr	r0, [pc, #36]	; (8003078 <HAL_UART_MspInit+0xcc>)
 8003052:	f000 fe5b 	bl	8003d0c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003056:	2200      	movs	r2, #0
 8003058:	2100      	movs	r1, #0
 800305a:	2027      	movs	r0, #39	; 0x27
 800305c:	f000 fd8d 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003060:	2027      	movs	r0, #39	; 0x27
 8003062:	f000 fda6 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003066:	bf00      	nop
 8003068:	37a8      	adds	r7, #168	; 0xa8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40004800 	.word	0x40004800
 8003074:	40023800 	.word	0x40023800
 8003078:	40020c00 	.word	0x40020c00

0800307c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800307c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003080:	480d      	ldr	r0, [pc, #52]	; (80030b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003082:	490e      	ldr	r1, [pc, #56]	; (80030bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003084:	4a0e      	ldr	r2, [pc, #56]	; (80030c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003088:	e002      	b.n	8003090 <LoopCopyDataInit>

0800308a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800308a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800308c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800308e:	3304      	adds	r3, #4

08003090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003094:	d3f9      	bcc.n	800308a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003096:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003098:	4c0b      	ldr	r4, [pc, #44]	; (80030c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800309a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800309c:	e001      	b.n	80030a2 <LoopFillZerobss>

0800309e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800309e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a0:	3204      	adds	r2, #4

080030a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030a4:	d3fb      	bcc.n	800309e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030a6:	f7ff fc49 	bl	800293c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030aa:	f005 fd47 	bl	8008b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ae:	f7ff f97b 	bl	80023a8 <main>
  bx  lr    
 80030b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80030b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030bc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80030c0:	0800d630 	.word	0x0800d630
  ldr r2, =_sbss
 80030c4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80030c8:	200009a4 	.word	0x200009a4

080030cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030cc:	e7fe      	b.n	80030cc <ADC_IRQHandler>

080030ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d2:	2003      	movs	r0, #3
 80030d4:	f000 fd46 	bl	8003b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d8:	2000      	movs	r0, #0
 80030da:	f000 f805 	bl	80030e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030de:	f7ff fae3 	bl	80026a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_InitTick+0x54>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_InitTick+0x58>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fd61 	bl	8003bce <HAL_SYSTICK_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e00e      	b.n	8003134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b0f      	cmp	r3, #15
 800311a:	d80a      	bhi.n	8003132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800311c:	2200      	movs	r2, #0
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f000 fd29 	bl	8003b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003128:	4a06      	ldr	r2, [pc, #24]	; (8003144 <HAL_InitTick+0x5c>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000010 	.word	0x20000010
 8003140:	20000018 	.word	0x20000018
 8003144:	20000014 	.word	0x20000014

08003148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_IncTick+0x20>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_IncTick+0x24>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4413      	add	r3, r2
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <HAL_IncTick+0x24>)
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000018 	.word	0x20000018
 800316c:	20000990 	.word	0x20000990

08003170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return uwTick;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_GetTick+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000990 	.word	0x20000990

08003188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff ffee 	bl	8003170 <HAL_GetTick>
 8003194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d005      	beq.n	80031ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_Delay+0x44>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031ae:	bf00      	nop
 80031b0:	f7ff ffde 	bl	8003170 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d8f7      	bhi.n	80031b0 <HAL_Delay+0x28>
  {
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000018 	.word	0x20000018

080031d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e031      	b.n	800324a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe fab4 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	d116      	bne.n	800323c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_ADC_Init+0x84>)
 8003214:	4013      	ands	r3, r2
 8003216:	f043 0202 	orr.w	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fad6 	bl	80037d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
 800323a:	e001      	b.n	8003240 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	ffffeefd 	.word	0xffffeefd

08003258 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Start+0x1a>
 800326e:	2302      	movs	r3, #2
 8003270:	e0ad      	b.n	80033ce <HAL_ADC_Start+0x176>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d018      	beq.n	80032ba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003298:	4b50      	ldr	r3, [pc, #320]	; (80033dc <HAL_ADC_Start+0x184>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a50      	ldr	r2, [pc, #320]	; (80033e0 <HAL_ADC_Start+0x188>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	0c9a      	lsrs	r2, r3, #18
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80032ac:	e002      	b.n	80032b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f9      	bne.n	80032ae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d175      	bne.n	80033b4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032cc:	4b45      	ldr	r3, [pc, #276]	; (80033e4 <HAL_ADC_Start+0x18c>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d007      	beq.n	80032f6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	d106      	bne.n	8003312 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	f023 0206 	bic.w	r2, r3, #6
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
 8003310:	e002      	b.n	8003318 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003328:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_ADC_Start+0x190>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10f      	bne.n	8003356 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d143      	bne.n	80033cc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	e03a      	b.n	80033cc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a24      	ldr	r2, [pc, #144]	; (80033ec <HAL_ADC_Start+0x194>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d10e      	bne.n	800337e <HAL_ADC_Start+0x126>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d107      	bne.n	800337e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800337c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800337e:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <HAL_ADC_Start+0x190>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d120      	bne.n	80033cc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_ADC_Start+0x198>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d11b      	bne.n	80033cc <HAL_ADC_Start+0x174>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d114      	bne.n	80033cc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	e00b      	b.n	80033cc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f043 0210 	orr.w	r2, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000010 	.word	0x20000010
 80033e0:	431bde83 	.word	0x431bde83
 80033e4:	fffff8fe 	.word	0xfffff8fe
 80033e8:	40012300 	.word	0x40012300
 80033ec:	40012000 	.word	0x40012000
 80033f0:	40012200 	.word	0x40012200

080033f4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	d113      	bne.n	800343a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800341c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003420:	d10b      	bne.n	800343a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f043 0220 	orr.w	r2, r3, #32
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e063      	b.n	8003502 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800343a:	f7ff fe99 	bl	8003170 <HAL_GetTick>
 800343e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003440:	e021      	b.n	8003486 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d01d      	beq.n	8003486 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d007      	beq.n	8003460 <HAL_ADC_PollForConversion+0x6c>
 8003450:	f7ff fe8e 	bl	8003170 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d212      	bcs.n	8003486 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d00b      	beq.n	8003486 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f043 0204 	orr.w	r2, r3, #4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e03d      	b.n	8003502 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b02      	cmp	r3, #2
 8003492:	d1d6      	bne.n	8003442 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0212 	mvn.w	r2, #18
 800349c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d123      	bne.n	8003500 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11f      	bne.n	8003500 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d111      	bne.n	8003500 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x1c>
 800353c:	2302      	movs	r3, #2
 800353e:	e136      	b.n	80037ae <HAL_ADC_ConfigChannel+0x28a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b09      	cmp	r3, #9
 800354e:	d93a      	bls.n	80035c6 <HAL_ADC_ConfigChannel+0xa2>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003558:	d035      	beq.n	80035c6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68d9      	ldr	r1, [r3, #12]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	3b1e      	subs	r3, #30
 8003570:	2207      	movs	r2, #7
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	400a      	ands	r2, r1
 800357e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a8d      	ldr	r2, [pc, #564]	; (80037bc <HAL_ADC_ConfigChannel+0x298>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68d9      	ldr	r1, [r3, #12]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	061a      	lsls	r2, r3, #24
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800359e:	e035      	b.n	800360c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68d9      	ldr	r1, [r3, #12]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	4618      	mov	r0, r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4403      	add	r3, r0
 80035b8:	3b1e      	subs	r3, #30
 80035ba:	409a      	lsls	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035c4:	e022      	b.n	800360c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6919      	ldr	r1, [r3, #16]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	2207      	movs	r2, #7
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43da      	mvns	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	400a      	ands	r2, r1
 80035e8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6919      	ldr	r1, [r3, #16]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	4603      	mov	r3, r0
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4403      	add	r3, r0
 8003602:	409a      	lsls	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b06      	cmp	r3, #6
 8003612:	d824      	bhi.n	800365e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	3b05      	subs	r3, #5
 8003626:	221f      	movs	r2, #31
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43da      	mvns	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	400a      	ands	r2, r1
 8003634:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	4618      	mov	r0, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	3b05      	subs	r3, #5
 8003650:	fa00 f203 	lsl.w	r2, r0, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	635a      	str	r2, [r3, #52]	; 0x34
 800365c:	e04c      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d824      	bhi.n	80036b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	3b23      	subs	r3, #35	; 0x23
 8003678:	221f      	movs	r2, #31
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	400a      	ands	r2, r1
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	4618      	mov	r0, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	3b23      	subs	r3, #35	; 0x23
 80036a2:	fa00 f203 	lsl.w	r2, r0, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
 80036ae:	e023      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	3b41      	subs	r3, #65	; 0x41
 80036c2:	221f      	movs	r2, #31
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43da      	mvns	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	400a      	ands	r2, r1
 80036d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	3b41      	subs	r3, #65	; 0x41
 80036ec:	fa00 f203 	lsl.w	r2, r0, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a30      	ldr	r2, [pc, #192]	; (80037c0 <HAL_ADC_ConfigChannel+0x29c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10a      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x1f4>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800370a:	d105      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003712:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003716:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <HAL_ADC_ConfigChannel+0x29c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10f      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x21e>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b12      	cmp	r3, #18
 8003728:	d10b      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800372a:	4b26      	ldr	r3, [pc, #152]	; (80037c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a25      	ldr	r2, [pc, #148]	; (80037c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003730:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003734:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003736:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4a22      	ldr	r2, [pc, #136]	; (80037c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800373c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003740:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <HAL_ADC_ConfigChannel+0x29c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d12b      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x280>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <HAL_ADC_ConfigChannel+0x298>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <HAL_ADC_ConfigChannel+0x23a>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b11      	cmp	r3, #17
 800375c:	d122      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800375e:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003764:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003768:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003770:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003774:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a10      	ldr	r2, [pc, #64]	; (80037bc <HAL_ADC_ConfigChannel+0x298>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d111      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <HAL_ADC_ConfigChannel+0x2a4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a11      	ldr	r2, [pc, #68]	; (80037cc <HAL_ADC_ConfigChannel+0x2a8>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0c9a      	lsrs	r2, r3, #18
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003796:	e002      	b.n	800379e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3b01      	subs	r3, #1
 800379c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f9      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	10000012 	.word	0x10000012
 80037c0:	40012000 	.word	0x40012000
 80037c4:	40012300 	.word	0x40012300
 80037c8:	20000010 	.word	0x20000010
 80037cc:	431bde83 	.word	0x431bde83

080037d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80037d8:	4b78      	ldr	r3, [pc, #480]	; (80039bc <ADC_Init+0x1ec>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4a77      	ldr	r2, [pc, #476]	; (80039bc <ADC_Init+0x1ec>)
 80037de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80037e2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80037e4:	4b75      	ldr	r3, [pc, #468]	; (80039bc <ADC_Init+0x1ec>)
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4973      	ldr	r1, [pc, #460]	; (80039bc <ADC_Init+0x1ec>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	021a      	lsls	r2, r3, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	4a58      	ldr	r2, [pc, #352]	; (80039c0 <ADC_Init+0x1f0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003872:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6899      	ldr	r1, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6899      	ldr	r1, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	e00f      	b.n	80038ca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0202 	bic.w	r2, r2, #2
 80038d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	005a      	lsls	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01b      	beq.n	8003930 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003906:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003916:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	3b01      	subs	r3, #1
 8003924:	035a      	lsls	r2, r3, #13
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	e007      	b.n	8003940 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	3b01      	subs	r3, #1
 800395c:	051a      	lsls	r2, r3, #20
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003982:	025a      	lsls	r2, r3, #9
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6899      	ldr	r1, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	029a      	lsls	r2, r3, #10
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40012300 	.word	0x40012300
 80039c0:	0f000001 	.word	0x0f000001

080039c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <__NVIC_SetPriorityGrouping+0x40>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039e0:	4013      	ands	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <__NVIC_SetPriorityGrouping+0x44>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039f2:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <__NVIC_SetPriorityGrouping+0x40>)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	60d3      	str	r3, [r2, #12]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	e000ed00 	.word	0xe000ed00
 8003a08:	05fa0000 	.word	0x05fa0000

08003a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <__NVIC_GetPriorityGrouping+0x18>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	f003 0307 	and.w	r3, r3, #7
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	db0b      	blt.n	8003a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	f003 021f 	and.w	r2, r3, #31
 8003a40:	4907      	ldr	r1, [pc, #28]	; (8003a60 <__NVIC_EnableIRQ+0x38>)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	2001      	movs	r0, #1
 8003a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	e000e100 	.word	0xe000e100

08003a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	6039      	str	r1, [r7, #0]
 8003a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	db0a      	blt.n	8003a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	490c      	ldr	r1, [pc, #48]	; (8003ab0 <__NVIC_SetPriority+0x4c>)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	0112      	lsls	r2, r2, #4
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	440b      	add	r3, r1
 8003a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a8c:	e00a      	b.n	8003aa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4908      	ldr	r1, [pc, #32]	; (8003ab4 <__NVIC_SetPriority+0x50>)
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	3b04      	subs	r3, #4
 8003a9c:	0112      	lsls	r2, r2, #4
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	761a      	strb	r2, [r3, #24]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000e100 	.word	0xe000e100
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f1c3 0307 	rsb	r3, r3, #7
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	bf28      	it	cs
 8003ad6:	2304      	movcs	r3, #4
 8003ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d902      	bls.n	8003ae8 <NVIC_EncodePriority+0x30>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3b03      	subs	r3, #3
 8003ae6:	e000      	b.n	8003aea <NVIC_EncodePriority+0x32>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43da      	mvns	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	401a      	ands	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b00:	f04f 31ff 	mov.w	r1, #4294967295
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	43d9      	mvns	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	4313      	orrs	r3, r2
         );
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3724      	adds	r7, #36	; 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b30:	d301      	bcc.n	8003b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b32:	2301      	movs	r3, #1
 8003b34:	e00f      	b.n	8003b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <SysTick_Config+0x40>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b3e:	210f      	movs	r1, #15
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	f7ff ff8e 	bl	8003a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <SysTick_Config+0x40>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b4e:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <SysTick_Config+0x40>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	e000e010 	.word	0xe000e010

08003b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff29 	bl	80039c4 <__NVIC_SetPriorityGrouping>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b8c:	f7ff ff3e 	bl	8003a0c <__NVIC_GetPriorityGrouping>
 8003b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	6978      	ldr	r0, [r7, #20]
 8003b98:	f7ff ff8e 	bl	8003ab8 <NVIC_EncodePriority>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff5d 	bl	8003a64 <__NVIC_SetPriority>
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ff31 	bl	8003a28 <__NVIC_EnableIRQ>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ffa2 	bl	8003b20 <SysTick_Config>
 8003bdc:	4603      	mov	r3, r0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bf4:	f7ff fabc 	bl	8003170 <HAL_GetTick>
 8003bf8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d008      	beq.n	8003c18 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2280      	movs	r2, #128	; 0x80
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e052      	b.n	8003cbe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0216 	bic.w	r2, r2, #22
 8003c26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d103      	bne.n	8003c48 <HAL_DMA_Abort+0x62>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0208 	bic.w	r2, r2, #8
 8003c56:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c68:	e013      	b.n	8003c92 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c6a:	f7ff fa81 	bl	8003170 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d90c      	bls.n	8003c92 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2203      	movs	r2, #3
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e015      	b.n	8003cbe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e4      	bne.n	8003c6a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	223f      	movs	r2, #63	; 0x3f
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e00c      	b.n	8003cfe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2205      	movs	r2, #5
 8003ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
	...

08003d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	e175      	b.n	8004018 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	f040 8164 	bne.w	8004012 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d005      	beq.n	8003d62 <HAL_GPIO_Init+0x56>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d130      	bne.n	8003dc4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d98:	2201      	movs	r2, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 0201 	and.w	r2, r3, #1
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d017      	beq.n	8003e00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	2203      	movs	r2, #3
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d123      	bne.n	8003e54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	08da      	lsrs	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3208      	adds	r2, #8
 8003e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	220f      	movs	r2, #15
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	08da      	lsrs	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3208      	adds	r2, #8
 8003e4e:	69b9      	ldr	r1, [r7, #24]
 8003e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	2203      	movs	r2, #3
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0203 	and.w	r2, r3, #3
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80be 	beq.w	8004012 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e96:	4b66      	ldr	r3, [pc, #408]	; (8004030 <HAL_GPIO_Init+0x324>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	4a65      	ldr	r2, [pc, #404]	; (8004030 <HAL_GPIO_Init+0x324>)
 8003e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea2:	4b63      	ldr	r3, [pc, #396]	; (8004030 <HAL_GPIO_Init+0x324>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003eae:	4a61      	ldr	r2, [pc, #388]	; (8004034 <HAL_GPIO_Init+0x328>)
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	089b      	lsrs	r3, r3, #2
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	220f      	movs	r2, #15
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a58      	ldr	r2, [pc, #352]	; (8004038 <HAL_GPIO_Init+0x32c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d037      	beq.n	8003f4a <HAL_GPIO_Init+0x23e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a57      	ldr	r2, [pc, #348]	; (800403c <HAL_GPIO_Init+0x330>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d031      	beq.n	8003f46 <HAL_GPIO_Init+0x23a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a56      	ldr	r2, [pc, #344]	; (8004040 <HAL_GPIO_Init+0x334>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02b      	beq.n	8003f42 <HAL_GPIO_Init+0x236>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a55      	ldr	r2, [pc, #340]	; (8004044 <HAL_GPIO_Init+0x338>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d025      	beq.n	8003f3e <HAL_GPIO_Init+0x232>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a54      	ldr	r2, [pc, #336]	; (8004048 <HAL_GPIO_Init+0x33c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01f      	beq.n	8003f3a <HAL_GPIO_Init+0x22e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a53      	ldr	r2, [pc, #332]	; (800404c <HAL_GPIO_Init+0x340>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d019      	beq.n	8003f36 <HAL_GPIO_Init+0x22a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a52      	ldr	r2, [pc, #328]	; (8004050 <HAL_GPIO_Init+0x344>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <HAL_GPIO_Init+0x226>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a51      	ldr	r2, [pc, #324]	; (8004054 <HAL_GPIO_Init+0x348>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00d      	beq.n	8003f2e <HAL_GPIO_Init+0x222>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a50      	ldr	r2, [pc, #320]	; (8004058 <HAL_GPIO_Init+0x34c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <HAL_GPIO_Init+0x21e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a4f      	ldr	r2, [pc, #316]	; (800405c <HAL_GPIO_Init+0x350>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <HAL_GPIO_Init+0x21a>
 8003f22:	2309      	movs	r3, #9
 8003f24:	e012      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f26:	230a      	movs	r3, #10
 8003f28:	e010      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	e00e      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f2e:	2307      	movs	r3, #7
 8003f30:	e00c      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f32:	2306      	movs	r3, #6
 8003f34:	e00a      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f36:	2305      	movs	r3, #5
 8003f38:	e008      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f3a:	2304      	movs	r3, #4
 8003f3c:	e006      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e004      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e002      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	f002 0203 	and.w	r2, r2, #3
 8003f52:	0092      	lsls	r2, r2, #2
 8003f54:	4093      	lsls	r3, r2
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f5c:	4935      	ldr	r1, [pc, #212]	; (8004034 <HAL_GPIO_Init+0x328>)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	3302      	adds	r3, #2
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4013      	ands	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f8e:	4a34      	ldr	r2, [pc, #208]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f94:	4b32      	ldr	r3, [pc, #200]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fb8:	4a29      	ldr	r2, [pc, #164]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fbe:	4b28      	ldr	r3, [pc, #160]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800400c:	4a14      	ldr	r2, [pc, #80]	; (8004060 <HAL_GPIO_Init+0x354>)
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3301      	adds	r3, #1
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b0f      	cmp	r3, #15
 800401c:	f67f ae86 	bls.w	8003d2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	3724      	adds	r7, #36	; 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800
 8004034:	40013800 	.word	0x40013800
 8004038:	40020000 	.word	0x40020000
 800403c:	40020400 	.word	0x40020400
 8004040:	40020800 	.word	0x40020800
 8004044:	40020c00 	.word	0x40020c00
 8004048:	40021000 	.word	0x40021000
 800404c:	40021400 	.word	0x40021400
 8004050:	40021800 	.word	0x40021800
 8004054:	40021c00 	.word	0x40021c00
 8004058:	40022000 	.word	0x40022000
 800405c:	40022400 	.word	0x40022400
 8004060:	40013c00 	.word	0x40013c00

08004064 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	887b      	ldrh	r3, [r7, #2]
 8004076:	4013      	ands	r3, r2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
 8004080:	e001      	b.n	8004086 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
 80040a0:	4613      	mov	r3, r2
 80040a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040a4:	787b      	ldrb	r3, [r7, #1]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040aa:	887a      	ldrh	r2, [r7, #2]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040b0:	e003      	b.n	80040ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040b2:	887b      	ldrh	r3, [r7, #2]
 80040b4:	041a      	lsls	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	619a      	str	r2, [r3, #24]
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e07f      	b.n	80041da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fd fd32 	bl	8001b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2224      	movs	r2, #36	; 0x24
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004118:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004128:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d107      	bne.n	8004142 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	e006      	b.n	8004150 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800414e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d104      	bne.n	8004162 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <HAL_I2C_Init+0x11c>)
 800416e:	430b      	orrs	r3, r1
 8004170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69d9      	ldr	r1, [r3, #28]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1a      	ldr	r2, [r3, #32]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	02008000 	.word	0x02008000

080041e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	461a      	mov	r2, r3
 80041f4:	460b      	mov	r3, r1
 80041f6:	817b      	strh	r3, [r7, #10]
 80041f8:	4613      	mov	r3, r2
 80041fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b20      	cmp	r3, #32
 8004206:	f040 80da 	bne.w	80043be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_I2C_Master_Transmit+0x30>
 8004214:	2302      	movs	r3, #2
 8004216:	e0d3      	b.n	80043c0 <HAL_I2C_Master_Transmit+0x1d8>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004220:	f7fe ffa6 	bl	8003170 <HAL_GetTick>
 8004224:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2319      	movs	r3, #25
 800422c:	2201      	movs	r2, #1
 800422e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fb4e 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e0be      	b.n	80043c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2221      	movs	r2, #33	; 0x21
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2210      	movs	r2, #16
 800424e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	893a      	ldrh	r2, [r7, #8]
 8004262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	2bff      	cmp	r3, #255	; 0xff
 8004272:	d90e      	bls.n	8004292 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	22ff      	movs	r2, #255	; 0xff
 8004278:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427e:	b2da      	uxtb	r2, r3
 8004280:	8979      	ldrh	r1, [r7, #10]
 8004282:	4b51      	ldr	r3, [pc, #324]	; (80043c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fd38 	bl	8004d00 <I2C_TransferConfig>
 8004290:	e06c      	b.n	800436c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	8979      	ldrh	r1, [r7, #10]
 80042a4:	4b48      	ldr	r3, [pc, #288]	; (80043c8 <HAL_I2C_Master_Transmit+0x1e0>)
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fd27 	bl	8004d00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80042b2:	e05b      	b.n	800436c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	6a39      	ldr	r1, [r7, #32]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fb4b 	bl	8004954 <I2C_WaitOnTXISFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e07b      	b.n	80043c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d034      	beq.n	800436c <HAL_I2C_Master_Transmit+0x184>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	2b00      	cmp	r3, #0
 8004308:	d130      	bne.n	800436c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	2200      	movs	r2, #0
 8004312:	2180      	movs	r1, #128	; 0x80
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fadd 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e04d      	b.n	80043c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	2bff      	cmp	r3, #255	; 0xff
 800432c:	d90e      	bls.n	800434c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	22ff      	movs	r2, #255	; 0xff
 8004332:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004338:	b2da      	uxtb	r2, r3
 800433a:	8979      	ldrh	r1, [r7, #10]
 800433c:	2300      	movs	r3, #0
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fcdb 	bl	8004d00 <I2C_TransferConfig>
 800434a:	e00f      	b.n	800436c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435a:	b2da      	uxtb	r2, r3
 800435c:	8979      	ldrh	r1, [r7, #10]
 800435e:	2300      	movs	r3, #0
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fcca 	bl	8004d00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d19e      	bne.n	80042b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	6a39      	ldr	r1, [r7, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fb2a 	bl	80049d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e01a      	b.n	80043c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2220      	movs	r2, #32
 8004390:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_I2C_Master_Transmit+0x1e4>)
 800439e:	400b      	ands	r3, r1
 80043a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e000      	b.n	80043c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80043be:	2302      	movs	r3, #2
  }
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	80002000 	.word	0x80002000
 80043cc:	fe00e800 	.word	0xfe00e800

080043d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	461a      	mov	r2, r3
 80043dc:	460b      	mov	r3, r1
 80043de:	817b      	strh	r3, [r7, #10]
 80043e0:	4613      	mov	r3, r2
 80043e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	f040 80db 	bne.w	80045a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_I2C_Master_Receive+0x30>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e0d4      	b.n	80045aa <HAL_I2C_Master_Receive+0x1da>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004408:	f7fe feb2 	bl	8003170 <HAL_GetTick>
 800440c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	2319      	movs	r3, #25
 8004414:	2201      	movs	r2, #1
 8004416:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fa5a 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e0bf      	b.n	80045aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2222      	movs	r2, #34	; 0x22
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2210      	movs	r2, #16
 8004436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	893a      	ldrh	r2, [r7, #8]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	2bff      	cmp	r3, #255	; 0xff
 800445a:	d90e      	bls.n	800447a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	22ff      	movs	r2, #255	; 0xff
 8004460:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004466:	b2da      	uxtb	r2, r3
 8004468:	8979      	ldrh	r1, [r7, #10]
 800446a:	4b52      	ldr	r3, [pc, #328]	; (80045b4 <HAL_I2C_Master_Receive+0x1e4>)
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fc44 	bl	8004d00 <I2C_TransferConfig>
 8004478:	e06d      	b.n	8004556 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004488:	b2da      	uxtb	r2, r3
 800448a:	8979      	ldrh	r1, [r7, #10]
 800448c:	4b49      	ldr	r3, [pc, #292]	; (80045b4 <HAL_I2C_Master_Receive+0x1e4>)
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fc33 	bl	8004d00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800449a:	e05c      	b.n	8004556 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	6a39      	ldr	r1, [r7, #32]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fad3 	bl	8004a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e07c      	b.n	80045aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d034      	beq.n	8004556 <HAL_I2C_Master_Receive+0x186>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d130      	bne.n	8004556 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	2200      	movs	r2, #0
 80044fc:	2180      	movs	r1, #128	; 0x80
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f9e8 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e04d      	b.n	80045aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	2bff      	cmp	r3, #255	; 0xff
 8004516:	d90e      	bls.n	8004536 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	22ff      	movs	r2, #255	; 0xff
 800451c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004522:	b2da      	uxtb	r2, r3
 8004524:	8979      	ldrh	r1, [r7, #10]
 8004526:	2300      	movs	r3, #0
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fbe6 	bl	8004d00 <I2C_TransferConfig>
 8004534:	e00f      	b.n	8004556 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	b2da      	uxtb	r2, r3
 8004546:	8979      	ldrh	r1, [r7, #10]
 8004548:	2300      	movs	r3, #0
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fbd5 	bl	8004d00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d19d      	bne.n	800449c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	6a39      	ldr	r1, [r7, #32]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fa35 	bl	80049d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e01a      	b.n	80045aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2220      	movs	r2, #32
 800457a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6859      	ldr	r1, [r3, #4]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <HAL_I2C_Master_Receive+0x1e8>)
 8004588:	400b      	ands	r3, r1
 800458a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
  }
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	80002400 	.word	0x80002400
 80045b8:	fe00e800 	.word	0xfe00e800

080045bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	817b      	strh	r3, [r7, #10]
 80045ce:	460b      	mov	r3, r1
 80045d0:	813b      	strh	r3, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b20      	cmp	r3, #32
 80045e0:	f040 80f9 	bne.w	80047d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_I2C_Mem_Write+0x34>
 80045ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d105      	bne.n	80045fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0ed      	b.n	80047d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_I2C_Mem_Write+0x4e>
 8004606:	2302      	movs	r3, #2
 8004608:	e0e6      	b.n	80047d8 <HAL_I2C_Mem_Write+0x21c>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004612:	f7fe fdad 	bl	8003170 <HAL_GetTick>
 8004616:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2319      	movs	r3, #25
 800461e:	2201      	movs	r2, #1
 8004620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f955 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0d1      	b.n	80047d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2221      	movs	r2, #33	; 0x21
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2240      	movs	r2, #64	; 0x40
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800465c:	88f8      	ldrh	r0, [r7, #6]
 800465e:	893a      	ldrh	r2, [r7, #8]
 8004660:	8979      	ldrh	r1, [r7, #10]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	4603      	mov	r3, r0
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f8b9 	bl	80047e4 <I2C_RequestMemoryWrite>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0a9      	b.n	80047d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	2bff      	cmp	r3, #255	; 0xff
 800468c:	d90e      	bls.n	80046ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	22ff      	movs	r2, #255	; 0xff
 8004692:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	b2da      	uxtb	r2, r3
 800469a:	8979      	ldrh	r1, [r7, #10]
 800469c:	2300      	movs	r3, #0
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fb2b 	bl	8004d00 <I2C_TransferConfig>
 80046aa:	e00f      	b.n	80046cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	8979      	ldrh	r1, [r7, #10]
 80046be:	2300      	movs	r3, #0
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fb1a 	bl	8004d00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f93f 	bl	8004954 <I2C_WaitOnTXISFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e07b      	b.n	80047d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d034      	beq.n	8004784 <HAL_I2C_Mem_Write+0x1c8>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d130      	bne.n	8004784 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	2200      	movs	r2, #0
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f8d1 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e04d      	b.n	80047d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2bff      	cmp	r3, #255	; 0xff
 8004744:	d90e      	bls.n	8004764 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	22ff      	movs	r2, #255	; 0xff
 800474a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	b2da      	uxtb	r2, r3
 8004752:	8979      	ldrh	r1, [r7, #10]
 8004754:	2300      	movs	r3, #0
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 facf 	bl	8004d00 <I2C_TransferConfig>
 8004762:	e00f      	b.n	8004784 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	b2da      	uxtb	r2, r3
 8004774:	8979      	ldrh	r1, [r7, #10]
 8004776:	2300      	movs	r3, #0
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fabe 	bl	8004d00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d19e      	bne.n	80046cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f91e 	bl	80049d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e01a      	b.n	80047d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2220      	movs	r2, #32
 80047a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <HAL_I2C_Mem_Write+0x224>)
 80047b6:	400b      	ands	r3, r1
 80047b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e000      	b.n	80047d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
  }
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	fe00e800 	.word	0xfe00e800

080047e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	4608      	mov	r0, r1
 80047ee:	4611      	mov	r1, r2
 80047f0:	461a      	mov	r2, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	817b      	strh	r3, [r7, #10]
 80047f6:	460b      	mov	r3, r1
 80047f8:	813b      	strh	r3, [r7, #8]
 80047fa:	4613      	mov	r3, r2
 80047fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	8979      	ldrh	r1, [r7, #10]
 8004804:	4b20      	ldr	r3, [pc, #128]	; (8004888 <I2C_RequestMemoryWrite+0xa4>)
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 fa77 	bl	8004d00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	69b9      	ldr	r1, [r7, #24]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f89c 	bl	8004954 <I2C_WaitOnTXISFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e02c      	b.n	8004880 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d105      	bne.n	8004838 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800482c:	893b      	ldrh	r3, [r7, #8]
 800482e:	b2da      	uxtb	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
 8004836:	e015      	b.n	8004864 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004838:	893b      	ldrh	r3, [r7, #8]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	b29b      	uxth	r3, r3
 800483e:	b2da      	uxtb	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	69b9      	ldr	r1, [r7, #24]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f882 	bl	8004954 <I2C_WaitOnTXISFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e012      	b.n	8004880 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800485a:	893b      	ldrh	r3, [r7, #8]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2200      	movs	r2, #0
 800486c:	2180      	movs	r1, #128	; 0x80
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f830 	bl	80048d4 <I2C_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	80002000 	.word	0x80002000

0800488c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d103      	bne.n	80048aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2200      	movs	r2, #0
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d007      	beq.n	80048c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	619a      	str	r2, [r3, #24]
  }
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048e4:	e022      	b.n	800492c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d01e      	beq.n	800492c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ee:	f7fe fc3f 	bl	8003170 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d113      	bne.n	800492c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	f043 0220 	orr.w	r2, r3, #32
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e00f      	b.n	800494c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4013      	ands	r3, r2
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	429a      	cmp	r2, r3
 800493a:	bf0c      	ite	eq
 800493c:	2301      	moveq	r3, #1
 800493e:	2300      	movne	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	429a      	cmp	r2, r3
 8004948:	d0cd      	beq.n	80048e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004960:	e02c      	b.n	80049bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f8ea 	bl	8004b40 <I2C_IsErrorOccurred>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e02a      	b.n	80049cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d01e      	beq.n	80049bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497e:	f7fe fbf7 	bl	8003170 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	429a      	cmp	r2, r3
 800498c:	d302      	bcc.n	8004994 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d113      	bne.n	80049bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004998:	f043 0220 	orr.w	r2, r3, #32
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e007      	b.n	80049cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d1cb      	bne.n	8004962 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049e0:	e028      	b.n	8004a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f8aa 	bl	8004b40 <I2C_IsErrorOccurred>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e026      	b.n	8004a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f6:	f7fe fbbb 	bl	8003170 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d113      	bne.n	8004a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a10:	f043 0220 	orr.w	r2, r3, #32
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e007      	b.n	8004a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d1cf      	bne.n	80049e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a58:	e064      	b.n	8004b24 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f86e 	bl	8004b40 <I2C_IsErrorOccurred>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e062      	b.n	8004b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d138      	bne.n	8004aee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d105      	bne.n	8004a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e04e      	b.n	8004b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d107      	bne.n	8004ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2210      	movs	r2, #16
 8004aaa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ab2:	e002      	b.n	8004aba <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004ace:	400b      	ands	r3, r1
 8004ad0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e022      	b.n	8004b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aee:	f7fe fb3f 	bl	8003170 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10f      	bne.n	8004b24 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e007      	b.n	8004b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d193      	bne.n	8004a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	fe00e800 	.word	0xfe00e800

08004b40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d068      	beq.n	8004c3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2210      	movs	r2, #16
 8004b72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b74:	e049      	b.n	8004c0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d045      	beq.n	8004c0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7fe faf7 	bl	8003170 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <I2C_IsErrorOccurred+0x54>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d13a      	bne.n	8004c0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ba6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb6:	d121      	bne.n	8004bfc <I2C_IsErrorOccurred+0xbc>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bbe:	d01d      	beq.n	8004bfc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d01a      	beq.n	8004bfc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004bd6:	f7fe facb 	bl	8003170 <HAL_GetTick>
 8004bda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bdc:	e00e      	b.n	8004bfc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004bde:	f7fe fac7 	bl	8003170 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b19      	cmp	r3, #25
 8004bea:	d907      	bls.n	8004bfc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	f043 0320 	orr.w	r3, r3, #32
 8004bf2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004bfa:	e006      	b.n	8004c0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d1e9      	bne.n	8004bde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d003      	beq.n	8004c20 <I2C_IsErrorOccurred+0xe0>
 8004c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0aa      	beq.n	8004b76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	f043 0304 	orr.w	r3, r3, #4
 8004c36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00b      	beq.n	8004c68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f043 0308 	orr.w	r3, r3, #8
 8004c78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00b      	beq.n	8004cac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	f043 0302 	orr.w	r3, r3, #2
 8004c9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ca4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01c      	beq.n	8004cee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7ff fde9 	bl	800488c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <I2C_IsErrorOccurred+0x1bc>)
 8004cc6:	400b      	ands	r3, r1
 8004cc8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3728      	adds	r7, #40	; 0x28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	fe00e800 	.word	0xfe00e800

08004d00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	817b      	strh	r3, [r7, #10]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d12:	897b      	ldrh	r3, [r7, #10]
 8004d14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d18:	7a7b      	ldrb	r3, [r7, #9]
 8004d1a:	041b      	lsls	r3, r3, #16
 8004d1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	0d5b      	lsrs	r3, r3, #21
 8004d3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004d3e:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <I2C_TransferConfig+0x60>)
 8004d40:	430b      	orrs	r3, r1
 8004d42:	43db      	mvns	r3, r3
 8004d44:	ea02 0103 	and.w	r1, r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	03ff63ff 	.word	0x03ff63ff

08004d64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d138      	bne.n	8004dec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e032      	b.n	8004dee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2224      	movs	r2, #36	; 0x24
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004db6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6819      	ldr	r1, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d139      	bne.n	8004e84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e033      	b.n	8004e86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2224      	movs	r2, #36	; 0x24
 8004e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0201 	bic.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e98:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea2:	6013      	str	r3, [r2, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40007000 	.word	0x40007000

08004eb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ebe:	4b23      	ldr	r3, [pc, #140]	; (8004f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	4a22      	ldr	r2, [pc, #136]	; (8004f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eca:	4b20      	ldr	r3, [pc, #128]	; (8004f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ed6:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ee2:	f7fe f945 	bl	8003170 <HAL_GetTick>
 8004ee6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ee8:	e009      	b.n	8004efe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004eea:	f7fe f941 	bl	8003170 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef8:	d901      	bls.n	8004efe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e022      	b.n	8004f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004efe:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0a:	d1ee      	bne.n	8004eea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f0c:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0f      	ldr	r2, [pc, #60]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f18:	f7fe f92a 	bl	8003170 <HAL_GetTick>
 8004f1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f1e:	e009      	b.n	8004f34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f20:	f7fe f926 	bl	8003170 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f2e:	d901      	bls.n	8004f34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e007      	b.n	8004f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f34:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f40:	d1ee      	bne.n	8004f20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40007000 	.word	0x40007000

08004f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e291      	b.n	800548e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 8087 	beq.w	8005086 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f78:	4b96      	ldr	r3, [pc, #600]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 030c 	and.w	r3, r3, #12
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d00c      	beq.n	8004f9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f84:	4b93      	ldr	r3, [pc, #588]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d112      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x62>
 8004f90:	4b90      	ldr	r3, [pc, #576]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f9c:	d10b      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f9e:	4b8d      	ldr	r3, [pc, #564]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d06c      	beq.n	8005084 <HAL_RCC_OscConfig+0x130>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d168      	bne.n	8005084 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e26b      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbe:	d106      	bne.n	8004fce <HAL_RCC_OscConfig+0x7a>
 8004fc0:	4b84      	ldr	r3, [pc, #528]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a83      	ldr	r2, [pc, #524]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e02e      	b.n	800502c <HAL_RCC_OscConfig+0xd8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x9c>
 8004fd6:	4b7f      	ldr	r3, [pc, #508]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a7e      	ldr	r2, [pc, #504]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8004fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	4b7c      	ldr	r3, [pc, #496]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a7b      	ldr	r2, [pc, #492]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8004fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e01d      	b.n	800502c <HAL_RCC_OscConfig+0xd8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCC_OscConfig+0xc0>
 8004ffa:	4b76      	ldr	r3, [pc, #472]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a75      	ldr	r2, [pc, #468]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b73      	ldr	r3, [pc, #460]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a72      	ldr	r2, [pc, #456]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 800500c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	e00b      	b.n	800502c <HAL_RCC_OscConfig+0xd8>
 8005014:	4b6f      	ldr	r3, [pc, #444]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a6e      	ldr	r2, [pc, #440]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 800501a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	4b6c      	ldr	r3, [pc, #432]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a6b      	ldr	r2, [pc, #428]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d013      	beq.n	800505c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fe f89c 	bl	8003170 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800503c:	f7fe f898 	bl	8003170 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	; 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e21f      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504e:	4b61      	ldr	r3, [pc, #388]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0xe8>
 800505a:	e014      	b.n	8005086 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fe f888 	bl	8003170 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005064:	f7fe f884 	bl	8003170 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	; 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e20b      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005076:	4b57      	ldr	r3, [pc, #348]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x110>
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d069      	beq.n	8005166 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005092:	4b50      	ldr	r3, [pc, #320]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800509e:	4b4d      	ldr	r3, [pc, #308]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d11c      	bne.n	80050e4 <HAL_RCC_OscConfig+0x190>
 80050aa:	4b4a      	ldr	r3, [pc, #296]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d116      	bne.n	80050e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b6:	4b47      	ldr	r3, [pc, #284]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_RCC_OscConfig+0x17a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d001      	beq.n	80050ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e1df      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ce:	4b41      	ldr	r3, [pc, #260]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	493d      	ldr	r1, [pc, #244]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e2:	e040      	b.n	8005166 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d023      	beq.n	8005134 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ec:	4b39      	ldr	r3, [pc, #228]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a38      	ldr	r2, [pc, #224]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fe f83a 	bl	8003170 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005100:	f7fe f836 	bl	8003170 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e1bd      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005112:	4b30      	ldr	r3, [pc, #192]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f0      	beq.n	8005100 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511e:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4929      	ldr	r1, [pc, #164]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 800512e:	4313      	orrs	r3, r2
 8005130:	600b      	str	r3, [r1, #0]
 8005132:	e018      	b.n	8005166 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005134:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a26      	ldr	r2, [pc, #152]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 800513a:	f023 0301 	bic.w	r3, r3, #1
 800513e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005140:	f7fe f816 	bl	8003170 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005148:	f7fe f812 	bl	8003170 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e199      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515a:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d038      	beq.n	80051e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d019      	beq.n	80051ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517a:	4b16      	ldr	r3, [pc, #88]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 800517c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517e:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005186:	f7fd fff3 	bl	8003170 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518e:	f7fd ffef 	bl	8003170 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e176      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a0:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 80051a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x23a>
 80051ac:	e01a      	b.n	80051e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 80051b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b2:	4a08      	ldr	r2, [pc, #32]	; (80051d4 <HAL_RCC_OscConfig+0x280>)
 80051b4:	f023 0301 	bic.w	r3, r3, #1
 80051b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ba:	f7fd ffd9 	bl	8003170 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c0:	e00a      	b.n	80051d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c2:	f7fd ffd5 	bl	8003170 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d903      	bls.n	80051d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e15c      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
 80051d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d8:	4b91      	ldr	r3, [pc, #580]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80051da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ee      	bne.n	80051c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80a4 	beq.w	800533a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f2:	4b8b      	ldr	r3, [pc, #556]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10d      	bne.n	800521a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fe:	4b88      	ldr	r3, [pc, #544]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	4a87      	ldr	r2, [pc, #540]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005208:	6413      	str	r3, [r2, #64]	; 0x40
 800520a:	4b85      	ldr	r3, [pc, #532]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800521a:	4b82      	ldr	r3, [pc, #520]	; (8005424 <HAL_RCC_OscConfig+0x4d0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d118      	bne.n	8005258 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005226:	4b7f      	ldr	r3, [pc, #508]	; (8005424 <HAL_RCC_OscConfig+0x4d0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a7e      	ldr	r2, [pc, #504]	; (8005424 <HAL_RCC_OscConfig+0x4d0>)
 800522c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005232:	f7fd ff9d 	bl	8003170 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523a:	f7fd ff99 	bl	8003170 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b64      	cmp	r3, #100	; 0x64
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e120      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800524c:	4b75      	ldr	r3, [pc, #468]	; (8005424 <HAL_RCC_OscConfig+0x4d0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d106      	bne.n	800526e <HAL_RCC_OscConfig+0x31a>
 8005260:	4b6f      	ldr	r3, [pc, #444]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005264:	4a6e      	ldr	r2, [pc, #440]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	6713      	str	r3, [r2, #112]	; 0x70
 800526c:	e02d      	b.n	80052ca <HAL_RCC_OscConfig+0x376>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10c      	bne.n	8005290 <HAL_RCC_OscConfig+0x33c>
 8005276:	4b6a      	ldr	r3, [pc, #424]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527a:	4a69      	ldr	r2, [pc, #420]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	6713      	str	r3, [r2, #112]	; 0x70
 8005282:	4b67      	ldr	r3, [pc, #412]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005286:	4a66      	ldr	r2, [pc, #408]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005288:	f023 0304 	bic.w	r3, r3, #4
 800528c:	6713      	str	r3, [r2, #112]	; 0x70
 800528e:	e01c      	b.n	80052ca <HAL_RCC_OscConfig+0x376>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b05      	cmp	r3, #5
 8005296:	d10c      	bne.n	80052b2 <HAL_RCC_OscConfig+0x35e>
 8005298:	4b61      	ldr	r3, [pc, #388]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 800529a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529c:	4a60      	ldr	r2, [pc, #384]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	6713      	str	r3, [r2, #112]	; 0x70
 80052a4:	4b5e      	ldr	r3, [pc, #376]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	4a5d      	ldr	r2, [pc, #372]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80052aa:	f043 0301 	orr.w	r3, r3, #1
 80052ae:	6713      	str	r3, [r2, #112]	; 0x70
 80052b0:	e00b      	b.n	80052ca <HAL_RCC_OscConfig+0x376>
 80052b2:	4b5b      	ldr	r3, [pc, #364]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	4a5a      	ldr	r2, [pc, #360]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	6713      	str	r3, [r2, #112]	; 0x70
 80052be:	4b58      	ldr	r3, [pc, #352]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	4a57      	ldr	r2, [pc, #348]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d015      	beq.n	80052fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d2:	f7fd ff4d 	bl	8003170 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7fd ff49 	bl	8003170 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e0ce      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f0:	4b4b      	ldr	r3, [pc, #300]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ee      	beq.n	80052da <HAL_RCC_OscConfig+0x386>
 80052fc:	e014      	b.n	8005328 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fe:	f7fd ff37 	bl	8003170 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005304:	e00a      	b.n	800531c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005306:	f7fd ff33 	bl	8003170 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f241 3288 	movw	r2, #5000	; 0x1388
 8005314:	4293      	cmp	r3, r2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e0b8      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800531c:	4b40      	ldr	r3, [pc, #256]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ee      	bne.n	8005306 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d105      	bne.n	800533a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532e:	4b3c      	ldr	r3, [pc, #240]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	4a3b      	ldr	r2, [pc, #236]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 80a4 	beq.w	800548c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005344:	4b36      	ldr	r3, [pc, #216]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 030c 	and.w	r3, r3, #12
 800534c:	2b08      	cmp	r3, #8
 800534e:	d06b      	beq.n	8005428 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d149      	bne.n	80053ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005358:	4b31      	ldr	r3, [pc, #196]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a30      	ldr	r2, [pc, #192]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 800535e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fd ff04 	bl	8003170 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536c:	f7fd ff00 	bl	8003170 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e087      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537e:	4b28      	ldr	r3, [pc, #160]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69da      	ldr	r2, [r3, #28]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	019b      	lsls	r3, r3, #6
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	3b01      	subs	r3, #1
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	061b      	lsls	r3, r3, #24
 80053ae:	4313      	orrs	r3, r2
 80053b0:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80053b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80053be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c4:	f7fd fed4 	bl	8003170 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053cc:	f7fd fed0 	bl	8003170 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e057      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053de:	4b10      	ldr	r3, [pc, #64]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f0      	beq.n	80053cc <HAL_RCC_OscConfig+0x478>
 80053ea:	e04f      	b.n	800548c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ec:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0b      	ldr	r2, [pc, #44]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 80053f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f8:	f7fd feba 	bl	8003170 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005400:	f7fd feb6 	bl	8003170 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e03d      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	4b03      	ldr	r3, [pc, #12]	; (8005420 <HAL_RCC_OscConfig+0x4cc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0x4ac>
 800541e:	e035      	b.n	800548c <HAL_RCC_OscConfig+0x538>
 8005420:	40023800 	.word	0x40023800
 8005424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005428:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <HAL_RCC_OscConfig+0x544>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d028      	beq.n	8005488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d121      	bne.n	8005488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d11a      	bne.n	8005488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005458:	4013      	ands	r3, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800545e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005460:	4293      	cmp	r3, r2
 8005462:	d111      	bne.n	8005488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	3b01      	subs	r3, #1
 8005472:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d107      	bne.n	8005488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40023800 	.word	0x40023800

0800549c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0d0      	b.n	8005656 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054b4:	4b6a      	ldr	r3, [pc, #424]	; (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d910      	bls.n	80054e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c2:	4b67      	ldr	r3, [pc, #412]	; (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 020f 	bic.w	r2, r3, #15
 80054ca:	4965      	ldr	r1, [pc, #404]	; (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d2:	4b63      	ldr	r3, [pc, #396]	; (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d001      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0b8      	b.n	8005656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d020      	beq.n	8005532 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054fc:	4b59      	ldr	r3, [pc, #356]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	4a58      	ldr	r2, [pc, #352]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005506:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005514:	4b53      	ldr	r3, [pc, #332]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	4a52      	ldr	r2, [pc, #328]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 800551a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800551e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005520:	4b50      	ldr	r3, [pc, #320]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	494d      	ldr	r1, [pc, #308]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 800552e:	4313      	orrs	r3, r2
 8005530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d040      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d107      	bne.n	8005556 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005546:	4b47      	ldr	r3, [pc, #284]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d115      	bne.n	800557e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e07f      	b.n	8005656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d107      	bne.n	800556e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555e:	4b41      	ldr	r3, [pc, #260]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e073      	b.n	8005656 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556e:	4b3d      	ldr	r3, [pc, #244]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e06b      	b.n	8005656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800557e:	4b39      	ldr	r3, [pc, #228]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f023 0203 	bic.w	r2, r3, #3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4936      	ldr	r1, [pc, #216]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 800558c:	4313      	orrs	r3, r2
 800558e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005590:	f7fd fdee 	bl	8003170 <HAL_GetTick>
 8005594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005596:	e00a      	b.n	80055ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005598:	f7fd fdea 	bl	8003170 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e053      	b.n	8005656 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ae:	4b2d      	ldr	r3, [pc, #180]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 020c 	and.w	r2, r3, #12
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	429a      	cmp	r2, r3
 80055be:	d1eb      	bne.n	8005598 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055c0:	4b27      	ldr	r3, [pc, #156]	; (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d210      	bcs.n	80055f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ce:	4b24      	ldr	r3, [pc, #144]	; (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f023 020f 	bic.w	r2, r3, #15
 80055d6:	4922      	ldr	r1, [pc, #136]	; (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	4313      	orrs	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055de:	4b20      	ldr	r3, [pc, #128]	; (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e032      	b.n	8005656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055fc:	4b19      	ldr	r3, [pc, #100]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4916      	ldr	r1, [pc, #88]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 800560a:	4313      	orrs	r3, r2
 800560c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d009      	beq.n	800562e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800561a:	4b12      	ldr	r3, [pc, #72]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	490e      	ldr	r1, [pc, #56]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 800562a:	4313      	orrs	r3, r2
 800562c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800562e:	f000 f821 	bl	8005674 <HAL_RCC_GetSysClockFreq>
 8005632:	4602      	mov	r2, r0
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	490a      	ldr	r1, [pc, #40]	; (8005668 <HAL_RCC_ClockConfig+0x1cc>)
 8005640:	5ccb      	ldrb	r3, [r1, r3]
 8005642:	fa22 f303 	lsr.w	r3, r2, r3
 8005646:	4a09      	ldr	r2, [pc, #36]	; (800566c <HAL_RCC_ClockConfig+0x1d0>)
 8005648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800564a:	4b09      	ldr	r3, [pc, #36]	; (8005670 <HAL_RCC_ClockConfig+0x1d4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7fd fd4a 	bl	80030e8 <HAL_InitTick>

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	40023c00 	.word	0x40023c00
 8005664:	40023800 	.word	0x40023800
 8005668:	0800d174 	.word	0x0800d174
 800566c:	20000010 	.word	0x20000010
 8005670:	20000014 	.word	0x20000014

08005674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005678:	b094      	sub	sp, #80	; 0x50
 800567a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800567c:	2300      	movs	r3, #0
 800567e:	647b      	str	r3, [r7, #68]	; 0x44
 8005680:	2300      	movs	r3, #0
 8005682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005684:	2300      	movs	r3, #0
 8005686:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800568c:	4b79      	ldr	r3, [pc, #484]	; (8005874 <HAL_RCC_GetSysClockFreq+0x200>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 030c 	and.w	r3, r3, #12
 8005694:	2b08      	cmp	r3, #8
 8005696:	d00d      	beq.n	80056b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005698:	2b08      	cmp	r3, #8
 800569a:	f200 80e1 	bhi.w	8005860 <HAL_RCC_GetSysClockFreq+0x1ec>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0x34>
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d003      	beq.n	80056ae <HAL_RCC_GetSysClockFreq+0x3a>
 80056a6:	e0db      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056a8:	4b73      	ldr	r3, [pc, #460]	; (8005878 <HAL_RCC_GetSysClockFreq+0x204>)
 80056aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056ac:	e0db      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056ae:	4b73      	ldr	r3, [pc, #460]	; (800587c <HAL_RCC_GetSysClockFreq+0x208>)
 80056b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056b2:	e0d8      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056b4:	4b6f      	ldr	r3, [pc, #444]	; (8005874 <HAL_RCC_GetSysClockFreq+0x200>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056bc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80056be:	4b6d      	ldr	r3, [pc, #436]	; (8005874 <HAL_RCC_GetSysClockFreq+0x200>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d063      	beq.n	8005792 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ca:	4b6a      	ldr	r3, [pc, #424]	; (8005874 <HAL_RCC_GetSysClockFreq+0x200>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	099b      	lsrs	r3, r3, #6
 80056d0:	2200      	movs	r2, #0
 80056d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80056d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
 80056de:	2300      	movs	r3, #0
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
 80056e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056e6:	4622      	mov	r2, r4
 80056e8:	462b      	mov	r3, r5
 80056ea:	f04f 0000 	mov.w	r0, #0
 80056ee:	f04f 0100 	mov.w	r1, #0
 80056f2:	0159      	lsls	r1, r3, #5
 80056f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056f8:	0150      	lsls	r0, r2, #5
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4621      	mov	r1, r4
 8005700:	1a51      	subs	r1, r2, r1
 8005702:	6139      	str	r1, [r7, #16]
 8005704:	4629      	mov	r1, r5
 8005706:	eb63 0301 	sbc.w	r3, r3, r1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005718:	4659      	mov	r1, fp
 800571a:	018b      	lsls	r3, r1, #6
 800571c:	4651      	mov	r1, sl
 800571e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005722:	4651      	mov	r1, sl
 8005724:	018a      	lsls	r2, r1, #6
 8005726:	4651      	mov	r1, sl
 8005728:	ebb2 0801 	subs.w	r8, r2, r1
 800572c:	4659      	mov	r1, fp
 800572e:	eb63 0901 	sbc.w	r9, r3, r1
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800573e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005746:	4690      	mov	r8, r2
 8005748:	4699      	mov	r9, r3
 800574a:	4623      	mov	r3, r4
 800574c:	eb18 0303 	adds.w	r3, r8, r3
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	462b      	mov	r3, r5
 8005754:	eb49 0303 	adc.w	r3, r9, r3
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005766:	4629      	mov	r1, r5
 8005768:	024b      	lsls	r3, r1, #9
 800576a:	4621      	mov	r1, r4
 800576c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005770:	4621      	mov	r1, r4
 8005772:	024a      	lsls	r2, r1, #9
 8005774:	4610      	mov	r0, r2
 8005776:	4619      	mov	r1, r3
 8005778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577a:	2200      	movs	r2, #0
 800577c:	62bb      	str	r3, [r7, #40]	; 0x28
 800577e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005784:	f7fb fa8a 	bl	8000c9c <__aeabi_uldivmod>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4613      	mov	r3, r2
 800578e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005790:	e058      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005792:	4b38      	ldr	r3, [pc, #224]	; (8005874 <HAL_RCC_GetSysClockFreq+0x200>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	099b      	lsrs	r3, r3, #6
 8005798:	2200      	movs	r2, #0
 800579a:	4618      	mov	r0, r3
 800579c:	4611      	mov	r1, r2
 800579e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057a2:	623b      	str	r3, [r7, #32]
 80057a4:	2300      	movs	r3, #0
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
 80057a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	f04f 0000 	mov.w	r0, #0
 80057b4:	f04f 0100 	mov.w	r1, #0
 80057b8:	0159      	lsls	r1, r3, #5
 80057ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057be:	0150      	lsls	r0, r2, #5
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4641      	mov	r1, r8
 80057c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80057ca:	4649      	mov	r1, r9
 80057cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057e4:	ebb2 040a 	subs.w	r4, r2, sl
 80057e8:	eb63 050b 	sbc.w	r5, r3, fp
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	00eb      	lsls	r3, r5, #3
 80057f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057fa:	00e2      	lsls	r2, r4, #3
 80057fc:	4614      	mov	r4, r2
 80057fe:	461d      	mov	r5, r3
 8005800:	4643      	mov	r3, r8
 8005802:	18e3      	adds	r3, r4, r3
 8005804:	603b      	str	r3, [r7, #0]
 8005806:	464b      	mov	r3, r9
 8005808:	eb45 0303 	adc.w	r3, r5, r3
 800580c:	607b      	str	r3, [r7, #4]
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800581a:	4629      	mov	r1, r5
 800581c:	028b      	lsls	r3, r1, #10
 800581e:	4621      	mov	r1, r4
 8005820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005824:	4621      	mov	r1, r4
 8005826:	028a      	lsls	r2, r1, #10
 8005828:	4610      	mov	r0, r2
 800582a:	4619      	mov	r1, r3
 800582c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582e:	2200      	movs	r2, #0
 8005830:	61bb      	str	r3, [r7, #24]
 8005832:	61fa      	str	r2, [r7, #28]
 8005834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005838:	f7fb fa30 	bl	8000c9c <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4613      	mov	r3, r2
 8005842:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <HAL_RCC_GetSysClockFreq+0x200>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	3301      	adds	r3, #1
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800585e:	e002      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_GetSysClockFreq+0x204>)
 8005862:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005868:	4618      	mov	r0, r3
 800586a:	3750      	adds	r7, #80	; 0x50
 800586c:	46bd      	mov	sp, r7
 800586e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800
 8005878:	00f42400 	.word	0x00f42400
 800587c:	007a1200 	.word	0x007a1200

08005880 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005884:	4b03      	ldr	r3, [pc, #12]	; (8005894 <HAL_RCC_GetHCLKFreq+0x14>)
 8005886:	681b      	ldr	r3, [r3, #0]
}
 8005888:	4618      	mov	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20000010 	.word	0x20000010

08005898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800589c:	f7ff fff0 	bl	8005880 <HAL_RCC_GetHCLKFreq>
 80058a0:	4602      	mov	r2, r0
 80058a2:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	0a9b      	lsrs	r3, r3, #10
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	4903      	ldr	r1, [pc, #12]	; (80058bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ae:	5ccb      	ldrb	r3, [r1, r3]
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40023800 	.word	0x40023800
 80058bc:	0800d184 	.word	0x0800d184

080058c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058c4:	f7ff ffdc 	bl	8005880 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0b5b      	lsrs	r3, r3, #13
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4903      	ldr	r1, [pc, #12]	; (80058e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40023800 	.word	0x40023800
 80058e4:	0800d184 	.word	0x0800d184

080058e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d012      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005910:	4b69      	ldr	r3, [pc, #420]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	4a68      	ldr	r2, [pc, #416]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005916:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800591a:	6093      	str	r3, [r2, #8]
 800591c:	4b66      	ldr	r3, [pc, #408]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	4964      	ldr	r1, [pc, #400]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005932:	2301      	movs	r3, #1
 8005934:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d017      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005942:	4b5d      	ldr	r3, [pc, #372]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005950:	4959      	ldr	r1, [pc, #356]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005960:	d101      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005962:	2301      	movs	r3, #1
 8005964:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800596e:	2301      	movs	r3, #1
 8005970:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d017      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800597e:	4b4e      	ldr	r3, [pc, #312]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005984:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	494a      	ldr	r1, [pc, #296]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800599c:	d101      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800599e:	2301      	movs	r3, #1
 80059a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80059aa:	2301      	movs	r3, #1
 80059ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80059ba:	2301      	movs	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 808b 	beq.w	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059cc:	4b3a      	ldr	r3, [pc, #232]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	4a39      	ldr	r2, [pc, #228]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d6:	6413      	str	r3, [r2, #64]	; 0x40
 80059d8:	4b37      	ldr	r3, [pc, #220]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059e4:	4b35      	ldr	r3, [pc, #212]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a34      	ldr	r2, [pc, #208]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f0:	f7fd fbbe 	bl	8003170 <HAL_GetTick>
 80059f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f8:	f7fd fbba 	bl	8003170 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	; 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e357      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a0a:	4b2c      	ldr	r3, [pc, #176]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f0      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a16:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d035      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d02e      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a34:	4b20      	ldr	r3, [pc, #128]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a3e:	4b1e      	ldr	r3, [pc, #120]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	4a1d      	ldr	r2, [pc, #116]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a4a:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a1a      	ldr	r2, [pc, #104]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005a56:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a5c:	4b16      	ldr	r3, [pc, #88]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d114      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7fd fb82 	bl	8003170 <HAL_GetTick>
 8005a6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6e:	e00a      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a70:	f7fd fb7e 	bl	8003170 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e319      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0ee      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a9e:	d111      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005aac:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005aae:	400b      	ands	r3, r1
 8005ab0:	4901      	ldr	r1, [pc, #4]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	608b      	str	r3, [r1, #8]
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	40007000 	.word	0x40007000
 8005ac0:	0ffffcff 	.word	0x0ffffcff
 8005ac4:	4baa      	ldr	r3, [pc, #680]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	4aa9      	ldr	r2, [pc, #676]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ace:	6093      	str	r3, [r2, #8]
 8005ad0:	4ba7      	ldr	r3, [pc, #668]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005adc:	49a4      	ldr	r1, [pc, #656]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d010      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005aee:	4ba0      	ldr	r3, [pc, #640]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af4:	4a9e      	ldr	r2, [pc, #632]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005afa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005afe:	4b9c      	ldr	r3, [pc, #624]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	4999      	ldr	r1, [pc, #612]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b1c:	4b94      	ldr	r3, [pc, #592]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2a:	4991      	ldr	r1, [pc, #580]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b3e:	4b8c      	ldr	r3, [pc, #560]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b4c:	4988      	ldr	r1, [pc, #544]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b60:	4b83      	ldr	r3, [pc, #524]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b6e:	4980      	ldr	r1, [pc, #512]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b82:	4b7b      	ldr	r3, [pc, #492]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	4977      	ldr	r1, [pc, #476]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ba4:	4b72      	ldr	r3, [pc, #456]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005baa:	f023 0203 	bic.w	r2, r3, #3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb2:	496f      	ldr	r1, [pc, #444]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bc6:	4b6a      	ldr	r3, [pc, #424]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bcc:	f023 020c 	bic.w	r2, r3, #12
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd4:	4966      	ldr	r1, [pc, #408]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005be8:	4b61      	ldr	r3, [pc, #388]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf6:	495e      	ldr	r1, [pc, #376]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c0a:	4b59      	ldr	r3, [pc, #356]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c18:	4955      	ldr	r1, [pc, #340]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c2c:	4b50      	ldr	r3, [pc, #320]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	494d      	ldr	r1, [pc, #308]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005c4e:	4b48      	ldr	r3, [pc, #288]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5c:	4944      	ldr	r1, [pc, #272]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c70:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7e:	493c      	ldr	r1, [pc, #240]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005c92:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca0:	4933      	ldr	r1, [pc, #204]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005cb4:	4b2e      	ldr	r3, [pc, #184]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc2:	492b      	ldr	r1, [pc, #172]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d011      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005cd6:	4b26      	ldr	r3, [pc, #152]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cdc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ce4:	4922      	ldr	r1, [pc, #136]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cf4:	d101      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0308 	and.w	r3, r3, #8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005d06:	2301      	movs	r3, #1
 8005d08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d16:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d24:	4912      	ldr	r1, [pc, #72]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d38:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d48:	4909      	ldr	r1, [pc, #36]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d006      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 80d9 	beq.w	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d64:	4b02      	ldr	r3, [pc, #8]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a01      	ldr	r2, [pc, #4]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d6e:	e001      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005d70:	40023800 	.word	0x40023800
 8005d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d76:	f7fd f9fb 	bl	8003170 <HAL_GetTick>
 8005d7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d7e:	f7fd f9f7 	bl	8003170 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b64      	cmp	r3, #100	; 0x64
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e194      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d90:	4b6c      	ldr	r3, [pc, #432]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1f0      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d021      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d11d      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005db0:	4b64      	ldr	r3, [pc, #400]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db6:	0c1b      	lsrs	r3, r3, #16
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dbe:	4b61      	ldr	r3, [pc, #388]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc4:	0e1b      	lsrs	r3, r3, #24
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	019a      	lsls	r2, r3, #6
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	041b      	lsls	r3, r3, #16
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	061b      	lsls	r3, r3, #24
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	071b      	lsls	r3, r3, #28
 8005de4:	4957      	ldr	r1, [pc, #348]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d004      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e00:	d00a      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d02e      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e16:	d129      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e18:	4b4a      	ldr	r3, [pc, #296]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	f003 0303 	and.w	r3, r3, #3
 8005e24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e26:	4b47      	ldr	r3, [pc, #284]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2c:	0f1b      	lsrs	r3, r3, #28
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	019a      	lsls	r2, r3, #6
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	041b      	lsls	r3, r3, #16
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	061b      	lsls	r3, r3, #24
 8005e46:	431a      	orrs	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	071b      	lsls	r3, r3, #28
 8005e4c:	493d      	ldr	r1, [pc, #244]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e54:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e5a:	f023 021f 	bic.w	r2, r3, #31
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	3b01      	subs	r3, #1
 8005e64:	4937      	ldr	r1, [pc, #220]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01d      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e78:	4b32      	ldr	r3, [pc, #200]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e7e:	0e1b      	lsrs	r3, r3, #24
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e86:	4b2f      	ldr	r3, [pc, #188]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8c:	0f1b      	lsrs	r3, r3, #28
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	019a      	lsls	r2, r3, #6
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	041b      	lsls	r3, r3, #16
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	061b      	lsls	r3, r3, #24
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	071b      	lsls	r3, r3, #28
 8005eac:	4925      	ldr	r1, [pc, #148]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d011      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	019a      	lsls	r2, r3, #6
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	061b      	lsls	r3, r3, #24
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	071b      	lsls	r3, r3, #28
 8005edc:	4919      	ldr	r1, [pc, #100]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ee4:	4b17      	ldr	r3, [pc, #92]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a16      	ldr	r2, [pc, #88]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ef0:	f7fd f93e 	bl	8003170 <HAL_GetTick>
 8005ef4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ef8:	f7fd f93a 	bl	8003170 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b64      	cmp	r3, #100	; 0x64
 8005f04:	d901      	bls.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e0d7      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0f0      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	f040 80cd 	bne.w	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f1e:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f2a:	f7fd f921 	bl	8003170 <HAL_GetTick>
 8005f2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f30:	e00a      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f32:	f7fd f91d 	bl	8003170 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b64      	cmp	r3, #100	; 0x64
 8005f3e:	d903      	bls.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e0ba      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005f44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f48:	4b5e      	ldr	r3, [pc, #376]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f54:	d0ed      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d02e      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d12a      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f7e:	4b51      	ldr	r3, [pc, #324]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f84:	0c1b      	lsrs	r3, r3, #16
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f8c:	4b4d      	ldr	r3, [pc, #308]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f92:	0f1b      	lsrs	r3, r3, #28
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	019a      	lsls	r2, r3, #6
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	041b      	lsls	r3, r3, #16
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	061b      	lsls	r3, r3, #24
 8005fac:	431a      	orrs	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	071b      	lsls	r3, r3, #28
 8005fb2:	4944      	ldr	r1, [pc, #272]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005fba:	4b42      	ldr	r3, [pc, #264]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	493d      	ldr	r1, [pc, #244]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d022      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe8:	d11d      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fea:	4b36      	ldr	r3, [pc, #216]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff0:	0e1b      	lsrs	r3, r3, #24
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ff8:	4b32      	ldr	r3, [pc, #200]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffe:	0f1b      	lsrs	r3, r3, #28
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	019a      	lsls	r2, r3, #6
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	431a      	orrs	r2, r3
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	061b      	lsls	r3, r3, #24
 8006018:	431a      	orrs	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	071b      	lsls	r3, r3, #28
 800601e:	4929      	ldr	r1, [pc, #164]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d028      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006032:	4b24      	ldr	r3, [pc, #144]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006038:	0e1b      	lsrs	r3, r3, #24
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006040:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	0c1b      	lsrs	r3, r3, #16
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	019a      	lsls	r2, r3, #6
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	041b      	lsls	r3, r3, #16
 8006058:	431a      	orrs	r2, r3
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	061b      	lsls	r3, r3, #24
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	071b      	lsls	r3, r3, #28
 8006066:	4917      	ldr	r1, [pc, #92]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800606e:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	4911      	ldr	r1, [pc, #68]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a0e      	ldr	r2, [pc, #56]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800608a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006090:	f7fd f86e 	bl	8003170 <HAL_GetTick>
 8006094:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006096:	e008      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006098:	f7fd f86a 	bl	8003170 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b64      	cmp	r3, #100	; 0x64
 80060a4:	d901      	bls.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e007      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060b6:	d1ef      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40023800 	.word	0x40023800

080060c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e049      	b.n	800616e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fc fe60 	bl	8002db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f000 fd26 	bl	8006b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d001      	beq.n	8006190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e054      	b.n	800623a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a26      	ldr	r2, [pc, #152]	; (8006248 <HAL_TIM_Base_Start_IT+0xd0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d022      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x80>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ba:	d01d      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x80>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a22      	ldr	r2, [pc, #136]	; (800624c <HAL_TIM_Base_Start_IT+0xd4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d018      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x80>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a21      	ldr	r2, [pc, #132]	; (8006250 <HAL_TIM_Base_Start_IT+0xd8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d013      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x80>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1f      	ldr	r2, [pc, #124]	; (8006254 <HAL_TIM_Base_Start_IT+0xdc>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00e      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x80>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a1e      	ldr	r2, [pc, #120]	; (8006258 <HAL_TIM_Base_Start_IT+0xe0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x80>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a1c      	ldr	r2, [pc, #112]	; (800625c <HAL_TIM_Base_Start_IT+0xe4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_TIM_Base_Start_IT+0x80>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a1b      	ldr	r2, [pc, #108]	; (8006260 <HAL_TIM_Base_Start_IT+0xe8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d115      	bne.n	8006224 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	4b19      	ldr	r3, [pc, #100]	; (8006264 <HAL_TIM_Base_Start_IT+0xec>)
 8006200:	4013      	ands	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b06      	cmp	r3, #6
 8006208:	d015      	beq.n	8006236 <HAL_TIM_Base_Start_IT+0xbe>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006210:	d011      	beq.n	8006236 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0201 	orr.w	r2, r2, #1
 8006220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006222:	e008      	b.n	8006236 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e000      	b.n	8006238 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006236:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40010000 	.word	0x40010000
 800624c:	40000400 	.word	0x40000400
 8006250:	40000800 	.word	0x40000800
 8006254:	40000c00 	.word	0x40000c00
 8006258:	40010400 	.word	0x40010400
 800625c:	40014000 	.word	0x40014000
 8006260:	40001800 	.word	0x40001800
 8006264:	00010007 	.word	0x00010007

08006268 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e049      	b.n	800630e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fc fd70 	bl	8002d74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f000 fc56 	bl	8006b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d109      	bne.n	800633c <HAL_TIM_PWM_Start+0x24>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	e03c      	b.n	80063b6 <HAL_TIM_PWM_Start+0x9e>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b04      	cmp	r3, #4
 8006340:	d109      	bne.n	8006356 <HAL_TIM_PWM_Start+0x3e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b01      	cmp	r3, #1
 800634c:	bf14      	ite	ne
 800634e:	2301      	movne	r3, #1
 8006350:	2300      	moveq	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	e02f      	b.n	80063b6 <HAL_TIM_PWM_Start+0x9e>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b08      	cmp	r3, #8
 800635a:	d109      	bne.n	8006370 <HAL_TIM_PWM_Start+0x58>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	bf14      	ite	ne
 8006368:	2301      	movne	r3, #1
 800636a:	2300      	moveq	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	e022      	b.n	80063b6 <HAL_TIM_PWM_Start+0x9e>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b0c      	cmp	r3, #12
 8006374:	d109      	bne.n	800638a <HAL_TIM_PWM_Start+0x72>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	bf14      	ite	ne
 8006382:	2301      	movne	r3, #1
 8006384:	2300      	moveq	r3, #0
 8006386:	b2db      	uxtb	r3, r3
 8006388:	e015      	b.n	80063b6 <HAL_TIM_PWM_Start+0x9e>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b10      	cmp	r3, #16
 800638e:	d109      	bne.n	80063a4 <HAL_TIM_PWM_Start+0x8c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b01      	cmp	r3, #1
 800639a:	bf14      	ite	ne
 800639c:	2301      	movne	r3, #1
 800639e:	2300      	moveq	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	e008      	b.n	80063b6 <HAL_TIM_PWM_Start+0x9e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	bf14      	ite	ne
 80063b0:	2301      	movne	r3, #1
 80063b2:	2300      	moveq	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e092      	b.n	80064e4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_PWM_Start+0xb6>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063cc:	e023      	b.n	8006416 <HAL_TIM_PWM_Start+0xfe>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d104      	bne.n	80063de <HAL_TIM_PWM_Start+0xc6>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063dc:	e01b      	b.n	8006416 <HAL_TIM_PWM_Start+0xfe>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d104      	bne.n	80063ee <HAL_TIM_PWM_Start+0xd6>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ec:	e013      	b.n	8006416 <HAL_TIM_PWM_Start+0xfe>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b0c      	cmp	r3, #12
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_PWM_Start+0xe6>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063fc:	e00b      	b.n	8006416 <HAL_TIM_PWM_Start+0xfe>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b10      	cmp	r3, #16
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Start+0xf6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800640c:	e003      	b.n	8006416 <HAL_TIM_PWM_Start+0xfe>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2202      	movs	r2, #2
 8006412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2201      	movs	r2, #1
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 ff32 	bl	8007288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a30      	ldr	r2, [pc, #192]	; (80064ec <HAL_TIM_PWM_Start+0x1d4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <HAL_TIM_PWM_Start+0x120>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a2f      	ldr	r2, [pc, #188]	; (80064f0 <HAL_TIM_PWM_Start+0x1d8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d101      	bne.n	800643c <HAL_TIM_PWM_Start+0x124>
 8006438:	2301      	movs	r3, #1
 800643a:	e000      	b.n	800643e <HAL_TIM_PWM_Start+0x126>
 800643c:	2300      	movs	r3, #0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a25      	ldr	r2, [pc, #148]	; (80064ec <HAL_TIM_PWM_Start+0x1d4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d022      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x18a>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006464:	d01d      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x18a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a22      	ldr	r2, [pc, #136]	; (80064f4 <HAL_TIM_PWM_Start+0x1dc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d018      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x18a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a20      	ldr	r2, [pc, #128]	; (80064f8 <HAL_TIM_PWM_Start+0x1e0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x18a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1f      	ldr	r2, [pc, #124]	; (80064fc <HAL_TIM_PWM_Start+0x1e4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00e      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x18a>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a19      	ldr	r2, [pc, #100]	; (80064f0 <HAL_TIM_PWM_Start+0x1d8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x18a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <HAL_TIM_PWM_Start+0x1e8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x18a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a19      	ldr	r2, [pc, #100]	; (8006504 <HAL_TIM_PWM_Start+0x1ec>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d115      	bne.n	80064ce <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	4b17      	ldr	r3, [pc, #92]	; (8006508 <HAL_TIM_PWM_Start+0x1f0>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b06      	cmp	r3, #6
 80064b2:	d015      	beq.n	80064e0 <HAL_TIM_PWM_Start+0x1c8>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ba:	d011      	beq.n	80064e0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064cc:	e008      	b.n	80064e0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e000      	b.n	80064e2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40010000 	.word	0x40010000
 80064f0:	40010400 	.word	0x40010400
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40014000 	.word	0x40014000
 8006504:	40001800 	.word	0x40001800
 8006508:	00010007 	.word	0x00010007

0800650c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d122      	bne.n	8006568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d11b      	bne.n	8006568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0202 	mvn.w	r2, #2
 8006538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fae4 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fad6 	bl	8006b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fae7 	bl	8006b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b04      	cmp	r3, #4
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b04      	cmp	r3, #4
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0204 	mvn.w	r2, #4
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 faba 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 faac 	bl	8006b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fabd 	bl	8006b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d122      	bne.n	8006610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d11b      	bne.n	8006610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0208 	mvn.w	r2, #8
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2204      	movs	r2, #4
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa90 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa82 	bl	8006b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fa93 	bl	8006b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	2b10      	cmp	r3, #16
 800661c:	d122      	bne.n	8006664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b10      	cmp	r3, #16
 800662a:	d11b      	bne.n	8006664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0210 	mvn.w	r2, #16
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2208      	movs	r2, #8
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fa66 	bl	8006b1c <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa58 	bl	8006b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fa69 	bl	8006b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d10e      	bne.n	8006690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0201 	mvn.w	r2, #1
 8006688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fb fdfe 	bl	800228c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d10e      	bne.n	80066bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a8:	2b80      	cmp	r3, #128	; 0x80
 80066aa:	d107      	bne.n	80066bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 ff22 	bl	8007500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ca:	d10e      	bne.n	80066ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b80      	cmp	r3, #128	; 0x80
 80066d8:	d107      	bne.n	80066ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 ff15 	bl	8007514 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d10e      	bne.n	8006716 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	d107      	bne.n	8006716 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800670e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fa17 	bl	8006b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b20      	cmp	r3, #32
 8006722:	d10e      	bne.n	8006742 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b20      	cmp	r3, #32
 8006730:	d107      	bne.n	8006742 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f06f 0220 	mvn.w	r2, #32
 800673a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fed5 	bl	80074ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006762:	2b01      	cmp	r3, #1
 8006764:	d101      	bne.n	800676a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006766:	2302      	movs	r3, #2
 8006768:	e0ff      	b.n	800696a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b14      	cmp	r3, #20
 8006776:	f200 80f0 	bhi.w	800695a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800677a:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800677c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006780:	080067d5 	.word	0x080067d5
 8006784:	0800695b 	.word	0x0800695b
 8006788:	0800695b 	.word	0x0800695b
 800678c:	0800695b 	.word	0x0800695b
 8006790:	08006815 	.word	0x08006815
 8006794:	0800695b 	.word	0x0800695b
 8006798:	0800695b 	.word	0x0800695b
 800679c:	0800695b 	.word	0x0800695b
 80067a0:	08006857 	.word	0x08006857
 80067a4:	0800695b 	.word	0x0800695b
 80067a8:	0800695b 	.word	0x0800695b
 80067ac:	0800695b 	.word	0x0800695b
 80067b0:	08006897 	.word	0x08006897
 80067b4:	0800695b 	.word	0x0800695b
 80067b8:	0800695b 	.word	0x0800695b
 80067bc:	0800695b 	.word	0x0800695b
 80067c0:	080068d9 	.word	0x080068d9
 80067c4:	0800695b 	.word	0x0800695b
 80067c8:	0800695b 	.word	0x0800695b
 80067cc:	0800695b 	.word	0x0800695b
 80067d0:	08006919 	.word	0x08006919
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fa5c 	bl	8006c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0208 	orr.w	r2, r2, #8
 80067ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699a      	ldr	r2, [r3, #24]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0204 	bic.w	r2, r2, #4
 80067fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6999      	ldr	r1, [r3, #24]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	691a      	ldr	r2, [r3, #16]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	619a      	str	r2, [r3, #24]
      break;
 8006812:	e0a5      	b.n	8006960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68b9      	ldr	r1, [r7, #8]
 800681a:	4618      	mov	r0, r3
 800681c:	f000 faae 	bl	8006d7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800682e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699a      	ldr	r2, [r3, #24]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800683e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6999      	ldr	r1, [r3, #24]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	021a      	lsls	r2, r3, #8
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	619a      	str	r2, [r3, #24]
      break;
 8006854:	e084      	b.n	8006960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fb05 	bl	8006e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f042 0208 	orr.w	r2, r2, #8
 8006870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69da      	ldr	r2, [r3, #28]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0204 	bic.w	r2, r2, #4
 8006880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69d9      	ldr	r1, [r3, #28]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	61da      	str	r2, [r3, #28]
      break;
 8006894:	e064      	b.n	8006960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fb5b 	bl	8006f58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69d9      	ldr	r1, [r3, #28]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	021a      	lsls	r2, r3, #8
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	61da      	str	r2, [r3, #28]
      break;
 80068d6:	e043      	b.n	8006960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fb92 	bl	8007008 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0208 	orr.w	r2, r2, #8
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0204 	bic.w	r2, r2, #4
 8006902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006916:	e023      	b.n	8006960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fbc4 	bl	80070ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006932:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	021a      	lsls	r2, r3, #8
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006958:	e002      	b.n	8006960 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
      break;
 800695e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop

08006974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <HAL_TIM_ConfigClockSource+0x1c>
 800698c:	2302      	movs	r3, #2
 800698e:	e0b4      	b.n	8006afa <HAL_TIM_ConfigClockSource+0x186>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	4b56      	ldr	r3, [pc, #344]	; (8006b04 <HAL_TIM_ConfigClockSource+0x190>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c8:	d03e      	beq.n	8006a48 <HAL_TIM_ConfigClockSource+0xd4>
 80069ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ce:	f200 8087 	bhi.w	8006ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d6:	f000 8086 	beq.w	8006ae6 <HAL_TIM_ConfigClockSource+0x172>
 80069da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069de:	d87f      	bhi.n	8006ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80069e0:	2b70      	cmp	r3, #112	; 0x70
 80069e2:	d01a      	beq.n	8006a1a <HAL_TIM_ConfigClockSource+0xa6>
 80069e4:	2b70      	cmp	r3, #112	; 0x70
 80069e6:	d87b      	bhi.n	8006ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80069e8:	2b60      	cmp	r3, #96	; 0x60
 80069ea:	d050      	beq.n	8006a8e <HAL_TIM_ConfigClockSource+0x11a>
 80069ec:	2b60      	cmp	r3, #96	; 0x60
 80069ee:	d877      	bhi.n	8006ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80069f0:	2b50      	cmp	r3, #80	; 0x50
 80069f2:	d03c      	beq.n	8006a6e <HAL_TIM_ConfigClockSource+0xfa>
 80069f4:	2b50      	cmp	r3, #80	; 0x50
 80069f6:	d873      	bhi.n	8006ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	d058      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0x13a>
 80069fc:	2b40      	cmp	r3, #64	; 0x40
 80069fe:	d86f      	bhi.n	8006ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a00:	2b30      	cmp	r3, #48	; 0x30
 8006a02:	d064      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0x15a>
 8006a04:	2b30      	cmp	r3, #48	; 0x30
 8006a06:	d86b      	bhi.n	8006ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d060      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0x15a>
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	d867      	bhi.n	8006ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d05c      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0x15a>
 8006a14:	2b10      	cmp	r3, #16
 8006a16:	d05a      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0x15a>
 8006a18:	e062      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6899      	ldr	r1, [r3, #8]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f000 fc0d 	bl	8007248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	609a      	str	r2, [r3, #8]
      break;
 8006a46:	e04f      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	6899      	ldr	r1, [r3, #8]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f000 fbf6 	bl	8007248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a6a:	609a      	str	r2, [r3, #8]
      break;
 8006a6c:	e03c      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	6859      	ldr	r1, [r3, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f000 fb6a 	bl	8007154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2150      	movs	r1, #80	; 0x50
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fbc3 	bl	8007212 <TIM_ITRx_SetConfig>
      break;
 8006a8c:	e02c      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	6859      	ldr	r1, [r3, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f000 fb89 	bl	80071b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2160      	movs	r1, #96	; 0x60
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fbb3 	bl	8007212 <TIM_ITRx_SetConfig>
      break;
 8006aac:	e01c      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6859      	ldr	r1, [r3, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	461a      	mov	r2, r3
 8006abc:	f000 fb4a 	bl	8007154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2140      	movs	r1, #64	; 0x40
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fba3 	bl	8007212 <TIM_ITRx_SetConfig>
      break;
 8006acc:	e00c      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4610      	mov	r0, r2
 8006ada:	f000 fb9a 	bl	8007212 <TIM_ITRx_SetConfig>
      break;
 8006ade:	e003      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae4:	e000      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	fffeff88 	.word	0xfffeff88

08006b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a40      	ldr	r2, [pc, #256]	; (8006c6c <TIM_Base_SetConfig+0x114>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d013      	beq.n	8006b98 <TIM_Base_SetConfig+0x40>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b76:	d00f      	beq.n	8006b98 <TIM_Base_SetConfig+0x40>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a3d      	ldr	r2, [pc, #244]	; (8006c70 <TIM_Base_SetConfig+0x118>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00b      	beq.n	8006b98 <TIM_Base_SetConfig+0x40>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a3c      	ldr	r2, [pc, #240]	; (8006c74 <TIM_Base_SetConfig+0x11c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d007      	beq.n	8006b98 <TIM_Base_SetConfig+0x40>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a3b      	ldr	r2, [pc, #236]	; (8006c78 <TIM_Base_SetConfig+0x120>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_Base_SetConfig+0x40>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a3a      	ldr	r2, [pc, #232]	; (8006c7c <TIM_Base_SetConfig+0x124>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d108      	bne.n	8006baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a2f      	ldr	r2, [pc, #188]	; (8006c6c <TIM_Base_SetConfig+0x114>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d02b      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb8:	d027      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a2c      	ldr	r2, [pc, #176]	; (8006c70 <TIM_Base_SetConfig+0x118>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d023      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a2b      	ldr	r2, [pc, #172]	; (8006c74 <TIM_Base_SetConfig+0x11c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d01f      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <TIM_Base_SetConfig+0x120>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01b      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a29      	ldr	r2, [pc, #164]	; (8006c7c <TIM_Base_SetConfig+0x124>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d017      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a28      	ldr	r2, [pc, #160]	; (8006c80 <TIM_Base_SetConfig+0x128>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a27      	ldr	r2, [pc, #156]	; (8006c84 <TIM_Base_SetConfig+0x12c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00f      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <TIM_Base_SetConfig+0x130>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00b      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a25      	ldr	r2, [pc, #148]	; (8006c8c <TIM_Base_SetConfig+0x134>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d007      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a24      	ldr	r2, [pc, #144]	; (8006c90 <TIM_Base_SetConfig+0x138>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a23      	ldr	r2, [pc, #140]	; (8006c94 <TIM_Base_SetConfig+0x13c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d108      	bne.n	8006c1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <TIM_Base_SetConfig+0x114>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d003      	beq.n	8006c50 <TIM_Base_SetConfig+0xf8>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <TIM_Base_SetConfig+0x124>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d103      	bne.n	8006c58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	615a      	str	r2, [r3, #20]
}
 8006c5e:	bf00      	nop
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	40010000 	.word	0x40010000
 8006c70:	40000400 	.word	0x40000400
 8006c74:	40000800 	.word	0x40000800
 8006c78:	40000c00 	.word	0x40000c00
 8006c7c:	40010400 	.word	0x40010400
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800
 8006c8c:	40001800 	.word	0x40001800
 8006c90:	40001c00 	.word	0x40001c00
 8006c94:	40002000 	.word	0x40002000

08006c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f023 0201 	bic.w	r2, r3, #1
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4b2b      	ldr	r3, [pc, #172]	; (8006d70 <TIM_OC1_SetConfig+0xd8>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0303 	bic.w	r3, r3, #3
 8006cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f023 0302 	bic.w	r3, r3, #2
 8006ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a21      	ldr	r2, [pc, #132]	; (8006d74 <TIM_OC1_SetConfig+0xdc>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d003      	beq.n	8006cfc <TIM_OC1_SetConfig+0x64>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a20      	ldr	r2, [pc, #128]	; (8006d78 <TIM_OC1_SetConfig+0xe0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d10c      	bne.n	8006d16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f023 0308 	bic.w	r3, r3, #8
 8006d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f023 0304 	bic.w	r3, r3, #4
 8006d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a16      	ldr	r2, [pc, #88]	; (8006d74 <TIM_OC1_SetConfig+0xdc>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d003      	beq.n	8006d26 <TIM_OC1_SetConfig+0x8e>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a15      	ldr	r2, [pc, #84]	; (8006d78 <TIM_OC1_SetConfig+0xe0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d111      	bne.n	8006d4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	621a      	str	r2, [r3, #32]
}
 8006d64:	bf00      	nop
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	fffeff8f 	.word	0xfffeff8f
 8006d74:	40010000 	.word	0x40010000
 8006d78:	40010400 	.word	0x40010400

08006d7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f023 0210 	bic.w	r2, r3, #16
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4b2e      	ldr	r3, [pc, #184]	; (8006e60 <TIM_OC2_SetConfig+0xe4>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f023 0320 	bic.w	r3, r3, #32
 8006dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a23      	ldr	r2, [pc, #140]	; (8006e64 <TIM_OC2_SetConfig+0xe8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_OC2_SetConfig+0x68>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a22      	ldr	r2, [pc, #136]	; (8006e68 <TIM_OC2_SetConfig+0xec>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d10d      	bne.n	8006e00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a18      	ldr	r2, [pc, #96]	; (8006e64 <TIM_OC2_SetConfig+0xe8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_OC2_SetConfig+0x94>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <TIM_OC2_SetConfig+0xec>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d113      	bne.n	8006e38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	feff8fff 	.word	0xfeff8fff
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40010400 	.word	0x40010400

08006e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4b2d      	ldr	r3, [pc, #180]	; (8006f4c <TIM_OC3_SetConfig+0xe0>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0303 	bic.w	r3, r3, #3
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a22      	ldr	r2, [pc, #136]	; (8006f50 <TIM_OC3_SetConfig+0xe4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d003      	beq.n	8006ed2 <TIM_OC3_SetConfig+0x66>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a21      	ldr	r2, [pc, #132]	; (8006f54 <TIM_OC3_SetConfig+0xe8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d10d      	bne.n	8006eee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	021b      	lsls	r3, r3, #8
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a17      	ldr	r2, [pc, #92]	; (8006f50 <TIM_OC3_SetConfig+0xe4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d003      	beq.n	8006efe <TIM_OC3_SetConfig+0x92>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a16      	ldr	r2, [pc, #88]	; (8006f54 <TIM_OC3_SetConfig+0xe8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d113      	bne.n	8006f26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	621a      	str	r2, [r3, #32]
}
 8006f40:	bf00      	nop
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	fffeff8f 	.word	0xfffeff8f
 8006f50:	40010000 	.word	0x40010000
 8006f54:	40010400 	.word	0x40010400

08006f58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4b1e      	ldr	r3, [pc, #120]	; (8006ffc <TIM_OC4_SetConfig+0xa4>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	031b      	lsls	r3, r3, #12
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a13      	ldr	r2, [pc, #76]	; (8007000 <TIM_OC4_SetConfig+0xa8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <TIM_OC4_SetConfig+0x68>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a12      	ldr	r2, [pc, #72]	; (8007004 <TIM_OC4_SetConfig+0xac>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d109      	bne.n	8006fd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	019b      	lsls	r3, r3, #6
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	621a      	str	r2, [r3, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	feff8fff 	.word	0xfeff8fff
 8007000:	40010000 	.word	0x40010000
 8007004:	40010400 	.word	0x40010400

08007008 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4b1b      	ldr	r3, [pc, #108]	; (80070a0 <TIM_OC5_SetConfig+0x98>)
 8007034:	4013      	ands	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	041b      	lsls	r3, r3, #16
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a12      	ldr	r2, [pc, #72]	; (80070a4 <TIM_OC5_SetConfig+0x9c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_OC5_SetConfig+0x5e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a11      	ldr	r2, [pc, #68]	; (80070a8 <TIM_OC5_SetConfig+0xa0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d109      	bne.n	800707a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	621a      	str	r2, [r3, #32]
}
 8007094:	bf00      	nop
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	fffeff8f 	.word	0xfffeff8f
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40010400 	.word	0x40010400

080070ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4b1c      	ldr	r3, [pc, #112]	; (8007148 <TIM_OC6_SetConfig+0x9c>)
 80070d8:	4013      	ands	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	051b      	lsls	r3, r3, #20
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a13      	ldr	r2, [pc, #76]	; (800714c <TIM_OC6_SetConfig+0xa0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_OC6_SetConfig+0x60>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a12      	ldr	r2, [pc, #72]	; (8007150 <TIM_OC6_SetConfig+0xa4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d109      	bne.n	8007120 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007112:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	029b      	lsls	r3, r3, #10
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	621a      	str	r2, [r3, #32]
}
 800713a:	bf00      	nop
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	feff8fff 	.word	0xfeff8fff
 800714c:	40010000 	.word	0x40010000
 8007150:	40010400 	.word	0x40010400

08007154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	f023 0201 	bic.w	r2, r3, #1
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800717e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	4313      	orrs	r3, r2
 8007188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f023 030a 	bic.w	r3, r3, #10
 8007190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	621a      	str	r2, [r3, #32]
}
 80071a6:	bf00      	nop
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b087      	sub	sp, #28
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	f023 0210 	bic.w	r2, r3, #16
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	031b      	lsls	r3, r3, #12
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	621a      	str	r2, [r3, #32]
}
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007212:	b480      	push	{r7}
 8007214:	b085      	sub	sp, #20
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4313      	orrs	r3, r2
 8007230:	f043 0307 	orr.w	r3, r3, #7
 8007234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	609a      	str	r2, [r3, #8]
}
 800723c:	bf00      	nop
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	021a      	lsls	r2, r3, #8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	431a      	orrs	r2, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	4313      	orrs	r3, r2
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	609a      	str	r2, [r3, #8]
}
 800727c:	bf00      	nop
 800727e:	371c      	adds	r7, #28
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	2201      	movs	r2, #1
 800729c:	fa02 f303 	lsl.w	r3, r2, r3
 80072a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a1a      	ldr	r2, [r3, #32]
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	43db      	mvns	r3, r3
 80072aa:	401a      	ands	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a1a      	ldr	r2, [r3, #32]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f003 031f 	and.w	r3, r3, #31
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	fa01 f303 	lsl.w	r3, r1, r3
 80072c0:	431a      	orrs	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	621a      	str	r2, [r3, #32]
}
 80072c6:	bf00      	nop
 80072c8:	371c      	adds	r7, #28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
	...

080072d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e06d      	b.n	80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a30      	ldr	r2, [pc, #192]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d004      	beq.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a2f      	ldr	r2, [pc, #188]	; (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d108      	bne.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007326:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007338:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a20      	ldr	r2, [pc, #128]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d022      	beq.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735e:	d01d      	beq.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1d      	ldr	r2, [pc, #116]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d018      	beq.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a1c      	ldr	r2, [pc, #112]	; (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d013      	beq.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a1a      	ldr	r2, [pc, #104]	; (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00e      	beq.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d009      	beq.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a16      	ldr	r2, [pc, #88]	; (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d004      	beq.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a15      	ldr	r2, [pc, #84]	; (80073ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d10c      	bne.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40010400 	.word	0x40010400
 80073dc:	40000400 	.word	0x40000400
 80073e0:	40000800 	.word	0x40000800
 80073e4:	40000c00 	.word	0x40000c00
 80073e8:	40014000 	.word	0x40014000
 80073ec:	40001800 	.word	0x40001800

080073f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007408:	2302      	movs	r3, #2
 800740a:	e065      	b.n	80074d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	4313      	orrs	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	041b      	lsls	r3, r3, #16
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a16      	ldr	r2, [pc, #88]	; (80074e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d004      	beq.n	800749a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a14      	ldr	r2, [pc, #80]	; (80074e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d115      	bne.n	80074c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	051b      	lsls	r3, r3, #20
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	40010000 	.word	0x40010000
 80074e8:	40010400 	.word	0x40010400

080074ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e040      	b.n	80075bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d106      	bne.n	8007550 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7fb fd2e 	bl	8002fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2224      	movs	r2, #36	; 0x24
 8007554:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0201 	bic.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fbe6 	bl	8007d38 <UART_SetConfig>
 800756c:	4603      	mov	r3, r0
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e022      	b.n	80075bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fe3e 	bl	8008200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0201 	orr.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fec5 	bl	8008344 <UART_CheckIdleState>
 80075ba:	4603      	mov	r3, r0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	; 0x28
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	4613      	mov	r3, r2
 80075d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075d8:	2b20      	cmp	r3, #32
 80075da:	d171      	bne.n	80076c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <HAL_UART_Transmit+0x24>
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e06a      	b.n	80076c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2221      	movs	r2, #33	; 0x21
 80075f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075fa:	f7fb fdb9 	bl	8003170 <HAL_GetTick>
 80075fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	88fa      	ldrh	r2, [r7, #6]
 8007604:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	88fa      	ldrh	r2, [r7, #6]
 800760c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007618:	d108      	bne.n	800762c <HAL_UART_Transmit+0x68>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d104      	bne.n	800762c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	61bb      	str	r3, [r7, #24]
 800762a:	e003      	b.n	8007634 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007630:	2300      	movs	r3, #0
 8007632:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007634:	e02c      	b.n	8007690 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2200      	movs	r2, #0
 800763e:	2180      	movs	r1, #128	; 0x80
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 feb6 	bl	80083b2 <UART_WaitOnFlagUntilTimeout>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e038      	b.n	80076c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007664:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	3302      	adds	r3, #2
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	e007      	b.n	800767e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	781a      	ldrb	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3301      	adds	r3, #1
 800767c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1cc      	bne.n	8007636 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2200      	movs	r2, #0
 80076a4:	2140      	movs	r1, #64	; 0x40
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fe83 	bl	80083b2 <UART_WaitOnFlagUntilTimeout>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e005      	b.n	80076c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2220      	movs	r2, #32
 80076ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	e000      	b.n	80076c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80076c0:	2302      	movs	r3, #2
  }
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3720      	adds	r7, #32
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b08a      	sub	sp, #40	; 0x28
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	4613      	mov	r3, r2
 80076d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076de:	2b20      	cmp	r3, #32
 80076e0:	d132      	bne.n	8007748 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <HAL_UART_Receive_IT+0x24>
 80076e8:	88fb      	ldrh	r3, [r7, #6]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e02b      	b.n	800774a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d018      	beq.n	8007738 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	613b      	str	r3, [r7, #16]
   return(result);
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	623b      	str	r3, [r7, #32]
 8007726:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	69f9      	ldr	r1, [r7, #28]
 800772a:	6a3a      	ldr	r2, [r7, #32]
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	61bb      	str	r3, [r7, #24]
   return(result);
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e6      	bne.n	8007706 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007738:	88fb      	ldrh	r3, [r7, #6]
 800773a:	461a      	mov	r2, r3
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fefe 	bl	8008540 <UART_Start_Receive_IT>
 8007744:	4603      	mov	r3, r0
 8007746:	e000      	b.n	800774a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007748:	2302      	movs	r3, #2
  }
}
 800774a:	4618      	mov	r0, r3
 800774c:	3728      	adds	r7, #40	; 0x28
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b0ba      	sub	sp, #232	; 0xe8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800777a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800777e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007782:	4013      	ands	r3, r2
 8007784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d115      	bne.n	80077bc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007794:	f003 0320 	and.w	r3, r3, #32
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00f      	beq.n	80077bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800779c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a0:	f003 0320 	and.w	r3, r3, #32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d009      	beq.n	80077bc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 8297 	beq.w	8007ce0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	4798      	blx	r3
      }
      return;
 80077ba:	e291      	b.n	8007ce0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 8117 	beq.w	80079f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80077c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80077d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80077d6:	4b85      	ldr	r3, [pc, #532]	; (80079ec <HAL_UART_IRQHandler+0x298>)
 80077d8:	4013      	ands	r3, r2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 810a 	beq.w	80079f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d011      	beq.n	8007810 <HAL_UART_IRQHandler+0xbc>
 80077ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00b      	beq.n	8007810 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2201      	movs	r2, #1
 80077fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007806:	f043 0201 	orr.w	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d011      	beq.n	8007840 <HAL_UART_IRQHandler+0xec>
 800781c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00b      	beq.n	8007840 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2202      	movs	r2, #2
 800782e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007836:	f043 0204 	orr.w	r2, r3, #4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d011      	beq.n	8007870 <HAL_UART_IRQHandler+0x11c>
 800784c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2204      	movs	r2, #4
 800785e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007866:	f043 0202 	orr.w	r2, r3, #2
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d017      	beq.n	80078ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800787c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b00      	cmp	r3, #0
 8007886:	d105      	bne.n	8007894 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800788c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2208      	movs	r2, #8
 800789a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a2:	f043 0208 	orr.w	r2, r3, #8
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d012      	beq.n	80078de <HAL_UART_IRQHandler+0x18a>
 80078b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00c      	beq.n	80078de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d4:	f043 0220 	orr.w	r2, r3, #32
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 81fd 	beq.w	8007ce4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80078ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00d      	beq.n	8007912 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d007      	beq.n	8007912 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007918:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007926:	2b40      	cmp	r3, #64	; 0x40
 8007928:	d005      	beq.n	8007936 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800792a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800792e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007932:	2b00      	cmp	r3, #0
 8007934:	d04f      	beq.n	80079d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fec8 	bl	80086cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b40      	cmp	r3, #64	; 0x40
 8007948:	d141      	bne.n	80079ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3308      	adds	r3, #8
 8007972:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007976:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800797a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007982:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800798e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1d9      	bne.n	800794a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799a:	2b00      	cmp	r3, #0
 800799c:	d013      	beq.n	80079c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a2:	4a13      	ldr	r2, [pc, #76]	; (80079f0 <HAL_UART_IRQHandler+0x29c>)
 80079a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fc f98b 	bl	8003cc6 <HAL_DMA_Abort_IT>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d017      	beq.n	80079e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c4:	e00f      	b.n	80079e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9a0 	bl	8007d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079cc:	e00b      	b.n	80079e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f99c 	bl	8007d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d4:	e007      	b.n	80079e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f998 	bl	8007d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80079e4:	e17e      	b.n	8007ce4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e6:	bf00      	nop
    return;
 80079e8:	e17c      	b.n	8007ce4 <HAL_UART_IRQHandler+0x590>
 80079ea:	bf00      	nop
 80079ec:	04000120 	.word	0x04000120
 80079f0:	08008795 	.word	0x08008795

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	f040 814c 	bne.w	8007c96 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a02:	f003 0310 	and.w	r3, r3, #16
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8145 	beq.w	8007c96 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a10:	f003 0310 	and.w	r3, r3, #16
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 813e 	beq.w	8007c96 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2210      	movs	r2, #16
 8007a20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2c:	2b40      	cmp	r3, #64	; 0x40
 8007a2e:	f040 80b6 	bne.w	8007b9e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8150 	beq.w	8007ce8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a52:	429a      	cmp	r2, r3
 8007a54:	f080 8148 	bcs.w	8007ce8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a6c:	f000 8086 	beq.w	8007b7c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	461a      	mov	r2, r3
 8007a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1da      	bne.n	8007a70 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007acc:	f023 0301 	bic.w	r3, r3, #1
 8007ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ade:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1e1      	bne.n	8007aba <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3308      	adds	r3, #8
 8007b16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e3      	bne.n	8007af6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b4c:	f023 0310 	bic.w	r3, r3, #16
 8007b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e4      	bne.n	8007b3c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fc f835 	bl	8003be6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f8c2 	bl	8007d20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b9c:	e0a4      	b.n	8007ce8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8096 	beq.w	8007cec <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8091 	beq.w	8007cec <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bec:	647b      	str	r3, [r7, #68]	; 0x44
 8007bee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e4      	bne.n	8007bca <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3308      	adds	r3, #8
 8007c06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	623b      	str	r3, [r7, #32]
   return(result);
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c24:	633a      	str	r2, [r7, #48]	; 0x30
 8007c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c2c:	e841 2300 	strex	r3, r2, [r1]
 8007c30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e3      	bne.n	8007c00 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f023 0310 	bic.w	r3, r3, #16
 8007c60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	69b9      	ldr	r1, [r7, #24]
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e4      	bne.n	8007c4c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2202      	movs	r2, #2
 8007c86:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f846 	bl	8007d20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c94:	e02a      	b.n	8007cec <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00e      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d008      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d01c      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	4798      	blx	r3
    }
    return;
 8007cbe:	e017      	b.n	8007cf0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d012      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x59e>
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00c      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fd71 	bl	80087c0 <UART_EndTransmit_IT>
    return;
 8007cde:	e008      	b.n	8007cf2 <HAL_UART_IRQHandler+0x59e>
      return;
 8007ce0:	bf00      	nop
 8007ce2:	e006      	b.n	8007cf2 <HAL_UART_IRQHandler+0x59e>
    return;
 8007ce4:	bf00      	nop
 8007ce6:	e004      	b.n	8007cf2 <HAL_UART_IRQHandler+0x59e>
      return;
 8007ce8:	bf00      	nop
 8007cea:	e002      	b.n	8007cf2 <HAL_UART_IRQHandler+0x59e>
      return;
 8007cec:	bf00      	nop
 8007cee:	e000      	b.n	8007cf2 <HAL_UART_IRQHandler+0x59e>
    return;
 8007cf0:	bf00      	nop
  }

}
 8007cf2:	37e8      	adds	r7, #232	; 0xe8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4ba6      	ldr	r3, [pc, #664]	; (8007ffc <UART_SetConfig+0x2c4>)
 8007d64:	4013      	ands	r3, r2
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	6812      	ldr	r2, [r2, #0]
 8007d6a:	6979      	ldr	r1, [r7, #20]
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a94      	ldr	r2, [pc, #592]	; (8008000 <UART_SetConfig+0x2c8>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d120      	bne.n	8007df6 <UART_SetConfig+0xbe>
 8007db4:	4b93      	ldr	r3, [pc, #588]	; (8008004 <UART_SetConfig+0x2cc>)
 8007db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d816      	bhi.n	8007df0 <UART_SetConfig+0xb8>
 8007dc2:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <UART_SetConfig+0x90>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007dd9 	.word	0x08007dd9
 8007dcc:	08007de5 	.word	0x08007de5
 8007dd0:	08007ddf 	.word	0x08007ddf
 8007dd4:	08007deb 	.word	0x08007deb
 8007dd8:	2301      	movs	r3, #1
 8007dda:	77fb      	strb	r3, [r7, #31]
 8007ddc:	e150      	b.n	8008080 <UART_SetConfig+0x348>
 8007dde:	2302      	movs	r3, #2
 8007de0:	77fb      	strb	r3, [r7, #31]
 8007de2:	e14d      	b.n	8008080 <UART_SetConfig+0x348>
 8007de4:	2304      	movs	r3, #4
 8007de6:	77fb      	strb	r3, [r7, #31]
 8007de8:	e14a      	b.n	8008080 <UART_SetConfig+0x348>
 8007dea:	2308      	movs	r3, #8
 8007dec:	77fb      	strb	r3, [r7, #31]
 8007dee:	e147      	b.n	8008080 <UART_SetConfig+0x348>
 8007df0:	2310      	movs	r3, #16
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e144      	b.n	8008080 <UART_SetConfig+0x348>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a83      	ldr	r2, [pc, #524]	; (8008008 <UART_SetConfig+0x2d0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d132      	bne.n	8007e66 <UART_SetConfig+0x12e>
 8007e00:	4b80      	ldr	r3, [pc, #512]	; (8008004 <UART_SetConfig+0x2cc>)
 8007e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e06:	f003 030c 	and.w	r3, r3, #12
 8007e0a:	2b0c      	cmp	r3, #12
 8007e0c:	d828      	bhi.n	8007e60 <UART_SetConfig+0x128>
 8007e0e:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <UART_SetConfig+0xdc>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e49 	.word	0x08007e49
 8007e18:	08007e61 	.word	0x08007e61
 8007e1c:	08007e61 	.word	0x08007e61
 8007e20:	08007e61 	.word	0x08007e61
 8007e24:	08007e55 	.word	0x08007e55
 8007e28:	08007e61 	.word	0x08007e61
 8007e2c:	08007e61 	.word	0x08007e61
 8007e30:	08007e61 	.word	0x08007e61
 8007e34:	08007e4f 	.word	0x08007e4f
 8007e38:	08007e61 	.word	0x08007e61
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	08007e61 	.word	0x08007e61
 8007e44:	08007e5b 	.word	0x08007e5b
 8007e48:	2300      	movs	r3, #0
 8007e4a:	77fb      	strb	r3, [r7, #31]
 8007e4c:	e118      	b.n	8008080 <UART_SetConfig+0x348>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	77fb      	strb	r3, [r7, #31]
 8007e52:	e115      	b.n	8008080 <UART_SetConfig+0x348>
 8007e54:	2304      	movs	r3, #4
 8007e56:	77fb      	strb	r3, [r7, #31]
 8007e58:	e112      	b.n	8008080 <UART_SetConfig+0x348>
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	77fb      	strb	r3, [r7, #31]
 8007e5e:	e10f      	b.n	8008080 <UART_SetConfig+0x348>
 8007e60:	2310      	movs	r3, #16
 8007e62:	77fb      	strb	r3, [r7, #31]
 8007e64:	e10c      	b.n	8008080 <UART_SetConfig+0x348>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a68      	ldr	r2, [pc, #416]	; (800800c <UART_SetConfig+0x2d4>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d120      	bne.n	8007eb2 <UART_SetConfig+0x17a>
 8007e70:	4b64      	ldr	r3, [pc, #400]	; (8008004 <UART_SetConfig+0x2cc>)
 8007e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e7a:	2b30      	cmp	r3, #48	; 0x30
 8007e7c:	d013      	beq.n	8007ea6 <UART_SetConfig+0x16e>
 8007e7e:	2b30      	cmp	r3, #48	; 0x30
 8007e80:	d814      	bhi.n	8007eac <UART_SetConfig+0x174>
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d009      	beq.n	8007e9a <UART_SetConfig+0x162>
 8007e86:	2b20      	cmp	r3, #32
 8007e88:	d810      	bhi.n	8007eac <UART_SetConfig+0x174>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <UART_SetConfig+0x15c>
 8007e8e:	2b10      	cmp	r3, #16
 8007e90:	d006      	beq.n	8007ea0 <UART_SetConfig+0x168>
 8007e92:	e00b      	b.n	8007eac <UART_SetConfig+0x174>
 8007e94:	2300      	movs	r3, #0
 8007e96:	77fb      	strb	r3, [r7, #31]
 8007e98:	e0f2      	b.n	8008080 <UART_SetConfig+0x348>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	77fb      	strb	r3, [r7, #31]
 8007e9e:	e0ef      	b.n	8008080 <UART_SetConfig+0x348>
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	77fb      	strb	r3, [r7, #31]
 8007ea4:	e0ec      	b.n	8008080 <UART_SetConfig+0x348>
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	77fb      	strb	r3, [r7, #31]
 8007eaa:	e0e9      	b.n	8008080 <UART_SetConfig+0x348>
 8007eac:	2310      	movs	r3, #16
 8007eae:	77fb      	strb	r3, [r7, #31]
 8007eb0:	e0e6      	b.n	8008080 <UART_SetConfig+0x348>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a56      	ldr	r2, [pc, #344]	; (8008010 <UART_SetConfig+0x2d8>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d120      	bne.n	8007efe <UART_SetConfig+0x1c6>
 8007ebc:	4b51      	ldr	r3, [pc, #324]	; (8008004 <UART_SetConfig+0x2cc>)
 8007ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ec8:	d013      	beq.n	8007ef2 <UART_SetConfig+0x1ba>
 8007eca:	2bc0      	cmp	r3, #192	; 0xc0
 8007ecc:	d814      	bhi.n	8007ef8 <UART_SetConfig+0x1c0>
 8007ece:	2b80      	cmp	r3, #128	; 0x80
 8007ed0:	d009      	beq.n	8007ee6 <UART_SetConfig+0x1ae>
 8007ed2:	2b80      	cmp	r3, #128	; 0x80
 8007ed4:	d810      	bhi.n	8007ef8 <UART_SetConfig+0x1c0>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <UART_SetConfig+0x1a8>
 8007eda:	2b40      	cmp	r3, #64	; 0x40
 8007edc:	d006      	beq.n	8007eec <UART_SetConfig+0x1b4>
 8007ede:	e00b      	b.n	8007ef8 <UART_SetConfig+0x1c0>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e0cc      	b.n	8008080 <UART_SetConfig+0x348>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	77fb      	strb	r3, [r7, #31]
 8007eea:	e0c9      	b.n	8008080 <UART_SetConfig+0x348>
 8007eec:	2304      	movs	r3, #4
 8007eee:	77fb      	strb	r3, [r7, #31]
 8007ef0:	e0c6      	b.n	8008080 <UART_SetConfig+0x348>
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	77fb      	strb	r3, [r7, #31]
 8007ef6:	e0c3      	b.n	8008080 <UART_SetConfig+0x348>
 8007ef8:	2310      	movs	r3, #16
 8007efa:	77fb      	strb	r3, [r7, #31]
 8007efc:	e0c0      	b.n	8008080 <UART_SetConfig+0x348>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a44      	ldr	r2, [pc, #272]	; (8008014 <UART_SetConfig+0x2dc>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d125      	bne.n	8007f54 <UART_SetConfig+0x21c>
 8007f08:	4b3e      	ldr	r3, [pc, #248]	; (8008004 <UART_SetConfig+0x2cc>)
 8007f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f16:	d017      	beq.n	8007f48 <UART_SetConfig+0x210>
 8007f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f1c:	d817      	bhi.n	8007f4e <UART_SetConfig+0x216>
 8007f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f22:	d00b      	beq.n	8007f3c <UART_SetConfig+0x204>
 8007f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f28:	d811      	bhi.n	8007f4e <UART_SetConfig+0x216>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <UART_SetConfig+0x1fe>
 8007f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f32:	d006      	beq.n	8007f42 <UART_SetConfig+0x20a>
 8007f34:	e00b      	b.n	8007f4e <UART_SetConfig+0x216>
 8007f36:	2300      	movs	r3, #0
 8007f38:	77fb      	strb	r3, [r7, #31]
 8007f3a:	e0a1      	b.n	8008080 <UART_SetConfig+0x348>
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	77fb      	strb	r3, [r7, #31]
 8007f40:	e09e      	b.n	8008080 <UART_SetConfig+0x348>
 8007f42:	2304      	movs	r3, #4
 8007f44:	77fb      	strb	r3, [r7, #31]
 8007f46:	e09b      	b.n	8008080 <UART_SetConfig+0x348>
 8007f48:	2308      	movs	r3, #8
 8007f4a:	77fb      	strb	r3, [r7, #31]
 8007f4c:	e098      	b.n	8008080 <UART_SetConfig+0x348>
 8007f4e:	2310      	movs	r3, #16
 8007f50:	77fb      	strb	r3, [r7, #31]
 8007f52:	e095      	b.n	8008080 <UART_SetConfig+0x348>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a2f      	ldr	r2, [pc, #188]	; (8008018 <UART_SetConfig+0x2e0>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d125      	bne.n	8007faa <UART_SetConfig+0x272>
 8007f5e:	4b29      	ldr	r3, [pc, #164]	; (8008004 <UART_SetConfig+0x2cc>)
 8007f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f6c:	d017      	beq.n	8007f9e <UART_SetConfig+0x266>
 8007f6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f72:	d817      	bhi.n	8007fa4 <UART_SetConfig+0x26c>
 8007f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f78:	d00b      	beq.n	8007f92 <UART_SetConfig+0x25a>
 8007f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f7e:	d811      	bhi.n	8007fa4 <UART_SetConfig+0x26c>
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <UART_SetConfig+0x254>
 8007f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f88:	d006      	beq.n	8007f98 <UART_SetConfig+0x260>
 8007f8a:	e00b      	b.n	8007fa4 <UART_SetConfig+0x26c>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	77fb      	strb	r3, [r7, #31]
 8007f90:	e076      	b.n	8008080 <UART_SetConfig+0x348>
 8007f92:	2302      	movs	r3, #2
 8007f94:	77fb      	strb	r3, [r7, #31]
 8007f96:	e073      	b.n	8008080 <UART_SetConfig+0x348>
 8007f98:	2304      	movs	r3, #4
 8007f9a:	77fb      	strb	r3, [r7, #31]
 8007f9c:	e070      	b.n	8008080 <UART_SetConfig+0x348>
 8007f9e:	2308      	movs	r3, #8
 8007fa0:	77fb      	strb	r3, [r7, #31]
 8007fa2:	e06d      	b.n	8008080 <UART_SetConfig+0x348>
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	77fb      	strb	r3, [r7, #31]
 8007fa8:	e06a      	b.n	8008080 <UART_SetConfig+0x348>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a1b      	ldr	r2, [pc, #108]	; (800801c <UART_SetConfig+0x2e4>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d138      	bne.n	8008026 <UART_SetConfig+0x2ee>
 8007fb4:	4b13      	ldr	r3, [pc, #76]	; (8008004 <UART_SetConfig+0x2cc>)
 8007fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007fbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fc2:	d017      	beq.n	8007ff4 <UART_SetConfig+0x2bc>
 8007fc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fc8:	d82a      	bhi.n	8008020 <UART_SetConfig+0x2e8>
 8007fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fce:	d00b      	beq.n	8007fe8 <UART_SetConfig+0x2b0>
 8007fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd4:	d824      	bhi.n	8008020 <UART_SetConfig+0x2e8>
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <UART_SetConfig+0x2aa>
 8007fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fde:	d006      	beq.n	8007fee <UART_SetConfig+0x2b6>
 8007fe0:	e01e      	b.n	8008020 <UART_SetConfig+0x2e8>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	77fb      	strb	r3, [r7, #31]
 8007fe6:	e04b      	b.n	8008080 <UART_SetConfig+0x348>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	77fb      	strb	r3, [r7, #31]
 8007fec:	e048      	b.n	8008080 <UART_SetConfig+0x348>
 8007fee:	2304      	movs	r3, #4
 8007ff0:	77fb      	strb	r3, [r7, #31]
 8007ff2:	e045      	b.n	8008080 <UART_SetConfig+0x348>
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e042      	b.n	8008080 <UART_SetConfig+0x348>
 8007ffa:	bf00      	nop
 8007ffc:	efff69f3 	.word	0xefff69f3
 8008000:	40011000 	.word	0x40011000
 8008004:	40023800 	.word	0x40023800
 8008008:	40004400 	.word	0x40004400
 800800c:	40004800 	.word	0x40004800
 8008010:	40004c00 	.word	0x40004c00
 8008014:	40005000 	.word	0x40005000
 8008018:	40011400 	.word	0x40011400
 800801c:	40007800 	.word	0x40007800
 8008020:	2310      	movs	r3, #16
 8008022:	77fb      	strb	r3, [r7, #31]
 8008024:	e02c      	b.n	8008080 <UART_SetConfig+0x348>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a72      	ldr	r2, [pc, #456]	; (80081f4 <UART_SetConfig+0x4bc>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d125      	bne.n	800807c <UART_SetConfig+0x344>
 8008030:	4b71      	ldr	r3, [pc, #452]	; (80081f8 <UART_SetConfig+0x4c0>)
 8008032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008036:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800803a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800803e:	d017      	beq.n	8008070 <UART_SetConfig+0x338>
 8008040:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008044:	d817      	bhi.n	8008076 <UART_SetConfig+0x33e>
 8008046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800804a:	d00b      	beq.n	8008064 <UART_SetConfig+0x32c>
 800804c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008050:	d811      	bhi.n	8008076 <UART_SetConfig+0x33e>
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <UART_SetConfig+0x326>
 8008056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800805a:	d006      	beq.n	800806a <UART_SetConfig+0x332>
 800805c:	e00b      	b.n	8008076 <UART_SetConfig+0x33e>
 800805e:	2300      	movs	r3, #0
 8008060:	77fb      	strb	r3, [r7, #31]
 8008062:	e00d      	b.n	8008080 <UART_SetConfig+0x348>
 8008064:	2302      	movs	r3, #2
 8008066:	77fb      	strb	r3, [r7, #31]
 8008068:	e00a      	b.n	8008080 <UART_SetConfig+0x348>
 800806a:	2304      	movs	r3, #4
 800806c:	77fb      	strb	r3, [r7, #31]
 800806e:	e007      	b.n	8008080 <UART_SetConfig+0x348>
 8008070:	2308      	movs	r3, #8
 8008072:	77fb      	strb	r3, [r7, #31]
 8008074:	e004      	b.n	8008080 <UART_SetConfig+0x348>
 8008076:	2310      	movs	r3, #16
 8008078:	77fb      	strb	r3, [r7, #31]
 800807a:	e001      	b.n	8008080 <UART_SetConfig+0x348>
 800807c:	2310      	movs	r3, #16
 800807e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008088:	d15b      	bne.n	8008142 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800808a:	7ffb      	ldrb	r3, [r7, #31]
 800808c:	2b08      	cmp	r3, #8
 800808e:	d828      	bhi.n	80080e2 <UART_SetConfig+0x3aa>
 8008090:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <UART_SetConfig+0x360>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	080080bd 	.word	0x080080bd
 800809c:	080080c5 	.word	0x080080c5
 80080a0:	080080cd 	.word	0x080080cd
 80080a4:	080080e3 	.word	0x080080e3
 80080a8:	080080d3 	.word	0x080080d3
 80080ac:	080080e3 	.word	0x080080e3
 80080b0:	080080e3 	.word	0x080080e3
 80080b4:	080080e3 	.word	0x080080e3
 80080b8:	080080db 	.word	0x080080db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080bc:	f7fd fbec 	bl	8005898 <HAL_RCC_GetPCLK1Freq>
 80080c0:	61b8      	str	r0, [r7, #24]
        break;
 80080c2:	e013      	b.n	80080ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080c4:	f7fd fbfc 	bl	80058c0 <HAL_RCC_GetPCLK2Freq>
 80080c8:	61b8      	str	r0, [r7, #24]
        break;
 80080ca:	e00f      	b.n	80080ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080cc:	4b4b      	ldr	r3, [pc, #300]	; (80081fc <UART_SetConfig+0x4c4>)
 80080ce:	61bb      	str	r3, [r7, #24]
        break;
 80080d0:	e00c      	b.n	80080ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080d2:	f7fd facf 	bl	8005674 <HAL_RCC_GetSysClockFreq>
 80080d6:	61b8      	str	r0, [r7, #24]
        break;
 80080d8:	e008      	b.n	80080ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080de:	61bb      	str	r3, [r7, #24]
        break;
 80080e0:	e004      	b.n	80080ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	77bb      	strb	r3, [r7, #30]
        break;
 80080ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d074      	beq.n	80081dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	005a      	lsls	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	085b      	lsrs	r3, r3, #1
 80080fc:	441a      	add	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	fbb2 f3f3 	udiv	r3, r2, r3
 8008106:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	2b0f      	cmp	r3, #15
 800810c:	d916      	bls.n	800813c <UART_SetConfig+0x404>
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008114:	d212      	bcs.n	800813c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	b29b      	uxth	r3, r3
 800811a:	f023 030f 	bic.w	r3, r3, #15
 800811e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	085b      	lsrs	r3, r3, #1
 8008124:	b29b      	uxth	r3, r3
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	b29a      	uxth	r2, r3
 800812c:	89fb      	ldrh	r3, [r7, #14]
 800812e:	4313      	orrs	r3, r2
 8008130:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	89fa      	ldrh	r2, [r7, #14]
 8008138:	60da      	str	r2, [r3, #12]
 800813a:	e04f      	b.n	80081dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	77bb      	strb	r3, [r7, #30]
 8008140:	e04c      	b.n	80081dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008142:	7ffb      	ldrb	r3, [r7, #31]
 8008144:	2b08      	cmp	r3, #8
 8008146:	d828      	bhi.n	800819a <UART_SetConfig+0x462>
 8008148:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <UART_SetConfig+0x418>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008175 	.word	0x08008175
 8008154:	0800817d 	.word	0x0800817d
 8008158:	08008185 	.word	0x08008185
 800815c:	0800819b 	.word	0x0800819b
 8008160:	0800818b 	.word	0x0800818b
 8008164:	0800819b 	.word	0x0800819b
 8008168:	0800819b 	.word	0x0800819b
 800816c:	0800819b 	.word	0x0800819b
 8008170:	08008193 	.word	0x08008193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008174:	f7fd fb90 	bl	8005898 <HAL_RCC_GetPCLK1Freq>
 8008178:	61b8      	str	r0, [r7, #24]
        break;
 800817a:	e013      	b.n	80081a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800817c:	f7fd fba0 	bl	80058c0 <HAL_RCC_GetPCLK2Freq>
 8008180:	61b8      	str	r0, [r7, #24]
        break;
 8008182:	e00f      	b.n	80081a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008184:	4b1d      	ldr	r3, [pc, #116]	; (80081fc <UART_SetConfig+0x4c4>)
 8008186:	61bb      	str	r3, [r7, #24]
        break;
 8008188:	e00c      	b.n	80081a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800818a:	f7fd fa73 	bl	8005674 <HAL_RCC_GetSysClockFreq>
 800818e:	61b8      	str	r0, [r7, #24]
        break;
 8008190:	e008      	b.n	80081a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008196:	61bb      	str	r3, [r7, #24]
        break;
 8008198:	e004      	b.n	80081a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	77bb      	strb	r3, [r7, #30]
        break;
 80081a2:	bf00      	nop
    }

    if (pclk != 0U)
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d018      	beq.n	80081dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	085a      	lsrs	r2, r3, #1
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	441a      	add	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b0f      	cmp	r3, #15
 80081c2:	d909      	bls.n	80081d8 <UART_SetConfig+0x4a0>
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ca:	d205      	bcs.n	80081d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60da      	str	r2, [r3, #12]
 80081d6:	e001      	b.n	80081dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80081e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3720      	adds	r7, #32
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	40007c00 	.word	0x40007c00
 80081f8:	40023800 	.word	0x40023800
 80081fc:	00f42400 	.word	0x00f42400

08008200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00a      	beq.n	800822a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00a      	beq.n	800824c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	f003 0308 	and.w	r3, r3, #8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	430a      	orrs	r2, r1
 800828e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00a      	beq.n	80082b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	f003 0320 	and.w	r3, r3, #32
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	430a      	orrs	r2, r1
 80082d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01a      	beq.n	8008316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082fe:	d10a      	bne.n	8008316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	605a      	str	r2, [r3, #4]
  }
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af02      	add	r7, sp, #8
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008354:	f7fa ff0c 	bl	8003170 <HAL_GetTick>
 8008358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b08      	cmp	r3, #8
 8008366:	d10e      	bne.n	8008386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f81b 	bl	80083b2 <UART_WaitOnFlagUntilTimeout>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e011      	b.n	80083aa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2220      	movs	r2, #32
 8008390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b09c      	sub	sp, #112	; 0x70
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	60b9      	str	r1, [r7, #8]
 80083bc:	603b      	str	r3, [r7, #0]
 80083be:	4613      	mov	r3, r2
 80083c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c2:	e0a7      	b.n	8008514 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ca:	f000 80a3 	beq.w	8008514 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ce:	f7fa fecf 	bl	8003170 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80083da:	429a      	cmp	r2, r3
 80083dc:	d302      	bcc.n	80083e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80083de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d13f      	bne.n	8008464 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083f8:	667b      	str	r3, [r7, #100]	; 0x64
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008404:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008408:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e6      	bne.n	80083e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3308      	adds	r3, #8
 800841c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	f023 0301 	bic.w	r3, r3, #1
 800842c:	663b      	str	r3, [r7, #96]	; 0x60
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3308      	adds	r3, #8
 8008434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008436:	64ba      	str	r2, [r7, #72]	; 0x48
 8008438:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800843c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e5      	bne.n	8008416 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2220      	movs	r2, #32
 800844e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2220      	movs	r2, #32
 8008454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e068      	b.n	8008536 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	2b00      	cmp	r3, #0
 8008470:	d050      	beq.n	8008514 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800847c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008480:	d148      	bne.n	8008514 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800848a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084aa:	637b      	str	r3, [r7, #52]	; 0x34
 80084ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e6      	bne.n	800848c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3308      	adds	r3, #8
 80084c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	613b      	str	r3, [r7, #16]
   return(result);
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f023 0301 	bic.w	r3, r3, #1
 80084d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3308      	adds	r3, #8
 80084dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084de:	623a      	str	r2, [r7, #32]
 80084e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	69f9      	ldr	r1, [r7, #28]
 80084e4:	6a3a      	ldr	r2, [r7, #32]
 80084e6:	e841 2300 	strex	r3, r2, [r1]
 80084ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1e5      	bne.n	80084be <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2220      	movs	r2, #32
 80084f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2220      	movs	r2, #32
 8008504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e010      	b.n	8008536 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	69da      	ldr	r2, [r3, #28]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	4013      	ands	r3, r2
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	429a      	cmp	r2, r3
 8008522:	bf0c      	ite	eq
 8008524:	2301      	moveq	r3, #1
 8008526:	2300      	movne	r3, #0
 8008528:	b2db      	uxtb	r3, r3
 800852a:	461a      	mov	r2, r3
 800852c:	79fb      	ldrb	r3, [r7, #7]
 800852e:	429a      	cmp	r2, r3
 8008530:	f43f af48 	beq.w	80083c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3770      	adds	r7, #112	; 0x70
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
	...

08008540 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008540:	b480      	push	{r7}
 8008542:	b097      	sub	sp, #92	; 0x5c
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	4613      	mov	r3, r2
 800854c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	88fa      	ldrh	r2, [r7, #6]
 8008558:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	88fa      	ldrh	r2, [r7, #6]
 8008560:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008572:	d10e      	bne.n	8008592 <UART_Start_Receive_IT+0x52>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d105      	bne.n	8008588 <UART_Start_Receive_IT+0x48>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008582:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008586:	e02d      	b.n	80085e4 <UART_Start_Receive_IT+0xa4>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	22ff      	movs	r2, #255	; 0xff
 800858c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008590:	e028      	b.n	80085e4 <UART_Start_Receive_IT+0xa4>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10d      	bne.n	80085b6 <UART_Start_Receive_IT+0x76>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d104      	bne.n	80085ac <UART_Start_Receive_IT+0x6c>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	22ff      	movs	r2, #255	; 0xff
 80085a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085aa:	e01b      	b.n	80085e4 <UART_Start_Receive_IT+0xa4>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	227f      	movs	r2, #127	; 0x7f
 80085b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085b4:	e016      	b.n	80085e4 <UART_Start_Receive_IT+0xa4>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085be:	d10d      	bne.n	80085dc <UART_Start_Receive_IT+0x9c>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d104      	bne.n	80085d2 <UART_Start_Receive_IT+0x92>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	227f      	movs	r2, #127	; 0x7f
 80085cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085d0:	e008      	b.n	80085e4 <UART_Start_Receive_IT+0xa4>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	223f      	movs	r2, #63	; 0x3f
 80085d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085da:	e003      	b.n	80085e4 <UART_Start_Receive_IT+0xa4>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2222      	movs	r2, #34	; 0x22
 80085f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3308      	adds	r3, #8
 80085fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	657b      	str	r3, [r7, #84]	; 0x54
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3308      	adds	r3, #8
 8008612:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008614:	64ba      	str	r2, [r7, #72]	; 0x48
 8008616:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800861a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800861c:	e841 2300 	strex	r3, r2, [r1]
 8008620:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e5      	bne.n	80085f4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008630:	d107      	bne.n	8008642 <UART_Start_Receive_IT+0x102>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d103      	bne.n	8008642 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4a21      	ldr	r2, [pc, #132]	; (80086c4 <UART_Start_Receive_IT+0x184>)
 800863e:	669a      	str	r2, [r3, #104]	; 0x68
 8008640:	e002      	b.n	8008648 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	4a20      	ldr	r2, [pc, #128]	; (80086c8 <UART_Start_Receive_IT+0x188>)
 8008646:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d019      	beq.n	8008684 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	e853 3f00 	ldrex	r3, [r3]
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866e:	637b      	str	r3, [r7, #52]	; 0x34
 8008670:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1e6      	bne.n	8008650 <UART_Start_Receive_IT+0x110>
 8008682:	e018      	b.n	80086b6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	613b      	str	r3, [r7, #16]
   return(result);
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f043 0320 	orr.w	r3, r3, #32
 8008698:	653b      	str	r3, [r7, #80]	; 0x50
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a2:	623b      	str	r3, [r7, #32]
 80086a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a6:	69f9      	ldr	r1, [r7, #28]
 80086a8:	6a3a      	ldr	r2, [r7, #32]
 80086aa:	e841 2300 	strex	r3, r2, [r1]
 80086ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1e6      	bne.n	8008684 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	375c      	adds	r7, #92	; 0x5c
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	0800897b 	.word	0x0800897b
 80086c8:	08008815 	.word	0x08008815

080086cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b095      	sub	sp, #84	; 0x54
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f2:	643b      	str	r3, [r7, #64]	; 0x40
 80086f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e6      	bne.n	80086d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3308      	adds	r3, #8
 800870c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	61fb      	str	r3, [r7, #28]
   return(result);
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f023 0301 	bic.w	r3, r3, #1
 800871c:	64bb      	str	r3, [r7, #72]	; 0x48
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3308      	adds	r3, #8
 8008724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008728:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800872c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e5      	bne.n	8008706 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800873e:	2b01      	cmp	r3, #1
 8008740:	d118      	bne.n	8008774 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f023 0310 	bic.w	r3, r3, #16
 8008756:	647b      	str	r3, [r7, #68]	; 0x44
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008760:	61bb      	str	r3, [r7, #24]
 8008762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6979      	ldr	r1, [r7, #20]
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	613b      	str	r3, [r7, #16]
   return(result);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e6      	bne.n	8008742 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2220      	movs	r2, #32
 8008778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008788:	bf00      	nop
 800878a:	3754      	adds	r7, #84	; 0x54
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f7ff faaa 	bl	8007d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087b8:	bf00      	nop
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087dc:	61fb      	str	r3, [r7, #28]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	61bb      	str	r3, [r7, #24]
 80087e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ea:	6979      	ldr	r1, [r7, #20]
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	e841 2300 	strex	r3, r2, [r1]
 80087f2:	613b      	str	r3, [r7, #16]
   return(result);
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1e6      	bne.n	80087c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2220      	movs	r2, #32
 80087fe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7ff fa76 	bl	8007cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800880c:	bf00      	nop
 800880e:	3720      	adds	r7, #32
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b096      	sub	sp, #88	; 0x58
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008822:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800882c:	2b22      	cmp	r3, #34	; 0x22
 800882e:	f040 8098 	bne.w	8008962 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800883c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008840:	b2d9      	uxtb	r1, r3
 8008842:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008846:	b2da      	uxtb	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884c:	400a      	ands	r2, r1
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008862:	b29b      	uxth	r3, r3
 8008864:	3b01      	subs	r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008874:	b29b      	uxth	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d17b      	bne.n	8008972 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	e853 3f00 	ldrex	r3, [r3]
 8008886:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800888e:	653b      	str	r3, [r7, #80]	; 0x50
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	461a      	mov	r2, r3
 8008896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008898:	647b      	str	r3, [r7, #68]	; 0x44
 800889a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800889e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e6      	bne.n	800887a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3308      	adds	r3, #8
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	e853 3f00 	ldrex	r3, [r3]
 80088ba:	623b      	str	r3, [r7, #32]
   return(result);
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	f023 0301 	bic.w	r3, r3, #1
 80088c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3308      	adds	r3, #8
 80088ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088cc:	633a      	str	r2, [r7, #48]	; 0x30
 80088ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d4:	e841 2300 	strex	r3, r2, [r1]
 80088d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e5      	bne.n	80088ac <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2220      	movs	r2, #32
 80088e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d12e      	bne.n	800895a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 0310 	bic.w	r3, r3, #16
 8008916:	64bb      	str	r3, [r7, #72]	; 0x48
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008920:	61fb      	str	r3, [r7, #28]
 8008922:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	69b9      	ldr	r1, [r7, #24]
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	617b      	str	r3, [r7, #20]
   return(result);
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e6      	bne.n	8008902 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	f003 0310 	and.w	r3, r3, #16
 800893e:	2b10      	cmp	r3, #16
 8008940:	d103      	bne.n	800894a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2210      	movs	r2, #16
 8008948:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff f9e4 	bl	8007d20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008958:	e00b      	b.n	8008972 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7f9 f9c6 	bl	8001cec <HAL_UART_RxCpltCallback>
}
 8008960:	e007      	b.n	8008972 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	699a      	ldr	r2, [r3, #24]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f042 0208 	orr.w	r2, r2, #8
 8008970:	619a      	str	r2, [r3, #24]
}
 8008972:	bf00      	nop
 8008974:	3758      	adds	r7, #88	; 0x58
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b096      	sub	sp, #88	; 0x58
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008988:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008992:	2b22      	cmp	r3, #34	; 0x22
 8008994:	f040 8098 	bne.w	8008ac8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80089a8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80089ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089b0:	4013      	ands	r3, r2
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089bc:	1c9a      	adds	r2, r3, #2
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	3b01      	subs	r3, #1
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089da:	b29b      	uxth	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d17b      	bne.n	8008ad8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e8:	e853 3f00 	ldrex	r3, [r3]
 80089ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008a00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a06:	e841 2300 	strex	r3, r2, [r1]
 8008a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e6      	bne.n	80089e0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3308      	adds	r3, #8
 8008a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	f023 0301 	bic.w	r3, r3, #1
 8008a28:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3308      	adds	r3, #8
 8008a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e5      	bne.n	8008a12 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d12e      	bne.n	8008ac0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f023 0310 	bic.w	r3, r3, #16
 8008a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a86:	61bb      	str	r3, [r7, #24]
 8008a88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6979      	ldr	r1, [r7, #20]
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	613b      	str	r3, [r7, #16]
   return(result);
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e6      	bne.n	8008a68 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b10      	cmp	r3, #16
 8008aa6:	d103      	bne.n	8008ab0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2210      	movs	r2, #16
 8008aae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff f931 	bl	8007d20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008abe:	e00b      	b.n	8008ad8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7f9 f913 	bl	8001cec <HAL_UART_RxCpltCallback>
}
 8008ac6:	e007      	b.n	8008ad8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	699a      	ldr	r2, [r3, #24]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0208 	orr.w	r2, r2, #8
 8008ad6:	619a      	str	r2, [r3, #24]
}
 8008ad8:	bf00      	nop
 8008ada:	3758      	adds	r7, #88	; 0x58
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <atof>:
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	f000 be97 	b.w	8009814 <strtod>
	...

08008ae8 <gcvt>:
 8008ae8:	b530      	push	{r4, r5, lr}
 8008aea:	2200      	movs	r2, #0
 8008aec:	b085      	sub	sp, #20
 8008aee:	460c      	mov	r4, r1
 8008af0:	4605      	mov	r5, r0
 8008af2:	2300      	movs	r3, #0
 8008af4:	ec51 0b10 	vmov	r0, r1, d0
 8008af8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008afc:	f7f8 f80e 	bl	8000b1c <__aeabi_dcmplt>
 8008b00:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008b04:	4622      	mov	r2, r4
 8008b06:	b118      	cbz	r0, 8008b10 <gcvt+0x28>
 8008b08:	232d      	movs	r3, #45	; 0x2d
 8008b0a:	f802 3b01 	strb.w	r3, [r2], #1
 8008b0e:	3d01      	subs	r5, #1
 8008b10:	2300      	movs	r3, #0
 8008b12:	4806      	ldr	r0, [pc, #24]	; (8008b2c <gcvt+0x44>)
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	4629      	mov	r1, r5
 8008b18:	2367      	movs	r3, #103	; 0x67
 8008b1a:	6800      	ldr	r0, [r0, #0]
 8008b1c:	f000 ff00 	bl	8009920 <_gcvt>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	bf14      	ite	ne
 8008b24:	4620      	movne	r0, r4
 8008b26:	2000      	moveq	r0, #0
 8008b28:	b005      	add	sp, #20
 8008b2a:	bd30      	pop	{r4, r5, pc}
 8008b2c:	2000001c 	.word	0x2000001c

08008b30 <__errno>:
 8008b30:	4b01      	ldr	r3, [pc, #4]	; (8008b38 <__errno+0x8>)
 8008b32:	6818      	ldr	r0, [r3, #0]
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	2000001c 	.word	0x2000001c

08008b3c <__libc_init_array>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	4d0d      	ldr	r5, [pc, #52]	; (8008b74 <__libc_init_array+0x38>)
 8008b40:	4c0d      	ldr	r4, [pc, #52]	; (8008b78 <__libc_init_array+0x3c>)
 8008b42:	1b64      	subs	r4, r4, r5
 8008b44:	10a4      	asrs	r4, r4, #2
 8008b46:	2600      	movs	r6, #0
 8008b48:	42a6      	cmp	r6, r4
 8008b4a:	d109      	bne.n	8008b60 <__libc_init_array+0x24>
 8008b4c:	4d0b      	ldr	r5, [pc, #44]	; (8008b7c <__libc_init_array+0x40>)
 8008b4e:	4c0c      	ldr	r4, [pc, #48]	; (8008b80 <__libc_init_array+0x44>)
 8008b50:	f003 ff0a 	bl	800c968 <_init>
 8008b54:	1b64      	subs	r4, r4, r5
 8008b56:	10a4      	asrs	r4, r4, #2
 8008b58:	2600      	movs	r6, #0
 8008b5a:	42a6      	cmp	r6, r4
 8008b5c:	d105      	bne.n	8008b6a <__libc_init_array+0x2e>
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b64:	4798      	blx	r3
 8008b66:	3601      	adds	r6, #1
 8008b68:	e7ee      	b.n	8008b48 <__libc_init_array+0xc>
 8008b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b6e:	4798      	blx	r3
 8008b70:	3601      	adds	r6, #1
 8008b72:	e7f2      	b.n	8008b5a <__libc_init_array+0x1e>
 8008b74:	0800d628 	.word	0x0800d628
 8008b78:	0800d628 	.word	0x0800d628
 8008b7c:	0800d628 	.word	0x0800d628
 8008b80:	0800d62c 	.word	0x0800d62c

08008b84 <memcpy>:
 8008b84:	440a      	add	r2, r1
 8008b86:	4291      	cmp	r1, r2
 8008b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b8c:	d100      	bne.n	8008b90 <memcpy+0xc>
 8008b8e:	4770      	bx	lr
 8008b90:	b510      	push	{r4, lr}
 8008b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b9a:	4291      	cmp	r1, r2
 8008b9c:	d1f9      	bne.n	8008b92 <memcpy+0xe>
 8008b9e:	bd10      	pop	{r4, pc}

08008ba0 <memset>:
 8008ba0:	4402      	add	r2, r0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d100      	bne.n	8008baa <memset+0xa>
 8008ba8:	4770      	bx	lr
 8008baa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bae:	e7f9      	b.n	8008ba4 <memset+0x4>

08008bb0 <strcat>:
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	7814      	ldrb	r4, [r2, #0]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	3201      	adds	r2, #1
 8008bba:	2c00      	cmp	r4, #0
 8008bbc:	d1fa      	bne.n	8008bb4 <strcat+0x4>
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bc4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bc8:	2a00      	cmp	r2, #0
 8008bca:	d1f9      	bne.n	8008bc0 <strcat+0x10>
 8008bcc:	bd10      	pop	{r4, pc}

08008bce <sulp>:
 8008bce:	b570      	push	{r4, r5, r6, lr}
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	ec45 4b10 	vmov	d0, r4, r5
 8008bd8:	4616      	mov	r6, r2
 8008bda:	f001 fe55 	bl	800a888 <__ulp>
 8008bde:	ec51 0b10 	vmov	r0, r1, d0
 8008be2:	b17e      	cbz	r6, 8008c04 <sulp+0x36>
 8008be4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008be8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dd09      	ble.n	8008c04 <sulp+0x36>
 8008bf0:	051b      	lsls	r3, r3, #20
 8008bf2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008bf6:	2400      	movs	r4, #0
 8008bf8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008bfc:	4622      	mov	r2, r4
 8008bfe:	462b      	mov	r3, r5
 8008c00:	f7f7 fd1a 	bl	8000638 <__aeabi_dmul>
 8008c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c08 <_strtod_l>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	ed2d 8b02 	vpush	{d8}
 8008c10:	b09d      	sub	sp, #116	; 0x74
 8008c12:	461f      	mov	r7, r3
 8008c14:	2300      	movs	r3, #0
 8008c16:	9318      	str	r3, [sp, #96]	; 0x60
 8008c18:	4ba2      	ldr	r3, [pc, #648]	; (8008ea4 <_strtod_l+0x29c>)
 8008c1a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	9305      	str	r3, [sp, #20]
 8008c20:	4604      	mov	r4, r0
 8008c22:	4618      	mov	r0, r3
 8008c24:	4688      	mov	r8, r1
 8008c26:	f7f7 faf3 	bl	8000210 <strlen>
 8008c2a:	f04f 0a00 	mov.w	sl, #0
 8008c2e:	4605      	mov	r5, r0
 8008c30:	f04f 0b00 	mov.w	fp, #0
 8008c34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	2a2b      	cmp	r2, #43	; 0x2b
 8008c3e:	d04e      	beq.n	8008cde <_strtod_l+0xd6>
 8008c40:	d83b      	bhi.n	8008cba <_strtod_l+0xb2>
 8008c42:	2a0d      	cmp	r2, #13
 8008c44:	d834      	bhi.n	8008cb0 <_strtod_l+0xa8>
 8008c46:	2a08      	cmp	r2, #8
 8008c48:	d834      	bhi.n	8008cb4 <_strtod_l+0xac>
 8008c4a:	2a00      	cmp	r2, #0
 8008c4c:	d03e      	beq.n	8008ccc <_strtod_l+0xc4>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	930a      	str	r3, [sp, #40]	; 0x28
 8008c52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008c54:	7833      	ldrb	r3, [r6, #0]
 8008c56:	2b30      	cmp	r3, #48	; 0x30
 8008c58:	f040 80b0 	bne.w	8008dbc <_strtod_l+0x1b4>
 8008c5c:	7873      	ldrb	r3, [r6, #1]
 8008c5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c62:	2b58      	cmp	r3, #88	; 0x58
 8008c64:	d168      	bne.n	8008d38 <_strtod_l+0x130>
 8008c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	ab18      	add	r3, sp, #96	; 0x60
 8008c6c:	9702      	str	r7, [sp, #8]
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	4a8d      	ldr	r2, [pc, #564]	; (8008ea8 <_strtod_l+0x2a0>)
 8008c72:	ab19      	add	r3, sp, #100	; 0x64
 8008c74:	a917      	add	r1, sp, #92	; 0x5c
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 ff7a 	bl	8009b70 <__gethex>
 8008c7c:	f010 0707 	ands.w	r7, r0, #7
 8008c80:	4605      	mov	r5, r0
 8008c82:	d005      	beq.n	8008c90 <_strtod_l+0x88>
 8008c84:	2f06      	cmp	r7, #6
 8008c86:	d12c      	bne.n	8008ce2 <_strtod_l+0xda>
 8008c88:	3601      	adds	r6, #1
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f040 8590 	bne.w	80097b8 <_strtod_l+0xbb0>
 8008c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c9a:	b1eb      	cbz	r3, 8008cd8 <_strtod_l+0xd0>
 8008c9c:	4652      	mov	r2, sl
 8008c9e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008ca2:	ec43 2b10 	vmov	d0, r2, r3
 8008ca6:	b01d      	add	sp, #116	; 0x74
 8008ca8:	ecbd 8b02 	vpop	{d8}
 8008cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb0:	2a20      	cmp	r2, #32
 8008cb2:	d1cc      	bne.n	8008c4e <_strtod_l+0x46>
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008cb8:	e7be      	b.n	8008c38 <_strtod_l+0x30>
 8008cba:	2a2d      	cmp	r2, #45	; 0x2d
 8008cbc:	d1c7      	bne.n	8008c4e <_strtod_l+0x46>
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	920a      	str	r2, [sp, #40]	; 0x28
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cc6:	785b      	ldrb	r3, [r3, #1]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1c2      	bne.n	8008c52 <_strtod_l+0x4a>
 8008ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f040 856e 	bne.w	80097b4 <_strtod_l+0xbac>
 8008cd8:	4652      	mov	r2, sl
 8008cda:	465b      	mov	r3, fp
 8008cdc:	e7e1      	b.n	8008ca2 <_strtod_l+0x9a>
 8008cde:	2200      	movs	r2, #0
 8008ce0:	e7ee      	b.n	8008cc0 <_strtod_l+0xb8>
 8008ce2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ce4:	b13a      	cbz	r2, 8008cf6 <_strtod_l+0xee>
 8008ce6:	2135      	movs	r1, #53	; 0x35
 8008ce8:	a81a      	add	r0, sp, #104	; 0x68
 8008cea:	f001 fef7 	bl	800aadc <__copybits>
 8008cee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f001 fa97 	bl	800a224 <_Bfree>
 8008cf6:	3f01      	subs	r7, #1
 8008cf8:	2f04      	cmp	r7, #4
 8008cfa:	d806      	bhi.n	8008d0a <_strtod_l+0x102>
 8008cfc:	e8df f007 	tbb	[pc, r7]
 8008d00:	1714030a 	.word	0x1714030a
 8008d04:	0a          	.byte	0x0a
 8008d05:	00          	.byte	0x00
 8008d06:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008d0a:	0728      	lsls	r0, r5, #28
 8008d0c:	d5c0      	bpl.n	8008c90 <_strtod_l+0x88>
 8008d0e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008d12:	e7bd      	b.n	8008c90 <_strtod_l+0x88>
 8008d14:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008d18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d26:	e7f0      	b.n	8008d0a <_strtod_l+0x102>
 8008d28:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008eac <_strtod_l+0x2a4>
 8008d2c:	e7ed      	b.n	8008d0a <_strtod_l+0x102>
 8008d2e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008d32:	f04f 3aff 	mov.w	sl, #4294967295
 8008d36:	e7e8      	b.n	8008d0a <_strtod_l+0x102>
 8008d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d3a:	1c5a      	adds	r2, r3, #1
 8008d3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d3e:	785b      	ldrb	r3, [r3, #1]
 8008d40:	2b30      	cmp	r3, #48	; 0x30
 8008d42:	d0f9      	beq.n	8008d38 <_strtod_l+0x130>
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0a3      	beq.n	8008c90 <_strtod_l+0x88>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	f04f 0900 	mov.w	r9, #0
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d52:	9308      	str	r3, [sp, #32]
 8008d54:	f8cd 901c 	str.w	r9, [sp, #28]
 8008d58:	464f      	mov	r7, r9
 8008d5a:	220a      	movs	r2, #10
 8008d5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008d5e:	7806      	ldrb	r6, [r0, #0]
 8008d60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d64:	b2d9      	uxtb	r1, r3
 8008d66:	2909      	cmp	r1, #9
 8008d68:	d92a      	bls.n	8008dc0 <_strtod_l+0x1b8>
 8008d6a:	9905      	ldr	r1, [sp, #20]
 8008d6c:	462a      	mov	r2, r5
 8008d6e:	f002 f957 	bl	800b020 <strncmp>
 8008d72:	b398      	cbz	r0, 8008ddc <_strtod_l+0x1d4>
 8008d74:	2000      	movs	r0, #0
 8008d76:	4632      	mov	r2, r6
 8008d78:	463d      	mov	r5, r7
 8008d7a:	9005      	str	r0, [sp, #20]
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2a65      	cmp	r2, #101	; 0x65
 8008d80:	d001      	beq.n	8008d86 <_strtod_l+0x17e>
 8008d82:	2a45      	cmp	r2, #69	; 0x45
 8008d84:	d118      	bne.n	8008db8 <_strtod_l+0x1b0>
 8008d86:	b91d      	cbnz	r5, 8008d90 <_strtod_l+0x188>
 8008d88:	9a04      	ldr	r2, [sp, #16]
 8008d8a:	4302      	orrs	r2, r0
 8008d8c:	d09e      	beq.n	8008ccc <_strtod_l+0xc4>
 8008d8e:	2500      	movs	r5, #0
 8008d90:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008d94:	f108 0201 	add.w	r2, r8, #1
 8008d98:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d9a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008d9e:	2a2b      	cmp	r2, #43	; 0x2b
 8008da0:	d075      	beq.n	8008e8e <_strtod_l+0x286>
 8008da2:	2a2d      	cmp	r2, #45	; 0x2d
 8008da4:	d07b      	beq.n	8008e9e <_strtod_l+0x296>
 8008da6:	f04f 0c00 	mov.w	ip, #0
 8008daa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008dae:	2909      	cmp	r1, #9
 8008db0:	f240 8082 	bls.w	8008eb8 <_strtod_l+0x2b0>
 8008db4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008db8:	2600      	movs	r6, #0
 8008dba:	e09d      	b.n	8008ef8 <_strtod_l+0x2f0>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e7c4      	b.n	8008d4a <_strtod_l+0x142>
 8008dc0:	2f08      	cmp	r7, #8
 8008dc2:	bfd8      	it	le
 8008dc4:	9907      	ldrle	r1, [sp, #28]
 8008dc6:	f100 0001 	add.w	r0, r0, #1
 8008dca:	bfda      	itte	le
 8008dcc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008dd0:	9307      	strle	r3, [sp, #28]
 8008dd2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008dd6:	3701      	adds	r7, #1
 8008dd8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008dda:	e7bf      	b.n	8008d5c <_strtod_l+0x154>
 8008ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dde:	195a      	adds	r2, r3, r5
 8008de0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008de2:	5d5a      	ldrb	r2, [r3, r5]
 8008de4:	2f00      	cmp	r7, #0
 8008de6:	d037      	beq.n	8008e58 <_strtod_l+0x250>
 8008de8:	9005      	str	r0, [sp, #20]
 8008dea:	463d      	mov	r5, r7
 8008dec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008df0:	2b09      	cmp	r3, #9
 8008df2:	d912      	bls.n	8008e1a <_strtod_l+0x212>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e7c2      	b.n	8008d7e <_strtod_l+0x176>
 8008df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008dfe:	785a      	ldrb	r2, [r3, #1]
 8008e00:	3001      	adds	r0, #1
 8008e02:	2a30      	cmp	r2, #48	; 0x30
 8008e04:	d0f8      	beq.n	8008df8 <_strtod_l+0x1f0>
 8008e06:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e0a:	2b08      	cmp	r3, #8
 8008e0c:	f200 84d9 	bhi.w	80097c2 <_strtod_l+0xbba>
 8008e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e12:	9005      	str	r0, [sp, #20]
 8008e14:	2000      	movs	r0, #0
 8008e16:	9308      	str	r3, [sp, #32]
 8008e18:	4605      	mov	r5, r0
 8008e1a:	3a30      	subs	r2, #48	; 0x30
 8008e1c:	f100 0301 	add.w	r3, r0, #1
 8008e20:	d014      	beq.n	8008e4c <_strtod_l+0x244>
 8008e22:	9905      	ldr	r1, [sp, #20]
 8008e24:	4419      	add	r1, r3
 8008e26:	9105      	str	r1, [sp, #20]
 8008e28:	462b      	mov	r3, r5
 8008e2a:	eb00 0e05 	add.w	lr, r0, r5
 8008e2e:	210a      	movs	r1, #10
 8008e30:	4573      	cmp	r3, lr
 8008e32:	d113      	bne.n	8008e5c <_strtod_l+0x254>
 8008e34:	182b      	adds	r3, r5, r0
 8008e36:	2b08      	cmp	r3, #8
 8008e38:	f105 0501 	add.w	r5, r5, #1
 8008e3c:	4405      	add	r5, r0
 8008e3e:	dc1c      	bgt.n	8008e7a <_strtod_l+0x272>
 8008e40:	9907      	ldr	r1, [sp, #28]
 8008e42:	230a      	movs	r3, #10
 8008e44:	fb03 2301 	mla	r3, r3, r1, r2
 8008e48:	9307      	str	r3, [sp, #28]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e4e:	1c51      	adds	r1, r2, #1
 8008e50:	9117      	str	r1, [sp, #92]	; 0x5c
 8008e52:	7852      	ldrb	r2, [r2, #1]
 8008e54:	4618      	mov	r0, r3
 8008e56:	e7c9      	b.n	8008dec <_strtod_l+0x1e4>
 8008e58:	4638      	mov	r0, r7
 8008e5a:	e7d2      	b.n	8008e02 <_strtod_l+0x1fa>
 8008e5c:	2b08      	cmp	r3, #8
 8008e5e:	dc04      	bgt.n	8008e6a <_strtod_l+0x262>
 8008e60:	9e07      	ldr	r6, [sp, #28]
 8008e62:	434e      	muls	r6, r1
 8008e64:	9607      	str	r6, [sp, #28]
 8008e66:	3301      	adds	r3, #1
 8008e68:	e7e2      	b.n	8008e30 <_strtod_l+0x228>
 8008e6a:	f103 0c01 	add.w	ip, r3, #1
 8008e6e:	f1bc 0f10 	cmp.w	ip, #16
 8008e72:	bfd8      	it	le
 8008e74:	fb01 f909 	mulle.w	r9, r1, r9
 8008e78:	e7f5      	b.n	8008e66 <_strtod_l+0x25e>
 8008e7a:	2d10      	cmp	r5, #16
 8008e7c:	bfdc      	itt	le
 8008e7e:	230a      	movle	r3, #10
 8008e80:	fb03 2909 	mlale	r9, r3, r9, r2
 8008e84:	e7e1      	b.n	8008e4a <_strtod_l+0x242>
 8008e86:	2300      	movs	r3, #0
 8008e88:	9305      	str	r3, [sp, #20]
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e77c      	b.n	8008d88 <_strtod_l+0x180>
 8008e8e:	f04f 0c00 	mov.w	ip, #0
 8008e92:	f108 0202 	add.w	r2, r8, #2
 8008e96:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e98:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008e9c:	e785      	b.n	8008daa <_strtod_l+0x1a2>
 8008e9e:	f04f 0c01 	mov.w	ip, #1
 8008ea2:	e7f6      	b.n	8008e92 <_strtod_l+0x28a>
 8008ea4:	0800d260 	.word	0x0800d260
 8008ea8:	0800d198 	.word	0x0800d198
 8008eac:	7ff00000 	.word	0x7ff00000
 8008eb0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008eb2:	1c51      	adds	r1, r2, #1
 8008eb4:	9117      	str	r1, [sp, #92]	; 0x5c
 8008eb6:	7852      	ldrb	r2, [r2, #1]
 8008eb8:	2a30      	cmp	r2, #48	; 0x30
 8008eba:	d0f9      	beq.n	8008eb0 <_strtod_l+0x2a8>
 8008ebc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ec0:	2908      	cmp	r1, #8
 8008ec2:	f63f af79 	bhi.w	8008db8 <_strtod_l+0x1b0>
 8008ec6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008eca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ecc:	9206      	str	r2, [sp, #24]
 8008ece:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ed0:	1c51      	adds	r1, r2, #1
 8008ed2:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ed4:	7852      	ldrb	r2, [r2, #1]
 8008ed6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008eda:	2e09      	cmp	r6, #9
 8008edc:	d937      	bls.n	8008f4e <_strtod_l+0x346>
 8008ede:	9e06      	ldr	r6, [sp, #24]
 8008ee0:	1b89      	subs	r1, r1, r6
 8008ee2:	2908      	cmp	r1, #8
 8008ee4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008ee8:	dc02      	bgt.n	8008ef0 <_strtod_l+0x2e8>
 8008eea:	4576      	cmp	r6, lr
 8008eec:	bfa8      	it	ge
 8008eee:	4676      	movge	r6, lr
 8008ef0:	f1bc 0f00 	cmp.w	ip, #0
 8008ef4:	d000      	beq.n	8008ef8 <_strtod_l+0x2f0>
 8008ef6:	4276      	negs	r6, r6
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	d14d      	bne.n	8008f98 <_strtod_l+0x390>
 8008efc:	9904      	ldr	r1, [sp, #16]
 8008efe:	4301      	orrs	r1, r0
 8008f00:	f47f aec6 	bne.w	8008c90 <_strtod_l+0x88>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f47f aee1 	bne.w	8008ccc <_strtod_l+0xc4>
 8008f0a:	2a69      	cmp	r2, #105	; 0x69
 8008f0c:	d027      	beq.n	8008f5e <_strtod_l+0x356>
 8008f0e:	dc24      	bgt.n	8008f5a <_strtod_l+0x352>
 8008f10:	2a49      	cmp	r2, #73	; 0x49
 8008f12:	d024      	beq.n	8008f5e <_strtod_l+0x356>
 8008f14:	2a4e      	cmp	r2, #78	; 0x4e
 8008f16:	f47f aed9 	bne.w	8008ccc <_strtod_l+0xc4>
 8008f1a:	499f      	ldr	r1, [pc, #636]	; (8009198 <_strtod_l+0x590>)
 8008f1c:	a817      	add	r0, sp, #92	; 0x5c
 8008f1e:	f001 f87f 	bl	800a020 <__match>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f43f aed2 	beq.w	8008ccc <_strtod_l+0xc4>
 8008f28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b28      	cmp	r3, #40	; 0x28
 8008f2e:	d12d      	bne.n	8008f8c <_strtod_l+0x384>
 8008f30:	499a      	ldr	r1, [pc, #616]	; (800919c <_strtod_l+0x594>)
 8008f32:	aa1a      	add	r2, sp, #104	; 0x68
 8008f34:	a817      	add	r0, sp, #92	; 0x5c
 8008f36:	f001 f887 	bl	800a048 <__hexnan>
 8008f3a:	2805      	cmp	r0, #5
 8008f3c:	d126      	bne.n	8008f8c <_strtod_l+0x384>
 8008f3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008f44:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008f48:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008f4c:	e6a0      	b.n	8008c90 <_strtod_l+0x88>
 8008f4e:	210a      	movs	r1, #10
 8008f50:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008f54:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008f58:	e7b9      	b.n	8008ece <_strtod_l+0x2c6>
 8008f5a:	2a6e      	cmp	r2, #110	; 0x6e
 8008f5c:	e7db      	b.n	8008f16 <_strtod_l+0x30e>
 8008f5e:	4990      	ldr	r1, [pc, #576]	; (80091a0 <_strtod_l+0x598>)
 8008f60:	a817      	add	r0, sp, #92	; 0x5c
 8008f62:	f001 f85d 	bl	800a020 <__match>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f43f aeb0 	beq.w	8008ccc <_strtod_l+0xc4>
 8008f6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f6e:	498d      	ldr	r1, [pc, #564]	; (80091a4 <_strtod_l+0x59c>)
 8008f70:	3b01      	subs	r3, #1
 8008f72:	a817      	add	r0, sp, #92	; 0x5c
 8008f74:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f76:	f001 f853 	bl	800a020 <__match>
 8008f7a:	b910      	cbnz	r0, 8008f82 <_strtod_l+0x37a>
 8008f7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f7e:	3301      	adds	r3, #1
 8008f80:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f82:	f8df b230 	ldr.w	fp, [pc, #560]	; 80091b4 <_strtod_l+0x5ac>
 8008f86:	f04f 0a00 	mov.w	sl, #0
 8008f8a:	e681      	b.n	8008c90 <_strtod_l+0x88>
 8008f8c:	4886      	ldr	r0, [pc, #536]	; (80091a8 <_strtod_l+0x5a0>)
 8008f8e:	f002 f827 	bl	800afe0 <nan>
 8008f92:	ec5b ab10 	vmov	sl, fp, d0
 8008f96:	e67b      	b.n	8008c90 <_strtod_l+0x88>
 8008f98:	9b05      	ldr	r3, [sp, #20]
 8008f9a:	9807      	ldr	r0, [sp, #28]
 8008f9c:	1af3      	subs	r3, r6, r3
 8008f9e:	2f00      	cmp	r7, #0
 8008fa0:	bf08      	it	eq
 8008fa2:	462f      	moveq	r7, r5
 8008fa4:	2d10      	cmp	r5, #16
 8008fa6:	9306      	str	r3, [sp, #24]
 8008fa8:	46a8      	mov	r8, r5
 8008faa:	bfa8      	it	ge
 8008fac:	f04f 0810 	movge.w	r8, #16
 8008fb0:	f7f7 fac8 	bl	8000544 <__aeabi_ui2d>
 8008fb4:	2d09      	cmp	r5, #9
 8008fb6:	4682      	mov	sl, r0
 8008fb8:	468b      	mov	fp, r1
 8008fba:	dd13      	ble.n	8008fe4 <_strtod_l+0x3dc>
 8008fbc:	4b7b      	ldr	r3, [pc, #492]	; (80091ac <_strtod_l+0x5a4>)
 8008fbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008fc2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008fc6:	f7f7 fb37 	bl	8000638 <__aeabi_dmul>
 8008fca:	4682      	mov	sl, r0
 8008fcc:	4648      	mov	r0, r9
 8008fce:	468b      	mov	fp, r1
 8008fd0:	f7f7 fab8 	bl	8000544 <__aeabi_ui2d>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4650      	mov	r0, sl
 8008fda:	4659      	mov	r1, fp
 8008fdc:	f7f7 f976 	bl	80002cc <__adddf3>
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	468b      	mov	fp, r1
 8008fe4:	2d0f      	cmp	r5, #15
 8008fe6:	dc38      	bgt.n	800905a <_strtod_l+0x452>
 8008fe8:	9b06      	ldr	r3, [sp, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f43f ae50 	beq.w	8008c90 <_strtod_l+0x88>
 8008ff0:	dd24      	ble.n	800903c <_strtod_l+0x434>
 8008ff2:	2b16      	cmp	r3, #22
 8008ff4:	dc0b      	bgt.n	800900e <_strtod_l+0x406>
 8008ff6:	496d      	ldr	r1, [pc, #436]	; (80091ac <_strtod_l+0x5a4>)
 8008ff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009000:	4652      	mov	r2, sl
 8009002:	465b      	mov	r3, fp
 8009004:	f7f7 fb18 	bl	8000638 <__aeabi_dmul>
 8009008:	4682      	mov	sl, r0
 800900a:	468b      	mov	fp, r1
 800900c:	e640      	b.n	8008c90 <_strtod_l+0x88>
 800900e:	9a06      	ldr	r2, [sp, #24]
 8009010:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009014:	4293      	cmp	r3, r2
 8009016:	db20      	blt.n	800905a <_strtod_l+0x452>
 8009018:	4c64      	ldr	r4, [pc, #400]	; (80091ac <_strtod_l+0x5a4>)
 800901a:	f1c5 050f 	rsb	r5, r5, #15
 800901e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009022:	4652      	mov	r2, sl
 8009024:	465b      	mov	r3, fp
 8009026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800902a:	f7f7 fb05 	bl	8000638 <__aeabi_dmul>
 800902e:	9b06      	ldr	r3, [sp, #24]
 8009030:	1b5d      	subs	r5, r3, r5
 8009032:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009036:	e9d4 2300 	ldrd	r2, r3, [r4]
 800903a:	e7e3      	b.n	8009004 <_strtod_l+0x3fc>
 800903c:	9b06      	ldr	r3, [sp, #24]
 800903e:	3316      	adds	r3, #22
 8009040:	db0b      	blt.n	800905a <_strtod_l+0x452>
 8009042:	9b05      	ldr	r3, [sp, #20]
 8009044:	1b9e      	subs	r6, r3, r6
 8009046:	4b59      	ldr	r3, [pc, #356]	; (80091ac <_strtod_l+0x5a4>)
 8009048:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800904c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009050:	4650      	mov	r0, sl
 8009052:	4659      	mov	r1, fp
 8009054:	f7f7 fc1a 	bl	800088c <__aeabi_ddiv>
 8009058:	e7d6      	b.n	8009008 <_strtod_l+0x400>
 800905a:	9b06      	ldr	r3, [sp, #24]
 800905c:	eba5 0808 	sub.w	r8, r5, r8
 8009060:	4498      	add	r8, r3
 8009062:	f1b8 0f00 	cmp.w	r8, #0
 8009066:	dd74      	ble.n	8009152 <_strtod_l+0x54a>
 8009068:	f018 030f 	ands.w	r3, r8, #15
 800906c:	d00a      	beq.n	8009084 <_strtod_l+0x47c>
 800906e:	494f      	ldr	r1, [pc, #316]	; (80091ac <_strtod_l+0x5a4>)
 8009070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009074:	4652      	mov	r2, sl
 8009076:	465b      	mov	r3, fp
 8009078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800907c:	f7f7 fadc 	bl	8000638 <__aeabi_dmul>
 8009080:	4682      	mov	sl, r0
 8009082:	468b      	mov	fp, r1
 8009084:	f038 080f 	bics.w	r8, r8, #15
 8009088:	d04f      	beq.n	800912a <_strtod_l+0x522>
 800908a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800908e:	dd22      	ble.n	80090d6 <_strtod_l+0x4ce>
 8009090:	2500      	movs	r5, #0
 8009092:	462e      	mov	r6, r5
 8009094:	9507      	str	r5, [sp, #28]
 8009096:	9505      	str	r5, [sp, #20]
 8009098:	2322      	movs	r3, #34	; 0x22
 800909a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80091b4 <_strtod_l+0x5ac>
 800909e:	6023      	str	r3, [r4, #0]
 80090a0:	f04f 0a00 	mov.w	sl, #0
 80090a4:	9b07      	ldr	r3, [sp, #28]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f43f adf2 	beq.w	8008c90 <_strtod_l+0x88>
 80090ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090ae:	4620      	mov	r0, r4
 80090b0:	f001 f8b8 	bl	800a224 <_Bfree>
 80090b4:	9905      	ldr	r1, [sp, #20]
 80090b6:	4620      	mov	r0, r4
 80090b8:	f001 f8b4 	bl	800a224 <_Bfree>
 80090bc:	4631      	mov	r1, r6
 80090be:	4620      	mov	r0, r4
 80090c0:	f001 f8b0 	bl	800a224 <_Bfree>
 80090c4:	9907      	ldr	r1, [sp, #28]
 80090c6:	4620      	mov	r0, r4
 80090c8:	f001 f8ac 	bl	800a224 <_Bfree>
 80090cc:	4629      	mov	r1, r5
 80090ce:	4620      	mov	r0, r4
 80090d0:	f001 f8a8 	bl	800a224 <_Bfree>
 80090d4:	e5dc      	b.n	8008c90 <_strtod_l+0x88>
 80090d6:	4b36      	ldr	r3, [pc, #216]	; (80091b0 <_strtod_l+0x5a8>)
 80090d8:	9304      	str	r3, [sp, #16]
 80090da:	2300      	movs	r3, #0
 80090dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80090e0:	4650      	mov	r0, sl
 80090e2:	4659      	mov	r1, fp
 80090e4:	4699      	mov	r9, r3
 80090e6:	f1b8 0f01 	cmp.w	r8, #1
 80090ea:	dc21      	bgt.n	8009130 <_strtod_l+0x528>
 80090ec:	b10b      	cbz	r3, 80090f2 <_strtod_l+0x4ea>
 80090ee:	4682      	mov	sl, r0
 80090f0:	468b      	mov	fp, r1
 80090f2:	4b2f      	ldr	r3, [pc, #188]	; (80091b0 <_strtod_l+0x5a8>)
 80090f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80090f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80090fc:	4652      	mov	r2, sl
 80090fe:	465b      	mov	r3, fp
 8009100:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009104:	f7f7 fa98 	bl	8000638 <__aeabi_dmul>
 8009108:	4b2a      	ldr	r3, [pc, #168]	; (80091b4 <_strtod_l+0x5ac>)
 800910a:	460a      	mov	r2, r1
 800910c:	400b      	ands	r3, r1
 800910e:	492a      	ldr	r1, [pc, #168]	; (80091b8 <_strtod_l+0x5b0>)
 8009110:	428b      	cmp	r3, r1
 8009112:	4682      	mov	sl, r0
 8009114:	d8bc      	bhi.n	8009090 <_strtod_l+0x488>
 8009116:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800911a:	428b      	cmp	r3, r1
 800911c:	bf86      	itte	hi
 800911e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80091bc <_strtod_l+0x5b4>
 8009122:	f04f 3aff 	movhi.w	sl, #4294967295
 8009126:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800912a:	2300      	movs	r3, #0
 800912c:	9304      	str	r3, [sp, #16]
 800912e:	e084      	b.n	800923a <_strtod_l+0x632>
 8009130:	f018 0f01 	tst.w	r8, #1
 8009134:	d005      	beq.n	8009142 <_strtod_l+0x53a>
 8009136:	9b04      	ldr	r3, [sp, #16]
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f7f7 fa7c 	bl	8000638 <__aeabi_dmul>
 8009140:	2301      	movs	r3, #1
 8009142:	9a04      	ldr	r2, [sp, #16]
 8009144:	3208      	adds	r2, #8
 8009146:	f109 0901 	add.w	r9, r9, #1
 800914a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800914e:	9204      	str	r2, [sp, #16]
 8009150:	e7c9      	b.n	80090e6 <_strtod_l+0x4de>
 8009152:	d0ea      	beq.n	800912a <_strtod_l+0x522>
 8009154:	f1c8 0800 	rsb	r8, r8, #0
 8009158:	f018 020f 	ands.w	r2, r8, #15
 800915c:	d00a      	beq.n	8009174 <_strtod_l+0x56c>
 800915e:	4b13      	ldr	r3, [pc, #76]	; (80091ac <_strtod_l+0x5a4>)
 8009160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009164:	4650      	mov	r0, sl
 8009166:	4659      	mov	r1, fp
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f7f7 fb8e 	bl	800088c <__aeabi_ddiv>
 8009170:	4682      	mov	sl, r0
 8009172:	468b      	mov	fp, r1
 8009174:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009178:	d0d7      	beq.n	800912a <_strtod_l+0x522>
 800917a:	f1b8 0f1f 	cmp.w	r8, #31
 800917e:	dd1f      	ble.n	80091c0 <_strtod_l+0x5b8>
 8009180:	2500      	movs	r5, #0
 8009182:	462e      	mov	r6, r5
 8009184:	9507      	str	r5, [sp, #28]
 8009186:	9505      	str	r5, [sp, #20]
 8009188:	2322      	movs	r3, #34	; 0x22
 800918a:	f04f 0a00 	mov.w	sl, #0
 800918e:	f04f 0b00 	mov.w	fp, #0
 8009192:	6023      	str	r3, [r4, #0]
 8009194:	e786      	b.n	80090a4 <_strtod_l+0x49c>
 8009196:	bf00      	nop
 8009198:	0800d193 	.word	0x0800d193
 800919c:	0800d1ac 	.word	0x0800d1ac
 80091a0:	0800d190 	.word	0x0800d190
 80091a4:	0800d546 	.word	0x0800d546
 80091a8:	0800d441 	.word	0x0800d441
 80091ac:	0800d310 	.word	0x0800d310
 80091b0:	0800d2e8 	.word	0x0800d2e8
 80091b4:	7ff00000 	.word	0x7ff00000
 80091b8:	7ca00000 	.word	0x7ca00000
 80091bc:	7fefffff 	.word	0x7fefffff
 80091c0:	f018 0310 	ands.w	r3, r8, #16
 80091c4:	bf18      	it	ne
 80091c6:	236a      	movne	r3, #106	; 0x6a
 80091c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009578 <_strtod_l+0x970>
 80091cc:	9304      	str	r3, [sp, #16]
 80091ce:	4650      	mov	r0, sl
 80091d0:	4659      	mov	r1, fp
 80091d2:	2300      	movs	r3, #0
 80091d4:	f018 0f01 	tst.w	r8, #1
 80091d8:	d004      	beq.n	80091e4 <_strtod_l+0x5dc>
 80091da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80091de:	f7f7 fa2b 	bl	8000638 <__aeabi_dmul>
 80091e2:	2301      	movs	r3, #1
 80091e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80091e8:	f109 0908 	add.w	r9, r9, #8
 80091ec:	d1f2      	bne.n	80091d4 <_strtod_l+0x5cc>
 80091ee:	b10b      	cbz	r3, 80091f4 <_strtod_l+0x5ec>
 80091f0:	4682      	mov	sl, r0
 80091f2:	468b      	mov	fp, r1
 80091f4:	9b04      	ldr	r3, [sp, #16]
 80091f6:	b1c3      	cbz	r3, 800922a <_strtod_l+0x622>
 80091f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80091fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009200:	2b00      	cmp	r3, #0
 8009202:	4659      	mov	r1, fp
 8009204:	dd11      	ble.n	800922a <_strtod_l+0x622>
 8009206:	2b1f      	cmp	r3, #31
 8009208:	f340 8124 	ble.w	8009454 <_strtod_l+0x84c>
 800920c:	2b34      	cmp	r3, #52	; 0x34
 800920e:	bfde      	ittt	le
 8009210:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009214:	f04f 33ff 	movle.w	r3, #4294967295
 8009218:	fa03 f202 	lslle.w	r2, r3, r2
 800921c:	f04f 0a00 	mov.w	sl, #0
 8009220:	bfcc      	ite	gt
 8009222:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009226:	ea02 0b01 	andle.w	fp, r2, r1
 800922a:	2200      	movs	r2, #0
 800922c:	2300      	movs	r3, #0
 800922e:	4650      	mov	r0, sl
 8009230:	4659      	mov	r1, fp
 8009232:	f7f7 fc69 	bl	8000b08 <__aeabi_dcmpeq>
 8009236:	2800      	cmp	r0, #0
 8009238:	d1a2      	bne.n	8009180 <_strtod_l+0x578>
 800923a:	9b07      	ldr	r3, [sp, #28]
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	9908      	ldr	r1, [sp, #32]
 8009240:	462b      	mov	r3, r5
 8009242:	463a      	mov	r2, r7
 8009244:	4620      	mov	r0, r4
 8009246:	f001 f855 	bl	800a2f4 <__s2b>
 800924a:	9007      	str	r0, [sp, #28]
 800924c:	2800      	cmp	r0, #0
 800924e:	f43f af1f 	beq.w	8009090 <_strtod_l+0x488>
 8009252:	9b05      	ldr	r3, [sp, #20]
 8009254:	1b9e      	subs	r6, r3, r6
 8009256:	9b06      	ldr	r3, [sp, #24]
 8009258:	2b00      	cmp	r3, #0
 800925a:	bfb4      	ite	lt
 800925c:	4633      	movlt	r3, r6
 800925e:	2300      	movge	r3, #0
 8009260:	930c      	str	r3, [sp, #48]	; 0x30
 8009262:	9b06      	ldr	r3, [sp, #24]
 8009264:	2500      	movs	r5, #0
 8009266:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800926a:	9312      	str	r3, [sp, #72]	; 0x48
 800926c:	462e      	mov	r6, r5
 800926e:	9b07      	ldr	r3, [sp, #28]
 8009270:	4620      	mov	r0, r4
 8009272:	6859      	ldr	r1, [r3, #4]
 8009274:	f000 ff96 	bl	800a1a4 <_Balloc>
 8009278:	9005      	str	r0, [sp, #20]
 800927a:	2800      	cmp	r0, #0
 800927c:	f43f af0c 	beq.w	8009098 <_strtod_l+0x490>
 8009280:	9b07      	ldr	r3, [sp, #28]
 8009282:	691a      	ldr	r2, [r3, #16]
 8009284:	3202      	adds	r2, #2
 8009286:	f103 010c 	add.w	r1, r3, #12
 800928a:	0092      	lsls	r2, r2, #2
 800928c:	300c      	adds	r0, #12
 800928e:	f7ff fc79 	bl	8008b84 <memcpy>
 8009292:	ec4b ab10 	vmov	d0, sl, fp
 8009296:	aa1a      	add	r2, sp, #104	; 0x68
 8009298:	a919      	add	r1, sp, #100	; 0x64
 800929a:	4620      	mov	r0, r4
 800929c:	f001 fb70 	bl	800a980 <__d2b>
 80092a0:	ec4b ab18 	vmov	d8, sl, fp
 80092a4:	9018      	str	r0, [sp, #96]	; 0x60
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f43f aef6 	beq.w	8009098 <_strtod_l+0x490>
 80092ac:	2101      	movs	r1, #1
 80092ae:	4620      	mov	r0, r4
 80092b0:	f001 f8ba 	bl	800a428 <__i2b>
 80092b4:	4606      	mov	r6, r0
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f43f aeee 	beq.w	8009098 <_strtod_l+0x490>
 80092bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092be:	9904      	ldr	r1, [sp, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	bfab      	itete	ge
 80092c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80092c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80092c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80092ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80092ce:	bfac      	ite	ge
 80092d0:	eb03 0902 	addge.w	r9, r3, r2
 80092d4:	1ad7      	sublt	r7, r2, r3
 80092d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80092d8:	eba3 0801 	sub.w	r8, r3, r1
 80092dc:	4490      	add	r8, r2
 80092de:	4ba1      	ldr	r3, [pc, #644]	; (8009564 <_strtod_l+0x95c>)
 80092e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80092e4:	4598      	cmp	r8, r3
 80092e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092ea:	f280 80c7 	bge.w	800947c <_strtod_l+0x874>
 80092ee:	eba3 0308 	sub.w	r3, r3, r8
 80092f2:	2b1f      	cmp	r3, #31
 80092f4:	eba2 0203 	sub.w	r2, r2, r3
 80092f8:	f04f 0101 	mov.w	r1, #1
 80092fc:	f300 80b1 	bgt.w	8009462 <_strtod_l+0x85a>
 8009300:	fa01 f303 	lsl.w	r3, r1, r3
 8009304:	930d      	str	r3, [sp, #52]	; 0x34
 8009306:	2300      	movs	r3, #0
 8009308:	9308      	str	r3, [sp, #32]
 800930a:	eb09 0802 	add.w	r8, r9, r2
 800930e:	9b04      	ldr	r3, [sp, #16]
 8009310:	45c1      	cmp	r9, r8
 8009312:	4417      	add	r7, r2
 8009314:	441f      	add	r7, r3
 8009316:	464b      	mov	r3, r9
 8009318:	bfa8      	it	ge
 800931a:	4643      	movge	r3, r8
 800931c:	42bb      	cmp	r3, r7
 800931e:	bfa8      	it	ge
 8009320:	463b      	movge	r3, r7
 8009322:	2b00      	cmp	r3, #0
 8009324:	bfc2      	ittt	gt
 8009326:	eba8 0803 	subgt.w	r8, r8, r3
 800932a:	1aff      	subgt	r7, r7, r3
 800932c:	eba9 0903 	subgt.w	r9, r9, r3
 8009330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009332:	2b00      	cmp	r3, #0
 8009334:	dd17      	ble.n	8009366 <_strtod_l+0x75e>
 8009336:	4631      	mov	r1, r6
 8009338:	461a      	mov	r2, r3
 800933a:	4620      	mov	r0, r4
 800933c:	f001 f934 	bl	800a5a8 <__pow5mult>
 8009340:	4606      	mov	r6, r0
 8009342:	2800      	cmp	r0, #0
 8009344:	f43f aea8 	beq.w	8009098 <_strtod_l+0x490>
 8009348:	4601      	mov	r1, r0
 800934a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800934c:	4620      	mov	r0, r4
 800934e:	f001 f881 	bl	800a454 <__multiply>
 8009352:	900b      	str	r0, [sp, #44]	; 0x2c
 8009354:	2800      	cmp	r0, #0
 8009356:	f43f ae9f 	beq.w	8009098 <_strtod_l+0x490>
 800935a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800935c:	4620      	mov	r0, r4
 800935e:	f000 ff61 	bl	800a224 <_Bfree>
 8009362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009364:	9318      	str	r3, [sp, #96]	; 0x60
 8009366:	f1b8 0f00 	cmp.w	r8, #0
 800936a:	f300 808c 	bgt.w	8009486 <_strtod_l+0x87e>
 800936e:	9b06      	ldr	r3, [sp, #24]
 8009370:	2b00      	cmp	r3, #0
 8009372:	dd08      	ble.n	8009386 <_strtod_l+0x77e>
 8009374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009376:	9905      	ldr	r1, [sp, #20]
 8009378:	4620      	mov	r0, r4
 800937a:	f001 f915 	bl	800a5a8 <__pow5mult>
 800937e:	9005      	str	r0, [sp, #20]
 8009380:	2800      	cmp	r0, #0
 8009382:	f43f ae89 	beq.w	8009098 <_strtod_l+0x490>
 8009386:	2f00      	cmp	r7, #0
 8009388:	dd08      	ble.n	800939c <_strtod_l+0x794>
 800938a:	9905      	ldr	r1, [sp, #20]
 800938c:	463a      	mov	r2, r7
 800938e:	4620      	mov	r0, r4
 8009390:	f001 f964 	bl	800a65c <__lshift>
 8009394:	9005      	str	r0, [sp, #20]
 8009396:	2800      	cmp	r0, #0
 8009398:	f43f ae7e 	beq.w	8009098 <_strtod_l+0x490>
 800939c:	f1b9 0f00 	cmp.w	r9, #0
 80093a0:	dd08      	ble.n	80093b4 <_strtod_l+0x7ac>
 80093a2:	4631      	mov	r1, r6
 80093a4:	464a      	mov	r2, r9
 80093a6:	4620      	mov	r0, r4
 80093a8:	f001 f958 	bl	800a65c <__lshift>
 80093ac:	4606      	mov	r6, r0
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f43f ae72 	beq.w	8009098 <_strtod_l+0x490>
 80093b4:	9a05      	ldr	r2, [sp, #20]
 80093b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093b8:	4620      	mov	r0, r4
 80093ba:	f001 f9db 	bl	800a774 <__mdiff>
 80093be:	4605      	mov	r5, r0
 80093c0:	2800      	cmp	r0, #0
 80093c2:	f43f ae69 	beq.w	8009098 <_strtod_l+0x490>
 80093c6:	68c3      	ldr	r3, [r0, #12]
 80093c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80093ca:	2300      	movs	r3, #0
 80093cc:	60c3      	str	r3, [r0, #12]
 80093ce:	4631      	mov	r1, r6
 80093d0:	f001 f9b4 	bl	800a73c <__mcmp>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	da60      	bge.n	800949a <_strtod_l+0x892>
 80093d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093da:	ea53 030a 	orrs.w	r3, r3, sl
 80093de:	f040 8082 	bne.w	80094e6 <_strtod_l+0x8de>
 80093e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d17d      	bne.n	80094e6 <_strtod_l+0x8de>
 80093ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093ee:	0d1b      	lsrs	r3, r3, #20
 80093f0:	051b      	lsls	r3, r3, #20
 80093f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80093f6:	d976      	bls.n	80094e6 <_strtod_l+0x8de>
 80093f8:	696b      	ldr	r3, [r5, #20]
 80093fa:	b913      	cbnz	r3, 8009402 <_strtod_l+0x7fa>
 80093fc:	692b      	ldr	r3, [r5, #16]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	dd71      	ble.n	80094e6 <_strtod_l+0x8de>
 8009402:	4629      	mov	r1, r5
 8009404:	2201      	movs	r2, #1
 8009406:	4620      	mov	r0, r4
 8009408:	f001 f928 	bl	800a65c <__lshift>
 800940c:	4631      	mov	r1, r6
 800940e:	4605      	mov	r5, r0
 8009410:	f001 f994 	bl	800a73c <__mcmp>
 8009414:	2800      	cmp	r0, #0
 8009416:	dd66      	ble.n	80094e6 <_strtod_l+0x8de>
 8009418:	9904      	ldr	r1, [sp, #16]
 800941a:	4a53      	ldr	r2, [pc, #332]	; (8009568 <_strtod_l+0x960>)
 800941c:	465b      	mov	r3, fp
 800941e:	2900      	cmp	r1, #0
 8009420:	f000 8081 	beq.w	8009526 <_strtod_l+0x91e>
 8009424:	ea02 010b 	and.w	r1, r2, fp
 8009428:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800942c:	dc7b      	bgt.n	8009526 <_strtod_l+0x91e>
 800942e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009432:	f77f aea9 	ble.w	8009188 <_strtod_l+0x580>
 8009436:	4b4d      	ldr	r3, [pc, #308]	; (800956c <_strtod_l+0x964>)
 8009438:	4650      	mov	r0, sl
 800943a:	4659      	mov	r1, fp
 800943c:	2200      	movs	r2, #0
 800943e:	f7f7 f8fb 	bl	8000638 <__aeabi_dmul>
 8009442:	460b      	mov	r3, r1
 8009444:	4303      	orrs	r3, r0
 8009446:	bf08      	it	eq
 8009448:	2322      	moveq	r3, #34	; 0x22
 800944a:	4682      	mov	sl, r0
 800944c:	468b      	mov	fp, r1
 800944e:	bf08      	it	eq
 8009450:	6023      	streq	r3, [r4, #0]
 8009452:	e62b      	b.n	80090ac <_strtod_l+0x4a4>
 8009454:	f04f 32ff 	mov.w	r2, #4294967295
 8009458:	fa02 f303 	lsl.w	r3, r2, r3
 800945c:	ea03 0a0a 	and.w	sl, r3, sl
 8009460:	e6e3      	b.n	800922a <_strtod_l+0x622>
 8009462:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009466:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800946a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800946e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009472:	fa01 f308 	lsl.w	r3, r1, r8
 8009476:	9308      	str	r3, [sp, #32]
 8009478:	910d      	str	r1, [sp, #52]	; 0x34
 800947a:	e746      	b.n	800930a <_strtod_l+0x702>
 800947c:	2300      	movs	r3, #0
 800947e:	9308      	str	r3, [sp, #32]
 8009480:	2301      	movs	r3, #1
 8009482:	930d      	str	r3, [sp, #52]	; 0x34
 8009484:	e741      	b.n	800930a <_strtod_l+0x702>
 8009486:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009488:	4642      	mov	r2, r8
 800948a:	4620      	mov	r0, r4
 800948c:	f001 f8e6 	bl	800a65c <__lshift>
 8009490:	9018      	str	r0, [sp, #96]	; 0x60
 8009492:	2800      	cmp	r0, #0
 8009494:	f47f af6b 	bne.w	800936e <_strtod_l+0x766>
 8009498:	e5fe      	b.n	8009098 <_strtod_l+0x490>
 800949a:	465f      	mov	r7, fp
 800949c:	d16e      	bne.n	800957c <_strtod_l+0x974>
 800949e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094a4:	b342      	cbz	r2, 80094f8 <_strtod_l+0x8f0>
 80094a6:	4a32      	ldr	r2, [pc, #200]	; (8009570 <_strtod_l+0x968>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d128      	bne.n	80094fe <_strtod_l+0x8f6>
 80094ac:	9b04      	ldr	r3, [sp, #16]
 80094ae:	4651      	mov	r1, sl
 80094b0:	b1eb      	cbz	r3, 80094ee <_strtod_l+0x8e6>
 80094b2:	4b2d      	ldr	r3, [pc, #180]	; (8009568 <_strtod_l+0x960>)
 80094b4:	403b      	ands	r3, r7
 80094b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094ba:	f04f 32ff 	mov.w	r2, #4294967295
 80094be:	d819      	bhi.n	80094f4 <_strtod_l+0x8ec>
 80094c0:	0d1b      	lsrs	r3, r3, #20
 80094c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094c6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ca:	4299      	cmp	r1, r3
 80094cc:	d117      	bne.n	80094fe <_strtod_l+0x8f6>
 80094ce:	4b29      	ldr	r3, [pc, #164]	; (8009574 <_strtod_l+0x96c>)
 80094d0:	429f      	cmp	r7, r3
 80094d2:	d102      	bne.n	80094da <_strtod_l+0x8d2>
 80094d4:	3101      	adds	r1, #1
 80094d6:	f43f addf 	beq.w	8009098 <_strtod_l+0x490>
 80094da:	4b23      	ldr	r3, [pc, #140]	; (8009568 <_strtod_l+0x960>)
 80094dc:	403b      	ands	r3, r7
 80094de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80094e2:	f04f 0a00 	mov.w	sl, #0
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1a4      	bne.n	8009436 <_strtod_l+0x82e>
 80094ec:	e5de      	b.n	80090ac <_strtod_l+0x4a4>
 80094ee:	f04f 33ff 	mov.w	r3, #4294967295
 80094f2:	e7ea      	b.n	80094ca <_strtod_l+0x8c2>
 80094f4:	4613      	mov	r3, r2
 80094f6:	e7e8      	b.n	80094ca <_strtod_l+0x8c2>
 80094f8:	ea53 030a 	orrs.w	r3, r3, sl
 80094fc:	d08c      	beq.n	8009418 <_strtod_l+0x810>
 80094fe:	9b08      	ldr	r3, [sp, #32]
 8009500:	b1db      	cbz	r3, 800953a <_strtod_l+0x932>
 8009502:	423b      	tst	r3, r7
 8009504:	d0ef      	beq.n	80094e6 <_strtod_l+0x8de>
 8009506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009508:	9a04      	ldr	r2, [sp, #16]
 800950a:	4650      	mov	r0, sl
 800950c:	4659      	mov	r1, fp
 800950e:	b1c3      	cbz	r3, 8009542 <_strtod_l+0x93a>
 8009510:	f7ff fb5d 	bl	8008bce <sulp>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	ec51 0b18 	vmov	r0, r1, d8
 800951c:	f7f6 fed6 	bl	80002cc <__adddf3>
 8009520:	4682      	mov	sl, r0
 8009522:	468b      	mov	fp, r1
 8009524:	e7df      	b.n	80094e6 <_strtod_l+0x8de>
 8009526:	4013      	ands	r3, r2
 8009528:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800952c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009530:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009534:	f04f 3aff 	mov.w	sl, #4294967295
 8009538:	e7d5      	b.n	80094e6 <_strtod_l+0x8de>
 800953a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800953c:	ea13 0f0a 	tst.w	r3, sl
 8009540:	e7e0      	b.n	8009504 <_strtod_l+0x8fc>
 8009542:	f7ff fb44 	bl	8008bce <sulp>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	ec51 0b18 	vmov	r0, r1, d8
 800954e:	f7f6 febb 	bl	80002c8 <__aeabi_dsub>
 8009552:	2200      	movs	r2, #0
 8009554:	2300      	movs	r3, #0
 8009556:	4682      	mov	sl, r0
 8009558:	468b      	mov	fp, r1
 800955a:	f7f7 fad5 	bl	8000b08 <__aeabi_dcmpeq>
 800955e:	2800      	cmp	r0, #0
 8009560:	d0c1      	beq.n	80094e6 <_strtod_l+0x8de>
 8009562:	e611      	b.n	8009188 <_strtod_l+0x580>
 8009564:	fffffc02 	.word	0xfffffc02
 8009568:	7ff00000 	.word	0x7ff00000
 800956c:	39500000 	.word	0x39500000
 8009570:	000fffff 	.word	0x000fffff
 8009574:	7fefffff 	.word	0x7fefffff
 8009578:	0800d1c0 	.word	0x0800d1c0
 800957c:	4631      	mov	r1, r6
 800957e:	4628      	mov	r0, r5
 8009580:	f001 fa5a 	bl	800aa38 <__ratio>
 8009584:	ec59 8b10 	vmov	r8, r9, d0
 8009588:	ee10 0a10 	vmov	r0, s0
 800958c:	2200      	movs	r2, #0
 800958e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009592:	4649      	mov	r1, r9
 8009594:	f7f7 facc 	bl	8000b30 <__aeabi_dcmple>
 8009598:	2800      	cmp	r0, #0
 800959a:	d07a      	beq.n	8009692 <_strtod_l+0xa8a>
 800959c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d04a      	beq.n	8009638 <_strtod_l+0xa30>
 80095a2:	4b95      	ldr	r3, [pc, #596]	; (80097f8 <_strtod_l+0xbf0>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80097f8 <_strtod_l+0xbf0>
 80095ae:	f04f 0800 	mov.w	r8, #0
 80095b2:	4b92      	ldr	r3, [pc, #584]	; (80097fc <_strtod_l+0xbf4>)
 80095b4:	403b      	ands	r3, r7
 80095b6:	930d      	str	r3, [sp, #52]	; 0x34
 80095b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095ba:	4b91      	ldr	r3, [pc, #580]	; (8009800 <_strtod_l+0xbf8>)
 80095bc:	429a      	cmp	r2, r3
 80095be:	f040 80b0 	bne.w	8009722 <_strtod_l+0xb1a>
 80095c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80095ca:	ec4b ab10 	vmov	d0, sl, fp
 80095ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095d2:	f001 f959 	bl	800a888 <__ulp>
 80095d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095da:	ec53 2b10 	vmov	r2, r3, d0
 80095de:	f7f7 f82b 	bl	8000638 <__aeabi_dmul>
 80095e2:	4652      	mov	r2, sl
 80095e4:	465b      	mov	r3, fp
 80095e6:	f7f6 fe71 	bl	80002cc <__adddf3>
 80095ea:	460b      	mov	r3, r1
 80095ec:	4983      	ldr	r1, [pc, #524]	; (80097fc <_strtod_l+0xbf4>)
 80095ee:	4a85      	ldr	r2, [pc, #532]	; (8009804 <_strtod_l+0xbfc>)
 80095f0:	4019      	ands	r1, r3
 80095f2:	4291      	cmp	r1, r2
 80095f4:	4682      	mov	sl, r0
 80095f6:	d960      	bls.n	80096ba <_strtod_l+0xab2>
 80095f8:	ee18 3a90 	vmov	r3, s17
 80095fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009600:	4293      	cmp	r3, r2
 8009602:	d104      	bne.n	800960e <_strtod_l+0xa06>
 8009604:	ee18 3a10 	vmov	r3, s16
 8009608:	3301      	adds	r3, #1
 800960a:	f43f ad45 	beq.w	8009098 <_strtod_l+0x490>
 800960e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009810 <_strtod_l+0xc08>
 8009612:	f04f 3aff 	mov.w	sl, #4294967295
 8009616:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009618:	4620      	mov	r0, r4
 800961a:	f000 fe03 	bl	800a224 <_Bfree>
 800961e:	9905      	ldr	r1, [sp, #20]
 8009620:	4620      	mov	r0, r4
 8009622:	f000 fdff 	bl	800a224 <_Bfree>
 8009626:	4631      	mov	r1, r6
 8009628:	4620      	mov	r0, r4
 800962a:	f000 fdfb 	bl	800a224 <_Bfree>
 800962e:	4629      	mov	r1, r5
 8009630:	4620      	mov	r0, r4
 8009632:	f000 fdf7 	bl	800a224 <_Bfree>
 8009636:	e61a      	b.n	800926e <_strtod_l+0x666>
 8009638:	f1ba 0f00 	cmp.w	sl, #0
 800963c:	d11b      	bne.n	8009676 <_strtod_l+0xa6e>
 800963e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009642:	b9f3      	cbnz	r3, 8009682 <_strtod_l+0xa7a>
 8009644:	4b6c      	ldr	r3, [pc, #432]	; (80097f8 <_strtod_l+0xbf0>)
 8009646:	2200      	movs	r2, #0
 8009648:	4640      	mov	r0, r8
 800964a:	4649      	mov	r1, r9
 800964c:	f7f7 fa66 	bl	8000b1c <__aeabi_dcmplt>
 8009650:	b9d0      	cbnz	r0, 8009688 <_strtod_l+0xa80>
 8009652:	4640      	mov	r0, r8
 8009654:	4649      	mov	r1, r9
 8009656:	4b6c      	ldr	r3, [pc, #432]	; (8009808 <_strtod_l+0xc00>)
 8009658:	2200      	movs	r2, #0
 800965a:	f7f6 ffed 	bl	8000638 <__aeabi_dmul>
 800965e:	4680      	mov	r8, r0
 8009660:	4689      	mov	r9, r1
 8009662:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009666:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800966a:	9315      	str	r3, [sp, #84]	; 0x54
 800966c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009670:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009674:	e79d      	b.n	80095b2 <_strtod_l+0x9aa>
 8009676:	f1ba 0f01 	cmp.w	sl, #1
 800967a:	d102      	bne.n	8009682 <_strtod_l+0xa7a>
 800967c:	2f00      	cmp	r7, #0
 800967e:	f43f ad83 	beq.w	8009188 <_strtod_l+0x580>
 8009682:	4b62      	ldr	r3, [pc, #392]	; (800980c <_strtod_l+0xc04>)
 8009684:	2200      	movs	r2, #0
 8009686:	e78e      	b.n	80095a6 <_strtod_l+0x99e>
 8009688:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009808 <_strtod_l+0xc00>
 800968c:	f04f 0800 	mov.w	r8, #0
 8009690:	e7e7      	b.n	8009662 <_strtod_l+0xa5a>
 8009692:	4b5d      	ldr	r3, [pc, #372]	; (8009808 <_strtod_l+0xc00>)
 8009694:	4640      	mov	r0, r8
 8009696:	4649      	mov	r1, r9
 8009698:	2200      	movs	r2, #0
 800969a:	f7f6 ffcd 	bl	8000638 <__aeabi_dmul>
 800969e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a0:	4680      	mov	r8, r0
 80096a2:	4689      	mov	r9, r1
 80096a4:	b933      	cbnz	r3, 80096b4 <_strtod_l+0xaac>
 80096a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096aa:	900e      	str	r0, [sp, #56]	; 0x38
 80096ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80096ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80096b2:	e7dd      	b.n	8009670 <_strtod_l+0xa68>
 80096b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80096b8:	e7f9      	b.n	80096ae <_strtod_l+0xaa6>
 80096ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1a8      	bne.n	8009616 <_strtod_l+0xa0e>
 80096c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096ca:	0d1b      	lsrs	r3, r3, #20
 80096cc:	051b      	lsls	r3, r3, #20
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d1a1      	bne.n	8009616 <_strtod_l+0xa0e>
 80096d2:	4640      	mov	r0, r8
 80096d4:	4649      	mov	r1, r9
 80096d6:	f7f7 faf9 	bl	8000ccc <__aeabi_d2lz>
 80096da:	f7f6 ff7f 	bl	80005dc <__aeabi_l2d>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4640      	mov	r0, r8
 80096e4:	4649      	mov	r1, r9
 80096e6:	f7f6 fdef 	bl	80002c8 <__aeabi_dsub>
 80096ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096f0:	ea43 030a 	orr.w	r3, r3, sl
 80096f4:	4313      	orrs	r3, r2
 80096f6:	4680      	mov	r8, r0
 80096f8:	4689      	mov	r9, r1
 80096fa:	d055      	beq.n	80097a8 <_strtod_l+0xba0>
 80096fc:	a336      	add	r3, pc, #216	; (adr r3, 80097d8 <_strtod_l+0xbd0>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	f7f7 fa0b 	bl	8000b1c <__aeabi_dcmplt>
 8009706:	2800      	cmp	r0, #0
 8009708:	f47f acd0 	bne.w	80090ac <_strtod_l+0x4a4>
 800970c:	a334      	add	r3, pc, #208	; (adr r3, 80097e0 <_strtod_l+0xbd8>)
 800970e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009712:	4640      	mov	r0, r8
 8009714:	4649      	mov	r1, r9
 8009716:	f7f7 fa1f 	bl	8000b58 <__aeabi_dcmpgt>
 800971a:	2800      	cmp	r0, #0
 800971c:	f43f af7b 	beq.w	8009616 <_strtod_l+0xa0e>
 8009720:	e4c4      	b.n	80090ac <_strtod_l+0x4a4>
 8009722:	9b04      	ldr	r3, [sp, #16]
 8009724:	b333      	cbz	r3, 8009774 <_strtod_l+0xb6c>
 8009726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009728:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800972c:	d822      	bhi.n	8009774 <_strtod_l+0xb6c>
 800972e:	a32e      	add	r3, pc, #184	; (adr r3, 80097e8 <_strtod_l+0xbe0>)
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	4640      	mov	r0, r8
 8009736:	4649      	mov	r1, r9
 8009738:	f7f7 f9fa 	bl	8000b30 <__aeabi_dcmple>
 800973c:	b1a0      	cbz	r0, 8009768 <_strtod_l+0xb60>
 800973e:	4649      	mov	r1, r9
 8009740:	4640      	mov	r0, r8
 8009742:	f7f7 fa3b 	bl	8000bbc <__aeabi_d2uiz>
 8009746:	2801      	cmp	r0, #1
 8009748:	bf38      	it	cc
 800974a:	2001      	movcc	r0, #1
 800974c:	f7f6 fefa 	bl	8000544 <__aeabi_ui2d>
 8009750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009752:	4680      	mov	r8, r0
 8009754:	4689      	mov	r9, r1
 8009756:	bb23      	cbnz	r3, 80097a2 <_strtod_l+0xb9a>
 8009758:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800975c:	9010      	str	r0, [sp, #64]	; 0x40
 800975e:	9311      	str	r3, [sp, #68]	; 0x44
 8009760:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009764:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800976a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800976c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009770:	1a9b      	subs	r3, r3, r2
 8009772:	9309      	str	r3, [sp, #36]	; 0x24
 8009774:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009778:	eeb0 0a48 	vmov.f32	s0, s16
 800977c:	eef0 0a68 	vmov.f32	s1, s17
 8009780:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009784:	f001 f880 	bl	800a888 <__ulp>
 8009788:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800978c:	ec53 2b10 	vmov	r2, r3, d0
 8009790:	f7f6 ff52 	bl	8000638 <__aeabi_dmul>
 8009794:	ec53 2b18 	vmov	r2, r3, d8
 8009798:	f7f6 fd98 	bl	80002cc <__adddf3>
 800979c:	4682      	mov	sl, r0
 800979e:	468b      	mov	fp, r1
 80097a0:	e78d      	b.n	80096be <_strtod_l+0xab6>
 80097a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80097a6:	e7db      	b.n	8009760 <_strtod_l+0xb58>
 80097a8:	a311      	add	r3, pc, #68	; (adr r3, 80097f0 <_strtod_l+0xbe8>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f7 f9b5 	bl	8000b1c <__aeabi_dcmplt>
 80097b2:	e7b2      	b.n	800971a <_strtod_l+0xb12>
 80097b4:	2300      	movs	r3, #0
 80097b6:	930a      	str	r3, [sp, #40]	; 0x28
 80097b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80097ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	f7ff ba6b 	b.w	8008c98 <_strtod_l+0x90>
 80097c2:	2a65      	cmp	r2, #101	; 0x65
 80097c4:	f43f ab5f 	beq.w	8008e86 <_strtod_l+0x27e>
 80097c8:	2a45      	cmp	r2, #69	; 0x45
 80097ca:	f43f ab5c 	beq.w	8008e86 <_strtod_l+0x27e>
 80097ce:	2301      	movs	r3, #1
 80097d0:	f7ff bb94 	b.w	8008efc <_strtod_l+0x2f4>
 80097d4:	f3af 8000 	nop.w
 80097d8:	94a03595 	.word	0x94a03595
 80097dc:	3fdfffff 	.word	0x3fdfffff
 80097e0:	35afe535 	.word	0x35afe535
 80097e4:	3fe00000 	.word	0x3fe00000
 80097e8:	ffc00000 	.word	0xffc00000
 80097ec:	41dfffff 	.word	0x41dfffff
 80097f0:	94a03595 	.word	0x94a03595
 80097f4:	3fcfffff 	.word	0x3fcfffff
 80097f8:	3ff00000 	.word	0x3ff00000
 80097fc:	7ff00000 	.word	0x7ff00000
 8009800:	7fe00000 	.word	0x7fe00000
 8009804:	7c9fffff 	.word	0x7c9fffff
 8009808:	3fe00000 	.word	0x3fe00000
 800980c:	bff00000 	.word	0xbff00000
 8009810:	7fefffff 	.word	0x7fefffff

08009814 <strtod>:
 8009814:	460a      	mov	r2, r1
 8009816:	4601      	mov	r1, r0
 8009818:	4802      	ldr	r0, [pc, #8]	; (8009824 <strtod+0x10>)
 800981a:	4b03      	ldr	r3, [pc, #12]	; (8009828 <strtod+0x14>)
 800981c:	6800      	ldr	r0, [r0, #0]
 800981e:	f7ff b9f3 	b.w	8008c08 <_strtod_l>
 8009822:	bf00      	nop
 8009824:	2000001c 	.word	0x2000001c
 8009828:	20000084 	.word	0x20000084

0800982c <print_e>:
 800982c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800982e:	b087      	sub	sp, #28
 8009830:	ec43 2b10 	vmov	d0, r2, r3
 8009834:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009836:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800983a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800983c:	ab04      	add	r3, sp, #16
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	ab03      	add	r3, sp, #12
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	1c62      	adds	r2, r4, #1
 8009846:	ab05      	add	r3, sp, #20
 8009848:	460f      	mov	r7, r1
 800984a:	2102      	movs	r1, #2
 800984c:	f001 fcb4 	bl	800b1b8 <_dtoa_r>
 8009850:	9a05      	ldr	r2, [sp, #20]
 8009852:	f242 730f 	movw	r3, #9999	; 0x270f
 8009856:	429a      	cmp	r2, r3
 8009858:	d105      	bne.n	8009866 <print_e+0x3a>
 800985a:	4601      	mov	r1, r0
 800985c:	4638      	mov	r0, r7
 800985e:	f001 fbd7 	bl	800b010 <strcpy>
 8009862:	b007      	add	sp, #28
 8009864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009866:	463b      	mov	r3, r7
 8009868:	7801      	ldrb	r1, [r0, #0]
 800986a:	f803 1b01 	strb.w	r1, [r3], #1
 800986e:	2c00      	cmp	r4, #0
 8009870:	bfc8      	it	gt
 8009872:	2501      	movgt	r5, #1
 8009874:	212e      	movs	r1, #46	; 0x2e
 8009876:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800987a:	b10f      	cbz	r7, 8009880 <print_e+0x54>
 800987c:	2c00      	cmp	r4, #0
 800987e:	dc37      	bgt.n	80098f0 <print_e+0xc4>
 8009880:	2e67      	cmp	r6, #103	; 0x67
 8009882:	d046      	beq.n	8009912 <print_e+0xe6>
 8009884:	2e47      	cmp	r6, #71	; 0x47
 8009886:	d046      	beq.n	8009916 <print_e+0xea>
 8009888:	212e      	movs	r1, #46	; 0x2e
 800988a:	2030      	movs	r0, #48	; 0x30
 800988c:	2c00      	cmp	r4, #0
 800988e:	dc38      	bgt.n	8009902 <print_e+0xd6>
 8009890:	1e51      	subs	r1, r2, #1
 8009892:	2900      	cmp	r1, #0
 8009894:	bfb8      	it	lt
 8009896:	f1c2 0201 	rsblt	r2, r2, #1
 800989a:	4618      	mov	r0, r3
 800989c:	9105      	str	r1, [sp, #20]
 800989e:	bfac      	ite	ge
 80098a0:	222b      	movge	r2, #43	; 0x2b
 80098a2:	9205      	strlt	r2, [sp, #20]
 80098a4:	f800 6b02 	strb.w	r6, [r0], #2
 80098a8:	bfa8      	it	ge
 80098aa:	705a      	strbge	r2, [r3, #1]
 80098ac:	9a05      	ldr	r2, [sp, #20]
 80098ae:	bfbc      	itt	lt
 80098b0:	212d      	movlt	r1, #45	; 0x2d
 80098b2:	7059      	strblt	r1, [r3, #1]
 80098b4:	2a63      	cmp	r2, #99	; 0x63
 80098b6:	dd0b      	ble.n	80098d0 <print_e+0xa4>
 80098b8:	2164      	movs	r1, #100	; 0x64
 80098ba:	fb92 f1f1 	sdiv	r1, r2, r1
 80098be:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80098c2:	1cd8      	adds	r0, r3, #3
 80098c4:	709c      	strb	r4, [r3, #2]
 80098c6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80098ca:	fb03 2201 	mla	r2, r3, r1, r2
 80098ce:	9205      	str	r2, [sp, #20]
 80098d0:	9b05      	ldr	r3, [sp, #20]
 80098d2:	220a      	movs	r2, #10
 80098d4:	fb93 f2f2 	sdiv	r2, r3, r2
 80098d8:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80098dc:	7001      	strb	r1, [r0, #0]
 80098de:	f06f 0109 	mvn.w	r1, #9
 80098e2:	fb01 3302 	mla	r3, r1, r2, r3
 80098e6:	3330      	adds	r3, #48	; 0x30
 80098e8:	7043      	strb	r3, [r0, #1]
 80098ea:	2300      	movs	r3, #0
 80098ec:	7083      	strb	r3, [r0, #2]
 80098ee:	e7b8      	b.n	8009862 <print_e+0x36>
 80098f0:	b10d      	cbz	r5, 80098f6 <print_e+0xca>
 80098f2:	f803 1b01 	strb.w	r1, [r3], #1
 80098f6:	7805      	ldrb	r5, [r0, #0]
 80098f8:	f803 5b01 	strb.w	r5, [r3], #1
 80098fc:	3c01      	subs	r4, #1
 80098fe:	2500      	movs	r5, #0
 8009900:	e7b9      	b.n	8009876 <print_e+0x4a>
 8009902:	b10d      	cbz	r5, 8009908 <print_e+0xdc>
 8009904:	f803 1b01 	strb.w	r1, [r3], #1
 8009908:	f803 0b01 	strb.w	r0, [r3], #1
 800990c:	3c01      	subs	r4, #1
 800990e:	2500      	movs	r5, #0
 8009910:	e7bc      	b.n	800988c <print_e+0x60>
 8009912:	2665      	movs	r6, #101	; 0x65
 8009914:	e7bc      	b.n	8009890 <print_e+0x64>
 8009916:	2645      	movs	r6, #69	; 0x45
 8009918:	e7ba      	b.n	8009890 <print_e+0x64>
 800991a:	0000      	movs	r0, r0
 800991c:	0000      	movs	r0, r0
	...

08009920 <_gcvt>:
 8009920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009924:	ec55 4b10 	vmov	r4, r5, d0
 8009928:	b088      	sub	sp, #32
 800992a:	4681      	mov	r9, r0
 800992c:	4688      	mov	r8, r1
 800992e:	4616      	mov	r6, r2
 8009930:	469a      	mov	sl, r3
 8009932:	ee10 0a10 	vmov	r0, s0
 8009936:	2200      	movs	r2, #0
 8009938:	2300      	movs	r3, #0
 800993a:	4629      	mov	r1, r5
 800993c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800993e:	f7f7 f8ed 	bl	8000b1c <__aeabi_dcmplt>
 8009942:	b110      	cbz	r0, 800994a <_gcvt+0x2a>
 8009944:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009948:	461d      	mov	r5, r3
 800994a:	2200      	movs	r2, #0
 800994c:	2300      	movs	r3, #0
 800994e:	4620      	mov	r0, r4
 8009950:	4629      	mov	r1, r5
 8009952:	f7f7 f8d9 	bl	8000b08 <__aeabi_dcmpeq>
 8009956:	b138      	cbz	r0, 8009968 <_gcvt+0x48>
 8009958:	2330      	movs	r3, #48	; 0x30
 800995a:	7033      	strb	r3, [r6, #0]
 800995c:	2300      	movs	r3, #0
 800995e:	7073      	strb	r3, [r6, #1]
 8009960:	4630      	mov	r0, r6
 8009962:	b008      	add	sp, #32
 8009964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009968:	a34b      	add	r3, pc, #300	; (adr r3, 8009a98 <_gcvt+0x178>)
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7f7 f8dd 	bl	8000b30 <__aeabi_dcmple>
 8009976:	b158      	cbz	r0, 8009990 <_gcvt+0x70>
 8009978:	f108 31ff 	add.w	r1, r8, #4294967295
 800997c:	9100      	str	r1, [sp, #0]
 800997e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8009982:	4622      	mov	r2, r4
 8009984:	462b      	mov	r3, r5
 8009986:	4631      	mov	r1, r6
 8009988:	4648      	mov	r0, r9
 800998a:	f7ff ff4f 	bl	800982c <print_e>
 800998e:	e7e7      	b.n	8009960 <_gcvt+0x40>
 8009990:	4640      	mov	r0, r8
 8009992:	f001 f885 	bl	800aaa0 <_mprec_log10>
 8009996:	4622      	mov	r2, r4
 8009998:	ec51 0b10 	vmov	r0, r1, d0
 800999c:	462b      	mov	r3, r5
 800999e:	f7f7 f8c7 	bl	8000b30 <__aeabi_dcmple>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d1e8      	bne.n	8009978 <_gcvt+0x58>
 80099a6:	ab07      	add	r3, sp, #28
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	ab06      	add	r3, sp, #24
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	4642      	mov	r2, r8
 80099b0:	ab05      	add	r3, sp, #20
 80099b2:	ec45 4b10 	vmov	d0, r4, r5
 80099b6:	2102      	movs	r1, #2
 80099b8:	4648      	mov	r0, r9
 80099ba:	f001 fbfd 	bl	800b1b8 <_dtoa_r>
 80099be:	9a05      	ldr	r2, [sp, #20]
 80099c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d00e      	beq.n	80099e6 <_gcvt+0xc6>
 80099c8:	4633      	mov	r3, r6
 80099ca:	44b0      	add	r8, r6
 80099cc:	4605      	mov	r5, r0
 80099ce:	f810 1b01 	ldrb.w	r1, [r0], #1
 80099d2:	9c05      	ldr	r4, [sp, #20]
 80099d4:	eba8 0203 	sub.w	r2, r8, r3
 80099d8:	b109      	cbz	r1, 80099de <_gcvt+0xbe>
 80099da:	2c00      	cmp	r4, #0
 80099dc:	dc08      	bgt.n	80099f0 <_gcvt+0xd0>
 80099de:	2100      	movs	r1, #0
 80099e0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80099e4:	e00d      	b.n	8009a02 <_gcvt+0xe2>
 80099e6:	4601      	mov	r1, r0
 80099e8:	4630      	mov	r0, r6
 80099ea:	f001 fb11 	bl	800b010 <strcpy>
 80099ee:	e7b7      	b.n	8009960 <_gcvt+0x40>
 80099f0:	3c01      	subs	r4, #1
 80099f2:	f803 1b01 	strb.w	r1, [r3], #1
 80099f6:	9405      	str	r4, [sp, #20]
 80099f8:	e7e8      	b.n	80099cc <_gcvt+0xac>
 80099fa:	f803 cb01 	strb.w	ip, [r3], #1
 80099fe:	3a01      	subs	r2, #1
 8009a00:	2101      	movs	r1, #1
 8009a02:	2c00      	cmp	r4, #0
 8009a04:	4620      	mov	r0, r4
 8009a06:	dc2a      	bgt.n	8009a5e <_gcvt+0x13e>
 8009a08:	b101      	cbz	r1, 8009a0c <_gcvt+0xec>
 8009a0a:	9405      	str	r4, [sp, #20]
 8009a0c:	b90f      	cbnz	r7, 8009a12 <_gcvt+0xf2>
 8009a0e:	7829      	ldrb	r1, [r5, #0]
 8009a10:	b311      	cbz	r1, 8009a58 <_gcvt+0x138>
 8009a12:	42b3      	cmp	r3, r6
 8009a14:	bf04      	itt	eq
 8009a16:	2130      	moveq	r1, #48	; 0x30
 8009a18:	f803 1b01 	strbeq.w	r1, [r3], #1
 8009a1c:	212e      	movs	r1, #46	; 0x2e
 8009a1e:	7019      	strb	r1, [r3, #0]
 8009a20:	9905      	ldr	r1, [sp, #20]
 8009a22:	4618      	mov	r0, r3
 8009a24:	2400      	movs	r4, #0
 8009a26:	eba1 0c03 	sub.w	ip, r1, r3
 8009a2a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8009a2e:	eb1c 0f00 	cmn.w	ip, r0
 8009a32:	d41c      	bmi.n	8009a6e <_gcvt+0x14e>
 8009a34:	2900      	cmp	r1, #0
 8009a36:	f1c1 0000 	rsb	r0, r1, #0
 8009a3a:	bfc8      	it	gt
 8009a3c:	2000      	movgt	r0, #0
 8009a3e:	f100 0c01 	add.w	ip, r0, #1
 8009a42:	4463      	add	r3, ip
 8009a44:	4401      	add	r1, r0
 8009a46:	b104      	cbz	r4, 8009a4a <_gcvt+0x12a>
 8009a48:	9105      	str	r1, [sp, #20]
 8009a4a:	1e69      	subs	r1, r5, #1
 8009a4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a50:	b108      	cbz	r0, 8009a56 <_gcvt+0x136>
 8009a52:	2a00      	cmp	r2, #0
 8009a54:	dc0f      	bgt.n	8009a76 <_gcvt+0x156>
 8009a56:	b9df      	cbnz	r7, 8009a90 <_gcvt+0x170>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	701a      	strb	r2, [r3, #0]
 8009a5c:	e780      	b.n	8009960 <_gcvt+0x40>
 8009a5e:	2a00      	cmp	r2, #0
 8009a60:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a64:	dcc9      	bgt.n	80099fa <_gcvt+0xda>
 8009a66:	2900      	cmp	r1, #0
 8009a68:	d0d0      	beq.n	8009a0c <_gcvt+0xec>
 8009a6a:	9005      	str	r0, [sp, #20]
 8009a6c:	e7ce      	b.n	8009a0c <_gcvt+0xec>
 8009a6e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8009a72:	2401      	movs	r4, #1
 8009a74:	e7db      	b.n	8009a2e <_gcvt+0x10e>
 8009a76:	f803 0b01 	strb.w	r0, [r3], #1
 8009a7a:	3a01      	subs	r2, #1
 8009a7c:	e7e6      	b.n	8009a4c <_gcvt+0x12c>
 8009a7e:	f801 5b01 	strb.w	r5, [r1], #1
 8009a82:	1a60      	subs	r0, r4, r1
 8009a84:	2800      	cmp	r0, #0
 8009a86:	dcfa      	bgt.n	8009a7e <_gcvt+0x15e>
 8009a88:	2a00      	cmp	r2, #0
 8009a8a:	bfa8      	it	ge
 8009a8c:	189b      	addge	r3, r3, r2
 8009a8e:	e7e3      	b.n	8009a58 <_gcvt+0x138>
 8009a90:	4619      	mov	r1, r3
 8009a92:	189c      	adds	r4, r3, r2
 8009a94:	2530      	movs	r5, #48	; 0x30
 8009a96:	e7f4      	b.n	8009a82 <_gcvt+0x162>
 8009a98:	eb1c432d 	.word	0xeb1c432d
 8009a9c:	3f1a36e2 	.word	0x3f1a36e2

08009aa0 <rshift>:
 8009aa0:	6903      	ldr	r3, [r0, #16]
 8009aa2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009aa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009aaa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009aae:	f100 0414 	add.w	r4, r0, #20
 8009ab2:	dd45      	ble.n	8009b40 <rshift+0xa0>
 8009ab4:	f011 011f 	ands.w	r1, r1, #31
 8009ab8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009abc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ac0:	d10c      	bne.n	8009adc <rshift+0x3c>
 8009ac2:	f100 0710 	add.w	r7, r0, #16
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	42b1      	cmp	r1, r6
 8009aca:	d334      	bcc.n	8009b36 <rshift+0x96>
 8009acc:	1a9b      	subs	r3, r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	1eea      	subs	r2, r5, #3
 8009ad2:	4296      	cmp	r6, r2
 8009ad4:	bf38      	it	cc
 8009ad6:	2300      	movcc	r3, #0
 8009ad8:	4423      	add	r3, r4
 8009ada:	e015      	b.n	8009b08 <rshift+0x68>
 8009adc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ae0:	f1c1 0820 	rsb	r8, r1, #32
 8009ae4:	40cf      	lsrs	r7, r1
 8009ae6:	f105 0e04 	add.w	lr, r5, #4
 8009aea:	46a1      	mov	r9, r4
 8009aec:	4576      	cmp	r6, lr
 8009aee:	46f4      	mov	ip, lr
 8009af0:	d815      	bhi.n	8009b1e <rshift+0x7e>
 8009af2:	1a9a      	subs	r2, r3, r2
 8009af4:	0092      	lsls	r2, r2, #2
 8009af6:	3a04      	subs	r2, #4
 8009af8:	3501      	adds	r5, #1
 8009afa:	42ae      	cmp	r6, r5
 8009afc:	bf38      	it	cc
 8009afe:	2200      	movcc	r2, #0
 8009b00:	18a3      	adds	r3, r4, r2
 8009b02:	50a7      	str	r7, [r4, r2]
 8009b04:	b107      	cbz	r7, 8009b08 <rshift+0x68>
 8009b06:	3304      	adds	r3, #4
 8009b08:	1b1a      	subs	r2, r3, r4
 8009b0a:	42a3      	cmp	r3, r4
 8009b0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b10:	bf08      	it	eq
 8009b12:	2300      	moveq	r3, #0
 8009b14:	6102      	str	r2, [r0, #16]
 8009b16:	bf08      	it	eq
 8009b18:	6143      	streq	r3, [r0, #20]
 8009b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b1e:	f8dc c000 	ldr.w	ip, [ip]
 8009b22:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b26:	ea4c 0707 	orr.w	r7, ip, r7
 8009b2a:	f849 7b04 	str.w	r7, [r9], #4
 8009b2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b32:	40cf      	lsrs	r7, r1
 8009b34:	e7da      	b.n	8009aec <rshift+0x4c>
 8009b36:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b3a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b3e:	e7c3      	b.n	8009ac8 <rshift+0x28>
 8009b40:	4623      	mov	r3, r4
 8009b42:	e7e1      	b.n	8009b08 <rshift+0x68>

08009b44 <__hexdig_fun>:
 8009b44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b48:	2b09      	cmp	r3, #9
 8009b4a:	d802      	bhi.n	8009b52 <__hexdig_fun+0xe>
 8009b4c:	3820      	subs	r0, #32
 8009b4e:	b2c0      	uxtb	r0, r0
 8009b50:	4770      	bx	lr
 8009b52:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b56:	2b05      	cmp	r3, #5
 8009b58:	d801      	bhi.n	8009b5e <__hexdig_fun+0x1a>
 8009b5a:	3847      	subs	r0, #71	; 0x47
 8009b5c:	e7f7      	b.n	8009b4e <__hexdig_fun+0xa>
 8009b5e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b62:	2b05      	cmp	r3, #5
 8009b64:	d801      	bhi.n	8009b6a <__hexdig_fun+0x26>
 8009b66:	3827      	subs	r0, #39	; 0x27
 8009b68:	e7f1      	b.n	8009b4e <__hexdig_fun+0xa>
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	4770      	bx	lr
	...

08009b70 <__gethex>:
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	ed2d 8b02 	vpush	{d8}
 8009b78:	b089      	sub	sp, #36	; 0x24
 8009b7a:	ee08 0a10 	vmov	s16, r0
 8009b7e:	9304      	str	r3, [sp, #16]
 8009b80:	4bb4      	ldr	r3, [pc, #720]	; (8009e54 <__gethex+0x2e4>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	4618      	mov	r0, r3
 8009b88:	468b      	mov	fp, r1
 8009b8a:	4690      	mov	r8, r2
 8009b8c:	f7f6 fb40 	bl	8000210 <strlen>
 8009b90:	9b01      	ldr	r3, [sp, #4]
 8009b92:	f8db 2000 	ldr.w	r2, [fp]
 8009b96:	4403      	add	r3, r0
 8009b98:	4682      	mov	sl, r0
 8009b9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b9e:	9305      	str	r3, [sp, #20]
 8009ba0:	1c93      	adds	r3, r2, #2
 8009ba2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009ba6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009baa:	32fe      	adds	r2, #254	; 0xfe
 8009bac:	18d1      	adds	r1, r2, r3
 8009bae:	461f      	mov	r7, r3
 8009bb0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009bb4:	9100      	str	r1, [sp, #0]
 8009bb6:	2830      	cmp	r0, #48	; 0x30
 8009bb8:	d0f8      	beq.n	8009bac <__gethex+0x3c>
 8009bba:	f7ff ffc3 	bl	8009b44 <__hexdig_fun>
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d13a      	bne.n	8009c3a <__gethex+0xca>
 8009bc4:	9901      	ldr	r1, [sp, #4]
 8009bc6:	4652      	mov	r2, sl
 8009bc8:	4638      	mov	r0, r7
 8009bca:	f001 fa29 	bl	800b020 <strncmp>
 8009bce:	4605      	mov	r5, r0
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d168      	bne.n	8009ca6 <__gethex+0x136>
 8009bd4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009bd8:	eb07 060a 	add.w	r6, r7, sl
 8009bdc:	f7ff ffb2 	bl	8009b44 <__hexdig_fun>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d062      	beq.n	8009caa <__gethex+0x13a>
 8009be4:	4633      	mov	r3, r6
 8009be6:	7818      	ldrb	r0, [r3, #0]
 8009be8:	2830      	cmp	r0, #48	; 0x30
 8009bea:	461f      	mov	r7, r3
 8009bec:	f103 0301 	add.w	r3, r3, #1
 8009bf0:	d0f9      	beq.n	8009be6 <__gethex+0x76>
 8009bf2:	f7ff ffa7 	bl	8009b44 <__hexdig_fun>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	fab0 f480 	clz	r4, r0
 8009bfc:	0964      	lsrs	r4, r4, #5
 8009bfe:	4635      	mov	r5, r6
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	463a      	mov	r2, r7
 8009c04:	4616      	mov	r6, r2
 8009c06:	3201      	adds	r2, #1
 8009c08:	7830      	ldrb	r0, [r6, #0]
 8009c0a:	f7ff ff9b 	bl	8009b44 <__hexdig_fun>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d1f8      	bne.n	8009c04 <__gethex+0x94>
 8009c12:	9901      	ldr	r1, [sp, #4]
 8009c14:	4652      	mov	r2, sl
 8009c16:	4630      	mov	r0, r6
 8009c18:	f001 fa02 	bl	800b020 <strncmp>
 8009c1c:	b980      	cbnz	r0, 8009c40 <__gethex+0xd0>
 8009c1e:	b94d      	cbnz	r5, 8009c34 <__gethex+0xc4>
 8009c20:	eb06 050a 	add.w	r5, r6, sl
 8009c24:	462a      	mov	r2, r5
 8009c26:	4616      	mov	r6, r2
 8009c28:	3201      	adds	r2, #1
 8009c2a:	7830      	ldrb	r0, [r6, #0]
 8009c2c:	f7ff ff8a 	bl	8009b44 <__hexdig_fun>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d1f8      	bne.n	8009c26 <__gethex+0xb6>
 8009c34:	1bad      	subs	r5, r5, r6
 8009c36:	00ad      	lsls	r5, r5, #2
 8009c38:	e004      	b.n	8009c44 <__gethex+0xd4>
 8009c3a:	2400      	movs	r4, #0
 8009c3c:	4625      	mov	r5, r4
 8009c3e:	e7e0      	b.n	8009c02 <__gethex+0x92>
 8009c40:	2d00      	cmp	r5, #0
 8009c42:	d1f7      	bne.n	8009c34 <__gethex+0xc4>
 8009c44:	7833      	ldrb	r3, [r6, #0]
 8009c46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c4a:	2b50      	cmp	r3, #80	; 0x50
 8009c4c:	d13b      	bne.n	8009cc6 <__gethex+0x156>
 8009c4e:	7873      	ldrb	r3, [r6, #1]
 8009c50:	2b2b      	cmp	r3, #43	; 0x2b
 8009c52:	d02c      	beq.n	8009cae <__gethex+0x13e>
 8009c54:	2b2d      	cmp	r3, #45	; 0x2d
 8009c56:	d02e      	beq.n	8009cb6 <__gethex+0x146>
 8009c58:	1c71      	adds	r1, r6, #1
 8009c5a:	f04f 0900 	mov.w	r9, #0
 8009c5e:	7808      	ldrb	r0, [r1, #0]
 8009c60:	f7ff ff70 	bl	8009b44 <__hexdig_fun>
 8009c64:	1e43      	subs	r3, r0, #1
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b18      	cmp	r3, #24
 8009c6a:	d82c      	bhi.n	8009cc6 <__gethex+0x156>
 8009c6c:	f1a0 0210 	sub.w	r2, r0, #16
 8009c70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c74:	f7ff ff66 	bl	8009b44 <__hexdig_fun>
 8009c78:	1e43      	subs	r3, r0, #1
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b18      	cmp	r3, #24
 8009c7e:	d91d      	bls.n	8009cbc <__gethex+0x14c>
 8009c80:	f1b9 0f00 	cmp.w	r9, #0
 8009c84:	d000      	beq.n	8009c88 <__gethex+0x118>
 8009c86:	4252      	negs	r2, r2
 8009c88:	4415      	add	r5, r2
 8009c8a:	f8cb 1000 	str.w	r1, [fp]
 8009c8e:	b1e4      	cbz	r4, 8009cca <__gethex+0x15a>
 8009c90:	9b00      	ldr	r3, [sp, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bf14      	ite	ne
 8009c96:	2700      	movne	r7, #0
 8009c98:	2706      	moveq	r7, #6
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	b009      	add	sp, #36	; 0x24
 8009c9e:	ecbd 8b02 	vpop	{d8}
 8009ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca6:	463e      	mov	r6, r7
 8009ca8:	4625      	mov	r5, r4
 8009caa:	2401      	movs	r4, #1
 8009cac:	e7ca      	b.n	8009c44 <__gethex+0xd4>
 8009cae:	f04f 0900 	mov.w	r9, #0
 8009cb2:	1cb1      	adds	r1, r6, #2
 8009cb4:	e7d3      	b.n	8009c5e <__gethex+0xee>
 8009cb6:	f04f 0901 	mov.w	r9, #1
 8009cba:	e7fa      	b.n	8009cb2 <__gethex+0x142>
 8009cbc:	230a      	movs	r3, #10
 8009cbe:	fb03 0202 	mla	r2, r3, r2, r0
 8009cc2:	3a10      	subs	r2, #16
 8009cc4:	e7d4      	b.n	8009c70 <__gethex+0x100>
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	e7df      	b.n	8009c8a <__gethex+0x11a>
 8009cca:	1bf3      	subs	r3, r6, r7
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	4621      	mov	r1, r4
 8009cd0:	2b07      	cmp	r3, #7
 8009cd2:	dc0b      	bgt.n	8009cec <__gethex+0x17c>
 8009cd4:	ee18 0a10 	vmov	r0, s16
 8009cd8:	f000 fa64 	bl	800a1a4 <_Balloc>
 8009cdc:	4604      	mov	r4, r0
 8009cde:	b940      	cbnz	r0, 8009cf2 <__gethex+0x182>
 8009ce0:	4b5d      	ldr	r3, [pc, #372]	; (8009e58 <__gethex+0x2e8>)
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	21de      	movs	r1, #222	; 0xde
 8009ce6:	485d      	ldr	r0, [pc, #372]	; (8009e5c <__gethex+0x2ec>)
 8009ce8:	f001 f9bc 	bl	800b064 <__assert_func>
 8009cec:	3101      	adds	r1, #1
 8009cee:	105b      	asrs	r3, r3, #1
 8009cf0:	e7ee      	b.n	8009cd0 <__gethex+0x160>
 8009cf2:	f100 0914 	add.w	r9, r0, #20
 8009cf6:	f04f 0b00 	mov.w	fp, #0
 8009cfa:	f1ca 0301 	rsb	r3, sl, #1
 8009cfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d02:	f8cd b000 	str.w	fp, [sp]
 8009d06:	9306      	str	r3, [sp, #24]
 8009d08:	42b7      	cmp	r7, r6
 8009d0a:	d340      	bcc.n	8009d8e <__gethex+0x21e>
 8009d0c:	9802      	ldr	r0, [sp, #8]
 8009d0e:	9b00      	ldr	r3, [sp, #0]
 8009d10:	f840 3b04 	str.w	r3, [r0], #4
 8009d14:	eba0 0009 	sub.w	r0, r0, r9
 8009d18:	1080      	asrs	r0, r0, #2
 8009d1a:	0146      	lsls	r6, r0, #5
 8009d1c:	6120      	str	r0, [r4, #16]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 fb32 	bl	800a388 <__hi0bits>
 8009d24:	1a30      	subs	r0, r6, r0
 8009d26:	f8d8 6000 	ldr.w	r6, [r8]
 8009d2a:	42b0      	cmp	r0, r6
 8009d2c:	dd63      	ble.n	8009df6 <__gethex+0x286>
 8009d2e:	1b87      	subs	r7, r0, r6
 8009d30:	4639      	mov	r1, r7
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 fef5 	bl	800ab22 <__any_on>
 8009d38:	4682      	mov	sl, r0
 8009d3a:	b1a8      	cbz	r0, 8009d68 <__gethex+0x1f8>
 8009d3c:	1e7b      	subs	r3, r7, #1
 8009d3e:	1159      	asrs	r1, r3, #5
 8009d40:	f003 021f 	and.w	r2, r3, #31
 8009d44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d48:	f04f 0a01 	mov.w	sl, #1
 8009d4c:	fa0a f202 	lsl.w	r2, sl, r2
 8009d50:	420a      	tst	r2, r1
 8009d52:	d009      	beq.n	8009d68 <__gethex+0x1f8>
 8009d54:	4553      	cmp	r3, sl
 8009d56:	dd05      	ble.n	8009d64 <__gethex+0x1f4>
 8009d58:	1eb9      	subs	r1, r7, #2
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 fee1 	bl	800ab22 <__any_on>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d145      	bne.n	8009df0 <__gethex+0x280>
 8009d64:	f04f 0a02 	mov.w	sl, #2
 8009d68:	4639      	mov	r1, r7
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f7ff fe98 	bl	8009aa0 <rshift>
 8009d70:	443d      	add	r5, r7
 8009d72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d76:	42ab      	cmp	r3, r5
 8009d78:	da4c      	bge.n	8009e14 <__gethex+0x2a4>
 8009d7a:	ee18 0a10 	vmov	r0, s16
 8009d7e:	4621      	mov	r1, r4
 8009d80:	f000 fa50 	bl	800a224 <_Bfree>
 8009d84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d86:	2300      	movs	r3, #0
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	27a3      	movs	r7, #163	; 0xa3
 8009d8c:	e785      	b.n	8009c9a <__gethex+0x12a>
 8009d8e:	1e73      	subs	r3, r6, #1
 8009d90:	9a05      	ldr	r2, [sp, #20]
 8009d92:	9303      	str	r3, [sp, #12]
 8009d94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d019      	beq.n	8009dd0 <__gethex+0x260>
 8009d9c:	f1bb 0f20 	cmp.w	fp, #32
 8009da0:	d107      	bne.n	8009db2 <__gethex+0x242>
 8009da2:	9b02      	ldr	r3, [sp, #8]
 8009da4:	9a00      	ldr	r2, [sp, #0]
 8009da6:	f843 2b04 	str.w	r2, [r3], #4
 8009daa:	9302      	str	r3, [sp, #8]
 8009dac:	2300      	movs	r3, #0
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	469b      	mov	fp, r3
 8009db2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009db6:	f7ff fec5 	bl	8009b44 <__hexdig_fun>
 8009dba:	9b00      	ldr	r3, [sp, #0]
 8009dbc:	f000 000f 	and.w	r0, r0, #15
 8009dc0:	fa00 f00b 	lsl.w	r0, r0, fp
 8009dc4:	4303      	orrs	r3, r0
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	f10b 0b04 	add.w	fp, fp, #4
 8009dcc:	9b03      	ldr	r3, [sp, #12]
 8009dce:	e00d      	b.n	8009dec <__gethex+0x27c>
 8009dd0:	9b03      	ldr	r3, [sp, #12]
 8009dd2:	9a06      	ldr	r2, [sp, #24]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	42bb      	cmp	r3, r7
 8009dd8:	d3e0      	bcc.n	8009d9c <__gethex+0x22c>
 8009dda:	4618      	mov	r0, r3
 8009ddc:	9901      	ldr	r1, [sp, #4]
 8009dde:	9307      	str	r3, [sp, #28]
 8009de0:	4652      	mov	r2, sl
 8009de2:	f001 f91d 	bl	800b020 <strncmp>
 8009de6:	9b07      	ldr	r3, [sp, #28]
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d1d7      	bne.n	8009d9c <__gethex+0x22c>
 8009dec:	461e      	mov	r6, r3
 8009dee:	e78b      	b.n	8009d08 <__gethex+0x198>
 8009df0:	f04f 0a03 	mov.w	sl, #3
 8009df4:	e7b8      	b.n	8009d68 <__gethex+0x1f8>
 8009df6:	da0a      	bge.n	8009e0e <__gethex+0x29e>
 8009df8:	1a37      	subs	r7, r6, r0
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	ee18 0a10 	vmov	r0, s16
 8009e00:	463a      	mov	r2, r7
 8009e02:	f000 fc2b 	bl	800a65c <__lshift>
 8009e06:	1bed      	subs	r5, r5, r7
 8009e08:	4604      	mov	r4, r0
 8009e0a:	f100 0914 	add.w	r9, r0, #20
 8009e0e:	f04f 0a00 	mov.w	sl, #0
 8009e12:	e7ae      	b.n	8009d72 <__gethex+0x202>
 8009e14:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009e18:	42a8      	cmp	r0, r5
 8009e1a:	dd72      	ble.n	8009f02 <__gethex+0x392>
 8009e1c:	1b45      	subs	r5, r0, r5
 8009e1e:	42ae      	cmp	r6, r5
 8009e20:	dc36      	bgt.n	8009e90 <__gethex+0x320>
 8009e22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d02a      	beq.n	8009e80 <__gethex+0x310>
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d02c      	beq.n	8009e88 <__gethex+0x318>
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d11c      	bne.n	8009e6c <__gethex+0x2fc>
 8009e32:	42ae      	cmp	r6, r5
 8009e34:	d11a      	bne.n	8009e6c <__gethex+0x2fc>
 8009e36:	2e01      	cmp	r6, #1
 8009e38:	d112      	bne.n	8009e60 <__gethex+0x2f0>
 8009e3a:	9a04      	ldr	r2, [sp, #16]
 8009e3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	2301      	movs	r3, #1
 8009e44:	6123      	str	r3, [r4, #16]
 8009e46:	f8c9 3000 	str.w	r3, [r9]
 8009e4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e4c:	2762      	movs	r7, #98	; 0x62
 8009e4e:	601c      	str	r4, [r3, #0]
 8009e50:	e723      	b.n	8009c9a <__gethex+0x12a>
 8009e52:	bf00      	nop
 8009e54:	0800d260 	.word	0x0800d260
 8009e58:	0800d1e8 	.word	0x0800d1e8
 8009e5c:	0800d1f9 	.word	0x0800d1f9
 8009e60:	1e71      	subs	r1, r6, #1
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 fe5d 	bl	800ab22 <__any_on>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	d1e6      	bne.n	8009e3a <__gethex+0x2ca>
 8009e6c:	ee18 0a10 	vmov	r0, s16
 8009e70:	4621      	mov	r1, r4
 8009e72:	f000 f9d7 	bl	800a224 <_Bfree>
 8009e76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e78:	2300      	movs	r3, #0
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	2750      	movs	r7, #80	; 0x50
 8009e7e:	e70c      	b.n	8009c9a <__gethex+0x12a>
 8009e80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1f2      	bne.n	8009e6c <__gethex+0x2fc>
 8009e86:	e7d8      	b.n	8009e3a <__gethex+0x2ca>
 8009e88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1d5      	bne.n	8009e3a <__gethex+0x2ca>
 8009e8e:	e7ed      	b.n	8009e6c <__gethex+0x2fc>
 8009e90:	1e6f      	subs	r7, r5, #1
 8009e92:	f1ba 0f00 	cmp.w	sl, #0
 8009e96:	d131      	bne.n	8009efc <__gethex+0x38c>
 8009e98:	b127      	cbz	r7, 8009ea4 <__gethex+0x334>
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f000 fe40 	bl	800ab22 <__any_on>
 8009ea2:	4682      	mov	sl, r0
 8009ea4:	117b      	asrs	r3, r7, #5
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009eac:	f007 071f 	and.w	r7, r7, #31
 8009eb0:	fa01 f707 	lsl.w	r7, r1, r7
 8009eb4:	421f      	tst	r7, r3
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	4620      	mov	r0, r4
 8009eba:	bf18      	it	ne
 8009ebc:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ec0:	1b76      	subs	r6, r6, r5
 8009ec2:	f7ff fded 	bl	8009aa0 <rshift>
 8009ec6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009eca:	2702      	movs	r7, #2
 8009ecc:	f1ba 0f00 	cmp.w	sl, #0
 8009ed0:	d048      	beq.n	8009f64 <__gethex+0x3f4>
 8009ed2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d015      	beq.n	8009f06 <__gethex+0x396>
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d017      	beq.n	8009f0e <__gethex+0x39e>
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d109      	bne.n	8009ef6 <__gethex+0x386>
 8009ee2:	f01a 0f02 	tst.w	sl, #2
 8009ee6:	d006      	beq.n	8009ef6 <__gethex+0x386>
 8009ee8:	f8d9 0000 	ldr.w	r0, [r9]
 8009eec:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ef0:	f01a 0f01 	tst.w	sl, #1
 8009ef4:	d10e      	bne.n	8009f14 <__gethex+0x3a4>
 8009ef6:	f047 0710 	orr.w	r7, r7, #16
 8009efa:	e033      	b.n	8009f64 <__gethex+0x3f4>
 8009efc:	f04f 0a01 	mov.w	sl, #1
 8009f00:	e7d0      	b.n	8009ea4 <__gethex+0x334>
 8009f02:	2701      	movs	r7, #1
 8009f04:	e7e2      	b.n	8009ecc <__gethex+0x35c>
 8009f06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f08:	f1c3 0301 	rsb	r3, r3, #1
 8009f0c:	9315      	str	r3, [sp, #84]	; 0x54
 8009f0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0f0      	beq.n	8009ef6 <__gethex+0x386>
 8009f14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f18:	f104 0314 	add.w	r3, r4, #20
 8009f1c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f20:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f24:	f04f 0c00 	mov.w	ip, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f2e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f32:	d01c      	beq.n	8009f6e <__gethex+0x3fe>
 8009f34:	3201      	adds	r2, #1
 8009f36:	6002      	str	r2, [r0, #0]
 8009f38:	2f02      	cmp	r7, #2
 8009f3a:	f104 0314 	add.w	r3, r4, #20
 8009f3e:	d13f      	bne.n	8009fc0 <__gethex+0x450>
 8009f40:	f8d8 2000 	ldr.w	r2, [r8]
 8009f44:	3a01      	subs	r2, #1
 8009f46:	42b2      	cmp	r2, r6
 8009f48:	d10a      	bne.n	8009f60 <__gethex+0x3f0>
 8009f4a:	1171      	asrs	r1, r6, #5
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f52:	f006 061f 	and.w	r6, r6, #31
 8009f56:	fa02 f606 	lsl.w	r6, r2, r6
 8009f5a:	421e      	tst	r6, r3
 8009f5c:	bf18      	it	ne
 8009f5e:	4617      	movne	r7, r2
 8009f60:	f047 0720 	orr.w	r7, r7, #32
 8009f64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f66:	601c      	str	r4, [r3, #0]
 8009f68:	9b04      	ldr	r3, [sp, #16]
 8009f6a:	601d      	str	r5, [r3, #0]
 8009f6c:	e695      	b.n	8009c9a <__gethex+0x12a>
 8009f6e:	4299      	cmp	r1, r3
 8009f70:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f74:	d8d8      	bhi.n	8009f28 <__gethex+0x3b8>
 8009f76:	68a3      	ldr	r3, [r4, #8]
 8009f78:	459b      	cmp	fp, r3
 8009f7a:	db19      	blt.n	8009fb0 <__gethex+0x440>
 8009f7c:	6861      	ldr	r1, [r4, #4]
 8009f7e:	ee18 0a10 	vmov	r0, s16
 8009f82:	3101      	adds	r1, #1
 8009f84:	f000 f90e 	bl	800a1a4 <_Balloc>
 8009f88:	4681      	mov	r9, r0
 8009f8a:	b918      	cbnz	r0, 8009f94 <__gethex+0x424>
 8009f8c:	4b1a      	ldr	r3, [pc, #104]	; (8009ff8 <__gethex+0x488>)
 8009f8e:	4602      	mov	r2, r0
 8009f90:	2184      	movs	r1, #132	; 0x84
 8009f92:	e6a8      	b.n	8009ce6 <__gethex+0x176>
 8009f94:	6922      	ldr	r2, [r4, #16]
 8009f96:	3202      	adds	r2, #2
 8009f98:	f104 010c 	add.w	r1, r4, #12
 8009f9c:	0092      	lsls	r2, r2, #2
 8009f9e:	300c      	adds	r0, #12
 8009fa0:	f7fe fdf0 	bl	8008b84 <memcpy>
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	ee18 0a10 	vmov	r0, s16
 8009faa:	f000 f93b 	bl	800a224 <_Bfree>
 8009fae:	464c      	mov	r4, r9
 8009fb0:	6923      	ldr	r3, [r4, #16]
 8009fb2:	1c5a      	adds	r2, r3, #1
 8009fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fb8:	6122      	str	r2, [r4, #16]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	615a      	str	r2, [r3, #20]
 8009fbe:	e7bb      	b.n	8009f38 <__gethex+0x3c8>
 8009fc0:	6922      	ldr	r2, [r4, #16]
 8009fc2:	455a      	cmp	r2, fp
 8009fc4:	dd0b      	ble.n	8009fde <__gethex+0x46e>
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f7ff fd69 	bl	8009aa0 <rshift>
 8009fce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fd2:	3501      	adds	r5, #1
 8009fd4:	42ab      	cmp	r3, r5
 8009fd6:	f6ff aed0 	blt.w	8009d7a <__gethex+0x20a>
 8009fda:	2701      	movs	r7, #1
 8009fdc:	e7c0      	b.n	8009f60 <__gethex+0x3f0>
 8009fde:	f016 061f 	ands.w	r6, r6, #31
 8009fe2:	d0fa      	beq.n	8009fda <__gethex+0x46a>
 8009fe4:	4453      	add	r3, sl
 8009fe6:	f1c6 0620 	rsb	r6, r6, #32
 8009fea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009fee:	f000 f9cb 	bl	800a388 <__hi0bits>
 8009ff2:	42b0      	cmp	r0, r6
 8009ff4:	dbe7      	blt.n	8009fc6 <__gethex+0x456>
 8009ff6:	e7f0      	b.n	8009fda <__gethex+0x46a>
 8009ff8:	0800d1e8 	.word	0x0800d1e8

08009ffc <L_shift>:
 8009ffc:	f1c2 0208 	rsb	r2, r2, #8
 800a000:	0092      	lsls	r2, r2, #2
 800a002:	b570      	push	{r4, r5, r6, lr}
 800a004:	f1c2 0620 	rsb	r6, r2, #32
 800a008:	6843      	ldr	r3, [r0, #4]
 800a00a:	6804      	ldr	r4, [r0, #0]
 800a00c:	fa03 f506 	lsl.w	r5, r3, r6
 800a010:	432c      	orrs	r4, r5
 800a012:	40d3      	lsrs	r3, r2
 800a014:	6004      	str	r4, [r0, #0]
 800a016:	f840 3f04 	str.w	r3, [r0, #4]!
 800a01a:	4288      	cmp	r0, r1
 800a01c:	d3f4      	bcc.n	800a008 <L_shift+0xc>
 800a01e:	bd70      	pop	{r4, r5, r6, pc}

0800a020 <__match>:
 800a020:	b530      	push	{r4, r5, lr}
 800a022:	6803      	ldr	r3, [r0, #0]
 800a024:	3301      	adds	r3, #1
 800a026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a02a:	b914      	cbnz	r4, 800a032 <__match+0x12>
 800a02c:	6003      	str	r3, [r0, #0]
 800a02e:	2001      	movs	r0, #1
 800a030:	bd30      	pop	{r4, r5, pc}
 800a032:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a036:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a03a:	2d19      	cmp	r5, #25
 800a03c:	bf98      	it	ls
 800a03e:	3220      	addls	r2, #32
 800a040:	42a2      	cmp	r2, r4
 800a042:	d0f0      	beq.n	800a026 <__match+0x6>
 800a044:	2000      	movs	r0, #0
 800a046:	e7f3      	b.n	800a030 <__match+0x10>

0800a048 <__hexnan>:
 800a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	680b      	ldr	r3, [r1, #0]
 800a04e:	115e      	asrs	r6, r3, #5
 800a050:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a054:	f013 031f 	ands.w	r3, r3, #31
 800a058:	b087      	sub	sp, #28
 800a05a:	bf18      	it	ne
 800a05c:	3604      	addne	r6, #4
 800a05e:	2500      	movs	r5, #0
 800a060:	1f37      	subs	r7, r6, #4
 800a062:	4690      	mov	r8, r2
 800a064:	6802      	ldr	r2, [r0, #0]
 800a066:	9301      	str	r3, [sp, #4]
 800a068:	4682      	mov	sl, r0
 800a06a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a06e:	46b9      	mov	r9, r7
 800a070:	463c      	mov	r4, r7
 800a072:	9502      	str	r5, [sp, #8]
 800a074:	46ab      	mov	fp, r5
 800a076:	7851      	ldrb	r1, [r2, #1]
 800a078:	1c53      	adds	r3, r2, #1
 800a07a:	9303      	str	r3, [sp, #12]
 800a07c:	b341      	cbz	r1, 800a0d0 <__hexnan+0x88>
 800a07e:	4608      	mov	r0, r1
 800a080:	9205      	str	r2, [sp, #20]
 800a082:	9104      	str	r1, [sp, #16]
 800a084:	f7ff fd5e 	bl	8009b44 <__hexdig_fun>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d14f      	bne.n	800a12c <__hexnan+0xe4>
 800a08c:	9904      	ldr	r1, [sp, #16]
 800a08e:	9a05      	ldr	r2, [sp, #20]
 800a090:	2920      	cmp	r1, #32
 800a092:	d818      	bhi.n	800a0c6 <__hexnan+0x7e>
 800a094:	9b02      	ldr	r3, [sp, #8]
 800a096:	459b      	cmp	fp, r3
 800a098:	dd13      	ble.n	800a0c2 <__hexnan+0x7a>
 800a09a:	454c      	cmp	r4, r9
 800a09c:	d206      	bcs.n	800a0ac <__hexnan+0x64>
 800a09e:	2d07      	cmp	r5, #7
 800a0a0:	dc04      	bgt.n	800a0ac <__hexnan+0x64>
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff ffa8 	bl	8009ffc <L_shift>
 800a0ac:	4544      	cmp	r4, r8
 800a0ae:	d950      	bls.n	800a152 <__hexnan+0x10a>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f1a4 0904 	sub.w	r9, r4, #4
 800a0b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0ba:	f8cd b008 	str.w	fp, [sp, #8]
 800a0be:	464c      	mov	r4, r9
 800a0c0:	461d      	mov	r5, r3
 800a0c2:	9a03      	ldr	r2, [sp, #12]
 800a0c4:	e7d7      	b.n	800a076 <__hexnan+0x2e>
 800a0c6:	2929      	cmp	r1, #41	; 0x29
 800a0c8:	d156      	bne.n	800a178 <__hexnan+0x130>
 800a0ca:	3202      	adds	r2, #2
 800a0cc:	f8ca 2000 	str.w	r2, [sl]
 800a0d0:	f1bb 0f00 	cmp.w	fp, #0
 800a0d4:	d050      	beq.n	800a178 <__hexnan+0x130>
 800a0d6:	454c      	cmp	r4, r9
 800a0d8:	d206      	bcs.n	800a0e8 <__hexnan+0xa0>
 800a0da:	2d07      	cmp	r5, #7
 800a0dc:	dc04      	bgt.n	800a0e8 <__hexnan+0xa0>
 800a0de:	462a      	mov	r2, r5
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f7ff ff8a 	bl	8009ffc <L_shift>
 800a0e8:	4544      	cmp	r4, r8
 800a0ea:	d934      	bls.n	800a156 <__hexnan+0x10e>
 800a0ec:	f1a8 0204 	sub.w	r2, r8, #4
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0fa:	429f      	cmp	r7, r3
 800a0fc:	d2f9      	bcs.n	800a0f2 <__hexnan+0xaa>
 800a0fe:	1b3b      	subs	r3, r7, r4
 800a100:	f023 0303 	bic.w	r3, r3, #3
 800a104:	3304      	adds	r3, #4
 800a106:	3401      	adds	r4, #1
 800a108:	3e03      	subs	r6, #3
 800a10a:	42b4      	cmp	r4, r6
 800a10c:	bf88      	it	hi
 800a10e:	2304      	movhi	r3, #4
 800a110:	4443      	add	r3, r8
 800a112:	2200      	movs	r2, #0
 800a114:	f843 2b04 	str.w	r2, [r3], #4
 800a118:	429f      	cmp	r7, r3
 800a11a:	d2fb      	bcs.n	800a114 <__hexnan+0xcc>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	b91b      	cbnz	r3, 800a128 <__hexnan+0xe0>
 800a120:	4547      	cmp	r7, r8
 800a122:	d127      	bne.n	800a174 <__hexnan+0x12c>
 800a124:	2301      	movs	r3, #1
 800a126:	603b      	str	r3, [r7, #0]
 800a128:	2005      	movs	r0, #5
 800a12a:	e026      	b.n	800a17a <__hexnan+0x132>
 800a12c:	3501      	adds	r5, #1
 800a12e:	2d08      	cmp	r5, #8
 800a130:	f10b 0b01 	add.w	fp, fp, #1
 800a134:	dd06      	ble.n	800a144 <__hexnan+0xfc>
 800a136:	4544      	cmp	r4, r8
 800a138:	d9c3      	bls.n	800a0c2 <__hexnan+0x7a>
 800a13a:	2300      	movs	r3, #0
 800a13c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a140:	2501      	movs	r5, #1
 800a142:	3c04      	subs	r4, #4
 800a144:	6822      	ldr	r2, [r4, #0]
 800a146:	f000 000f 	and.w	r0, r0, #15
 800a14a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a14e:	6022      	str	r2, [r4, #0]
 800a150:	e7b7      	b.n	800a0c2 <__hexnan+0x7a>
 800a152:	2508      	movs	r5, #8
 800a154:	e7b5      	b.n	800a0c2 <__hexnan+0x7a>
 800a156:	9b01      	ldr	r3, [sp, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d0df      	beq.n	800a11c <__hexnan+0xd4>
 800a15c:	f04f 32ff 	mov.w	r2, #4294967295
 800a160:	f1c3 0320 	rsb	r3, r3, #32
 800a164:	fa22 f303 	lsr.w	r3, r2, r3
 800a168:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a16c:	401a      	ands	r2, r3
 800a16e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a172:	e7d3      	b.n	800a11c <__hexnan+0xd4>
 800a174:	3f04      	subs	r7, #4
 800a176:	e7d1      	b.n	800a11c <__hexnan+0xd4>
 800a178:	2004      	movs	r0, #4
 800a17a:	b007      	add	sp, #28
 800a17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a180 <__ascii_mbtowc>:
 800a180:	b082      	sub	sp, #8
 800a182:	b901      	cbnz	r1, 800a186 <__ascii_mbtowc+0x6>
 800a184:	a901      	add	r1, sp, #4
 800a186:	b142      	cbz	r2, 800a19a <__ascii_mbtowc+0x1a>
 800a188:	b14b      	cbz	r3, 800a19e <__ascii_mbtowc+0x1e>
 800a18a:	7813      	ldrb	r3, [r2, #0]
 800a18c:	600b      	str	r3, [r1, #0]
 800a18e:	7812      	ldrb	r2, [r2, #0]
 800a190:	1e10      	subs	r0, r2, #0
 800a192:	bf18      	it	ne
 800a194:	2001      	movne	r0, #1
 800a196:	b002      	add	sp, #8
 800a198:	4770      	bx	lr
 800a19a:	4610      	mov	r0, r2
 800a19c:	e7fb      	b.n	800a196 <__ascii_mbtowc+0x16>
 800a19e:	f06f 0001 	mvn.w	r0, #1
 800a1a2:	e7f8      	b.n	800a196 <__ascii_mbtowc+0x16>

0800a1a4 <_Balloc>:
 800a1a4:	b570      	push	{r4, r5, r6, lr}
 800a1a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	460d      	mov	r5, r1
 800a1ac:	b976      	cbnz	r6, 800a1cc <_Balloc+0x28>
 800a1ae:	2010      	movs	r0, #16
 800a1b0:	f001 fe02 	bl	800bdb8 <malloc>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6260      	str	r0, [r4, #36]	; 0x24
 800a1b8:	b920      	cbnz	r0, 800a1c4 <_Balloc+0x20>
 800a1ba:	4b18      	ldr	r3, [pc, #96]	; (800a21c <_Balloc+0x78>)
 800a1bc:	4818      	ldr	r0, [pc, #96]	; (800a220 <_Balloc+0x7c>)
 800a1be:	2166      	movs	r1, #102	; 0x66
 800a1c0:	f000 ff50 	bl	800b064 <__assert_func>
 800a1c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1c8:	6006      	str	r6, [r0, #0]
 800a1ca:	60c6      	str	r6, [r0, #12]
 800a1cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1ce:	68f3      	ldr	r3, [r6, #12]
 800a1d0:	b183      	cbz	r3, 800a1f4 <_Balloc+0x50>
 800a1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1da:	b9b8      	cbnz	r0, 800a20c <_Balloc+0x68>
 800a1dc:	2101      	movs	r1, #1
 800a1de:	fa01 f605 	lsl.w	r6, r1, r5
 800a1e2:	1d72      	adds	r2, r6, #5
 800a1e4:	0092      	lsls	r2, r2, #2
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f000 fcbc 	bl	800ab64 <_calloc_r>
 800a1ec:	b160      	cbz	r0, 800a208 <_Balloc+0x64>
 800a1ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1f2:	e00e      	b.n	800a212 <_Balloc+0x6e>
 800a1f4:	2221      	movs	r2, #33	; 0x21
 800a1f6:	2104      	movs	r1, #4
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 fcb3 	bl	800ab64 <_calloc_r>
 800a1fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a200:	60f0      	str	r0, [r6, #12]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e4      	bne.n	800a1d2 <_Balloc+0x2e>
 800a208:	2000      	movs	r0, #0
 800a20a:	bd70      	pop	{r4, r5, r6, pc}
 800a20c:	6802      	ldr	r2, [r0, #0]
 800a20e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a212:	2300      	movs	r3, #0
 800a214:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a218:	e7f7      	b.n	800a20a <_Balloc+0x66>
 800a21a:	bf00      	nop
 800a21c:	0800d274 	.word	0x0800d274
 800a220:	0800d28b 	.word	0x0800d28b

0800a224 <_Bfree>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a228:	4605      	mov	r5, r0
 800a22a:	460c      	mov	r4, r1
 800a22c:	b976      	cbnz	r6, 800a24c <_Bfree+0x28>
 800a22e:	2010      	movs	r0, #16
 800a230:	f001 fdc2 	bl	800bdb8 <malloc>
 800a234:	4602      	mov	r2, r0
 800a236:	6268      	str	r0, [r5, #36]	; 0x24
 800a238:	b920      	cbnz	r0, 800a244 <_Bfree+0x20>
 800a23a:	4b09      	ldr	r3, [pc, #36]	; (800a260 <_Bfree+0x3c>)
 800a23c:	4809      	ldr	r0, [pc, #36]	; (800a264 <_Bfree+0x40>)
 800a23e:	218a      	movs	r1, #138	; 0x8a
 800a240:	f000 ff10 	bl	800b064 <__assert_func>
 800a244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a248:	6006      	str	r6, [r0, #0]
 800a24a:	60c6      	str	r6, [r0, #12]
 800a24c:	b13c      	cbz	r4, 800a25e <_Bfree+0x3a>
 800a24e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a250:	6862      	ldr	r2, [r4, #4]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a258:	6021      	str	r1, [r4, #0]
 800a25a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a25e:	bd70      	pop	{r4, r5, r6, pc}
 800a260:	0800d274 	.word	0x0800d274
 800a264:	0800d28b 	.word	0x0800d28b

0800a268 <__multadd>:
 800a268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26c:	690d      	ldr	r5, [r1, #16]
 800a26e:	4607      	mov	r7, r0
 800a270:	460c      	mov	r4, r1
 800a272:	461e      	mov	r6, r3
 800a274:	f101 0c14 	add.w	ip, r1, #20
 800a278:	2000      	movs	r0, #0
 800a27a:	f8dc 3000 	ldr.w	r3, [ip]
 800a27e:	b299      	uxth	r1, r3
 800a280:	fb02 6101 	mla	r1, r2, r1, r6
 800a284:	0c1e      	lsrs	r6, r3, #16
 800a286:	0c0b      	lsrs	r3, r1, #16
 800a288:	fb02 3306 	mla	r3, r2, r6, r3
 800a28c:	b289      	uxth	r1, r1
 800a28e:	3001      	adds	r0, #1
 800a290:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a294:	4285      	cmp	r5, r0
 800a296:	f84c 1b04 	str.w	r1, [ip], #4
 800a29a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a29e:	dcec      	bgt.n	800a27a <__multadd+0x12>
 800a2a0:	b30e      	cbz	r6, 800a2e6 <__multadd+0x7e>
 800a2a2:	68a3      	ldr	r3, [r4, #8]
 800a2a4:	42ab      	cmp	r3, r5
 800a2a6:	dc19      	bgt.n	800a2dc <__multadd+0x74>
 800a2a8:	6861      	ldr	r1, [r4, #4]
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	3101      	adds	r1, #1
 800a2ae:	f7ff ff79 	bl	800a1a4 <_Balloc>
 800a2b2:	4680      	mov	r8, r0
 800a2b4:	b928      	cbnz	r0, 800a2c2 <__multadd+0x5a>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <__multadd+0x84>)
 800a2ba:	480d      	ldr	r0, [pc, #52]	; (800a2f0 <__multadd+0x88>)
 800a2bc:	21b5      	movs	r1, #181	; 0xb5
 800a2be:	f000 fed1 	bl	800b064 <__assert_func>
 800a2c2:	6922      	ldr	r2, [r4, #16]
 800a2c4:	3202      	adds	r2, #2
 800a2c6:	f104 010c 	add.w	r1, r4, #12
 800a2ca:	0092      	lsls	r2, r2, #2
 800a2cc:	300c      	adds	r0, #12
 800a2ce:	f7fe fc59 	bl	8008b84 <memcpy>
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f7ff ffa5 	bl	800a224 <_Bfree>
 800a2da:	4644      	mov	r4, r8
 800a2dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2e0:	3501      	adds	r5, #1
 800a2e2:	615e      	str	r6, [r3, #20]
 800a2e4:	6125      	str	r5, [r4, #16]
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ec:	0800d1e8 	.word	0x0800d1e8
 800a2f0:	0800d28b 	.word	0x0800d28b

0800a2f4 <__s2b>:
 800a2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	4615      	mov	r5, r2
 800a2fc:	461f      	mov	r7, r3
 800a2fe:	2209      	movs	r2, #9
 800a300:	3308      	adds	r3, #8
 800a302:	4606      	mov	r6, r0
 800a304:	fb93 f3f2 	sdiv	r3, r3, r2
 800a308:	2100      	movs	r1, #0
 800a30a:	2201      	movs	r2, #1
 800a30c:	429a      	cmp	r2, r3
 800a30e:	db09      	blt.n	800a324 <__s2b+0x30>
 800a310:	4630      	mov	r0, r6
 800a312:	f7ff ff47 	bl	800a1a4 <_Balloc>
 800a316:	b940      	cbnz	r0, 800a32a <__s2b+0x36>
 800a318:	4602      	mov	r2, r0
 800a31a:	4b19      	ldr	r3, [pc, #100]	; (800a380 <__s2b+0x8c>)
 800a31c:	4819      	ldr	r0, [pc, #100]	; (800a384 <__s2b+0x90>)
 800a31e:	21ce      	movs	r1, #206	; 0xce
 800a320:	f000 fea0 	bl	800b064 <__assert_func>
 800a324:	0052      	lsls	r2, r2, #1
 800a326:	3101      	adds	r1, #1
 800a328:	e7f0      	b.n	800a30c <__s2b+0x18>
 800a32a:	9b08      	ldr	r3, [sp, #32]
 800a32c:	6143      	str	r3, [r0, #20]
 800a32e:	2d09      	cmp	r5, #9
 800a330:	f04f 0301 	mov.w	r3, #1
 800a334:	6103      	str	r3, [r0, #16]
 800a336:	dd16      	ble.n	800a366 <__s2b+0x72>
 800a338:	f104 0909 	add.w	r9, r4, #9
 800a33c:	46c8      	mov	r8, r9
 800a33e:	442c      	add	r4, r5
 800a340:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a344:	4601      	mov	r1, r0
 800a346:	3b30      	subs	r3, #48	; 0x30
 800a348:	220a      	movs	r2, #10
 800a34a:	4630      	mov	r0, r6
 800a34c:	f7ff ff8c 	bl	800a268 <__multadd>
 800a350:	45a0      	cmp	r8, r4
 800a352:	d1f5      	bne.n	800a340 <__s2b+0x4c>
 800a354:	f1a5 0408 	sub.w	r4, r5, #8
 800a358:	444c      	add	r4, r9
 800a35a:	1b2d      	subs	r5, r5, r4
 800a35c:	1963      	adds	r3, r4, r5
 800a35e:	42bb      	cmp	r3, r7
 800a360:	db04      	blt.n	800a36c <__s2b+0x78>
 800a362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a366:	340a      	adds	r4, #10
 800a368:	2509      	movs	r5, #9
 800a36a:	e7f6      	b.n	800a35a <__s2b+0x66>
 800a36c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a370:	4601      	mov	r1, r0
 800a372:	3b30      	subs	r3, #48	; 0x30
 800a374:	220a      	movs	r2, #10
 800a376:	4630      	mov	r0, r6
 800a378:	f7ff ff76 	bl	800a268 <__multadd>
 800a37c:	e7ee      	b.n	800a35c <__s2b+0x68>
 800a37e:	bf00      	nop
 800a380:	0800d1e8 	.word	0x0800d1e8
 800a384:	0800d28b 	.word	0x0800d28b

0800a388 <__hi0bits>:
 800a388:	0c03      	lsrs	r3, r0, #16
 800a38a:	041b      	lsls	r3, r3, #16
 800a38c:	b9d3      	cbnz	r3, 800a3c4 <__hi0bits+0x3c>
 800a38e:	0400      	lsls	r0, r0, #16
 800a390:	2310      	movs	r3, #16
 800a392:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a396:	bf04      	itt	eq
 800a398:	0200      	lsleq	r0, r0, #8
 800a39a:	3308      	addeq	r3, #8
 800a39c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3a0:	bf04      	itt	eq
 800a3a2:	0100      	lsleq	r0, r0, #4
 800a3a4:	3304      	addeq	r3, #4
 800a3a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3aa:	bf04      	itt	eq
 800a3ac:	0080      	lsleq	r0, r0, #2
 800a3ae:	3302      	addeq	r3, #2
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	db05      	blt.n	800a3c0 <__hi0bits+0x38>
 800a3b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3b8:	f103 0301 	add.w	r3, r3, #1
 800a3bc:	bf08      	it	eq
 800a3be:	2320      	moveq	r3, #32
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	4770      	bx	lr
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	e7e4      	b.n	800a392 <__hi0bits+0xa>

0800a3c8 <__lo0bits>:
 800a3c8:	6803      	ldr	r3, [r0, #0]
 800a3ca:	f013 0207 	ands.w	r2, r3, #7
 800a3ce:	4601      	mov	r1, r0
 800a3d0:	d00b      	beq.n	800a3ea <__lo0bits+0x22>
 800a3d2:	07da      	lsls	r2, r3, #31
 800a3d4:	d423      	bmi.n	800a41e <__lo0bits+0x56>
 800a3d6:	0798      	lsls	r0, r3, #30
 800a3d8:	bf49      	itett	mi
 800a3da:	085b      	lsrmi	r3, r3, #1
 800a3dc:	089b      	lsrpl	r3, r3, #2
 800a3de:	2001      	movmi	r0, #1
 800a3e0:	600b      	strmi	r3, [r1, #0]
 800a3e2:	bf5c      	itt	pl
 800a3e4:	600b      	strpl	r3, [r1, #0]
 800a3e6:	2002      	movpl	r0, #2
 800a3e8:	4770      	bx	lr
 800a3ea:	b298      	uxth	r0, r3
 800a3ec:	b9a8      	cbnz	r0, 800a41a <__lo0bits+0x52>
 800a3ee:	0c1b      	lsrs	r3, r3, #16
 800a3f0:	2010      	movs	r0, #16
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	b90a      	cbnz	r2, 800a3fa <__lo0bits+0x32>
 800a3f6:	3008      	adds	r0, #8
 800a3f8:	0a1b      	lsrs	r3, r3, #8
 800a3fa:	071a      	lsls	r2, r3, #28
 800a3fc:	bf04      	itt	eq
 800a3fe:	091b      	lsreq	r3, r3, #4
 800a400:	3004      	addeq	r0, #4
 800a402:	079a      	lsls	r2, r3, #30
 800a404:	bf04      	itt	eq
 800a406:	089b      	lsreq	r3, r3, #2
 800a408:	3002      	addeq	r0, #2
 800a40a:	07da      	lsls	r2, r3, #31
 800a40c:	d403      	bmi.n	800a416 <__lo0bits+0x4e>
 800a40e:	085b      	lsrs	r3, r3, #1
 800a410:	f100 0001 	add.w	r0, r0, #1
 800a414:	d005      	beq.n	800a422 <__lo0bits+0x5a>
 800a416:	600b      	str	r3, [r1, #0]
 800a418:	4770      	bx	lr
 800a41a:	4610      	mov	r0, r2
 800a41c:	e7e9      	b.n	800a3f2 <__lo0bits+0x2a>
 800a41e:	2000      	movs	r0, #0
 800a420:	4770      	bx	lr
 800a422:	2020      	movs	r0, #32
 800a424:	4770      	bx	lr
	...

0800a428 <__i2b>:
 800a428:	b510      	push	{r4, lr}
 800a42a:	460c      	mov	r4, r1
 800a42c:	2101      	movs	r1, #1
 800a42e:	f7ff feb9 	bl	800a1a4 <_Balloc>
 800a432:	4602      	mov	r2, r0
 800a434:	b928      	cbnz	r0, 800a442 <__i2b+0x1a>
 800a436:	4b05      	ldr	r3, [pc, #20]	; (800a44c <__i2b+0x24>)
 800a438:	4805      	ldr	r0, [pc, #20]	; (800a450 <__i2b+0x28>)
 800a43a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a43e:	f000 fe11 	bl	800b064 <__assert_func>
 800a442:	2301      	movs	r3, #1
 800a444:	6144      	str	r4, [r0, #20]
 800a446:	6103      	str	r3, [r0, #16]
 800a448:	bd10      	pop	{r4, pc}
 800a44a:	bf00      	nop
 800a44c:	0800d1e8 	.word	0x0800d1e8
 800a450:	0800d28b 	.word	0x0800d28b

0800a454 <__multiply>:
 800a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a458:	4691      	mov	r9, r2
 800a45a:	690a      	ldr	r2, [r1, #16]
 800a45c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a460:	429a      	cmp	r2, r3
 800a462:	bfb8      	it	lt
 800a464:	460b      	movlt	r3, r1
 800a466:	460c      	mov	r4, r1
 800a468:	bfbc      	itt	lt
 800a46a:	464c      	movlt	r4, r9
 800a46c:	4699      	movlt	r9, r3
 800a46e:	6927      	ldr	r7, [r4, #16]
 800a470:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a474:	68a3      	ldr	r3, [r4, #8]
 800a476:	6861      	ldr	r1, [r4, #4]
 800a478:	eb07 060a 	add.w	r6, r7, sl
 800a47c:	42b3      	cmp	r3, r6
 800a47e:	b085      	sub	sp, #20
 800a480:	bfb8      	it	lt
 800a482:	3101      	addlt	r1, #1
 800a484:	f7ff fe8e 	bl	800a1a4 <_Balloc>
 800a488:	b930      	cbnz	r0, 800a498 <__multiply+0x44>
 800a48a:	4602      	mov	r2, r0
 800a48c:	4b44      	ldr	r3, [pc, #272]	; (800a5a0 <__multiply+0x14c>)
 800a48e:	4845      	ldr	r0, [pc, #276]	; (800a5a4 <__multiply+0x150>)
 800a490:	f240 115d 	movw	r1, #349	; 0x15d
 800a494:	f000 fde6 	bl	800b064 <__assert_func>
 800a498:	f100 0514 	add.w	r5, r0, #20
 800a49c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4a0:	462b      	mov	r3, r5
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	4543      	cmp	r3, r8
 800a4a6:	d321      	bcc.n	800a4ec <__multiply+0x98>
 800a4a8:	f104 0314 	add.w	r3, r4, #20
 800a4ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a4b0:	f109 0314 	add.w	r3, r9, #20
 800a4b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a4b8:	9202      	str	r2, [sp, #8]
 800a4ba:	1b3a      	subs	r2, r7, r4
 800a4bc:	3a15      	subs	r2, #21
 800a4be:	f022 0203 	bic.w	r2, r2, #3
 800a4c2:	3204      	adds	r2, #4
 800a4c4:	f104 0115 	add.w	r1, r4, #21
 800a4c8:	428f      	cmp	r7, r1
 800a4ca:	bf38      	it	cc
 800a4cc:	2204      	movcc	r2, #4
 800a4ce:	9201      	str	r2, [sp, #4]
 800a4d0:	9a02      	ldr	r2, [sp, #8]
 800a4d2:	9303      	str	r3, [sp, #12]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d80c      	bhi.n	800a4f2 <__multiply+0x9e>
 800a4d8:	2e00      	cmp	r6, #0
 800a4da:	dd03      	ble.n	800a4e4 <__multiply+0x90>
 800a4dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d05a      	beq.n	800a59a <__multiply+0x146>
 800a4e4:	6106      	str	r6, [r0, #16]
 800a4e6:	b005      	add	sp, #20
 800a4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ec:	f843 2b04 	str.w	r2, [r3], #4
 800a4f0:	e7d8      	b.n	800a4a4 <__multiply+0x50>
 800a4f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4f6:	f1ba 0f00 	cmp.w	sl, #0
 800a4fa:	d024      	beq.n	800a546 <__multiply+0xf2>
 800a4fc:	f104 0e14 	add.w	lr, r4, #20
 800a500:	46a9      	mov	r9, r5
 800a502:	f04f 0c00 	mov.w	ip, #0
 800a506:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a50a:	f8d9 1000 	ldr.w	r1, [r9]
 800a50e:	fa1f fb82 	uxth.w	fp, r2
 800a512:	b289      	uxth	r1, r1
 800a514:	fb0a 110b 	mla	r1, sl, fp, r1
 800a518:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a51c:	f8d9 2000 	ldr.w	r2, [r9]
 800a520:	4461      	add	r1, ip
 800a522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a526:	fb0a c20b 	mla	r2, sl, fp, ip
 800a52a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a52e:	b289      	uxth	r1, r1
 800a530:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a534:	4577      	cmp	r7, lr
 800a536:	f849 1b04 	str.w	r1, [r9], #4
 800a53a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a53e:	d8e2      	bhi.n	800a506 <__multiply+0xb2>
 800a540:	9a01      	ldr	r2, [sp, #4]
 800a542:	f845 c002 	str.w	ip, [r5, r2]
 800a546:	9a03      	ldr	r2, [sp, #12]
 800a548:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a54c:	3304      	adds	r3, #4
 800a54e:	f1b9 0f00 	cmp.w	r9, #0
 800a552:	d020      	beq.n	800a596 <__multiply+0x142>
 800a554:	6829      	ldr	r1, [r5, #0]
 800a556:	f104 0c14 	add.w	ip, r4, #20
 800a55a:	46ae      	mov	lr, r5
 800a55c:	f04f 0a00 	mov.w	sl, #0
 800a560:	f8bc b000 	ldrh.w	fp, [ip]
 800a564:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a568:	fb09 220b 	mla	r2, r9, fp, r2
 800a56c:	4492      	add	sl, r2
 800a56e:	b289      	uxth	r1, r1
 800a570:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a574:	f84e 1b04 	str.w	r1, [lr], #4
 800a578:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a57c:	f8be 1000 	ldrh.w	r1, [lr]
 800a580:	0c12      	lsrs	r2, r2, #16
 800a582:	fb09 1102 	mla	r1, r9, r2, r1
 800a586:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a58a:	4567      	cmp	r7, ip
 800a58c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a590:	d8e6      	bhi.n	800a560 <__multiply+0x10c>
 800a592:	9a01      	ldr	r2, [sp, #4]
 800a594:	50a9      	str	r1, [r5, r2]
 800a596:	3504      	adds	r5, #4
 800a598:	e79a      	b.n	800a4d0 <__multiply+0x7c>
 800a59a:	3e01      	subs	r6, #1
 800a59c:	e79c      	b.n	800a4d8 <__multiply+0x84>
 800a59e:	bf00      	nop
 800a5a0:	0800d1e8 	.word	0x0800d1e8
 800a5a4:	0800d28b 	.word	0x0800d28b

0800a5a8 <__pow5mult>:
 800a5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5ac:	4615      	mov	r5, r2
 800a5ae:	f012 0203 	ands.w	r2, r2, #3
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	460f      	mov	r7, r1
 800a5b6:	d007      	beq.n	800a5c8 <__pow5mult+0x20>
 800a5b8:	4c25      	ldr	r4, [pc, #148]	; (800a650 <__pow5mult+0xa8>)
 800a5ba:	3a01      	subs	r2, #1
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5c2:	f7ff fe51 	bl	800a268 <__multadd>
 800a5c6:	4607      	mov	r7, r0
 800a5c8:	10ad      	asrs	r5, r5, #2
 800a5ca:	d03d      	beq.n	800a648 <__pow5mult+0xa0>
 800a5cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a5ce:	b97c      	cbnz	r4, 800a5f0 <__pow5mult+0x48>
 800a5d0:	2010      	movs	r0, #16
 800a5d2:	f001 fbf1 	bl	800bdb8 <malloc>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	6270      	str	r0, [r6, #36]	; 0x24
 800a5da:	b928      	cbnz	r0, 800a5e8 <__pow5mult+0x40>
 800a5dc:	4b1d      	ldr	r3, [pc, #116]	; (800a654 <__pow5mult+0xac>)
 800a5de:	481e      	ldr	r0, [pc, #120]	; (800a658 <__pow5mult+0xb0>)
 800a5e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a5e4:	f000 fd3e 	bl	800b064 <__assert_func>
 800a5e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5ec:	6004      	str	r4, [r0, #0]
 800a5ee:	60c4      	str	r4, [r0, #12]
 800a5f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5f8:	b94c      	cbnz	r4, 800a60e <__pow5mult+0x66>
 800a5fa:	f240 2171 	movw	r1, #625	; 0x271
 800a5fe:	4630      	mov	r0, r6
 800a600:	f7ff ff12 	bl	800a428 <__i2b>
 800a604:	2300      	movs	r3, #0
 800a606:	f8c8 0008 	str.w	r0, [r8, #8]
 800a60a:	4604      	mov	r4, r0
 800a60c:	6003      	str	r3, [r0, #0]
 800a60e:	f04f 0900 	mov.w	r9, #0
 800a612:	07eb      	lsls	r3, r5, #31
 800a614:	d50a      	bpl.n	800a62c <__pow5mult+0x84>
 800a616:	4639      	mov	r1, r7
 800a618:	4622      	mov	r2, r4
 800a61a:	4630      	mov	r0, r6
 800a61c:	f7ff ff1a 	bl	800a454 <__multiply>
 800a620:	4639      	mov	r1, r7
 800a622:	4680      	mov	r8, r0
 800a624:	4630      	mov	r0, r6
 800a626:	f7ff fdfd 	bl	800a224 <_Bfree>
 800a62a:	4647      	mov	r7, r8
 800a62c:	106d      	asrs	r5, r5, #1
 800a62e:	d00b      	beq.n	800a648 <__pow5mult+0xa0>
 800a630:	6820      	ldr	r0, [r4, #0]
 800a632:	b938      	cbnz	r0, 800a644 <__pow5mult+0x9c>
 800a634:	4622      	mov	r2, r4
 800a636:	4621      	mov	r1, r4
 800a638:	4630      	mov	r0, r6
 800a63a:	f7ff ff0b 	bl	800a454 <__multiply>
 800a63e:	6020      	str	r0, [r4, #0]
 800a640:	f8c0 9000 	str.w	r9, [r0]
 800a644:	4604      	mov	r4, r0
 800a646:	e7e4      	b.n	800a612 <__pow5mult+0x6a>
 800a648:	4638      	mov	r0, r7
 800a64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a64e:	bf00      	nop
 800a650:	0800d3d8 	.word	0x0800d3d8
 800a654:	0800d274 	.word	0x0800d274
 800a658:	0800d28b 	.word	0x0800d28b

0800a65c <__lshift>:
 800a65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a660:	460c      	mov	r4, r1
 800a662:	6849      	ldr	r1, [r1, #4]
 800a664:	6923      	ldr	r3, [r4, #16]
 800a666:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a66a:	68a3      	ldr	r3, [r4, #8]
 800a66c:	4607      	mov	r7, r0
 800a66e:	4691      	mov	r9, r2
 800a670:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a674:	f108 0601 	add.w	r6, r8, #1
 800a678:	42b3      	cmp	r3, r6
 800a67a:	db0b      	blt.n	800a694 <__lshift+0x38>
 800a67c:	4638      	mov	r0, r7
 800a67e:	f7ff fd91 	bl	800a1a4 <_Balloc>
 800a682:	4605      	mov	r5, r0
 800a684:	b948      	cbnz	r0, 800a69a <__lshift+0x3e>
 800a686:	4602      	mov	r2, r0
 800a688:	4b2a      	ldr	r3, [pc, #168]	; (800a734 <__lshift+0xd8>)
 800a68a:	482b      	ldr	r0, [pc, #172]	; (800a738 <__lshift+0xdc>)
 800a68c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a690:	f000 fce8 	bl	800b064 <__assert_func>
 800a694:	3101      	adds	r1, #1
 800a696:	005b      	lsls	r3, r3, #1
 800a698:	e7ee      	b.n	800a678 <__lshift+0x1c>
 800a69a:	2300      	movs	r3, #0
 800a69c:	f100 0114 	add.w	r1, r0, #20
 800a6a0:	f100 0210 	add.w	r2, r0, #16
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	4553      	cmp	r3, sl
 800a6a8:	db37      	blt.n	800a71a <__lshift+0xbe>
 800a6aa:	6920      	ldr	r0, [r4, #16]
 800a6ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6b0:	f104 0314 	add.w	r3, r4, #20
 800a6b4:	f019 091f 	ands.w	r9, r9, #31
 800a6b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a6c0:	d02f      	beq.n	800a722 <__lshift+0xc6>
 800a6c2:	f1c9 0e20 	rsb	lr, r9, #32
 800a6c6:	468a      	mov	sl, r1
 800a6c8:	f04f 0c00 	mov.w	ip, #0
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	fa02 f209 	lsl.w	r2, r2, r9
 800a6d2:	ea42 020c 	orr.w	r2, r2, ip
 800a6d6:	f84a 2b04 	str.w	r2, [sl], #4
 800a6da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6de:	4298      	cmp	r0, r3
 800a6e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a6e4:	d8f2      	bhi.n	800a6cc <__lshift+0x70>
 800a6e6:	1b03      	subs	r3, r0, r4
 800a6e8:	3b15      	subs	r3, #21
 800a6ea:	f023 0303 	bic.w	r3, r3, #3
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	f104 0215 	add.w	r2, r4, #21
 800a6f4:	4290      	cmp	r0, r2
 800a6f6:	bf38      	it	cc
 800a6f8:	2304      	movcc	r3, #4
 800a6fa:	f841 c003 	str.w	ip, [r1, r3]
 800a6fe:	f1bc 0f00 	cmp.w	ip, #0
 800a702:	d001      	beq.n	800a708 <__lshift+0xac>
 800a704:	f108 0602 	add.w	r6, r8, #2
 800a708:	3e01      	subs	r6, #1
 800a70a:	4638      	mov	r0, r7
 800a70c:	612e      	str	r6, [r5, #16]
 800a70e:	4621      	mov	r1, r4
 800a710:	f7ff fd88 	bl	800a224 <_Bfree>
 800a714:	4628      	mov	r0, r5
 800a716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a71e:	3301      	adds	r3, #1
 800a720:	e7c1      	b.n	800a6a6 <__lshift+0x4a>
 800a722:	3904      	subs	r1, #4
 800a724:	f853 2b04 	ldr.w	r2, [r3], #4
 800a728:	f841 2f04 	str.w	r2, [r1, #4]!
 800a72c:	4298      	cmp	r0, r3
 800a72e:	d8f9      	bhi.n	800a724 <__lshift+0xc8>
 800a730:	e7ea      	b.n	800a708 <__lshift+0xac>
 800a732:	bf00      	nop
 800a734:	0800d1e8 	.word	0x0800d1e8
 800a738:	0800d28b 	.word	0x0800d28b

0800a73c <__mcmp>:
 800a73c:	b530      	push	{r4, r5, lr}
 800a73e:	6902      	ldr	r2, [r0, #16]
 800a740:	690c      	ldr	r4, [r1, #16]
 800a742:	1b12      	subs	r2, r2, r4
 800a744:	d10e      	bne.n	800a764 <__mcmp+0x28>
 800a746:	f100 0314 	add.w	r3, r0, #20
 800a74a:	3114      	adds	r1, #20
 800a74c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a750:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a754:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a758:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a75c:	42a5      	cmp	r5, r4
 800a75e:	d003      	beq.n	800a768 <__mcmp+0x2c>
 800a760:	d305      	bcc.n	800a76e <__mcmp+0x32>
 800a762:	2201      	movs	r2, #1
 800a764:	4610      	mov	r0, r2
 800a766:	bd30      	pop	{r4, r5, pc}
 800a768:	4283      	cmp	r3, r0
 800a76a:	d3f3      	bcc.n	800a754 <__mcmp+0x18>
 800a76c:	e7fa      	b.n	800a764 <__mcmp+0x28>
 800a76e:	f04f 32ff 	mov.w	r2, #4294967295
 800a772:	e7f7      	b.n	800a764 <__mcmp+0x28>

0800a774 <__mdiff>:
 800a774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	460c      	mov	r4, r1
 800a77a:	4606      	mov	r6, r0
 800a77c:	4611      	mov	r1, r2
 800a77e:	4620      	mov	r0, r4
 800a780:	4690      	mov	r8, r2
 800a782:	f7ff ffdb 	bl	800a73c <__mcmp>
 800a786:	1e05      	subs	r5, r0, #0
 800a788:	d110      	bne.n	800a7ac <__mdiff+0x38>
 800a78a:	4629      	mov	r1, r5
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7ff fd09 	bl	800a1a4 <_Balloc>
 800a792:	b930      	cbnz	r0, 800a7a2 <__mdiff+0x2e>
 800a794:	4b3a      	ldr	r3, [pc, #232]	; (800a880 <__mdiff+0x10c>)
 800a796:	4602      	mov	r2, r0
 800a798:	f240 2132 	movw	r1, #562	; 0x232
 800a79c:	4839      	ldr	r0, [pc, #228]	; (800a884 <__mdiff+0x110>)
 800a79e:	f000 fc61 	bl	800b064 <__assert_func>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ac:	bfa4      	itt	ge
 800a7ae:	4643      	movge	r3, r8
 800a7b0:	46a0      	movge	r8, r4
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7b8:	bfa6      	itte	ge
 800a7ba:	461c      	movge	r4, r3
 800a7bc:	2500      	movge	r5, #0
 800a7be:	2501      	movlt	r5, #1
 800a7c0:	f7ff fcf0 	bl	800a1a4 <_Balloc>
 800a7c4:	b920      	cbnz	r0, 800a7d0 <__mdiff+0x5c>
 800a7c6:	4b2e      	ldr	r3, [pc, #184]	; (800a880 <__mdiff+0x10c>)
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a7ce:	e7e5      	b.n	800a79c <__mdiff+0x28>
 800a7d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7d4:	6926      	ldr	r6, [r4, #16]
 800a7d6:	60c5      	str	r5, [r0, #12]
 800a7d8:	f104 0914 	add.w	r9, r4, #20
 800a7dc:	f108 0514 	add.w	r5, r8, #20
 800a7e0:	f100 0e14 	add.w	lr, r0, #20
 800a7e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a7e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a7ec:	f108 0210 	add.w	r2, r8, #16
 800a7f0:	46f2      	mov	sl, lr
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7fc:	fa1f f883 	uxth.w	r8, r3
 800a800:	fa11 f18b 	uxtah	r1, r1, fp
 800a804:	0c1b      	lsrs	r3, r3, #16
 800a806:	eba1 0808 	sub.w	r8, r1, r8
 800a80a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a80e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a812:	fa1f f888 	uxth.w	r8, r8
 800a816:	1419      	asrs	r1, r3, #16
 800a818:	454e      	cmp	r6, r9
 800a81a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a81e:	f84a 3b04 	str.w	r3, [sl], #4
 800a822:	d8e7      	bhi.n	800a7f4 <__mdiff+0x80>
 800a824:	1b33      	subs	r3, r6, r4
 800a826:	3b15      	subs	r3, #21
 800a828:	f023 0303 	bic.w	r3, r3, #3
 800a82c:	3304      	adds	r3, #4
 800a82e:	3415      	adds	r4, #21
 800a830:	42a6      	cmp	r6, r4
 800a832:	bf38      	it	cc
 800a834:	2304      	movcc	r3, #4
 800a836:	441d      	add	r5, r3
 800a838:	4473      	add	r3, lr
 800a83a:	469e      	mov	lr, r3
 800a83c:	462e      	mov	r6, r5
 800a83e:	4566      	cmp	r6, ip
 800a840:	d30e      	bcc.n	800a860 <__mdiff+0xec>
 800a842:	f10c 0203 	add.w	r2, ip, #3
 800a846:	1b52      	subs	r2, r2, r5
 800a848:	f022 0203 	bic.w	r2, r2, #3
 800a84c:	3d03      	subs	r5, #3
 800a84e:	45ac      	cmp	ip, r5
 800a850:	bf38      	it	cc
 800a852:	2200      	movcc	r2, #0
 800a854:	441a      	add	r2, r3
 800a856:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a85a:	b17b      	cbz	r3, 800a87c <__mdiff+0x108>
 800a85c:	6107      	str	r7, [r0, #16]
 800a85e:	e7a3      	b.n	800a7a8 <__mdiff+0x34>
 800a860:	f856 8b04 	ldr.w	r8, [r6], #4
 800a864:	fa11 f288 	uxtah	r2, r1, r8
 800a868:	1414      	asrs	r4, r2, #16
 800a86a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a86e:	b292      	uxth	r2, r2
 800a870:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a874:	f84e 2b04 	str.w	r2, [lr], #4
 800a878:	1421      	asrs	r1, r4, #16
 800a87a:	e7e0      	b.n	800a83e <__mdiff+0xca>
 800a87c:	3f01      	subs	r7, #1
 800a87e:	e7ea      	b.n	800a856 <__mdiff+0xe2>
 800a880:	0800d1e8 	.word	0x0800d1e8
 800a884:	0800d28b 	.word	0x0800d28b

0800a888 <__ulp>:
 800a888:	b082      	sub	sp, #8
 800a88a:	ed8d 0b00 	vstr	d0, [sp]
 800a88e:	9b01      	ldr	r3, [sp, #4]
 800a890:	4912      	ldr	r1, [pc, #72]	; (800a8dc <__ulp+0x54>)
 800a892:	4019      	ands	r1, r3
 800a894:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a898:	2900      	cmp	r1, #0
 800a89a:	dd05      	ble.n	800a8a8 <__ulp+0x20>
 800a89c:	2200      	movs	r2, #0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	ec43 2b10 	vmov	d0, r2, r3
 800a8a4:	b002      	add	sp, #8
 800a8a6:	4770      	bx	lr
 800a8a8:	4249      	negs	r1, r1
 800a8aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a8ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a8b2:	f04f 0200 	mov.w	r2, #0
 800a8b6:	f04f 0300 	mov.w	r3, #0
 800a8ba:	da04      	bge.n	800a8c6 <__ulp+0x3e>
 800a8bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a8c0:	fa41 f300 	asr.w	r3, r1, r0
 800a8c4:	e7ec      	b.n	800a8a0 <__ulp+0x18>
 800a8c6:	f1a0 0114 	sub.w	r1, r0, #20
 800a8ca:	291e      	cmp	r1, #30
 800a8cc:	bfda      	itte	le
 800a8ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a8d2:	fa20 f101 	lsrle.w	r1, r0, r1
 800a8d6:	2101      	movgt	r1, #1
 800a8d8:	460a      	mov	r2, r1
 800a8da:	e7e1      	b.n	800a8a0 <__ulp+0x18>
 800a8dc:	7ff00000 	.word	0x7ff00000

0800a8e0 <__b2d>:
 800a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e2:	6905      	ldr	r5, [r0, #16]
 800a8e4:	f100 0714 	add.w	r7, r0, #20
 800a8e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a8ec:	1f2e      	subs	r6, r5, #4
 800a8ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f7ff fd48 	bl	800a388 <__hi0bits>
 800a8f8:	f1c0 0320 	rsb	r3, r0, #32
 800a8fc:	280a      	cmp	r0, #10
 800a8fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a97c <__b2d+0x9c>
 800a902:	600b      	str	r3, [r1, #0]
 800a904:	dc14      	bgt.n	800a930 <__b2d+0x50>
 800a906:	f1c0 0e0b 	rsb	lr, r0, #11
 800a90a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a90e:	42b7      	cmp	r7, r6
 800a910:	ea41 030c 	orr.w	r3, r1, ip
 800a914:	bf34      	ite	cc
 800a916:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a91a:	2100      	movcs	r1, #0
 800a91c:	3015      	adds	r0, #21
 800a91e:	fa04 f000 	lsl.w	r0, r4, r0
 800a922:	fa21 f10e 	lsr.w	r1, r1, lr
 800a926:	ea40 0201 	orr.w	r2, r0, r1
 800a92a:	ec43 2b10 	vmov	d0, r2, r3
 800a92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a930:	42b7      	cmp	r7, r6
 800a932:	bf3a      	itte	cc
 800a934:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a938:	f1a5 0608 	subcc.w	r6, r5, #8
 800a93c:	2100      	movcs	r1, #0
 800a93e:	380b      	subs	r0, #11
 800a940:	d017      	beq.n	800a972 <__b2d+0x92>
 800a942:	f1c0 0c20 	rsb	ip, r0, #32
 800a946:	fa04 f500 	lsl.w	r5, r4, r0
 800a94a:	42be      	cmp	r6, r7
 800a94c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a950:	ea45 0504 	orr.w	r5, r5, r4
 800a954:	bf8c      	ite	hi
 800a956:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a95a:	2400      	movls	r4, #0
 800a95c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a960:	fa01 f000 	lsl.w	r0, r1, r0
 800a964:	fa24 f40c 	lsr.w	r4, r4, ip
 800a968:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a96c:	ea40 0204 	orr.w	r2, r0, r4
 800a970:	e7db      	b.n	800a92a <__b2d+0x4a>
 800a972:	ea44 030c 	orr.w	r3, r4, ip
 800a976:	460a      	mov	r2, r1
 800a978:	e7d7      	b.n	800a92a <__b2d+0x4a>
 800a97a:	bf00      	nop
 800a97c:	3ff00000 	.word	0x3ff00000

0800a980 <__d2b>:
 800a980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a984:	4689      	mov	r9, r1
 800a986:	2101      	movs	r1, #1
 800a988:	ec57 6b10 	vmov	r6, r7, d0
 800a98c:	4690      	mov	r8, r2
 800a98e:	f7ff fc09 	bl	800a1a4 <_Balloc>
 800a992:	4604      	mov	r4, r0
 800a994:	b930      	cbnz	r0, 800a9a4 <__d2b+0x24>
 800a996:	4602      	mov	r2, r0
 800a998:	4b25      	ldr	r3, [pc, #148]	; (800aa30 <__d2b+0xb0>)
 800a99a:	4826      	ldr	r0, [pc, #152]	; (800aa34 <__d2b+0xb4>)
 800a99c:	f240 310a 	movw	r1, #778	; 0x30a
 800a9a0:	f000 fb60 	bl	800b064 <__assert_func>
 800a9a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a9a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9ac:	bb35      	cbnz	r5, 800a9fc <__d2b+0x7c>
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	9301      	str	r3, [sp, #4]
 800a9b2:	d028      	beq.n	800aa06 <__d2b+0x86>
 800a9b4:	4668      	mov	r0, sp
 800a9b6:	9600      	str	r6, [sp, #0]
 800a9b8:	f7ff fd06 	bl	800a3c8 <__lo0bits>
 800a9bc:	9900      	ldr	r1, [sp, #0]
 800a9be:	b300      	cbz	r0, 800aa02 <__d2b+0x82>
 800a9c0:	9a01      	ldr	r2, [sp, #4]
 800a9c2:	f1c0 0320 	rsb	r3, r0, #32
 800a9c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	40c2      	lsrs	r2, r0
 800a9ce:	6163      	str	r3, [r4, #20]
 800a9d0:	9201      	str	r2, [sp, #4]
 800a9d2:	9b01      	ldr	r3, [sp, #4]
 800a9d4:	61a3      	str	r3, [r4, #24]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	bf14      	ite	ne
 800a9da:	2202      	movne	r2, #2
 800a9dc:	2201      	moveq	r2, #1
 800a9de:	6122      	str	r2, [r4, #16]
 800a9e0:	b1d5      	cbz	r5, 800aa18 <__d2b+0x98>
 800a9e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a9e6:	4405      	add	r5, r0
 800a9e8:	f8c9 5000 	str.w	r5, [r9]
 800a9ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9f0:	f8c8 0000 	str.w	r0, [r8]
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	b003      	add	sp, #12
 800a9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa00:	e7d5      	b.n	800a9ae <__d2b+0x2e>
 800aa02:	6161      	str	r1, [r4, #20]
 800aa04:	e7e5      	b.n	800a9d2 <__d2b+0x52>
 800aa06:	a801      	add	r0, sp, #4
 800aa08:	f7ff fcde 	bl	800a3c8 <__lo0bits>
 800aa0c:	9b01      	ldr	r3, [sp, #4]
 800aa0e:	6163      	str	r3, [r4, #20]
 800aa10:	2201      	movs	r2, #1
 800aa12:	6122      	str	r2, [r4, #16]
 800aa14:	3020      	adds	r0, #32
 800aa16:	e7e3      	b.n	800a9e0 <__d2b+0x60>
 800aa18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa20:	f8c9 0000 	str.w	r0, [r9]
 800aa24:	6918      	ldr	r0, [r3, #16]
 800aa26:	f7ff fcaf 	bl	800a388 <__hi0bits>
 800aa2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa2e:	e7df      	b.n	800a9f0 <__d2b+0x70>
 800aa30:	0800d1e8 	.word	0x0800d1e8
 800aa34:	0800d28b 	.word	0x0800d28b

0800aa38 <__ratio>:
 800aa38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	4688      	mov	r8, r1
 800aa3e:	4669      	mov	r1, sp
 800aa40:	4681      	mov	r9, r0
 800aa42:	f7ff ff4d 	bl	800a8e0 <__b2d>
 800aa46:	a901      	add	r1, sp, #4
 800aa48:	4640      	mov	r0, r8
 800aa4a:	ec55 4b10 	vmov	r4, r5, d0
 800aa4e:	f7ff ff47 	bl	800a8e0 <__b2d>
 800aa52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa5a:	eba3 0c02 	sub.w	ip, r3, r2
 800aa5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa62:	1a9b      	subs	r3, r3, r2
 800aa64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aa68:	ec51 0b10 	vmov	r0, r1, d0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	bfd6      	itet	le
 800aa70:	460a      	movle	r2, r1
 800aa72:	462a      	movgt	r2, r5
 800aa74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa78:	468b      	mov	fp, r1
 800aa7a:	462f      	mov	r7, r5
 800aa7c:	bfd4      	ite	le
 800aa7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aa82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa86:	4620      	mov	r0, r4
 800aa88:	ee10 2a10 	vmov	r2, s0
 800aa8c:	465b      	mov	r3, fp
 800aa8e:	4639      	mov	r1, r7
 800aa90:	f7f5 fefc 	bl	800088c <__aeabi_ddiv>
 800aa94:	ec41 0b10 	vmov	d0, r0, r1
 800aa98:	b003      	add	sp, #12
 800aa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800aaa0 <_mprec_log10>:
 800aaa0:	2817      	cmp	r0, #23
 800aaa2:	b5d0      	push	{r4, r6, r7, lr}
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	dc07      	bgt.n	800aab8 <_mprec_log10+0x18>
 800aaa8:	4809      	ldr	r0, [pc, #36]	; (800aad0 <_mprec_log10+0x30>)
 800aaaa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800aaae:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aab2:	ec41 0b10 	vmov	d0, r0, r1
 800aab6:	bdd0      	pop	{r4, r6, r7, pc}
 800aab8:	4906      	ldr	r1, [pc, #24]	; (800aad4 <_mprec_log10+0x34>)
 800aaba:	4f07      	ldr	r7, [pc, #28]	; (800aad8 <_mprec_log10+0x38>)
 800aabc:	2000      	movs	r0, #0
 800aabe:	2600      	movs	r6, #0
 800aac0:	4632      	mov	r2, r6
 800aac2:	463b      	mov	r3, r7
 800aac4:	f7f5 fdb8 	bl	8000638 <__aeabi_dmul>
 800aac8:	3c01      	subs	r4, #1
 800aaca:	d1f9      	bne.n	800aac0 <_mprec_log10+0x20>
 800aacc:	e7f1      	b.n	800aab2 <_mprec_log10+0x12>
 800aace:	bf00      	nop
 800aad0:	0800d310 	.word	0x0800d310
 800aad4:	3ff00000 	.word	0x3ff00000
 800aad8:	40240000 	.word	0x40240000

0800aadc <__copybits>:
 800aadc:	3901      	subs	r1, #1
 800aade:	b570      	push	{r4, r5, r6, lr}
 800aae0:	1149      	asrs	r1, r1, #5
 800aae2:	6914      	ldr	r4, [r2, #16]
 800aae4:	3101      	adds	r1, #1
 800aae6:	f102 0314 	add.w	r3, r2, #20
 800aaea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aaee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aaf2:	1f05      	subs	r5, r0, #4
 800aaf4:	42a3      	cmp	r3, r4
 800aaf6:	d30c      	bcc.n	800ab12 <__copybits+0x36>
 800aaf8:	1aa3      	subs	r3, r4, r2
 800aafa:	3b11      	subs	r3, #17
 800aafc:	f023 0303 	bic.w	r3, r3, #3
 800ab00:	3211      	adds	r2, #17
 800ab02:	42a2      	cmp	r2, r4
 800ab04:	bf88      	it	hi
 800ab06:	2300      	movhi	r3, #0
 800ab08:	4418      	add	r0, r3
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	4288      	cmp	r0, r1
 800ab0e:	d305      	bcc.n	800ab1c <__copybits+0x40>
 800ab10:	bd70      	pop	{r4, r5, r6, pc}
 800ab12:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab16:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab1a:	e7eb      	b.n	800aaf4 <__copybits+0x18>
 800ab1c:	f840 3b04 	str.w	r3, [r0], #4
 800ab20:	e7f4      	b.n	800ab0c <__copybits+0x30>

0800ab22 <__any_on>:
 800ab22:	f100 0214 	add.w	r2, r0, #20
 800ab26:	6900      	ldr	r0, [r0, #16]
 800ab28:	114b      	asrs	r3, r1, #5
 800ab2a:	4298      	cmp	r0, r3
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	db11      	blt.n	800ab54 <__any_on+0x32>
 800ab30:	dd0a      	ble.n	800ab48 <__any_on+0x26>
 800ab32:	f011 011f 	ands.w	r1, r1, #31
 800ab36:	d007      	beq.n	800ab48 <__any_on+0x26>
 800ab38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab3c:	fa24 f001 	lsr.w	r0, r4, r1
 800ab40:	fa00 f101 	lsl.w	r1, r0, r1
 800ab44:	428c      	cmp	r4, r1
 800ab46:	d10b      	bne.n	800ab60 <__any_on+0x3e>
 800ab48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d803      	bhi.n	800ab58 <__any_on+0x36>
 800ab50:	2000      	movs	r0, #0
 800ab52:	bd10      	pop	{r4, pc}
 800ab54:	4603      	mov	r3, r0
 800ab56:	e7f7      	b.n	800ab48 <__any_on+0x26>
 800ab58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	d0f5      	beq.n	800ab4c <__any_on+0x2a>
 800ab60:	2001      	movs	r0, #1
 800ab62:	e7f6      	b.n	800ab52 <__any_on+0x30>

0800ab64 <_calloc_r>:
 800ab64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab66:	fba1 2402 	umull	r2, r4, r1, r2
 800ab6a:	b94c      	cbnz	r4, 800ab80 <_calloc_r+0x1c>
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	9201      	str	r2, [sp, #4]
 800ab70:	f000 f82e 	bl	800abd0 <_malloc_r>
 800ab74:	9a01      	ldr	r2, [sp, #4]
 800ab76:	4605      	mov	r5, r0
 800ab78:	b930      	cbnz	r0, 800ab88 <_calloc_r+0x24>
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	b003      	add	sp, #12
 800ab7e:	bd30      	pop	{r4, r5, pc}
 800ab80:	220c      	movs	r2, #12
 800ab82:	6002      	str	r2, [r0, #0]
 800ab84:	2500      	movs	r5, #0
 800ab86:	e7f8      	b.n	800ab7a <_calloc_r+0x16>
 800ab88:	4621      	mov	r1, r4
 800ab8a:	f7fe f809 	bl	8008ba0 <memset>
 800ab8e:	e7f4      	b.n	800ab7a <_calloc_r+0x16>

0800ab90 <sbrk_aligned>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	4e0e      	ldr	r6, [pc, #56]	; (800abcc <sbrk_aligned+0x3c>)
 800ab94:	460c      	mov	r4, r1
 800ab96:	6831      	ldr	r1, [r6, #0]
 800ab98:	4605      	mov	r5, r0
 800ab9a:	b911      	cbnz	r1, 800aba2 <sbrk_aligned+0x12>
 800ab9c:	f000 fa28 	bl	800aff0 <_sbrk_r>
 800aba0:	6030      	str	r0, [r6, #0]
 800aba2:	4621      	mov	r1, r4
 800aba4:	4628      	mov	r0, r5
 800aba6:	f000 fa23 	bl	800aff0 <_sbrk_r>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	d00a      	beq.n	800abc4 <sbrk_aligned+0x34>
 800abae:	1cc4      	adds	r4, r0, #3
 800abb0:	f024 0403 	bic.w	r4, r4, #3
 800abb4:	42a0      	cmp	r0, r4
 800abb6:	d007      	beq.n	800abc8 <sbrk_aligned+0x38>
 800abb8:	1a21      	subs	r1, r4, r0
 800abba:	4628      	mov	r0, r5
 800abbc:	f000 fa18 	bl	800aff0 <_sbrk_r>
 800abc0:	3001      	adds	r0, #1
 800abc2:	d101      	bne.n	800abc8 <sbrk_aligned+0x38>
 800abc4:	f04f 34ff 	mov.w	r4, #4294967295
 800abc8:	4620      	mov	r0, r4
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	20000998 	.word	0x20000998

0800abd0 <_malloc_r>:
 800abd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd4:	1ccd      	adds	r5, r1, #3
 800abd6:	f025 0503 	bic.w	r5, r5, #3
 800abda:	3508      	adds	r5, #8
 800abdc:	2d0c      	cmp	r5, #12
 800abde:	bf38      	it	cc
 800abe0:	250c      	movcc	r5, #12
 800abe2:	2d00      	cmp	r5, #0
 800abe4:	4607      	mov	r7, r0
 800abe6:	db01      	blt.n	800abec <_malloc_r+0x1c>
 800abe8:	42a9      	cmp	r1, r5
 800abea:	d905      	bls.n	800abf8 <_malloc_r+0x28>
 800abec:	230c      	movs	r3, #12
 800abee:	603b      	str	r3, [r7, #0]
 800abf0:	2600      	movs	r6, #0
 800abf2:	4630      	mov	r0, r6
 800abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf8:	4e2e      	ldr	r6, [pc, #184]	; (800acb4 <_malloc_r+0xe4>)
 800abfa:	f001 f8e5 	bl	800bdc8 <__malloc_lock>
 800abfe:	6833      	ldr	r3, [r6, #0]
 800ac00:	461c      	mov	r4, r3
 800ac02:	bb34      	cbnz	r4, 800ac52 <_malloc_r+0x82>
 800ac04:	4629      	mov	r1, r5
 800ac06:	4638      	mov	r0, r7
 800ac08:	f7ff ffc2 	bl	800ab90 <sbrk_aligned>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	4604      	mov	r4, r0
 800ac10:	d14d      	bne.n	800acae <_malloc_r+0xde>
 800ac12:	6834      	ldr	r4, [r6, #0]
 800ac14:	4626      	mov	r6, r4
 800ac16:	2e00      	cmp	r6, #0
 800ac18:	d140      	bne.n	800ac9c <_malloc_r+0xcc>
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4638      	mov	r0, r7
 800ac20:	eb04 0803 	add.w	r8, r4, r3
 800ac24:	f000 f9e4 	bl	800aff0 <_sbrk_r>
 800ac28:	4580      	cmp	r8, r0
 800ac2a:	d13a      	bne.n	800aca2 <_malloc_r+0xd2>
 800ac2c:	6821      	ldr	r1, [r4, #0]
 800ac2e:	3503      	adds	r5, #3
 800ac30:	1a6d      	subs	r5, r5, r1
 800ac32:	f025 0503 	bic.w	r5, r5, #3
 800ac36:	3508      	adds	r5, #8
 800ac38:	2d0c      	cmp	r5, #12
 800ac3a:	bf38      	it	cc
 800ac3c:	250c      	movcc	r5, #12
 800ac3e:	4629      	mov	r1, r5
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7ff ffa5 	bl	800ab90 <sbrk_aligned>
 800ac46:	3001      	adds	r0, #1
 800ac48:	d02b      	beq.n	800aca2 <_malloc_r+0xd2>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	442b      	add	r3, r5
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	e00e      	b.n	800ac70 <_malloc_r+0xa0>
 800ac52:	6822      	ldr	r2, [r4, #0]
 800ac54:	1b52      	subs	r2, r2, r5
 800ac56:	d41e      	bmi.n	800ac96 <_malloc_r+0xc6>
 800ac58:	2a0b      	cmp	r2, #11
 800ac5a:	d916      	bls.n	800ac8a <_malloc_r+0xba>
 800ac5c:	1961      	adds	r1, r4, r5
 800ac5e:	42a3      	cmp	r3, r4
 800ac60:	6025      	str	r5, [r4, #0]
 800ac62:	bf18      	it	ne
 800ac64:	6059      	strne	r1, [r3, #4]
 800ac66:	6863      	ldr	r3, [r4, #4]
 800ac68:	bf08      	it	eq
 800ac6a:	6031      	streq	r1, [r6, #0]
 800ac6c:	5162      	str	r2, [r4, r5]
 800ac6e:	604b      	str	r3, [r1, #4]
 800ac70:	4638      	mov	r0, r7
 800ac72:	f104 060b 	add.w	r6, r4, #11
 800ac76:	f001 f8ad 	bl	800bdd4 <__malloc_unlock>
 800ac7a:	f026 0607 	bic.w	r6, r6, #7
 800ac7e:	1d23      	adds	r3, r4, #4
 800ac80:	1af2      	subs	r2, r6, r3
 800ac82:	d0b6      	beq.n	800abf2 <_malloc_r+0x22>
 800ac84:	1b9b      	subs	r3, r3, r6
 800ac86:	50a3      	str	r3, [r4, r2]
 800ac88:	e7b3      	b.n	800abf2 <_malloc_r+0x22>
 800ac8a:	6862      	ldr	r2, [r4, #4]
 800ac8c:	42a3      	cmp	r3, r4
 800ac8e:	bf0c      	ite	eq
 800ac90:	6032      	streq	r2, [r6, #0]
 800ac92:	605a      	strne	r2, [r3, #4]
 800ac94:	e7ec      	b.n	800ac70 <_malloc_r+0xa0>
 800ac96:	4623      	mov	r3, r4
 800ac98:	6864      	ldr	r4, [r4, #4]
 800ac9a:	e7b2      	b.n	800ac02 <_malloc_r+0x32>
 800ac9c:	4634      	mov	r4, r6
 800ac9e:	6876      	ldr	r6, [r6, #4]
 800aca0:	e7b9      	b.n	800ac16 <_malloc_r+0x46>
 800aca2:	230c      	movs	r3, #12
 800aca4:	603b      	str	r3, [r7, #0]
 800aca6:	4638      	mov	r0, r7
 800aca8:	f001 f894 	bl	800bdd4 <__malloc_unlock>
 800acac:	e7a1      	b.n	800abf2 <_malloc_r+0x22>
 800acae:	6025      	str	r5, [r4, #0]
 800acb0:	e7de      	b.n	800ac70 <_malloc_r+0xa0>
 800acb2:	bf00      	nop
 800acb4:	20000994 	.word	0x20000994

0800acb8 <_printf_common>:
 800acb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acbc:	4616      	mov	r6, r2
 800acbe:	4699      	mov	r9, r3
 800acc0:	688a      	ldr	r2, [r1, #8]
 800acc2:	690b      	ldr	r3, [r1, #16]
 800acc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acc8:	4293      	cmp	r3, r2
 800acca:	bfb8      	it	lt
 800accc:	4613      	movlt	r3, r2
 800acce:	6033      	str	r3, [r6, #0]
 800acd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acd4:	4607      	mov	r7, r0
 800acd6:	460c      	mov	r4, r1
 800acd8:	b10a      	cbz	r2, 800acde <_printf_common+0x26>
 800acda:	3301      	adds	r3, #1
 800acdc:	6033      	str	r3, [r6, #0]
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	0699      	lsls	r1, r3, #26
 800ace2:	bf42      	ittt	mi
 800ace4:	6833      	ldrmi	r3, [r6, #0]
 800ace6:	3302      	addmi	r3, #2
 800ace8:	6033      	strmi	r3, [r6, #0]
 800acea:	6825      	ldr	r5, [r4, #0]
 800acec:	f015 0506 	ands.w	r5, r5, #6
 800acf0:	d106      	bne.n	800ad00 <_printf_common+0x48>
 800acf2:	f104 0a19 	add.w	sl, r4, #25
 800acf6:	68e3      	ldr	r3, [r4, #12]
 800acf8:	6832      	ldr	r2, [r6, #0]
 800acfa:	1a9b      	subs	r3, r3, r2
 800acfc:	42ab      	cmp	r3, r5
 800acfe:	dc26      	bgt.n	800ad4e <_printf_common+0x96>
 800ad00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad04:	1e13      	subs	r3, r2, #0
 800ad06:	6822      	ldr	r2, [r4, #0]
 800ad08:	bf18      	it	ne
 800ad0a:	2301      	movne	r3, #1
 800ad0c:	0692      	lsls	r2, r2, #26
 800ad0e:	d42b      	bmi.n	800ad68 <_printf_common+0xb0>
 800ad10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad14:	4649      	mov	r1, r9
 800ad16:	4638      	mov	r0, r7
 800ad18:	47c0      	blx	r8
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	d01e      	beq.n	800ad5c <_printf_common+0xa4>
 800ad1e:	6823      	ldr	r3, [r4, #0]
 800ad20:	68e5      	ldr	r5, [r4, #12]
 800ad22:	6832      	ldr	r2, [r6, #0]
 800ad24:	f003 0306 	and.w	r3, r3, #6
 800ad28:	2b04      	cmp	r3, #4
 800ad2a:	bf08      	it	eq
 800ad2c:	1aad      	subeq	r5, r5, r2
 800ad2e:	68a3      	ldr	r3, [r4, #8]
 800ad30:	6922      	ldr	r2, [r4, #16]
 800ad32:	bf0c      	ite	eq
 800ad34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad38:	2500      	movne	r5, #0
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	bfc4      	itt	gt
 800ad3e:	1a9b      	subgt	r3, r3, r2
 800ad40:	18ed      	addgt	r5, r5, r3
 800ad42:	2600      	movs	r6, #0
 800ad44:	341a      	adds	r4, #26
 800ad46:	42b5      	cmp	r5, r6
 800ad48:	d11a      	bne.n	800ad80 <_printf_common+0xc8>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	e008      	b.n	800ad60 <_printf_common+0xa8>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	4652      	mov	r2, sl
 800ad52:	4649      	mov	r1, r9
 800ad54:	4638      	mov	r0, r7
 800ad56:	47c0      	blx	r8
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d103      	bne.n	800ad64 <_printf_common+0xac>
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad64:	3501      	adds	r5, #1
 800ad66:	e7c6      	b.n	800acf6 <_printf_common+0x3e>
 800ad68:	18e1      	adds	r1, r4, r3
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	2030      	movs	r0, #48	; 0x30
 800ad6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad72:	4422      	add	r2, r4
 800ad74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad7c:	3302      	adds	r3, #2
 800ad7e:	e7c7      	b.n	800ad10 <_printf_common+0x58>
 800ad80:	2301      	movs	r3, #1
 800ad82:	4622      	mov	r2, r4
 800ad84:	4649      	mov	r1, r9
 800ad86:	4638      	mov	r0, r7
 800ad88:	47c0      	blx	r8
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	d0e6      	beq.n	800ad5c <_printf_common+0xa4>
 800ad8e:	3601      	adds	r6, #1
 800ad90:	e7d9      	b.n	800ad46 <_printf_common+0x8e>
	...

0800ad94 <_printf_i>:
 800ad94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad98:	7e0f      	ldrb	r7, [r1, #24]
 800ad9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad9c:	2f78      	cmp	r7, #120	; 0x78
 800ad9e:	4691      	mov	r9, r2
 800ada0:	4680      	mov	r8, r0
 800ada2:	460c      	mov	r4, r1
 800ada4:	469a      	mov	sl, r3
 800ada6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800adaa:	d807      	bhi.n	800adbc <_printf_i+0x28>
 800adac:	2f62      	cmp	r7, #98	; 0x62
 800adae:	d80a      	bhi.n	800adc6 <_printf_i+0x32>
 800adb0:	2f00      	cmp	r7, #0
 800adb2:	f000 80d8 	beq.w	800af66 <_printf_i+0x1d2>
 800adb6:	2f58      	cmp	r7, #88	; 0x58
 800adb8:	f000 80a3 	beq.w	800af02 <_printf_i+0x16e>
 800adbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800adc4:	e03a      	b.n	800ae3c <_printf_i+0xa8>
 800adc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adca:	2b15      	cmp	r3, #21
 800adcc:	d8f6      	bhi.n	800adbc <_printf_i+0x28>
 800adce:	a101      	add	r1, pc, #4	; (adr r1, 800add4 <_printf_i+0x40>)
 800add0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800add4:	0800ae2d 	.word	0x0800ae2d
 800add8:	0800ae41 	.word	0x0800ae41
 800addc:	0800adbd 	.word	0x0800adbd
 800ade0:	0800adbd 	.word	0x0800adbd
 800ade4:	0800adbd 	.word	0x0800adbd
 800ade8:	0800adbd 	.word	0x0800adbd
 800adec:	0800ae41 	.word	0x0800ae41
 800adf0:	0800adbd 	.word	0x0800adbd
 800adf4:	0800adbd 	.word	0x0800adbd
 800adf8:	0800adbd 	.word	0x0800adbd
 800adfc:	0800adbd 	.word	0x0800adbd
 800ae00:	0800af4d 	.word	0x0800af4d
 800ae04:	0800ae71 	.word	0x0800ae71
 800ae08:	0800af2f 	.word	0x0800af2f
 800ae0c:	0800adbd 	.word	0x0800adbd
 800ae10:	0800adbd 	.word	0x0800adbd
 800ae14:	0800af6f 	.word	0x0800af6f
 800ae18:	0800adbd 	.word	0x0800adbd
 800ae1c:	0800ae71 	.word	0x0800ae71
 800ae20:	0800adbd 	.word	0x0800adbd
 800ae24:	0800adbd 	.word	0x0800adbd
 800ae28:	0800af37 	.word	0x0800af37
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	1d1a      	adds	r2, r3, #4
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	602a      	str	r2, [r5, #0]
 800ae34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e0a3      	b.n	800af88 <_printf_i+0x1f4>
 800ae40:	6820      	ldr	r0, [r4, #0]
 800ae42:	6829      	ldr	r1, [r5, #0]
 800ae44:	0606      	lsls	r6, r0, #24
 800ae46:	f101 0304 	add.w	r3, r1, #4
 800ae4a:	d50a      	bpl.n	800ae62 <_printf_i+0xce>
 800ae4c:	680e      	ldr	r6, [r1, #0]
 800ae4e:	602b      	str	r3, [r5, #0]
 800ae50:	2e00      	cmp	r6, #0
 800ae52:	da03      	bge.n	800ae5c <_printf_i+0xc8>
 800ae54:	232d      	movs	r3, #45	; 0x2d
 800ae56:	4276      	negs	r6, r6
 800ae58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae5c:	485e      	ldr	r0, [pc, #376]	; (800afd8 <_printf_i+0x244>)
 800ae5e:	230a      	movs	r3, #10
 800ae60:	e019      	b.n	800ae96 <_printf_i+0x102>
 800ae62:	680e      	ldr	r6, [r1, #0]
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae6a:	bf18      	it	ne
 800ae6c:	b236      	sxthne	r6, r6
 800ae6e:	e7ef      	b.n	800ae50 <_printf_i+0xbc>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	6820      	ldr	r0, [r4, #0]
 800ae74:	1d19      	adds	r1, r3, #4
 800ae76:	6029      	str	r1, [r5, #0]
 800ae78:	0601      	lsls	r1, r0, #24
 800ae7a:	d501      	bpl.n	800ae80 <_printf_i+0xec>
 800ae7c:	681e      	ldr	r6, [r3, #0]
 800ae7e:	e002      	b.n	800ae86 <_printf_i+0xf2>
 800ae80:	0646      	lsls	r6, r0, #25
 800ae82:	d5fb      	bpl.n	800ae7c <_printf_i+0xe8>
 800ae84:	881e      	ldrh	r6, [r3, #0]
 800ae86:	4854      	ldr	r0, [pc, #336]	; (800afd8 <_printf_i+0x244>)
 800ae88:	2f6f      	cmp	r7, #111	; 0x6f
 800ae8a:	bf0c      	ite	eq
 800ae8c:	2308      	moveq	r3, #8
 800ae8e:	230a      	movne	r3, #10
 800ae90:	2100      	movs	r1, #0
 800ae92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae96:	6865      	ldr	r5, [r4, #4]
 800ae98:	60a5      	str	r5, [r4, #8]
 800ae9a:	2d00      	cmp	r5, #0
 800ae9c:	bfa2      	ittt	ge
 800ae9e:	6821      	ldrge	r1, [r4, #0]
 800aea0:	f021 0104 	bicge.w	r1, r1, #4
 800aea4:	6021      	strge	r1, [r4, #0]
 800aea6:	b90e      	cbnz	r6, 800aeac <_printf_i+0x118>
 800aea8:	2d00      	cmp	r5, #0
 800aeaa:	d04d      	beq.n	800af48 <_printf_i+0x1b4>
 800aeac:	4615      	mov	r5, r2
 800aeae:	fbb6 f1f3 	udiv	r1, r6, r3
 800aeb2:	fb03 6711 	mls	r7, r3, r1, r6
 800aeb6:	5dc7      	ldrb	r7, [r0, r7]
 800aeb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aebc:	4637      	mov	r7, r6
 800aebe:	42bb      	cmp	r3, r7
 800aec0:	460e      	mov	r6, r1
 800aec2:	d9f4      	bls.n	800aeae <_printf_i+0x11a>
 800aec4:	2b08      	cmp	r3, #8
 800aec6:	d10b      	bne.n	800aee0 <_printf_i+0x14c>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	07de      	lsls	r6, r3, #31
 800aecc:	d508      	bpl.n	800aee0 <_printf_i+0x14c>
 800aece:	6923      	ldr	r3, [r4, #16]
 800aed0:	6861      	ldr	r1, [r4, #4]
 800aed2:	4299      	cmp	r1, r3
 800aed4:	bfde      	ittt	le
 800aed6:	2330      	movle	r3, #48	; 0x30
 800aed8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aedc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aee0:	1b52      	subs	r2, r2, r5
 800aee2:	6122      	str	r2, [r4, #16]
 800aee4:	f8cd a000 	str.w	sl, [sp]
 800aee8:	464b      	mov	r3, r9
 800aeea:	aa03      	add	r2, sp, #12
 800aeec:	4621      	mov	r1, r4
 800aeee:	4640      	mov	r0, r8
 800aef0:	f7ff fee2 	bl	800acb8 <_printf_common>
 800aef4:	3001      	adds	r0, #1
 800aef6:	d14c      	bne.n	800af92 <_printf_i+0x1fe>
 800aef8:	f04f 30ff 	mov.w	r0, #4294967295
 800aefc:	b004      	add	sp, #16
 800aefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af02:	4835      	ldr	r0, [pc, #212]	; (800afd8 <_printf_i+0x244>)
 800af04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800af08:	6829      	ldr	r1, [r5, #0]
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	f851 6b04 	ldr.w	r6, [r1], #4
 800af10:	6029      	str	r1, [r5, #0]
 800af12:	061d      	lsls	r5, r3, #24
 800af14:	d514      	bpl.n	800af40 <_printf_i+0x1ac>
 800af16:	07df      	lsls	r7, r3, #31
 800af18:	bf44      	itt	mi
 800af1a:	f043 0320 	orrmi.w	r3, r3, #32
 800af1e:	6023      	strmi	r3, [r4, #0]
 800af20:	b91e      	cbnz	r6, 800af2a <_printf_i+0x196>
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	f023 0320 	bic.w	r3, r3, #32
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	2310      	movs	r3, #16
 800af2c:	e7b0      	b.n	800ae90 <_printf_i+0xfc>
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	f043 0320 	orr.w	r3, r3, #32
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	2378      	movs	r3, #120	; 0x78
 800af38:	4828      	ldr	r0, [pc, #160]	; (800afdc <_printf_i+0x248>)
 800af3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af3e:	e7e3      	b.n	800af08 <_printf_i+0x174>
 800af40:	0659      	lsls	r1, r3, #25
 800af42:	bf48      	it	mi
 800af44:	b2b6      	uxthmi	r6, r6
 800af46:	e7e6      	b.n	800af16 <_printf_i+0x182>
 800af48:	4615      	mov	r5, r2
 800af4a:	e7bb      	b.n	800aec4 <_printf_i+0x130>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	6826      	ldr	r6, [r4, #0]
 800af50:	6961      	ldr	r1, [r4, #20]
 800af52:	1d18      	adds	r0, r3, #4
 800af54:	6028      	str	r0, [r5, #0]
 800af56:	0635      	lsls	r5, r6, #24
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	d501      	bpl.n	800af60 <_printf_i+0x1cc>
 800af5c:	6019      	str	r1, [r3, #0]
 800af5e:	e002      	b.n	800af66 <_printf_i+0x1d2>
 800af60:	0670      	lsls	r0, r6, #25
 800af62:	d5fb      	bpl.n	800af5c <_printf_i+0x1c8>
 800af64:	8019      	strh	r1, [r3, #0]
 800af66:	2300      	movs	r3, #0
 800af68:	6123      	str	r3, [r4, #16]
 800af6a:	4615      	mov	r5, r2
 800af6c:	e7ba      	b.n	800aee4 <_printf_i+0x150>
 800af6e:	682b      	ldr	r3, [r5, #0]
 800af70:	1d1a      	adds	r2, r3, #4
 800af72:	602a      	str	r2, [r5, #0]
 800af74:	681d      	ldr	r5, [r3, #0]
 800af76:	6862      	ldr	r2, [r4, #4]
 800af78:	2100      	movs	r1, #0
 800af7a:	4628      	mov	r0, r5
 800af7c:	f7f5 f950 	bl	8000220 <memchr>
 800af80:	b108      	cbz	r0, 800af86 <_printf_i+0x1f2>
 800af82:	1b40      	subs	r0, r0, r5
 800af84:	6060      	str	r0, [r4, #4]
 800af86:	6863      	ldr	r3, [r4, #4]
 800af88:	6123      	str	r3, [r4, #16]
 800af8a:	2300      	movs	r3, #0
 800af8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af90:	e7a8      	b.n	800aee4 <_printf_i+0x150>
 800af92:	6923      	ldr	r3, [r4, #16]
 800af94:	462a      	mov	r2, r5
 800af96:	4649      	mov	r1, r9
 800af98:	4640      	mov	r0, r8
 800af9a:	47d0      	blx	sl
 800af9c:	3001      	adds	r0, #1
 800af9e:	d0ab      	beq.n	800aef8 <_printf_i+0x164>
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	079b      	lsls	r3, r3, #30
 800afa4:	d413      	bmi.n	800afce <_printf_i+0x23a>
 800afa6:	68e0      	ldr	r0, [r4, #12]
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	4298      	cmp	r0, r3
 800afac:	bfb8      	it	lt
 800afae:	4618      	movlt	r0, r3
 800afb0:	e7a4      	b.n	800aefc <_printf_i+0x168>
 800afb2:	2301      	movs	r3, #1
 800afb4:	4632      	mov	r2, r6
 800afb6:	4649      	mov	r1, r9
 800afb8:	4640      	mov	r0, r8
 800afba:	47d0      	blx	sl
 800afbc:	3001      	adds	r0, #1
 800afbe:	d09b      	beq.n	800aef8 <_printf_i+0x164>
 800afc0:	3501      	adds	r5, #1
 800afc2:	68e3      	ldr	r3, [r4, #12]
 800afc4:	9903      	ldr	r1, [sp, #12]
 800afc6:	1a5b      	subs	r3, r3, r1
 800afc8:	42ab      	cmp	r3, r5
 800afca:	dcf2      	bgt.n	800afb2 <_printf_i+0x21e>
 800afcc:	e7eb      	b.n	800afa6 <_printf_i+0x212>
 800afce:	2500      	movs	r5, #0
 800afd0:	f104 0619 	add.w	r6, r4, #25
 800afd4:	e7f5      	b.n	800afc2 <_printf_i+0x22e>
 800afd6:	bf00      	nop
 800afd8:	0800d3e4 	.word	0x0800d3e4
 800afdc:	0800d3f5 	.word	0x0800d3f5

0800afe0 <nan>:
 800afe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800afe8 <nan+0x8>
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	00000000 	.word	0x00000000
 800afec:	7ff80000 	.word	0x7ff80000

0800aff0 <_sbrk_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4d06      	ldr	r5, [pc, #24]	; (800b00c <_sbrk_r+0x1c>)
 800aff4:	2300      	movs	r3, #0
 800aff6:	4604      	mov	r4, r0
 800aff8:	4608      	mov	r0, r1
 800affa:	602b      	str	r3, [r5, #0]
 800affc:	f7f7 fc68 	bl	80028d0 <_sbrk>
 800b000:	1c43      	adds	r3, r0, #1
 800b002:	d102      	bne.n	800b00a <_sbrk_r+0x1a>
 800b004:	682b      	ldr	r3, [r5, #0]
 800b006:	b103      	cbz	r3, 800b00a <_sbrk_r+0x1a>
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	bd38      	pop	{r3, r4, r5, pc}
 800b00c:	2000099c 	.word	0x2000099c

0800b010 <strcpy>:
 800b010:	4603      	mov	r3, r0
 800b012:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b016:	f803 2b01 	strb.w	r2, [r3], #1
 800b01a:	2a00      	cmp	r2, #0
 800b01c:	d1f9      	bne.n	800b012 <strcpy+0x2>
 800b01e:	4770      	bx	lr

0800b020 <strncmp>:
 800b020:	b510      	push	{r4, lr}
 800b022:	b17a      	cbz	r2, 800b044 <strncmp+0x24>
 800b024:	4603      	mov	r3, r0
 800b026:	3901      	subs	r1, #1
 800b028:	1884      	adds	r4, r0, r2
 800b02a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b02e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b032:	4290      	cmp	r0, r2
 800b034:	d101      	bne.n	800b03a <strncmp+0x1a>
 800b036:	42a3      	cmp	r3, r4
 800b038:	d101      	bne.n	800b03e <strncmp+0x1e>
 800b03a:	1a80      	subs	r0, r0, r2
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	2800      	cmp	r0, #0
 800b040:	d1f3      	bne.n	800b02a <strncmp+0xa>
 800b042:	e7fa      	b.n	800b03a <strncmp+0x1a>
 800b044:	4610      	mov	r0, r2
 800b046:	e7f9      	b.n	800b03c <strncmp+0x1c>

0800b048 <__ascii_wctomb>:
 800b048:	b149      	cbz	r1, 800b05e <__ascii_wctomb+0x16>
 800b04a:	2aff      	cmp	r2, #255	; 0xff
 800b04c:	bf85      	ittet	hi
 800b04e:	238a      	movhi	r3, #138	; 0x8a
 800b050:	6003      	strhi	r3, [r0, #0]
 800b052:	700a      	strbls	r2, [r1, #0]
 800b054:	f04f 30ff 	movhi.w	r0, #4294967295
 800b058:	bf98      	it	ls
 800b05a:	2001      	movls	r0, #1
 800b05c:	4770      	bx	lr
 800b05e:	4608      	mov	r0, r1
 800b060:	4770      	bx	lr
	...

0800b064 <__assert_func>:
 800b064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b066:	4614      	mov	r4, r2
 800b068:	461a      	mov	r2, r3
 800b06a:	4b09      	ldr	r3, [pc, #36]	; (800b090 <__assert_func+0x2c>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4605      	mov	r5, r0
 800b070:	68d8      	ldr	r0, [r3, #12]
 800b072:	b14c      	cbz	r4, 800b088 <__assert_func+0x24>
 800b074:	4b07      	ldr	r3, [pc, #28]	; (800b094 <__assert_func+0x30>)
 800b076:	9100      	str	r1, [sp, #0]
 800b078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b07c:	4906      	ldr	r1, [pc, #24]	; (800b098 <__assert_func+0x34>)
 800b07e:	462b      	mov	r3, r5
 800b080:	f000 fe88 	bl	800bd94 <fiprintf>
 800b084:	f001 f912 	bl	800c2ac <abort>
 800b088:	4b04      	ldr	r3, [pc, #16]	; (800b09c <__assert_func+0x38>)
 800b08a:	461c      	mov	r4, r3
 800b08c:	e7f3      	b.n	800b076 <__assert_func+0x12>
 800b08e:	bf00      	nop
 800b090:	2000001c 	.word	0x2000001c
 800b094:	0800d406 	.word	0x0800d406
 800b098:	0800d413 	.word	0x0800d413
 800b09c:	0800d441 	.word	0x0800d441

0800b0a0 <quorem>:
 800b0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	6903      	ldr	r3, [r0, #16]
 800b0a6:	690c      	ldr	r4, [r1, #16]
 800b0a8:	42a3      	cmp	r3, r4
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	f2c0 8081 	blt.w	800b1b2 <quorem+0x112>
 800b0b0:	3c01      	subs	r4, #1
 800b0b2:	f101 0814 	add.w	r8, r1, #20
 800b0b6:	f100 0514 	add.w	r5, r0, #20
 800b0ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0be:	9301      	str	r3, [sp, #4]
 800b0c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b0d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0d8:	d331      	bcc.n	800b13e <quorem+0x9e>
 800b0da:	f04f 0e00 	mov.w	lr, #0
 800b0de:	4640      	mov	r0, r8
 800b0e0:	46ac      	mov	ip, r5
 800b0e2:	46f2      	mov	sl, lr
 800b0e4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b0e8:	b293      	uxth	r3, r2
 800b0ea:	fb06 e303 	mla	r3, r6, r3, lr
 800b0ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	ebaa 0303 	sub.w	r3, sl, r3
 800b0f8:	f8dc a000 	ldr.w	sl, [ip]
 800b0fc:	0c12      	lsrs	r2, r2, #16
 800b0fe:	fa13 f38a 	uxtah	r3, r3, sl
 800b102:	fb06 e202 	mla	r2, r6, r2, lr
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	9b00      	ldr	r3, [sp, #0]
 800b10a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b10e:	b292      	uxth	r2, r2
 800b110:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b114:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b118:	f8bd 3000 	ldrh.w	r3, [sp]
 800b11c:	4581      	cmp	r9, r0
 800b11e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b122:	f84c 3b04 	str.w	r3, [ip], #4
 800b126:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b12a:	d2db      	bcs.n	800b0e4 <quorem+0x44>
 800b12c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b130:	b92b      	cbnz	r3, 800b13e <quorem+0x9e>
 800b132:	9b01      	ldr	r3, [sp, #4]
 800b134:	3b04      	subs	r3, #4
 800b136:	429d      	cmp	r5, r3
 800b138:	461a      	mov	r2, r3
 800b13a:	d32e      	bcc.n	800b19a <quorem+0xfa>
 800b13c:	613c      	str	r4, [r7, #16]
 800b13e:	4638      	mov	r0, r7
 800b140:	f7ff fafc 	bl	800a73c <__mcmp>
 800b144:	2800      	cmp	r0, #0
 800b146:	db24      	blt.n	800b192 <quorem+0xf2>
 800b148:	3601      	adds	r6, #1
 800b14a:	4628      	mov	r0, r5
 800b14c:	f04f 0c00 	mov.w	ip, #0
 800b150:	f858 2b04 	ldr.w	r2, [r8], #4
 800b154:	f8d0 e000 	ldr.w	lr, [r0]
 800b158:	b293      	uxth	r3, r2
 800b15a:	ebac 0303 	sub.w	r3, ip, r3
 800b15e:	0c12      	lsrs	r2, r2, #16
 800b160:	fa13 f38e 	uxtah	r3, r3, lr
 800b164:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b168:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b172:	45c1      	cmp	r9, r8
 800b174:	f840 3b04 	str.w	r3, [r0], #4
 800b178:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b17c:	d2e8      	bcs.n	800b150 <quorem+0xb0>
 800b17e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b186:	b922      	cbnz	r2, 800b192 <quorem+0xf2>
 800b188:	3b04      	subs	r3, #4
 800b18a:	429d      	cmp	r5, r3
 800b18c:	461a      	mov	r2, r3
 800b18e:	d30a      	bcc.n	800b1a6 <quorem+0x106>
 800b190:	613c      	str	r4, [r7, #16]
 800b192:	4630      	mov	r0, r6
 800b194:	b003      	add	sp, #12
 800b196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19a:	6812      	ldr	r2, [r2, #0]
 800b19c:	3b04      	subs	r3, #4
 800b19e:	2a00      	cmp	r2, #0
 800b1a0:	d1cc      	bne.n	800b13c <quorem+0x9c>
 800b1a2:	3c01      	subs	r4, #1
 800b1a4:	e7c7      	b.n	800b136 <quorem+0x96>
 800b1a6:	6812      	ldr	r2, [r2, #0]
 800b1a8:	3b04      	subs	r3, #4
 800b1aa:	2a00      	cmp	r2, #0
 800b1ac:	d1f0      	bne.n	800b190 <quorem+0xf0>
 800b1ae:	3c01      	subs	r4, #1
 800b1b0:	e7eb      	b.n	800b18a <quorem+0xea>
 800b1b2:	2000      	movs	r0, #0
 800b1b4:	e7ee      	b.n	800b194 <quorem+0xf4>
	...

0800b1b8 <_dtoa_r>:
 800b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	ed2d 8b04 	vpush	{d8-d9}
 800b1c0:	ec57 6b10 	vmov	r6, r7, d0
 800b1c4:	b093      	sub	sp, #76	; 0x4c
 800b1c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b1cc:	9106      	str	r1, [sp, #24]
 800b1ce:	ee10 aa10 	vmov	sl, s0
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b1d6:	930c      	str	r3, [sp, #48]	; 0x30
 800b1d8:	46bb      	mov	fp, r7
 800b1da:	b975      	cbnz	r5, 800b1fa <_dtoa_r+0x42>
 800b1dc:	2010      	movs	r0, #16
 800b1de:	f000 fdeb 	bl	800bdb8 <malloc>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	6260      	str	r0, [r4, #36]	; 0x24
 800b1e6:	b920      	cbnz	r0, 800b1f2 <_dtoa_r+0x3a>
 800b1e8:	4ba7      	ldr	r3, [pc, #668]	; (800b488 <_dtoa_r+0x2d0>)
 800b1ea:	21ea      	movs	r1, #234	; 0xea
 800b1ec:	48a7      	ldr	r0, [pc, #668]	; (800b48c <_dtoa_r+0x2d4>)
 800b1ee:	f7ff ff39 	bl	800b064 <__assert_func>
 800b1f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b1f6:	6005      	str	r5, [r0, #0]
 800b1f8:	60c5      	str	r5, [r0, #12]
 800b1fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1fc:	6819      	ldr	r1, [r3, #0]
 800b1fe:	b151      	cbz	r1, 800b216 <_dtoa_r+0x5e>
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	604a      	str	r2, [r1, #4]
 800b204:	2301      	movs	r3, #1
 800b206:	4093      	lsls	r3, r2
 800b208:	608b      	str	r3, [r1, #8]
 800b20a:	4620      	mov	r0, r4
 800b20c:	f7ff f80a 	bl	800a224 <_Bfree>
 800b210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b212:	2200      	movs	r2, #0
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	1e3b      	subs	r3, r7, #0
 800b218:	bfaa      	itet	ge
 800b21a:	2300      	movge	r3, #0
 800b21c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b220:	f8c8 3000 	strge.w	r3, [r8]
 800b224:	4b9a      	ldr	r3, [pc, #616]	; (800b490 <_dtoa_r+0x2d8>)
 800b226:	bfbc      	itt	lt
 800b228:	2201      	movlt	r2, #1
 800b22a:	f8c8 2000 	strlt.w	r2, [r8]
 800b22e:	ea33 030b 	bics.w	r3, r3, fp
 800b232:	d11b      	bne.n	800b26c <_dtoa_r+0xb4>
 800b234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b236:	f242 730f 	movw	r3, #9999	; 0x270f
 800b23a:	6013      	str	r3, [r2, #0]
 800b23c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b240:	4333      	orrs	r3, r6
 800b242:	f000 8592 	beq.w	800bd6a <_dtoa_r+0xbb2>
 800b246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b248:	b963      	cbnz	r3, 800b264 <_dtoa_r+0xac>
 800b24a:	4b92      	ldr	r3, [pc, #584]	; (800b494 <_dtoa_r+0x2dc>)
 800b24c:	e022      	b.n	800b294 <_dtoa_r+0xdc>
 800b24e:	4b92      	ldr	r3, [pc, #584]	; (800b498 <_dtoa_r+0x2e0>)
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	3308      	adds	r3, #8
 800b254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	9801      	ldr	r0, [sp, #4]
 800b25a:	b013      	add	sp, #76	; 0x4c
 800b25c:	ecbd 8b04 	vpop	{d8-d9}
 800b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b264:	4b8b      	ldr	r3, [pc, #556]	; (800b494 <_dtoa_r+0x2dc>)
 800b266:	9301      	str	r3, [sp, #4]
 800b268:	3303      	adds	r3, #3
 800b26a:	e7f3      	b.n	800b254 <_dtoa_r+0x9c>
 800b26c:	2200      	movs	r2, #0
 800b26e:	2300      	movs	r3, #0
 800b270:	4650      	mov	r0, sl
 800b272:	4659      	mov	r1, fp
 800b274:	f7f5 fc48 	bl	8000b08 <__aeabi_dcmpeq>
 800b278:	ec4b ab19 	vmov	d9, sl, fp
 800b27c:	4680      	mov	r8, r0
 800b27e:	b158      	cbz	r0, 800b298 <_dtoa_r+0xe0>
 800b280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b282:	2301      	movs	r3, #1
 800b284:	6013      	str	r3, [r2, #0]
 800b286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 856b 	beq.w	800bd64 <_dtoa_r+0xbac>
 800b28e:	4883      	ldr	r0, [pc, #524]	; (800b49c <_dtoa_r+0x2e4>)
 800b290:	6018      	str	r0, [r3, #0]
 800b292:	1e43      	subs	r3, r0, #1
 800b294:	9301      	str	r3, [sp, #4]
 800b296:	e7df      	b.n	800b258 <_dtoa_r+0xa0>
 800b298:	ec4b ab10 	vmov	d0, sl, fp
 800b29c:	aa10      	add	r2, sp, #64	; 0x40
 800b29e:	a911      	add	r1, sp, #68	; 0x44
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f7ff fb6d 	bl	800a980 <__d2b>
 800b2a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b2aa:	ee08 0a10 	vmov	s16, r0
 800b2ae:	2d00      	cmp	r5, #0
 800b2b0:	f000 8084 	beq.w	800b3bc <_dtoa_r+0x204>
 800b2b4:	ee19 3a90 	vmov	r3, s19
 800b2b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b2c0:	4656      	mov	r6, sl
 800b2c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b2c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b2ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b2ce:	4b74      	ldr	r3, [pc, #464]	; (800b4a0 <_dtoa_r+0x2e8>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	4639      	mov	r1, r7
 800b2d6:	f7f4 fff7 	bl	80002c8 <__aeabi_dsub>
 800b2da:	a365      	add	r3, pc, #404	; (adr r3, 800b470 <_dtoa_r+0x2b8>)
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f7f5 f9aa 	bl	8000638 <__aeabi_dmul>
 800b2e4:	a364      	add	r3, pc, #400	; (adr r3, 800b478 <_dtoa_r+0x2c0>)
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f7f4 ffef 	bl	80002cc <__adddf3>
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	460f      	mov	r7, r1
 800b2f4:	f7f5 f936 	bl	8000564 <__aeabi_i2d>
 800b2f8:	a361      	add	r3, pc, #388	; (adr r3, 800b480 <_dtoa_r+0x2c8>)
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	f7f5 f99b 	bl	8000638 <__aeabi_dmul>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4630      	mov	r0, r6
 800b308:	4639      	mov	r1, r7
 800b30a:	f7f4 ffdf 	bl	80002cc <__adddf3>
 800b30e:	4606      	mov	r6, r0
 800b310:	460f      	mov	r7, r1
 800b312:	f7f5 fc2b 	bl	8000b6c <__aeabi_d2iz>
 800b316:	2200      	movs	r2, #0
 800b318:	9000      	str	r0, [sp, #0]
 800b31a:	2300      	movs	r3, #0
 800b31c:	4630      	mov	r0, r6
 800b31e:	4639      	mov	r1, r7
 800b320:	f7f5 fbfc 	bl	8000b1c <__aeabi_dcmplt>
 800b324:	b150      	cbz	r0, 800b33c <_dtoa_r+0x184>
 800b326:	9800      	ldr	r0, [sp, #0]
 800b328:	f7f5 f91c 	bl	8000564 <__aeabi_i2d>
 800b32c:	4632      	mov	r2, r6
 800b32e:	463b      	mov	r3, r7
 800b330:	f7f5 fbea 	bl	8000b08 <__aeabi_dcmpeq>
 800b334:	b910      	cbnz	r0, 800b33c <_dtoa_r+0x184>
 800b336:	9b00      	ldr	r3, [sp, #0]
 800b338:	3b01      	subs	r3, #1
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	9b00      	ldr	r3, [sp, #0]
 800b33e:	2b16      	cmp	r3, #22
 800b340:	d85a      	bhi.n	800b3f8 <_dtoa_r+0x240>
 800b342:	9a00      	ldr	r2, [sp, #0]
 800b344:	4b57      	ldr	r3, [pc, #348]	; (800b4a4 <_dtoa_r+0x2ec>)
 800b346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	ec51 0b19 	vmov	r0, r1, d9
 800b352:	f7f5 fbe3 	bl	8000b1c <__aeabi_dcmplt>
 800b356:	2800      	cmp	r0, #0
 800b358:	d050      	beq.n	800b3fc <_dtoa_r+0x244>
 800b35a:	9b00      	ldr	r3, [sp, #0]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	2300      	movs	r3, #0
 800b362:	930b      	str	r3, [sp, #44]	; 0x2c
 800b364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b366:	1b5d      	subs	r5, r3, r5
 800b368:	1e6b      	subs	r3, r5, #1
 800b36a:	9305      	str	r3, [sp, #20]
 800b36c:	bf45      	ittet	mi
 800b36e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b372:	9304      	strmi	r3, [sp, #16]
 800b374:	2300      	movpl	r3, #0
 800b376:	2300      	movmi	r3, #0
 800b378:	bf4c      	ite	mi
 800b37a:	9305      	strmi	r3, [sp, #20]
 800b37c:	9304      	strpl	r3, [sp, #16]
 800b37e:	9b00      	ldr	r3, [sp, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	db3d      	blt.n	800b400 <_dtoa_r+0x248>
 800b384:	9b05      	ldr	r3, [sp, #20]
 800b386:	9a00      	ldr	r2, [sp, #0]
 800b388:	920a      	str	r2, [sp, #40]	; 0x28
 800b38a:	4413      	add	r3, r2
 800b38c:	9305      	str	r3, [sp, #20]
 800b38e:	2300      	movs	r3, #0
 800b390:	9307      	str	r3, [sp, #28]
 800b392:	9b06      	ldr	r3, [sp, #24]
 800b394:	2b09      	cmp	r3, #9
 800b396:	f200 8089 	bhi.w	800b4ac <_dtoa_r+0x2f4>
 800b39a:	2b05      	cmp	r3, #5
 800b39c:	bfc4      	itt	gt
 800b39e:	3b04      	subgt	r3, #4
 800b3a0:	9306      	strgt	r3, [sp, #24]
 800b3a2:	9b06      	ldr	r3, [sp, #24]
 800b3a4:	f1a3 0302 	sub.w	r3, r3, #2
 800b3a8:	bfcc      	ite	gt
 800b3aa:	2500      	movgt	r5, #0
 800b3ac:	2501      	movle	r5, #1
 800b3ae:	2b03      	cmp	r3, #3
 800b3b0:	f200 8087 	bhi.w	800b4c2 <_dtoa_r+0x30a>
 800b3b4:	e8df f003 	tbb	[pc, r3]
 800b3b8:	59383a2d 	.word	0x59383a2d
 800b3bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b3c0:	441d      	add	r5, r3
 800b3c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b3c6:	2b20      	cmp	r3, #32
 800b3c8:	bfc1      	itttt	gt
 800b3ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b3ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b3d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b3d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b3da:	bfda      	itte	le
 800b3dc:	f1c3 0320 	rsble	r3, r3, #32
 800b3e0:	fa06 f003 	lslle.w	r0, r6, r3
 800b3e4:	4318      	orrgt	r0, r3
 800b3e6:	f7f5 f8ad 	bl	8000544 <__aeabi_ui2d>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	4606      	mov	r6, r0
 800b3ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b3f2:	3d01      	subs	r5, #1
 800b3f4:	930e      	str	r3, [sp, #56]	; 0x38
 800b3f6:	e76a      	b.n	800b2ce <_dtoa_r+0x116>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e7b2      	b.n	800b362 <_dtoa_r+0x1aa>
 800b3fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3fe:	e7b1      	b.n	800b364 <_dtoa_r+0x1ac>
 800b400:	9b04      	ldr	r3, [sp, #16]
 800b402:	9a00      	ldr	r2, [sp, #0]
 800b404:	1a9b      	subs	r3, r3, r2
 800b406:	9304      	str	r3, [sp, #16]
 800b408:	4253      	negs	r3, r2
 800b40a:	9307      	str	r3, [sp, #28]
 800b40c:	2300      	movs	r3, #0
 800b40e:	930a      	str	r3, [sp, #40]	; 0x28
 800b410:	e7bf      	b.n	800b392 <_dtoa_r+0x1da>
 800b412:	2300      	movs	r3, #0
 800b414:	9308      	str	r3, [sp, #32]
 800b416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b418:	2b00      	cmp	r3, #0
 800b41a:	dc55      	bgt.n	800b4c8 <_dtoa_r+0x310>
 800b41c:	2301      	movs	r3, #1
 800b41e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b422:	461a      	mov	r2, r3
 800b424:	9209      	str	r2, [sp, #36]	; 0x24
 800b426:	e00c      	b.n	800b442 <_dtoa_r+0x28a>
 800b428:	2301      	movs	r3, #1
 800b42a:	e7f3      	b.n	800b414 <_dtoa_r+0x25c>
 800b42c:	2300      	movs	r3, #0
 800b42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b430:	9308      	str	r3, [sp, #32]
 800b432:	9b00      	ldr	r3, [sp, #0]
 800b434:	4413      	add	r3, r2
 800b436:	9302      	str	r3, [sp, #8]
 800b438:	3301      	adds	r3, #1
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	9303      	str	r3, [sp, #12]
 800b43e:	bfb8      	it	lt
 800b440:	2301      	movlt	r3, #1
 800b442:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b444:	2200      	movs	r2, #0
 800b446:	6042      	str	r2, [r0, #4]
 800b448:	2204      	movs	r2, #4
 800b44a:	f102 0614 	add.w	r6, r2, #20
 800b44e:	429e      	cmp	r6, r3
 800b450:	6841      	ldr	r1, [r0, #4]
 800b452:	d93d      	bls.n	800b4d0 <_dtoa_r+0x318>
 800b454:	4620      	mov	r0, r4
 800b456:	f7fe fea5 	bl	800a1a4 <_Balloc>
 800b45a:	9001      	str	r0, [sp, #4]
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d13b      	bne.n	800b4d8 <_dtoa_r+0x320>
 800b460:	4b11      	ldr	r3, [pc, #68]	; (800b4a8 <_dtoa_r+0x2f0>)
 800b462:	4602      	mov	r2, r0
 800b464:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b468:	e6c0      	b.n	800b1ec <_dtoa_r+0x34>
 800b46a:	2301      	movs	r3, #1
 800b46c:	e7df      	b.n	800b42e <_dtoa_r+0x276>
 800b46e:	bf00      	nop
 800b470:	636f4361 	.word	0x636f4361
 800b474:	3fd287a7 	.word	0x3fd287a7
 800b478:	8b60c8b3 	.word	0x8b60c8b3
 800b47c:	3fc68a28 	.word	0x3fc68a28
 800b480:	509f79fb 	.word	0x509f79fb
 800b484:	3fd34413 	.word	0x3fd34413
 800b488:	0800d274 	.word	0x0800d274
 800b48c:	0800d552 	.word	0x0800d552
 800b490:	7ff00000 	.word	0x7ff00000
 800b494:	0800d54c 	.word	0x0800d54c
 800b498:	0800d543 	.word	0x0800d543
 800b49c:	0800d551 	.word	0x0800d551
 800b4a0:	3ff80000 	.word	0x3ff80000
 800b4a4:	0800d310 	.word	0x0800d310
 800b4a8:	0800d1e8 	.word	0x0800d1e8
 800b4ac:	2501      	movs	r5, #1
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	9306      	str	r3, [sp, #24]
 800b4b2:	9508      	str	r5, [sp, #32]
 800b4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	2312      	movs	r3, #18
 800b4c0:	e7b0      	b.n	800b424 <_dtoa_r+0x26c>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	9308      	str	r3, [sp, #32]
 800b4c6:	e7f5      	b.n	800b4b4 <_dtoa_r+0x2fc>
 800b4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4ce:	e7b8      	b.n	800b442 <_dtoa_r+0x28a>
 800b4d0:	3101      	adds	r1, #1
 800b4d2:	6041      	str	r1, [r0, #4]
 800b4d4:	0052      	lsls	r2, r2, #1
 800b4d6:	e7b8      	b.n	800b44a <_dtoa_r+0x292>
 800b4d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4da:	9a01      	ldr	r2, [sp, #4]
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	9b03      	ldr	r3, [sp, #12]
 800b4e0:	2b0e      	cmp	r3, #14
 800b4e2:	f200 809d 	bhi.w	800b620 <_dtoa_r+0x468>
 800b4e6:	2d00      	cmp	r5, #0
 800b4e8:	f000 809a 	beq.w	800b620 <_dtoa_r+0x468>
 800b4ec:	9b00      	ldr	r3, [sp, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	dd32      	ble.n	800b558 <_dtoa_r+0x3a0>
 800b4f2:	4ab7      	ldr	r2, [pc, #732]	; (800b7d0 <_dtoa_r+0x618>)
 800b4f4:	f003 030f 	and.w	r3, r3, #15
 800b4f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b4fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b500:	9b00      	ldr	r3, [sp, #0]
 800b502:	05d8      	lsls	r0, r3, #23
 800b504:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b508:	d516      	bpl.n	800b538 <_dtoa_r+0x380>
 800b50a:	4bb2      	ldr	r3, [pc, #712]	; (800b7d4 <_dtoa_r+0x61c>)
 800b50c:	ec51 0b19 	vmov	r0, r1, d9
 800b510:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b514:	f7f5 f9ba 	bl	800088c <__aeabi_ddiv>
 800b518:	f007 070f 	and.w	r7, r7, #15
 800b51c:	4682      	mov	sl, r0
 800b51e:	468b      	mov	fp, r1
 800b520:	2503      	movs	r5, #3
 800b522:	4eac      	ldr	r6, [pc, #688]	; (800b7d4 <_dtoa_r+0x61c>)
 800b524:	b957      	cbnz	r7, 800b53c <_dtoa_r+0x384>
 800b526:	4642      	mov	r2, r8
 800b528:	464b      	mov	r3, r9
 800b52a:	4650      	mov	r0, sl
 800b52c:	4659      	mov	r1, fp
 800b52e:	f7f5 f9ad 	bl	800088c <__aeabi_ddiv>
 800b532:	4682      	mov	sl, r0
 800b534:	468b      	mov	fp, r1
 800b536:	e028      	b.n	800b58a <_dtoa_r+0x3d2>
 800b538:	2502      	movs	r5, #2
 800b53a:	e7f2      	b.n	800b522 <_dtoa_r+0x36a>
 800b53c:	07f9      	lsls	r1, r7, #31
 800b53e:	d508      	bpl.n	800b552 <_dtoa_r+0x39a>
 800b540:	4640      	mov	r0, r8
 800b542:	4649      	mov	r1, r9
 800b544:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b548:	f7f5 f876 	bl	8000638 <__aeabi_dmul>
 800b54c:	3501      	adds	r5, #1
 800b54e:	4680      	mov	r8, r0
 800b550:	4689      	mov	r9, r1
 800b552:	107f      	asrs	r7, r7, #1
 800b554:	3608      	adds	r6, #8
 800b556:	e7e5      	b.n	800b524 <_dtoa_r+0x36c>
 800b558:	f000 809b 	beq.w	800b692 <_dtoa_r+0x4da>
 800b55c:	9b00      	ldr	r3, [sp, #0]
 800b55e:	4f9d      	ldr	r7, [pc, #628]	; (800b7d4 <_dtoa_r+0x61c>)
 800b560:	425e      	negs	r6, r3
 800b562:	4b9b      	ldr	r3, [pc, #620]	; (800b7d0 <_dtoa_r+0x618>)
 800b564:	f006 020f 	and.w	r2, r6, #15
 800b568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	ec51 0b19 	vmov	r0, r1, d9
 800b574:	f7f5 f860 	bl	8000638 <__aeabi_dmul>
 800b578:	1136      	asrs	r6, r6, #4
 800b57a:	4682      	mov	sl, r0
 800b57c:	468b      	mov	fp, r1
 800b57e:	2300      	movs	r3, #0
 800b580:	2502      	movs	r5, #2
 800b582:	2e00      	cmp	r6, #0
 800b584:	d17a      	bne.n	800b67c <_dtoa_r+0x4c4>
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1d3      	bne.n	800b532 <_dtoa_r+0x37a>
 800b58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 8082 	beq.w	800b696 <_dtoa_r+0x4de>
 800b592:	4b91      	ldr	r3, [pc, #580]	; (800b7d8 <_dtoa_r+0x620>)
 800b594:	2200      	movs	r2, #0
 800b596:	4650      	mov	r0, sl
 800b598:	4659      	mov	r1, fp
 800b59a:	f7f5 fabf 	bl	8000b1c <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d079      	beq.n	800b696 <_dtoa_r+0x4de>
 800b5a2:	9b03      	ldr	r3, [sp, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d076      	beq.n	800b696 <_dtoa_r+0x4de>
 800b5a8:	9b02      	ldr	r3, [sp, #8]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	dd36      	ble.n	800b61c <_dtoa_r+0x464>
 800b5ae:	9b00      	ldr	r3, [sp, #0]
 800b5b0:	4650      	mov	r0, sl
 800b5b2:	4659      	mov	r1, fp
 800b5b4:	1e5f      	subs	r7, r3, #1
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	4b88      	ldr	r3, [pc, #544]	; (800b7dc <_dtoa_r+0x624>)
 800b5ba:	f7f5 f83d 	bl	8000638 <__aeabi_dmul>
 800b5be:	9e02      	ldr	r6, [sp, #8]
 800b5c0:	4682      	mov	sl, r0
 800b5c2:	468b      	mov	fp, r1
 800b5c4:	3501      	adds	r5, #1
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f7f4 ffcc 	bl	8000564 <__aeabi_i2d>
 800b5cc:	4652      	mov	r2, sl
 800b5ce:	465b      	mov	r3, fp
 800b5d0:	f7f5 f832 	bl	8000638 <__aeabi_dmul>
 800b5d4:	4b82      	ldr	r3, [pc, #520]	; (800b7e0 <_dtoa_r+0x628>)
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f7f4 fe78 	bl	80002cc <__adddf3>
 800b5dc:	46d0      	mov	r8, sl
 800b5de:	46d9      	mov	r9, fp
 800b5e0:	4682      	mov	sl, r0
 800b5e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b5e6:	2e00      	cmp	r6, #0
 800b5e8:	d158      	bne.n	800b69c <_dtoa_r+0x4e4>
 800b5ea:	4b7e      	ldr	r3, [pc, #504]	; (800b7e4 <_dtoa_r+0x62c>)
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	4640      	mov	r0, r8
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	f7f4 fe69 	bl	80002c8 <__aeabi_dsub>
 800b5f6:	4652      	mov	r2, sl
 800b5f8:	465b      	mov	r3, fp
 800b5fa:	4680      	mov	r8, r0
 800b5fc:	4689      	mov	r9, r1
 800b5fe:	f7f5 faab 	bl	8000b58 <__aeabi_dcmpgt>
 800b602:	2800      	cmp	r0, #0
 800b604:	f040 8295 	bne.w	800bb32 <_dtoa_r+0x97a>
 800b608:	4652      	mov	r2, sl
 800b60a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b60e:	4640      	mov	r0, r8
 800b610:	4649      	mov	r1, r9
 800b612:	f7f5 fa83 	bl	8000b1c <__aeabi_dcmplt>
 800b616:	2800      	cmp	r0, #0
 800b618:	f040 8289 	bne.w	800bb2e <_dtoa_r+0x976>
 800b61c:	ec5b ab19 	vmov	sl, fp, d9
 800b620:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b622:	2b00      	cmp	r3, #0
 800b624:	f2c0 8148 	blt.w	800b8b8 <_dtoa_r+0x700>
 800b628:	9a00      	ldr	r2, [sp, #0]
 800b62a:	2a0e      	cmp	r2, #14
 800b62c:	f300 8144 	bgt.w	800b8b8 <_dtoa_r+0x700>
 800b630:	4b67      	ldr	r3, [pc, #412]	; (800b7d0 <_dtoa_r+0x618>)
 800b632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b636:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f280 80d5 	bge.w	800b7ec <_dtoa_r+0x634>
 800b642:	9b03      	ldr	r3, [sp, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	f300 80d1 	bgt.w	800b7ec <_dtoa_r+0x634>
 800b64a:	f040 826f 	bne.w	800bb2c <_dtoa_r+0x974>
 800b64e:	4b65      	ldr	r3, [pc, #404]	; (800b7e4 <_dtoa_r+0x62c>)
 800b650:	2200      	movs	r2, #0
 800b652:	4640      	mov	r0, r8
 800b654:	4649      	mov	r1, r9
 800b656:	f7f4 ffef 	bl	8000638 <__aeabi_dmul>
 800b65a:	4652      	mov	r2, sl
 800b65c:	465b      	mov	r3, fp
 800b65e:	f7f5 fa71 	bl	8000b44 <__aeabi_dcmpge>
 800b662:	9e03      	ldr	r6, [sp, #12]
 800b664:	4637      	mov	r7, r6
 800b666:	2800      	cmp	r0, #0
 800b668:	f040 8245 	bne.w	800baf6 <_dtoa_r+0x93e>
 800b66c:	9d01      	ldr	r5, [sp, #4]
 800b66e:	2331      	movs	r3, #49	; 0x31
 800b670:	f805 3b01 	strb.w	r3, [r5], #1
 800b674:	9b00      	ldr	r3, [sp, #0]
 800b676:	3301      	adds	r3, #1
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	e240      	b.n	800bafe <_dtoa_r+0x946>
 800b67c:	07f2      	lsls	r2, r6, #31
 800b67e:	d505      	bpl.n	800b68c <_dtoa_r+0x4d4>
 800b680:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b684:	f7f4 ffd8 	bl	8000638 <__aeabi_dmul>
 800b688:	3501      	adds	r5, #1
 800b68a:	2301      	movs	r3, #1
 800b68c:	1076      	asrs	r6, r6, #1
 800b68e:	3708      	adds	r7, #8
 800b690:	e777      	b.n	800b582 <_dtoa_r+0x3ca>
 800b692:	2502      	movs	r5, #2
 800b694:	e779      	b.n	800b58a <_dtoa_r+0x3d2>
 800b696:	9f00      	ldr	r7, [sp, #0]
 800b698:	9e03      	ldr	r6, [sp, #12]
 800b69a:	e794      	b.n	800b5c6 <_dtoa_r+0x40e>
 800b69c:	9901      	ldr	r1, [sp, #4]
 800b69e:	4b4c      	ldr	r3, [pc, #304]	; (800b7d0 <_dtoa_r+0x618>)
 800b6a0:	4431      	add	r1, r6
 800b6a2:	910d      	str	r1, [sp, #52]	; 0x34
 800b6a4:	9908      	ldr	r1, [sp, #32]
 800b6a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b6aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6ae:	2900      	cmp	r1, #0
 800b6b0:	d043      	beq.n	800b73a <_dtoa_r+0x582>
 800b6b2:	494d      	ldr	r1, [pc, #308]	; (800b7e8 <_dtoa_r+0x630>)
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f7f5 f8e9 	bl	800088c <__aeabi_ddiv>
 800b6ba:	4652      	mov	r2, sl
 800b6bc:	465b      	mov	r3, fp
 800b6be:	f7f4 fe03 	bl	80002c8 <__aeabi_dsub>
 800b6c2:	9d01      	ldr	r5, [sp, #4]
 800b6c4:	4682      	mov	sl, r0
 800b6c6:	468b      	mov	fp, r1
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	f7f5 fa4e 	bl	8000b6c <__aeabi_d2iz>
 800b6d0:	4606      	mov	r6, r0
 800b6d2:	f7f4 ff47 	bl	8000564 <__aeabi_i2d>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	460b      	mov	r3, r1
 800b6da:	4640      	mov	r0, r8
 800b6dc:	4649      	mov	r1, r9
 800b6de:	f7f4 fdf3 	bl	80002c8 <__aeabi_dsub>
 800b6e2:	3630      	adds	r6, #48	; 0x30
 800b6e4:	f805 6b01 	strb.w	r6, [r5], #1
 800b6e8:	4652      	mov	r2, sl
 800b6ea:	465b      	mov	r3, fp
 800b6ec:	4680      	mov	r8, r0
 800b6ee:	4689      	mov	r9, r1
 800b6f0:	f7f5 fa14 	bl	8000b1c <__aeabi_dcmplt>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d163      	bne.n	800b7c0 <_dtoa_r+0x608>
 800b6f8:	4642      	mov	r2, r8
 800b6fa:	464b      	mov	r3, r9
 800b6fc:	4936      	ldr	r1, [pc, #216]	; (800b7d8 <_dtoa_r+0x620>)
 800b6fe:	2000      	movs	r0, #0
 800b700:	f7f4 fde2 	bl	80002c8 <__aeabi_dsub>
 800b704:	4652      	mov	r2, sl
 800b706:	465b      	mov	r3, fp
 800b708:	f7f5 fa08 	bl	8000b1c <__aeabi_dcmplt>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	f040 80b5 	bne.w	800b87c <_dtoa_r+0x6c4>
 800b712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b714:	429d      	cmp	r5, r3
 800b716:	d081      	beq.n	800b61c <_dtoa_r+0x464>
 800b718:	4b30      	ldr	r3, [pc, #192]	; (800b7dc <_dtoa_r+0x624>)
 800b71a:	2200      	movs	r2, #0
 800b71c:	4650      	mov	r0, sl
 800b71e:	4659      	mov	r1, fp
 800b720:	f7f4 ff8a 	bl	8000638 <__aeabi_dmul>
 800b724:	4b2d      	ldr	r3, [pc, #180]	; (800b7dc <_dtoa_r+0x624>)
 800b726:	4682      	mov	sl, r0
 800b728:	468b      	mov	fp, r1
 800b72a:	4640      	mov	r0, r8
 800b72c:	4649      	mov	r1, r9
 800b72e:	2200      	movs	r2, #0
 800b730:	f7f4 ff82 	bl	8000638 <__aeabi_dmul>
 800b734:	4680      	mov	r8, r0
 800b736:	4689      	mov	r9, r1
 800b738:	e7c6      	b.n	800b6c8 <_dtoa_r+0x510>
 800b73a:	4650      	mov	r0, sl
 800b73c:	4659      	mov	r1, fp
 800b73e:	f7f4 ff7b 	bl	8000638 <__aeabi_dmul>
 800b742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b744:	9d01      	ldr	r5, [sp, #4]
 800b746:	930f      	str	r3, [sp, #60]	; 0x3c
 800b748:	4682      	mov	sl, r0
 800b74a:	468b      	mov	fp, r1
 800b74c:	4649      	mov	r1, r9
 800b74e:	4640      	mov	r0, r8
 800b750:	f7f5 fa0c 	bl	8000b6c <__aeabi_d2iz>
 800b754:	4606      	mov	r6, r0
 800b756:	f7f4 ff05 	bl	8000564 <__aeabi_i2d>
 800b75a:	3630      	adds	r6, #48	; 0x30
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	4640      	mov	r0, r8
 800b762:	4649      	mov	r1, r9
 800b764:	f7f4 fdb0 	bl	80002c8 <__aeabi_dsub>
 800b768:	f805 6b01 	strb.w	r6, [r5], #1
 800b76c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b76e:	429d      	cmp	r5, r3
 800b770:	4680      	mov	r8, r0
 800b772:	4689      	mov	r9, r1
 800b774:	f04f 0200 	mov.w	r2, #0
 800b778:	d124      	bne.n	800b7c4 <_dtoa_r+0x60c>
 800b77a:	4b1b      	ldr	r3, [pc, #108]	; (800b7e8 <_dtoa_r+0x630>)
 800b77c:	4650      	mov	r0, sl
 800b77e:	4659      	mov	r1, fp
 800b780:	f7f4 fda4 	bl	80002cc <__adddf3>
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	4640      	mov	r0, r8
 800b78a:	4649      	mov	r1, r9
 800b78c:	f7f5 f9e4 	bl	8000b58 <__aeabi_dcmpgt>
 800b790:	2800      	cmp	r0, #0
 800b792:	d173      	bne.n	800b87c <_dtoa_r+0x6c4>
 800b794:	4652      	mov	r2, sl
 800b796:	465b      	mov	r3, fp
 800b798:	4913      	ldr	r1, [pc, #76]	; (800b7e8 <_dtoa_r+0x630>)
 800b79a:	2000      	movs	r0, #0
 800b79c:	f7f4 fd94 	bl	80002c8 <__aeabi_dsub>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	f7f5 f9b8 	bl	8000b1c <__aeabi_dcmplt>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	f43f af35 	beq.w	800b61c <_dtoa_r+0x464>
 800b7b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b7b4:	1e6b      	subs	r3, r5, #1
 800b7b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b7bc:	2b30      	cmp	r3, #48	; 0x30
 800b7be:	d0f8      	beq.n	800b7b2 <_dtoa_r+0x5fa>
 800b7c0:	9700      	str	r7, [sp, #0]
 800b7c2:	e049      	b.n	800b858 <_dtoa_r+0x6a0>
 800b7c4:	4b05      	ldr	r3, [pc, #20]	; (800b7dc <_dtoa_r+0x624>)
 800b7c6:	f7f4 ff37 	bl	8000638 <__aeabi_dmul>
 800b7ca:	4680      	mov	r8, r0
 800b7cc:	4689      	mov	r9, r1
 800b7ce:	e7bd      	b.n	800b74c <_dtoa_r+0x594>
 800b7d0:	0800d310 	.word	0x0800d310
 800b7d4:	0800d2e8 	.word	0x0800d2e8
 800b7d8:	3ff00000 	.word	0x3ff00000
 800b7dc:	40240000 	.word	0x40240000
 800b7e0:	401c0000 	.word	0x401c0000
 800b7e4:	40140000 	.word	0x40140000
 800b7e8:	3fe00000 	.word	0x3fe00000
 800b7ec:	9d01      	ldr	r5, [sp, #4]
 800b7ee:	4656      	mov	r6, sl
 800b7f0:	465f      	mov	r7, fp
 800b7f2:	4642      	mov	r2, r8
 800b7f4:	464b      	mov	r3, r9
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	4639      	mov	r1, r7
 800b7fa:	f7f5 f847 	bl	800088c <__aeabi_ddiv>
 800b7fe:	f7f5 f9b5 	bl	8000b6c <__aeabi_d2iz>
 800b802:	4682      	mov	sl, r0
 800b804:	f7f4 feae 	bl	8000564 <__aeabi_i2d>
 800b808:	4642      	mov	r2, r8
 800b80a:	464b      	mov	r3, r9
 800b80c:	f7f4 ff14 	bl	8000638 <__aeabi_dmul>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4630      	mov	r0, r6
 800b816:	4639      	mov	r1, r7
 800b818:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b81c:	f7f4 fd54 	bl	80002c8 <__aeabi_dsub>
 800b820:	f805 6b01 	strb.w	r6, [r5], #1
 800b824:	9e01      	ldr	r6, [sp, #4]
 800b826:	9f03      	ldr	r7, [sp, #12]
 800b828:	1bae      	subs	r6, r5, r6
 800b82a:	42b7      	cmp	r7, r6
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	d135      	bne.n	800b89e <_dtoa_r+0x6e6>
 800b832:	f7f4 fd4b 	bl	80002cc <__adddf3>
 800b836:	4642      	mov	r2, r8
 800b838:	464b      	mov	r3, r9
 800b83a:	4606      	mov	r6, r0
 800b83c:	460f      	mov	r7, r1
 800b83e:	f7f5 f98b 	bl	8000b58 <__aeabi_dcmpgt>
 800b842:	b9d0      	cbnz	r0, 800b87a <_dtoa_r+0x6c2>
 800b844:	4642      	mov	r2, r8
 800b846:	464b      	mov	r3, r9
 800b848:	4630      	mov	r0, r6
 800b84a:	4639      	mov	r1, r7
 800b84c:	f7f5 f95c 	bl	8000b08 <__aeabi_dcmpeq>
 800b850:	b110      	cbz	r0, 800b858 <_dtoa_r+0x6a0>
 800b852:	f01a 0f01 	tst.w	sl, #1
 800b856:	d110      	bne.n	800b87a <_dtoa_r+0x6c2>
 800b858:	4620      	mov	r0, r4
 800b85a:	ee18 1a10 	vmov	r1, s16
 800b85e:	f7fe fce1 	bl	800a224 <_Bfree>
 800b862:	2300      	movs	r3, #0
 800b864:	9800      	ldr	r0, [sp, #0]
 800b866:	702b      	strb	r3, [r5, #0]
 800b868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b86a:	3001      	adds	r0, #1
 800b86c:	6018      	str	r0, [r3, #0]
 800b86e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b870:	2b00      	cmp	r3, #0
 800b872:	f43f acf1 	beq.w	800b258 <_dtoa_r+0xa0>
 800b876:	601d      	str	r5, [r3, #0]
 800b878:	e4ee      	b.n	800b258 <_dtoa_r+0xa0>
 800b87a:	9f00      	ldr	r7, [sp, #0]
 800b87c:	462b      	mov	r3, r5
 800b87e:	461d      	mov	r5, r3
 800b880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b884:	2a39      	cmp	r2, #57	; 0x39
 800b886:	d106      	bne.n	800b896 <_dtoa_r+0x6de>
 800b888:	9a01      	ldr	r2, [sp, #4]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d1f7      	bne.n	800b87e <_dtoa_r+0x6c6>
 800b88e:	9901      	ldr	r1, [sp, #4]
 800b890:	2230      	movs	r2, #48	; 0x30
 800b892:	3701      	adds	r7, #1
 800b894:	700a      	strb	r2, [r1, #0]
 800b896:	781a      	ldrb	r2, [r3, #0]
 800b898:	3201      	adds	r2, #1
 800b89a:	701a      	strb	r2, [r3, #0]
 800b89c:	e790      	b.n	800b7c0 <_dtoa_r+0x608>
 800b89e:	4ba6      	ldr	r3, [pc, #664]	; (800bb38 <_dtoa_r+0x980>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f7f4 fec9 	bl	8000638 <__aeabi_dmul>
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	460f      	mov	r7, r1
 800b8ae:	f7f5 f92b 	bl	8000b08 <__aeabi_dcmpeq>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d09d      	beq.n	800b7f2 <_dtoa_r+0x63a>
 800b8b6:	e7cf      	b.n	800b858 <_dtoa_r+0x6a0>
 800b8b8:	9a08      	ldr	r2, [sp, #32]
 800b8ba:	2a00      	cmp	r2, #0
 800b8bc:	f000 80d7 	beq.w	800ba6e <_dtoa_r+0x8b6>
 800b8c0:	9a06      	ldr	r2, [sp, #24]
 800b8c2:	2a01      	cmp	r2, #1
 800b8c4:	f300 80ba 	bgt.w	800ba3c <_dtoa_r+0x884>
 800b8c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	f000 80b2 	beq.w	800ba34 <_dtoa_r+0x87c>
 800b8d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b8d4:	9e07      	ldr	r6, [sp, #28]
 800b8d6:	9d04      	ldr	r5, [sp, #16]
 800b8d8:	9a04      	ldr	r2, [sp, #16]
 800b8da:	441a      	add	r2, r3
 800b8dc:	9204      	str	r2, [sp, #16]
 800b8de:	9a05      	ldr	r2, [sp, #20]
 800b8e0:	2101      	movs	r1, #1
 800b8e2:	441a      	add	r2, r3
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	9205      	str	r2, [sp, #20]
 800b8e8:	f7fe fd9e 	bl	800a428 <__i2b>
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	2d00      	cmp	r5, #0
 800b8f0:	dd0c      	ble.n	800b90c <_dtoa_r+0x754>
 800b8f2:	9b05      	ldr	r3, [sp, #20]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	dd09      	ble.n	800b90c <_dtoa_r+0x754>
 800b8f8:	42ab      	cmp	r3, r5
 800b8fa:	9a04      	ldr	r2, [sp, #16]
 800b8fc:	bfa8      	it	ge
 800b8fe:	462b      	movge	r3, r5
 800b900:	1ad2      	subs	r2, r2, r3
 800b902:	9204      	str	r2, [sp, #16]
 800b904:	9a05      	ldr	r2, [sp, #20]
 800b906:	1aed      	subs	r5, r5, r3
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	9305      	str	r3, [sp, #20]
 800b90c:	9b07      	ldr	r3, [sp, #28]
 800b90e:	b31b      	cbz	r3, 800b958 <_dtoa_r+0x7a0>
 800b910:	9b08      	ldr	r3, [sp, #32]
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 80af 	beq.w	800ba76 <_dtoa_r+0x8be>
 800b918:	2e00      	cmp	r6, #0
 800b91a:	dd13      	ble.n	800b944 <_dtoa_r+0x78c>
 800b91c:	4639      	mov	r1, r7
 800b91e:	4632      	mov	r2, r6
 800b920:	4620      	mov	r0, r4
 800b922:	f7fe fe41 	bl	800a5a8 <__pow5mult>
 800b926:	ee18 2a10 	vmov	r2, s16
 800b92a:	4601      	mov	r1, r0
 800b92c:	4607      	mov	r7, r0
 800b92e:	4620      	mov	r0, r4
 800b930:	f7fe fd90 	bl	800a454 <__multiply>
 800b934:	ee18 1a10 	vmov	r1, s16
 800b938:	4680      	mov	r8, r0
 800b93a:	4620      	mov	r0, r4
 800b93c:	f7fe fc72 	bl	800a224 <_Bfree>
 800b940:	ee08 8a10 	vmov	s16, r8
 800b944:	9b07      	ldr	r3, [sp, #28]
 800b946:	1b9a      	subs	r2, r3, r6
 800b948:	d006      	beq.n	800b958 <_dtoa_r+0x7a0>
 800b94a:	ee18 1a10 	vmov	r1, s16
 800b94e:	4620      	mov	r0, r4
 800b950:	f7fe fe2a 	bl	800a5a8 <__pow5mult>
 800b954:	ee08 0a10 	vmov	s16, r0
 800b958:	2101      	movs	r1, #1
 800b95a:	4620      	mov	r0, r4
 800b95c:	f7fe fd64 	bl	800a428 <__i2b>
 800b960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b962:	2b00      	cmp	r3, #0
 800b964:	4606      	mov	r6, r0
 800b966:	f340 8088 	ble.w	800ba7a <_dtoa_r+0x8c2>
 800b96a:	461a      	mov	r2, r3
 800b96c:	4601      	mov	r1, r0
 800b96e:	4620      	mov	r0, r4
 800b970:	f7fe fe1a 	bl	800a5a8 <__pow5mult>
 800b974:	9b06      	ldr	r3, [sp, #24]
 800b976:	2b01      	cmp	r3, #1
 800b978:	4606      	mov	r6, r0
 800b97a:	f340 8081 	ble.w	800ba80 <_dtoa_r+0x8c8>
 800b97e:	f04f 0800 	mov.w	r8, #0
 800b982:	6933      	ldr	r3, [r6, #16]
 800b984:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b988:	6918      	ldr	r0, [r3, #16]
 800b98a:	f7fe fcfd 	bl	800a388 <__hi0bits>
 800b98e:	f1c0 0020 	rsb	r0, r0, #32
 800b992:	9b05      	ldr	r3, [sp, #20]
 800b994:	4418      	add	r0, r3
 800b996:	f010 001f 	ands.w	r0, r0, #31
 800b99a:	f000 8092 	beq.w	800bac2 <_dtoa_r+0x90a>
 800b99e:	f1c0 0320 	rsb	r3, r0, #32
 800b9a2:	2b04      	cmp	r3, #4
 800b9a4:	f340 808a 	ble.w	800babc <_dtoa_r+0x904>
 800b9a8:	f1c0 001c 	rsb	r0, r0, #28
 800b9ac:	9b04      	ldr	r3, [sp, #16]
 800b9ae:	4403      	add	r3, r0
 800b9b0:	9304      	str	r3, [sp, #16]
 800b9b2:	9b05      	ldr	r3, [sp, #20]
 800b9b4:	4403      	add	r3, r0
 800b9b6:	4405      	add	r5, r0
 800b9b8:	9305      	str	r3, [sp, #20]
 800b9ba:	9b04      	ldr	r3, [sp, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	dd07      	ble.n	800b9d0 <_dtoa_r+0x818>
 800b9c0:	ee18 1a10 	vmov	r1, s16
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f7fe fe48 	bl	800a65c <__lshift>
 800b9cc:	ee08 0a10 	vmov	s16, r0
 800b9d0:	9b05      	ldr	r3, [sp, #20]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	dd05      	ble.n	800b9e2 <_dtoa_r+0x82a>
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	461a      	mov	r2, r3
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f7fe fe3e 	bl	800a65c <__lshift>
 800b9e0:	4606      	mov	r6, r0
 800b9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d06e      	beq.n	800bac6 <_dtoa_r+0x90e>
 800b9e8:	ee18 0a10 	vmov	r0, s16
 800b9ec:	4631      	mov	r1, r6
 800b9ee:	f7fe fea5 	bl	800a73c <__mcmp>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	da67      	bge.n	800bac6 <_dtoa_r+0x90e>
 800b9f6:	9b00      	ldr	r3, [sp, #0]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	ee18 1a10 	vmov	r1, s16
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	220a      	movs	r2, #10
 800ba02:	2300      	movs	r3, #0
 800ba04:	4620      	mov	r0, r4
 800ba06:	f7fe fc2f 	bl	800a268 <__multadd>
 800ba0a:	9b08      	ldr	r3, [sp, #32]
 800ba0c:	ee08 0a10 	vmov	s16, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 81b1 	beq.w	800bd78 <_dtoa_r+0xbc0>
 800ba16:	2300      	movs	r3, #0
 800ba18:	4639      	mov	r1, r7
 800ba1a:	220a      	movs	r2, #10
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f7fe fc23 	bl	800a268 <__multadd>
 800ba22:	9b02      	ldr	r3, [sp, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	4607      	mov	r7, r0
 800ba28:	f300 808e 	bgt.w	800bb48 <_dtoa_r+0x990>
 800ba2c:	9b06      	ldr	r3, [sp, #24]
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	dc51      	bgt.n	800bad6 <_dtoa_r+0x91e>
 800ba32:	e089      	b.n	800bb48 <_dtoa_r+0x990>
 800ba34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba3a:	e74b      	b.n	800b8d4 <_dtoa_r+0x71c>
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	1e5e      	subs	r6, r3, #1
 800ba40:	9b07      	ldr	r3, [sp, #28]
 800ba42:	42b3      	cmp	r3, r6
 800ba44:	bfbf      	itttt	lt
 800ba46:	9b07      	ldrlt	r3, [sp, #28]
 800ba48:	9607      	strlt	r6, [sp, #28]
 800ba4a:	1af2      	sublt	r2, r6, r3
 800ba4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ba4e:	bfb6      	itet	lt
 800ba50:	189b      	addlt	r3, r3, r2
 800ba52:	1b9e      	subge	r6, r3, r6
 800ba54:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	bfb8      	it	lt
 800ba5a:	2600      	movlt	r6, #0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	bfb7      	itett	lt
 800ba60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ba64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ba68:	1a9d      	sublt	r5, r3, r2
 800ba6a:	2300      	movlt	r3, #0
 800ba6c:	e734      	b.n	800b8d8 <_dtoa_r+0x720>
 800ba6e:	9e07      	ldr	r6, [sp, #28]
 800ba70:	9d04      	ldr	r5, [sp, #16]
 800ba72:	9f08      	ldr	r7, [sp, #32]
 800ba74:	e73b      	b.n	800b8ee <_dtoa_r+0x736>
 800ba76:	9a07      	ldr	r2, [sp, #28]
 800ba78:	e767      	b.n	800b94a <_dtoa_r+0x792>
 800ba7a:	9b06      	ldr	r3, [sp, #24]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	dc18      	bgt.n	800bab2 <_dtoa_r+0x8fa>
 800ba80:	f1ba 0f00 	cmp.w	sl, #0
 800ba84:	d115      	bne.n	800bab2 <_dtoa_r+0x8fa>
 800ba86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba8a:	b993      	cbnz	r3, 800bab2 <_dtoa_r+0x8fa>
 800ba8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba90:	0d1b      	lsrs	r3, r3, #20
 800ba92:	051b      	lsls	r3, r3, #20
 800ba94:	b183      	cbz	r3, 800bab8 <_dtoa_r+0x900>
 800ba96:	9b04      	ldr	r3, [sp, #16]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	9304      	str	r3, [sp, #16]
 800ba9c:	9b05      	ldr	r3, [sp, #20]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	9305      	str	r3, [sp, #20]
 800baa2:	f04f 0801 	mov.w	r8, #1
 800baa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f47f af6a 	bne.w	800b982 <_dtoa_r+0x7ca>
 800baae:	2001      	movs	r0, #1
 800bab0:	e76f      	b.n	800b992 <_dtoa_r+0x7da>
 800bab2:	f04f 0800 	mov.w	r8, #0
 800bab6:	e7f6      	b.n	800baa6 <_dtoa_r+0x8ee>
 800bab8:	4698      	mov	r8, r3
 800baba:	e7f4      	b.n	800baa6 <_dtoa_r+0x8ee>
 800babc:	f43f af7d 	beq.w	800b9ba <_dtoa_r+0x802>
 800bac0:	4618      	mov	r0, r3
 800bac2:	301c      	adds	r0, #28
 800bac4:	e772      	b.n	800b9ac <_dtoa_r+0x7f4>
 800bac6:	9b03      	ldr	r3, [sp, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	dc37      	bgt.n	800bb3c <_dtoa_r+0x984>
 800bacc:	9b06      	ldr	r3, [sp, #24]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	dd34      	ble.n	800bb3c <_dtoa_r+0x984>
 800bad2:	9b03      	ldr	r3, [sp, #12]
 800bad4:	9302      	str	r3, [sp, #8]
 800bad6:	9b02      	ldr	r3, [sp, #8]
 800bad8:	b96b      	cbnz	r3, 800baf6 <_dtoa_r+0x93e>
 800bada:	4631      	mov	r1, r6
 800badc:	2205      	movs	r2, #5
 800bade:	4620      	mov	r0, r4
 800bae0:	f7fe fbc2 	bl	800a268 <__multadd>
 800bae4:	4601      	mov	r1, r0
 800bae6:	4606      	mov	r6, r0
 800bae8:	ee18 0a10 	vmov	r0, s16
 800baec:	f7fe fe26 	bl	800a73c <__mcmp>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	f73f adbb 	bgt.w	800b66c <_dtoa_r+0x4b4>
 800baf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf8:	9d01      	ldr	r5, [sp, #4]
 800bafa:	43db      	mvns	r3, r3
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	f04f 0800 	mov.w	r8, #0
 800bb02:	4631      	mov	r1, r6
 800bb04:	4620      	mov	r0, r4
 800bb06:	f7fe fb8d 	bl	800a224 <_Bfree>
 800bb0a:	2f00      	cmp	r7, #0
 800bb0c:	f43f aea4 	beq.w	800b858 <_dtoa_r+0x6a0>
 800bb10:	f1b8 0f00 	cmp.w	r8, #0
 800bb14:	d005      	beq.n	800bb22 <_dtoa_r+0x96a>
 800bb16:	45b8      	cmp	r8, r7
 800bb18:	d003      	beq.n	800bb22 <_dtoa_r+0x96a>
 800bb1a:	4641      	mov	r1, r8
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f7fe fb81 	bl	800a224 <_Bfree>
 800bb22:	4639      	mov	r1, r7
 800bb24:	4620      	mov	r0, r4
 800bb26:	f7fe fb7d 	bl	800a224 <_Bfree>
 800bb2a:	e695      	b.n	800b858 <_dtoa_r+0x6a0>
 800bb2c:	2600      	movs	r6, #0
 800bb2e:	4637      	mov	r7, r6
 800bb30:	e7e1      	b.n	800baf6 <_dtoa_r+0x93e>
 800bb32:	9700      	str	r7, [sp, #0]
 800bb34:	4637      	mov	r7, r6
 800bb36:	e599      	b.n	800b66c <_dtoa_r+0x4b4>
 800bb38:	40240000 	.word	0x40240000
 800bb3c:	9b08      	ldr	r3, [sp, #32]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f000 80ca 	beq.w	800bcd8 <_dtoa_r+0xb20>
 800bb44:	9b03      	ldr	r3, [sp, #12]
 800bb46:	9302      	str	r3, [sp, #8]
 800bb48:	2d00      	cmp	r5, #0
 800bb4a:	dd05      	ble.n	800bb58 <_dtoa_r+0x9a0>
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	462a      	mov	r2, r5
 800bb50:	4620      	mov	r0, r4
 800bb52:	f7fe fd83 	bl	800a65c <__lshift>
 800bb56:	4607      	mov	r7, r0
 800bb58:	f1b8 0f00 	cmp.w	r8, #0
 800bb5c:	d05b      	beq.n	800bc16 <_dtoa_r+0xa5e>
 800bb5e:	6879      	ldr	r1, [r7, #4]
 800bb60:	4620      	mov	r0, r4
 800bb62:	f7fe fb1f 	bl	800a1a4 <_Balloc>
 800bb66:	4605      	mov	r5, r0
 800bb68:	b928      	cbnz	r0, 800bb76 <_dtoa_r+0x9be>
 800bb6a:	4b87      	ldr	r3, [pc, #540]	; (800bd88 <_dtoa_r+0xbd0>)
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bb72:	f7ff bb3b 	b.w	800b1ec <_dtoa_r+0x34>
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	3202      	adds	r2, #2
 800bb7a:	0092      	lsls	r2, r2, #2
 800bb7c:	f107 010c 	add.w	r1, r7, #12
 800bb80:	300c      	adds	r0, #12
 800bb82:	f7fc ffff 	bl	8008b84 <memcpy>
 800bb86:	2201      	movs	r2, #1
 800bb88:	4629      	mov	r1, r5
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7fe fd66 	bl	800a65c <__lshift>
 800bb90:	9b01      	ldr	r3, [sp, #4]
 800bb92:	f103 0901 	add.w	r9, r3, #1
 800bb96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	9305      	str	r3, [sp, #20]
 800bb9e:	f00a 0301 	and.w	r3, sl, #1
 800bba2:	46b8      	mov	r8, r7
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	4607      	mov	r7, r0
 800bba8:	4631      	mov	r1, r6
 800bbaa:	ee18 0a10 	vmov	r0, s16
 800bbae:	f7ff fa77 	bl	800b0a0 <quorem>
 800bbb2:	4641      	mov	r1, r8
 800bbb4:	9002      	str	r0, [sp, #8]
 800bbb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bbba:	ee18 0a10 	vmov	r0, s16
 800bbbe:	f7fe fdbd 	bl	800a73c <__mcmp>
 800bbc2:	463a      	mov	r2, r7
 800bbc4:	9003      	str	r0, [sp, #12]
 800bbc6:	4631      	mov	r1, r6
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f7fe fdd3 	bl	800a774 <__mdiff>
 800bbce:	68c2      	ldr	r2, [r0, #12]
 800bbd0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	bb02      	cbnz	r2, 800bc1a <_dtoa_r+0xa62>
 800bbd8:	4601      	mov	r1, r0
 800bbda:	ee18 0a10 	vmov	r0, s16
 800bbde:	f7fe fdad 	bl	800a73c <__mcmp>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	9207      	str	r2, [sp, #28]
 800bbea:	f7fe fb1b 	bl	800a224 <_Bfree>
 800bbee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bbf2:	ea43 0102 	orr.w	r1, r3, r2
 800bbf6:	9b04      	ldr	r3, [sp, #16]
 800bbf8:	430b      	orrs	r3, r1
 800bbfa:	464d      	mov	r5, r9
 800bbfc:	d10f      	bne.n	800bc1e <_dtoa_r+0xa66>
 800bbfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc02:	d02a      	beq.n	800bc5a <_dtoa_r+0xaa2>
 800bc04:	9b03      	ldr	r3, [sp, #12]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	dd02      	ble.n	800bc10 <_dtoa_r+0xa58>
 800bc0a:	9b02      	ldr	r3, [sp, #8]
 800bc0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bc10:	f88b a000 	strb.w	sl, [fp]
 800bc14:	e775      	b.n	800bb02 <_dtoa_r+0x94a>
 800bc16:	4638      	mov	r0, r7
 800bc18:	e7ba      	b.n	800bb90 <_dtoa_r+0x9d8>
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	e7e2      	b.n	800bbe4 <_dtoa_r+0xa2c>
 800bc1e:	9b03      	ldr	r3, [sp, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	db04      	blt.n	800bc2e <_dtoa_r+0xa76>
 800bc24:	9906      	ldr	r1, [sp, #24]
 800bc26:	430b      	orrs	r3, r1
 800bc28:	9904      	ldr	r1, [sp, #16]
 800bc2a:	430b      	orrs	r3, r1
 800bc2c:	d122      	bne.n	800bc74 <_dtoa_r+0xabc>
 800bc2e:	2a00      	cmp	r2, #0
 800bc30:	ddee      	ble.n	800bc10 <_dtoa_r+0xa58>
 800bc32:	ee18 1a10 	vmov	r1, s16
 800bc36:	2201      	movs	r2, #1
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f7fe fd0f 	bl	800a65c <__lshift>
 800bc3e:	4631      	mov	r1, r6
 800bc40:	ee08 0a10 	vmov	s16, r0
 800bc44:	f7fe fd7a 	bl	800a73c <__mcmp>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	dc03      	bgt.n	800bc54 <_dtoa_r+0xa9c>
 800bc4c:	d1e0      	bne.n	800bc10 <_dtoa_r+0xa58>
 800bc4e:	f01a 0f01 	tst.w	sl, #1
 800bc52:	d0dd      	beq.n	800bc10 <_dtoa_r+0xa58>
 800bc54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc58:	d1d7      	bne.n	800bc0a <_dtoa_r+0xa52>
 800bc5a:	2339      	movs	r3, #57	; 0x39
 800bc5c:	f88b 3000 	strb.w	r3, [fp]
 800bc60:	462b      	mov	r3, r5
 800bc62:	461d      	mov	r5, r3
 800bc64:	3b01      	subs	r3, #1
 800bc66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bc6a:	2a39      	cmp	r2, #57	; 0x39
 800bc6c:	d071      	beq.n	800bd52 <_dtoa_r+0xb9a>
 800bc6e:	3201      	adds	r2, #1
 800bc70:	701a      	strb	r2, [r3, #0]
 800bc72:	e746      	b.n	800bb02 <_dtoa_r+0x94a>
 800bc74:	2a00      	cmp	r2, #0
 800bc76:	dd07      	ble.n	800bc88 <_dtoa_r+0xad0>
 800bc78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc7c:	d0ed      	beq.n	800bc5a <_dtoa_r+0xaa2>
 800bc7e:	f10a 0301 	add.w	r3, sl, #1
 800bc82:	f88b 3000 	strb.w	r3, [fp]
 800bc86:	e73c      	b.n	800bb02 <_dtoa_r+0x94a>
 800bc88:	9b05      	ldr	r3, [sp, #20]
 800bc8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bc8e:	4599      	cmp	r9, r3
 800bc90:	d047      	beq.n	800bd22 <_dtoa_r+0xb6a>
 800bc92:	ee18 1a10 	vmov	r1, s16
 800bc96:	2300      	movs	r3, #0
 800bc98:	220a      	movs	r2, #10
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f7fe fae4 	bl	800a268 <__multadd>
 800bca0:	45b8      	cmp	r8, r7
 800bca2:	ee08 0a10 	vmov	s16, r0
 800bca6:	f04f 0300 	mov.w	r3, #0
 800bcaa:	f04f 020a 	mov.w	r2, #10
 800bcae:	4641      	mov	r1, r8
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	d106      	bne.n	800bcc2 <_dtoa_r+0xb0a>
 800bcb4:	f7fe fad8 	bl	800a268 <__multadd>
 800bcb8:	4680      	mov	r8, r0
 800bcba:	4607      	mov	r7, r0
 800bcbc:	f109 0901 	add.w	r9, r9, #1
 800bcc0:	e772      	b.n	800bba8 <_dtoa_r+0x9f0>
 800bcc2:	f7fe fad1 	bl	800a268 <__multadd>
 800bcc6:	4639      	mov	r1, r7
 800bcc8:	4680      	mov	r8, r0
 800bcca:	2300      	movs	r3, #0
 800bccc:	220a      	movs	r2, #10
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f7fe faca 	bl	800a268 <__multadd>
 800bcd4:	4607      	mov	r7, r0
 800bcd6:	e7f1      	b.n	800bcbc <_dtoa_r+0xb04>
 800bcd8:	9b03      	ldr	r3, [sp, #12]
 800bcda:	9302      	str	r3, [sp, #8]
 800bcdc:	9d01      	ldr	r5, [sp, #4]
 800bcde:	ee18 0a10 	vmov	r0, s16
 800bce2:	4631      	mov	r1, r6
 800bce4:	f7ff f9dc 	bl	800b0a0 <quorem>
 800bce8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bcec:	9b01      	ldr	r3, [sp, #4]
 800bcee:	f805 ab01 	strb.w	sl, [r5], #1
 800bcf2:	1aea      	subs	r2, r5, r3
 800bcf4:	9b02      	ldr	r3, [sp, #8]
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	dd09      	ble.n	800bd0e <_dtoa_r+0xb56>
 800bcfa:	ee18 1a10 	vmov	r1, s16
 800bcfe:	2300      	movs	r3, #0
 800bd00:	220a      	movs	r2, #10
 800bd02:	4620      	mov	r0, r4
 800bd04:	f7fe fab0 	bl	800a268 <__multadd>
 800bd08:	ee08 0a10 	vmov	s16, r0
 800bd0c:	e7e7      	b.n	800bcde <_dtoa_r+0xb26>
 800bd0e:	9b02      	ldr	r3, [sp, #8]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	bfc8      	it	gt
 800bd14:	461d      	movgt	r5, r3
 800bd16:	9b01      	ldr	r3, [sp, #4]
 800bd18:	bfd8      	it	le
 800bd1a:	2501      	movle	r5, #1
 800bd1c:	441d      	add	r5, r3
 800bd1e:	f04f 0800 	mov.w	r8, #0
 800bd22:	ee18 1a10 	vmov	r1, s16
 800bd26:	2201      	movs	r2, #1
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f7fe fc97 	bl	800a65c <__lshift>
 800bd2e:	4631      	mov	r1, r6
 800bd30:	ee08 0a10 	vmov	s16, r0
 800bd34:	f7fe fd02 	bl	800a73c <__mcmp>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	dc91      	bgt.n	800bc60 <_dtoa_r+0xaa8>
 800bd3c:	d102      	bne.n	800bd44 <_dtoa_r+0xb8c>
 800bd3e:	f01a 0f01 	tst.w	sl, #1
 800bd42:	d18d      	bne.n	800bc60 <_dtoa_r+0xaa8>
 800bd44:	462b      	mov	r3, r5
 800bd46:	461d      	mov	r5, r3
 800bd48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd4c:	2a30      	cmp	r2, #48	; 0x30
 800bd4e:	d0fa      	beq.n	800bd46 <_dtoa_r+0xb8e>
 800bd50:	e6d7      	b.n	800bb02 <_dtoa_r+0x94a>
 800bd52:	9a01      	ldr	r2, [sp, #4]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d184      	bne.n	800bc62 <_dtoa_r+0xaaa>
 800bd58:	9b00      	ldr	r3, [sp, #0]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	2331      	movs	r3, #49	; 0x31
 800bd60:	7013      	strb	r3, [r2, #0]
 800bd62:	e6ce      	b.n	800bb02 <_dtoa_r+0x94a>
 800bd64:	4b09      	ldr	r3, [pc, #36]	; (800bd8c <_dtoa_r+0xbd4>)
 800bd66:	f7ff ba95 	b.w	800b294 <_dtoa_r+0xdc>
 800bd6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f47f aa6e 	bne.w	800b24e <_dtoa_r+0x96>
 800bd72:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <_dtoa_r+0xbd8>)
 800bd74:	f7ff ba8e 	b.w	800b294 <_dtoa_r+0xdc>
 800bd78:	9b02      	ldr	r3, [sp, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	dcae      	bgt.n	800bcdc <_dtoa_r+0xb24>
 800bd7e:	9b06      	ldr	r3, [sp, #24]
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	f73f aea8 	bgt.w	800bad6 <_dtoa_r+0x91e>
 800bd86:	e7a9      	b.n	800bcdc <_dtoa_r+0xb24>
 800bd88:	0800d1e8 	.word	0x0800d1e8
 800bd8c:	0800d550 	.word	0x0800d550
 800bd90:	0800d543 	.word	0x0800d543

0800bd94 <fiprintf>:
 800bd94:	b40e      	push	{r1, r2, r3}
 800bd96:	b503      	push	{r0, r1, lr}
 800bd98:	4601      	mov	r1, r0
 800bd9a:	ab03      	add	r3, sp, #12
 800bd9c:	4805      	ldr	r0, [pc, #20]	; (800bdb4 <fiprintf+0x20>)
 800bd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda2:	6800      	ldr	r0, [r0, #0]
 800bda4:	9301      	str	r3, [sp, #4]
 800bda6:	f000 f891 	bl	800becc <_vfiprintf_r>
 800bdaa:	b002      	add	sp, #8
 800bdac:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdb0:	b003      	add	sp, #12
 800bdb2:	4770      	bx	lr
 800bdb4:	2000001c 	.word	0x2000001c

0800bdb8 <malloc>:
 800bdb8:	4b02      	ldr	r3, [pc, #8]	; (800bdc4 <malloc+0xc>)
 800bdba:	4601      	mov	r1, r0
 800bdbc:	6818      	ldr	r0, [r3, #0]
 800bdbe:	f7fe bf07 	b.w	800abd0 <_malloc_r>
 800bdc2:	bf00      	nop
 800bdc4:	2000001c 	.word	0x2000001c

0800bdc8 <__malloc_lock>:
 800bdc8:	4801      	ldr	r0, [pc, #4]	; (800bdd0 <__malloc_lock+0x8>)
 800bdca:	f000 bc2f 	b.w	800c62c <__retarget_lock_acquire_recursive>
 800bdce:	bf00      	nop
 800bdd0:	200009a0 	.word	0x200009a0

0800bdd4 <__malloc_unlock>:
 800bdd4:	4801      	ldr	r0, [pc, #4]	; (800bddc <__malloc_unlock+0x8>)
 800bdd6:	f000 bc2a 	b.w	800c62e <__retarget_lock_release_recursive>
 800bdda:	bf00      	nop
 800bddc:	200009a0 	.word	0x200009a0

0800bde0 <_free_r>:
 800bde0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bde2:	2900      	cmp	r1, #0
 800bde4:	d044      	beq.n	800be70 <_free_r+0x90>
 800bde6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdea:	9001      	str	r0, [sp, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f1a1 0404 	sub.w	r4, r1, #4
 800bdf2:	bfb8      	it	lt
 800bdf4:	18e4      	addlt	r4, r4, r3
 800bdf6:	f7ff ffe7 	bl	800bdc8 <__malloc_lock>
 800bdfa:	4a1e      	ldr	r2, [pc, #120]	; (800be74 <_free_r+0x94>)
 800bdfc:	9801      	ldr	r0, [sp, #4]
 800bdfe:	6813      	ldr	r3, [r2, #0]
 800be00:	b933      	cbnz	r3, 800be10 <_free_r+0x30>
 800be02:	6063      	str	r3, [r4, #4]
 800be04:	6014      	str	r4, [r2, #0]
 800be06:	b003      	add	sp, #12
 800be08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be0c:	f7ff bfe2 	b.w	800bdd4 <__malloc_unlock>
 800be10:	42a3      	cmp	r3, r4
 800be12:	d908      	bls.n	800be26 <_free_r+0x46>
 800be14:	6825      	ldr	r5, [r4, #0]
 800be16:	1961      	adds	r1, r4, r5
 800be18:	428b      	cmp	r3, r1
 800be1a:	bf01      	itttt	eq
 800be1c:	6819      	ldreq	r1, [r3, #0]
 800be1e:	685b      	ldreq	r3, [r3, #4]
 800be20:	1949      	addeq	r1, r1, r5
 800be22:	6021      	streq	r1, [r4, #0]
 800be24:	e7ed      	b.n	800be02 <_free_r+0x22>
 800be26:	461a      	mov	r2, r3
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	b10b      	cbz	r3, 800be30 <_free_r+0x50>
 800be2c:	42a3      	cmp	r3, r4
 800be2e:	d9fa      	bls.n	800be26 <_free_r+0x46>
 800be30:	6811      	ldr	r1, [r2, #0]
 800be32:	1855      	adds	r5, r2, r1
 800be34:	42a5      	cmp	r5, r4
 800be36:	d10b      	bne.n	800be50 <_free_r+0x70>
 800be38:	6824      	ldr	r4, [r4, #0]
 800be3a:	4421      	add	r1, r4
 800be3c:	1854      	adds	r4, r2, r1
 800be3e:	42a3      	cmp	r3, r4
 800be40:	6011      	str	r1, [r2, #0]
 800be42:	d1e0      	bne.n	800be06 <_free_r+0x26>
 800be44:	681c      	ldr	r4, [r3, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	6053      	str	r3, [r2, #4]
 800be4a:	4421      	add	r1, r4
 800be4c:	6011      	str	r1, [r2, #0]
 800be4e:	e7da      	b.n	800be06 <_free_r+0x26>
 800be50:	d902      	bls.n	800be58 <_free_r+0x78>
 800be52:	230c      	movs	r3, #12
 800be54:	6003      	str	r3, [r0, #0]
 800be56:	e7d6      	b.n	800be06 <_free_r+0x26>
 800be58:	6825      	ldr	r5, [r4, #0]
 800be5a:	1961      	adds	r1, r4, r5
 800be5c:	428b      	cmp	r3, r1
 800be5e:	bf04      	itt	eq
 800be60:	6819      	ldreq	r1, [r3, #0]
 800be62:	685b      	ldreq	r3, [r3, #4]
 800be64:	6063      	str	r3, [r4, #4]
 800be66:	bf04      	itt	eq
 800be68:	1949      	addeq	r1, r1, r5
 800be6a:	6021      	streq	r1, [r4, #0]
 800be6c:	6054      	str	r4, [r2, #4]
 800be6e:	e7ca      	b.n	800be06 <_free_r+0x26>
 800be70:	b003      	add	sp, #12
 800be72:	bd30      	pop	{r4, r5, pc}
 800be74:	20000994 	.word	0x20000994

0800be78 <__sfputc_r>:
 800be78:	6893      	ldr	r3, [r2, #8]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	b410      	push	{r4}
 800be80:	6093      	str	r3, [r2, #8]
 800be82:	da08      	bge.n	800be96 <__sfputc_r+0x1e>
 800be84:	6994      	ldr	r4, [r2, #24]
 800be86:	42a3      	cmp	r3, r4
 800be88:	db01      	blt.n	800be8e <__sfputc_r+0x16>
 800be8a:	290a      	cmp	r1, #10
 800be8c:	d103      	bne.n	800be96 <__sfputc_r+0x1e>
 800be8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be92:	f000 b94b 	b.w	800c12c <__swbuf_r>
 800be96:	6813      	ldr	r3, [r2, #0]
 800be98:	1c58      	adds	r0, r3, #1
 800be9a:	6010      	str	r0, [r2, #0]
 800be9c:	7019      	strb	r1, [r3, #0]
 800be9e:	4608      	mov	r0, r1
 800bea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <__sfputs_r>:
 800bea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea8:	4606      	mov	r6, r0
 800beaa:	460f      	mov	r7, r1
 800beac:	4614      	mov	r4, r2
 800beae:	18d5      	adds	r5, r2, r3
 800beb0:	42ac      	cmp	r4, r5
 800beb2:	d101      	bne.n	800beb8 <__sfputs_r+0x12>
 800beb4:	2000      	movs	r0, #0
 800beb6:	e007      	b.n	800bec8 <__sfputs_r+0x22>
 800beb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bebc:	463a      	mov	r2, r7
 800bebe:	4630      	mov	r0, r6
 800bec0:	f7ff ffda 	bl	800be78 <__sfputc_r>
 800bec4:	1c43      	adds	r3, r0, #1
 800bec6:	d1f3      	bne.n	800beb0 <__sfputs_r+0xa>
 800bec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800becc <_vfiprintf_r>:
 800becc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed0:	460d      	mov	r5, r1
 800bed2:	b09d      	sub	sp, #116	; 0x74
 800bed4:	4614      	mov	r4, r2
 800bed6:	4698      	mov	r8, r3
 800bed8:	4606      	mov	r6, r0
 800beda:	b118      	cbz	r0, 800bee4 <_vfiprintf_r+0x18>
 800bedc:	6983      	ldr	r3, [r0, #24]
 800bede:	b90b      	cbnz	r3, 800bee4 <_vfiprintf_r+0x18>
 800bee0:	f000 fb06 	bl	800c4f0 <__sinit>
 800bee4:	4b89      	ldr	r3, [pc, #548]	; (800c10c <_vfiprintf_r+0x240>)
 800bee6:	429d      	cmp	r5, r3
 800bee8:	d11b      	bne.n	800bf22 <_vfiprintf_r+0x56>
 800beea:	6875      	ldr	r5, [r6, #4]
 800beec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beee:	07d9      	lsls	r1, r3, #31
 800bef0:	d405      	bmi.n	800befe <_vfiprintf_r+0x32>
 800bef2:	89ab      	ldrh	r3, [r5, #12]
 800bef4:	059a      	lsls	r2, r3, #22
 800bef6:	d402      	bmi.n	800befe <_vfiprintf_r+0x32>
 800bef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800befa:	f000 fb97 	bl	800c62c <__retarget_lock_acquire_recursive>
 800befe:	89ab      	ldrh	r3, [r5, #12]
 800bf00:	071b      	lsls	r3, r3, #28
 800bf02:	d501      	bpl.n	800bf08 <_vfiprintf_r+0x3c>
 800bf04:	692b      	ldr	r3, [r5, #16]
 800bf06:	b9eb      	cbnz	r3, 800bf44 <_vfiprintf_r+0x78>
 800bf08:	4629      	mov	r1, r5
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f000 f960 	bl	800c1d0 <__swsetup_r>
 800bf10:	b1c0      	cbz	r0, 800bf44 <_vfiprintf_r+0x78>
 800bf12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf14:	07dc      	lsls	r4, r3, #31
 800bf16:	d50e      	bpl.n	800bf36 <_vfiprintf_r+0x6a>
 800bf18:	f04f 30ff 	mov.w	r0, #4294967295
 800bf1c:	b01d      	add	sp, #116	; 0x74
 800bf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf22:	4b7b      	ldr	r3, [pc, #492]	; (800c110 <_vfiprintf_r+0x244>)
 800bf24:	429d      	cmp	r5, r3
 800bf26:	d101      	bne.n	800bf2c <_vfiprintf_r+0x60>
 800bf28:	68b5      	ldr	r5, [r6, #8]
 800bf2a:	e7df      	b.n	800beec <_vfiprintf_r+0x20>
 800bf2c:	4b79      	ldr	r3, [pc, #484]	; (800c114 <_vfiprintf_r+0x248>)
 800bf2e:	429d      	cmp	r5, r3
 800bf30:	bf08      	it	eq
 800bf32:	68f5      	ldreq	r5, [r6, #12]
 800bf34:	e7da      	b.n	800beec <_vfiprintf_r+0x20>
 800bf36:	89ab      	ldrh	r3, [r5, #12]
 800bf38:	0598      	lsls	r0, r3, #22
 800bf3a:	d4ed      	bmi.n	800bf18 <_vfiprintf_r+0x4c>
 800bf3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf3e:	f000 fb76 	bl	800c62e <__retarget_lock_release_recursive>
 800bf42:	e7e9      	b.n	800bf18 <_vfiprintf_r+0x4c>
 800bf44:	2300      	movs	r3, #0
 800bf46:	9309      	str	r3, [sp, #36]	; 0x24
 800bf48:	2320      	movs	r3, #32
 800bf4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf52:	2330      	movs	r3, #48	; 0x30
 800bf54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c118 <_vfiprintf_r+0x24c>
 800bf58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf5c:	f04f 0901 	mov.w	r9, #1
 800bf60:	4623      	mov	r3, r4
 800bf62:	469a      	mov	sl, r3
 800bf64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf68:	b10a      	cbz	r2, 800bf6e <_vfiprintf_r+0xa2>
 800bf6a:	2a25      	cmp	r2, #37	; 0x25
 800bf6c:	d1f9      	bne.n	800bf62 <_vfiprintf_r+0x96>
 800bf6e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf72:	d00b      	beq.n	800bf8c <_vfiprintf_r+0xc0>
 800bf74:	465b      	mov	r3, fp
 800bf76:	4622      	mov	r2, r4
 800bf78:	4629      	mov	r1, r5
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f7ff ff93 	bl	800bea6 <__sfputs_r>
 800bf80:	3001      	adds	r0, #1
 800bf82:	f000 80aa 	beq.w	800c0da <_vfiprintf_r+0x20e>
 800bf86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf88:	445a      	add	r2, fp
 800bf8a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f000 80a2 	beq.w	800c0da <_vfiprintf_r+0x20e>
 800bf96:	2300      	movs	r3, #0
 800bf98:	f04f 32ff 	mov.w	r2, #4294967295
 800bf9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfa0:	f10a 0a01 	add.w	sl, sl, #1
 800bfa4:	9304      	str	r3, [sp, #16]
 800bfa6:	9307      	str	r3, [sp, #28]
 800bfa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfac:	931a      	str	r3, [sp, #104]	; 0x68
 800bfae:	4654      	mov	r4, sl
 800bfb0:	2205      	movs	r2, #5
 800bfb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb6:	4858      	ldr	r0, [pc, #352]	; (800c118 <_vfiprintf_r+0x24c>)
 800bfb8:	f7f4 f932 	bl	8000220 <memchr>
 800bfbc:	9a04      	ldr	r2, [sp, #16]
 800bfbe:	b9d8      	cbnz	r0, 800bff8 <_vfiprintf_r+0x12c>
 800bfc0:	06d1      	lsls	r1, r2, #27
 800bfc2:	bf44      	itt	mi
 800bfc4:	2320      	movmi	r3, #32
 800bfc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfca:	0713      	lsls	r3, r2, #28
 800bfcc:	bf44      	itt	mi
 800bfce:	232b      	movmi	r3, #43	; 0x2b
 800bfd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfd4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfd8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfda:	d015      	beq.n	800c008 <_vfiprintf_r+0x13c>
 800bfdc:	9a07      	ldr	r2, [sp, #28]
 800bfde:	4654      	mov	r4, sl
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	f04f 0c0a 	mov.w	ip, #10
 800bfe6:	4621      	mov	r1, r4
 800bfe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfec:	3b30      	subs	r3, #48	; 0x30
 800bfee:	2b09      	cmp	r3, #9
 800bff0:	d94e      	bls.n	800c090 <_vfiprintf_r+0x1c4>
 800bff2:	b1b0      	cbz	r0, 800c022 <_vfiprintf_r+0x156>
 800bff4:	9207      	str	r2, [sp, #28]
 800bff6:	e014      	b.n	800c022 <_vfiprintf_r+0x156>
 800bff8:	eba0 0308 	sub.w	r3, r0, r8
 800bffc:	fa09 f303 	lsl.w	r3, r9, r3
 800c000:	4313      	orrs	r3, r2
 800c002:	9304      	str	r3, [sp, #16]
 800c004:	46a2      	mov	sl, r4
 800c006:	e7d2      	b.n	800bfae <_vfiprintf_r+0xe2>
 800c008:	9b03      	ldr	r3, [sp, #12]
 800c00a:	1d19      	adds	r1, r3, #4
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	9103      	str	r1, [sp, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	bfbb      	ittet	lt
 800c014:	425b      	neglt	r3, r3
 800c016:	f042 0202 	orrlt.w	r2, r2, #2
 800c01a:	9307      	strge	r3, [sp, #28]
 800c01c:	9307      	strlt	r3, [sp, #28]
 800c01e:	bfb8      	it	lt
 800c020:	9204      	strlt	r2, [sp, #16]
 800c022:	7823      	ldrb	r3, [r4, #0]
 800c024:	2b2e      	cmp	r3, #46	; 0x2e
 800c026:	d10c      	bne.n	800c042 <_vfiprintf_r+0x176>
 800c028:	7863      	ldrb	r3, [r4, #1]
 800c02a:	2b2a      	cmp	r3, #42	; 0x2a
 800c02c:	d135      	bne.n	800c09a <_vfiprintf_r+0x1ce>
 800c02e:	9b03      	ldr	r3, [sp, #12]
 800c030:	1d1a      	adds	r2, r3, #4
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	9203      	str	r2, [sp, #12]
 800c036:	2b00      	cmp	r3, #0
 800c038:	bfb8      	it	lt
 800c03a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c03e:	3402      	adds	r4, #2
 800c040:	9305      	str	r3, [sp, #20]
 800c042:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c128 <_vfiprintf_r+0x25c>
 800c046:	7821      	ldrb	r1, [r4, #0]
 800c048:	2203      	movs	r2, #3
 800c04a:	4650      	mov	r0, sl
 800c04c:	f7f4 f8e8 	bl	8000220 <memchr>
 800c050:	b140      	cbz	r0, 800c064 <_vfiprintf_r+0x198>
 800c052:	2340      	movs	r3, #64	; 0x40
 800c054:	eba0 000a 	sub.w	r0, r0, sl
 800c058:	fa03 f000 	lsl.w	r0, r3, r0
 800c05c:	9b04      	ldr	r3, [sp, #16]
 800c05e:	4303      	orrs	r3, r0
 800c060:	3401      	adds	r4, #1
 800c062:	9304      	str	r3, [sp, #16]
 800c064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c068:	482c      	ldr	r0, [pc, #176]	; (800c11c <_vfiprintf_r+0x250>)
 800c06a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c06e:	2206      	movs	r2, #6
 800c070:	f7f4 f8d6 	bl	8000220 <memchr>
 800c074:	2800      	cmp	r0, #0
 800c076:	d03f      	beq.n	800c0f8 <_vfiprintf_r+0x22c>
 800c078:	4b29      	ldr	r3, [pc, #164]	; (800c120 <_vfiprintf_r+0x254>)
 800c07a:	bb1b      	cbnz	r3, 800c0c4 <_vfiprintf_r+0x1f8>
 800c07c:	9b03      	ldr	r3, [sp, #12]
 800c07e:	3307      	adds	r3, #7
 800c080:	f023 0307 	bic.w	r3, r3, #7
 800c084:	3308      	adds	r3, #8
 800c086:	9303      	str	r3, [sp, #12]
 800c088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c08a:	443b      	add	r3, r7
 800c08c:	9309      	str	r3, [sp, #36]	; 0x24
 800c08e:	e767      	b.n	800bf60 <_vfiprintf_r+0x94>
 800c090:	fb0c 3202 	mla	r2, ip, r2, r3
 800c094:	460c      	mov	r4, r1
 800c096:	2001      	movs	r0, #1
 800c098:	e7a5      	b.n	800bfe6 <_vfiprintf_r+0x11a>
 800c09a:	2300      	movs	r3, #0
 800c09c:	3401      	adds	r4, #1
 800c09e:	9305      	str	r3, [sp, #20]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	f04f 0c0a 	mov.w	ip, #10
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0ac:	3a30      	subs	r2, #48	; 0x30
 800c0ae:	2a09      	cmp	r2, #9
 800c0b0:	d903      	bls.n	800c0ba <_vfiprintf_r+0x1ee>
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d0c5      	beq.n	800c042 <_vfiprintf_r+0x176>
 800c0b6:	9105      	str	r1, [sp, #20]
 800c0b8:	e7c3      	b.n	800c042 <_vfiprintf_r+0x176>
 800c0ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0be:	4604      	mov	r4, r0
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e7f0      	b.n	800c0a6 <_vfiprintf_r+0x1da>
 800c0c4:	ab03      	add	r3, sp, #12
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	462a      	mov	r2, r5
 800c0ca:	4b16      	ldr	r3, [pc, #88]	; (800c124 <_vfiprintf_r+0x258>)
 800c0cc:	a904      	add	r1, sp, #16
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f3af 8000 	nop.w
 800c0d4:	4607      	mov	r7, r0
 800c0d6:	1c78      	adds	r0, r7, #1
 800c0d8:	d1d6      	bne.n	800c088 <_vfiprintf_r+0x1bc>
 800c0da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0dc:	07d9      	lsls	r1, r3, #31
 800c0de:	d405      	bmi.n	800c0ec <_vfiprintf_r+0x220>
 800c0e0:	89ab      	ldrh	r3, [r5, #12]
 800c0e2:	059a      	lsls	r2, r3, #22
 800c0e4:	d402      	bmi.n	800c0ec <_vfiprintf_r+0x220>
 800c0e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0e8:	f000 faa1 	bl	800c62e <__retarget_lock_release_recursive>
 800c0ec:	89ab      	ldrh	r3, [r5, #12]
 800c0ee:	065b      	lsls	r3, r3, #25
 800c0f0:	f53f af12 	bmi.w	800bf18 <_vfiprintf_r+0x4c>
 800c0f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0f6:	e711      	b.n	800bf1c <_vfiprintf_r+0x50>
 800c0f8:	ab03      	add	r3, sp, #12
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	462a      	mov	r2, r5
 800c0fe:	4b09      	ldr	r3, [pc, #36]	; (800c124 <_vfiprintf_r+0x258>)
 800c100:	a904      	add	r1, sp, #16
 800c102:	4630      	mov	r0, r6
 800c104:	f7fe fe46 	bl	800ad94 <_printf_i>
 800c108:	e7e4      	b.n	800c0d4 <_vfiprintf_r+0x208>
 800c10a:	bf00      	nop
 800c10c:	0800d5e0 	.word	0x0800d5e0
 800c110:	0800d600 	.word	0x0800d600
 800c114:	0800d5c0 	.word	0x0800d5c0
 800c118:	0800d5ad 	.word	0x0800d5ad
 800c11c:	0800d5b7 	.word	0x0800d5b7
 800c120:	00000000 	.word	0x00000000
 800c124:	0800bea7 	.word	0x0800bea7
 800c128:	0800d5b3 	.word	0x0800d5b3

0800c12c <__swbuf_r>:
 800c12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12e:	460e      	mov	r6, r1
 800c130:	4614      	mov	r4, r2
 800c132:	4605      	mov	r5, r0
 800c134:	b118      	cbz	r0, 800c13e <__swbuf_r+0x12>
 800c136:	6983      	ldr	r3, [r0, #24]
 800c138:	b90b      	cbnz	r3, 800c13e <__swbuf_r+0x12>
 800c13a:	f000 f9d9 	bl	800c4f0 <__sinit>
 800c13e:	4b21      	ldr	r3, [pc, #132]	; (800c1c4 <__swbuf_r+0x98>)
 800c140:	429c      	cmp	r4, r3
 800c142:	d12b      	bne.n	800c19c <__swbuf_r+0x70>
 800c144:	686c      	ldr	r4, [r5, #4]
 800c146:	69a3      	ldr	r3, [r4, #24]
 800c148:	60a3      	str	r3, [r4, #8]
 800c14a:	89a3      	ldrh	r3, [r4, #12]
 800c14c:	071a      	lsls	r2, r3, #28
 800c14e:	d52f      	bpl.n	800c1b0 <__swbuf_r+0x84>
 800c150:	6923      	ldr	r3, [r4, #16]
 800c152:	b36b      	cbz	r3, 800c1b0 <__swbuf_r+0x84>
 800c154:	6923      	ldr	r3, [r4, #16]
 800c156:	6820      	ldr	r0, [r4, #0]
 800c158:	1ac0      	subs	r0, r0, r3
 800c15a:	6963      	ldr	r3, [r4, #20]
 800c15c:	b2f6      	uxtb	r6, r6
 800c15e:	4283      	cmp	r3, r0
 800c160:	4637      	mov	r7, r6
 800c162:	dc04      	bgt.n	800c16e <__swbuf_r+0x42>
 800c164:	4621      	mov	r1, r4
 800c166:	4628      	mov	r0, r5
 800c168:	f000 f92e 	bl	800c3c8 <_fflush_r>
 800c16c:	bb30      	cbnz	r0, 800c1bc <__swbuf_r+0x90>
 800c16e:	68a3      	ldr	r3, [r4, #8]
 800c170:	3b01      	subs	r3, #1
 800c172:	60a3      	str	r3, [r4, #8]
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	6022      	str	r2, [r4, #0]
 800c17a:	701e      	strb	r6, [r3, #0]
 800c17c:	6963      	ldr	r3, [r4, #20]
 800c17e:	3001      	adds	r0, #1
 800c180:	4283      	cmp	r3, r0
 800c182:	d004      	beq.n	800c18e <__swbuf_r+0x62>
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	07db      	lsls	r3, r3, #31
 800c188:	d506      	bpl.n	800c198 <__swbuf_r+0x6c>
 800c18a:	2e0a      	cmp	r6, #10
 800c18c:	d104      	bne.n	800c198 <__swbuf_r+0x6c>
 800c18e:	4621      	mov	r1, r4
 800c190:	4628      	mov	r0, r5
 800c192:	f000 f919 	bl	800c3c8 <_fflush_r>
 800c196:	b988      	cbnz	r0, 800c1bc <__swbuf_r+0x90>
 800c198:	4638      	mov	r0, r7
 800c19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c19c:	4b0a      	ldr	r3, [pc, #40]	; (800c1c8 <__swbuf_r+0x9c>)
 800c19e:	429c      	cmp	r4, r3
 800c1a0:	d101      	bne.n	800c1a6 <__swbuf_r+0x7a>
 800c1a2:	68ac      	ldr	r4, [r5, #8]
 800c1a4:	e7cf      	b.n	800c146 <__swbuf_r+0x1a>
 800c1a6:	4b09      	ldr	r3, [pc, #36]	; (800c1cc <__swbuf_r+0xa0>)
 800c1a8:	429c      	cmp	r4, r3
 800c1aa:	bf08      	it	eq
 800c1ac:	68ec      	ldreq	r4, [r5, #12]
 800c1ae:	e7ca      	b.n	800c146 <__swbuf_r+0x1a>
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f000 f80c 	bl	800c1d0 <__swsetup_r>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d0cb      	beq.n	800c154 <__swbuf_r+0x28>
 800c1bc:	f04f 37ff 	mov.w	r7, #4294967295
 800c1c0:	e7ea      	b.n	800c198 <__swbuf_r+0x6c>
 800c1c2:	bf00      	nop
 800c1c4:	0800d5e0 	.word	0x0800d5e0
 800c1c8:	0800d600 	.word	0x0800d600
 800c1cc:	0800d5c0 	.word	0x0800d5c0

0800c1d0 <__swsetup_r>:
 800c1d0:	4b32      	ldr	r3, [pc, #200]	; (800c29c <__swsetup_r+0xcc>)
 800c1d2:	b570      	push	{r4, r5, r6, lr}
 800c1d4:	681d      	ldr	r5, [r3, #0]
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	460c      	mov	r4, r1
 800c1da:	b125      	cbz	r5, 800c1e6 <__swsetup_r+0x16>
 800c1dc:	69ab      	ldr	r3, [r5, #24]
 800c1de:	b913      	cbnz	r3, 800c1e6 <__swsetup_r+0x16>
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f000 f985 	bl	800c4f0 <__sinit>
 800c1e6:	4b2e      	ldr	r3, [pc, #184]	; (800c2a0 <__swsetup_r+0xd0>)
 800c1e8:	429c      	cmp	r4, r3
 800c1ea:	d10f      	bne.n	800c20c <__swsetup_r+0x3c>
 800c1ec:	686c      	ldr	r4, [r5, #4]
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1f4:	0719      	lsls	r1, r3, #28
 800c1f6:	d42c      	bmi.n	800c252 <__swsetup_r+0x82>
 800c1f8:	06dd      	lsls	r5, r3, #27
 800c1fa:	d411      	bmi.n	800c220 <__swsetup_r+0x50>
 800c1fc:	2309      	movs	r3, #9
 800c1fe:	6033      	str	r3, [r6, #0]
 800c200:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c204:	81a3      	strh	r3, [r4, #12]
 800c206:	f04f 30ff 	mov.w	r0, #4294967295
 800c20a:	e03e      	b.n	800c28a <__swsetup_r+0xba>
 800c20c:	4b25      	ldr	r3, [pc, #148]	; (800c2a4 <__swsetup_r+0xd4>)
 800c20e:	429c      	cmp	r4, r3
 800c210:	d101      	bne.n	800c216 <__swsetup_r+0x46>
 800c212:	68ac      	ldr	r4, [r5, #8]
 800c214:	e7eb      	b.n	800c1ee <__swsetup_r+0x1e>
 800c216:	4b24      	ldr	r3, [pc, #144]	; (800c2a8 <__swsetup_r+0xd8>)
 800c218:	429c      	cmp	r4, r3
 800c21a:	bf08      	it	eq
 800c21c:	68ec      	ldreq	r4, [r5, #12]
 800c21e:	e7e6      	b.n	800c1ee <__swsetup_r+0x1e>
 800c220:	0758      	lsls	r0, r3, #29
 800c222:	d512      	bpl.n	800c24a <__swsetup_r+0x7a>
 800c224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c226:	b141      	cbz	r1, 800c23a <__swsetup_r+0x6a>
 800c228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c22c:	4299      	cmp	r1, r3
 800c22e:	d002      	beq.n	800c236 <__swsetup_r+0x66>
 800c230:	4630      	mov	r0, r6
 800c232:	f7ff fdd5 	bl	800bde0 <_free_r>
 800c236:	2300      	movs	r3, #0
 800c238:	6363      	str	r3, [r4, #52]	; 0x34
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c240:	81a3      	strh	r3, [r4, #12]
 800c242:	2300      	movs	r3, #0
 800c244:	6063      	str	r3, [r4, #4]
 800c246:	6923      	ldr	r3, [r4, #16]
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	89a3      	ldrh	r3, [r4, #12]
 800c24c:	f043 0308 	orr.w	r3, r3, #8
 800c250:	81a3      	strh	r3, [r4, #12]
 800c252:	6923      	ldr	r3, [r4, #16]
 800c254:	b94b      	cbnz	r3, 800c26a <__swsetup_r+0x9a>
 800c256:	89a3      	ldrh	r3, [r4, #12]
 800c258:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c25c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c260:	d003      	beq.n	800c26a <__swsetup_r+0x9a>
 800c262:	4621      	mov	r1, r4
 800c264:	4630      	mov	r0, r6
 800c266:	f000 fa09 	bl	800c67c <__smakebuf_r>
 800c26a:	89a0      	ldrh	r0, [r4, #12]
 800c26c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c270:	f010 0301 	ands.w	r3, r0, #1
 800c274:	d00a      	beq.n	800c28c <__swsetup_r+0xbc>
 800c276:	2300      	movs	r3, #0
 800c278:	60a3      	str	r3, [r4, #8]
 800c27a:	6963      	ldr	r3, [r4, #20]
 800c27c:	425b      	negs	r3, r3
 800c27e:	61a3      	str	r3, [r4, #24]
 800c280:	6923      	ldr	r3, [r4, #16]
 800c282:	b943      	cbnz	r3, 800c296 <__swsetup_r+0xc6>
 800c284:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c288:	d1ba      	bne.n	800c200 <__swsetup_r+0x30>
 800c28a:	bd70      	pop	{r4, r5, r6, pc}
 800c28c:	0781      	lsls	r1, r0, #30
 800c28e:	bf58      	it	pl
 800c290:	6963      	ldrpl	r3, [r4, #20]
 800c292:	60a3      	str	r3, [r4, #8]
 800c294:	e7f4      	b.n	800c280 <__swsetup_r+0xb0>
 800c296:	2000      	movs	r0, #0
 800c298:	e7f7      	b.n	800c28a <__swsetup_r+0xba>
 800c29a:	bf00      	nop
 800c29c:	2000001c 	.word	0x2000001c
 800c2a0:	0800d5e0 	.word	0x0800d5e0
 800c2a4:	0800d600 	.word	0x0800d600
 800c2a8:	0800d5c0 	.word	0x0800d5c0

0800c2ac <abort>:
 800c2ac:	b508      	push	{r3, lr}
 800c2ae:	2006      	movs	r0, #6
 800c2b0:	f000 fa4c 	bl	800c74c <raise>
 800c2b4:	2001      	movs	r0, #1
 800c2b6:	f7f6 fa93 	bl	80027e0 <_exit>
	...

0800c2bc <__sflush_r>:
 800c2bc:	898a      	ldrh	r2, [r1, #12]
 800c2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	0710      	lsls	r0, r2, #28
 800c2c6:	460c      	mov	r4, r1
 800c2c8:	d458      	bmi.n	800c37c <__sflush_r+0xc0>
 800c2ca:	684b      	ldr	r3, [r1, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	dc05      	bgt.n	800c2dc <__sflush_r+0x20>
 800c2d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	dc02      	bgt.n	800c2dc <__sflush_r+0x20>
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2de:	2e00      	cmp	r6, #0
 800c2e0:	d0f9      	beq.n	800c2d6 <__sflush_r+0x1a>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2e8:	682f      	ldr	r7, [r5, #0]
 800c2ea:	602b      	str	r3, [r5, #0]
 800c2ec:	d032      	beq.n	800c354 <__sflush_r+0x98>
 800c2ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	075a      	lsls	r2, r3, #29
 800c2f4:	d505      	bpl.n	800c302 <__sflush_r+0x46>
 800c2f6:	6863      	ldr	r3, [r4, #4]
 800c2f8:	1ac0      	subs	r0, r0, r3
 800c2fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2fc:	b10b      	cbz	r3, 800c302 <__sflush_r+0x46>
 800c2fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c300:	1ac0      	subs	r0, r0, r3
 800c302:	2300      	movs	r3, #0
 800c304:	4602      	mov	r2, r0
 800c306:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c308:	6a21      	ldr	r1, [r4, #32]
 800c30a:	4628      	mov	r0, r5
 800c30c:	47b0      	blx	r6
 800c30e:	1c43      	adds	r3, r0, #1
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	d106      	bne.n	800c322 <__sflush_r+0x66>
 800c314:	6829      	ldr	r1, [r5, #0]
 800c316:	291d      	cmp	r1, #29
 800c318:	d82c      	bhi.n	800c374 <__sflush_r+0xb8>
 800c31a:	4a2a      	ldr	r2, [pc, #168]	; (800c3c4 <__sflush_r+0x108>)
 800c31c:	40ca      	lsrs	r2, r1
 800c31e:	07d6      	lsls	r6, r2, #31
 800c320:	d528      	bpl.n	800c374 <__sflush_r+0xb8>
 800c322:	2200      	movs	r2, #0
 800c324:	6062      	str	r2, [r4, #4]
 800c326:	04d9      	lsls	r1, r3, #19
 800c328:	6922      	ldr	r2, [r4, #16]
 800c32a:	6022      	str	r2, [r4, #0]
 800c32c:	d504      	bpl.n	800c338 <__sflush_r+0x7c>
 800c32e:	1c42      	adds	r2, r0, #1
 800c330:	d101      	bne.n	800c336 <__sflush_r+0x7a>
 800c332:	682b      	ldr	r3, [r5, #0]
 800c334:	b903      	cbnz	r3, 800c338 <__sflush_r+0x7c>
 800c336:	6560      	str	r0, [r4, #84]	; 0x54
 800c338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c33a:	602f      	str	r7, [r5, #0]
 800c33c:	2900      	cmp	r1, #0
 800c33e:	d0ca      	beq.n	800c2d6 <__sflush_r+0x1a>
 800c340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c344:	4299      	cmp	r1, r3
 800c346:	d002      	beq.n	800c34e <__sflush_r+0x92>
 800c348:	4628      	mov	r0, r5
 800c34a:	f7ff fd49 	bl	800bde0 <_free_r>
 800c34e:	2000      	movs	r0, #0
 800c350:	6360      	str	r0, [r4, #52]	; 0x34
 800c352:	e7c1      	b.n	800c2d8 <__sflush_r+0x1c>
 800c354:	6a21      	ldr	r1, [r4, #32]
 800c356:	2301      	movs	r3, #1
 800c358:	4628      	mov	r0, r5
 800c35a:	47b0      	blx	r6
 800c35c:	1c41      	adds	r1, r0, #1
 800c35e:	d1c7      	bne.n	800c2f0 <__sflush_r+0x34>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0c4      	beq.n	800c2f0 <__sflush_r+0x34>
 800c366:	2b1d      	cmp	r3, #29
 800c368:	d001      	beq.n	800c36e <__sflush_r+0xb2>
 800c36a:	2b16      	cmp	r3, #22
 800c36c:	d101      	bne.n	800c372 <__sflush_r+0xb6>
 800c36e:	602f      	str	r7, [r5, #0]
 800c370:	e7b1      	b.n	800c2d6 <__sflush_r+0x1a>
 800c372:	89a3      	ldrh	r3, [r4, #12]
 800c374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c378:	81a3      	strh	r3, [r4, #12]
 800c37a:	e7ad      	b.n	800c2d8 <__sflush_r+0x1c>
 800c37c:	690f      	ldr	r7, [r1, #16]
 800c37e:	2f00      	cmp	r7, #0
 800c380:	d0a9      	beq.n	800c2d6 <__sflush_r+0x1a>
 800c382:	0793      	lsls	r3, r2, #30
 800c384:	680e      	ldr	r6, [r1, #0]
 800c386:	bf08      	it	eq
 800c388:	694b      	ldreq	r3, [r1, #20]
 800c38a:	600f      	str	r7, [r1, #0]
 800c38c:	bf18      	it	ne
 800c38e:	2300      	movne	r3, #0
 800c390:	eba6 0807 	sub.w	r8, r6, r7
 800c394:	608b      	str	r3, [r1, #8]
 800c396:	f1b8 0f00 	cmp.w	r8, #0
 800c39a:	dd9c      	ble.n	800c2d6 <__sflush_r+0x1a>
 800c39c:	6a21      	ldr	r1, [r4, #32]
 800c39e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3a0:	4643      	mov	r3, r8
 800c3a2:	463a      	mov	r2, r7
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	47b0      	blx	r6
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	dc06      	bgt.n	800c3ba <__sflush_r+0xfe>
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b2:	81a3      	strh	r3, [r4, #12]
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b8:	e78e      	b.n	800c2d8 <__sflush_r+0x1c>
 800c3ba:	4407      	add	r7, r0
 800c3bc:	eba8 0800 	sub.w	r8, r8, r0
 800c3c0:	e7e9      	b.n	800c396 <__sflush_r+0xda>
 800c3c2:	bf00      	nop
 800c3c4:	20400001 	.word	0x20400001

0800c3c8 <_fflush_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	690b      	ldr	r3, [r1, #16]
 800c3cc:	4605      	mov	r5, r0
 800c3ce:	460c      	mov	r4, r1
 800c3d0:	b913      	cbnz	r3, 800c3d8 <_fflush_r+0x10>
 800c3d2:	2500      	movs	r5, #0
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
 800c3d8:	b118      	cbz	r0, 800c3e2 <_fflush_r+0x1a>
 800c3da:	6983      	ldr	r3, [r0, #24]
 800c3dc:	b90b      	cbnz	r3, 800c3e2 <_fflush_r+0x1a>
 800c3de:	f000 f887 	bl	800c4f0 <__sinit>
 800c3e2:	4b14      	ldr	r3, [pc, #80]	; (800c434 <_fflush_r+0x6c>)
 800c3e4:	429c      	cmp	r4, r3
 800c3e6:	d11b      	bne.n	800c420 <_fflush_r+0x58>
 800c3e8:	686c      	ldr	r4, [r5, #4]
 800c3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0ef      	beq.n	800c3d2 <_fflush_r+0xa>
 800c3f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3f4:	07d0      	lsls	r0, r2, #31
 800c3f6:	d404      	bmi.n	800c402 <_fflush_r+0x3a>
 800c3f8:	0599      	lsls	r1, r3, #22
 800c3fa:	d402      	bmi.n	800c402 <_fflush_r+0x3a>
 800c3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3fe:	f000 f915 	bl	800c62c <__retarget_lock_acquire_recursive>
 800c402:	4628      	mov	r0, r5
 800c404:	4621      	mov	r1, r4
 800c406:	f7ff ff59 	bl	800c2bc <__sflush_r>
 800c40a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c40c:	07da      	lsls	r2, r3, #31
 800c40e:	4605      	mov	r5, r0
 800c410:	d4e0      	bmi.n	800c3d4 <_fflush_r+0xc>
 800c412:	89a3      	ldrh	r3, [r4, #12]
 800c414:	059b      	lsls	r3, r3, #22
 800c416:	d4dd      	bmi.n	800c3d4 <_fflush_r+0xc>
 800c418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c41a:	f000 f908 	bl	800c62e <__retarget_lock_release_recursive>
 800c41e:	e7d9      	b.n	800c3d4 <_fflush_r+0xc>
 800c420:	4b05      	ldr	r3, [pc, #20]	; (800c438 <_fflush_r+0x70>)
 800c422:	429c      	cmp	r4, r3
 800c424:	d101      	bne.n	800c42a <_fflush_r+0x62>
 800c426:	68ac      	ldr	r4, [r5, #8]
 800c428:	e7df      	b.n	800c3ea <_fflush_r+0x22>
 800c42a:	4b04      	ldr	r3, [pc, #16]	; (800c43c <_fflush_r+0x74>)
 800c42c:	429c      	cmp	r4, r3
 800c42e:	bf08      	it	eq
 800c430:	68ec      	ldreq	r4, [r5, #12]
 800c432:	e7da      	b.n	800c3ea <_fflush_r+0x22>
 800c434:	0800d5e0 	.word	0x0800d5e0
 800c438:	0800d600 	.word	0x0800d600
 800c43c:	0800d5c0 	.word	0x0800d5c0

0800c440 <std>:
 800c440:	2300      	movs	r3, #0
 800c442:	b510      	push	{r4, lr}
 800c444:	4604      	mov	r4, r0
 800c446:	e9c0 3300 	strd	r3, r3, [r0]
 800c44a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c44e:	6083      	str	r3, [r0, #8]
 800c450:	8181      	strh	r1, [r0, #12]
 800c452:	6643      	str	r3, [r0, #100]	; 0x64
 800c454:	81c2      	strh	r2, [r0, #14]
 800c456:	6183      	str	r3, [r0, #24]
 800c458:	4619      	mov	r1, r3
 800c45a:	2208      	movs	r2, #8
 800c45c:	305c      	adds	r0, #92	; 0x5c
 800c45e:	f7fc fb9f 	bl	8008ba0 <memset>
 800c462:	4b05      	ldr	r3, [pc, #20]	; (800c478 <std+0x38>)
 800c464:	6263      	str	r3, [r4, #36]	; 0x24
 800c466:	4b05      	ldr	r3, [pc, #20]	; (800c47c <std+0x3c>)
 800c468:	62a3      	str	r3, [r4, #40]	; 0x28
 800c46a:	4b05      	ldr	r3, [pc, #20]	; (800c480 <std+0x40>)
 800c46c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c46e:	4b05      	ldr	r3, [pc, #20]	; (800c484 <std+0x44>)
 800c470:	6224      	str	r4, [r4, #32]
 800c472:	6323      	str	r3, [r4, #48]	; 0x30
 800c474:	bd10      	pop	{r4, pc}
 800c476:	bf00      	nop
 800c478:	0800c785 	.word	0x0800c785
 800c47c:	0800c7a7 	.word	0x0800c7a7
 800c480:	0800c7df 	.word	0x0800c7df
 800c484:	0800c803 	.word	0x0800c803

0800c488 <_cleanup_r>:
 800c488:	4901      	ldr	r1, [pc, #4]	; (800c490 <_cleanup_r+0x8>)
 800c48a:	f000 b8af 	b.w	800c5ec <_fwalk_reent>
 800c48e:	bf00      	nop
 800c490:	0800c3c9 	.word	0x0800c3c9

0800c494 <__sfmoreglue>:
 800c494:	b570      	push	{r4, r5, r6, lr}
 800c496:	2268      	movs	r2, #104	; 0x68
 800c498:	1e4d      	subs	r5, r1, #1
 800c49a:	4355      	muls	r5, r2
 800c49c:	460e      	mov	r6, r1
 800c49e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4a2:	f7fe fb95 	bl	800abd0 <_malloc_r>
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	b140      	cbz	r0, 800c4bc <__sfmoreglue+0x28>
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	e9c0 1600 	strd	r1, r6, [r0]
 800c4b0:	300c      	adds	r0, #12
 800c4b2:	60a0      	str	r0, [r4, #8]
 800c4b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4b8:	f7fc fb72 	bl	8008ba0 <memset>
 800c4bc:	4620      	mov	r0, r4
 800c4be:	bd70      	pop	{r4, r5, r6, pc}

0800c4c0 <__sfp_lock_acquire>:
 800c4c0:	4801      	ldr	r0, [pc, #4]	; (800c4c8 <__sfp_lock_acquire+0x8>)
 800c4c2:	f000 b8b3 	b.w	800c62c <__retarget_lock_acquire_recursive>
 800c4c6:	bf00      	nop
 800c4c8:	200009a1 	.word	0x200009a1

0800c4cc <__sfp_lock_release>:
 800c4cc:	4801      	ldr	r0, [pc, #4]	; (800c4d4 <__sfp_lock_release+0x8>)
 800c4ce:	f000 b8ae 	b.w	800c62e <__retarget_lock_release_recursive>
 800c4d2:	bf00      	nop
 800c4d4:	200009a1 	.word	0x200009a1

0800c4d8 <__sinit_lock_acquire>:
 800c4d8:	4801      	ldr	r0, [pc, #4]	; (800c4e0 <__sinit_lock_acquire+0x8>)
 800c4da:	f000 b8a7 	b.w	800c62c <__retarget_lock_acquire_recursive>
 800c4de:	bf00      	nop
 800c4e0:	200009a2 	.word	0x200009a2

0800c4e4 <__sinit_lock_release>:
 800c4e4:	4801      	ldr	r0, [pc, #4]	; (800c4ec <__sinit_lock_release+0x8>)
 800c4e6:	f000 b8a2 	b.w	800c62e <__retarget_lock_release_recursive>
 800c4ea:	bf00      	nop
 800c4ec:	200009a2 	.word	0x200009a2

0800c4f0 <__sinit>:
 800c4f0:	b510      	push	{r4, lr}
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	f7ff fff0 	bl	800c4d8 <__sinit_lock_acquire>
 800c4f8:	69a3      	ldr	r3, [r4, #24]
 800c4fa:	b11b      	cbz	r3, 800c504 <__sinit+0x14>
 800c4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c500:	f7ff bff0 	b.w	800c4e4 <__sinit_lock_release>
 800c504:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c508:	6523      	str	r3, [r4, #80]	; 0x50
 800c50a:	4b13      	ldr	r3, [pc, #76]	; (800c558 <__sinit+0x68>)
 800c50c:	4a13      	ldr	r2, [pc, #76]	; (800c55c <__sinit+0x6c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	62a2      	str	r2, [r4, #40]	; 0x28
 800c512:	42a3      	cmp	r3, r4
 800c514:	bf04      	itt	eq
 800c516:	2301      	moveq	r3, #1
 800c518:	61a3      	streq	r3, [r4, #24]
 800c51a:	4620      	mov	r0, r4
 800c51c:	f000 f820 	bl	800c560 <__sfp>
 800c520:	6060      	str	r0, [r4, #4]
 800c522:	4620      	mov	r0, r4
 800c524:	f000 f81c 	bl	800c560 <__sfp>
 800c528:	60a0      	str	r0, [r4, #8]
 800c52a:	4620      	mov	r0, r4
 800c52c:	f000 f818 	bl	800c560 <__sfp>
 800c530:	2200      	movs	r2, #0
 800c532:	60e0      	str	r0, [r4, #12]
 800c534:	2104      	movs	r1, #4
 800c536:	6860      	ldr	r0, [r4, #4]
 800c538:	f7ff ff82 	bl	800c440 <std>
 800c53c:	68a0      	ldr	r0, [r4, #8]
 800c53e:	2201      	movs	r2, #1
 800c540:	2109      	movs	r1, #9
 800c542:	f7ff ff7d 	bl	800c440 <std>
 800c546:	68e0      	ldr	r0, [r4, #12]
 800c548:	2202      	movs	r2, #2
 800c54a:	2112      	movs	r1, #18
 800c54c:	f7ff ff78 	bl	800c440 <std>
 800c550:	2301      	movs	r3, #1
 800c552:	61a3      	str	r3, [r4, #24]
 800c554:	e7d2      	b.n	800c4fc <__sinit+0xc>
 800c556:	bf00      	nop
 800c558:	0800d18c 	.word	0x0800d18c
 800c55c:	0800c489 	.word	0x0800c489

0800c560 <__sfp>:
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c562:	4607      	mov	r7, r0
 800c564:	f7ff ffac 	bl	800c4c0 <__sfp_lock_acquire>
 800c568:	4b1e      	ldr	r3, [pc, #120]	; (800c5e4 <__sfp+0x84>)
 800c56a:	681e      	ldr	r6, [r3, #0]
 800c56c:	69b3      	ldr	r3, [r6, #24]
 800c56e:	b913      	cbnz	r3, 800c576 <__sfp+0x16>
 800c570:	4630      	mov	r0, r6
 800c572:	f7ff ffbd 	bl	800c4f0 <__sinit>
 800c576:	3648      	adds	r6, #72	; 0x48
 800c578:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	d503      	bpl.n	800c588 <__sfp+0x28>
 800c580:	6833      	ldr	r3, [r6, #0]
 800c582:	b30b      	cbz	r3, 800c5c8 <__sfp+0x68>
 800c584:	6836      	ldr	r6, [r6, #0]
 800c586:	e7f7      	b.n	800c578 <__sfp+0x18>
 800c588:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c58c:	b9d5      	cbnz	r5, 800c5c4 <__sfp+0x64>
 800c58e:	4b16      	ldr	r3, [pc, #88]	; (800c5e8 <__sfp+0x88>)
 800c590:	60e3      	str	r3, [r4, #12]
 800c592:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c596:	6665      	str	r5, [r4, #100]	; 0x64
 800c598:	f000 f847 	bl	800c62a <__retarget_lock_init_recursive>
 800c59c:	f7ff ff96 	bl	800c4cc <__sfp_lock_release>
 800c5a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c5a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5a8:	6025      	str	r5, [r4, #0]
 800c5aa:	61a5      	str	r5, [r4, #24]
 800c5ac:	2208      	movs	r2, #8
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5b4:	f7fc faf4 	bl	8008ba0 <memset>
 800c5b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5c4:	3468      	adds	r4, #104	; 0x68
 800c5c6:	e7d9      	b.n	800c57c <__sfp+0x1c>
 800c5c8:	2104      	movs	r1, #4
 800c5ca:	4638      	mov	r0, r7
 800c5cc:	f7ff ff62 	bl	800c494 <__sfmoreglue>
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	6030      	str	r0, [r6, #0]
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d1d5      	bne.n	800c584 <__sfp+0x24>
 800c5d8:	f7ff ff78 	bl	800c4cc <__sfp_lock_release>
 800c5dc:	230c      	movs	r3, #12
 800c5de:	603b      	str	r3, [r7, #0]
 800c5e0:	e7ee      	b.n	800c5c0 <__sfp+0x60>
 800c5e2:	bf00      	nop
 800c5e4:	0800d18c 	.word	0x0800d18c
 800c5e8:	ffff0001 	.word	0xffff0001

0800c5ec <_fwalk_reent>:
 800c5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	4688      	mov	r8, r1
 800c5f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5f8:	2700      	movs	r7, #0
 800c5fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5fe:	f1b9 0901 	subs.w	r9, r9, #1
 800c602:	d505      	bpl.n	800c610 <_fwalk_reent+0x24>
 800c604:	6824      	ldr	r4, [r4, #0]
 800c606:	2c00      	cmp	r4, #0
 800c608:	d1f7      	bne.n	800c5fa <_fwalk_reent+0xe>
 800c60a:	4638      	mov	r0, r7
 800c60c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c610:	89ab      	ldrh	r3, [r5, #12]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d907      	bls.n	800c626 <_fwalk_reent+0x3a>
 800c616:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c61a:	3301      	adds	r3, #1
 800c61c:	d003      	beq.n	800c626 <_fwalk_reent+0x3a>
 800c61e:	4629      	mov	r1, r5
 800c620:	4630      	mov	r0, r6
 800c622:	47c0      	blx	r8
 800c624:	4307      	orrs	r7, r0
 800c626:	3568      	adds	r5, #104	; 0x68
 800c628:	e7e9      	b.n	800c5fe <_fwalk_reent+0x12>

0800c62a <__retarget_lock_init_recursive>:
 800c62a:	4770      	bx	lr

0800c62c <__retarget_lock_acquire_recursive>:
 800c62c:	4770      	bx	lr

0800c62e <__retarget_lock_release_recursive>:
 800c62e:	4770      	bx	lr

0800c630 <__swhatbuf_r>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	460e      	mov	r6, r1
 800c634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c638:	2900      	cmp	r1, #0
 800c63a:	b096      	sub	sp, #88	; 0x58
 800c63c:	4614      	mov	r4, r2
 800c63e:	461d      	mov	r5, r3
 800c640:	da08      	bge.n	800c654 <__swhatbuf_r+0x24>
 800c642:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	602a      	str	r2, [r5, #0]
 800c64a:	061a      	lsls	r2, r3, #24
 800c64c:	d410      	bmi.n	800c670 <__swhatbuf_r+0x40>
 800c64e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c652:	e00e      	b.n	800c672 <__swhatbuf_r+0x42>
 800c654:	466a      	mov	r2, sp
 800c656:	f000 f8fb 	bl	800c850 <_fstat_r>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	dbf1      	blt.n	800c642 <__swhatbuf_r+0x12>
 800c65e:	9a01      	ldr	r2, [sp, #4]
 800c660:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c664:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c668:	425a      	negs	r2, r3
 800c66a:	415a      	adcs	r2, r3
 800c66c:	602a      	str	r2, [r5, #0]
 800c66e:	e7ee      	b.n	800c64e <__swhatbuf_r+0x1e>
 800c670:	2340      	movs	r3, #64	; 0x40
 800c672:	2000      	movs	r0, #0
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	b016      	add	sp, #88	; 0x58
 800c678:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c67c <__smakebuf_r>:
 800c67c:	898b      	ldrh	r3, [r1, #12]
 800c67e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c680:	079d      	lsls	r5, r3, #30
 800c682:	4606      	mov	r6, r0
 800c684:	460c      	mov	r4, r1
 800c686:	d507      	bpl.n	800c698 <__smakebuf_r+0x1c>
 800c688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	6123      	str	r3, [r4, #16]
 800c690:	2301      	movs	r3, #1
 800c692:	6163      	str	r3, [r4, #20]
 800c694:	b002      	add	sp, #8
 800c696:	bd70      	pop	{r4, r5, r6, pc}
 800c698:	ab01      	add	r3, sp, #4
 800c69a:	466a      	mov	r2, sp
 800c69c:	f7ff ffc8 	bl	800c630 <__swhatbuf_r>
 800c6a0:	9900      	ldr	r1, [sp, #0]
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	f7fe fa93 	bl	800abd0 <_malloc_r>
 800c6aa:	b948      	cbnz	r0, 800c6c0 <__smakebuf_r+0x44>
 800c6ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6b0:	059a      	lsls	r2, r3, #22
 800c6b2:	d4ef      	bmi.n	800c694 <__smakebuf_r+0x18>
 800c6b4:	f023 0303 	bic.w	r3, r3, #3
 800c6b8:	f043 0302 	orr.w	r3, r3, #2
 800c6bc:	81a3      	strh	r3, [r4, #12]
 800c6be:	e7e3      	b.n	800c688 <__smakebuf_r+0xc>
 800c6c0:	4b0d      	ldr	r3, [pc, #52]	; (800c6f8 <__smakebuf_r+0x7c>)
 800c6c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	6020      	str	r0, [r4, #0]
 800c6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6cc:	81a3      	strh	r3, [r4, #12]
 800c6ce:	9b00      	ldr	r3, [sp, #0]
 800c6d0:	6163      	str	r3, [r4, #20]
 800c6d2:	9b01      	ldr	r3, [sp, #4]
 800c6d4:	6120      	str	r0, [r4, #16]
 800c6d6:	b15b      	cbz	r3, 800c6f0 <__smakebuf_r+0x74>
 800c6d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f000 f8c9 	bl	800c874 <_isatty_r>
 800c6e2:	b128      	cbz	r0, 800c6f0 <__smakebuf_r+0x74>
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	f023 0303 	bic.w	r3, r3, #3
 800c6ea:	f043 0301 	orr.w	r3, r3, #1
 800c6ee:	81a3      	strh	r3, [r4, #12]
 800c6f0:	89a0      	ldrh	r0, [r4, #12]
 800c6f2:	4305      	orrs	r5, r0
 800c6f4:	81a5      	strh	r5, [r4, #12]
 800c6f6:	e7cd      	b.n	800c694 <__smakebuf_r+0x18>
 800c6f8:	0800c489 	.word	0x0800c489

0800c6fc <_raise_r>:
 800c6fc:	291f      	cmp	r1, #31
 800c6fe:	b538      	push	{r3, r4, r5, lr}
 800c700:	4604      	mov	r4, r0
 800c702:	460d      	mov	r5, r1
 800c704:	d904      	bls.n	800c710 <_raise_r+0x14>
 800c706:	2316      	movs	r3, #22
 800c708:	6003      	str	r3, [r0, #0]
 800c70a:	f04f 30ff 	mov.w	r0, #4294967295
 800c70e:	bd38      	pop	{r3, r4, r5, pc}
 800c710:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c712:	b112      	cbz	r2, 800c71a <_raise_r+0x1e>
 800c714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c718:	b94b      	cbnz	r3, 800c72e <_raise_r+0x32>
 800c71a:	4620      	mov	r0, r4
 800c71c:	f000 f830 	bl	800c780 <_getpid_r>
 800c720:	462a      	mov	r2, r5
 800c722:	4601      	mov	r1, r0
 800c724:	4620      	mov	r0, r4
 800c726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c72a:	f000 b817 	b.w	800c75c <_kill_r>
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d00a      	beq.n	800c748 <_raise_r+0x4c>
 800c732:	1c59      	adds	r1, r3, #1
 800c734:	d103      	bne.n	800c73e <_raise_r+0x42>
 800c736:	2316      	movs	r3, #22
 800c738:	6003      	str	r3, [r0, #0]
 800c73a:	2001      	movs	r0, #1
 800c73c:	e7e7      	b.n	800c70e <_raise_r+0x12>
 800c73e:	2400      	movs	r4, #0
 800c740:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c744:	4628      	mov	r0, r5
 800c746:	4798      	blx	r3
 800c748:	2000      	movs	r0, #0
 800c74a:	e7e0      	b.n	800c70e <_raise_r+0x12>

0800c74c <raise>:
 800c74c:	4b02      	ldr	r3, [pc, #8]	; (800c758 <raise+0xc>)
 800c74e:	4601      	mov	r1, r0
 800c750:	6818      	ldr	r0, [r3, #0]
 800c752:	f7ff bfd3 	b.w	800c6fc <_raise_r>
 800c756:	bf00      	nop
 800c758:	2000001c 	.word	0x2000001c

0800c75c <_kill_r>:
 800c75c:	b538      	push	{r3, r4, r5, lr}
 800c75e:	4d07      	ldr	r5, [pc, #28]	; (800c77c <_kill_r+0x20>)
 800c760:	2300      	movs	r3, #0
 800c762:	4604      	mov	r4, r0
 800c764:	4608      	mov	r0, r1
 800c766:	4611      	mov	r1, r2
 800c768:	602b      	str	r3, [r5, #0]
 800c76a:	f7f6 f829 	bl	80027c0 <_kill>
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	d102      	bne.n	800c778 <_kill_r+0x1c>
 800c772:	682b      	ldr	r3, [r5, #0]
 800c774:	b103      	cbz	r3, 800c778 <_kill_r+0x1c>
 800c776:	6023      	str	r3, [r4, #0]
 800c778:	bd38      	pop	{r3, r4, r5, pc}
 800c77a:	bf00      	nop
 800c77c:	2000099c 	.word	0x2000099c

0800c780 <_getpid_r>:
 800c780:	f7f6 b816 	b.w	80027b0 <_getpid>

0800c784 <__sread>:
 800c784:	b510      	push	{r4, lr}
 800c786:	460c      	mov	r4, r1
 800c788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c78c:	f000 f894 	bl	800c8b8 <_read_r>
 800c790:	2800      	cmp	r0, #0
 800c792:	bfab      	itete	ge
 800c794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c796:	89a3      	ldrhlt	r3, [r4, #12]
 800c798:	181b      	addge	r3, r3, r0
 800c79a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c79e:	bfac      	ite	ge
 800c7a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7a2:	81a3      	strhlt	r3, [r4, #12]
 800c7a4:	bd10      	pop	{r4, pc}

0800c7a6 <__swrite>:
 800c7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7aa:	461f      	mov	r7, r3
 800c7ac:	898b      	ldrh	r3, [r1, #12]
 800c7ae:	05db      	lsls	r3, r3, #23
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	d505      	bpl.n	800c7c4 <__swrite+0x1e>
 800c7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7bc:	2302      	movs	r3, #2
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f000 f868 	bl	800c894 <_lseek_r>
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7ce:	81a3      	strh	r3, [r4, #12]
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	463b      	mov	r3, r7
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7da:	f000 b817 	b.w	800c80c <_write_r>

0800c7de <__sseek>:
 800c7de:	b510      	push	{r4, lr}
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e6:	f000 f855 	bl	800c894 <_lseek_r>
 800c7ea:	1c43      	adds	r3, r0, #1
 800c7ec:	89a3      	ldrh	r3, [r4, #12]
 800c7ee:	bf15      	itete	ne
 800c7f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7fa:	81a3      	strheq	r3, [r4, #12]
 800c7fc:	bf18      	it	ne
 800c7fe:	81a3      	strhne	r3, [r4, #12]
 800c800:	bd10      	pop	{r4, pc}

0800c802 <__sclose>:
 800c802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c806:	f000 b813 	b.w	800c830 <_close_r>
	...

0800c80c <_write_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d07      	ldr	r5, [pc, #28]	; (800c82c <_write_r+0x20>)
 800c810:	4604      	mov	r4, r0
 800c812:	4608      	mov	r0, r1
 800c814:	4611      	mov	r1, r2
 800c816:	2200      	movs	r2, #0
 800c818:	602a      	str	r2, [r5, #0]
 800c81a:	461a      	mov	r2, r3
 800c81c:	f7f6 f807 	bl	800282e <_write>
 800c820:	1c43      	adds	r3, r0, #1
 800c822:	d102      	bne.n	800c82a <_write_r+0x1e>
 800c824:	682b      	ldr	r3, [r5, #0]
 800c826:	b103      	cbz	r3, 800c82a <_write_r+0x1e>
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	bd38      	pop	{r3, r4, r5, pc}
 800c82c:	2000099c 	.word	0x2000099c

0800c830 <_close_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4d06      	ldr	r5, [pc, #24]	; (800c84c <_close_r+0x1c>)
 800c834:	2300      	movs	r3, #0
 800c836:	4604      	mov	r4, r0
 800c838:	4608      	mov	r0, r1
 800c83a:	602b      	str	r3, [r5, #0]
 800c83c:	f7f6 f813 	bl	8002866 <_close>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d102      	bne.n	800c84a <_close_r+0x1a>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	b103      	cbz	r3, 800c84a <_close_r+0x1a>
 800c848:	6023      	str	r3, [r4, #0]
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	2000099c 	.word	0x2000099c

0800c850 <_fstat_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d07      	ldr	r5, [pc, #28]	; (800c870 <_fstat_r+0x20>)
 800c854:	2300      	movs	r3, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	4611      	mov	r1, r2
 800c85c:	602b      	str	r3, [r5, #0]
 800c85e:	f7f6 f80e 	bl	800287e <_fstat>
 800c862:	1c43      	adds	r3, r0, #1
 800c864:	d102      	bne.n	800c86c <_fstat_r+0x1c>
 800c866:	682b      	ldr	r3, [r5, #0]
 800c868:	b103      	cbz	r3, 800c86c <_fstat_r+0x1c>
 800c86a:	6023      	str	r3, [r4, #0]
 800c86c:	bd38      	pop	{r3, r4, r5, pc}
 800c86e:	bf00      	nop
 800c870:	2000099c 	.word	0x2000099c

0800c874 <_isatty_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	4d06      	ldr	r5, [pc, #24]	; (800c890 <_isatty_r+0x1c>)
 800c878:	2300      	movs	r3, #0
 800c87a:	4604      	mov	r4, r0
 800c87c:	4608      	mov	r0, r1
 800c87e:	602b      	str	r3, [r5, #0]
 800c880:	f7f6 f80d 	bl	800289e <_isatty>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_isatty_r+0x1a>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_isatty_r+0x1a>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	2000099c 	.word	0x2000099c

0800c894 <_lseek_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4d07      	ldr	r5, [pc, #28]	; (800c8b4 <_lseek_r+0x20>)
 800c898:	4604      	mov	r4, r0
 800c89a:	4608      	mov	r0, r1
 800c89c:	4611      	mov	r1, r2
 800c89e:	2200      	movs	r2, #0
 800c8a0:	602a      	str	r2, [r5, #0]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	f7f6 f806 	bl	80028b4 <_lseek>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d102      	bne.n	800c8b2 <_lseek_r+0x1e>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b103      	cbz	r3, 800c8b2 <_lseek_r+0x1e>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	2000099c 	.word	0x2000099c

0800c8b8 <_read_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d07      	ldr	r5, [pc, #28]	; (800c8d8 <_read_r+0x20>)
 800c8bc:	4604      	mov	r4, r0
 800c8be:	4608      	mov	r0, r1
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	602a      	str	r2, [r5, #0]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f7f5 ff94 	bl	80027f4 <_read>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d102      	bne.n	800c8d6 <_read_r+0x1e>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	b103      	cbz	r3, 800c8d6 <_read_r+0x1e>
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	2000099c 	.word	0x2000099c

0800c8dc <round>:
 800c8dc:	ec51 0b10 	vmov	r0, r1, d0
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c8e6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c8ea:	2c13      	cmp	r4, #19
 800c8ec:	ee10 2a10 	vmov	r2, s0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	dc19      	bgt.n	800c928 <round+0x4c>
 800c8f4:	2c00      	cmp	r4, #0
 800c8f6:	da09      	bge.n	800c90c <round+0x30>
 800c8f8:	3401      	adds	r4, #1
 800c8fa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c8fe:	d103      	bne.n	800c908 <round+0x2c>
 800c900:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c904:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c908:	2200      	movs	r2, #0
 800c90a:	e028      	b.n	800c95e <round+0x82>
 800c90c:	4d15      	ldr	r5, [pc, #84]	; (800c964 <round+0x88>)
 800c90e:	4125      	asrs	r5, r4
 800c910:	ea01 0605 	and.w	r6, r1, r5
 800c914:	4332      	orrs	r2, r6
 800c916:	d00e      	beq.n	800c936 <round+0x5a>
 800c918:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c91c:	fa42 f404 	asr.w	r4, r2, r4
 800c920:	4423      	add	r3, r4
 800c922:	ea23 0305 	bic.w	r3, r3, r5
 800c926:	e7ef      	b.n	800c908 <round+0x2c>
 800c928:	2c33      	cmp	r4, #51	; 0x33
 800c92a:	dd07      	ble.n	800c93c <round+0x60>
 800c92c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c930:	d101      	bne.n	800c936 <round+0x5a>
 800c932:	f7f3 fccb 	bl	80002cc <__adddf3>
 800c936:	ec41 0b10 	vmov	d0, r0, r1
 800c93a:	bd70      	pop	{r4, r5, r6, pc}
 800c93c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c940:	f04f 35ff 	mov.w	r5, #4294967295
 800c944:	40f5      	lsrs	r5, r6
 800c946:	4228      	tst	r0, r5
 800c948:	d0f5      	beq.n	800c936 <round+0x5a>
 800c94a:	2101      	movs	r1, #1
 800c94c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c950:	fa01 f404 	lsl.w	r4, r1, r4
 800c954:	1912      	adds	r2, r2, r4
 800c956:	bf28      	it	cs
 800c958:	185b      	addcs	r3, r3, r1
 800c95a:	ea22 0205 	bic.w	r2, r2, r5
 800c95e:	4619      	mov	r1, r3
 800c960:	4610      	mov	r0, r2
 800c962:	e7e8      	b.n	800c936 <round+0x5a>
 800c964:	000fffff 	.word	0x000fffff

0800c968 <_init>:
 800c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96a:	bf00      	nop
 800c96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c96e:	bc08      	pop	{r3}
 800c970:	469e      	mov	lr, r3
 800c972:	4770      	bx	lr

0800c974 <_fini>:
 800c974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c976:	bf00      	nop
 800c978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c97a:	bc08      	pop	{r3}
 800c97c:	469e      	mov	lr, r3
 800c97e:	4770      	bx	lr
