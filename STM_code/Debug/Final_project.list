
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c790  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb0  0800c960  0800c960  0001c960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d610  0800d610  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d610  0800d610  0001d610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d618  0800d618  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d618  0800d618  0001d618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d61c  0800d61c  0001d61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  200001f0  0800d810  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800d810  00020964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8df  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c2f  00000000  00000000  0003baff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  00040c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293a3  00000000  00000000  00041fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b905  00000000  00000000  0006b343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fae55  00000000  00000000  00086c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c9  00000000  00000000  00181a9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b00  00000000  00000000  00181b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c948 	.word	0x0800c948

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c948 	.word	0x0800c948

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b9aa 	b.w	8001008 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f83c 	bl	8000d38 <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_d2lz>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	f7ff ff21 	bl	8000b1c <__aeabi_dcmplt>
 8000cda:	b928      	cbnz	r0, 8000ce8 <__aeabi_d2lz+0x1c>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce4:	f000 b80a 	b.w	8000cfc <__aeabi_d2ulz>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cee:	f000 f805 	bl	8000cfc <__aeabi_d2ulz>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop

08000cfc <__aeabi_d2ulz>:
 8000cfc:	b5d0      	push	{r4, r6, r7, lr}
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__aeabi_d2ulz+0x34>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	4606      	mov	r6, r0
 8000d04:	460f      	mov	r7, r1
 8000d06:	f7ff fc97 	bl	8000638 <__aeabi_dmul>
 8000d0a:	f7ff ff57 	bl	8000bbc <__aeabi_d2uiz>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fc18 	bl	8000544 <__aeabi_ui2d>
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <__aeabi_d2ulz+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f7ff fc8e 	bl	8000638 <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f7ff fad0 	bl	80002c8 <__aeabi_dsub>
 8000d28:	f7ff ff48 	bl	8000bbc <__aeabi_d2uiz>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d30:	3df00000 	.word	0x3df00000
 8000d34:	41f00000 	.word	0x41f00000

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	4604      	mov	r4, r0
 8000d40:	468e      	mov	lr, r1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d14d      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d46:	428a      	cmp	r2, r1
 8000d48:	4694      	mov	ip, r2
 8000d4a:	d969      	bls.n	8000e20 <__udivmoddi4+0xe8>
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	b152      	cbz	r2, 8000d68 <__udivmoddi4+0x30>
 8000d52:	fa01 f302 	lsl.w	r3, r1, r2
 8000d56:	f1c2 0120 	rsb	r1, r2, #32
 8000d5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d62:	ea41 0e03 	orr.w	lr, r1, r3
 8000d66:	4094      	lsls	r4, r2
 8000d68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d6c:	0c21      	lsrs	r1, r4, #16
 8000d6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d72:	fa1f f78c 	uxth.w	r7, ip
 8000d76:	fb08 e316 	mls	r3, r8, r6, lr
 8000d7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7e:	fb06 f107 	mul.w	r1, r6, r7
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8e:	f080 811f 	bcs.w	8000fd0 <__udivmoddi4+0x298>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 811c 	bls.w	8000fd0 <__udivmoddi4+0x298>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dac:	fb00 f707 	mul.w	r7, r0, r7
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x92>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	f080 810a 	bcs.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc0:	42a7      	cmp	r7, r4
 8000dc2:	f240 8107 	bls.w	8000fd4 <__udivmoddi4+0x29c>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dce:	1be4      	subs	r4, r4, r7
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	b11d      	cbz	r5, 8000ddc <__udivmoddi4+0xa4>
 8000dd4:	40d4      	lsrs	r4, r2
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0xc2>
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	f000 80ef 	beq.w	8000fca <__udivmoddi4+0x292>
 8000dec:	2600      	movs	r6, #0
 8000dee:	e9c5 0100 	strd	r0, r1, [r5]
 8000df2:	4630      	mov	r0, r6
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	fab3 f683 	clz	r6, r3
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	d14a      	bne.n	8000e98 <__udivmoddi4+0x160>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xd4>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 80f9 	bhi.w	8000ffe <__udivmoddi4+0x2c6>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	469e      	mov	lr, r3
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e0      	beq.n	8000ddc <__udivmoddi4+0xa4>
 8000e1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1e:	e7dd      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000e20:	b902      	cbnz	r2, 8000e24 <__udivmoddi4+0xec>
 8000e22:	deff      	udf	#255	; 0xff
 8000e24:	fab2 f282 	clz	r2, r2
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	f040 8092 	bne.w	8000f52 <__udivmoddi4+0x21a>
 8000e2e:	eba1 010c 	sub.w	r1, r1, ip
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	2601      	movs	r6, #1
 8000e3c:	0c20      	lsrs	r0, r4, #16
 8000e3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e42:	fb07 1113 	mls	r1, r7, r3, r1
 8000e46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4a:	fb0e f003 	mul.w	r0, lr, r3
 8000e4e:	4288      	cmp	r0, r1
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x12c>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x12a>
 8000e5c:	4288      	cmp	r0, r1
 8000e5e:	f200 80cb 	bhi.w	8000ff8 <__udivmoddi4+0x2c0>
 8000e62:	4643      	mov	r3, r8
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e74:	fb0e fe00 	mul.w	lr, lr, r0
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x156>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e84:	d202      	bcs.n	8000e8c <__udivmoddi4+0x154>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f200 80bb 	bhi.w	8001002 <__udivmoddi4+0x2ca>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	eba4 040e 	sub.w	r4, r4, lr
 8000e92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e96:	e79c      	b.n	8000dd2 <__udivmoddi4+0x9a>
 8000e98:	f1c6 0720 	rsb	r7, r6, #32
 8000e9c:	40b3      	lsls	r3, r6
 8000e9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000eae:	431c      	orrs	r4, r3
 8000eb0:	40f9      	lsrs	r1, r7
 8000eb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ebe:	0c20      	lsrs	r0, r4, #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed6:	d90b      	bls.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee0:	f080 8088 	bcs.w	8000ff4 <__udivmoddi4+0x2bc>
 8000ee4:	4288      	cmp	r0, r1
 8000ee6:	f240 8085 	bls.w	8000ff4 <__udivmoddi4+0x2bc>
 8000eea:	f1a8 0802 	sub.w	r8, r8, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef8:	fb09 1110 	mls	r1, r9, r0, r1
 8000efc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f04:	458e      	cmp	lr, r1
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x1e2>
 8000f08:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f10:	d26c      	bcs.n	8000fec <__udivmoddi4+0x2b4>
 8000f12:	458e      	cmp	lr, r1
 8000f14:	d96a      	bls.n	8000fec <__udivmoddi4+0x2b4>
 8000f16:	3802      	subs	r0, #2
 8000f18:	4461      	add	r1, ip
 8000f1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f22:	eba1 010e 	sub.w	r1, r1, lr
 8000f26:	42a1      	cmp	r1, r4
 8000f28:	46c8      	mov	r8, r9
 8000f2a:	46a6      	mov	lr, r4
 8000f2c:	d356      	bcc.n	8000fdc <__udivmoddi4+0x2a4>
 8000f2e:	d053      	beq.n	8000fd8 <__udivmoddi4+0x2a0>
 8000f30:	b15d      	cbz	r5, 8000f4a <__udivmoddi4+0x212>
 8000f32:	ebb3 0208 	subs.w	r2, r3, r8
 8000f36:	eb61 010e 	sbc.w	r1, r1, lr
 8000f3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f42:	40f1      	lsrs	r1, r6
 8000f44:	431f      	orrs	r7, r3
 8000f46:	e9c5 7100 	strd	r7, r1, [r5]
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	f1c2 0320 	rsb	r3, r2, #32
 8000f56:	40d8      	lsrs	r0, r3
 8000f58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f60:	4091      	lsls	r1, r2
 8000f62:	4301      	orrs	r1, r0
 8000f64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f68:	fa1f fe8c 	uxth.w	lr, ip
 8000f6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f70:	fb07 3610 	mls	r6, r7, r0, r3
 8000f74:	0c0b      	lsrs	r3, r1, #16
 8000f76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7e:	429e      	cmp	r6, r3
 8000f80:	fa04 f402 	lsl.w	r4, r4, r2
 8000f84:	d908      	bls.n	8000f98 <__udivmoddi4+0x260>
 8000f86:	eb1c 0303 	adds.w	r3, ip, r3
 8000f8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8e:	d22f      	bcs.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f90:	429e      	cmp	r6, r3
 8000f92:	d92d      	bls.n	8000ff0 <__udivmoddi4+0x2b8>
 8000f94:	3802      	subs	r0, #2
 8000f96:	4463      	add	r3, ip
 8000f98:	1b9b      	subs	r3, r3, r6
 8000f9a:	b289      	uxth	r1, r1
 8000f9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fa0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fac:	428b      	cmp	r3, r1
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x28a>
 8000fb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb8:	d216      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	d914      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000fbe:	3e02      	subs	r6, #2
 8000fc0:	4461      	add	r1, ip
 8000fc2:	1ac9      	subs	r1, r1, r3
 8000fc4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc8:	e738      	b.n	8000e3c <__udivmoddi4+0x104>
 8000fca:	462e      	mov	r6, r5
 8000fcc:	4628      	mov	r0, r5
 8000fce:	e705      	b.n	8000ddc <__udivmoddi4+0xa4>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	e6e3      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	e6f8      	b.n	8000dca <__udivmoddi4+0x92>
 8000fd8:	454b      	cmp	r3, r9
 8000fda:	d2a9      	bcs.n	8000f30 <__udivmoddi4+0x1f8>
 8000fdc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	e7a3      	b.n	8000f30 <__udivmoddi4+0x1f8>
 8000fe8:	4646      	mov	r6, r8
 8000fea:	e7ea      	b.n	8000fc2 <__udivmoddi4+0x28a>
 8000fec:	4620      	mov	r0, r4
 8000fee:	e794      	b.n	8000f1a <__udivmoddi4+0x1e2>
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	e7d1      	b.n	8000f98 <__udivmoddi4+0x260>
 8000ff4:	46d0      	mov	r8, sl
 8000ff6:	e77b      	b.n	8000ef0 <__udivmoddi4+0x1b8>
 8000ff8:	3b02      	subs	r3, #2
 8000ffa:	4461      	add	r1, ip
 8000ffc:	e732      	b.n	8000e64 <__udivmoddi4+0x12c>
 8000ffe:	4630      	mov	r0, r6
 8001000:	e709      	b.n	8000e16 <__udivmoddi4+0xde>
 8001002:	4464      	add	r4, ip
 8001004:	3802      	subs	r0, #2
 8001006:	e742      	b.n	8000e8e <__udivmoddi4+0x156>

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MCP9808_Init>:
 * write bit.
 *
 * @param hi2c A pointer to the I2C handler.
 * @param addr Address of MCP9808 on I2C bus (default 0x18).
 */
void MCP9808_Init(I2C_HandleTypeDef *hi2c, uint8_t addr) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
	mcp9808.hi2c = hi2c;
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <MCP9808_Init+0x30>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
	mcp9808.address = addr << 1;
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <MCP9808_Init+0x30>)
 8001026:	711a      	strb	r2, [r3, #4]
	mcp9808.resolution = MCP9808_VeryHigh_Res;
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <MCP9808_Init+0x30>)
 800102a:	2203      	movs	r2, #3
 800102c:	715a      	strb	r2, [r3, #5]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000020c 	.word	0x2000020c

08001040 <MCP9808_Write>:
 *
 * @param _reg Pointer to a register.
 * @param value The data on which to send.
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Write(MCP9808_REG_TypeDef *_reg, uint8_t *value) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	uint8_t reg[] = {*_reg, *value};
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	733b      	strb	r3, [r7, #12]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MCP9808_Write+0x40>)
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MCP9808_Write+0x40>)
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	b299      	uxth	r1, r3
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	f003 f886 	bl	800417c <HAL_I2C_Master_Transmit>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
			reg, sizeof(reg), HAL_MAX_DELAY);

	return res;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000020c 	.word	0x2000020c

08001084 <MCP9808_Read>:
 * @param _reg Pointer to a register.
 * @param buf A pointer to a buffer to store the response in.
 * @param buf_size The size of the buffer (n values).
 * @returns res HAL status code.
 */
static HAL_StatusTypeDef MCP9808_Read(MCP9808_REG_TypeDef *_reg, uint8_t *buf, uint8_t buf_size) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af02      	add	r7, sp, #8
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	71fb      	strb	r3, [r7, #7]

	uint8_t reg[1] = {*_reg};
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(mcp9808.hi2c, mcp9808.address,
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MCP9808_Read+0x70>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MCP9808_Read+0x70>)
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	f107 0214 	add.w	r2, r7, #20
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	f003 f865 	bl	800417c <HAL_I2C_Master_Transmit>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
			reg, sizeof(reg), HAL_MAX_DELAY);


	if(res != HAL_OK){
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MCP9808_Read+0x3c>
		return res;
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	e014      	b.n	80010ea <MCP9808_Read+0x66>
	}

	res = HAL_I2C_Master_Receive(mcp9808.hi2c, mcp9808.address, buf, buf_size, HAL_MAX_DELAY);
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MCP9808_Read+0x70>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MCP9808_Read+0x70>)
 80010c6:	791b      	ldrb	r3, [r3, #4]
 80010c8:	b299      	uxth	r1, r3
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	9200      	str	r2, [sp, #0]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	f003 f945 	bl	8004364 <HAL_I2C_Master_Receive>
 80010da:	4603      	mov	r3, r0
 80010dc:	75fb      	strb	r3, [r7, #23]

	if(res != HAL_OK){
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MCP9808_Read+0x64>
		return res;
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	e000      	b.n	80010ea <MCP9808_Read+0x66>
	}

	return res;
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000020c 	.word	0x2000020c

080010f8 <MCP9808_MeasureTemperature>:
 *
 * @param temperature A pointer to a temperature float to store a returned
 * value from.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_MeasureTemperature(float *temperature) {
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	MCP9808_REG_TypeDef reg = MCP9808_T_AMBIENT_REG;
 8001100:	2305      	movs	r3, #5
 8001102:	733b      	strb	r3, [r7, #12]
	uint8_t buf[2];
	HAL_StatusTypeDef res = MCP9808_Read(&reg, buf, sizeof(buf));
 8001104:	f107 0108 	add.w	r1, r7, #8
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2202      	movs	r2, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffb8 	bl	8001084 <MCP9808_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d162      	bne.n	80011e4 <MCP9808_MeasureTemperature+0xec>
		uint8_t upper = buf[0];
 800111e:	7a3b      	ldrb	r3, [r7, #8]
 8001120:	73bb      	strb	r3, [r7, #14]
		upper &= 0x1F;
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	73bb      	strb	r3, [r7, #14]
		uint8_t lower = buf[1];
 800112a:	7a7b      	ldrb	r3, [r7, #9]
 800112c:	737b      	strb	r3, [r7, #13]

		if((upper & 0x10) == 0x10) {
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b00      	cmp	r3, #0
 8001136:	d030      	beq.n	800119a <MCP9808_MeasureTemperature+0xa2>
			upper &= 0x0F;
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	73bb      	strb	r3, [r7, #14]
			*temperature = 256 - (upper * 16.0) + (lower / 16.0);
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa0e 	bl	8000564 <__aeabi_i2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 800114e:	f7ff fa73 	bl	8000638 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4926      	ldr	r1, [pc, #152]	; (80011f4 <MCP9808_MeasureTemperature+0xfc>)
 800115c:	f7ff f8b4 	bl	80002c8 <__aeabi_dsub>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	7b7b      	ldrb	r3, [r7, #13]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9fa 	bl	8000564 <__aeabi_i2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 8001176:	f7ff fb89 	bl	800088c <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f8a3 	bl	80002cc <__adddf3>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fd35 	bl	8000bfc <__aeabi_d2f>
 8001192:	4602      	mov	r2, r0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e024      	b.n	80011e4 <MCP9808_MeasureTemperature+0xec>
		} else {
			*temperature = (upper * 16.0) + (lower / 16.0);
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9e1 	bl	8000564 <__aeabi_i2d>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 80011a8:	f7ff fa46 	bl	8000638 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4614      	mov	r4, r2
 80011b2:	461d      	mov	r5, r3
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9d4 	bl	8000564 <__aeabi_i2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MCP9808_MeasureTemperature+0xf8>)
 80011c2:	f7ff fb63 	bl	800088c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f87d 	bl	80002cc <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fd0f 	bl	8000bfc <__aeabi_d2f>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	601a      	str	r2, [r3, #0]
		}
	}

	return res;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bdb0      	pop	{r4, r5, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40300000 	.word	0x40300000
 80011f4:	40700000 	.word	0x40700000

080011f8 <MCP9808_SetResolution>:
 * VeryHigh = 0.0625 (slowest 250 ms)
 *
 * @param resolution Desired resolution to switch to.
 * @returns res HAL status code.
 */
HAL_StatusTypeDef MCP9808_SetResolution(MCP9808_Resolution_TypeDef resolution) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]

	MCP9808_REG_TypeDef reg = MCP9808_RESOLUTION_REG;
 8001202:	2308      	movs	r3, #8
 8001204:	73bb      	strb	r3, [r7, #14]
	uint8_t value = resolution & 0x03;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef res = MCP9808_Write(&reg, &value);
 8001210:	f107 020d 	add.w	r2, r7, #13
 8001214:	f107 030e 	add.w	r3, r7, #14
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff10 	bl	8001040 <MCP9808_Write>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]

	if(res == HAL_OK) {
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <MCP9808_SetResolution+0x38>
		mcp9808.resolution = resolution;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <MCP9808_SetResolution+0x44>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	7153      	strb	r3, [r2, #5]
	}

	return res;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000020c 	.word	0x2000020c

08001240 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af04      	add	r7, sp, #16
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	2301      	movs	r3, #1
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	2200      	movs	r2, #0
 800126c:	2178      	movs	r1, #120	; 0x78
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <ssd1306_WriteCommand+0x2c>)
 8001270:	f003 f96e 	bl	8004550 <HAL_I2C_Mem_Write>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000664 	.word	0x20000664

08001280 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af04      	add	r7, sp, #16
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	f04f 32ff 	mov.w	r2, #4294967295
 8001292:	9202      	str	r2, [sp, #8]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	2178      	movs	r1, #120	; 0x78
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <ssd1306_WriteData+0x30>)
 80012a2:	f003 f955 	bl	8004550 <HAL_I2C_Mem_Write>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000664 	.word	0x20000664

080012b4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80012b8:	f7ff ffc2 	bl	8001240 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80012bc:	2064      	movs	r0, #100	; 0x64
 80012be:	f001 ff2d 	bl	800311c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f9da 	bl	800167c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80012c8:	2020      	movs	r0, #32
 80012ca:	f7ff ffc1 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ffbe 	bl	8001250 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012d4:	20b0      	movs	r0, #176	; 0xb0
 80012d6:	f7ff ffbb 	bl	8001250 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012da:	20c8      	movs	r0, #200	; 0xc8
 80012dc:	f7ff ffb8 	bl	8001250 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ffb5 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012e6:	2010      	movs	r0, #16
 80012e8:	f7ff ffb2 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012ec:	2040      	movs	r0, #64	; 0x40
 80012ee:	f7ff ffaf 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012f2:	20ff      	movs	r0, #255	; 0xff
 80012f4:	f000 f9ae 	bl	8001654 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012f8:	20a1      	movs	r0, #161	; 0xa1
 80012fa:	f7ff ffa9 	bl	8001250 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012fe:	20a6      	movs	r0, #166	; 0xa6
 8001300:	f7ff ffa6 	bl	8001250 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001304:	20a8      	movs	r0, #168	; 0xa8
 8001306:	f7ff ffa3 	bl	8001250 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800130a:	203f      	movs	r0, #63	; 0x3f
 800130c:	f7ff ffa0 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001310:	20a4      	movs	r0, #164	; 0xa4
 8001312:	f7ff ff9d 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001316:	20d3      	movs	r0, #211	; 0xd3
 8001318:	f7ff ff9a 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ff97 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001322:	20d5      	movs	r0, #213	; 0xd5
 8001324:	f7ff ff94 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001328:	20f0      	movs	r0, #240	; 0xf0
 800132a:	f7ff ff91 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800132e:	20d9      	movs	r0, #217	; 0xd9
 8001330:	f7ff ff8e 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001334:	2022      	movs	r0, #34	; 0x22
 8001336:	f7ff ff8b 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800133a:	20da      	movs	r0, #218	; 0xda
 800133c:	f7ff ff88 	bl	8001250 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001340:	2012      	movs	r0, #18
 8001342:	f7ff ff85 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001346:	20db      	movs	r0, #219	; 0xdb
 8001348:	f7ff ff82 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800134c:	2020      	movs	r0, #32
 800134e:	f7ff ff7f 	bl	8001250 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001352:	208d      	movs	r0, #141	; 0x8d
 8001354:	f7ff ff7c 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001358:	2014      	movs	r0, #20
 800135a:	f7ff ff79 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800135e:	2001      	movs	r0, #1
 8001360:	f000 f98c 	bl	800167c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f80f 	bl	8001388 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800136a:	f000 f831 	bl	80013d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <ssd1306_Init+0xd0>)
 8001370:	2200      	movs	r2, #0
 8001372:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <ssd1306_Init+0xd0>)
 8001376:	2200      	movs	r2, #0
 8001378:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800137a:	4b02      	ldr	r3, [pc, #8]	; (8001384 <ssd1306_Init+0xd0>)
 800137c:	2201      	movs	r2, #1
 800137e:	711a      	strb	r2, [r3, #4]
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000614 	.word	0x20000614

08001388 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e00d      	b.n	80013b4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <ssd1306_Fill+0x1a>
 800139e:	2100      	movs	r1, #0
 80013a0:	e000      	b.n	80013a4 <ssd1306_Fill+0x1c>
 80013a2:	21ff      	movs	r1, #255	; 0xff
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <ssd1306_Fill+0x44>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	460a      	mov	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d3ed      	bcc.n	8001398 <ssd1306_Fill+0x10>
    }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000214 	.word	0x20000214

080013d0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e016      	b.n	800140a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3b50      	subs	r3, #80	; 0x50
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff34 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff ff31 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013ee:	2010      	movs	r0, #16
 80013f0:	f7ff ff2e 	bl	8001250 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	01db      	lsls	r3, r3, #7
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <ssd1306_UpdateScreen+0x4c>)
 80013fa:	4413      	add	r3, r2
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff3e 	bl	8001280 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	3301      	adds	r3, #1
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b07      	cmp	r3, #7
 800140e:	d9e5      	bls.n	80013dc <ssd1306_UpdateScreen+0xc>
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000214 	.word	0x20000214

08001420 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	460b      	mov	r3, r1
 800142c:	71bb      	strb	r3, [r7, #6]
 800142e:	4613      	mov	r3, r2
 8001430:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db3d      	blt.n	80014b6 <ssd1306_DrawPixel+0x96>
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	2b3f      	cmp	r3, #63	; 0x3f
 800143e:	d83a      	bhi.n	80014b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001440:	797b      	ldrb	r3, [r7, #5]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d11a      	bne.n	800147c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	4603      	mov	r3, r0
 8001450:	01db      	lsls	r3, r3, #7
 8001452:	4413      	add	r3, r2
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	b25a      	sxtb	r2, r3
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	b25b      	sxtb	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b259      	sxtb	r1, r3
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	4603      	mov	r3, r0
 8001470:	01db      	lsls	r3, r3, #7
 8001472:	4413      	add	r3, r2
 8001474:	b2c9      	uxtb	r1, r1
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 8001478:	54d1      	strb	r1, [r2, r3]
 800147a:	e01d      	b.n	80014b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	b2d8      	uxtb	r0, r3
 8001484:	4603      	mov	r3, r0
 8001486:	01db      	lsls	r3, r3, #7
 8001488:	4413      	add	r3, r2
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	b25a      	sxtb	r2, r3
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	b25b      	sxtb	r3, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	b259      	sxtb	r1, r3
 80014a6:	79fa      	ldrb	r2, [r7, #7]
 80014a8:	4603      	mov	r3, r0
 80014aa:	01db      	lsls	r3, r3, #7
 80014ac:	4413      	add	r3, r2
 80014ae:	b2c9      	uxtb	r1, r1
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <ssd1306_DrawPixel+0xa4>)
 80014b2:	54d1      	strb	r1, [r2, r3]
 80014b4:	e000      	b.n	80014b8 <ssd1306_DrawPixel+0x98>
        return;
 80014b6:	bf00      	nop
    }
}
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000214 	.word	0x20000214

080014c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4604      	mov	r4, r0
 80014d0:	1d38      	adds	r0, r7, #4
 80014d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80014d6:	461a      	mov	r2, r3
 80014d8:	4623      	mov	r3, r4
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	4613      	mov	r3, r2
 80014de:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b1f      	cmp	r3, #31
 80014e4:	d902      	bls.n	80014ec <ssd1306_WriteChar+0x24>
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b7e      	cmp	r3, #126	; 0x7e
 80014ea:	d901      	bls.n	80014f0 <ssd1306_WriteChar+0x28>
        return 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e06d      	b.n	80015cc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	793b      	ldrb	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	2b80      	cmp	r3, #128	; 0x80
 80014fc:	dc06      	bgt.n	800150c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001500:	885b      	ldrh	r3, [r3, #2]
 8001502:	461a      	mov	r2, r3
 8001504:	797b      	ldrb	r3, [r7, #5]
 8001506:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001508:	2b40      	cmp	r3, #64	; 0x40
 800150a:	dd01      	ble.n	8001510 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800150c:	2300      	movs	r3, #0
 800150e:	e05d      	b.n	80015cc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	e04c      	b.n	80015b0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3b20      	subs	r3, #32
 800151c:	7979      	ldrb	r1, [r7, #5]
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4619      	mov	r1, r3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	440b      	add	r3, r1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e034      	b.n	80015a0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d012      	beq.n	800156c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b2d8      	uxtb	r0, r3
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 8001556:	885b      	ldrh	r3, [r3, #2]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4413      	add	r3, r2
 8001560:	b2db      	uxtb	r3, r3
 8001562:	7bba      	ldrb	r2, [r7, #14]
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff ff5b 	bl	8001420 <ssd1306_DrawPixel>
 800156a:	e016      	b.n	800159a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b2d8      	uxtb	r0, r3
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b2d9      	uxtb	r1, r3
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	f7ff ff43 	bl	8001420 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	3301      	adds	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	793b      	ldrb	r3, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d3c5      	bcc.n	8001536 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	797b      	ldrb	r3, [r7, #5]
 80015b2:	461a      	mov	r2, r3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d3ad      	bcc.n	8001516 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80015bc:	881a      	ldrh	r2, [r3, #0]
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <ssd1306_WriteChar+0x10c>)
 80015c8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	20000614 	.word	0x20000614

080015d8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	1d38      	adds	r0, r7, #4
 80015e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80015e6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80015e8:	e012      	b.n	8001610 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	7818      	ldrb	r0, [r3, #0]
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	1d3a      	adds	r2, r7, #4
 80015f2:	ca06      	ldmia	r2, {r1, r2}
 80015f4:	f7ff ff68 	bl	80014c8 <ssd1306_WriteChar>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d002      	beq.n	800160a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	e008      	b.n	800161c <ssd1306_WriteString+0x44>
        }
        str++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e8      	bne.n	80015ea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	781b      	ldrb	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	460a      	mov	r2, r1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	4613      	mov	r3, r2
 8001632:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <ssd1306_SetCursor+0x2c>)
 800163a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <ssd1306_SetCursor+0x2c>)
 8001642:	805a      	strh	r2, [r3, #2]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000614 	.word	0x20000614

08001654 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800165e:	2381      	movs	r3, #129	; 0x81
 8001660:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fdf3 	bl	8001250 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fdef 	bl	8001250 <ssd1306_WriteCommand>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800168c:	23af      	movs	r3, #175	; 0xaf
 800168e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <ssd1306_SetDisplayOn+0x38>)
 8001692:	2201      	movs	r2, #1
 8001694:	715a      	strb	r2, [r3, #5]
 8001696:	e004      	b.n	80016a2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001698:	23ae      	movs	r3, #174	; 0xae
 800169a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <ssd1306_SetDisplayOn+0x38>)
 800169e:	2200      	movs	r2, #0
 80016a0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fdd3 	bl	8001250 <ssd1306_WriteCommand>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000614 	.word	0x20000614

080016b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_ADC1_Init+0x98>)
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_ADC1_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_ADC1_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_ADC1_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_ADC1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_ADC1_Init+0x98>)
 80016f8:	4a17      	ldr	r2, [pc, #92]	; (8001758 <MX_ADC1_Init+0xa0>)
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_ADC1_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_ADC1_Init+0x98>)
 8001704:	2201      	movs	r2, #1
 8001706:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_ADC1_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_ADC1_Init+0x98>)
 8001712:	2201      	movs	r2, #1
 8001714:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <MX_ADC1_Init+0x98>)
 8001718:	f001 fd24 	bl	8003164 <HAL_ADC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001722:	f000 ffdf 	bl	80026e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001726:	2303      	movs	r3, #3
 8001728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800172a:	2301      	movs	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_ADC1_Init+0x98>)
 8001738:	f001 febe 	bl	80034b8 <HAL_ADC_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001742:	f000 ffcf 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000061c 	.word	0x2000061c
 8001754:	40012000 	.word	0x40012000
 8001758:	0f000001 	.word	0x0f000001

0800175c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <HAL_ADC_MspInit+0x74>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d123      	bne.n	80017c6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_ADC_MspInit+0x78>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ae:	2308      	movs	r3, #8
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b2:	2303      	movs	r3, #3
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_ADC_MspInit+0x7c>)
 80017c2:	f002 fa6d 	bl	8003ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40012000 	.word	0x40012000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	; 0x38
 80017e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <MX_GPIO_Init+0x268>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a93      	ldr	r2, [pc, #588]	; (8001a44 <MX_GPIO_Init+0x268>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800180a:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <MX_GPIO_Init+0x268>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a8d      	ldr	r2, [pc, #564]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a87      	ldr	r2, [pc, #540]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b85      	ldr	r3, [pc, #532]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b82      	ldr	r3, [pc, #520]	; (8001a44 <MX_GPIO_Init+0x268>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a81      	ldr	r2, [pc, #516]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b7f      	ldr	r3, [pc, #508]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a7b      	ldr	r2, [pc, #492]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b79      	ldr	r3, [pc, #484]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <MX_GPIO_Init+0x268>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001870:	f043 0310 	orr.w	r3, r3, #16
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	4b70      	ldr	r3, [pc, #448]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a6f      	ldr	r2, [pc, #444]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <MX_GPIO_Init+0x268>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800189a:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <MX_GPIO_Init+0x268>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a69      	ldr	r2, [pc, #420]	; (8001a44 <MX_GPIO_Init+0x268>)
 80018a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <MX_GPIO_Init+0x268>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80018b8:	4863      	ldr	r0, [pc, #396]	; (8001a48 <MX_GPIO_Init+0x26c>)
 80018ba:	f002 fbb5 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2140      	movs	r1, #64	; 0x40
 80018c2:	4862      	ldr	r0, [pc, #392]	; (8001a4c <MX_GPIO_Init+0x270>)
 80018c4:	f002 fbb0 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ce:	4860      	ldr	r0, [pc, #384]	; (8001a50 <MX_GPIO_Init+0x274>)
 80018d0:	f002 fbaa 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4859      	ldr	r0, [pc, #356]	; (8001a50 <MX_GPIO_Init+0x274>)
 80018ec:	f002 f9d8 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018f0:	2332      	movs	r3, #50	; 0x32
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001900:	230b      	movs	r3, #11
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4851      	ldr	r0, [pc, #324]	; (8001a50 <MX_GPIO_Init+0x274>)
 800190c:	f002 f9c8 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001910:	2386      	movs	r3, #134	; 0x86
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001920:	230b      	movs	r3, #11
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	4619      	mov	r1, r3
 800192a:	484a      	ldr	r0, [pc, #296]	; (8001a54 <MX_GPIO_Init+0x278>)
 800192c:	f002 f9b8 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001930:	f244 0381 	movw	r3, #16513	; 0x4081
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	483f      	ldr	r0, [pc, #252]	; (8001a48 <MX_GPIO_Init+0x26c>)
 800194a:	f002 f9a9 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800194e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001960:	230b      	movs	r3, #11
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	4837      	ldr	r0, [pc, #220]	; (8001a48 <MX_GPIO_Init+0x26c>)
 800196c:	f002 f998 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001970:	2340      	movs	r3, #64	; 0x40
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4831      	ldr	r0, [pc, #196]	; (8001a4c <MX_GPIO_Init+0x270>)
 8001988:	f002 f98a 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	4619      	mov	r1, r3
 800199e:	482b      	ldr	r0, [pc, #172]	; (8001a4c <MX_GPIO_Init+0x270>)
 80019a0:	f002 f97e 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = przycisk1_Pin|przycisk0_Pin;
 80019a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	4825      	ldr	r0, [pc, #148]	; (8001a50 <MX_GPIO_Init+0x274>)
 80019ba:	f002 f971 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019d0:	230a      	movs	r3, #10
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <MX_GPIO_Init+0x278>)
 80019dc:	f002 f960 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	4817      	ldr	r0, [pc, #92]	; (8001a54 <MX_GPIO_Init+0x278>)
 80019f6:	f002 f953 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = wentylator_Pin;
 80019fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(wentylator_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	4619      	mov	r1, r3
 8001a12:	480f      	ldr	r0, [pc, #60]	; (8001a50 <MX_GPIO_Init+0x274>)
 8001a14:	f002 f944 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a2a:	230b      	movs	r3, #11
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_GPIO_Init+0x270>)
 8001a36:	f002 f933 	bl	8003ca0 <HAL_GPIO_Init>

}
 8001a3a:	bf00      	nop
 8001a3c:	3738      	adds	r7, #56	; 0x38
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020000 	.word	0x40020000

08001a58 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <MX_I2C2_Init+0x78>)
 8001a60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00501FE4;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <MX_I2C2_Init+0x7c>)
 8001a66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a92:	480e      	ldr	r0, [pc, #56]	; (8001acc <MX_I2C2_Init+0x74>)
 8001a94:	f002 fae2 	bl	800405c <HAL_I2C_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a9e:	f000 fe21 	bl	80026e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <MX_I2C2_Init+0x74>)
 8001aa6:	f003 f927 	bl	8004cf8 <HAL_I2CEx_ConfigAnalogFilter>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ab0:	f000 fe18 	bl	80026e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_I2C2_Init+0x74>)
 8001ab8:	f003 f969 	bl	8004d8e <HAL_I2CEx_ConfigDigitalFilter>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ac2:	f000 fe0f 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000664 	.word	0x20000664
 8001ad0:	40005800 	.word	0x40005800
 8001ad4:	00501fe4 	.word	0x00501fe4

08001ad8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <MX_I2C4_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <MX_I2C4_Init+0x7c>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001b12:	480e      	ldr	r0, [pc, #56]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b14:	f002 faa2 	bl	800405c <HAL_I2C_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001b1e:	f000 fde1 	bl	80026e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b26:	f003 f8e7 	bl	8004cf8 <HAL_I2CEx_ConfigAnalogFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001b30:	f000 fdd8 	bl	80026e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001b34:	2100      	movs	r1, #0
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_I2C4_Init+0x74>)
 8001b38:	f003 f929 	bl	8004d8e <HAL_I2CEx_ConfigDigitalFilter>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f000 fdcf 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200006b8 	.word	0x200006b8
 8001b50:	40006000 	.word	0x40006000
 8001b54:	20404768 	.word	0x20404768

08001b58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0ac      	sub	sp, #176	; 0xb0
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	2284      	movs	r2, #132	; 0x84
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f006 ffff 	bl	8008b7c <memset>
  if(i2cHandle->Instance==I2C2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a44      	ldr	r2, [pc, #272]	; (8001c94 <HAL_I2C_MspInit+0x13c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d13d      	bne.n	8001c04 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fe6f 	bl	800587c <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001ba4:	f000 fd9e 	bl	80026e4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4a3a      	ldr	r2, [pc, #232]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bae:	f043 0320 	orr.w	r3, r3, #32
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb4:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc6:	2312      	movs	r3, #18
 8001bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001be2:	4619      	mov	r1, r3
 8001be4:	482d      	ldr	r0, [pc, #180]	; (8001c9c <HAL_I2C_MspInit+0x144>)
 8001be6:	f002 f85b 	bl	8003ca0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bea:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001c02:	e042      	b.n	8001c8a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C4)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <HAL_I2C_MspInit+0x148>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d13d      	bne.n	8001c8a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 fe2c 	bl	800587c <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001c2a:	f000 fd5b 	bl	80026e4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001c60:	2304      	movs	r3, #4
 8001c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <HAL_I2C_MspInit+0x144>)
 8001c6e:	f002 f817 	bl	8003ca0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_I2C_MspInit+0x140>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
}
 8001c8a:	bf00      	nop
 8001c8c:	37b0      	adds	r7, #176	; 0xb0
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40005800 	.word	0x40005800
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40021400 	.word	0x40021400
 8001ca0:	40006000 	.word	0x40006000

08001ca4 <nastawy_pid_cmsis>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void nastawy_pid_cmsis(arm_pid_instance_f32 * S){
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	// dopisuje to bo nie nastawia sie domyslnie
	// na podstawie 5837-5839 z pliku arm_math.h
	S->A0 = S->Kp + S->Ki + S->Kd;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	ed93 7a06 	vldr	s14, [r3, #24]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	edc3 7a00 	vstr	s15, [r3]
	S->A1 = (-(S->Kp)-(2*S->Kd));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	edd3 7a06 	vldr	s15, [r3, #24]
 8001cd2:	eeb1 7a67 	vneg.f32	s14, s15
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	edc3 7a01 	vstr	s15, [r3, #4]
	S->A2 = S->Kd;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1a      	ldr	r2, [r3, #32]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <ograniczenie_sygnału_cmsis>:

void ograniczenie_sygnału_cmsis(arm_pid_instance_f32 * S){
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	// tutaj se napisałem taki prowizoryczny anti-windup :)
	if(S->state[2]>500){
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d0e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001d48 <ograniczenie_sygnału_cmsis+0x48>
 8001d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	dd02      	ble.n	8001d22 <ograniczenie_sygnału_cmsis+0x22>
		S->state[2] = 500;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <ograniczenie_sygnału_cmsis+0x4c>)
 8001d20:	615a      	str	r2, [r3, #20]
	}
	if(S->state[2]<0){
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d30:	d400      	bmi.n	8001d34 <ograniczenie_sygnału_cmsis+0x34>
	    S->state[2] = 0;
	}
}
 8001d32:	e003      	b.n	8001d3c <ograniczenie_sygnału_cmsis+0x3c>
	    S->state[2] = 0;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	43fa0000 	.word	0x43fa0000
 8001d4c:	43fa0000 	.word	0x43fa0000

08001d50 <grzanie_on_off>:

bool grzanie_on_off() {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(przycisk0_GPIO_Port, przycisk0_Pin) == GPIO_PIN_SET){
 8001d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <grzanie_on_off+0x20>)
 8001d5a:	f002 f94d 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <grzanie_on_off+0x18>
		return true;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <grzanie_on_off+0x1a>
	}
	else{
		return false;
 8001d68:	2300      	movs	r3, #0
	}
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40020800 	.word	0x40020800

08001d74 <auto_manual_on_off>:

bool auto_manual_on_off() {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(przycisk1_GPIO_Port, przycisk1_Pin) == GPIO_PIN_SET){
 8001d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <auto_manual_on_off+0x20>)
 8001d7e:	f002 f93b 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <auto_manual_on_off+0x18>
		return true;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <auto_manual_on_off+0x1a>
	}
	else{
		return false;
 8001d8c:	2300      	movs	r3, #0
	}
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40020800 	.word	0x40020800

08001d98 <HAL_UART_RxCpltCallback>:

// Z tym gównem też chyba jest coś nie tak
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart3, received_data, 3); // Tu włącza sie to gowno znowu :)
	if(auto_manual_on_off()){
 8001da0:	f7ff ffe8 	bl	8001d74 <auto_manual_on_off>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d033      	beq.n	8001e12 <HAL_UART_RxCpltCallback+0x7a>
		if(atof(received_data)>50){
 8001daa:	481c      	ldr	r0, [pc, #112]	; (8001e1c <HAL_UART_RxCpltCallback+0x84>)
 8001dac:	f006 fe86 	bl	8008abc <atof>
 8001db0:	ec51 0b10 	vmov	r0, r1, d0
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_UART_RxCpltCallback+0x88>)
 8001dba:	f7fe fecd 	bl	8000b58 <__aeabi_dcmpgt>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_UART_RxCpltCallback+0x34>
			zadana_temperatura = 50;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_UART_RxCpltCallback+0x8c>)
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <HAL_UART_RxCpltCallback+0x90>)
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e01c      	b.n	8001e06 <HAL_UART_RxCpltCallback+0x6e>
		}
		else if(atof(received_data)<20){
 8001dcc:	4813      	ldr	r0, [pc, #76]	; (8001e1c <HAL_UART_RxCpltCallback+0x84>)
 8001dce:	f006 fe75 	bl	8008abc <atof>
 8001dd2:	ec51 0b10 	vmov	r0, r1, d0
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_UART_RxCpltCallback+0x94>)
 8001ddc:	f7fe fe9e 	bl	8000b1c <__aeabi_dcmplt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_UART_RxCpltCallback+0x56>
			zadana_temperatura = 20;
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_UART_RxCpltCallback+0x8c>)
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_UART_RxCpltCallback+0x98>)
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e00b      	b.n	8001e06 <HAL_UART_RxCpltCallback+0x6e>
		}
		else{
			zadana_temperatura = atof(received_data);
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <HAL_UART_RxCpltCallback+0x84>)
 8001df0:	f006 fe64 	bl	8008abc <atof>
 8001df4:	ec53 2b10 	vmov	r2, r3, d0
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7fe fefe 	bl	8000bfc <__aeabi_d2f>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_UART_RxCpltCallback+0x8c>)
 8001e04:	6013      	str	r3, [r2, #0]
		}
		arm_pid_reset_f32(&pid);
 8001e06:	480b      	ldr	r0, [pc, #44]	; (8001e34 <HAL_UART_RxCpltCallback+0x9c>)
 8001e08:	f006 fe34 	bl	8008a74 <arm_pid_reset_f32>
		nastawy_pid_cmsis(&pid);
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <HAL_UART_RxCpltCallback+0x9c>)
 8001e0e:	f7ff ff49 	bl	8001ca4 <nastawy_pid_cmsis>
	}
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000070c 	.word	0x2000070c
 8001e20:	40490000 	.word	0x40490000
 8001e24:	20000718 	.word	0x20000718
 8001e28:	42480000 	.word	0x42480000
 8001e2c:	40340000 	.word	0x40340000
 8001e30:	41a00000 	.word	0x41a00000
 8001e34:	20000724 	.word	0x20000724

08001e38 <zadajnik>:

float zadajnik() {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001e3e:	4813      	ldr	r0, [pc, #76]	; (8001e8c <zadajnik+0x54>)
 8001e40:	f001 f9d4 	bl	80031ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	4810      	ldr	r0, [pc, #64]	; (8001e8c <zadajnik+0x54>)
 8001e4a:	f001 fa9d 	bl	8003388 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8001e4e:	480f      	ldr	r0, [pc, #60]	; (8001e8c <zadajnik+0x54>)
 8001e50:	f001 fb25 	bl	800349e <HAL_ADC_GetValue>
 8001e54:	6078      	str	r0, [r7, #4]
	float ser = (1.0f * value /4095.0f)*30+20;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e60:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001e90 <zadajnik+0x58>
 8001e64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e68:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e70:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e78:	edc7 7a00 	vstr	s15, [r7]
	return ser;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	ee07 3a90 	vmov	s15, r3
}
 8001e82:	eeb0 0a67 	vmov.f32	s0, s15
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000061c 	.word	0x2000061c
 8001e90:	457ff000 	.word	0x457ff000

08001e94 <change_current_duty_cycle>:

// Jakbym miał powiedzieć gdzie sie wypierdoli ten kod to wlasnie tutaj
void change_current_duty_cycle(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t current_duty_cycle)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	80fb      	strh	r3, [r7, #6]
    // calculate the new pulse value
    uint32_t pulse = ((htim->Init.Period+1) * current_duty_cycle) / 1000;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <change_current_duty_cycle+0x88>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	617b      	str	r3, [r7, #20]
    // update the capture/compare register
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <change_current_duty_cycle+0x34>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ec6:	e023      	b.n	8001f10 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d104      	bne.n	8001ed8 <change_current_duty_cycle+0x44>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ed6:	e01b      	b.n	8001f10 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d104      	bne.n	8001ee8 <change_current_duty_cycle+0x54>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001ee6:	e013      	b.n	8001f10 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d104      	bne.n	8001ef8 <change_current_duty_cycle+0x64>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001ef6:	e00b      	b.n	8001f10 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d104      	bne.n	8001f08 <change_current_duty_cycle+0x74>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001f06:	e003      	b.n	8001f10 <change_current_duty_cycle+0x7c>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	10624dd3 	.word	0x10624dd3

08001f20 <wyswietlacz>:

void wyswietlacz(){
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b0a2      	sub	sp, #136	; 0x88
 8001f24:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff fa2e 	bl	8001388 <ssd1306_Fill>
	uint8_t y = 0; // ktora linia wyswietlacza
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char temp_buf[6];
	gcvt(akutalna_temperatura, 6, temp_buf);
 8001f32:	4ba8      	ldr	r3, [pc, #672]	; (80021d4 <wyswietlacz+0x2b4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb26 	bl	8000588 <__aeabi_f2d>
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	460d      	mov	r5, r1
 8001f40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f44:	4619      	mov	r1, r3
 8001f46:	2006      	movs	r0, #6
 8001f48:	ec45 4b10 	vmov	d0, r4, r5
 8001f4c:	f006 fdba 	bl	8008ac4 <gcvt>
	ssd1306_SetCursor(2, y);
 8001f50:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001f54:	4619      	mov	r1, r3
 8001f56:	2002      	movs	r0, #2
 8001f58:	f7ff fb64 	bl	8001624 <ssd1306_SetCursor>
	char buf0[20] = "Temperatura:";
 8001f5c:	4b9e      	ldr	r3, [pc, #632]	; (80021d8 <wyswietlacz+0x2b8>)
 8001f5e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f64:	c407      	stmia	r4!, {r0, r1, r2}
 8001f66:	7023      	strb	r3, [r4, #0]
 8001f68:	f107 0371 	add.w	r3, r7, #113	; 0x71
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f8c3 2003 	str.w	r2, [r3, #3]
	ssd1306_WriteString(strcat(buf0, temp_buf), Font_7x10, White);
 8001f74:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001f78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f006 fe04 	bl	8008b8c <strcat>
 8001f84:	4a95      	ldr	r2, [pc, #596]	; (80021dc <wyswietlacz+0x2bc>)
 8001f86:	2301      	movs	r3, #1
 8001f88:	ca06      	ldmia	r2, {r1, r2}
 8001f8a:	f7ff fb25 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001f8e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001f92:	330a      	adds	r3, #10
 8001f94:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char set_buf[6];
	gcvt(zadana_temperatura, 4, set_buf);
 8001f98:	4b91      	ldr	r3, [pc, #580]	; (80021e0 <wyswietlacz+0x2c0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe faf3 	bl	8000588 <__aeabi_f2d>
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	460d      	mov	r5, r1
 8001fa6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001faa:	4619      	mov	r1, r3
 8001fac:	2004      	movs	r0, #4
 8001fae:	ec45 4b10 	vmov	d0, r4, r5
 8001fb2:	f006 fd87 	bl	8008ac4 <gcvt>
	ssd1306_SetCursor(2, y);
 8001fb6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001fba:	4619      	mov	r1, r3
 8001fbc:	2002      	movs	r0, #2
 8001fbe:	f7ff fb31 	bl	8001624 <ssd1306_SetCursor>
	char buf1[20] = "Nastawa:";
 8001fc2:	4a88      	ldr	r2, [pc, #544]	; (80021e4 <wyswietlacz+0x2c4>)
 8001fc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fca:	c303      	stmia	r3!, {r0, r1}
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	f107 0351 	add.w	r3, r7, #81	; 0x51
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	f8c3 2007 	str.w	r2, [r3, #7]
	ssd1306_WriteString(strcat(buf1, set_buf), Font_7x10, White);
 8001fdc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fe0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f006 fdd0 	bl	8008b8c <strcat>
 8001fec:	4a7b      	ldr	r2, [pc, #492]	; (80021dc <wyswietlacz+0x2bc>)
 8001fee:	2301      	movs	r3, #1
 8001ff0:	ca06      	ldmia	r2, {r1, r2}
 8001ff2:	f7ff faf1 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 8001ff6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001ffa:	330a      	adds	r3, #10
 8001ffc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	float duty_cl = sterowanie/10.0f;
 8002000:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <wyswietlacz+0x2c8>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002014:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	char duty_buf[6];
	gcvt(duty_cl, 3, duty_buf);
 8002018:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800201c:	f7fe fab4 	bl	8000588 <__aeabi_f2d>
 8002020:	4604      	mov	r4, r0
 8002022:	460d      	mov	r5, r1
 8002024:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002028:	4619      	mov	r1, r3
 800202a:	2003      	movs	r0, #3
 800202c:	ec45 4b10 	vmov	d0, r4, r5
 8002030:	f006 fd48 	bl	8008ac4 <gcvt>
	ssd1306_SetCursor(2, y);
 8002034:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002038:	4619      	mov	r1, r3
 800203a:	2002      	movs	r0, #2
 800203c:	f7ff faf2 	bl	8001624 <ssd1306_SetCursor>
	char buf2[20] = "PWM: ";
 8002040:	4a6a      	ldr	r2, [pc, #424]	; (80021ec <wyswietlacz+0x2cc>)
 8002042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002046:	e892 0003 	ldmia.w	r2, {r0, r1}
 800204a:	6018      	str	r0, [r3, #0]
 800204c:	3304      	adds	r3, #4
 800204e:	8019      	strh	r1, [r3, #0]
 8002050:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	819a      	strh	r2, [r3, #12]
	strcat(buf2, duty_buf);
 800205e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f006 fd8f 	bl	8008b8c <strcat>
	ssd1306_WriteString(strcat(buf2, "%"), Font_7x10, White);
 800206e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe f8cc 	bl	8000210 <strlen>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002080:	4413      	add	r3, r2
 8002082:	495b      	ldr	r1, [pc, #364]	; (80021f0 <wyswietlacz+0x2d0>)
 8002084:	461a      	mov	r2, r3
 8002086:	460b      	mov	r3, r1
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	8013      	strh	r3, [r2, #0]
 800208c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <wyswietlacz+0x2bc>)
 8002092:	2301      	movs	r3, #1
 8002094:	ca06      	ldmia	r2, {r1, r2}
 8002096:	f7ff fa9f 	bl	80015d8 <ssd1306_WriteString>
	y += 10;
 800209a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800209e:	330a      	adds	r3, #10
 80020a0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	ssd1306_SetCursor(2, y);
 80020a4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80020a8:	4619      	mov	r1, r3
 80020aa:	2002      	movs	r0, #2
 80020ac:	f7ff faba 	bl	8001624 <ssd1306_SetCursor>
	char buf3[20] = "Dziala: ";
 80020b0:	4a50      	ldr	r2, [pc, #320]	; (80021f4 <wyswietlacz+0x2d4>)
 80020b2:	f107 0318 	add.w	r3, r7, #24
 80020b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80020b8:	c303      	stmia	r3!, {r0, r1}
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	f8c3 2007 	str.w	r2, [r3, #7]
	if(grzanie_on_off()){
 80020ca:	f7ff fe41 	bl	8001d50 <grzanie_on_off>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d014      	beq.n	80020fe <wyswietlacz+0x1de>
		ssd1306_WriteString(strcat(buf3, "TAK"), Font_7x10, White);
 80020d4:	f107 0318 	add.w	r3, r7, #24
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe f899 	bl	8000210 <strlen>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	f107 0318 	add.w	r3, r7, #24
 80020e6:	4413      	add	r3, r2
 80020e8:	4a43      	ldr	r2, [pc, #268]	; (80021f8 <wyswietlacz+0x2d8>)
 80020ea:	6810      	ldr	r0, [r2, #0]
 80020ec:	6018      	str	r0, [r3, #0]
 80020ee:	f107 0018 	add.w	r0, r7, #24
 80020f2:	4a3a      	ldr	r2, [pc, #232]	; (80021dc <wyswietlacz+0x2bc>)
 80020f4:	2301      	movs	r3, #1
 80020f6:	ca06      	ldmia	r2, {r1, r2}
 80020f8:	f7ff fa6e 	bl	80015d8 <ssd1306_WriteString>
 80020fc:	e013      	b.n	8002126 <wyswietlacz+0x206>
	}
	else{
		ssd1306_WriteString(strcat(buf3, "NIE"), Font_7x10, White);
 80020fe:	f107 0318 	add.w	r3, r7, #24
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe f884 	bl	8000210 <strlen>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	f107 0318 	add.w	r3, r7, #24
 8002110:	4413      	add	r3, r2
 8002112:	4a3a      	ldr	r2, [pc, #232]	; (80021fc <wyswietlacz+0x2dc>)
 8002114:	6810      	ldr	r0, [r2, #0]
 8002116:	6018      	str	r0, [r3, #0]
 8002118:	f107 0018 	add.w	r0, r7, #24
 800211c:	4a2f      	ldr	r2, [pc, #188]	; (80021dc <wyswietlacz+0x2bc>)
 800211e:	2301      	movs	r3, #1
 8002120:	ca06      	ldmia	r2, {r1, r2}
 8002122:	f7ff fa59 	bl	80015d8 <ssd1306_WriteString>
	}
	y += 10;
 8002126:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800212a:	330a      	adds	r3, #10
 800212c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	ssd1306_SetCursor(2, y);
 8002130:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002134:	4619      	mov	r1, r3
 8002136:	2002      	movs	r0, #2
 8002138:	f7ff fa74 	bl	8001624 <ssd1306_SetCursor>
		char buf6[20] = "Tryb: ";
 800213c:	4a30      	ldr	r2, [pc, #192]	; (8002200 <wyswietlacz+0x2e0>)
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002144:	6018      	str	r0, [r3, #0]
 8002146:	3304      	adds	r3, #4
 8002148:	8019      	strh	r1, [r3, #0]
 800214a:	3302      	adds	r3, #2
 800214c:	0c0a      	lsrs	r2, r1, #16
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	f107 030b 	add.w	r3, r7, #11
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	731a      	strb	r2, [r3, #12]
		if(auto_manual_on_off()){
 800215e:	f7ff fe09 	bl	8001d74 <auto_manual_on_off>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d014      	beq.n	8002192 <wyswietlacz+0x272>
			ssd1306_WriteString(strcat(buf6, "AUTOMAT"), Font_7x10, White);
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe f850 	bl	8000210 <strlen>
 8002170:	4603      	mov	r3, r0
 8002172:	461a      	mov	r2, r3
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	4413      	add	r3, r2
 8002178:	4922      	ldr	r1, [pc, #136]	; (8002204 <wyswietlacz+0x2e4>)
 800217a:	461a      	mov	r2, r3
 800217c:	460b      	mov	r3, r1
 800217e:	cb03      	ldmia	r3!, {r0, r1}
 8002180:	6010      	str	r0, [r2, #0]
 8002182:	6051      	str	r1, [r2, #4]
 8002184:	1d38      	adds	r0, r7, #4
 8002186:	4a15      	ldr	r2, [pc, #84]	; (80021dc <wyswietlacz+0x2bc>)
 8002188:	2301      	movs	r3, #1
 800218a:	ca06      	ldmia	r2, {r1, r2}
 800218c:	f7ff fa24 	bl	80015d8 <ssd1306_WriteString>
 8002190:	e014      	b.n	80021bc <wyswietlacz+0x29c>
		}
		else{
			ssd1306_WriteString(strcat(buf6, "MANUAL"), Font_7x10, White);
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f83b 	bl	8000210 <strlen>
 800219a:	4603      	mov	r3, r0
 800219c:	461a      	mov	r2, r3
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	4413      	add	r3, r2
 80021a2:	4a19      	ldr	r2, [pc, #100]	; (8002208 <wyswietlacz+0x2e8>)
 80021a4:	6810      	ldr	r0, [r2, #0]
 80021a6:	6018      	str	r0, [r3, #0]
 80021a8:	8891      	ldrh	r1, [r2, #4]
 80021aa:	7992      	ldrb	r2, [r2, #6]
 80021ac:	8099      	strh	r1, [r3, #4]
 80021ae:	719a      	strb	r2, [r3, #6]
 80021b0:	1d38      	adds	r0, r7, #4
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <wyswietlacz+0x2bc>)
 80021b4:	2301      	movs	r3, #1
 80021b6:	ca06      	ldmia	r2, {r1, r2}
 80021b8:	f7ff fa0e 	bl	80015d8 <ssd1306_WriteString>
		}
		y += 10;
 80021bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80021c0:	330a      	adds	r3, #10
 80021c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87


	ssd1306_UpdateScreen();
 80021c6:	f7ff f903 	bl	80013d0 <ssd1306_UpdateScreen>
}
 80021ca:	bf00      	nop
 80021cc:	3788      	adds	r7, #136	; 0x88
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bdb0      	pop	{r4, r5, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000710 	.word	0x20000710
 80021d8:	0800c97c 	.word	0x0800c97c
 80021dc:	20000000 	.word	0x20000000
 80021e0:	20000718 	.word	0x20000718
 80021e4:	0800c990 	.word	0x0800c990
 80021e8:	20000716 	.word	0x20000716
 80021ec:	0800c9a4 	.word	0x0800c9a4
 80021f0:	0800c960 	.word	0x0800c960
 80021f4:	0800c9b8 	.word	0x0800c9b8
 80021f8:	0800c964 	.word	0x0800c964
 80021fc:	0800c968 	.word	0x0800c968
 8002200:	0800c9cc 	.word	0x0800c9cc
 8002204:	0800c96c 	.word	0x0800c96c
 8002208:	0800c974 	.word	0x0800c974

0800220c <transmit_data>:

void transmit_data(float current_temp){
 800220c:	b5b0      	push	{r4, r5, r7, lr}
 800220e:	b09c      	sub	sp, #112	; 0x70
 8002210:	af00      	add	r7, sp, #0
 8002212:	ed87 0a01 	vstr	s0, [r7, #4]
    char data_buf[100];
    gcvt(current_temp, 6, data_buf); // convertuje float na string
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe f9b6 	bl	8000588 <__aeabi_f2d>
 800221c:	4604      	mov	r4, r0
 800221e:	460d      	mov	r5, r1
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	4619      	mov	r1, r3
 8002226:	2006      	movs	r0, #6
 8002228:	ec45 4b10 	vmov	d0, r4, r5
 800222c:	f006 fc4a 	bl	8008ac4 <gcvt>
    strcat(data_buf, ";"); // dodaje srednik
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	4618      	mov	r0, r3
 8002236:	f7fd ffeb 	bl	8000210 <strlen>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	4413      	add	r3, r2
 8002244:	4933      	ldr	r1, [pc, #204]	; (8002314 <transmit_data+0x108>)
 8002246:	461a      	mov	r2, r3
 8002248:	460b      	mov	r3, r1
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	8013      	strh	r3, [r2, #0]
    gcvt(sterowanie/1.0f, 6, data_buf+strlen(data_buf));
 800224e:	4b32      	ldr	r3, [pc, #200]	; (8002318 <transmit_data+0x10c>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225a:	ee17 0a90 	vmov	r0, s15
 800225e:	f7fe f993 	bl	8000588 <__aeabi_f2d>
 8002262:	4604      	mov	r4, r0
 8002264:	460d      	mov	r5, r1
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	4618      	mov	r0, r3
 800226c:	f7fd ffd0 	bl	8000210 <strlen>
 8002270:	4602      	mov	r2, r0
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	4413      	add	r3, r2
 8002278:	4619      	mov	r1, r3
 800227a:	2006      	movs	r0, #6
 800227c:	ec45 4b10 	vmov	d0, r4, r5
 8002280:	f006 fc20 	bl	8008ac4 <gcvt>
    if(HAL_GPIO_ReadPin(wentylator_GPIO_Port, wentylator_Pin)==GPIO_PIN_RESET){
 8002284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002288:	4824      	ldr	r0, [pc, #144]	; (800231c <transmit_data+0x110>)
 800228a:	f001 feb5 	bl	8003ff8 <HAL_GPIO_ReadPin>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10f      	bne.n	80022b4 <transmit_data+0xa8>
    	strcat(data_buf, ";0.0");
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	4618      	mov	r0, r3
 800229a:	f7fd ffb9 	bl	8000210 <strlen>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	4413      	add	r3, r2
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <transmit_data+0x114>)
 80022aa:	6810      	ldr	r0, [r2, #0]
 80022ac:	6018      	str	r0, [r3, #0]
 80022ae:	7912      	ldrb	r2, [r2, #4]
 80022b0:	711a      	strb	r2, [r3, #4]
 80022b2:	e00e      	b.n	80022d2 <transmit_data+0xc6>
    }
    else{
    	strcat(data_buf, ";1.0");
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fd ffa9 	bl	8000210 <strlen>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	4413      	add	r3, r2
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <transmit_data+0x118>)
 80022ca:	6810      	ldr	r0, [r2, #0]
 80022cc:	6018      	str	r0, [r3, #0]
 80022ce:	7912      	ldrb	r2, [r2, #4]
 80022d0:	711a      	strb	r2, [r3, #4]
    }
    strcat(data_buf, "\r\n");
 80022d2:	f107 030c 	add.w	r3, r7, #12
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fd ff9a 	bl	8000210 <strlen>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4413      	add	r3, r2
 80022e6:	4a10      	ldr	r2, [pc, #64]	; (8002328 <transmit_data+0x11c>)
 80022e8:	8811      	ldrh	r1, [r2, #0]
 80022ea:	7892      	ldrb	r2, [r2, #2]
 80022ec:	8019      	strh	r1, [r3, #0]
 80022ee:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart3, data_buf, strlen(data_buf), 100);
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fd ff8b 	bl	8000210 <strlen>
 80022fa:	4603      	mov	r3, r0
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	f107 010c 	add.w	r1, r7, #12
 8002302:	2364      	movs	r3, #100	; 0x64
 8002304:	4809      	ldr	r0, [pc, #36]	; (800232c <transmit_data+0x120>)
 8002306:	f005 f927 	bl	8007558 <HAL_UART_Transmit>
}
 800230a:	bf00      	nop
 800230c:	3770      	adds	r7, #112	; 0x70
 800230e:	46bd      	mov	sp, r7
 8002310:	bdb0      	pop	{r4, r5, r7, pc}
 8002312:	bf00      	nop
 8002314:	0800c9e0 	.word	0x0800c9e0
 8002318:	20000716 	.word	0x20000716
 800231c:	40020800 	.word	0x40020800
 8002320:	0800c9e4 	.word	0x0800c9e4
 8002324:	0800c9ec 	.word	0x0800c9ec
 8002328:	0800c9f4 	.word	0x0800c9f4
 800232c:	200008c8 	.word	0x200008c8

08002330 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ // If the interrupt is from timer 2 - 10Hz
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	f040 80b3 	bne.w	80024aa <HAL_TIM_PeriodElapsedCallback+0x17a>
		current_duty_cycle = sterowanie;
 8002344:	4b74      	ldr	r3, [pc, #464]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002346:	881a      	ldrh	r2, [r3, #0]
 8002348:	4b74      	ldr	r3, [pc, #464]	; (800251c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800234a:	801a      	strh	r2, [r3, #0]
		transmit_data(akutalna_temperatura);
 800234c:	4b74      	ldr	r3, [pc, #464]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800234e:	edd3 7a00 	vldr	s15, [r3]
 8002352:	eeb0 0a67 	vmov.f32	s0, s15
 8002356:	f7ff ff59 	bl	800220c <transmit_data>
		aktualny_blad = (zadana_temperatura-akutalna_temperatura);
 800235a:	4b72      	ldr	r3, [pc, #456]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800235c:	ed93 7a00 	vldr	s14, [r3]
 8002360:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236a:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800236c:	edc3 7a00 	vstr	s15, [r3]
		if(grzanie_on_off()){
 8002370:	f7ff fcee 	bl	8001d50 <grzanie_on_off>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8081 	beq.w	800247e <HAL_TIM_PeriodElapsedCallback+0x14e>
			//sterowanie = 500;
			sterowanie = round(arm_pid_f32(&pid, aktualny_blad));
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a6a      	ldr	r2, [pc, #424]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002382:	617a      	str	r2, [r7, #20]
 8002384:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	ed93 7a00 	vldr	s14, [r3]
 800238c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002390:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	edd3 6a01 	vldr	s13, [r3, #4]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	edd3 7a03 	vldr	s15, [r3, #12]
 80023a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80023a4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80023b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80023c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c6:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f8d1 	bl	8000588 <__aeabi_f2d>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	ec43 2b10 	vmov	d0, r2, r3
 80023ee:	f00a fa65 	bl	800c8bc <round>
 80023f2:	ec53 2b10 	vmov	r2, r3, d0
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7fe fbdf 	bl	8000bbc <__aeabi_d2uiz>
 80023fe:	4603      	mov	r3, r0
 8002400:	b29a      	uxth	r2, r3
 8002402:	4b45      	ldr	r3, [pc, #276]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002404:	801a      	strh	r2, [r3, #0]
			if(sterowanie>500){
 8002406:	4b44      	ldr	r3, [pc, #272]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800240e:	d90a      	bls.n	8002426 <HAL_TIM_PeriodElapsedCallback+0xf6>
				sterowanie = 500;
 8002410:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002412:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002416:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
 8002418:	2200      	movs	r2, #0
 800241a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800241e:	4844      	ldr	r0, [pc, #272]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002420:	f001 fe02 	bl	8004028 <HAL_GPIO_WritePin>
 8002424:	e01c      	b.n	8002460 <HAL_TIM_PeriodElapsedCallback+0x130>
			}
			else if(sterowanie>0&&aktualny_blad>0){
 8002426:	4b3c      	ldr	r3, [pc, #240]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00e      	beq.n	800244c <HAL_TIM_PeriodElapsedCallback+0x11c>
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243c:	dd06      	ble.n	800244c <HAL_TIM_PeriodElapsedCallback+0x11c>
				HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002444:	483a      	ldr	r0, [pc, #232]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002446:	f001 fdef 	bl	8004028 <HAL_GPIO_WritePin>
 800244a:	e009      	b.n	8002460 <HAL_TIM_PeriodElapsedCallback+0x130>
			}
			else if(sterowanie==0){
 800244c:	4b32      	ldr	r3, [pc, #200]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <HAL_TIM_PeriodElapsedCallback+0x130>
				HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_SET);
 8002454:	2201      	movs	r2, #1
 8002456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800245a:	4835      	ldr	r0, [pc, #212]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800245c:	f001 fde4 	bl	8004028 <HAL_GPIO_WritePin>
			}
			ograniczenie_sygnału_cmsis(&pid);
 8002460:	4832      	ldr	r0, [pc, #200]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002462:	f7ff fc4d 	bl	8001d00 <ograniczenie_sygnału_cmsis>
			if(HAL_GPIO_ReadPin(wentylator_GPIO_Port, wentylator_Pin)==GPIO_PIN_SET){
 8002466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800246a:	4831      	ldr	r0, [pc, #196]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800246c:	f001 fdc4 	bl	8003ff8 <HAL_GPIO_ReadPin>
 8002470:	4603      	mov	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d112      	bne.n	800249c <HAL_TIM_PeriodElapsedCallback+0x16c>
				sterowanie = 0;
 8002476:	4b28      	ldr	r3, [pc, #160]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002478:	2200      	movs	r2, #0
 800247a:	801a      	strh	r2, [r3, #0]
 800247c:	e00e      	b.n	800249c <HAL_TIM_PeriodElapsedCallback+0x16c>
			}
		}
		else{
			arm_pid_reset_f32(&pid);
 800247e:	482b      	ldr	r0, [pc, #172]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002480:	f006 faf8 	bl	8008a74 <arm_pid_reset_f32>
			nastawy_pid_cmsis(&pid);
 8002484:	4829      	ldr	r0, [pc, #164]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002486:	f7ff fc0d 	bl	8001ca4 <nastawy_pid_cmsis>
			sterowanie = 0;
 800248a:	4b23      	ldr	r3, [pc, #140]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800248c:	2200      	movs	r2, #0
 800248e:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(wentylator_GPIO_Port, wentylator_Pin, GPIO_PIN_SET);
 8002490:	2201      	movs	r2, #1
 8002492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002496:	4826      	ldr	r0, [pc, #152]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002498:	f001 fdc6 	bl	8004028 <HAL_GPIO_WritePin>
		}
		change_current_duty_cycle(&htim1, TIM_CHANNEL_1, sterowanie);
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	2100      	movs	r1, #0
 80024a4:	4823      	ldr	r0, [pc, #140]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80024a6:	f7ff fcf5 	bl	8001e94 <change_current_duty_cycle>
	}
	if(htim->Instance == TIM3){ // If the interrupt is from timer 3 - 2Hz
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a22      	ldr	r2, [pc, #136]	; (8002538 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d104      	bne.n	80024be <HAL_TIM_PeriodElapsedCallback+0x18e>
		//ssd1306_TestAll();
		HAL_UART_Receive_IT(&huart3, received_data, 4);
 80024b4:	2204      	movs	r2, #4
 80024b6:	4921      	ldr	r1, [pc, #132]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80024b8:	4821      	ldr	r0, [pc, #132]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80024ba:	f005 f8d0 	bl	800765e <HAL_UART_Receive_IT>
	}
	if(htim->Instance == TIM4){ // If the interrupt is from timer 4 - 8Hz
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a20      	ldr	r2, [pc, #128]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d122      	bne.n	800250e <HAL_TIM_PeriodElapsedCallback+0x1de>
		MCP9808_MeasureTemperature(&akutalna_temperatura);
 80024c8:	4815      	ldr	r0, [pc, #84]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80024ca:	f7fe fe15 	bl	80010f8 <MCP9808_MeasureTemperature>
		if(auto_manual_on_off()==false){
 80024ce:	f7ff fc51 	bl	8001d74 <auto_manual_on_off>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f083 0301 	eor.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d015      	beq.n	800250a <HAL_TIM_PeriodElapsedCallback+0x1da>
			zadana_temperatura = round(zadajnik());
 80024de:	f7ff fcab 	bl	8001e38 <zadajnik>
 80024e2:	ee10 3a10 	vmov	r3, s0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f84e 	bl	8000588 <__aeabi_f2d>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	ec43 2b10 	vmov	d0, r2, r3
 80024f4:	f00a f9e2 	bl	800c8bc <round>
 80024f8:	ec53 2b10 	vmov	r2, r3, d0
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f7fe fb7c 	bl	8000bfc <__aeabi_d2f>
 8002504:	4603      	mov	r3, r0
 8002506:	4a07      	ldr	r2, [pc, #28]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002508:	6013      	str	r3, [r2, #0]
		}
		wyswietlacz();
 800250a:	f7ff fd09 	bl	8001f20 <wyswietlacz>
	}
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000716 	.word	0x20000716
 800251c:	20000714 	.word	0x20000714
 8002520:	20000710 	.word	0x20000710
 8002524:	20000718 	.word	0x20000718
 8002528:	20000720 	.word	0x20000720
 800252c:	20000724 	.word	0x20000724
 8002530:	40020800 	.word	0x40020800
 8002534:	2000074c 	.word	0x2000074c
 8002538:	40000400 	.word	0x40000400
 800253c:	2000070c 	.word	0x2000070c
 8002540:	200008c8 	.word	0x200008c8
 8002544:	40000800 	.word	0x40000800

08002548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800254c:	f000 fd89 	bl	8003062 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002550:	f000 f85a 	bl	8002608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002554:	f7ff f942 	bl	80017dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002558:	f000 fcc2 	bl	8002ee0 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 800255c:	f7ff fa7c 	bl	8001a58 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002560:	f000 faac 	bl	8002abc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002564:	f000 faf8 	bl	8002b58 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002568:	f000 fb46 	bl	8002bf8 <MX_TIM4_Init>
  MX_I2C4_Init();
 800256c:	f7ff fab4 	bl	8001ad8 <MX_I2C4_Init>
  MX_ADC1_Init();
 8002570:	f7ff f8a2 	bl	80016b8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002574:	f000 fa14 	bl	80029a0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002578:	f000 fb8e 	bl	8002c98 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_TestAll();
  ssd1306_Init(); // Inicjalizacja wyświetlacza
 800257c:	f7fe fe9a 	bl	80012b4 <ssd1306_Init>
  MCP9808_Init(&hi2c4, 0x18); // inicjalizacja sensora temperatury
 8002580:	2118      	movs	r1, #24
 8002582:	4816      	ldr	r0, [pc, #88]	; (80025dc <main+0x94>)
 8002584:	f7fe fd42 	bl	800100c <MCP9808_Init>
  // Tutej nastawiają się dokładności czujnika temperatury :))))
  MCP9808_SetResolution(MCP9808_High_Res);  ///> High 0.125 (130 ms)
 8002588:	2002      	movs	r0, #2
 800258a:	f7fe fe35 	bl	80011f8 <MCP9808_SetResolution>
  arm_pid_init_f32(&pid, 1);
 800258e:	2101      	movs	r1, #1
 8002590:	4813      	ldr	r0, [pc, #76]	; (80025e0 <main+0x98>)
 8002592:	f006 fa75 	bl	8008a80 <arm_pid_init_f32>
  pid.Kp=kp;
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <main+0x9c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <main+0x98>)
 800259c:	6193      	str	r3, [r2, #24]
  pid.Kd=kd;
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <main+0xa0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <main+0x98>)
 80025a4:	6213      	str	r3, [r2, #32]
  pid.Ki=ki;
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <main+0xa4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <main+0x98>)
 80025ac:	61d3      	str	r3, [r2, #28]
  nastawy_pid_cmsis(&pid);
 80025ae:	480c      	ldr	r0, [pc, #48]	; (80025e0 <main+0x98>)
 80025b0:	f7ff fb78 	bl	8001ca4 <nastawy_pid_cmsis>

  HAL_UART_Receive_IT(&huart3, received_data, 4);
 80025b4:	2204      	movs	r2, #4
 80025b6:	490e      	ldr	r1, [pc, #56]	; (80025f0 <main+0xa8>)
 80025b8:	480e      	ldr	r0, [pc, #56]	; (80025f4 <main+0xac>)
 80025ba:	f005 f850 	bl	800765e <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80025be:	2100      	movs	r1, #0
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <main+0xb0>)
 80025c2:	f003 fe73 	bl	80062ac <HAL_TIM_PWM_Start>

// te niżej najlepiej jak beda na koncu // tak powiedzial szef
  HAL_TIM_Base_Start_IT(&htim2);
 80025c6:	480d      	ldr	r0, [pc, #52]	; (80025fc <main+0xb4>)
 80025c8:	f003 fda0 	bl	800610c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <main+0xb8>)
 80025ce:	f003 fd9d 	bl	800610c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80025d2:	480c      	ldr	r0, [pc, #48]	; (8002604 <main+0xbc>)
 80025d4:	f003 fd9a 	bl	800610c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <main+0x90>
 80025da:	bf00      	nop
 80025dc:	200006b8 	.word	0x200006b8
 80025e0:	20000724 	.word	0x20000724
 80025e4:	20000008 	.word	0x20000008
 80025e8:	2000071c 	.word	0x2000071c
 80025ec:	2000000c 	.word	0x2000000c
 80025f0:	2000070c 	.word	0x2000070c
 80025f4:	200008c8 	.word	0x200008c8
 80025f8:	2000074c 	.word	0x2000074c
 80025fc:	20000798 	.word	0x20000798
 8002600:	200007e4 	.word	0x200007e4
 8002604:	20000830 	.word	0x20000830

08002608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b094      	sub	sp, #80	; 0x50
 800260c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800260e:	f107 0320 	add.w	r3, r7, #32
 8002612:	2230      	movs	r2, #48	; 0x30
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f006 fab0 	bl	8008b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800262c:	f002 fbfc 	bl	8004e28 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <SystemClock_Config+0xd4>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	4a29      	ldr	r2, [pc, #164]	; (80026dc <SystemClock_Config+0xd4>)
 8002636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263a:	6413      	str	r3, [r2, #64]	; 0x40
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <SystemClock_Config+0xd4>)
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <SystemClock_Config+0xd8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <SystemClock_Config+0xd8>)
 800264e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <SystemClock_Config+0xd8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002660:	2301      	movs	r3, #1
 8002662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002664:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800266a:	2302      	movs	r3, #2
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800266e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002674:	2304      	movs	r3, #4
 8002676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002678:	23d8      	movs	r3, #216	; 0xd8
 800267a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800267c:	2302      	movs	r3, #2
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002680:	2309      	movs	r3, #9
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002684:	f107 0320 	add.w	r3, r7, #32
 8002688:	4618      	mov	r0, r3
 800268a:	f002 fc2d 	bl	8004ee8 <HAL_RCC_OscConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002694:	f000 f826 	bl	80026e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002698:	f002 fbd6 	bl	8004e48 <HAL_PWREx_EnableOverDrive>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80026a2:	f000 f81f 	bl	80026e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a6:	230f      	movs	r3, #15
 80026a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026aa:	2302      	movs	r3, #2
 80026ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80026b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	2107      	movs	r1, #7
 80026c4:	4618      	mov	r0, r3
 80026c6:	f002 feb3 	bl	8005430 <HAL_RCC_ClockConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80026d0:	f000 f808 	bl	80026e4 <Error_Handler>
  }
}
 80026d4:	bf00      	nop
 80026d6:	3750      	adds	r7, #80	; 0x50
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40007000 	.word	0x40007000

080026e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e8:	b672      	cpsid	i
}
 80026ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026ec:	e7fe      	b.n	80026ec <Error_Handler+0x8>
	...

080026f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_MspInit+0x44>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <HAL_MspInit+0x44>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_MspInit+0x44>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_MspInit+0x44>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_MspInit+0x44>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_MspInit+0x44>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800273c:	e7fe      	b.n	800273c <NMI_Handler+0x4>

0800273e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <HardFault_Handler+0x4>

08002744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <MemManage_Handler+0x4>

0800274a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <BusFault_Handler+0x4>

08002750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <UsageFault_Handler+0x4>

08002756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002784:	f000 fcaa 	bl	80030dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}

0800278c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <TIM2_IRQHandler+0x10>)
 8002792:	f003 fe85 	bl	80064a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000798 	.word	0x20000798

080027a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <TIM3_IRQHandler+0x10>)
 80027a6:	f003 fe7b 	bl	80064a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200007e4 	.word	0x200007e4

080027b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <TIM4_IRQHandler+0x10>)
 80027ba:	f003 fe71 	bl	80064a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000830 	.word	0x20000830

080027c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <USART3_IRQHandler+0x10>)
 80027ce:	f004 ff8b 	bl	80076e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200008c8 	.word	0x200008c8

080027dc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80027e2:	f003 fe5d 	bl	80064a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2000087c 	.word	0x2000087c

080027f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return 1;
 80027f4:	2301      	movs	r3, #1
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <_kill>:

int _kill(int pid, int sig)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800280a:	f006 f97f 	bl	8008b0c <__errno>
 800280e:	4603      	mov	r3, r0
 8002810:	2216      	movs	r2, #22
 8002812:	601a      	str	r2, [r3, #0]
  return -1;
 8002814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <_exit>:

void _exit (int status)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002828:	f04f 31ff 	mov.w	r1, #4294967295
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ffe7 	bl	8002800 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002832:	e7fe      	b.n	8002832 <_exit+0x12>

08002834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	e00a      	b.n	800285c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002846:	f3af 8000 	nop.w
 800284a:	4601      	mov	r1, r0
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	60ba      	str	r2, [r7, #8]
 8002852:	b2ca      	uxtb	r2, r1
 8002854:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3301      	adds	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	dbf0      	blt.n	8002846 <_read+0x12>
  }

  return len;
 8002864:	687b      	ldr	r3, [r7, #4]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	e009      	b.n	8002894 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	60ba      	str	r2, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	3301      	adds	r3, #1
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	429a      	cmp	r2, r3
 800289a:	dbf1      	blt.n	8002880 <_write+0x12>
  }
  return len;
 800289c:	687b      	ldr	r3, [r7, #4]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <_close>:

int _close(int file)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ce:	605a      	str	r2, [r3, #4]
  return 0;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <_isatty>:

int _isatty(int file)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <_sbrk+0x5c>)
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <_sbrk+0x60>)
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <_sbrk+0x64>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <_sbrk+0x64>)
 800292e:	4a12      	ldr	r2, [pc, #72]	; (8002978 <_sbrk+0x68>)
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	d207      	bcs.n	8002950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002940:	f006 f8e4 	bl	8008b0c <__errno>
 8002944:	4603      	mov	r3, r0
 8002946:	220c      	movs	r2, #12
 8002948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	e009      	b.n	8002964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <_sbrk+0x64>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	4a05      	ldr	r2, [pc, #20]	; (8002974 <_sbrk+0x64>)
 8002960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20050000 	.word	0x20050000
 8002970:	00000400 	.word	0x00000400
 8002974:	20000748 	.word	0x20000748
 8002978:	20000968 	.word	0x20000968

0800297c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <SystemInit+0x20>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	4a05      	ldr	r2, [pc, #20]	; (800299c <SystemInit+0x20>)
 8002988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800298c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b096      	sub	sp, #88	; 0x58
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]
 80029c2:	615a      	str	r2, [r3, #20]
 80029c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	222c      	movs	r2, #44	; 0x2c
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f006 f8d5 	bl	8008b7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029d2:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <MX_TIM1_Init+0x114>)
 80029d4:	4a38      	ldr	r2, [pc, #224]	; (8002ab8 <MX_TIM1_Init+0x118>)
 80029d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 80029d8:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <MX_TIM1_Init+0x114>)
 80029da:	226b      	movs	r2, #107	; 0x6b
 80029dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029de:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <MX_TIM1_Init+0x114>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80029e4:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <MX_TIM1_Init+0x114>)
 80029e6:	2263      	movs	r2, #99	; 0x63
 80029e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ea:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <MX_TIM1_Init+0x114>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029f0:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <MX_TIM1_Init+0x114>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f6:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <MX_TIM1_Init+0x114>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029fc:	482d      	ldr	r0, [pc, #180]	; (8002ab4 <MX_TIM1_Init+0x114>)
 80029fe:	f003 fbfd 	bl	80061fc <HAL_TIM_PWM_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002a08:	f7ff fe6c 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a10:	2300      	movs	r3, #0
 8002a12:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4825      	ldr	r0, [pc, #148]	; (8002ab4 <MX_TIM1_Init+0x114>)
 8002a20:	f004 fc22 	bl	8007268 <HAL_TIMEx_MasterConfigSynchronization>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002a2a:	f7ff fe5b 	bl	80026e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a2e:	2360      	movs	r3, #96	; 0x60
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a36:	2300      	movs	r3, #0
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a4e:	2200      	movs	r2, #0
 8002a50:	4619      	mov	r1, r3
 8002a52:	4818      	ldr	r0, [pc, #96]	; (8002ab4 <MX_TIM1_Init+0x114>)
 8002a54:	f003 fe44 	bl	80066e0 <HAL_TIM_PWM_ConfigChannel>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002a5e:	f7ff fe41 	bl	80026e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	4807      	ldr	r0, [pc, #28]	; (8002ab4 <MX_TIM1_Init+0x114>)
 8002a98:	f004 fc74 	bl	8007384 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002aa2:	f7ff fe1f 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002aa6:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <MX_TIM1_Init+0x114>)
 8002aa8:	f000 f9e2 	bl	8002e70 <HAL_TIM_MspPostInit>

}
 8002aac:	bf00      	nop
 8002aae:	3758      	adds	r7, #88	; 0x58
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000074c 	.word	0x2000074c
 8002ab8:	40010000 	.word	0x40010000

08002abc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002adc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ae0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10799;
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002ae4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002ae8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002af2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002af6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b04:	4813      	ldr	r0, [pc, #76]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002b06:	f003 faa9 	bl	800605c <HAL_TIM_Base_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002b10:	f7ff fde8 	bl	80026e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b1a:	f107 0310 	add.w	r3, r7, #16
 8002b1e:	4619      	mov	r1, r3
 8002b20:	480c      	ldr	r0, [pc, #48]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002b22:	f003 fef1 	bl	8006908 <HAL_TIM_ConfigClockSource>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002b2c:	f7ff fdda 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b30:	2300      	movs	r3, #0
 8002b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4805      	ldr	r0, [pc, #20]	; (8002b54 <MX_TIM2_Init+0x98>)
 8002b3e:	f004 fb93 	bl	8007268 <HAL_TIMEx_MasterConfigSynchronization>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002b48:	f7ff fdcc 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b4c:	bf00      	nop
 8002b4e:	3720      	adds	r7, #32
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000798 	.word	0x20000798

08002b58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5e:	f107 0310 	add.w	r3, r7, #16
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <MX_TIM3_Init+0x98>)
 8002b78:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <MX_TIM3_Init+0x9c>)
 8002b7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 8002b7c:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <MX_TIM3_Init+0x98>)
 8002b7e:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002b82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <MX_TIM3_Init+0x98>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <MX_TIM3_Init+0x98>)
 8002b8c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <MX_TIM3_Init+0x98>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <MX_TIM3_Init+0x98>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b9e:	4814      	ldr	r0, [pc, #80]	; (8002bf0 <MX_TIM3_Init+0x98>)
 8002ba0:	f003 fa5c 	bl	800605c <HAL_TIM_Base_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002baa:	f7ff fd9b 	bl	80026e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	4619      	mov	r1, r3
 8002bba:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <MX_TIM3_Init+0x98>)
 8002bbc:	f003 fea4 	bl	8006908 <HAL_TIM_ConfigClockSource>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002bc6:	f7ff fd8d 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4806      	ldr	r0, [pc, #24]	; (8002bf0 <MX_TIM3_Init+0x98>)
 8002bd8:	f004 fb46 	bl	8007268 <HAL_TIMEx_MasterConfigSynchronization>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002be2:	f7ff fd7f 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002be6:	bf00      	nop
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200007e4 	.word	0x200007e4
 8002bf4:	40000400 	.word	0x40000400

08002bf8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfe:	f107 0310 	add.w	r3, r7, #16
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <MX_TIM4_Init+0x98>)
 8002c18:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <MX_TIM4_Init+0x9c>)
 8002c1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10799;
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <MX_TIM4_Init+0x98>)
 8002c1e:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002c22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c24:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <MX_TIM4_Init+0x98>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1249;
 8002c2a:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <MX_TIM4_Init+0x98>)
 8002c2c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002c30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <MX_TIM4_Init+0x98>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c38:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <MX_TIM4_Init+0x98>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c3e:	4814      	ldr	r0, [pc, #80]	; (8002c90 <MX_TIM4_Init+0x98>)
 8002c40:	f003 fa0c 	bl	800605c <HAL_TIM_Base_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002c4a:	f7ff fd4b 	bl	80026e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c54:	f107 0310 	add.w	r3, r7, #16
 8002c58:	4619      	mov	r1, r3
 8002c5a:	480d      	ldr	r0, [pc, #52]	; (8002c90 <MX_TIM4_Init+0x98>)
 8002c5c:	f003 fe54 	bl	8006908 <HAL_TIM_ConfigClockSource>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002c66:	f7ff fd3d 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4806      	ldr	r0, [pc, #24]	; (8002c90 <MX_TIM4_Init+0x98>)
 8002c78:	f004 faf6 	bl	8007268 <HAL_TIMEx_MasterConfigSynchronization>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002c82:	f7ff fd2f 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c86:	bf00      	nop
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000830 	.word	0x20000830
 8002c94:	40000800 	.word	0x40000800

08002c98 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c9e:	f107 0310 	add.w	r3, r7, #16
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002cb6:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <MX_TIM8_Init+0xa0>)
 8002cb8:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <MX_TIM8_Init+0xa4>)
 8002cba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 107;
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <MX_TIM8_Init+0xa0>)
 8002cbe:	226b      	movs	r2, #107	; 0x6b
 8002cc0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <MX_TIM8_Init+0xa0>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <MX_TIM8_Init+0xa0>)
 8002cca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <MX_TIM8_Init+0xa0>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002cd6:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <MX_TIM8_Init+0xa0>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <MX_TIM8_Init+0xa0>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002ce2:	4815      	ldr	r0, [pc, #84]	; (8002d38 <MX_TIM8_Init+0xa0>)
 8002ce4:	f003 f9ba 	bl	800605c <HAL_TIM_Base_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002cee:	f7ff fcf9 	bl	80026e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002cf8:	f107 0310 	add.w	r3, r7, #16
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	480e      	ldr	r0, [pc, #56]	; (8002d38 <MX_TIM8_Init+0xa0>)
 8002d00:	f003 fe02 	bl	8006908 <HAL_TIM_ConfigClockSource>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002d0a:	f7ff fceb 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4806      	ldr	r0, [pc, #24]	; (8002d38 <MX_TIM8_Init+0xa0>)
 8002d20:	f004 faa2 	bl	8007268 <HAL_TIMEx_MasterConfigSynchronization>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002d2a:	f7ff fcdb 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002d2e:	bf00      	nop
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000087c 	.word	0x2000087c
 8002d3c:	40010400 	.word	0x40010400

08002d40 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <HAL_TIM_PWM_MspInit+0x38>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10b      	bne.n	8002d6a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_TIM_PWM_MspInit+0x3c>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <HAL_TIM_PWM_MspInit+0x3c>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <HAL_TIM_PWM_MspInit+0x3c>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40010000 	.word	0x40010000
 8002d7c:	40023800 	.word	0x40023800

08002d80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d114      	bne.n	8002dbc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d92:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9e:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	201c      	movs	r0, #28
 8002db0:	f000 fead 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002db4:	201c      	movs	r0, #28
 8002db6:	f000 fec6 	bl	8003b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002dba:	e04c      	b.n	8002e56 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a28      	ldr	r2, [pc, #160]	; (8002e64 <HAL_TIM_Base_MspInit+0xe4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d114      	bne.n	8002df0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	201d      	movs	r0, #29
 8002de4:	f000 fe93 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002de8:	201d      	movs	r0, #29
 8002dea:	f000 feac 	bl	8003b46 <HAL_NVIC_EnableIRQ>
}
 8002dee:	e032      	b.n	8002e56 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <HAL_TIM_Base_MspInit+0xe8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d114      	bne.n	8002e24 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dfa:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002e00:	f043 0304 	orr.w	r3, r3, #4
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2100      	movs	r1, #0
 8002e16:	201e      	movs	r0, #30
 8002e18:	f000 fe79 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e1c:	201e      	movs	r0, #30
 8002e1e:	f000 fe92 	bl	8003b46 <HAL_NVIC_EnableIRQ>
}
 8002e22:	e018      	b.n	8002e56 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM8)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <HAL_TIM_Base_MspInit+0xec>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d113      	bne.n	8002e56 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_TIM_Base_MspInit+0xe0>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	202b      	movs	r0, #43	; 0x2b
 8002e4c:	f000 fe5f 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002e50:	202b      	movs	r0, #43	; 0x2b
 8002e52:	f000 fe78 	bl	8003b46 <HAL_NVIC_EnableIRQ>
}
 8002e56:	bf00      	nop
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40010400 	.word	0x40010400

08002e70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a11      	ldr	r2, [pc, #68]	; (8002ed4 <HAL_TIM_MspPostInit+0x64>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d11c      	bne.n	8002ecc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_TIM_MspPostInit+0x68>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <HAL_TIM_MspPostInit+0x68>)
 8002e98:	f043 0310 	orr.w	r3, r3, #16
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <HAL_TIM_MspPostInit+0x68>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4805      	ldr	r0, [pc, #20]	; (8002edc <HAL_TIM_MspPostInit+0x6c>)
 8002ec8:	f000 feea 	bl	8003ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ecc:	bf00      	nop
 8002ece:	3720      	adds	r7, #32
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40010000 	.word	0x40010000
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40021000 	.word	0x40021000

08002ee0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002ee6:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <MX_USART3_UART_Init+0x5c>)
 8002ee8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f06:	220c      	movs	r2, #12
 8002f08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f22:	4805      	ldr	r0, [pc, #20]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f24:	f004 faca 	bl	80074bc <HAL_UART_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002f2e:	f7ff fbd9 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200008c8 	.word	0x200008c8
 8002f3c:	40004800 	.word	0x40004800

08002f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b0aa      	sub	sp, #168	; 0xa8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f58:	f107 0310 	add.w	r3, r7, #16
 8002f5c:	2284      	movs	r2, #132	; 0x84
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f005 fe0b 	bl	8008b7c <memset>
  if(uartHandle->Instance==USART3)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a26      	ldr	r2, [pc, #152]	; (8003004 <HAL_UART_MspInit+0xc4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d144      	bne.n	8002ffa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f74:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f76:	2300      	movs	r3, #0
 8002f78:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f002 fc7c 	bl	800587c <HAL_RCCEx_PeriphCLKConfig>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f8a:	f7ff fbab 	bl	80026e4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <HAL_UART_MspInit+0xc8>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <HAL_UART_MspInit+0xc8>)
 8002f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_UART_MspInit+0xc8>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fa6:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_UART_MspInit+0xc8>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <HAL_UART_MspInit+0xc8>)
 8002fac:	f043 0308 	orr.w	r3, r3, #8
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_UART_MspInit+0xc8>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fd8:	2307      	movs	r3, #7
 8002fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fde:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4809      	ldr	r0, [pc, #36]	; (800300c <HAL_UART_MspInit+0xcc>)
 8002fe6:	f000 fe5b 	bl	8003ca0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	2027      	movs	r0, #39	; 0x27
 8002ff0:	f000 fd8d 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ff4:	2027      	movs	r0, #39	; 0x27
 8002ff6:	f000 fda6 	bl	8003b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	37a8      	adds	r7, #168	; 0xa8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40004800 	.word	0x40004800
 8003008:	40023800 	.word	0x40023800
 800300c:	40020c00 	.word	0x40020c00

08003010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003048 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003014:	480d      	ldr	r0, [pc, #52]	; (800304c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003016:	490e      	ldr	r1, [pc, #56]	; (8003050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800301c:	e002      	b.n	8003024 <LoopCopyDataInit>

0800301e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800301e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003022:	3304      	adds	r3, #4

08003024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003028:	d3f9      	bcc.n	800301e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800302c:	4c0b      	ldr	r4, [pc, #44]	; (800305c <LoopFillZerobss+0x26>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003030:	e001      	b.n	8003036 <LoopFillZerobss>

08003032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003034:	3204      	adds	r2, #4

08003036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003038:	d3fb      	bcc.n	8003032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800303a:	f7ff fc9f 	bl	800297c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800303e:	f005 fd6b 	bl	8008b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003042:	f7ff fa81 	bl	8002548 <main>
  bx  lr    
 8003046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003048:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800304c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003050:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003054:	0800d620 	.word	0x0800d620
  ldr r2, =_sbss
 8003058:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800305c:	20000964 	.word	0x20000964

08003060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003060:	e7fe      	b.n	8003060 <ADC_IRQHandler>

08003062 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003066:	2003      	movs	r0, #3
 8003068:	f000 fd46 	bl	8003af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800306c:	2000      	movs	r0, #0
 800306e:	f000 f805 	bl	800307c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003072:	f7ff fb3d 	bl	80026f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_InitTick+0x54>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_InitTick+0x58>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003092:	fbb3 f3f1 	udiv	r3, r3, r1
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fd61 	bl	8003b62 <HAL_SYSTICK_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00e      	b.n	80030c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b0f      	cmp	r3, #15
 80030ae:	d80a      	bhi.n	80030c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b0:	2200      	movs	r2, #0
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	f000 fd29 	bl	8003b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <HAL_InitTick+0x5c>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e000      	b.n	80030c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000010 	.word	0x20000010
 80030d4:	20000018 	.word	0x20000018
 80030d8:	20000014 	.word	0x20000014

080030dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x20>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_IncTick+0x24>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_IncTick+0x24>)
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000018 	.word	0x20000018
 8003100:	20000950 	.word	0x20000950

08003104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return uwTick;
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_GetTick+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	20000950 	.word	0x20000950

0800311c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003124:	f7ff ffee 	bl	8003104 <HAL_GetTick>
 8003128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d005      	beq.n	8003142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_Delay+0x44>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003142:	bf00      	nop
 8003144:	f7ff ffde 	bl	8003104 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d8f7      	bhi.n	8003144 <HAL_Delay+0x28>
  {
  }
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000018 	.word	0x20000018

08003164 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e031      	b.n	80031de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe faea 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_ADC_Init+0x84>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	f043 0202 	orr.w	r2, r3, #2
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fad6 	bl	8003764 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f023 0303 	bic.w	r3, r3, #3
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
 80031ce:	e001      	b.n	80031d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	ffffeefd 	.word	0xffffeefd

080031ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_ADC_Start+0x1a>
 8003202:	2302      	movs	r3, #2
 8003204:	e0ad      	b.n	8003362 <HAL_ADC_Start+0x176>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d018      	beq.n	800324e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800322c:	4b50      	ldr	r3, [pc, #320]	; (8003370 <HAL_ADC_Start+0x184>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a50      	ldr	r2, [pc, #320]	; (8003374 <HAL_ADC_Start+0x188>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0c9a      	lsrs	r2, r3, #18
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003240:	e002      	b.n	8003248 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3b01      	subs	r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f9      	bne.n	8003242 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d175      	bne.n	8003348 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003260:	4b45      	ldr	r3, [pc, #276]	; (8003378 <HAL_ADC_Start+0x18c>)
 8003262:	4013      	ands	r3, r2
 8003264:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003282:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003296:	d106      	bne.n	80032a6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f023 0206 	bic.w	r2, r3, #6
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44
 80032a4:	e002      	b.n	80032ac <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80032be:	4b2f      	ldr	r3, [pc, #188]	; (800337c <HAL_ADC_Start+0x190>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d143      	bne.n	8003360 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	e03a      	b.n	8003360 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a24      	ldr	r2, [pc, #144]	; (8003380 <HAL_ADC_Start+0x194>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d10e      	bne.n	8003312 <HAL_ADC_Start+0x126>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003310:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <HAL_ADC_Start+0x190>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d120      	bne.n	8003360 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a18      	ldr	r2, [pc, #96]	; (8003384 <HAL_ADC_Start+0x198>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d11b      	bne.n	8003360 <HAL_ADC_Start+0x174>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d114      	bne.n	8003360 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003344:	609a      	str	r2, [r3, #8]
 8003346:	e00b      	b.n	8003360 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f043 0210 	orr.w	r2, r3, #16
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f043 0201 	orr.w	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000010 	.word	0x20000010
 8003374:	431bde83 	.word	0x431bde83
 8003378:	fffff8fe 	.word	0xfffff8fe
 800337c:	40012300 	.word	0x40012300
 8003380:	40012000 	.word	0x40012000
 8003384:	40012200 	.word	0x40012200

08003388 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a4:	d113      	bne.n	80033ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b4:	d10b      	bne.n	80033ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f043 0220 	orr.w	r2, r3, #32
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e063      	b.n	8003496 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80033ce:	f7ff fe99 	bl	8003104 <HAL_GetTick>
 80033d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033d4:	e021      	b.n	800341a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d01d      	beq.n	800341a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_ADC_PollForConversion+0x6c>
 80033e4:	f7ff fe8e 	bl	8003104 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d212      	bcs.n	800341a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d00b      	beq.n	800341a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f043 0204 	orr.w	r2, r3, #4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e03d      	b.n	8003496 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d1d6      	bne.n	80033d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0212 	mvn.w	r2, #18
 8003430:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d123      	bne.n	8003494 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003450:	2b00      	cmp	r3, #0
 8003452:	d11f      	bne.n	8003494 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800345e:	2b00      	cmp	r3, #0
 8003460:	d006      	beq.n	8003470 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800346c:	2b00      	cmp	r3, #0
 800346e:	d111      	bne.n	8003494 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f043 0201 	orr.w	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x1c>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e136      	b.n	8003742 <HAL_ADC_ConfigChannel+0x28a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b09      	cmp	r3, #9
 80034e2:	d93a      	bls.n	800355a <HAL_ADC_ConfigChannel+0xa2>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ec:	d035      	beq.n	800355a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68d9      	ldr	r1, [r3, #12]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	3b1e      	subs	r3, #30
 8003504:	2207      	movs	r2, #7
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	400a      	ands	r2, r1
 8003512:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a8d      	ldr	r2, [pc, #564]	; (8003750 <HAL_ADC_ConfigChannel+0x298>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10a      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68d9      	ldr	r1, [r3, #12]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	061a      	lsls	r2, r3, #24
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003532:	e035      	b.n	80035a0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68d9      	ldr	r1, [r3, #12]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	4618      	mov	r0, r3
 8003546:	4603      	mov	r3, r0
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4403      	add	r3, r0
 800354c:	3b1e      	subs	r3, #30
 800354e:	409a      	lsls	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003558:	e022      	b.n	80035a0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6919      	ldr	r1, [r3, #16]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	2207      	movs	r2, #7
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43da      	mvns	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	400a      	ands	r2, r1
 800357c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6919      	ldr	r1, [r3, #16]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	4618      	mov	r0, r3
 8003590:	4603      	mov	r3, r0
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4403      	add	r3, r0
 8003596:	409a      	lsls	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b06      	cmp	r3, #6
 80035a6:	d824      	bhi.n	80035f2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	3b05      	subs	r3, #5
 80035ba:	221f      	movs	r2, #31
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43da      	mvns	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	400a      	ands	r2, r1
 80035c8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	4618      	mov	r0, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	3b05      	subs	r3, #5
 80035e4:	fa00 f203 	lsl.w	r2, r0, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	635a      	str	r2, [r3, #52]	; 0x34
 80035f0:	e04c      	b.n	800368c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b0c      	cmp	r3, #12
 80035f8:	d824      	bhi.n	8003644 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	3b23      	subs	r3, #35	; 0x23
 800360c:	221f      	movs	r2, #31
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	400a      	ands	r2, r1
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	3b23      	subs	r3, #35	; 0x23
 8003636:	fa00 f203 	lsl.w	r2, r0, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
 8003642:	e023      	b.n	800368c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	3b41      	subs	r3, #65	; 0x41
 8003656:	221f      	movs	r2, #31
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43da      	mvns	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	400a      	ands	r2, r1
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	4618      	mov	r0, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	3b41      	subs	r3, #65	; 0x41
 8003680:	fa00 f203 	lsl.w	r2, r0, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a30      	ldr	r2, [pc, #192]	; (8003754 <HAL_ADC_ConfigChannel+0x29c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d10a      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x1f4>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800369e:	d105      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80036a0:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_ADC_ConfigChannel+0x2a0>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <HAL_ADC_ConfigChannel+0x2a0>)
 80036a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80036aa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a28      	ldr	r2, [pc, #160]	; (8003754 <HAL_ADC_ConfigChannel+0x29c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10f      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x21e>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b12      	cmp	r3, #18
 80036bc:	d10b      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80036be:	4b26      	ldr	r3, [pc, #152]	; (8003758 <HAL_ADC_ConfigChannel+0x2a0>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4a25      	ldr	r2, [pc, #148]	; (8003758 <HAL_ADC_ConfigChannel+0x2a0>)
 80036c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036c8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036ca:	4b23      	ldr	r3, [pc, #140]	; (8003758 <HAL_ADC_ConfigChannel+0x2a0>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4a22      	ldr	r2, [pc, #136]	; (8003758 <HAL_ADC_ConfigChannel+0x2a0>)
 80036d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036d4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_ADC_ConfigChannel+0x29c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d12b      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x280>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <HAL_ADC_ConfigChannel+0x298>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d003      	beq.n	80036f2 <HAL_ADC_ConfigChannel+0x23a>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b11      	cmp	r3, #17
 80036f0:	d122      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80036f2:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_ADC_ConfigChannel+0x2a0>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4a18      	ldr	r2, [pc, #96]	; (8003758 <HAL_ADC_ConfigChannel+0x2a0>)
 80036f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036fc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80036fe:	4b16      	ldr	r3, [pc, #88]	; (8003758 <HAL_ADC_ConfigChannel+0x2a0>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4a15      	ldr	r2, [pc, #84]	; (8003758 <HAL_ADC_ConfigChannel+0x2a0>)
 8003704:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003708:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <HAL_ADC_ConfigChannel+0x298>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d111      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <HAL_ADC_ConfigChannel+0x2a4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a11      	ldr	r2, [pc, #68]	; (8003760 <HAL_ADC_ConfigChannel+0x2a8>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0c9a      	lsrs	r2, r3, #18
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800372a:	e002      	b.n	8003732 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3b01      	subs	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f9      	bne.n	800372c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	10000012 	.word	0x10000012
 8003754:	40012000 	.word	0x40012000
 8003758:	40012300 	.word	0x40012300
 800375c:	20000010 	.word	0x20000010
 8003760:	431bde83 	.word	0x431bde83

08003764 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800376c:	4b78      	ldr	r3, [pc, #480]	; (8003950 <ADC_Init+0x1ec>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a77      	ldr	r2, [pc, #476]	; (8003950 <ADC_Init+0x1ec>)
 8003772:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003776:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003778:	4b75      	ldr	r3, [pc, #468]	; (8003950 <ADC_Init+0x1ec>)
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4973      	ldr	r1, [pc, #460]	; (8003950 <ADC_Init+0x1ec>)
 8003782:	4313      	orrs	r3, r2
 8003784:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	021a      	lsls	r2, r3, #8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6899      	ldr	r1, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	4a58      	ldr	r2, [pc, #352]	; (8003954 <ADC_Init+0x1f0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d022      	beq.n	800383e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003806:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6899      	ldr	r1, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6899      	ldr	r1, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	e00f      	b.n	800385e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800384c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800385c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0202 	bic.w	r2, r2, #2
 800386c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6899      	ldr	r1, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	005a      	lsls	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	3b01      	subs	r3, #1
 80038b8:	035a      	lsls	r2, r3, #13
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	e007      	b.n	80038d4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	051a      	lsls	r2, r3, #20
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6899      	ldr	r1, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003916:	025a      	lsls	r2, r3, #9
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6899      	ldr	r1, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	029a      	lsls	r2, r3, #10
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40012300 	.word	0x40012300
 8003954:	0f000001 	.word	0x0f000001

08003958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <__NVIC_SetPriorityGrouping+0x40>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <__NVIC_SetPriorityGrouping+0x44>)
 8003982:	4313      	orrs	r3, r2
 8003984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003986:	4a04      	ldr	r2, [pc, #16]	; (8003998 <__NVIC_SetPriorityGrouping+0x40>)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	60d3      	str	r3, [r2, #12]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000ed00 	.word	0xe000ed00
 800399c:	05fa0000 	.word	0x05fa0000

080039a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <__NVIC_GetPriorityGrouping+0x18>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	f003 0307 	and.w	r3, r3, #7
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	db0b      	blt.n	80039e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	f003 021f 	and.w	r2, r3, #31
 80039d4:	4907      	ldr	r1, [pc, #28]	; (80039f4 <__NVIC_EnableIRQ+0x38>)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2001      	movs	r0, #1
 80039de:	fa00 f202 	lsl.w	r2, r0, r2
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000e100 	.word	0xe000e100

080039f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	db0a      	blt.n	8003a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	490c      	ldr	r1, [pc, #48]	; (8003a44 <__NVIC_SetPriority+0x4c>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	0112      	lsls	r2, r2, #4
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a20:	e00a      	b.n	8003a38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4908      	ldr	r1, [pc, #32]	; (8003a48 <__NVIC_SetPriority+0x50>)
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	3b04      	subs	r3, #4
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	440b      	add	r3, r1
 8003a36:	761a      	strb	r2, [r3, #24]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000e100 	.word	0xe000e100
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f1c3 0307 	rsb	r3, r3, #7
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	bf28      	it	cs
 8003a6a:	2304      	movcs	r3, #4
 8003a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d902      	bls.n	8003a7c <NVIC_EncodePriority+0x30>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3b03      	subs	r3, #3
 8003a7a:	e000      	b.n	8003a7e <NVIC_EncodePriority+0x32>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	f04f 32ff 	mov.w	r2, #4294967295
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	401a      	ands	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	43d9      	mvns	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa4:	4313      	orrs	r3, r2
         );
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac4:	d301      	bcc.n	8003aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00f      	b.n	8003aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <SysTick_Config+0x40>)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad2:	210f      	movs	r1, #15
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	f7ff ff8e 	bl	80039f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <SysTick_Config+0x40>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae2:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <SysTick_Config+0x40>)
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	e000e010 	.word	0xe000e010

08003af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff29 	bl	8003958 <__NVIC_SetPriorityGrouping>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4603      	mov	r3, r0
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b20:	f7ff ff3e 	bl	80039a0 <__NVIC_GetPriorityGrouping>
 8003b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	6978      	ldr	r0, [r7, #20]
 8003b2c:	f7ff ff8e 	bl	8003a4c <NVIC_EncodePriority>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff5d 	bl	80039f8 <__NVIC_SetPriority>
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff31 	bl	80039bc <__NVIC_EnableIRQ>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff ffa2 	bl	8003ab4 <SysTick_Config>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b86:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b88:	f7ff fabc 	bl	8003104 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d008      	beq.n	8003bac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e052      	b.n	8003c52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0216 	bic.w	r2, r2, #22
 8003bba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d103      	bne.n	8003bdc <HAL_DMA_Abort+0x62>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0208 	bic.w	r2, r2, #8
 8003bea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bfc:	e013      	b.n	8003c26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bfe:	f7ff fa81 	bl	8003104 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	d90c      	bls.n	8003c26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2203      	movs	r2, #3
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e015      	b.n	8003c52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e4      	bne.n	8003bfe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	223f      	movs	r2, #63	; 0x3f
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d004      	beq.n	8003c78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e00c      	b.n	8003c92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2205      	movs	r2, #5
 8003c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	; 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e175      	b.n	8003fac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	f040 8164 	bne.w	8003fa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d005      	beq.n	8003cf6 <HAL_GPIO_Init+0x56>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d130      	bne.n	8003d58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 0201 	and.w	r2, r3, #1
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d017      	beq.n	8003d94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	2203      	movs	r2, #3
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d123      	bne.n	8003de8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	08da      	lsrs	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3208      	adds	r2, #8
 8003da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	220f      	movs	r2, #15
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	08da      	lsrs	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3208      	adds	r2, #8
 8003de2:	69b9      	ldr	r1, [r7, #24]
 8003de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	2203      	movs	r2, #3
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0203 	and.w	r2, r3, #3
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80be 	beq.w	8003fa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2a:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_GPIO_Init+0x324>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	4a65      	ldr	r2, [pc, #404]	; (8003fc4 <HAL_GPIO_Init+0x324>)
 8003e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e34:	6453      	str	r3, [r2, #68]	; 0x44
 8003e36:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_GPIO_Init+0x324>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e42:	4a61      	ldr	r2, [pc, #388]	; (8003fc8 <HAL_GPIO_Init+0x328>)
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	089b      	lsrs	r3, r3, #2
 8003e48:	3302      	adds	r3, #2
 8003e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	220f      	movs	r2, #15
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a58      	ldr	r2, [pc, #352]	; (8003fcc <HAL_GPIO_Init+0x32c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d037      	beq.n	8003ede <HAL_GPIO_Init+0x23e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a57      	ldr	r2, [pc, #348]	; (8003fd0 <HAL_GPIO_Init+0x330>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d031      	beq.n	8003eda <HAL_GPIO_Init+0x23a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a56      	ldr	r2, [pc, #344]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d02b      	beq.n	8003ed6 <HAL_GPIO_Init+0x236>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a55      	ldr	r2, [pc, #340]	; (8003fd8 <HAL_GPIO_Init+0x338>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d025      	beq.n	8003ed2 <HAL_GPIO_Init+0x232>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a54      	ldr	r2, [pc, #336]	; (8003fdc <HAL_GPIO_Init+0x33c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01f      	beq.n	8003ece <HAL_GPIO_Init+0x22e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a53      	ldr	r2, [pc, #332]	; (8003fe0 <HAL_GPIO_Init+0x340>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d019      	beq.n	8003eca <HAL_GPIO_Init+0x22a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a52      	ldr	r2, [pc, #328]	; (8003fe4 <HAL_GPIO_Init+0x344>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_GPIO_Init+0x226>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a51      	ldr	r2, [pc, #324]	; (8003fe8 <HAL_GPIO_Init+0x348>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00d      	beq.n	8003ec2 <HAL_GPIO_Init+0x222>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a50      	ldr	r2, [pc, #320]	; (8003fec <HAL_GPIO_Init+0x34c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <HAL_GPIO_Init+0x21e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a4f      	ldr	r2, [pc, #316]	; (8003ff0 <HAL_GPIO_Init+0x350>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_GPIO_Init+0x21a>
 8003eb6:	2309      	movs	r3, #9
 8003eb8:	e012      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003eba:	230a      	movs	r3, #10
 8003ebc:	e010      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	e00e      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ec2:	2307      	movs	r3, #7
 8003ec4:	e00c      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ec6:	2306      	movs	r3, #6
 8003ec8:	e00a      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003eca:	2305      	movs	r3, #5
 8003ecc:	e008      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ece:	2304      	movs	r3, #4
 8003ed0:	e006      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e004      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e002      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <HAL_GPIO_Init+0x240>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	f002 0203 	and.w	r2, r2, #3
 8003ee6:	0092      	lsls	r2, r2, #2
 8003ee8:	4093      	lsls	r3, r2
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ef0:	4935      	ldr	r1, [pc, #212]	; (8003fc8 <HAL_GPIO_Init+0x328>)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	089b      	lsrs	r3, r3, #2
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f22:	4a34      	ldr	r2, [pc, #208]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f28:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f4c:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f52:	4b28      	ldr	r3, [pc, #160]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f76:	4a1f      	ldr	r2, [pc, #124]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fa0:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <HAL_GPIO_Init+0x354>)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b0f      	cmp	r3, #15
 8003fb0:	f67f ae86 	bls.w	8003cc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	3724      	adds	r7, #36	; 0x24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40013800 	.word	0x40013800
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	40020400 	.word	0x40020400
 8003fd4:	40020800 	.word	0x40020800
 8003fd8:	40020c00 	.word	0x40020c00
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40021400 	.word	0x40021400
 8003fe4:	40021800 	.word	0x40021800
 8003fe8:	40021c00 	.word	0x40021c00
 8003fec:	40022000 	.word	0x40022000
 8003ff0:	40022400 	.word	0x40022400
 8003ff4:	40013c00 	.word	0x40013c00

08003ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
 8004014:	e001      	b.n	800401a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
 8004034:	4613      	mov	r3, r2
 8004036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004038:	787b      	ldrb	r3, [r7, #1]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800403e:	887a      	ldrh	r2, [r7, #2]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004044:	e003      	b.n	800404e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004046:	887b      	ldrh	r3, [r7, #2]
 8004048:	041a      	lsls	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	619a      	str	r2, [r3, #24]
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e07f      	b.n	800416e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd fd68 	bl	8001b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	; 0x24
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	e006      	b.n	80040e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d104      	bne.n	80040f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <HAL_I2C_Init+0x11c>)
 8004102:	430b      	orrs	r3, r1
 8004104:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004114:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69d9      	ldr	r1, [r3, #28]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1a      	ldr	r2, [r3, #32]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	02008000 	.word	0x02008000

0800417c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	461a      	mov	r2, r3
 8004188:	460b      	mov	r3, r1
 800418a:	817b      	strh	r3, [r7, #10]
 800418c:	4613      	mov	r3, r2
 800418e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b20      	cmp	r3, #32
 800419a:	f040 80da 	bne.w	8004352 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_I2C_Master_Transmit+0x30>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e0d3      	b.n	8004354 <HAL_I2C_Master_Transmit+0x1d8>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041b4:	f7fe ffa6 	bl	8003104 <HAL_GetTick>
 80041b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	2319      	movs	r3, #25
 80041c0:	2201      	movs	r2, #1
 80041c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fb4e 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0be      	b.n	8004354 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2221      	movs	r2, #33	; 0x21
 80041da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2210      	movs	r2, #16
 80041e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	893a      	ldrh	r2, [r7, #8]
 80041f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	2bff      	cmp	r3, #255	; 0xff
 8004206:	d90e      	bls.n	8004226 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	22ff      	movs	r2, #255	; 0xff
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	b2da      	uxtb	r2, r3
 8004214:	8979      	ldrh	r1, [r7, #10]
 8004216:	4b51      	ldr	r3, [pc, #324]	; (800435c <HAL_I2C_Master_Transmit+0x1e0>)
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fd38 	bl	8004c94 <I2C_TransferConfig>
 8004224:	e06c      	b.n	8004300 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004234:	b2da      	uxtb	r2, r3
 8004236:	8979      	ldrh	r1, [r7, #10]
 8004238:	4b48      	ldr	r3, [pc, #288]	; (800435c <HAL_I2C_Master_Transmit+0x1e0>)
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fd27 	bl	8004c94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004246:	e05b      	b.n	8004300 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	6a39      	ldr	r1, [r7, #32]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fb4b 	bl	80048e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e07b      	b.n	8004354 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d034      	beq.n	8004300 <HAL_I2C_Master_Transmit+0x184>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d130      	bne.n	8004300 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	2200      	movs	r2, #0
 80042a6:	2180      	movs	r1, #128	; 0x80
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fadd 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e04d      	b.n	8004354 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2bff      	cmp	r3, #255	; 0xff
 80042c0:	d90e      	bls.n	80042e0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	22ff      	movs	r2, #255	; 0xff
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	8979      	ldrh	r1, [r7, #10]
 80042d0:	2300      	movs	r3, #0
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fcdb 	bl	8004c94 <I2C_TransferConfig>
 80042de:	e00f      	b.n	8004300 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	8979      	ldrh	r1, [r7, #10]
 80042f2:	2300      	movs	r3, #0
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fcca 	bl	8004c94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d19e      	bne.n	8004248 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	6a39      	ldr	r1, [r7, #32]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fb2a 	bl	8004968 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e01a      	b.n	8004354 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2220      	movs	r2, #32
 8004324:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_I2C_Master_Transmit+0x1e4>)
 8004332:	400b      	ands	r3, r1
 8004334:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	e000      	b.n	8004354 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004352:	2302      	movs	r3, #2
  }
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	80002000 	.word	0x80002000
 8004360:	fe00e800 	.word	0xfe00e800

08004364 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	461a      	mov	r2, r3
 8004370:	460b      	mov	r3, r1
 8004372:	817b      	strh	r3, [r7, #10]
 8004374:	4613      	mov	r3, r2
 8004376:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b20      	cmp	r3, #32
 8004382:	f040 80db 	bne.w	800453c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_I2C_Master_Receive+0x30>
 8004390:	2302      	movs	r3, #2
 8004392:	e0d4      	b.n	800453e <HAL_I2C_Master_Receive+0x1da>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800439c:	f7fe feb2 	bl	8003104 <HAL_GetTick>
 80043a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	2319      	movs	r3, #25
 80043a8:	2201      	movs	r2, #1
 80043aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fa5a 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0bf      	b.n	800453e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2222      	movs	r2, #34	; 0x22
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2210      	movs	r2, #16
 80043ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	893a      	ldrh	r2, [r7, #8]
 80043de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2bff      	cmp	r3, #255	; 0xff
 80043ee:	d90e      	bls.n	800440e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	22ff      	movs	r2, #255	; 0xff
 80043f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	8979      	ldrh	r1, [r7, #10]
 80043fe:	4b52      	ldr	r3, [pc, #328]	; (8004548 <HAL_I2C_Master_Receive+0x1e4>)
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fc44 	bl	8004c94 <I2C_TransferConfig>
 800440c:	e06d      	b.n	80044ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	b2da      	uxtb	r2, r3
 800441e:	8979      	ldrh	r1, [r7, #10]
 8004420:	4b49      	ldr	r3, [pc, #292]	; (8004548 <HAL_I2C_Master_Receive+0x1e4>)
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fc33 	bl	8004c94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800442e:	e05c      	b.n	80044ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	6a39      	ldr	r1, [r7, #32]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fad3 	bl	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e07c      	b.n	800453e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d034      	beq.n	80044ea <HAL_I2C_Master_Receive+0x186>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	2b00      	cmp	r3, #0
 8004486:	d130      	bne.n	80044ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	2200      	movs	r2, #0
 8004490:	2180      	movs	r1, #128	; 0x80
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f9e8 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e04d      	b.n	800453e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2bff      	cmp	r3, #255	; 0xff
 80044aa:	d90e      	bls.n	80044ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	22ff      	movs	r2, #255	; 0xff
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	8979      	ldrh	r1, [r7, #10]
 80044ba:	2300      	movs	r3, #0
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fbe6 	bl	8004c94 <I2C_TransferConfig>
 80044c8:	e00f      	b.n	80044ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	8979      	ldrh	r1, [r7, #10]
 80044dc:	2300      	movs	r3, #0
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fbd5 	bl	8004c94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d19d      	bne.n	8004430 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	6a39      	ldr	r1, [r7, #32]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fa35 	bl	8004968 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e01a      	b.n	800453e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2220      	movs	r2, #32
 800450e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <HAL_I2C_Master_Receive+0x1e8>)
 800451c:	400b      	ands	r3, r1
 800451e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	80002400 	.word	0x80002400
 800454c:	fe00e800 	.word	0xfe00e800

08004550 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	4608      	mov	r0, r1
 800455a:	4611      	mov	r1, r2
 800455c:	461a      	mov	r2, r3
 800455e:	4603      	mov	r3, r0
 8004560:	817b      	strh	r3, [r7, #10]
 8004562:	460b      	mov	r3, r1
 8004564:	813b      	strh	r3, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b20      	cmp	r3, #32
 8004574:	f040 80f9 	bne.w	800476a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_I2C_Mem_Write+0x34>
 800457e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0ed      	b.n	800476c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_I2C_Mem_Write+0x4e>
 800459a:	2302      	movs	r3, #2
 800459c:	e0e6      	b.n	800476c <HAL_I2C_Mem_Write+0x21c>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045a6:	f7fe fdad 	bl	8003104 <HAL_GetTick>
 80045aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	2319      	movs	r3, #25
 80045b2:	2201      	movs	r2, #1
 80045b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f955 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0d1      	b.n	800476c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2221      	movs	r2, #33	; 0x21
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2240      	movs	r2, #64	; 0x40
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045f0:	88f8      	ldrh	r0, [r7, #6]
 80045f2:	893a      	ldrh	r2, [r7, #8]
 80045f4:	8979      	ldrh	r1, [r7, #10]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	4603      	mov	r3, r0
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f8b9 	bl	8004778 <I2C_RequestMemoryWrite>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0a9      	b.n	800476c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	2bff      	cmp	r3, #255	; 0xff
 8004620:	d90e      	bls.n	8004640 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	22ff      	movs	r2, #255	; 0xff
 8004626:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462c:	b2da      	uxtb	r2, r3
 800462e:	8979      	ldrh	r1, [r7, #10]
 8004630:	2300      	movs	r3, #0
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fb2b 	bl	8004c94 <I2C_TransferConfig>
 800463e:	e00f      	b.n	8004660 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464e:	b2da      	uxtb	r2, r3
 8004650:	8979      	ldrh	r1, [r7, #10]
 8004652:	2300      	movs	r3, #0
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fb1a 	bl	8004c94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f93f 	bl	80048e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e07b      	b.n	800476c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d034      	beq.n	8004718 <HAL_I2C_Mem_Write+0x1c8>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d130      	bne.n	8004718 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	2200      	movs	r2, #0
 80046be:	2180      	movs	r1, #128	; 0x80
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f8d1 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e04d      	b.n	800476c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2bff      	cmp	r3, #255	; 0xff
 80046d8:	d90e      	bls.n	80046f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	22ff      	movs	r2, #255	; 0xff
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	8979      	ldrh	r1, [r7, #10]
 80046e8:	2300      	movs	r3, #0
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 facf 	bl	8004c94 <I2C_TransferConfig>
 80046f6:	e00f      	b.n	8004718 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004706:	b2da      	uxtb	r2, r3
 8004708:	8979      	ldrh	r1, [r7, #10]
 800470a:	2300      	movs	r3, #0
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 fabe 	bl	8004c94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d19e      	bne.n	8004660 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f91e 	bl	8004968 <I2C_WaitOnSTOPFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e01a      	b.n	800476c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2220      	movs	r2, #32
 800473c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <HAL_I2C_Mem_Write+0x224>)
 800474a:	400b      	ands	r3, r1
 800474c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e000      	b.n	800476c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800476a:	2302      	movs	r3, #2
  }
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	fe00e800 	.word	0xfe00e800

08004778 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	4608      	mov	r0, r1
 8004782:	4611      	mov	r1, r2
 8004784:	461a      	mov	r2, r3
 8004786:	4603      	mov	r3, r0
 8004788:	817b      	strh	r3, [r7, #10]
 800478a:	460b      	mov	r3, r1
 800478c:	813b      	strh	r3, [r7, #8]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	8979      	ldrh	r1, [r7, #10]
 8004798:	4b20      	ldr	r3, [pc, #128]	; (800481c <I2C_RequestMemoryWrite+0xa4>)
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fa77 	bl	8004c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	69b9      	ldr	r1, [r7, #24]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f89c 	bl	80048e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e02c      	b.n	8004814 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d105      	bne.n	80047cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047c0:	893b      	ldrh	r3, [r7, #8]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28
 80047ca:	e015      	b.n	80047f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047cc:	893b      	ldrh	r3, [r7, #8]
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	69b9      	ldr	r1, [r7, #24]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f882 	bl	80048e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e012      	b.n	8004814 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047ee:	893b      	ldrh	r3, [r7, #8]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2200      	movs	r2, #0
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f830 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	80002000 	.word	0x80002000

08004820 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b02      	cmp	r3, #2
 8004834:	d103      	bne.n	800483e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2200      	movs	r2, #0
 800483c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b01      	cmp	r3, #1
 800484a:	d007      	beq.n	800485c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	619a      	str	r2, [r3, #24]
  }
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004878:	e022      	b.n	80048c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d01e      	beq.n	80048c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004882:	f7fe fc3f 	bl	8003104 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d302      	bcc.n	8004898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d113      	bne.n	80048c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	f043 0220 	orr.w	r2, r3, #32
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e00f      	b.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4013      	ands	r3, r2
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	bf0c      	ite	eq
 80048d0:	2301      	moveq	r3, #1
 80048d2:	2300      	movne	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d0cd      	beq.n	800487a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048f4:	e02c      	b.n	8004950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f8ea 	bl	8004ad4 <I2C_IsErrorOccurred>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e02a      	b.n	8004960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d01e      	beq.n	8004950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004912:	f7fe fbf7 	bl	8003104 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d113      	bne.n	8004950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e007      	b.n	8004960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d1cb      	bne.n	80048f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004974:	e028      	b.n	80049c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f8aa 	bl	8004ad4 <I2C_IsErrorOccurred>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e026      	b.n	80049d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498a:	f7fe fbbb 	bl	8003104 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	d302      	bcc.n	80049a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d113      	bne.n	80049c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e007      	b.n	80049d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d1cf      	bne.n	8004976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049ec:	e064      	b.n	8004ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f86e 	bl	8004ad4 <I2C_IsErrorOccurred>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e062      	b.n	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d138      	bne.n	8004a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d105      	bne.n	8004a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e04e      	b.n	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d107      	bne.n	8004a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2210      	movs	r2, #16
 8004a3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2204      	movs	r2, #4
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44
 8004a46:	e002      	b.n	8004a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2220      	movs	r2, #32
 8004a54:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6859      	ldr	r1, [r3, #4]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004a62:	400b      	ands	r3, r1
 8004a64:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e022      	b.n	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a82:	f7fe fb3f 	bl	8003104 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d302      	bcc.n	8004a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10f      	bne.n	8004ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	f043 0220 	orr.w	r2, r3, #32
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e007      	b.n	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d193      	bne.n	80049ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	fe00e800 	.word	0xfe00e800

08004ad4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	; 0x28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d068      	beq.n	8004bd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2210      	movs	r2, #16
 8004b06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b08:	e049      	b.n	8004b9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d045      	beq.n	8004b9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fe faf7 	bl	8003104 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <I2C_IsErrorOccurred+0x54>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d13a      	bne.n	8004b9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4a:	d121      	bne.n	8004b90 <I2C_IsErrorOccurred+0xbc>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b52:	d01d      	beq.n	8004b90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d01a      	beq.n	8004b90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b6a:	f7fe facb 	bl	8003104 <HAL_GetTick>
 8004b6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b70:	e00e      	b.n	8004b90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b72:	f7fe fac7 	bl	8003104 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b19      	cmp	r3, #25
 8004b7e:	d907      	bls.n	8004b90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	f043 0320 	orr.w	r3, r3, #32
 8004b86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004b8e:	e006      	b.n	8004b9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d1e9      	bne.n	8004b72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d003      	beq.n	8004bb4 <I2C_IsErrorOccurred+0xe0>
 8004bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0aa      	beq.n	8004b0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d103      	bne.n	8004bc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	f043 0304 	orr.w	r3, r3, #4
 8004bca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	f043 0308 	orr.w	r3, r3, #8
 8004c0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	f043 0302 	orr.w	r3, r3, #2
 8004c2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01c      	beq.n	8004c82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7ff fde9 	bl	8004820 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <I2C_IsErrorOccurred+0x1bc>)
 8004c5a:	400b      	ands	r3, r1
 8004c5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	431a      	orrs	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3728      	adds	r7, #40	; 0x28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	fe00e800 	.word	0xfe00e800

08004c94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	607b      	str	r3, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	817b      	strh	r3, [r7, #10]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ca6:	897b      	ldrh	r3, [r7, #10]
 8004ca8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cac:	7a7b      	ldrb	r3, [r7, #9]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cc2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	0d5b      	lsrs	r3, r3, #21
 8004cce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <I2C_TransferConfig+0x60>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	ea02 0103 	and.w	r1, r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	03ff63ff 	.word	0x03ff63ff

08004cf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d138      	bne.n	8004d80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e032      	b.n	8004d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2224      	movs	r2, #36	; 0x24
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b085      	sub	sp, #20
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d139      	bne.n	8004e18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e033      	b.n	8004e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2224      	movs	r2, #36	; 0x24
 8004dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004de0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e36:	6013      	str	r3, [r2, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40007000 	.word	0x40007000

08004e48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e52:	4b23      	ldr	r3, [pc, #140]	; (8004ee0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4a22      	ldr	r2, [pc, #136]	; (8004ee0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5e:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e76:	f7fe f945 	bl	8003104 <HAL_GetTick>
 8004e7a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e7c:	e009      	b.n	8004e92 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e7e:	f7fe f941 	bl	8003104 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e8c:	d901      	bls.n	8004e92 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e022      	b.n	8004ed8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e92:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9e:	d1ee      	bne.n	8004e7e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ea0:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a0f      	ldr	r2, [pc, #60]	; (8004ee4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eaa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004eac:	f7fe f92a 	bl	8003104 <HAL_GetTick>
 8004eb0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004eb2:	e009      	b.n	8004ec8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004eb4:	f7fe f926 	bl	8003104 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ec2:	d901      	bls.n	8004ec8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e007      	b.n	8004ed8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed4:	d1ee      	bne.n	8004eb4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40007000 	.word	0x40007000

08004ee8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e291      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 8087 	beq.w	800501a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f0c:	4b96      	ldr	r3, [pc, #600]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 030c 	and.w	r3, r3, #12
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d00c      	beq.n	8004f32 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f18:	4b93      	ldr	r3, [pc, #588]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d112      	bne.n	8004f4a <HAL_RCC_OscConfig+0x62>
 8004f24:	4b90      	ldr	r3, [pc, #576]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f30:	d10b      	bne.n	8004f4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f32:	4b8d      	ldr	r3, [pc, #564]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d06c      	beq.n	8005018 <HAL_RCC_OscConfig+0x130>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d168      	bne.n	8005018 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e26b      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f52:	d106      	bne.n	8004f62 <HAL_RCC_OscConfig+0x7a>
 8004f54:	4b84      	ldr	r3, [pc, #528]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a83      	ldr	r2, [pc, #524]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	e02e      	b.n	8004fc0 <HAL_RCC_OscConfig+0xd8>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCC_OscConfig+0x9c>
 8004f6a:	4b7f      	ldr	r3, [pc, #508]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a7e      	ldr	r2, [pc, #504]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	4b7c      	ldr	r3, [pc, #496]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a7b      	ldr	r2, [pc, #492]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e01d      	b.n	8004fc0 <HAL_RCC_OscConfig+0xd8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0xc0>
 8004f8e:	4b76      	ldr	r3, [pc, #472]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a75      	ldr	r2, [pc, #468]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	4b73      	ldr	r3, [pc, #460]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a72      	ldr	r2, [pc, #456]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCC_OscConfig+0xd8>
 8004fa8:	4b6f      	ldr	r3, [pc, #444]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a6e      	ldr	r2, [pc, #440]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	4b6c      	ldr	r3, [pc, #432]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a6b      	ldr	r2, [pc, #428]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d013      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fe f89c 	bl	8003104 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd0:	f7fe f898 	bl	8003104 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	; 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e21f      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe2:	4b61      	ldr	r3, [pc, #388]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0xe8>
 8004fee:	e014      	b.n	800501a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff0:	f7fe f888 	bl	8003104 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff8:	f7fe f884 	bl	8003104 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	; 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e20b      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500a:	4b57      	ldr	r3, [pc, #348]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x110>
 8005016:	e000      	b.n	800501a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d069      	beq.n	80050fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005026:	4b50      	ldr	r3, [pc, #320]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005032:	4b4d      	ldr	r3, [pc, #308]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	2b08      	cmp	r3, #8
 800503c:	d11c      	bne.n	8005078 <HAL_RCC_OscConfig+0x190>
 800503e:	4b4a      	ldr	r3, [pc, #296]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d116      	bne.n	8005078 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_RCC_OscConfig+0x17a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d001      	beq.n	8005062 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e1df      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b41      	ldr	r3, [pc, #260]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	493d      	ldr	r1, [pc, #244]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005076:	e040      	b.n	80050fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d023      	beq.n	80050c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005080:	4b39      	ldr	r3, [pc, #228]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a38      	ldr	r2, [pc, #224]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fe f83a 	bl	8003104 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005094:	f7fe f836 	bl	8003104 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e1bd      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a6:	4b30      	ldr	r3, [pc, #192]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0f0      	beq.n	8005094 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b2:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4929      	ldr	r1, [pc, #164]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]
 80050c6:	e018      	b.n	80050fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c8:	4b27      	ldr	r3, [pc, #156]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a26      	ldr	r2, [pc, #152]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fe f816 	bl	8003104 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050dc:	f7fe f812 	bl	8003104 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e199      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ee:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d038      	beq.n	8005178 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d019      	beq.n	8005142 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800510e:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005112:	4a15      	ldr	r2, [pc, #84]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511a:	f7fd fff3 	bl	8003104 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005122:	f7fd ffef 	bl	8003104 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e176      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x23a>
 8005140:	e01a      	b.n	8005178 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005146:	4a08      	ldr	r2, [pc, #32]	; (8005168 <HAL_RCC_OscConfig+0x280>)
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514e:	f7fd ffd9 	bl	8003104 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005154:	e00a      	b.n	800516c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005156:	f7fd ffd5 	bl	8003104 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d903      	bls.n	800516c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e15c      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
 8005168:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516c:	4b91      	ldr	r3, [pc, #580]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 800516e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1ee      	bne.n	8005156 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80a4 	beq.w	80052ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005186:	4b8b      	ldr	r3, [pc, #556]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10d      	bne.n	80051ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005192:	4b88      	ldr	r3, [pc, #544]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	4a87      	ldr	r2, [pc, #540]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519c:	6413      	str	r3, [r2, #64]	; 0x40
 800519e:	4b85      	ldr	r3, [pc, #532]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	60bb      	str	r3, [r7, #8]
 80051a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ae:	4b82      	ldr	r3, [pc, #520]	; (80053b8 <HAL_RCC_OscConfig+0x4d0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d118      	bne.n	80051ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80051ba:	4b7f      	ldr	r3, [pc, #508]	; (80053b8 <HAL_RCC_OscConfig+0x4d0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7e      	ldr	r2, [pc, #504]	; (80053b8 <HAL_RCC_OscConfig+0x4d0>)
 80051c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c6:	f7fd ff9d 	bl	8003104 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ce:	f7fd ff99 	bl	8003104 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b64      	cmp	r3, #100	; 0x64
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e120      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e0:	4b75      	ldr	r3, [pc, #468]	; (80053b8 <HAL_RCC_OscConfig+0x4d0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d106      	bne.n	8005202 <HAL_RCC_OscConfig+0x31a>
 80051f4:	4b6f      	ldr	r3, [pc, #444]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	4a6e      	ldr	r2, [pc, #440]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005200:	e02d      	b.n	800525e <HAL_RCC_OscConfig+0x376>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10c      	bne.n	8005224 <HAL_RCC_OscConfig+0x33c>
 800520a:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	4a69      	ldr	r2, [pc, #420]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	6713      	str	r3, [r2, #112]	; 0x70
 8005216:	4b67      	ldr	r3, [pc, #412]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	4a66      	ldr	r2, [pc, #408]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 800521c:	f023 0304 	bic.w	r3, r3, #4
 8005220:	6713      	str	r3, [r2, #112]	; 0x70
 8005222:	e01c      	b.n	800525e <HAL_RCC_OscConfig+0x376>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b05      	cmp	r3, #5
 800522a:	d10c      	bne.n	8005246 <HAL_RCC_OscConfig+0x35e>
 800522c:	4b61      	ldr	r3, [pc, #388]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a60      	ldr	r2, [pc, #384]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005232:	f043 0304 	orr.w	r3, r3, #4
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
 8005238:	4b5e      	ldr	r3, [pc, #376]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4a5d      	ldr	r2, [pc, #372]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	; 0x70
 8005244:	e00b      	b.n	800525e <HAL_RCC_OscConfig+0x376>
 8005246:	4b5b      	ldr	r3, [pc, #364]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a5a      	ldr	r2, [pc, #360]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
 8005252:	4b58      	ldr	r3, [pc, #352]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	4a57      	ldr	r2, [pc, #348]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005258:	f023 0304 	bic.w	r3, r3, #4
 800525c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d015      	beq.n	8005292 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005266:	f7fd ff4d 	bl	8003104 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526c:	e00a      	b.n	8005284 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526e:	f7fd ff49 	bl	8003104 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	f241 3288 	movw	r2, #5000	; 0x1388
 800527c:	4293      	cmp	r3, r2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e0ce      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005284:	4b4b      	ldr	r3, [pc, #300]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ee      	beq.n	800526e <HAL_RCC_OscConfig+0x386>
 8005290:	e014      	b.n	80052bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005292:	f7fd ff37 	bl	8003104 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005298:	e00a      	b.n	80052b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529a:	f7fd ff33 	bl	8003104 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e0b8      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b0:	4b40      	ldr	r3, [pc, #256]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1ee      	bne.n	800529a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d105      	bne.n	80052ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c2:	4b3c      	ldr	r3, [pc, #240]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	4a3b      	ldr	r2, [pc, #236]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 80052c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80a4 	beq.w	8005420 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d8:	4b36      	ldr	r3, [pc, #216]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d06b      	beq.n	80053bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d149      	bne.n	8005380 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ec:	4b31      	ldr	r3, [pc, #196]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a30      	ldr	r2, [pc, #192]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 80052f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fd ff04 	bl	8003104 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005300:	f7fd ff00 	bl	8003104 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e087      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	019b      	lsls	r3, r3, #6
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	3b01      	subs	r3, #1
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	4313      	orrs	r3, r2
 8005344:	4a1b      	ldr	r2, [pc, #108]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800534a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800534c:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fd fed4 	bl	8003104 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005360:	f7fd fed0 	bl	8003104 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e057      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x478>
 800537e:	e04f      	b.n	8005420 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a0b      	ldr	r2, [pc, #44]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 8005386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800538a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7fd feba 	bl	8003104 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005394:	f7fd feb6 	bl	8003104 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e03d      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a6:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <HAL_RCC_OscConfig+0x4cc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f0      	bne.n	8005394 <HAL_RCC_OscConfig+0x4ac>
 80053b2:	e035      	b.n	8005420 <HAL_RCC_OscConfig+0x538>
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80053bc:	4b1b      	ldr	r3, [pc, #108]	; (800542c <HAL_RCC_OscConfig+0x544>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d028      	beq.n	800541c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d121      	bne.n	800541c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d11a      	bne.n	800541c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ec:	4013      	ands	r3, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d111      	bne.n	800541c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	3b01      	subs	r3, #1
 8005406:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005408:	429a      	cmp	r2, r3
 800540a:	d107      	bne.n	800541c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40023800 	.word	0x40023800

08005430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0d0      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005448:	4b6a      	ldr	r3, [pc, #424]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 030f 	and.w	r3, r3, #15
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d910      	bls.n	8005478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005456:	4b67      	ldr	r3, [pc, #412]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 020f 	bic.w	r2, r3, #15
 800545e:	4965      	ldr	r1, [pc, #404]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	4313      	orrs	r3, r2
 8005464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005466:	4b63      	ldr	r3, [pc, #396]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d001      	beq.n	8005478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0b8      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d020      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d005      	beq.n	800549c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005490:	4b59      	ldr	r3, [pc, #356]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4a58      	ldr	r2, [pc, #352]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800549a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054a8:	4b53      	ldr	r3, [pc, #332]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4a52      	ldr	r2, [pc, #328]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b4:	4b50      	ldr	r3, [pc, #320]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	494d      	ldr	r1, [pc, #308]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d040      	beq.n	8005554 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d107      	bne.n	80054ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054da:	4b47      	ldr	r3, [pc, #284]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d115      	bne.n	8005512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e07f      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d107      	bne.n	8005502 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f2:	4b41      	ldr	r3, [pc, #260]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e073      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005502:	4b3d      	ldr	r3, [pc, #244]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e06b      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005512:	4b39      	ldr	r3, [pc, #228]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f023 0203 	bic.w	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4936      	ldr	r1, [pc, #216]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005520:	4313      	orrs	r3, r2
 8005522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005524:	f7fd fdee 	bl	8003104 <HAL_GetTick>
 8005528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552a:	e00a      	b.n	8005542 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800552c:	f7fd fdea 	bl	8003104 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f241 3288 	movw	r2, #5000	; 0x1388
 800553a:	4293      	cmp	r3, r2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e053      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005542:	4b2d      	ldr	r3, [pc, #180]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 020c 	and.w	r2, r3, #12
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	429a      	cmp	r2, r3
 8005552:	d1eb      	bne.n	800552c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005554:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d210      	bcs.n	8005584 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005562:	4b24      	ldr	r3, [pc, #144]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f023 020f 	bic.w	r2, r3, #15
 800556a:	4922      	ldr	r1, [pc, #136]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	4313      	orrs	r3, r2
 8005570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005572:	4b20      	ldr	r3, [pc, #128]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d001      	beq.n	8005584 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e032      	b.n	80055ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005590:	4b19      	ldr	r3, [pc, #100]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4916      	ldr	r1, [pc, #88]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055ae:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	490e      	ldr	r1, [pc, #56]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055c2:	f000 f821 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 80055c6:	4602      	mov	r2, r0
 80055c8:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	490a      	ldr	r1, [pc, #40]	; (80055fc <HAL_RCC_ClockConfig+0x1cc>)
 80055d4:	5ccb      	ldrb	r3, [r1, r3]
 80055d6:	fa22 f303 	lsr.w	r3, r2, r3
 80055da:	4a09      	ldr	r2, [pc, #36]	; (8005600 <HAL_RCC_ClockConfig+0x1d0>)
 80055dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055de:	4b09      	ldr	r3, [pc, #36]	; (8005604 <HAL_RCC_ClockConfig+0x1d4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fd fd4a 	bl	800307c <HAL_InitTick>

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40023c00 	.word	0x40023c00
 80055f8:	40023800 	.word	0x40023800
 80055fc:	0800d164 	.word	0x0800d164
 8005600:	20000010 	.word	0x20000010
 8005604:	20000014 	.word	0x20000014

08005608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800560c:	b094      	sub	sp, #80	; 0x50
 800560e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	647b      	str	r3, [r7, #68]	; 0x44
 8005614:	2300      	movs	r3, #0
 8005616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005618:	2300      	movs	r3, #0
 800561a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005620:	4b79      	ldr	r3, [pc, #484]	; (8005808 <HAL_RCC_GetSysClockFreq+0x200>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 030c 	and.w	r3, r3, #12
 8005628:	2b08      	cmp	r3, #8
 800562a:	d00d      	beq.n	8005648 <HAL_RCC_GetSysClockFreq+0x40>
 800562c:	2b08      	cmp	r3, #8
 800562e:	f200 80e1 	bhi.w	80057f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_RCC_GetSysClockFreq+0x34>
 8005636:	2b04      	cmp	r3, #4
 8005638:	d003      	beq.n	8005642 <HAL_RCC_GetSysClockFreq+0x3a>
 800563a:	e0db      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800563c:	4b73      	ldr	r3, [pc, #460]	; (800580c <HAL_RCC_GetSysClockFreq+0x204>)
 800563e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005640:	e0db      	b.n	80057fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005642:	4b73      	ldr	r3, [pc, #460]	; (8005810 <HAL_RCC_GetSysClockFreq+0x208>)
 8005644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005646:	e0d8      	b.n	80057fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005648:	4b6f      	ldr	r3, [pc, #444]	; (8005808 <HAL_RCC_GetSysClockFreq+0x200>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005650:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005652:	4b6d      	ldr	r3, [pc, #436]	; (8005808 <HAL_RCC_GetSysClockFreq+0x200>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d063      	beq.n	8005726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800565e:	4b6a      	ldr	r3, [pc, #424]	; (8005808 <HAL_RCC_GetSysClockFreq+0x200>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	099b      	lsrs	r3, r3, #6
 8005664:	2200      	movs	r2, #0
 8005666:	63bb      	str	r3, [r7, #56]	; 0x38
 8005668:	63fa      	str	r2, [r7, #60]	; 0x3c
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005670:	633b      	str	r3, [r7, #48]	; 0x30
 8005672:	2300      	movs	r3, #0
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
 8005676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800567a:	4622      	mov	r2, r4
 800567c:	462b      	mov	r3, r5
 800567e:	f04f 0000 	mov.w	r0, #0
 8005682:	f04f 0100 	mov.w	r1, #0
 8005686:	0159      	lsls	r1, r3, #5
 8005688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800568c:	0150      	lsls	r0, r2, #5
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4621      	mov	r1, r4
 8005694:	1a51      	subs	r1, r2, r1
 8005696:	6139      	str	r1, [r7, #16]
 8005698:	4629      	mov	r1, r5
 800569a:	eb63 0301 	sbc.w	r3, r3, r1
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056ac:	4659      	mov	r1, fp
 80056ae:	018b      	lsls	r3, r1, #6
 80056b0:	4651      	mov	r1, sl
 80056b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056b6:	4651      	mov	r1, sl
 80056b8:	018a      	lsls	r2, r1, #6
 80056ba:	4651      	mov	r1, sl
 80056bc:	ebb2 0801 	subs.w	r8, r2, r1
 80056c0:	4659      	mov	r1, fp
 80056c2:	eb63 0901 	sbc.w	r9, r3, r1
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056da:	4690      	mov	r8, r2
 80056dc:	4699      	mov	r9, r3
 80056de:	4623      	mov	r3, r4
 80056e0:	eb18 0303 	adds.w	r3, r8, r3
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	462b      	mov	r3, r5
 80056e8:	eb49 0303 	adc.w	r3, r9, r3
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056fa:	4629      	mov	r1, r5
 80056fc:	024b      	lsls	r3, r1, #9
 80056fe:	4621      	mov	r1, r4
 8005700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005704:	4621      	mov	r1, r4
 8005706:	024a      	lsls	r2, r1, #9
 8005708:	4610      	mov	r0, r2
 800570a:	4619      	mov	r1, r3
 800570c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570e:	2200      	movs	r2, #0
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
 8005712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005718:	f7fb fac0 	bl	8000c9c <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4613      	mov	r3, r2
 8005722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005724:	e058      	b.n	80057d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005726:	4b38      	ldr	r3, [pc, #224]	; (8005808 <HAL_RCC_GetSysClockFreq+0x200>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	099b      	lsrs	r3, r3, #6
 800572c:	2200      	movs	r2, #0
 800572e:	4618      	mov	r0, r3
 8005730:	4611      	mov	r1, r2
 8005732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	2300      	movs	r3, #0
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
 800573c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005740:	4642      	mov	r2, r8
 8005742:	464b      	mov	r3, r9
 8005744:	f04f 0000 	mov.w	r0, #0
 8005748:	f04f 0100 	mov.w	r1, #0
 800574c:	0159      	lsls	r1, r3, #5
 800574e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005752:	0150      	lsls	r0, r2, #5
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4641      	mov	r1, r8
 800575a:	ebb2 0a01 	subs.w	sl, r2, r1
 800575e:	4649      	mov	r1, r9
 8005760:	eb63 0b01 	sbc.w	fp, r3, r1
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005778:	ebb2 040a 	subs.w	r4, r2, sl
 800577c:	eb63 050b 	sbc.w	r5, r3, fp
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	00eb      	lsls	r3, r5, #3
 800578a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800578e:	00e2      	lsls	r2, r4, #3
 8005790:	4614      	mov	r4, r2
 8005792:	461d      	mov	r5, r3
 8005794:	4643      	mov	r3, r8
 8005796:	18e3      	adds	r3, r4, r3
 8005798:	603b      	str	r3, [r7, #0]
 800579a:	464b      	mov	r3, r9
 800579c:	eb45 0303 	adc.w	r3, r5, r3
 80057a0:	607b      	str	r3, [r7, #4]
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057ae:	4629      	mov	r1, r5
 80057b0:	028b      	lsls	r3, r1, #10
 80057b2:	4621      	mov	r1, r4
 80057b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057b8:	4621      	mov	r1, r4
 80057ba:	028a      	lsls	r2, r1, #10
 80057bc:	4610      	mov	r0, r2
 80057be:	4619      	mov	r1, r3
 80057c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c2:	2200      	movs	r2, #0
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	61fa      	str	r2, [r7, #28]
 80057c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057cc:	f7fb fa66 	bl	8000c9c <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4613      	mov	r3, r2
 80057d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80057d8:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <HAL_RCC_GetSysClockFreq+0x200>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	0c1b      	lsrs	r3, r3, #16
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	3301      	adds	r3, #1
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80057e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057f2:	e002      	b.n	80057fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <HAL_RCC_GetSysClockFreq+0x204>)
 80057f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3750      	adds	r7, #80	; 0x50
 8005800:	46bd      	mov	sp, r7
 8005802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005806:	bf00      	nop
 8005808:	40023800 	.word	0x40023800
 800580c:	00f42400 	.word	0x00f42400
 8005810:	007a1200 	.word	0x007a1200

08005814 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005818:	4b03      	ldr	r3, [pc, #12]	; (8005828 <HAL_RCC_GetHCLKFreq+0x14>)
 800581a:	681b      	ldr	r3, [r3, #0]
}
 800581c:	4618      	mov	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000010 	.word	0x20000010

0800582c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005830:	f7ff fff0 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 8005834:	4602      	mov	r2, r0
 8005836:	4b05      	ldr	r3, [pc, #20]	; (800584c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	0a9b      	lsrs	r3, r3, #10
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	4903      	ldr	r1, [pc, #12]	; (8005850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005842:	5ccb      	ldrb	r3, [r1, r3]
 8005844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005848:	4618      	mov	r0, r3
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40023800 	.word	0x40023800
 8005850:	0800d174 	.word	0x0800d174

08005854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005858:	f7ff ffdc 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 800585c:	4602      	mov	r2, r0
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	0b5b      	lsrs	r3, r3, #13
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	4903      	ldr	r1, [pc, #12]	; (8005878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800586a:	5ccb      	ldrb	r3, [r1, r3]
 800586c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005870:	4618      	mov	r0, r3
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40023800 	.word	0x40023800
 8005878:	0800d174 	.word	0x0800d174

0800587c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d012      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058a4:	4b69      	ldr	r3, [pc, #420]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	4a68      	ldr	r2, [pc, #416]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80058ae:	6093      	str	r3, [r2, #8]
 80058b0:	4b66      	ldr	r3, [pc, #408]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b8:	4964      	ldr	r1, [pc, #400]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80058c6:	2301      	movs	r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d017      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058d6:	4b5d      	ldr	r3, [pc, #372]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e4:	4959      	ldr	r1, [pc, #356]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f4:	d101      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80058f6:	2301      	movs	r3, #1
 80058f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005902:	2301      	movs	r3, #1
 8005904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d017      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005912:	4b4e      	ldr	r3, [pc, #312]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005918:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	494a      	ldr	r1, [pc, #296]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005930:	d101      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005932:	2301      	movs	r3, #1
 8005934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800593e:	2301      	movs	r3, #1
 8005940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800594e:	2301      	movs	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 808b 	beq.w	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005960:	4b3a      	ldr	r3, [pc, #232]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	4a39      	ldr	r2, [pc, #228]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596a:	6413      	str	r3, [r2, #64]	; 0x40
 800596c:	4b37      	ldr	r3, [pc, #220]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005974:	60bb      	str	r3, [r7, #8]
 8005976:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005978:	4b35      	ldr	r3, [pc, #212]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a34      	ldr	r2, [pc, #208]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800597e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005984:	f7fd fbbe 	bl	8003104 <HAL_GetTick>
 8005988:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800598a:	e008      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800598c:	f7fd fbba 	bl	8003104 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b64      	cmp	r3, #100	; 0x64
 8005998:	d901      	bls.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e357      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800599e:	4b2c      	ldr	r3, [pc, #176]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059aa:	4b28      	ldr	r3, [pc, #160]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d035      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d02e      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059c8:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059d2:	4b1e      	ldr	r3, [pc, #120]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	4a1d      	ldr	r2, [pc, #116]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059de:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e2:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80059ea:	4a18      	ldr	r2, [pc, #96]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059f0:	4b16      	ldr	r3, [pc, #88]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d114      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fc:	f7fd fb82 	bl	8003104 <HAL_GetTick>
 8005a00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a02:	e00a      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a04:	f7fd fb7e 	bl	8003104 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e319      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1a:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0ee      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a32:	d111      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005a34:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a40:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a42:	400b      	ands	r3, r1
 8005a44:	4901      	ldr	r1, [pc, #4]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	608b      	str	r3, [r1, #8]
 8005a4a:	e00b      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	40007000 	.word	0x40007000
 8005a54:	0ffffcff 	.word	0x0ffffcff
 8005a58:	4baa      	ldr	r3, [pc, #680]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4aa9      	ldr	r2, [pc, #676]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a62:	6093      	str	r3, [r2, #8]
 8005a64:	4ba7      	ldr	r3, [pc, #668]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a70:	49a4      	ldr	r1, [pc, #656]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d010      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a82:	4ba0      	ldr	r3, [pc, #640]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a88:	4a9e      	ldr	r2, [pc, #632]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a92:	4b9c      	ldr	r3, [pc, #624]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	4999      	ldr	r1, [pc, #612]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ab0:	4b94      	ldr	r3, [pc, #592]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005abe:	4991      	ldr	r1, [pc, #580]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ad2:	4b8c      	ldr	r3, [pc, #560]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae0:	4988      	ldr	r1, [pc, #544]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005af4:	4b83      	ldr	r3, [pc, #524]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b02:	4980      	ldr	r1, [pc, #512]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b16:	4b7b      	ldr	r3, [pc, #492]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	4977      	ldr	r1, [pc, #476]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b38:	4b72      	ldr	r3, [pc, #456]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	f023 0203 	bic.w	r2, r3, #3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b46:	496f      	ldr	r1, [pc, #444]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b5a:	4b6a      	ldr	r3, [pc, #424]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b60:	f023 020c 	bic.w	r2, r3, #12
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b68:	4966      	ldr	r1, [pc, #408]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b7c:	4b61      	ldr	r3, [pc, #388]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8a:	495e      	ldr	r1, [pc, #376]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b9e:	4b59      	ldr	r3, [pc, #356]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bac:	4955      	ldr	r1, [pc, #340]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005bc0:	4b50      	ldr	r3, [pc, #320]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	494d      	ldr	r1, [pc, #308]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005be2:	4b48      	ldr	r3, [pc, #288]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf0:	4944      	ldr	r1, [pc, #272]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c04:	4b3f      	ldr	r3, [pc, #252]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c12:	493c      	ldr	r1, [pc, #240]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005c26:	4b37      	ldr	r3, [pc, #220]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c34:	4933      	ldr	r1, [pc, #204]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c48:	4b2e      	ldr	r3, [pc, #184]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c56:	492b      	ldr	r1, [pc, #172]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d011      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c6a:	4b26      	ldr	r3, [pc, #152]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c78:	4922      	ldr	r1, [pc, #136]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c88:	d101      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005caa:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb8:	4912      	ldr	r1, [pc, #72]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ccc:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cdc:	4909      	ldr	r1, [pc, #36]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d006      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 80d9 	beq.w	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cf8:	4b02      	ldr	r3, [pc, #8]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a01      	ldr	r2, [pc, #4]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d02:	e001      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005d04:	40023800 	.word	0x40023800
 8005d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d0a:	f7fd f9fb 	bl	8003104 <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d12:	f7fd f9f7 	bl	8003104 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b64      	cmp	r3, #100	; 0x64
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e194      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d24:	4b6c      	ldr	r3, [pc, #432]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f0      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d021      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d11d      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d44:	4b64      	ldr	r3, [pc, #400]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d4a:	0c1b      	lsrs	r3, r3, #16
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d52:	4b61      	ldr	r3, [pc, #388]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d58:	0e1b      	lsrs	r3, r3, #24
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	019a      	lsls	r2, r3, #6
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	041b      	lsls	r3, r3, #16
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	071b      	lsls	r3, r3, #28
 8005d78:	4957      	ldr	r1, [pc, #348]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d02e      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005daa:	d129      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005dac:	4b4a      	ldr	r3, [pc, #296]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db2:	0c1b      	lsrs	r3, r3, #16
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005dba:	4b47      	ldr	r3, [pc, #284]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc0:	0f1b      	lsrs	r3, r3, #28
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	019a      	lsls	r2, r3, #6
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	061b      	lsls	r3, r3, #24
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	071b      	lsls	r3, r3, #28
 8005de0:	493d      	ldr	r1, [pc, #244]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005de8:	4b3b      	ldr	r3, [pc, #236]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dee:	f023 021f 	bic.w	r2, r3, #31
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	3b01      	subs	r3, #1
 8005df8:	4937      	ldr	r1, [pc, #220]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01d      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e0c:	4b32      	ldr	r3, [pc, #200]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e12:	0e1b      	lsrs	r3, r3, #24
 8005e14:	f003 030f 	and.w	r3, r3, #15
 8005e18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e20:	0f1b      	lsrs	r3, r3, #28
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	019a      	lsls	r2, r3, #6
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	431a      	orrs	r2, r3
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	061b      	lsls	r3, r3, #24
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	071b      	lsls	r3, r3, #28
 8005e40:	4925      	ldr	r1, [pc, #148]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d011      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	019a      	lsls	r2, r3, #6
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	061b      	lsls	r3, r3, #24
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	071b      	lsls	r3, r3, #28
 8005e70:	4919      	ldr	r1, [pc, #100]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e78:	4b17      	ldr	r3, [pc, #92]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a16      	ldr	r2, [pc, #88]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e84:	f7fd f93e 	bl	8003104 <HAL_GetTick>
 8005e88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e8c:	f7fd f93a 	bl	8003104 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b64      	cmp	r3, #100	; 0x64
 8005e98:	d901      	bls.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e0d7      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f0      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	f040 80cd 	bne.w	800604c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a08      	ldr	r2, [pc, #32]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ebe:	f7fd f921 	bl	8003104 <HAL_GetTick>
 8005ec2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ec4:	e00a      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ec6:	f7fd f91d 	bl	8003104 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b64      	cmp	r3, #100	; 0x64
 8005ed2:	d903      	bls.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e0ba      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005ed8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005edc:	4b5e      	ldr	r3, [pc, #376]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee8:	d0ed      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d009      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d02e      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d12a      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f12:	4b51      	ldr	r3, [pc, #324]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f20:	4b4d      	ldr	r3, [pc, #308]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	0f1b      	lsrs	r3, r3, #28
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	019a      	lsls	r2, r3, #6
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	061b      	lsls	r3, r3, #24
 8005f40:	431a      	orrs	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	071b      	lsls	r3, r3, #28
 8005f46:	4944      	ldr	r1, [pc, #272]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f4e:	4b42      	ldr	r3, [pc, #264]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	021b      	lsls	r3, r3, #8
 8005f60:	493d      	ldr	r1, [pc, #244]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d022      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f7c:	d11d      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f7e:	4b36      	ldr	r3, [pc, #216]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f84:	0e1b      	lsrs	r3, r3, #24
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f8c:	4b32      	ldr	r3, [pc, #200]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f92:	0f1b      	lsrs	r3, r3, #28
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	019a      	lsls	r2, r3, #6
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	041b      	lsls	r3, r3, #16
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	061b      	lsls	r3, r3, #24
 8005fac:	431a      	orrs	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	071b      	lsls	r3, r3, #28
 8005fb2:	4929      	ldr	r1, [pc, #164]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d028      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fc6:	4b24      	ldr	r3, [pc, #144]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fcc:	0e1b      	lsrs	r3, r3, #24
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005fd4:	4b20      	ldr	r3, [pc, #128]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fda:	0c1b      	lsrs	r3, r3, #16
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	019a      	lsls	r2, r3, #6
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	431a      	orrs	r2, r3
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	061b      	lsls	r3, r3, #24
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	071b      	lsls	r3, r3, #28
 8005ffa:	4917      	ldr	r1, [pc, #92]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006002:	4b15      	ldr	r3, [pc, #84]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006008:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	4911      	ldr	r1, [pc, #68]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006018:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a0e      	ldr	r2, [pc, #56]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800601e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006024:	f7fd f86e 	bl	8003104 <HAL_GetTick>
 8006028:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800602a:	e008      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800602c:	f7fd f86a 	bl	8003104 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	; 0x64
 8006038:	d901      	bls.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e007      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800603e:	4b06      	ldr	r3, [pc, #24]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800604a:	d1ef      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40023800 	.word	0x40023800

0800605c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e049      	b.n	8006102 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fc fe7c 	bl	8002d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f000 fd26 	bl	8006aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b01      	cmp	r3, #1
 800611e:	d001      	beq.n	8006124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e054      	b.n	80061ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a26      	ldr	r2, [pc, #152]	; (80061dc <HAL_TIM_Base_Start_IT+0xd0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614e:	d01d      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a22      	ldr	r2, [pc, #136]	; (80061e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a21      	ldr	r2, [pc, #132]	; (80061e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1f      	ldr	r2, [pc, #124]	; (80061e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <HAL_TIM_Base_Start_IT+0xe0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1c      	ldr	r2, [pc, #112]	; (80061f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_TIM_Base_Start_IT+0x80>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d115      	bne.n	80061b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <HAL_TIM_Base_Start_IT+0xec>)
 8006194:	4013      	ands	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b06      	cmp	r3, #6
 800619c:	d015      	beq.n	80061ca <HAL_TIM_Base_Start_IT+0xbe>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a4:	d011      	beq.n	80061ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b6:	e008      	b.n	80061ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e000      	b.n	80061cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40010000 	.word	0x40010000
 80061e0:	40000400 	.word	0x40000400
 80061e4:	40000800 	.word	0x40000800
 80061e8:	40000c00 	.word	0x40000c00
 80061ec:	40010400 	.word	0x40010400
 80061f0:	40014000 	.word	0x40014000
 80061f4:	40001800 	.word	0x40001800
 80061f8:	00010007 	.word	0x00010007

080061fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e049      	b.n	80062a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fc fd8c 	bl	8002d40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f000 fc56 	bl	8006aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d109      	bne.n	80062d0 <HAL_TIM_PWM_Start+0x24>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	bf14      	ite	ne
 80062c8:	2301      	movne	r3, #1
 80062ca:	2300      	moveq	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	e03c      	b.n	800634a <HAL_TIM_PWM_Start+0x9e>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d109      	bne.n	80062ea <HAL_TIM_PWM_Start+0x3e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b01      	cmp	r3, #1
 80062e0:	bf14      	ite	ne
 80062e2:	2301      	movne	r3, #1
 80062e4:	2300      	moveq	r3, #0
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	e02f      	b.n	800634a <HAL_TIM_PWM_Start+0x9e>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d109      	bne.n	8006304 <HAL_TIM_PWM_Start+0x58>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	bf14      	ite	ne
 80062fc:	2301      	movne	r3, #1
 80062fe:	2300      	moveq	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	e022      	b.n	800634a <HAL_TIM_PWM_Start+0x9e>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b0c      	cmp	r3, #12
 8006308:	d109      	bne.n	800631e <HAL_TIM_PWM_Start+0x72>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b01      	cmp	r3, #1
 8006314:	bf14      	ite	ne
 8006316:	2301      	movne	r3, #1
 8006318:	2300      	moveq	r3, #0
 800631a:	b2db      	uxtb	r3, r3
 800631c:	e015      	b.n	800634a <HAL_TIM_PWM_Start+0x9e>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b10      	cmp	r3, #16
 8006322:	d109      	bne.n	8006338 <HAL_TIM_PWM_Start+0x8c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	bf14      	ite	ne
 8006330:	2301      	movne	r3, #1
 8006332:	2300      	moveq	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	e008      	b.n	800634a <HAL_TIM_PWM_Start+0x9e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	bf14      	ite	ne
 8006344:	2301      	movne	r3, #1
 8006346:	2300      	moveq	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e092      	b.n	8006478 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d104      	bne.n	8006362 <HAL_TIM_PWM_Start+0xb6>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006360:	e023      	b.n	80063aa <HAL_TIM_PWM_Start+0xfe>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b04      	cmp	r3, #4
 8006366:	d104      	bne.n	8006372 <HAL_TIM_PWM_Start+0xc6>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006370:	e01b      	b.n	80063aa <HAL_TIM_PWM_Start+0xfe>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b08      	cmp	r3, #8
 8006376:	d104      	bne.n	8006382 <HAL_TIM_PWM_Start+0xd6>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006380:	e013      	b.n	80063aa <HAL_TIM_PWM_Start+0xfe>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b0c      	cmp	r3, #12
 8006386:	d104      	bne.n	8006392 <HAL_TIM_PWM_Start+0xe6>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006390:	e00b      	b.n	80063aa <HAL_TIM_PWM_Start+0xfe>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b10      	cmp	r3, #16
 8006396:	d104      	bne.n	80063a2 <HAL_TIM_PWM_Start+0xf6>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a0:	e003      	b.n	80063aa <HAL_TIM_PWM_Start+0xfe>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2202      	movs	r2, #2
 80063a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2201      	movs	r2, #1
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 ff32 	bl	800721c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a30      	ldr	r2, [pc, #192]	; (8006480 <HAL_TIM_PWM_Start+0x1d4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_TIM_PWM_Start+0x120>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2f      	ldr	r2, [pc, #188]	; (8006484 <HAL_TIM_PWM_Start+0x1d8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d101      	bne.n	80063d0 <HAL_TIM_PWM_Start+0x124>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <HAL_TIM_PWM_Start+0x126>
 80063d0:	2300      	movs	r3, #0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a25      	ldr	r2, [pc, #148]	; (8006480 <HAL_TIM_PWM_Start+0x1d4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d022      	beq.n	8006436 <HAL_TIM_PWM_Start+0x18a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f8:	d01d      	beq.n	8006436 <HAL_TIM_PWM_Start+0x18a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a22      	ldr	r2, [pc, #136]	; (8006488 <HAL_TIM_PWM_Start+0x1dc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d018      	beq.n	8006436 <HAL_TIM_PWM_Start+0x18a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a20      	ldr	r2, [pc, #128]	; (800648c <HAL_TIM_PWM_Start+0x1e0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <HAL_TIM_PWM_Start+0x18a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <HAL_TIM_PWM_Start+0x1e4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00e      	beq.n	8006436 <HAL_TIM_PWM_Start+0x18a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a19      	ldr	r2, [pc, #100]	; (8006484 <HAL_TIM_PWM_Start+0x1d8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d009      	beq.n	8006436 <HAL_TIM_PWM_Start+0x18a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1b      	ldr	r2, [pc, #108]	; (8006494 <HAL_TIM_PWM_Start+0x1e8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d004      	beq.n	8006436 <HAL_TIM_PWM_Start+0x18a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a19      	ldr	r2, [pc, #100]	; (8006498 <HAL_TIM_PWM_Start+0x1ec>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d115      	bne.n	8006462 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	4b17      	ldr	r3, [pc, #92]	; (800649c <HAL_TIM_PWM_Start+0x1f0>)
 800643e:	4013      	ands	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b06      	cmp	r3, #6
 8006446:	d015      	beq.n	8006474 <HAL_TIM_PWM_Start+0x1c8>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800644e:	d011      	beq.n	8006474 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006460:	e008      	b.n	8006474 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e000      	b.n	8006476 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006474:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40010000 	.word	0x40010000
 8006484:	40010400 	.word	0x40010400
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40014000 	.word	0x40014000
 8006498:	40001800 	.word	0x40001800
 800649c:	00010007 	.word	0x00010007

080064a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d122      	bne.n	80064fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d11b      	bne.n	80064fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f06f 0202 	mvn.w	r2, #2
 80064cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fae4 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 80064e8:	e005      	b.n	80064f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fad6 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fae7 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b04      	cmp	r3, #4
 8006508:	d122      	bne.n	8006550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b04      	cmp	r3, #4
 8006516:	d11b      	bne.n	8006550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0204 	mvn.w	r2, #4
 8006520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 faba 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 800653c:	e005      	b.n	800654a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 faac 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fabd 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b08      	cmp	r3, #8
 800655c:	d122      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b08      	cmp	r3, #8
 800656a:	d11b      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0208 	mvn.w	r2, #8
 8006574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2204      	movs	r2, #4
 800657a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa90 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 8006590:	e005      	b.n	800659e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa82 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fa93 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0310 	and.w	r3, r3, #16
 80065ae:	2b10      	cmp	r3, #16
 80065b0:	d122      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d11b      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0210 	mvn.w	r2, #16
 80065c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2208      	movs	r2, #8
 80065ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fa66 	bl	8006ab0 <HAL_TIM_IC_CaptureCallback>
 80065e4:	e005      	b.n	80065f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fa58 	bl	8006a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fa69 	bl	8006ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b01      	cmp	r3, #1
 8006604:	d10e      	bne.n	8006624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b01      	cmp	r3, #1
 8006612:	d107      	bne.n	8006624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0201 	mvn.w	r2, #1
 800661c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fb fe86 	bl	8002330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662e:	2b80      	cmp	r3, #128	; 0x80
 8006630:	d10e      	bne.n	8006650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663c:	2b80      	cmp	r3, #128	; 0x80
 800663e:	d107      	bne.n	8006650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 ff22 	bl	8007494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665e:	d10e      	bne.n	800667e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666a:	2b80      	cmp	r3, #128	; 0x80
 800666c:	d107      	bne.n	800667e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 ff15 	bl	80074a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d10e      	bne.n	80066aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006696:	2b40      	cmp	r3, #64	; 0x40
 8006698:	d107      	bne.n	80066aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fa17 	bl	8006ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d10e      	bne.n	80066d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d107      	bne.n	80066d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f06f 0220 	mvn.w	r2, #32
 80066ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fed5 	bl	8007480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e0ff      	b.n	80068fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b14      	cmp	r3, #20
 800670a:	f200 80f0 	bhi.w	80068ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	08006769 	.word	0x08006769
 8006718:	080068ef 	.word	0x080068ef
 800671c:	080068ef 	.word	0x080068ef
 8006720:	080068ef 	.word	0x080068ef
 8006724:	080067a9 	.word	0x080067a9
 8006728:	080068ef 	.word	0x080068ef
 800672c:	080068ef 	.word	0x080068ef
 8006730:	080068ef 	.word	0x080068ef
 8006734:	080067eb 	.word	0x080067eb
 8006738:	080068ef 	.word	0x080068ef
 800673c:	080068ef 	.word	0x080068ef
 8006740:	080068ef 	.word	0x080068ef
 8006744:	0800682b 	.word	0x0800682b
 8006748:	080068ef 	.word	0x080068ef
 800674c:	080068ef 	.word	0x080068ef
 8006750:	080068ef 	.word	0x080068ef
 8006754:	0800686d 	.word	0x0800686d
 8006758:	080068ef 	.word	0x080068ef
 800675c:	080068ef 	.word	0x080068ef
 8006760:	080068ef 	.word	0x080068ef
 8006764:	080068ad 	.word	0x080068ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fa5c 	bl	8006c2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0208 	orr.w	r2, r2, #8
 8006782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0204 	bic.w	r2, r2, #4
 8006792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6999      	ldr	r1, [r3, #24]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	619a      	str	r2, [r3, #24]
      break;
 80067a6:	e0a5      	b.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 faae 	bl	8006d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6999      	ldr	r1, [r3, #24]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	021a      	lsls	r2, r3, #8
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	619a      	str	r2, [r3, #24]
      break;
 80067e8:	e084      	b.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fb05 	bl	8006e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69da      	ldr	r2, [r3, #28]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0208 	orr.w	r2, r2, #8
 8006804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0204 	bic.w	r2, r2, #4
 8006814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69d9      	ldr	r1, [r3, #28]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	61da      	str	r2, [r3, #28]
      break;
 8006828:	e064      	b.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fb5b 	bl	8006eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69d9      	ldr	r1, [r3, #28]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	021a      	lsls	r2, r3, #8
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	61da      	str	r2, [r3, #28]
      break;
 800686a:	e043      	b.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fb92 	bl	8006f9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0208 	orr.w	r2, r2, #8
 8006886:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0204 	bic.w	r2, r2, #4
 8006896:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068aa:	e023      	b.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fbc4 	bl	8007040 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	021a      	lsls	r2, r3, #8
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068ec:	e002      	b.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	75fb      	strb	r3, [r7, #23]
      break;
 80068f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop

08006908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_TIM_ConfigClockSource+0x1c>
 8006920:	2302      	movs	r3, #2
 8006922:	e0b4      	b.n	8006a8e <HAL_TIM_ConfigClockSource+0x186>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	4b56      	ldr	r3, [pc, #344]	; (8006a98 <HAL_TIM_ConfigClockSource+0x190>)
 8006940:	4013      	ands	r3, r2
 8006942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800694a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800695c:	d03e      	beq.n	80069dc <HAL_TIM_ConfigClockSource+0xd4>
 800695e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006962:	f200 8087 	bhi.w	8006a74 <HAL_TIM_ConfigClockSource+0x16c>
 8006966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696a:	f000 8086 	beq.w	8006a7a <HAL_TIM_ConfigClockSource+0x172>
 800696e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006972:	d87f      	bhi.n	8006a74 <HAL_TIM_ConfigClockSource+0x16c>
 8006974:	2b70      	cmp	r3, #112	; 0x70
 8006976:	d01a      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0xa6>
 8006978:	2b70      	cmp	r3, #112	; 0x70
 800697a:	d87b      	bhi.n	8006a74 <HAL_TIM_ConfigClockSource+0x16c>
 800697c:	2b60      	cmp	r3, #96	; 0x60
 800697e:	d050      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x11a>
 8006980:	2b60      	cmp	r3, #96	; 0x60
 8006982:	d877      	bhi.n	8006a74 <HAL_TIM_ConfigClockSource+0x16c>
 8006984:	2b50      	cmp	r3, #80	; 0x50
 8006986:	d03c      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0xfa>
 8006988:	2b50      	cmp	r3, #80	; 0x50
 800698a:	d873      	bhi.n	8006a74 <HAL_TIM_ConfigClockSource+0x16c>
 800698c:	2b40      	cmp	r3, #64	; 0x40
 800698e:	d058      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0x13a>
 8006990:	2b40      	cmp	r3, #64	; 0x40
 8006992:	d86f      	bhi.n	8006a74 <HAL_TIM_ConfigClockSource+0x16c>
 8006994:	2b30      	cmp	r3, #48	; 0x30
 8006996:	d064      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x15a>
 8006998:	2b30      	cmp	r3, #48	; 0x30
 800699a:	d86b      	bhi.n	8006a74 <HAL_TIM_ConfigClockSource+0x16c>
 800699c:	2b20      	cmp	r3, #32
 800699e:	d060      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x15a>
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	d867      	bhi.n	8006a74 <HAL_TIM_ConfigClockSource+0x16c>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d05c      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x15a>
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	d05a      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x15a>
 80069ac:	e062      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	6899      	ldr	r1, [r3, #8]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f000 fc0d 	bl	80071dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	609a      	str	r2, [r3, #8]
      break;
 80069da:	e04f      	b.n	8006a7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6818      	ldr	r0, [r3, #0]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	6899      	ldr	r1, [r3, #8]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f000 fbf6 	bl	80071dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069fe:	609a      	str	r2, [r3, #8]
      break;
 8006a00:	e03c      	b.n	8006a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6859      	ldr	r1, [r3, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f000 fb6a 	bl	80070e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2150      	movs	r1, #80	; 0x50
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fbc3 	bl	80071a6 <TIM_ITRx_SetConfig>
      break;
 8006a20:	e02c      	b.n	8006a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	6859      	ldr	r1, [r3, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f000 fb89 	bl	8007146 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2160      	movs	r1, #96	; 0x60
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fbb3 	bl	80071a6 <TIM_ITRx_SetConfig>
      break;
 8006a40:	e01c      	b.n	8006a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6859      	ldr	r1, [r3, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f000 fb4a 	bl	80070e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2140      	movs	r1, #64	; 0x40
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fba3 	bl	80071a6 <TIM_ITRx_SetConfig>
      break;
 8006a60:	e00c      	b.n	8006a7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	f000 fb9a 	bl	80071a6 <TIM_ITRx_SetConfig>
      break;
 8006a72:	e003      	b.n	8006a7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]
      break;
 8006a78:	e000      	b.n	8006a7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	fffeff88 	.word	0xfffeff88

08006a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a40      	ldr	r2, [pc, #256]	; (8006c00 <TIM_Base_SetConfig+0x114>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d013      	beq.n	8006b2c <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0a:	d00f      	beq.n	8006b2c <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a3d      	ldr	r2, [pc, #244]	; (8006c04 <TIM_Base_SetConfig+0x118>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_Base_SetConfig+0x40>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a3c      	ldr	r2, [pc, #240]	; (8006c08 <TIM_Base_SetConfig+0x11c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_Base_SetConfig+0x40>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a3b      	ldr	r2, [pc, #236]	; (8006c0c <TIM_Base_SetConfig+0x120>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_Base_SetConfig+0x40>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a3a      	ldr	r2, [pc, #232]	; (8006c10 <TIM_Base_SetConfig+0x124>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d108      	bne.n	8006b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2f      	ldr	r2, [pc, #188]	; (8006c00 <TIM_Base_SetConfig+0x114>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d02b      	beq.n	8006b9e <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4c:	d027      	beq.n	8006b9e <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2c      	ldr	r2, [pc, #176]	; (8006c04 <TIM_Base_SetConfig+0x118>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d023      	beq.n	8006b9e <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2b      	ldr	r2, [pc, #172]	; (8006c08 <TIM_Base_SetConfig+0x11c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01f      	beq.n	8006b9e <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a2a      	ldr	r2, [pc, #168]	; (8006c0c <TIM_Base_SetConfig+0x120>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d01b      	beq.n	8006b9e <TIM_Base_SetConfig+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a29      	ldr	r2, [pc, #164]	; (8006c10 <TIM_Base_SetConfig+0x124>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d017      	beq.n	8006b9e <TIM_Base_SetConfig+0xb2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a28      	ldr	r2, [pc, #160]	; (8006c14 <TIM_Base_SetConfig+0x128>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <TIM_Base_SetConfig+0xb2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a27      	ldr	r2, [pc, #156]	; (8006c18 <TIM_Base_SetConfig+0x12c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00f      	beq.n	8006b9e <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a26      	ldr	r2, [pc, #152]	; (8006c1c <TIM_Base_SetConfig+0x130>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00b      	beq.n	8006b9e <TIM_Base_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a25      	ldr	r2, [pc, #148]	; (8006c20 <TIM_Base_SetConfig+0x134>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d007      	beq.n	8006b9e <TIM_Base_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a24      	ldr	r2, [pc, #144]	; (8006c24 <TIM_Base_SetConfig+0x138>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_Base_SetConfig+0xb2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a23      	ldr	r2, [pc, #140]	; (8006c28 <TIM_Base_SetConfig+0x13c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d108      	bne.n	8006bb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a0a      	ldr	r2, [pc, #40]	; (8006c00 <TIM_Base_SetConfig+0x114>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d003      	beq.n	8006be4 <TIM_Base_SetConfig+0xf8>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a0c      	ldr	r2, [pc, #48]	; (8006c10 <TIM_Base_SetConfig+0x124>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d103      	bne.n	8006bec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	615a      	str	r2, [r3, #20]
}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40000800 	.word	0x40000800
 8006c0c:	40000c00 	.word	0x40000c00
 8006c10:	40010400 	.word	0x40010400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40014400 	.word	0x40014400
 8006c1c:	40014800 	.word	0x40014800
 8006c20:	40001800 	.word	0x40001800
 8006c24:	40001c00 	.word	0x40001c00
 8006c28:	40002000 	.word	0x40002000

08006c2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f023 0201 	bic.w	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	4b2b      	ldr	r3, [pc, #172]	; (8006d04 <TIM_OC1_SetConfig+0xd8>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 0303 	bic.w	r3, r3, #3
 8006c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f023 0302 	bic.w	r3, r3, #2
 8006c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a21      	ldr	r2, [pc, #132]	; (8006d08 <TIM_OC1_SetConfig+0xdc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_OC1_SetConfig+0x64>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a20      	ldr	r2, [pc, #128]	; (8006d0c <TIM_OC1_SetConfig+0xe0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10c      	bne.n	8006caa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f023 0308 	bic.w	r3, r3, #8
 8006c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f023 0304 	bic.w	r3, r3, #4
 8006ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a16      	ldr	r2, [pc, #88]	; (8006d08 <TIM_OC1_SetConfig+0xdc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_OC1_SetConfig+0x8e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a15      	ldr	r2, [pc, #84]	; (8006d0c <TIM_OC1_SetConfig+0xe0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d111      	bne.n	8006cde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	621a      	str	r2, [r3, #32]
}
 8006cf8:	bf00      	nop
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	fffeff8f 	.word	0xfffeff8f
 8006d08:	40010000 	.word	0x40010000
 8006d0c:	40010400 	.word	0x40010400

08006d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f023 0210 	bic.w	r2, r3, #16
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4b2e      	ldr	r3, [pc, #184]	; (8006df4 <TIM_OC2_SetConfig+0xe4>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	021b      	lsls	r3, r3, #8
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f023 0320 	bic.w	r3, r3, #32
 8006d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a23      	ldr	r2, [pc, #140]	; (8006df8 <TIM_OC2_SetConfig+0xe8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_OC2_SetConfig+0x68>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a22      	ldr	r2, [pc, #136]	; (8006dfc <TIM_OC2_SetConfig+0xec>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d10d      	bne.n	8006d94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <TIM_OC2_SetConfig+0xe8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_OC2_SetConfig+0x94>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a17      	ldr	r2, [pc, #92]	; (8006dfc <TIM_OC2_SetConfig+0xec>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d113      	bne.n	8006dcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006daa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006db2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	621a      	str	r2, [r3, #32]
}
 8006de6:	bf00      	nop
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	feff8fff 	.word	0xfeff8fff
 8006df8:	40010000 	.word	0x40010000
 8006dfc:	40010400 	.word	0x40010400

08006e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4b2d      	ldr	r3, [pc, #180]	; (8006ee0 <TIM_OC3_SetConfig+0xe0>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0303 	bic.w	r3, r3, #3
 8006e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a22      	ldr	r2, [pc, #136]	; (8006ee4 <TIM_OC3_SetConfig+0xe4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d003      	beq.n	8006e66 <TIM_OC3_SetConfig+0x66>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a21      	ldr	r2, [pc, #132]	; (8006ee8 <TIM_OC3_SetConfig+0xe8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d10d      	bne.n	8006e82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <TIM_OC3_SetConfig+0xe4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d003      	beq.n	8006e92 <TIM_OC3_SetConfig+0x92>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a16      	ldr	r2, [pc, #88]	; (8006ee8 <TIM_OC3_SetConfig+0xe8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d113      	bne.n	8006eba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	621a      	str	r2, [r3, #32]
}
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	fffeff8f 	.word	0xfffeff8f
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40010400 	.word	0x40010400

08006eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4b1e      	ldr	r3, [pc, #120]	; (8006f90 <TIM_OC4_SetConfig+0xa4>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	021b      	lsls	r3, r3, #8
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	031b      	lsls	r3, r3, #12
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a13      	ldr	r2, [pc, #76]	; (8006f94 <TIM_OC4_SetConfig+0xa8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_OC4_SetConfig+0x68>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a12      	ldr	r2, [pc, #72]	; (8006f98 <TIM_OC4_SetConfig+0xac>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d109      	bne.n	8006f68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	019b      	lsls	r3, r3, #6
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	621a      	str	r2, [r3, #32]
}
 8006f82:	bf00      	nop
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	feff8fff 	.word	0xfeff8fff
 8006f94:	40010000 	.word	0x40010000
 8006f98:	40010400 	.word	0x40010400

08006f9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4b1b      	ldr	r3, [pc, #108]	; (8007034 <TIM_OC5_SetConfig+0x98>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	041b      	lsls	r3, r3, #16
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a12      	ldr	r2, [pc, #72]	; (8007038 <TIM_OC5_SetConfig+0x9c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d003      	beq.n	8006ffa <TIM_OC5_SetConfig+0x5e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a11      	ldr	r2, [pc, #68]	; (800703c <TIM_OC5_SetConfig+0xa0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d109      	bne.n	800700e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007000:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	621a      	str	r2, [r3, #32]
}
 8007028:	bf00      	nop
 800702a:	371c      	adds	r7, #28
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	fffeff8f 	.word	0xfffeff8f
 8007038:	40010000 	.word	0x40010000
 800703c:	40010400 	.word	0x40010400

08007040 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4b1c      	ldr	r3, [pc, #112]	; (80070dc <TIM_OC6_SetConfig+0x9c>)
 800706c:	4013      	ands	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4313      	orrs	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	051b      	lsls	r3, r3, #20
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <TIM_OC6_SetConfig+0xa0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d003      	beq.n	80070a0 <TIM_OC6_SetConfig+0x60>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a12      	ldr	r2, [pc, #72]	; (80070e4 <TIM_OC6_SetConfig+0xa4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d109      	bne.n	80070b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	029b      	lsls	r3, r3, #10
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	feff8fff 	.word	0xfeff8fff
 80070e0:	40010000 	.word	0x40010000
 80070e4:	40010400 	.word	0x40010400

080070e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	f023 0201 	bic.w	r2, r3, #1
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f023 030a 	bic.w	r3, r3, #10
 8007124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	621a      	str	r2, [r3, #32]
}
 800713a:	bf00      	nop
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007146:	b480      	push	{r7}
 8007148:	b087      	sub	sp, #28
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f023 0210 	bic.w	r2, r3, #16
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007170:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	031b      	lsls	r3, r3, #12
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007182:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	621a      	str	r2, [r3, #32]
}
 800719a:	bf00      	nop
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f043 0307 	orr.w	r3, r3, #7
 80071c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	609a      	str	r2, [r3, #8]
}
 80071d0:	bf00      	nop
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	021a      	lsls	r2, r3, #8
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	431a      	orrs	r2, r3
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4313      	orrs	r3, r2
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	609a      	str	r2, [r3, #8]
}
 8007210:	bf00      	nop
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f003 031f 	and.w	r3, r3, #31
 800722e:	2201      	movs	r2, #1
 8007230:	fa02 f303 	lsl.w	r3, r2, r3
 8007234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a1a      	ldr	r2, [r3, #32]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	43db      	mvns	r3, r3
 800723e:	401a      	ands	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a1a      	ldr	r2, [r3, #32]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f003 031f 	and.w	r3, r3, #31
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	fa01 f303 	lsl.w	r3, r1, r3
 8007254:	431a      	orrs	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	621a      	str	r2, [r3, #32]
}
 800725a:	bf00      	nop
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
	...

08007268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800727c:	2302      	movs	r3, #2
 800727e:	e06d      	b.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a30      	ldr	r2, [pc, #192]	; (8007368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a2f      	ldr	r2, [pc, #188]	; (800736c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d108      	bne.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a20      	ldr	r2, [pc, #128]	; (8007368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d022      	beq.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f2:	d01d      	beq.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a1d      	ldr	r2, [pc, #116]	; (8007370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d018      	beq.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d013      	beq.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1a      	ldr	r2, [pc, #104]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00e      	beq.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a15      	ldr	r2, [pc, #84]	; (800736c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d009      	beq.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a16      	ldr	r2, [pc, #88]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a15      	ldr	r2, [pc, #84]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d10c      	bne.n	800734a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007336:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	4313      	orrs	r3, r2
 8007340:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	40010000 	.word	0x40010000
 800736c:	40010400 	.word	0x40010400
 8007370:	40000400 	.word	0x40000400
 8007374:	40000800 	.word	0x40000800
 8007378:	40000c00 	.word	0x40000c00
 800737c:	40014000 	.word	0x40014000
 8007380:	40001800 	.word	0x40001800

08007384 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800739c:	2302      	movs	r3, #2
 800739e:	e065      	b.n	800746c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	041b      	lsls	r3, r3, #16
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a16      	ldr	r2, [pc, #88]	; (8007478 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d004      	beq.n	800742e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a14      	ldr	r2, [pc, #80]	; (800747c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d115      	bne.n	800745a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	051b      	lsls	r3, r3, #20
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	40010000 	.word	0x40010000
 800747c:	40010400 	.word	0x40010400

08007480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e040      	b.n	8007550 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fb fd2e 	bl	8002f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2224      	movs	r2, #36	; 0x24
 80074e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0201 	bic.w	r2, r2, #1
 80074f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fbe6 	bl	8007ccc <UART_SetConfig>
 8007500:	4603      	mov	r3, r0
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e022      	b.n	8007550 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fe3e 	bl	8008194 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0201 	orr.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fec5 	bl	80082d8 <UART_CheckIdleState>
 800754e:	4603      	mov	r3, r0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	; 0x28
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	603b      	str	r3, [r7, #0]
 8007564:	4613      	mov	r3, r2
 8007566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800756c:	2b20      	cmp	r3, #32
 800756e:	d171      	bne.n	8007654 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <HAL_UART_Transmit+0x24>
 8007576:	88fb      	ldrh	r3, [r7, #6]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e06a      	b.n	8007656 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2221      	movs	r2, #33	; 0x21
 800758c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800758e:	f7fb fdb9 	bl	8003104 <HAL_GetTick>
 8007592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	88fa      	ldrh	r2, [r7, #6]
 8007598:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	88fa      	ldrh	r2, [r7, #6]
 80075a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ac:	d108      	bne.n	80075c0 <HAL_UART_Transmit+0x68>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d104      	bne.n	80075c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	e003      	b.n	80075c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075c4:	2300      	movs	r3, #0
 80075c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075c8:	e02c      	b.n	8007624 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2200      	movs	r2, #0
 80075d2:	2180      	movs	r1, #128	; 0x80
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 feb6 	bl	8008346 <UART_WaitOnFlagUntilTimeout>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e038      	b.n	8007656 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10b      	bne.n	8007602 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	3302      	adds	r3, #2
 80075fe:	61bb      	str	r3, [r7, #24]
 8007600:	e007      	b.n	8007612 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	781a      	ldrb	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	3301      	adds	r3, #1
 8007610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800762a:	b29b      	uxth	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1cc      	bne.n	80075ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2200      	movs	r2, #0
 8007638:	2140      	movs	r1, #64	; 0x40
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 fe83 	bl	8008346 <UART_WaitOnFlagUntilTimeout>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e005      	b.n	8007656 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2220      	movs	r2, #32
 800764e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	e000      	b.n	8007656 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007654:	2302      	movs	r3, #2
  }
}
 8007656:	4618      	mov	r0, r3
 8007658:	3720      	adds	r7, #32
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b08a      	sub	sp, #40	; 0x28
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	4613      	mov	r3, r2
 800766a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007672:	2b20      	cmp	r3, #32
 8007674:	d132      	bne.n	80076dc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <HAL_UART_Receive_IT+0x24>
 800767c:	88fb      	ldrh	r3, [r7, #6]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e02b      	b.n	80076de <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d018      	beq.n	80076cc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	613b      	str	r3, [r7, #16]
   return(result);
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	623b      	str	r3, [r7, #32]
 80076ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	69f9      	ldr	r1, [r7, #28]
 80076be:	6a3a      	ldr	r2, [r7, #32]
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e6      	bne.n	800769a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076cc:	88fb      	ldrh	r3, [r7, #6]
 80076ce:	461a      	mov	r2, r3
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 fefe 	bl	80084d4 <UART_Start_Receive_IT>
 80076d8:	4603      	mov	r3, r0
 80076da:	e000      	b.n	80076de <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80076dc:	2302      	movs	r3, #2
  }
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3728      	adds	r7, #40	; 0x28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b0ba      	sub	sp, #232	; 0xe8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800770e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007712:	f640 030f 	movw	r3, #2063	; 0x80f
 8007716:	4013      	ands	r3, r2
 8007718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800771c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d115      	bne.n	8007750 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00f      	beq.n	8007750 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b00      	cmp	r3, #0
 800773a:	d009      	beq.n	8007750 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8297 	beq.w	8007c74 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
      }
      return;
 800774e:	e291      	b.n	8007c74 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8117 	beq.w	8007988 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800775a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007766:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800776a:	4b85      	ldr	r3, [pc, #532]	; (8007980 <HAL_UART_IRQHandler+0x298>)
 800776c:	4013      	ands	r3, r2
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 810a 	beq.w	8007988 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d011      	beq.n	80077a4 <HAL_UART_IRQHandler+0xbc>
 8007780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00b      	beq.n	80077a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2201      	movs	r2, #1
 8007792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800779a:	f043 0201 	orr.w	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d011      	beq.n	80077d4 <HAL_UART_IRQHandler+0xec>
 80077b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2202      	movs	r2, #2
 80077c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ca:	f043 0204 	orr.w	r2, r3, #4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d011      	beq.n	8007804 <HAL_UART_IRQHandler+0x11c>
 80077e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00b      	beq.n	8007804 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2204      	movs	r2, #4
 80077f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077fa:	f043 0202 	orr.w	r2, r3, #2
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b00      	cmp	r3, #0
 800780e:	d017      	beq.n	8007840 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b00      	cmp	r3, #0
 800781a:	d105      	bne.n	8007828 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800781c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007820:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00b      	beq.n	8007840 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2208      	movs	r2, #8
 800782e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007836:	f043 0208 	orr.w	r2, r3, #8
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007848:	2b00      	cmp	r3, #0
 800784a:	d012      	beq.n	8007872 <HAL_UART_IRQHandler+0x18a>
 800784c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00c      	beq.n	8007872 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007868:	f043 0220 	orr.w	r2, r3, #32
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 81fd 	beq.w	8007c78 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00d      	beq.n	80078a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800788a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d007      	beq.n	80078a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	d005      	beq.n	80078ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d04f      	beq.n	800796a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fec8 	bl	8008660 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078da:	2b40      	cmp	r3, #64	; 0x40
 80078dc:	d141      	bne.n	8007962 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3308      	adds	r3, #8
 80078e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800790a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800790e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007916:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1d9      	bne.n	80078de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800792e:	2b00      	cmp	r3, #0
 8007930:	d013      	beq.n	800795a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007936:	4a13      	ldr	r2, [pc, #76]	; (8007984 <HAL_UART_IRQHandler+0x29c>)
 8007938:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793e:	4618      	mov	r0, r3
 8007940:	f7fc f98b 	bl	8003c5a <HAL_DMA_Abort_IT>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d017      	beq.n	800797a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	e00f      	b.n	800797a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f9a0 	bl	8007ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007960:	e00b      	b.n	800797a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f99c 	bl	8007ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007968:	e007      	b.n	800797a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f998 	bl	8007ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007978:	e17e      	b.n	8007c78 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800797a:	bf00      	nop
    return;
 800797c:	e17c      	b.n	8007c78 <HAL_UART_IRQHandler+0x590>
 800797e:	bf00      	nop
 8007980:	04000120 	.word	0x04000120
 8007984:	08008729 	.word	0x08008729

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800798c:	2b01      	cmp	r3, #1
 800798e:	f040 814c 	bne.w	8007c2a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007996:	f003 0310 	and.w	r3, r3, #16
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 8145 	beq.w	8007c2a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 813e 	beq.w	8007c2a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2210      	movs	r2, #16
 80079b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c0:	2b40      	cmp	r3, #64	; 0x40
 80079c2:	f040 80b6 	bne.w	8007b32 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8150 	beq.w	8007c7c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079e6:	429a      	cmp	r2, r3
 80079e8:	f080 8148 	bcs.w	8007c7c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a00:	f000 8086 	beq.w	8007b10 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a32:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1da      	bne.n	8007a04 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3308      	adds	r3, #8
 8007a54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3308      	adds	r3, #8
 8007a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e1      	bne.n	8007a4e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3308      	adds	r3, #8
 8007a90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007aae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ab0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ab4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e3      	bne.n	8007a8a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae0:	f023 0310 	bic.w	r3, r3, #16
 8007ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
 8007aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007af2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007af4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007af8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e4      	bne.n	8007ad0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fc f835 	bl	8003b7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8c2 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b30:	e0a4      	b.n	8007c7c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 8096 	beq.w	8007c80 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007b54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8091 	beq.w	8007c80 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b80:	647b      	str	r3, [r7, #68]	; 0x44
 8007b82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e4      	bne.n	8007b5e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	e853 3f00 	ldrex	r3, [r3]
 8007ba2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bb8:	633a      	str	r2, [r7, #48]	; 0x30
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e3      	bne.n	8007b94 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f023 0310 	bic.w	r3, r3, #16
 8007bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c02:	61fb      	str	r3, [r7, #28]
 8007c04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	69b9      	ldr	r1, [r7, #24]
 8007c08:	69fa      	ldr	r2, [r7, #28]
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e4      	bne.n	8007be0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f846 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c28:	e02a      	b.n	8007c80 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00e      	beq.n	8007c54 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d008      	beq.n	8007c54 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d01c      	beq.n	8007c84 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
    }
    return;
 8007c52:	e017      	b.n	8007c84 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d012      	beq.n	8007c86 <HAL_UART_IRQHandler+0x59e>
 8007c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00c      	beq.n	8007c86 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fd71 	bl	8008754 <UART_EndTransmit_IT>
    return;
 8007c72:	e008      	b.n	8007c86 <HAL_UART_IRQHandler+0x59e>
      return;
 8007c74:	bf00      	nop
 8007c76:	e006      	b.n	8007c86 <HAL_UART_IRQHandler+0x59e>
    return;
 8007c78:	bf00      	nop
 8007c7a:	e004      	b.n	8007c86 <HAL_UART_IRQHandler+0x59e>
      return;
 8007c7c:	bf00      	nop
 8007c7e:	e002      	b.n	8007c86 <HAL_UART_IRQHandler+0x59e>
      return;
 8007c80:	bf00      	nop
 8007c82:	e000      	b.n	8007c86 <HAL_UART_IRQHandler+0x59e>
    return;
 8007c84:	bf00      	nop
  }

}
 8007c86:	37e8      	adds	r7, #232	; 0xe8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b088      	sub	sp, #32
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	4ba6      	ldr	r3, [pc, #664]	; (8007f90 <UART_SetConfig+0x2c4>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6812      	ldr	r2, [r2, #0]
 8007cfe:	6979      	ldr	r1, [r7, #20]
 8007d00:	430b      	orrs	r3, r1
 8007d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a94      	ldr	r2, [pc, #592]	; (8007f94 <UART_SetConfig+0x2c8>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d120      	bne.n	8007d8a <UART_SetConfig+0xbe>
 8007d48:	4b93      	ldr	r3, [pc, #588]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d816      	bhi.n	8007d84 <UART_SetConfig+0xb8>
 8007d56:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <UART_SetConfig+0x90>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007d6d 	.word	0x08007d6d
 8007d60:	08007d79 	.word	0x08007d79
 8007d64:	08007d73 	.word	0x08007d73
 8007d68:	08007d7f 	.word	0x08007d7f
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	77fb      	strb	r3, [r7, #31]
 8007d70:	e150      	b.n	8008014 <UART_SetConfig+0x348>
 8007d72:	2302      	movs	r3, #2
 8007d74:	77fb      	strb	r3, [r7, #31]
 8007d76:	e14d      	b.n	8008014 <UART_SetConfig+0x348>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	77fb      	strb	r3, [r7, #31]
 8007d7c:	e14a      	b.n	8008014 <UART_SetConfig+0x348>
 8007d7e:	2308      	movs	r3, #8
 8007d80:	77fb      	strb	r3, [r7, #31]
 8007d82:	e147      	b.n	8008014 <UART_SetConfig+0x348>
 8007d84:	2310      	movs	r3, #16
 8007d86:	77fb      	strb	r3, [r7, #31]
 8007d88:	e144      	b.n	8008014 <UART_SetConfig+0x348>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a83      	ldr	r2, [pc, #524]	; (8007f9c <UART_SetConfig+0x2d0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d132      	bne.n	8007dfa <UART_SetConfig+0x12e>
 8007d94:	4b80      	ldr	r3, [pc, #512]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9a:	f003 030c 	and.w	r3, r3, #12
 8007d9e:	2b0c      	cmp	r3, #12
 8007da0:	d828      	bhi.n	8007df4 <UART_SetConfig+0x128>
 8007da2:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <UART_SetConfig+0xdc>)
 8007da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da8:	08007ddd 	.word	0x08007ddd
 8007dac:	08007df5 	.word	0x08007df5
 8007db0:	08007df5 	.word	0x08007df5
 8007db4:	08007df5 	.word	0x08007df5
 8007db8:	08007de9 	.word	0x08007de9
 8007dbc:	08007df5 	.word	0x08007df5
 8007dc0:	08007df5 	.word	0x08007df5
 8007dc4:	08007df5 	.word	0x08007df5
 8007dc8:	08007de3 	.word	0x08007de3
 8007dcc:	08007df5 	.word	0x08007df5
 8007dd0:	08007df5 	.word	0x08007df5
 8007dd4:	08007df5 	.word	0x08007df5
 8007dd8:	08007def 	.word	0x08007def
 8007ddc:	2300      	movs	r3, #0
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e118      	b.n	8008014 <UART_SetConfig+0x348>
 8007de2:	2302      	movs	r3, #2
 8007de4:	77fb      	strb	r3, [r7, #31]
 8007de6:	e115      	b.n	8008014 <UART_SetConfig+0x348>
 8007de8:	2304      	movs	r3, #4
 8007dea:	77fb      	strb	r3, [r7, #31]
 8007dec:	e112      	b.n	8008014 <UART_SetConfig+0x348>
 8007dee:	2308      	movs	r3, #8
 8007df0:	77fb      	strb	r3, [r7, #31]
 8007df2:	e10f      	b.n	8008014 <UART_SetConfig+0x348>
 8007df4:	2310      	movs	r3, #16
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	e10c      	b.n	8008014 <UART_SetConfig+0x348>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a68      	ldr	r2, [pc, #416]	; (8007fa0 <UART_SetConfig+0x2d4>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d120      	bne.n	8007e46 <UART_SetConfig+0x17a>
 8007e04:	4b64      	ldr	r3, [pc, #400]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e0e:	2b30      	cmp	r3, #48	; 0x30
 8007e10:	d013      	beq.n	8007e3a <UART_SetConfig+0x16e>
 8007e12:	2b30      	cmp	r3, #48	; 0x30
 8007e14:	d814      	bhi.n	8007e40 <UART_SetConfig+0x174>
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	d009      	beq.n	8007e2e <UART_SetConfig+0x162>
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d810      	bhi.n	8007e40 <UART_SetConfig+0x174>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <UART_SetConfig+0x15c>
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	d006      	beq.n	8007e34 <UART_SetConfig+0x168>
 8007e26:	e00b      	b.n	8007e40 <UART_SetConfig+0x174>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	77fb      	strb	r3, [r7, #31]
 8007e2c:	e0f2      	b.n	8008014 <UART_SetConfig+0x348>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e0ef      	b.n	8008014 <UART_SetConfig+0x348>
 8007e34:	2304      	movs	r3, #4
 8007e36:	77fb      	strb	r3, [r7, #31]
 8007e38:	e0ec      	b.n	8008014 <UART_SetConfig+0x348>
 8007e3a:	2308      	movs	r3, #8
 8007e3c:	77fb      	strb	r3, [r7, #31]
 8007e3e:	e0e9      	b.n	8008014 <UART_SetConfig+0x348>
 8007e40:	2310      	movs	r3, #16
 8007e42:	77fb      	strb	r3, [r7, #31]
 8007e44:	e0e6      	b.n	8008014 <UART_SetConfig+0x348>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a56      	ldr	r2, [pc, #344]	; (8007fa4 <UART_SetConfig+0x2d8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d120      	bne.n	8007e92 <UART_SetConfig+0x1c6>
 8007e50:	4b51      	ldr	r3, [pc, #324]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e5c:	d013      	beq.n	8007e86 <UART_SetConfig+0x1ba>
 8007e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e60:	d814      	bhi.n	8007e8c <UART_SetConfig+0x1c0>
 8007e62:	2b80      	cmp	r3, #128	; 0x80
 8007e64:	d009      	beq.n	8007e7a <UART_SetConfig+0x1ae>
 8007e66:	2b80      	cmp	r3, #128	; 0x80
 8007e68:	d810      	bhi.n	8007e8c <UART_SetConfig+0x1c0>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <UART_SetConfig+0x1a8>
 8007e6e:	2b40      	cmp	r3, #64	; 0x40
 8007e70:	d006      	beq.n	8007e80 <UART_SetConfig+0x1b4>
 8007e72:	e00b      	b.n	8007e8c <UART_SetConfig+0x1c0>
 8007e74:	2300      	movs	r3, #0
 8007e76:	77fb      	strb	r3, [r7, #31]
 8007e78:	e0cc      	b.n	8008014 <UART_SetConfig+0x348>
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	77fb      	strb	r3, [r7, #31]
 8007e7e:	e0c9      	b.n	8008014 <UART_SetConfig+0x348>
 8007e80:	2304      	movs	r3, #4
 8007e82:	77fb      	strb	r3, [r7, #31]
 8007e84:	e0c6      	b.n	8008014 <UART_SetConfig+0x348>
 8007e86:	2308      	movs	r3, #8
 8007e88:	77fb      	strb	r3, [r7, #31]
 8007e8a:	e0c3      	b.n	8008014 <UART_SetConfig+0x348>
 8007e8c:	2310      	movs	r3, #16
 8007e8e:	77fb      	strb	r3, [r7, #31]
 8007e90:	e0c0      	b.n	8008014 <UART_SetConfig+0x348>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a44      	ldr	r2, [pc, #272]	; (8007fa8 <UART_SetConfig+0x2dc>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d125      	bne.n	8007ee8 <UART_SetConfig+0x21c>
 8007e9c:	4b3e      	ldr	r3, [pc, #248]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eaa:	d017      	beq.n	8007edc <UART_SetConfig+0x210>
 8007eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eb0:	d817      	bhi.n	8007ee2 <UART_SetConfig+0x216>
 8007eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb6:	d00b      	beq.n	8007ed0 <UART_SetConfig+0x204>
 8007eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ebc:	d811      	bhi.n	8007ee2 <UART_SetConfig+0x216>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <UART_SetConfig+0x1fe>
 8007ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec6:	d006      	beq.n	8007ed6 <UART_SetConfig+0x20a>
 8007ec8:	e00b      	b.n	8007ee2 <UART_SetConfig+0x216>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	77fb      	strb	r3, [r7, #31]
 8007ece:	e0a1      	b.n	8008014 <UART_SetConfig+0x348>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	77fb      	strb	r3, [r7, #31]
 8007ed4:	e09e      	b.n	8008014 <UART_SetConfig+0x348>
 8007ed6:	2304      	movs	r3, #4
 8007ed8:	77fb      	strb	r3, [r7, #31]
 8007eda:	e09b      	b.n	8008014 <UART_SetConfig+0x348>
 8007edc:	2308      	movs	r3, #8
 8007ede:	77fb      	strb	r3, [r7, #31]
 8007ee0:	e098      	b.n	8008014 <UART_SetConfig+0x348>
 8007ee2:	2310      	movs	r3, #16
 8007ee4:	77fb      	strb	r3, [r7, #31]
 8007ee6:	e095      	b.n	8008014 <UART_SetConfig+0x348>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a2f      	ldr	r2, [pc, #188]	; (8007fac <UART_SetConfig+0x2e0>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d125      	bne.n	8007f3e <UART_SetConfig+0x272>
 8007ef2:	4b29      	ldr	r3, [pc, #164]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007efc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f00:	d017      	beq.n	8007f32 <UART_SetConfig+0x266>
 8007f02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f06:	d817      	bhi.n	8007f38 <UART_SetConfig+0x26c>
 8007f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f0c:	d00b      	beq.n	8007f26 <UART_SetConfig+0x25a>
 8007f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f12:	d811      	bhi.n	8007f38 <UART_SetConfig+0x26c>
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <UART_SetConfig+0x254>
 8007f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1c:	d006      	beq.n	8007f2c <UART_SetConfig+0x260>
 8007f1e:	e00b      	b.n	8007f38 <UART_SetConfig+0x26c>
 8007f20:	2301      	movs	r3, #1
 8007f22:	77fb      	strb	r3, [r7, #31]
 8007f24:	e076      	b.n	8008014 <UART_SetConfig+0x348>
 8007f26:	2302      	movs	r3, #2
 8007f28:	77fb      	strb	r3, [r7, #31]
 8007f2a:	e073      	b.n	8008014 <UART_SetConfig+0x348>
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	77fb      	strb	r3, [r7, #31]
 8007f30:	e070      	b.n	8008014 <UART_SetConfig+0x348>
 8007f32:	2308      	movs	r3, #8
 8007f34:	77fb      	strb	r3, [r7, #31]
 8007f36:	e06d      	b.n	8008014 <UART_SetConfig+0x348>
 8007f38:	2310      	movs	r3, #16
 8007f3a:	77fb      	strb	r3, [r7, #31]
 8007f3c:	e06a      	b.n	8008014 <UART_SetConfig+0x348>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a1b      	ldr	r2, [pc, #108]	; (8007fb0 <UART_SetConfig+0x2e4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d138      	bne.n	8007fba <UART_SetConfig+0x2ee>
 8007f48:	4b13      	ldr	r3, [pc, #76]	; (8007f98 <UART_SetConfig+0x2cc>)
 8007f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f56:	d017      	beq.n	8007f88 <UART_SetConfig+0x2bc>
 8007f58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f5c:	d82a      	bhi.n	8007fb4 <UART_SetConfig+0x2e8>
 8007f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f62:	d00b      	beq.n	8007f7c <UART_SetConfig+0x2b0>
 8007f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f68:	d824      	bhi.n	8007fb4 <UART_SetConfig+0x2e8>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <UART_SetConfig+0x2aa>
 8007f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f72:	d006      	beq.n	8007f82 <UART_SetConfig+0x2b6>
 8007f74:	e01e      	b.n	8007fb4 <UART_SetConfig+0x2e8>
 8007f76:	2300      	movs	r3, #0
 8007f78:	77fb      	strb	r3, [r7, #31]
 8007f7a:	e04b      	b.n	8008014 <UART_SetConfig+0x348>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	77fb      	strb	r3, [r7, #31]
 8007f80:	e048      	b.n	8008014 <UART_SetConfig+0x348>
 8007f82:	2304      	movs	r3, #4
 8007f84:	77fb      	strb	r3, [r7, #31]
 8007f86:	e045      	b.n	8008014 <UART_SetConfig+0x348>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	77fb      	strb	r3, [r7, #31]
 8007f8c:	e042      	b.n	8008014 <UART_SetConfig+0x348>
 8007f8e:	bf00      	nop
 8007f90:	efff69f3 	.word	0xefff69f3
 8007f94:	40011000 	.word	0x40011000
 8007f98:	40023800 	.word	0x40023800
 8007f9c:	40004400 	.word	0x40004400
 8007fa0:	40004800 	.word	0x40004800
 8007fa4:	40004c00 	.word	0x40004c00
 8007fa8:	40005000 	.word	0x40005000
 8007fac:	40011400 	.word	0x40011400
 8007fb0:	40007800 	.word	0x40007800
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	77fb      	strb	r3, [r7, #31]
 8007fb8:	e02c      	b.n	8008014 <UART_SetConfig+0x348>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a72      	ldr	r2, [pc, #456]	; (8008188 <UART_SetConfig+0x4bc>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d125      	bne.n	8008010 <UART_SetConfig+0x344>
 8007fc4:	4b71      	ldr	r3, [pc, #452]	; (800818c <UART_SetConfig+0x4c0>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fd2:	d017      	beq.n	8008004 <UART_SetConfig+0x338>
 8007fd4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fd8:	d817      	bhi.n	800800a <UART_SetConfig+0x33e>
 8007fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fde:	d00b      	beq.n	8007ff8 <UART_SetConfig+0x32c>
 8007fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fe4:	d811      	bhi.n	800800a <UART_SetConfig+0x33e>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <UART_SetConfig+0x326>
 8007fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fee:	d006      	beq.n	8007ffe <UART_SetConfig+0x332>
 8007ff0:	e00b      	b.n	800800a <UART_SetConfig+0x33e>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	77fb      	strb	r3, [r7, #31]
 8007ff6:	e00d      	b.n	8008014 <UART_SetConfig+0x348>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	77fb      	strb	r3, [r7, #31]
 8007ffc:	e00a      	b.n	8008014 <UART_SetConfig+0x348>
 8007ffe:	2304      	movs	r3, #4
 8008000:	77fb      	strb	r3, [r7, #31]
 8008002:	e007      	b.n	8008014 <UART_SetConfig+0x348>
 8008004:	2308      	movs	r3, #8
 8008006:	77fb      	strb	r3, [r7, #31]
 8008008:	e004      	b.n	8008014 <UART_SetConfig+0x348>
 800800a:	2310      	movs	r3, #16
 800800c:	77fb      	strb	r3, [r7, #31]
 800800e:	e001      	b.n	8008014 <UART_SetConfig+0x348>
 8008010:	2310      	movs	r3, #16
 8008012:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800801c:	d15b      	bne.n	80080d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800801e:	7ffb      	ldrb	r3, [r7, #31]
 8008020:	2b08      	cmp	r3, #8
 8008022:	d828      	bhi.n	8008076 <UART_SetConfig+0x3aa>
 8008024:	a201      	add	r2, pc, #4	; (adr r2, 800802c <UART_SetConfig+0x360>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	08008051 	.word	0x08008051
 8008030:	08008059 	.word	0x08008059
 8008034:	08008061 	.word	0x08008061
 8008038:	08008077 	.word	0x08008077
 800803c:	08008067 	.word	0x08008067
 8008040:	08008077 	.word	0x08008077
 8008044:	08008077 	.word	0x08008077
 8008048:	08008077 	.word	0x08008077
 800804c:	0800806f 	.word	0x0800806f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008050:	f7fd fbec 	bl	800582c <HAL_RCC_GetPCLK1Freq>
 8008054:	61b8      	str	r0, [r7, #24]
        break;
 8008056:	e013      	b.n	8008080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008058:	f7fd fbfc 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 800805c:	61b8      	str	r0, [r7, #24]
        break;
 800805e:	e00f      	b.n	8008080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008060:	4b4b      	ldr	r3, [pc, #300]	; (8008190 <UART_SetConfig+0x4c4>)
 8008062:	61bb      	str	r3, [r7, #24]
        break;
 8008064:	e00c      	b.n	8008080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008066:	f7fd facf 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 800806a:	61b8      	str	r0, [r7, #24]
        break;
 800806c:	e008      	b.n	8008080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800806e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008072:	61bb      	str	r3, [r7, #24]
        break;
 8008074:	e004      	b.n	8008080 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	77bb      	strb	r3, [r7, #30]
        break;
 800807e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d074      	beq.n	8008170 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	005a      	lsls	r2, r3, #1
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	441a      	add	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	fbb2 f3f3 	udiv	r3, r2, r3
 800809a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	2b0f      	cmp	r3, #15
 80080a0:	d916      	bls.n	80080d0 <UART_SetConfig+0x404>
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a8:	d212      	bcs.n	80080d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f023 030f 	bic.w	r3, r3, #15
 80080b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	b29a      	uxth	r2, r3
 80080c0:	89fb      	ldrh	r3, [r7, #14]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	89fa      	ldrh	r2, [r7, #14]
 80080cc:	60da      	str	r2, [r3, #12]
 80080ce:	e04f      	b.n	8008170 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	77bb      	strb	r3, [r7, #30]
 80080d4:	e04c      	b.n	8008170 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080d6:	7ffb      	ldrb	r3, [r7, #31]
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d828      	bhi.n	800812e <UART_SetConfig+0x462>
 80080dc:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <UART_SetConfig+0x418>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	08008109 	.word	0x08008109
 80080e8:	08008111 	.word	0x08008111
 80080ec:	08008119 	.word	0x08008119
 80080f0:	0800812f 	.word	0x0800812f
 80080f4:	0800811f 	.word	0x0800811f
 80080f8:	0800812f 	.word	0x0800812f
 80080fc:	0800812f 	.word	0x0800812f
 8008100:	0800812f 	.word	0x0800812f
 8008104:	08008127 	.word	0x08008127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008108:	f7fd fb90 	bl	800582c <HAL_RCC_GetPCLK1Freq>
 800810c:	61b8      	str	r0, [r7, #24]
        break;
 800810e:	e013      	b.n	8008138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008110:	f7fd fba0 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 8008114:	61b8      	str	r0, [r7, #24]
        break;
 8008116:	e00f      	b.n	8008138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008118:	4b1d      	ldr	r3, [pc, #116]	; (8008190 <UART_SetConfig+0x4c4>)
 800811a:	61bb      	str	r3, [r7, #24]
        break;
 800811c:	e00c      	b.n	8008138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800811e:	f7fd fa73 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 8008122:	61b8      	str	r0, [r7, #24]
        break;
 8008124:	e008      	b.n	8008138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812a:	61bb      	str	r3, [r7, #24]
        break;
 800812c:	e004      	b.n	8008138 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	77bb      	strb	r3, [r7, #30]
        break;
 8008136:	bf00      	nop
    }

    if (pclk != 0U)
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d018      	beq.n	8008170 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	085a      	lsrs	r2, r3, #1
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	441a      	add	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008150:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	2b0f      	cmp	r3, #15
 8008156:	d909      	bls.n	800816c <UART_SetConfig+0x4a0>
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800815e:	d205      	bcs.n	800816c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	b29a      	uxth	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60da      	str	r2, [r3, #12]
 800816a:	e001      	b.n	8008170 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800817c:	7fbb      	ldrb	r3, [r7, #30]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3720      	adds	r7, #32
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	40007c00 	.word	0x40007c00
 800818c:	40023800 	.word	0x40023800
 8008190:	00f42400 	.word	0x00f42400

08008194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00a      	beq.n	80081be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00a      	beq.n	8008246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01a      	beq.n	80082aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008292:	d10a      	bne.n	80082aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	605a      	str	r2, [r3, #4]
  }
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af02      	add	r7, sp, #8
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082e8:	f7fa ff0c 	bl	8003104 <HAL_GetTick>
 80082ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0308 	and.w	r3, r3, #8
 80082f8:	2b08      	cmp	r3, #8
 80082fa:	d10e      	bne.n	800831a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f81b 	bl	8008346 <UART_WaitOnFlagUntilTimeout>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e011      	b.n	800833e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2220      	movs	r2, #32
 800831e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2220      	movs	r2, #32
 8008324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b09c      	sub	sp, #112	; 0x70
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	4613      	mov	r3, r2
 8008354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008356:	e0a7      	b.n	80084a8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800835a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835e:	f000 80a3 	beq.w	80084a8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008362:	f7fa fecf 	bl	8003104 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800836e:	429a      	cmp	r2, r3
 8008370:	d302      	bcc.n	8008378 <UART_WaitOnFlagUntilTimeout+0x32>
 8008372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008374:	2b00      	cmp	r3, #0
 8008376:	d13f      	bne.n	80083f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008388:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800838c:	667b      	str	r3, [r7, #100]	; 0x64
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	461a      	mov	r2, r3
 8008394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008398:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800839c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e6      	bne.n	8008378 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3308      	adds	r3, #8
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	f023 0301 	bic.w	r3, r3, #1
 80083c0:	663b      	str	r3, [r7, #96]	; 0x60
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3308      	adds	r3, #8
 80083c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80083cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e5      	bne.n	80083aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2220      	movs	r2, #32
 80083e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e068      	b.n	80084ca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0304 	and.w	r3, r3, #4
 8008402:	2b00      	cmp	r3, #0
 8008404:	d050      	beq.n	80084a8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008414:	d148      	bne.n	80084a8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800841e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008434:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800843e:	637b      	str	r3, [r7, #52]	; 0x34
 8008440:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e6      	bne.n	8008420 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3308      	adds	r3, #8
 8008458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	613b      	str	r3, [r7, #16]
   return(result);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f023 0301 	bic.w	r3, r3, #1
 8008468:	66bb      	str	r3, [r7, #104]	; 0x68
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3308      	adds	r3, #8
 8008470:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008472:	623a      	str	r2, [r7, #32]
 8008474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	69f9      	ldr	r1, [r7, #28]
 8008478:	6a3a      	ldr	r2, [r7, #32]
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e5      	bne.n	8008452 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2220      	movs	r2, #32
 800848a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2220      	movs	r2, #32
 8008490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2220      	movs	r2, #32
 8008498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e010      	b.n	80084ca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	69da      	ldr	r2, [r3, #28]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	4013      	ands	r3, r2
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	bf0c      	ite	eq
 80084b8:	2301      	moveq	r3, #1
 80084ba:	2300      	movne	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	461a      	mov	r2, r3
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	f43f af48 	beq.w	8008358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3770      	adds	r7, #112	; 0x70
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b097      	sub	sp, #92	; 0x5c
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	88fa      	ldrh	r2, [r7, #6]
 80084ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	88fa      	ldrh	r2, [r7, #6]
 80084f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008506:	d10e      	bne.n	8008526 <UART_Start_Receive_IT+0x52>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d105      	bne.n	800851c <UART_Start_Receive_IT+0x48>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008516:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800851a:	e02d      	b.n	8008578 <UART_Start_Receive_IT+0xa4>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	22ff      	movs	r2, #255	; 0xff
 8008520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008524:	e028      	b.n	8008578 <UART_Start_Receive_IT+0xa4>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10d      	bne.n	800854a <UART_Start_Receive_IT+0x76>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d104      	bne.n	8008540 <UART_Start_Receive_IT+0x6c>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	22ff      	movs	r2, #255	; 0xff
 800853a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800853e:	e01b      	b.n	8008578 <UART_Start_Receive_IT+0xa4>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	227f      	movs	r2, #127	; 0x7f
 8008544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008548:	e016      	b.n	8008578 <UART_Start_Receive_IT+0xa4>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008552:	d10d      	bne.n	8008570 <UART_Start_Receive_IT+0x9c>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d104      	bne.n	8008566 <UART_Start_Receive_IT+0x92>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	227f      	movs	r2, #127	; 0x7f
 8008560:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008564:	e008      	b.n	8008578 <UART_Start_Receive_IT+0xa4>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	223f      	movs	r2, #63	; 0x3f
 800856a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800856e:	e003      	b.n	8008578 <UART_Start_Receive_IT+0xa4>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2222      	movs	r2, #34	; 0x22
 8008584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3308      	adds	r3, #8
 800858e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	f043 0301 	orr.w	r3, r3, #1
 800859e:	657b      	str	r3, [r7, #84]	; 0x54
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3308      	adds	r3, #8
 80085a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80085aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e5      	bne.n	8008588 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c4:	d107      	bne.n	80085d6 <UART_Start_Receive_IT+0x102>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d103      	bne.n	80085d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4a21      	ldr	r2, [pc, #132]	; (8008658 <UART_Start_Receive_IT+0x184>)
 80085d2:	669a      	str	r2, [r3, #104]	; 0x68
 80085d4:	e002      	b.n	80085dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	4a20      	ldr	r2, [pc, #128]	; (800865c <UART_Start_Receive_IT+0x188>)
 80085da:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d019      	beq.n	8008618 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80085f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008602:	637b      	str	r3, [r7, #52]	; 0x34
 8008604:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e6      	bne.n	80085e4 <UART_Start_Receive_IT+0x110>
 8008616:	e018      	b.n	800864a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	613b      	str	r3, [r7, #16]
   return(result);
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f043 0320 	orr.w	r3, r3, #32
 800862c:	653b      	str	r3, [r7, #80]	; 0x50
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008636:	623b      	str	r3, [r7, #32]
 8008638:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	69f9      	ldr	r1, [r7, #28]
 800863c:	6a3a      	ldr	r2, [r7, #32]
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	61bb      	str	r3, [r7, #24]
   return(result);
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e6      	bne.n	8008618 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	375c      	adds	r7, #92	; 0x5c
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	0800890f 	.word	0x0800890f
 800865c:	080087a9 	.word	0x080087a9

08008660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b095      	sub	sp, #84	; 0x54
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800867c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008686:	643b      	str	r3, [r7, #64]	; 0x40
 8008688:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800868c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e6      	bne.n	8008668 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3308      	adds	r3, #8
 80086a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	f023 0301 	bic.w	r3, r3, #1
 80086b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3308      	adds	r3, #8
 80086b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e5      	bne.n	800869a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d118      	bne.n	8008708 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	e853 3f00 	ldrex	r3, [r3]
 80086e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f023 0310 	bic.w	r3, r3, #16
 80086ea:	647b      	str	r3, [r7, #68]	; 0x44
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	461a      	mov	r2, r3
 80086f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f4:	61bb      	str	r3, [r7, #24]
 80086f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f8:	6979      	ldr	r1, [r7, #20]
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	e841 2300 	strex	r3, r2, [r1]
 8008700:	613b      	str	r3, [r7, #16]
   return(result);
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1e6      	bne.n	80086d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2220      	movs	r2, #32
 800870c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800871c:	bf00      	nop
 800871e:	3754      	adds	r7, #84	; 0x54
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f7ff faaa 	bl	8007ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	60bb      	str	r3, [r7, #8]
   return(result);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008770:	61fb      	str	r3, [r7, #28]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	61bb      	str	r3, [r7, #24]
 800877c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6979      	ldr	r1, [r7, #20]
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	613b      	str	r3, [r7, #16]
   return(result);
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e6      	bne.n	800875c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7ff fa76 	bl	8007c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087a0:	bf00      	nop
 80087a2:	3720      	adds	r7, #32
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b096      	sub	sp, #88	; 0x58
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087c0:	2b22      	cmp	r3, #34	; 0x22
 80087c2:	f040 8098 	bne.w	80088f6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80087d4:	b2d9      	uxtb	r1, r3
 80087d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e0:	400a      	ands	r2, r1
 80087e2:	b2d2      	uxtb	r2, r2
 80087e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	3b01      	subs	r3, #1
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008808:	b29b      	uxth	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d17b      	bne.n	8008906 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800881c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008822:	653b      	str	r3, [r7, #80]	; 0x50
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800882c:	647b      	str	r3, [r7, #68]	; 0x44
 800882e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800883a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e6      	bne.n	800880e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3308      	adds	r3, #8
 8008846:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	e853 3f00 	ldrex	r3, [r3]
 800884e:	623b      	str	r3, [r7, #32]
   return(result);
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	f023 0301 	bic.w	r3, r3, #1
 8008856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3308      	adds	r3, #8
 800885e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008860:	633a      	str	r2, [r7, #48]	; 0x30
 8008862:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e5      	bne.n	8008840 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2220      	movs	r2, #32
 8008878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800888c:	2b01      	cmp	r3, #1
 800888e:	d12e      	bne.n	80088ee <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	e853 3f00 	ldrex	r3, [r3]
 80088a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f023 0310 	bic.w	r3, r3, #16
 80088aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088b4:	61fb      	str	r3, [r7, #28]
 80088b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b8:	69b9      	ldr	r1, [r7, #24]
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	e841 2300 	strex	r3, r2, [r1]
 80088c0:	617b      	str	r3, [r7, #20]
   return(result);
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1e6      	bne.n	8008896 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	f003 0310 	and.w	r3, r3, #16
 80088d2:	2b10      	cmp	r3, #16
 80088d4:	d103      	bne.n	80088de <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2210      	movs	r2, #16
 80088dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff f9e4 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088ec:	e00b      	b.n	8008906 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7f9 fa52 	bl	8001d98 <HAL_UART_RxCpltCallback>
}
 80088f4:	e007      	b.n	8008906 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	699a      	ldr	r2, [r3, #24]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0208 	orr.w	r2, r2, #8
 8008904:	619a      	str	r2, [r3, #24]
}
 8008906:	bf00      	nop
 8008908:	3758      	adds	r7, #88	; 0x58
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b096      	sub	sp, #88	; 0x58
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800891c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008926:	2b22      	cmp	r3, #34	; 0x22
 8008928:	f040 8098 	bne.w	8008a5c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800893c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008940:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008944:	4013      	ands	r3, r2
 8008946:	b29a      	uxth	r2, r3
 8008948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800894a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008950:	1c9a      	adds	r2, r3, #2
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800895c:	b29b      	uxth	r3, r3
 800895e:	3b01      	subs	r3, #1
 8008960:	b29a      	uxth	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800896e:	b29b      	uxth	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d17b      	bne.n	8008a6c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008988:	64fb      	str	r3, [r7, #76]	; 0x4c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008992:	643b      	str	r3, [r7, #64]	; 0x40
 8008994:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e6      	bne.n	8008974 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3308      	adds	r3, #8
 80089ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	f023 0301 	bic.w	r3, r3, #1
 80089bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3308      	adds	r3, #8
 80089c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e5      	bne.n	80089a6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d12e      	bne.n	8008a54 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f023 0310 	bic.w	r3, r3, #16
 8008a10:	647b      	str	r3, [r7, #68]	; 0x44
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a1a:	61bb      	str	r3, [r7, #24]
 8008a1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	6979      	ldr	r1, [r7, #20]
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	613b      	str	r3, [r7, #16]
   return(result);
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e6      	bne.n	80089fc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	f003 0310 	and.w	r3, r3, #16
 8008a38:	2b10      	cmp	r3, #16
 8008a3a:	d103      	bne.n	8008a44 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2210      	movs	r2, #16
 8008a42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff f931 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a52:	e00b      	b.n	8008a6c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7f9 f99f 	bl	8001d98 <HAL_UART_RxCpltCallback>
}
 8008a5a:	e007      	b.n	8008a6c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0208 	orr.w	r2, r2, #8
 8008a6a:	619a      	str	r2, [r3, #24]
}
 8008a6c:	bf00      	nop
 8008a6e:	3758      	adds	r7, #88	; 0x58
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <arm_pid_reset_f32>:
 8008a74:	2300      	movs	r3, #0
 8008a76:	60c3      	str	r3, [r0, #12]
 8008a78:	6103      	str	r3, [r0, #16]
 8008a7a:	6143      	str	r3, [r0, #20]
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop

08008a80 <arm_pid_init_f32>:
 8008a80:	ed90 7a08 	vldr	s14, [r0, #32]
 8008a84:	edd0 7a06 	vldr	s15, [r0, #24]
 8008a88:	ed90 6a07 	vldr	s12, [r0, #28]
 8008a8c:	eef1 6a67 	vneg.f32	s13, s15
 8008a90:	ed80 7a02 	vstr	s14, [r0, #8]
 8008a94:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008a98:	ee37 6a07 	vadd.f32	s12, s14, s14
 8008a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008aa0:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8008aa4:	edc0 7a00 	vstr	s15, [r0]
 8008aa8:	ed80 7a01 	vstr	s14, [r0, #4]
 8008aac:	b901      	cbnz	r1, 8008ab0 <arm_pid_init_f32+0x30>
 8008aae:	4770      	bx	lr
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60c3      	str	r3, [r0, #12]
 8008ab4:	6103      	str	r3, [r0, #16]
 8008ab6:	6143      	str	r3, [r0, #20]
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop

08008abc <atof>:
 8008abc:	2100      	movs	r1, #0
 8008abe:	f000 be99 	b.w	80097f4 <strtod>
	...

08008ac4 <gcvt>:
 8008ac4:	b530      	push	{r4, r5, lr}
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	b085      	sub	sp, #20
 8008aca:	460c      	mov	r4, r1
 8008acc:	4605      	mov	r5, r0
 8008ace:	2300      	movs	r3, #0
 8008ad0:	ec51 0b10 	vmov	r0, r1, d0
 8008ad4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ad8:	f7f8 f820 	bl	8000b1c <__aeabi_dcmplt>
 8008adc:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	b118      	cbz	r0, 8008aec <gcvt+0x28>
 8008ae4:	232d      	movs	r3, #45	; 0x2d
 8008ae6:	f802 3b01 	strb.w	r3, [r2], #1
 8008aea:	3d01      	subs	r5, #1
 8008aec:	2300      	movs	r3, #0
 8008aee:	4806      	ldr	r0, [pc, #24]	; (8008b08 <gcvt+0x44>)
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	4629      	mov	r1, r5
 8008af4:	2367      	movs	r3, #103	; 0x67
 8008af6:	6800      	ldr	r0, [r0, #0]
 8008af8:	f000 ff02 	bl	8009900 <_gcvt>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	bf14      	ite	ne
 8008b00:	4620      	movne	r0, r4
 8008b02:	2000      	moveq	r0, #0
 8008b04:	b005      	add	sp, #20
 8008b06:	bd30      	pop	{r4, r5, pc}
 8008b08:	2000001c 	.word	0x2000001c

08008b0c <__errno>:
 8008b0c:	4b01      	ldr	r3, [pc, #4]	; (8008b14 <__errno+0x8>)
 8008b0e:	6818      	ldr	r0, [r3, #0]
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	2000001c 	.word	0x2000001c

08008b18 <__libc_init_array>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4d0d      	ldr	r5, [pc, #52]	; (8008b50 <__libc_init_array+0x38>)
 8008b1c:	4c0d      	ldr	r4, [pc, #52]	; (8008b54 <__libc_init_array+0x3c>)
 8008b1e:	1b64      	subs	r4, r4, r5
 8008b20:	10a4      	asrs	r4, r4, #2
 8008b22:	2600      	movs	r6, #0
 8008b24:	42a6      	cmp	r6, r4
 8008b26:	d109      	bne.n	8008b3c <__libc_init_array+0x24>
 8008b28:	4d0b      	ldr	r5, [pc, #44]	; (8008b58 <__libc_init_array+0x40>)
 8008b2a:	4c0c      	ldr	r4, [pc, #48]	; (8008b5c <__libc_init_array+0x44>)
 8008b2c:	f003 ff0c 	bl	800c948 <_init>
 8008b30:	1b64      	subs	r4, r4, r5
 8008b32:	10a4      	asrs	r4, r4, #2
 8008b34:	2600      	movs	r6, #0
 8008b36:	42a6      	cmp	r6, r4
 8008b38:	d105      	bne.n	8008b46 <__libc_init_array+0x2e>
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b40:	4798      	blx	r3
 8008b42:	3601      	adds	r6, #1
 8008b44:	e7ee      	b.n	8008b24 <__libc_init_array+0xc>
 8008b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b4a:	4798      	blx	r3
 8008b4c:	3601      	adds	r6, #1
 8008b4e:	e7f2      	b.n	8008b36 <__libc_init_array+0x1e>
 8008b50:	0800d618 	.word	0x0800d618
 8008b54:	0800d618 	.word	0x0800d618
 8008b58:	0800d618 	.word	0x0800d618
 8008b5c:	0800d61c 	.word	0x0800d61c

08008b60 <memcpy>:
 8008b60:	440a      	add	r2, r1
 8008b62:	4291      	cmp	r1, r2
 8008b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b68:	d100      	bne.n	8008b6c <memcpy+0xc>
 8008b6a:	4770      	bx	lr
 8008b6c:	b510      	push	{r4, lr}
 8008b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b76:	4291      	cmp	r1, r2
 8008b78:	d1f9      	bne.n	8008b6e <memcpy+0xe>
 8008b7a:	bd10      	pop	{r4, pc}

08008b7c <memset>:
 8008b7c:	4402      	add	r2, r0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d100      	bne.n	8008b86 <memset+0xa>
 8008b84:	4770      	bx	lr
 8008b86:	f803 1b01 	strb.w	r1, [r3], #1
 8008b8a:	e7f9      	b.n	8008b80 <memset+0x4>

08008b8c <strcat>:
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	4602      	mov	r2, r0
 8008b90:	7814      	ldrb	r4, [r2, #0]
 8008b92:	4613      	mov	r3, r2
 8008b94:	3201      	adds	r2, #1
 8008b96:	2c00      	cmp	r4, #0
 8008b98:	d1fa      	bne.n	8008b90 <strcat+0x4>
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ba0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ba4:	2a00      	cmp	r2, #0
 8008ba6:	d1f9      	bne.n	8008b9c <strcat+0x10>
 8008ba8:	bd10      	pop	{r4, pc}

08008baa <sulp>:
 8008baa:	b570      	push	{r4, r5, r6, lr}
 8008bac:	4604      	mov	r4, r0
 8008bae:	460d      	mov	r5, r1
 8008bb0:	ec45 4b10 	vmov	d0, r4, r5
 8008bb4:	4616      	mov	r6, r2
 8008bb6:	f001 fe57 	bl	800a868 <__ulp>
 8008bba:	ec51 0b10 	vmov	r0, r1, d0
 8008bbe:	b17e      	cbz	r6, 8008be0 <sulp+0x36>
 8008bc0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bc4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	dd09      	ble.n	8008be0 <sulp+0x36>
 8008bcc:	051b      	lsls	r3, r3, #20
 8008bce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008bd2:	2400      	movs	r4, #0
 8008bd4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008bd8:	4622      	mov	r2, r4
 8008bda:	462b      	mov	r3, r5
 8008bdc:	f7f7 fd2c 	bl	8000638 <__aeabi_dmul>
 8008be0:	bd70      	pop	{r4, r5, r6, pc}
 8008be2:	0000      	movs	r0, r0
 8008be4:	0000      	movs	r0, r0
	...

08008be8 <_strtod_l>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	ed2d 8b02 	vpush	{d8}
 8008bf0:	b09d      	sub	sp, #116	; 0x74
 8008bf2:	461f      	mov	r7, r3
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9318      	str	r3, [sp, #96]	; 0x60
 8008bf8:	4ba2      	ldr	r3, [pc, #648]	; (8008e84 <_strtod_l+0x29c>)
 8008bfa:	9213      	str	r2, [sp, #76]	; 0x4c
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	9305      	str	r3, [sp, #20]
 8008c00:	4604      	mov	r4, r0
 8008c02:	4618      	mov	r0, r3
 8008c04:	4688      	mov	r8, r1
 8008c06:	f7f7 fb03 	bl	8000210 <strlen>
 8008c0a:	f04f 0a00 	mov.w	sl, #0
 8008c0e:	4605      	mov	r5, r0
 8008c10:	f04f 0b00 	mov.w	fp, #0
 8008c14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c1a:	781a      	ldrb	r2, [r3, #0]
 8008c1c:	2a2b      	cmp	r2, #43	; 0x2b
 8008c1e:	d04e      	beq.n	8008cbe <_strtod_l+0xd6>
 8008c20:	d83b      	bhi.n	8008c9a <_strtod_l+0xb2>
 8008c22:	2a0d      	cmp	r2, #13
 8008c24:	d834      	bhi.n	8008c90 <_strtod_l+0xa8>
 8008c26:	2a08      	cmp	r2, #8
 8008c28:	d834      	bhi.n	8008c94 <_strtod_l+0xac>
 8008c2a:	2a00      	cmp	r2, #0
 8008c2c:	d03e      	beq.n	8008cac <_strtod_l+0xc4>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	930a      	str	r3, [sp, #40]	; 0x28
 8008c32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008c34:	7833      	ldrb	r3, [r6, #0]
 8008c36:	2b30      	cmp	r3, #48	; 0x30
 8008c38:	f040 80b0 	bne.w	8008d9c <_strtod_l+0x1b4>
 8008c3c:	7873      	ldrb	r3, [r6, #1]
 8008c3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c42:	2b58      	cmp	r3, #88	; 0x58
 8008c44:	d168      	bne.n	8008d18 <_strtod_l+0x130>
 8008c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	ab18      	add	r3, sp, #96	; 0x60
 8008c4c:	9702      	str	r7, [sp, #8]
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	4a8d      	ldr	r2, [pc, #564]	; (8008e88 <_strtod_l+0x2a0>)
 8008c52:	ab19      	add	r3, sp, #100	; 0x64
 8008c54:	a917      	add	r1, sp, #92	; 0x5c
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 ff7a 	bl	8009b50 <__gethex>
 8008c5c:	f010 0707 	ands.w	r7, r0, #7
 8008c60:	4605      	mov	r5, r0
 8008c62:	d005      	beq.n	8008c70 <_strtod_l+0x88>
 8008c64:	2f06      	cmp	r7, #6
 8008c66:	d12c      	bne.n	8008cc2 <_strtod_l+0xda>
 8008c68:	3601      	adds	r6, #1
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f040 8590 	bne.w	8009798 <_strtod_l+0xbb0>
 8008c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7a:	b1eb      	cbz	r3, 8008cb8 <_strtod_l+0xd0>
 8008c7c:	4652      	mov	r2, sl
 8008c7e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008c82:	ec43 2b10 	vmov	d0, r2, r3
 8008c86:	b01d      	add	sp, #116	; 0x74
 8008c88:	ecbd 8b02 	vpop	{d8}
 8008c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c90:	2a20      	cmp	r2, #32
 8008c92:	d1cc      	bne.n	8008c2e <_strtod_l+0x46>
 8008c94:	3301      	adds	r3, #1
 8008c96:	9317      	str	r3, [sp, #92]	; 0x5c
 8008c98:	e7be      	b.n	8008c18 <_strtod_l+0x30>
 8008c9a:	2a2d      	cmp	r2, #45	; 0x2d
 8008c9c:	d1c7      	bne.n	8008c2e <_strtod_l+0x46>
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	920a      	str	r2, [sp, #40]	; 0x28
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ca6:	785b      	ldrb	r3, [r3, #1]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1c2      	bne.n	8008c32 <_strtod_l+0x4a>
 8008cac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f040 856e 	bne.w	8009794 <_strtod_l+0xbac>
 8008cb8:	4652      	mov	r2, sl
 8008cba:	465b      	mov	r3, fp
 8008cbc:	e7e1      	b.n	8008c82 <_strtod_l+0x9a>
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	e7ee      	b.n	8008ca0 <_strtod_l+0xb8>
 8008cc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008cc4:	b13a      	cbz	r2, 8008cd6 <_strtod_l+0xee>
 8008cc6:	2135      	movs	r1, #53	; 0x35
 8008cc8:	a81a      	add	r0, sp, #104	; 0x68
 8008cca:	f001 fef7 	bl	800aabc <__copybits>
 8008cce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f001 fa97 	bl	800a204 <_Bfree>
 8008cd6:	3f01      	subs	r7, #1
 8008cd8:	2f04      	cmp	r7, #4
 8008cda:	d806      	bhi.n	8008cea <_strtod_l+0x102>
 8008cdc:	e8df f007 	tbb	[pc, r7]
 8008ce0:	1714030a 	.word	0x1714030a
 8008ce4:	0a          	.byte	0x0a
 8008ce5:	00          	.byte	0x00
 8008ce6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008cea:	0728      	lsls	r0, r5, #28
 8008cec:	d5c0      	bpl.n	8008c70 <_strtod_l+0x88>
 8008cee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008cf2:	e7bd      	b.n	8008c70 <_strtod_l+0x88>
 8008cf4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008cf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008cfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008cfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d06:	e7f0      	b.n	8008cea <_strtod_l+0x102>
 8008d08:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008e8c <_strtod_l+0x2a4>
 8008d0c:	e7ed      	b.n	8008cea <_strtod_l+0x102>
 8008d0e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008d12:	f04f 3aff 	mov.w	sl, #4294967295
 8008d16:	e7e8      	b.n	8008cea <_strtod_l+0x102>
 8008d18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d1e:	785b      	ldrb	r3, [r3, #1]
 8008d20:	2b30      	cmp	r3, #48	; 0x30
 8008d22:	d0f9      	beq.n	8008d18 <_strtod_l+0x130>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0a3      	beq.n	8008c70 <_strtod_l+0x88>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f04f 0900 	mov.w	r9, #0
 8008d2e:	9304      	str	r3, [sp, #16]
 8008d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d32:	9308      	str	r3, [sp, #32]
 8008d34:	f8cd 901c 	str.w	r9, [sp, #28]
 8008d38:	464f      	mov	r7, r9
 8008d3a:	220a      	movs	r2, #10
 8008d3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008d3e:	7806      	ldrb	r6, [r0, #0]
 8008d40:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d44:	b2d9      	uxtb	r1, r3
 8008d46:	2909      	cmp	r1, #9
 8008d48:	d92a      	bls.n	8008da0 <_strtod_l+0x1b8>
 8008d4a:	9905      	ldr	r1, [sp, #20]
 8008d4c:	462a      	mov	r2, r5
 8008d4e:	f002 f957 	bl	800b000 <strncmp>
 8008d52:	b398      	cbz	r0, 8008dbc <_strtod_l+0x1d4>
 8008d54:	2000      	movs	r0, #0
 8008d56:	4632      	mov	r2, r6
 8008d58:	463d      	mov	r5, r7
 8008d5a:	9005      	str	r0, [sp, #20]
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2a65      	cmp	r2, #101	; 0x65
 8008d60:	d001      	beq.n	8008d66 <_strtod_l+0x17e>
 8008d62:	2a45      	cmp	r2, #69	; 0x45
 8008d64:	d118      	bne.n	8008d98 <_strtod_l+0x1b0>
 8008d66:	b91d      	cbnz	r5, 8008d70 <_strtod_l+0x188>
 8008d68:	9a04      	ldr	r2, [sp, #16]
 8008d6a:	4302      	orrs	r2, r0
 8008d6c:	d09e      	beq.n	8008cac <_strtod_l+0xc4>
 8008d6e:	2500      	movs	r5, #0
 8008d70:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008d74:	f108 0201 	add.w	r2, r8, #1
 8008d78:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d7a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008d7e:	2a2b      	cmp	r2, #43	; 0x2b
 8008d80:	d075      	beq.n	8008e6e <_strtod_l+0x286>
 8008d82:	2a2d      	cmp	r2, #45	; 0x2d
 8008d84:	d07b      	beq.n	8008e7e <_strtod_l+0x296>
 8008d86:	f04f 0c00 	mov.w	ip, #0
 8008d8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008d8e:	2909      	cmp	r1, #9
 8008d90:	f240 8082 	bls.w	8008e98 <_strtod_l+0x2b0>
 8008d94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008d98:	2600      	movs	r6, #0
 8008d9a:	e09d      	b.n	8008ed8 <_strtod_l+0x2f0>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e7c4      	b.n	8008d2a <_strtod_l+0x142>
 8008da0:	2f08      	cmp	r7, #8
 8008da2:	bfd8      	it	le
 8008da4:	9907      	ldrle	r1, [sp, #28]
 8008da6:	f100 0001 	add.w	r0, r0, #1
 8008daa:	bfda      	itte	le
 8008dac:	fb02 3301 	mlale	r3, r2, r1, r3
 8008db0:	9307      	strle	r3, [sp, #28]
 8008db2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008db6:	3701      	adds	r7, #1
 8008db8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008dba:	e7bf      	b.n	8008d3c <_strtod_l+0x154>
 8008dbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dbe:	195a      	adds	r2, r3, r5
 8008dc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008dc2:	5d5a      	ldrb	r2, [r3, r5]
 8008dc4:	2f00      	cmp	r7, #0
 8008dc6:	d037      	beq.n	8008e38 <_strtod_l+0x250>
 8008dc8:	9005      	str	r0, [sp, #20]
 8008dca:	463d      	mov	r5, r7
 8008dcc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008dd0:	2b09      	cmp	r3, #9
 8008dd2:	d912      	bls.n	8008dfa <_strtod_l+0x212>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e7c2      	b.n	8008d5e <_strtod_l+0x176>
 8008dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008dde:	785a      	ldrb	r2, [r3, #1]
 8008de0:	3001      	adds	r0, #1
 8008de2:	2a30      	cmp	r2, #48	; 0x30
 8008de4:	d0f8      	beq.n	8008dd8 <_strtod_l+0x1f0>
 8008de6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008dea:	2b08      	cmp	r3, #8
 8008dec:	f200 84d9 	bhi.w	80097a2 <_strtod_l+0xbba>
 8008df0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008df2:	9005      	str	r0, [sp, #20]
 8008df4:	2000      	movs	r0, #0
 8008df6:	9308      	str	r3, [sp, #32]
 8008df8:	4605      	mov	r5, r0
 8008dfa:	3a30      	subs	r2, #48	; 0x30
 8008dfc:	f100 0301 	add.w	r3, r0, #1
 8008e00:	d014      	beq.n	8008e2c <_strtod_l+0x244>
 8008e02:	9905      	ldr	r1, [sp, #20]
 8008e04:	4419      	add	r1, r3
 8008e06:	9105      	str	r1, [sp, #20]
 8008e08:	462b      	mov	r3, r5
 8008e0a:	eb00 0e05 	add.w	lr, r0, r5
 8008e0e:	210a      	movs	r1, #10
 8008e10:	4573      	cmp	r3, lr
 8008e12:	d113      	bne.n	8008e3c <_strtod_l+0x254>
 8008e14:	182b      	adds	r3, r5, r0
 8008e16:	2b08      	cmp	r3, #8
 8008e18:	f105 0501 	add.w	r5, r5, #1
 8008e1c:	4405      	add	r5, r0
 8008e1e:	dc1c      	bgt.n	8008e5a <_strtod_l+0x272>
 8008e20:	9907      	ldr	r1, [sp, #28]
 8008e22:	230a      	movs	r3, #10
 8008e24:	fb03 2301 	mla	r3, r3, r1, r2
 8008e28:	9307      	str	r3, [sp, #28]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e2e:	1c51      	adds	r1, r2, #1
 8008e30:	9117      	str	r1, [sp, #92]	; 0x5c
 8008e32:	7852      	ldrb	r2, [r2, #1]
 8008e34:	4618      	mov	r0, r3
 8008e36:	e7c9      	b.n	8008dcc <_strtod_l+0x1e4>
 8008e38:	4638      	mov	r0, r7
 8008e3a:	e7d2      	b.n	8008de2 <_strtod_l+0x1fa>
 8008e3c:	2b08      	cmp	r3, #8
 8008e3e:	dc04      	bgt.n	8008e4a <_strtod_l+0x262>
 8008e40:	9e07      	ldr	r6, [sp, #28]
 8008e42:	434e      	muls	r6, r1
 8008e44:	9607      	str	r6, [sp, #28]
 8008e46:	3301      	adds	r3, #1
 8008e48:	e7e2      	b.n	8008e10 <_strtod_l+0x228>
 8008e4a:	f103 0c01 	add.w	ip, r3, #1
 8008e4e:	f1bc 0f10 	cmp.w	ip, #16
 8008e52:	bfd8      	it	le
 8008e54:	fb01 f909 	mulle.w	r9, r1, r9
 8008e58:	e7f5      	b.n	8008e46 <_strtod_l+0x25e>
 8008e5a:	2d10      	cmp	r5, #16
 8008e5c:	bfdc      	itt	le
 8008e5e:	230a      	movle	r3, #10
 8008e60:	fb03 2909 	mlale	r9, r3, r9, r2
 8008e64:	e7e1      	b.n	8008e2a <_strtod_l+0x242>
 8008e66:	2300      	movs	r3, #0
 8008e68:	9305      	str	r3, [sp, #20]
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e77c      	b.n	8008d68 <_strtod_l+0x180>
 8008e6e:	f04f 0c00 	mov.w	ip, #0
 8008e72:	f108 0202 	add.w	r2, r8, #2
 8008e76:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e78:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008e7c:	e785      	b.n	8008d8a <_strtod_l+0x1a2>
 8008e7e:	f04f 0c01 	mov.w	ip, #1
 8008e82:	e7f6      	b.n	8008e72 <_strtod_l+0x28a>
 8008e84:	0800d250 	.word	0x0800d250
 8008e88:	0800d188 	.word	0x0800d188
 8008e8c:	7ff00000 	.word	0x7ff00000
 8008e90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e92:	1c51      	adds	r1, r2, #1
 8008e94:	9117      	str	r1, [sp, #92]	; 0x5c
 8008e96:	7852      	ldrb	r2, [r2, #1]
 8008e98:	2a30      	cmp	r2, #48	; 0x30
 8008e9a:	d0f9      	beq.n	8008e90 <_strtod_l+0x2a8>
 8008e9c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ea0:	2908      	cmp	r1, #8
 8008ea2:	f63f af79 	bhi.w	8008d98 <_strtod_l+0x1b0>
 8008ea6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008eaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008eac:	9206      	str	r2, [sp, #24]
 8008eae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008eb0:	1c51      	adds	r1, r2, #1
 8008eb2:	9117      	str	r1, [sp, #92]	; 0x5c
 8008eb4:	7852      	ldrb	r2, [r2, #1]
 8008eb6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008eba:	2e09      	cmp	r6, #9
 8008ebc:	d937      	bls.n	8008f2e <_strtod_l+0x346>
 8008ebe:	9e06      	ldr	r6, [sp, #24]
 8008ec0:	1b89      	subs	r1, r1, r6
 8008ec2:	2908      	cmp	r1, #8
 8008ec4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008ec8:	dc02      	bgt.n	8008ed0 <_strtod_l+0x2e8>
 8008eca:	4576      	cmp	r6, lr
 8008ecc:	bfa8      	it	ge
 8008ece:	4676      	movge	r6, lr
 8008ed0:	f1bc 0f00 	cmp.w	ip, #0
 8008ed4:	d000      	beq.n	8008ed8 <_strtod_l+0x2f0>
 8008ed6:	4276      	negs	r6, r6
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	d14d      	bne.n	8008f78 <_strtod_l+0x390>
 8008edc:	9904      	ldr	r1, [sp, #16]
 8008ede:	4301      	orrs	r1, r0
 8008ee0:	f47f aec6 	bne.w	8008c70 <_strtod_l+0x88>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f47f aee1 	bne.w	8008cac <_strtod_l+0xc4>
 8008eea:	2a69      	cmp	r2, #105	; 0x69
 8008eec:	d027      	beq.n	8008f3e <_strtod_l+0x356>
 8008eee:	dc24      	bgt.n	8008f3a <_strtod_l+0x352>
 8008ef0:	2a49      	cmp	r2, #73	; 0x49
 8008ef2:	d024      	beq.n	8008f3e <_strtod_l+0x356>
 8008ef4:	2a4e      	cmp	r2, #78	; 0x4e
 8008ef6:	f47f aed9 	bne.w	8008cac <_strtod_l+0xc4>
 8008efa:	499f      	ldr	r1, [pc, #636]	; (8009178 <_strtod_l+0x590>)
 8008efc:	a817      	add	r0, sp, #92	; 0x5c
 8008efe:	f001 f87f 	bl	800a000 <__match>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	f43f aed2 	beq.w	8008cac <_strtod_l+0xc4>
 8008f08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b28      	cmp	r3, #40	; 0x28
 8008f0e:	d12d      	bne.n	8008f6c <_strtod_l+0x384>
 8008f10:	499a      	ldr	r1, [pc, #616]	; (800917c <_strtod_l+0x594>)
 8008f12:	aa1a      	add	r2, sp, #104	; 0x68
 8008f14:	a817      	add	r0, sp, #92	; 0x5c
 8008f16:	f001 f887 	bl	800a028 <__hexnan>
 8008f1a:	2805      	cmp	r0, #5
 8008f1c:	d126      	bne.n	8008f6c <_strtod_l+0x384>
 8008f1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008f24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008f28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008f2c:	e6a0      	b.n	8008c70 <_strtod_l+0x88>
 8008f2e:	210a      	movs	r1, #10
 8008f30:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008f34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008f38:	e7b9      	b.n	8008eae <_strtod_l+0x2c6>
 8008f3a:	2a6e      	cmp	r2, #110	; 0x6e
 8008f3c:	e7db      	b.n	8008ef6 <_strtod_l+0x30e>
 8008f3e:	4990      	ldr	r1, [pc, #576]	; (8009180 <_strtod_l+0x598>)
 8008f40:	a817      	add	r0, sp, #92	; 0x5c
 8008f42:	f001 f85d 	bl	800a000 <__match>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	f43f aeb0 	beq.w	8008cac <_strtod_l+0xc4>
 8008f4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f4e:	498d      	ldr	r1, [pc, #564]	; (8009184 <_strtod_l+0x59c>)
 8008f50:	3b01      	subs	r3, #1
 8008f52:	a817      	add	r0, sp, #92	; 0x5c
 8008f54:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f56:	f001 f853 	bl	800a000 <__match>
 8008f5a:	b910      	cbnz	r0, 8008f62 <_strtod_l+0x37a>
 8008f5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f5e:	3301      	adds	r3, #1
 8008f60:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f62:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009194 <_strtod_l+0x5ac>
 8008f66:	f04f 0a00 	mov.w	sl, #0
 8008f6a:	e681      	b.n	8008c70 <_strtod_l+0x88>
 8008f6c:	4886      	ldr	r0, [pc, #536]	; (8009188 <_strtod_l+0x5a0>)
 8008f6e:	f002 f827 	bl	800afc0 <nan>
 8008f72:	ec5b ab10 	vmov	sl, fp, d0
 8008f76:	e67b      	b.n	8008c70 <_strtod_l+0x88>
 8008f78:	9b05      	ldr	r3, [sp, #20]
 8008f7a:	9807      	ldr	r0, [sp, #28]
 8008f7c:	1af3      	subs	r3, r6, r3
 8008f7e:	2f00      	cmp	r7, #0
 8008f80:	bf08      	it	eq
 8008f82:	462f      	moveq	r7, r5
 8008f84:	2d10      	cmp	r5, #16
 8008f86:	9306      	str	r3, [sp, #24]
 8008f88:	46a8      	mov	r8, r5
 8008f8a:	bfa8      	it	ge
 8008f8c:	f04f 0810 	movge.w	r8, #16
 8008f90:	f7f7 fad8 	bl	8000544 <__aeabi_ui2d>
 8008f94:	2d09      	cmp	r5, #9
 8008f96:	4682      	mov	sl, r0
 8008f98:	468b      	mov	fp, r1
 8008f9a:	dd13      	ble.n	8008fc4 <_strtod_l+0x3dc>
 8008f9c:	4b7b      	ldr	r3, [pc, #492]	; (800918c <_strtod_l+0x5a4>)
 8008f9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008fa2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008fa6:	f7f7 fb47 	bl	8000638 <__aeabi_dmul>
 8008faa:	4682      	mov	sl, r0
 8008fac:	4648      	mov	r0, r9
 8008fae:	468b      	mov	fp, r1
 8008fb0:	f7f7 fac8 	bl	8000544 <__aeabi_ui2d>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4650      	mov	r0, sl
 8008fba:	4659      	mov	r1, fp
 8008fbc:	f7f7 f986 	bl	80002cc <__adddf3>
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	468b      	mov	fp, r1
 8008fc4:	2d0f      	cmp	r5, #15
 8008fc6:	dc38      	bgt.n	800903a <_strtod_l+0x452>
 8008fc8:	9b06      	ldr	r3, [sp, #24]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f43f ae50 	beq.w	8008c70 <_strtod_l+0x88>
 8008fd0:	dd24      	ble.n	800901c <_strtod_l+0x434>
 8008fd2:	2b16      	cmp	r3, #22
 8008fd4:	dc0b      	bgt.n	8008fee <_strtod_l+0x406>
 8008fd6:	496d      	ldr	r1, [pc, #436]	; (800918c <_strtod_l+0x5a4>)
 8008fd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe0:	4652      	mov	r2, sl
 8008fe2:	465b      	mov	r3, fp
 8008fe4:	f7f7 fb28 	bl	8000638 <__aeabi_dmul>
 8008fe8:	4682      	mov	sl, r0
 8008fea:	468b      	mov	fp, r1
 8008fec:	e640      	b.n	8008c70 <_strtod_l+0x88>
 8008fee:	9a06      	ldr	r2, [sp, #24]
 8008ff0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	db20      	blt.n	800903a <_strtod_l+0x452>
 8008ff8:	4c64      	ldr	r4, [pc, #400]	; (800918c <_strtod_l+0x5a4>)
 8008ffa:	f1c5 050f 	rsb	r5, r5, #15
 8008ffe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009002:	4652      	mov	r2, sl
 8009004:	465b      	mov	r3, fp
 8009006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800900a:	f7f7 fb15 	bl	8000638 <__aeabi_dmul>
 800900e:	9b06      	ldr	r3, [sp, #24]
 8009010:	1b5d      	subs	r5, r3, r5
 8009012:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009016:	e9d4 2300 	ldrd	r2, r3, [r4]
 800901a:	e7e3      	b.n	8008fe4 <_strtod_l+0x3fc>
 800901c:	9b06      	ldr	r3, [sp, #24]
 800901e:	3316      	adds	r3, #22
 8009020:	db0b      	blt.n	800903a <_strtod_l+0x452>
 8009022:	9b05      	ldr	r3, [sp, #20]
 8009024:	1b9e      	subs	r6, r3, r6
 8009026:	4b59      	ldr	r3, [pc, #356]	; (800918c <_strtod_l+0x5a4>)
 8009028:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800902c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009030:	4650      	mov	r0, sl
 8009032:	4659      	mov	r1, fp
 8009034:	f7f7 fc2a 	bl	800088c <__aeabi_ddiv>
 8009038:	e7d6      	b.n	8008fe8 <_strtod_l+0x400>
 800903a:	9b06      	ldr	r3, [sp, #24]
 800903c:	eba5 0808 	sub.w	r8, r5, r8
 8009040:	4498      	add	r8, r3
 8009042:	f1b8 0f00 	cmp.w	r8, #0
 8009046:	dd74      	ble.n	8009132 <_strtod_l+0x54a>
 8009048:	f018 030f 	ands.w	r3, r8, #15
 800904c:	d00a      	beq.n	8009064 <_strtod_l+0x47c>
 800904e:	494f      	ldr	r1, [pc, #316]	; (800918c <_strtod_l+0x5a4>)
 8009050:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009054:	4652      	mov	r2, sl
 8009056:	465b      	mov	r3, fp
 8009058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800905c:	f7f7 faec 	bl	8000638 <__aeabi_dmul>
 8009060:	4682      	mov	sl, r0
 8009062:	468b      	mov	fp, r1
 8009064:	f038 080f 	bics.w	r8, r8, #15
 8009068:	d04f      	beq.n	800910a <_strtod_l+0x522>
 800906a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800906e:	dd22      	ble.n	80090b6 <_strtod_l+0x4ce>
 8009070:	2500      	movs	r5, #0
 8009072:	462e      	mov	r6, r5
 8009074:	9507      	str	r5, [sp, #28]
 8009076:	9505      	str	r5, [sp, #20]
 8009078:	2322      	movs	r3, #34	; 0x22
 800907a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009194 <_strtod_l+0x5ac>
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	f04f 0a00 	mov.w	sl, #0
 8009084:	9b07      	ldr	r3, [sp, #28]
 8009086:	2b00      	cmp	r3, #0
 8009088:	f43f adf2 	beq.w	8008c70 <_strtod_l+0x88>
 800908c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800908e:	4620      	mov	r0, r4
 8009090:	f001 f8b8 	bl	800a204 <_Bfree>
 8009094:	9905      	ldr	r1, [sp, #20]
 8009096:	4620      	mov	r0, r4
 8009098:	f001 f8b4 	bl	800a204 <_Bfree>
 800909c:	4631      	mov	r1, r6
 800909e:	4620      	mov	r0, r4
 80090a0:	f001 f8b0 	bl	800a204 <_Bfree>
 80090a4:	9907      	ldr	r1, [sp, #28]
 80090a6:	4620      	mov	r0, r4
 80090a8:	f001 f8ac 	bl	800a204 <_Bfree>
 80090ac:	4629      	mov	r1, r5
 80090ae:	4620      	mov	r0, r4
 80090b0:	f001 f8a8 	bl	800a204 <_Bfree>
 80090b4:	e5dc      	b.n	8008c70 <_strtod_l+0x88>
 80090b6:	4b36      	ldr	r3, [pc, #216]	; (8009190 <_strtod_l+0x5a8>)
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	2300      	movs	r3, #0
 80090bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80090c0:	4650      	mov	r0, sl
 80090c2:	4659      	mov	r1, fp
 80090c4:	4699      	mov	r9, r3
 80090c6:	f1b8 0f01 	cmp.w	r8, #1
 80090ca:	dc21      	bgt.n	8009110 <_strtod_l+0x528>
 80090cc:	b10b      	cbz	r3, 80090d2 <_strtod_l+0x4ea>
 80090ce:	4682      	mov	sl, r0
 80090d0:	468b      	mov	fp, r1
 80090d2:	4b2f      	ldr	r3, [pc, #188]	; (8009190 <_strtod_l+0x5a8>)
 80090d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80090d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80090dc:	4652      	mov	r2, sl
 80090de:	465b      	mov	r3, fp
 80090e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80090e4:	f7f7 faa8 	bl	8000638 <__aeabi_dmul>
 80090e8:	4b2a      	ldr	r3, [pc, #168]	; (8009194 <_strtod_l+0x5ac>)
 80090ea:	460a      	mov	r2, r1
 80090ec:	400b      	ands	r3, r1
 80090ee:	492a      	ldr	r1, [pc, #168]	; (8009198 <_strtod_l+0x5b0>)
 80090f0:	428b      	cmp	r3, r1
 80090f2:	4682      	mov	sl, r0
 80090f4:	d8bc      	bhi.n	8009070 <_strtod_l+0x488>
 80090f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80090fa:	428b      	cmp	r3, r1
 80090fc:	bf86      	itte	hi
 80090fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800919c <_strtod_l+0x5b4>
 8009102:	f04f 3aff 	movhi.w	sl, #4294967295
 8009106:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800910a:	2300      	movs	r3, #0
 800910c:	9304      	str	r3, [sp, #16]
 800910e:	e084      	b.n	800921a <_strtod_l+0x632>
 8009110:	f018 0f01 	tst.w	r8, #1
 8009114:	d005      	beq.n	8009122 <_strtod_l+0x53a>
 8009116:	9b04      	ldr	r3, [sp, #16]
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	f7f7 fa8c 	bl	8000638 <__aeabi_dmul>
 8009120:	2301      	movs	r3, #1
 8009122:	9a04      	ldr	r2, [sp, #16]
 8009124:	3208      	adds	r2, #8
 8009126:	f109 0901 	add.w	r9, r9, #1
 800912a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800912e:	9204      	str	r2, [sp, #16]
 8009130:	e7c9      	b.n	80090c6 <_strtod_l+0x4de>
 8009132:	d0ea      	beq.n	800910a <_strtod_l+0x522>
 8009134:	f1c8 0800 	rsb	r8, r8, #0
 8009138:	f018 020f 	ands.w	r2, r8, #15
 800913c:	d00a      	beq.n	8009154 <_strtod_l+0x56c>
 800913e:	4b13      	ldr	r3, [pc, #76]	; (800918c <_strtod_l+0x5a4>)
 8009140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009144:	4650      	mov	r0, sl
 8009146:	4659      	mov	r1, fp
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f7f7 fb9e 	bl	800088c <__aeabi_ddiv>
 8009150:	4682      	mov	sl, r0
 8009152:	468b      	mov	fp, r1
 8009154:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009158:	d0d7      	beq.n	800910a <_strtod_l+0x522>
 800915a:	f1b8 0f1f 	cmp.w	r8, #31
 800915e:	dd1f      	ble.n	80091a0 <_strtod_l+0x5b8>
 8009160:	2500      	movs	r5, #0
 8009162:	462e      	mov	r6, r5
 8009164:	9507      	str	r5, [sp, #28]
 8009166:	9505      	str	r5, [sp, #20]
 8009168:	2322      	movs	r3, #34	; 0x22
 800916a:	f04f 0a00 	mov.w	sl, #0
 800916e:	f04f 0b00 	mov.w	fp, #0
 8009172:	6023      	str	r3, [r4, #0]
 8009174:	e786      	b.n	8009084 <_strtod_l+0x49c>
 8009176:	bf00      	nop
 8009178:	0800d183 	.word	0x0800d183
 800917c:	0800d19c 	.word	0x0800d19c
 8009180:	0800d180 	.word	0x0800d180
 8009184:	0800d536 	.word	0x0800d536
 8009188:	0800d431 	.word	0x0800d431
 800918c:	0800d300 	.word	0x0800d300
 8009190:	0800d2d8 	.word	0x0800d2d8
 8009194:	7ff00000 	.word	0x7ff00000
 8009198:	7ca00000 	.word	0x7ca00000
 800919c:	7fefffff 	.word	0x7fefffff
 80091a0:	f018 0310 	ands.w	r3, r8, #16
 80091a4:	bf18      	it	ne
 80091a6:	236a      	movne	r3, #106	; 0x6a
 80091a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009558 <_strtod_l+0x970>
 80091ac:	9304      	str	r3, [sp, #16]
 80091ae:	4650      	mov	r0, sl
 80091b0:	4659      	mov	r1, fp
 80091b2:	2300      	movs	r3, #0
 80091b4:	f018 0f01 	tst.w	r8, #1
 80091b8:	d004      	beq.n	80091c4 <_strtod_l+0x5dc>
 80091ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80091be:	f7f7 fa3b 	bl	8000638 <__aeabi_dmul>
 80091c2:	2301      	movs	r3, #1
 80091c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80091c8:	f109 0908 	add.w	r9, r9, #8
 80091cc:	d1f2      	bne.n	80091b4 <_strtod_l+0x5cc>
 80091ce:	b10b      	cbz	r3, 80091d4 <_strtod_l+0x5ec>
 80091d0:	4682      	mov	sl, r0
 80091d2:	468b      	mov	fp, r1
 80091d4:	9b04      	ldr	r3, [sp, #16]
 80091d6:	b1c3      	cbz	r3, 800920a <_strtod_l+0x622>
 80091d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80091dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	4659      	mov	r1, fp
 80091e4:	dd11      	ble.n	800920a <_strtod_l+0x622>
 80091e6:	2b1f      	cmp	r3, #31
 80091e8:	f340 8124 	ble.w	8009434 <_strtod_l+0x84c>
 80091ec:	2b34      	cmp	r3, #52	; 0x34
 80091ee:	bfde      	ittt	le
 80091f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80091f4:	f04f 33ff 	movle.w	r3, #4294967295
 80091f8:	fa03 f202 	lslle.w	r2, r3, r2
 80091fc:	f04f 0a00 	mov.w	sl, #0
 8009200:	bfcc      	ite	gt
 8009202:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009206:	ea02 0b01 	andle.w	fp, r2, r1
 800920a:	2200      	movs	r2, #0
 800920c:	2300      	movs	r3, #0
 800920e:	4650      	mov	r0, sl
 8009210:	4659      	mov	r1, fp
 8009212:	f7f7 fc79 	bl	8000b08 <__aeabi_dcmpeq>
 8009216:	2800      	cmp	r0, #0
 8009218:	d1a2      	bne.n	8009160 <_strtod_l+0x578>
 800921a:	9b07      	ldr	r3, [sp, #28]
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	9908      	ldr	r1, [sp, #32]
 8009220:	462b      	mov	r3, r5
 8009222:	463a      	mov	r2, r7
 8009224:	4620      	mov	r0, r4
 8009226:	f001 f855 	bl	800a2d4 <__s2b>
 800922a:	9007      	str	r0, [sp, #28]
 800922c:	2800      	cmp	r0, #0
 800922e:	f43f af1f 	beq.w	8009070 <_strtod_l+0x488>
 8009232:	9b05      	ldr	r3, [sp, #20]
 8009234:	1b9e      	subs	r6, r3, r6
 8009236:	9b06      	ldr	r3, [sp, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	bfb4      	ite	lt
 800923c:	4633      	movlt	r3, r6
 800923e:	2300      	movge	r3, #0
 8009240:	930c      	str	r3, [sp, #48]	; 0x30
 8009242:	9b06      	ldr	r3, [sp, #24]
 8009244:	2500      	movs	r5, #0
 8009246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800924a:	9312      	str	r3, [sp, #72]	; 0x48
 800924c:	462e      	mov	r6, r5
 800924e:	9b07      	ldr	r3, [sp, #28]
 8009250:	4620      	mov	r0, r4
 8009252:	6859      	ldr	r1, [r3, #4]
 8009254:	f000 ff96 	bl	800a184 <_Balloc>
 8009258:	9005      	str	r0, [sp, #20]
 800925a:	2800      	cmp	r0, #0
 800925c:	f43f af0c 	beq.w	8009078 <_strtod_l+0x490>
 8009260:	9b07      	ldr	r3, [sp, #28]
 8009262:	691a      	ldr	r2, [r3, #16]
 8009264:	3202      	adds	r2, #2
 8009266:	f103 010c 	add.w	r1, r3, #12
 800926a:	0092      	lsls	r2, r2, #2
 800926c:	300c      	adds	r0, #12
 800926e:	f7ff fc77 	bl	8008b60 <memcpy>
 8009272:	ec4b ab10 	vmov	d0, sl, fp
 8009276:	aa1a      	add	r2, sp, #104	; 0x68
 8009278:	a919      	add	r1, sp, #100	; 0x64
 800927a:	4620      	mov	r0, r4
 800927c:	f001 fb70 	bl	800a960 <__d2b>
 8009280:	ec4b ab18 	vmov	d8, sl, fp
 8009284:	9018      	str	r0, [sp, #96]	; 0x60
 8009286:	2800      	cmp	r0, #0
 8009288:	f43f aef6 	beq.w	8009078 <_strtod_l+0x490>
 800928c:	2101      	movs	r1, #1
 800928e:	4620      	mov	r0, r4
 8009290:	f001 f8ba 	bl	800a408 <__i2b>
 8009294:	4606      	mov	r6, r0
 8009296:	2800      	cmp	r0, #0
 8009298:	f43f aeee 	beq.w	8009078 <_strtod_l+0x490>
 800929c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800929e:	9904      	ldr	r1, [sp, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	bfab      	itete	ge
 80092a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80092a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80092a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80092aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80092ae:	bfac      	ite	ge
 80092b0:	eb03 0902 	addge.w	r9, r3, r2
 80092b4:	1ad7      	sublt	r7, r2, r3
 80092b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80092b8:	eba3 0801 	sub.w	r8, r3, r1
 80092bc:	4490      	add	r8, r2
 80092be:	4ba1      	ldr	r3, [pc, #644]	; (8009544 <_strtod_l+0x95c>)
 80092c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80092c4:	4598      	cmp	r8, r3
 80092c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092ca:	f280 80c7 	bge.w	800945c <_strtod_l+0x874>
 80092ce:	eba3 0308 	sub.w	r3, r3, r8
 80092d2:	2b1f      	cmp	r3, #31
 80092d4:	eba2 0203 	sub.w	r2, r2, r3
 80092d8:	f04f 0101 	mov.w	r1, #1
 80092dc:	f300 80b1 	bgt.w	8009442 <_strtod_l+0x85a>
 80092e0:	fa01 f303 	lsl.w	r3, r1, r3
 80092e4:	930d      	str	r3, [sp, #52]	; 0x34
 80092e6:	2300      	movs	r3, #0
 80092e8:	9308      	str	r3, [sp, #32]
 80092ea:	eb09 0802 	add.w	r8, r9, r2
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	45c1      	cmp	r9, r8
 80092f2:	4417      	add	r7, r2
 80092f4:	441f      	add	r7, r3
 80092f6:	464b      	mov	r3, r9
 80092f8:	bfa8      	it	ge
 80092fa:	4643      	movge	r3, r8
 80092fc:	42bb      	cmp	r3, r7
 80092fe:	bfa8      	it	ge
 8009300:	463b      	movge	r3, r7
 8009302:	2b00      	cmp	r3, #0
 8009304:	bfc2      	ittt	gt
 8009306:	eba8 0803 	subgt.w	r8, r8, r3
 800930a:	1aff      	subgt	r7, r7, r3
 800930c:	eba9 0903 	subgt.w	r9, r9, r3
 8009310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009312:	2b00      	cmp	r3, #0
 8009314:	dd17      	ble.n	8009346 <_strtod_l+0x75e>
 8009316:	4631      	mov	r1, r6
 8009318:	461a      	mov	r2, r3
 800931a:	4620      	mov	r0, r4
 800931c:	f001 f934 	bl	800a588 <__pow5mult>
 8009320:	4606      	mov	r6, r0
 8009322:	2800      	cmp	r0, #0
 8009324:	f43f aea8 	beq.w	8009078 <_strtod_l+0x490>
 8009328:	4601      	mov	r1, r0
 800932a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800932c:	4620      	mov	r0, r4
 800932e:	f001 f881 	bl	800a434 <__multiply>
 8009332:	900b      	str	r0, [sp, #44]	; 0x2c
 8009334:	2800      	cmp	r0, #0
 8009336:	f43f ae9f 	beq.w	8009078 <_strtod_l+0x490>
 800933a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800933c:	4620      	mov	r0, r4
 800933e:	f000 ff61 	bl	800a204 <_Bfree>
 8009342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009344:	9318      	str	r3, [sp, #96]	; 0x60
 8009346:	f1b8 0f00 	cmp.w	r8, #0
 800934a:	f300 808c 	bgt.w	8009466 <_strtod_l+0x87e>
 800934e:	9b06      	ldr	r3, [sp, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	dd08      	ble.n	8009366 <_strtod_l+0x77e>
 8009354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009356:	9905      	ldr	r1, [sp, #20]
 8009358:	4620      	mov	r0, r4
 800935a:	f001 f915 	bl	800a588 <__pow5mult>
 800935e:	9005      	str	r0, [sp, #20]
 8009360:	2800      	cmp	r0, #0
 8009362:	f43f ae89 	beq.w	8009078 <_strtod_l+0x490>
 8009366:	2f00      	cmp	r7, #0
 8009368:	dd08      	ble.n	800937c <_strtod_l+0x794>
 800936a:	9905      	ldr	r1, [sp, #20]
 800936c:	463a      	mov	r2, r7
 800936e:	4620      	mov	r0, r4
 8009370:	f001 f964 	bl	800a63c <__lshift>
 8009374:	9005      	str	r0, [sp, #20]
 8009376:	2800      	cmp	r0, #0
 8009378:	f43f ae7e 	beq.w	8009078 <_strtod_l+0x490>
 800937c:	f1b9 0f00 	cmp.w	r9, #0
 8009380:	dd08      	ble.n	8009394 <_strtod_l+0x7ac>
 8009382:	4631      	mov	r1, r6
 8009384:	464a      	mov	r2, r9
 8009386:	4620      	mov	r0, r4
 8009388:	f001 f958 	bl	800a63c <__lshift>
 800938c:	4606      	mov	r6, r0
 800938e:	2800      	cmp	r0, #0
 8009390:	f43f ae72 	beq.w	8009078 <_strtod_l+0x490>
 8009394:	9a05      	ldr	r2, [sp, #20]
 8009396:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009398:	4620      	mov	r0, r4
 800939a:	f001 f9db 	bl	800a754 <__mdiff>
 800939e:	4605      	mov	r5, r0
 80093a0:	2800      	cmp	r0, #0
 80093a2:	f43f ae69 	beq.w	8009078 <_strtod_l+0x490>
 80093a6:	68c3      	ldr	r3, [r0, #12]
 80093a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80093aa:	2300      	movs	r3, #0
 80093ac:	60c3      	str	r3, [r0, #12]
 80093ae:	4631      	mov	r1, r6
 80093b0:	f001 f9b4 	bl	800a71c <__mcmp>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	da60      	bge.n	800947a <_strtod_l+0x892>
 80093b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ba:	ea53 030a 	orrs.w	r3, r3, sl
 80093be:	f040 8082 	bne.w	80094c6 <_strtod_l+0x8de>
 80093c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d17d      	bne.n	80094c6 <_strtod_l+0x8de>
 80093ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093ce:	0d1b      	lsrs	r3, r3, #20
 80093d0:	051b      	lsls	r3, r3, #20
 80093d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80093d6:	d976      	bls.n	80094c6 <_strtod_l+0x8de>
 80093d8:	696b      	ldr	r3, [r5, #20]
 80093da:	b913      	cbnz	r3, 80093e2 <_strtod_l+0x7fa>
 80093dc:	692b      	ldr	r3, [r5, #16]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	dd71      	ble.n	80094c6 <_strtod_l+0x8de>
 80093e2:	4629      	mov	r1, r5
 80093e4:	2201      	movs	r2, #1
 80093e6:	4620      	mov	r0, r4
 80093e8:	f001 f928 	bl	800a63c <__lshift>
 80093ec:	4631      	mov	r1, r6
 80093ee:	4605      	mov	r5, r0
 80093f0:	f001 f994 	bl	800a71c <__mcmp>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	dd66      	ble.n	80094c6 <_strtod_l+0x8de>
 80093f8:	9904      	ldr	r1, [sp, #16]
 80093fa:	4a53      	ldr	r2, [pc, #332]	; (8009548 <_strtod_l+0x960>)
 80093fc:	465b      	mov	r3, fp
 80093fe:	2900      	cmp	r1, #0
 8009400:	f000 8081 	beq.w	8009506 <_strtod_l+0x91e>
 8009404:	ea02 010b 	and.w	r1, r2, fp
 8009408:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800940c:	dc7b      	bgt.n	8009506 <_strtod_l+0x91e>
 800940e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009412:	f77f aea9 	ble.w	8009168 <_strtod_l+0x580>
 8009416:	4b4d      	ldr	r3, [pc, #308]	; (800954c <_strtod_l+0x964>)
 8009418:	4650      	mov	r0, sl
 800941a:	4659      	mov	r1, fp
 800941c:	2200      	movs	r2, #0
 800941e:	f7f7 f90b 	bl	8000638 <__aeabi_dmul>
 8009422:	460b      	mov	r3, r1
 8009424:	4303      	orrs	r3, r0
 8009426:	bf08      	it	eq
 8009428:	2322      	moveq	r3, #34	; 0x22
 800942a:	4682      	mov	sl, r0
 800942c:	468b      	mov	fp, r1
 800942e:	bf08      	it	eq
 8009430:	6023      	streq	r3, [r4, #0]
 8009432:	e62b      	b.n	800908c <_strtod_l+0x4a4>
 8009434:	f04f 32ff 	mov.w	r2, #4294967295
 8009438:	fa02 f303 	lsl.w	r3, r2, r3
 800943c:	ea03 0a0a 	and.w	sl, r3, sl
 8009440:	e6e3      	b.n	800920a <_strtod_l+0x622>
 8009442:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009446:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800944a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800944e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009452:	fa01 f308 	lsl.w	r3, r1, r8
 8009456:	9308      	str	r3, [sp, #32]
 8009458:	910d      	str	r1, [sp, #52]	; 0x34
 800945a:	e746      	b.n	80092ea <_strtod_l+0x702>
 800945c:	2300      	movs	r3, #0
 800945e:	9308      	str	r3, [sp, #32]
 8009460:	2301      	movs	r3, #1
 8009462:	930d      	str	r3, [sp, #52]	; 0x34
 8009464:	e741      	b.n	80092ea <_strtod_l+0x702>
 8009466:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009468:	4642      	mov	r2, r8
 800946a:	4620      	mov	r0, r4
 800946c:	f001 f8e6 	bl	800a63c <__lshift>
 8009470:	9018      	str	r0, [sp, #96]	; 0x60
 8009472:	2800      	cmp	r0, #0
 8009474:	f47f af6b 	bne.w	800934e <_strtod_l+0x766>
 8009478:	e5fe      	b.n	8009078 <_strtod_l+0x490>
 800947a:	465f      	mov	r7, fp
 800947c:	d16e      	bne.n	800955c <_strtod_l+0x974>
 800947e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009480:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009484:	b342      	cbz	r2, 80094d8 <_strtod_l+0x8f0>
 8009486:	4a32      	ldr	r2, [pc, #200]	; (8009550 <_strtod_l+0x968>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d128      	bne.n	80094de <_strtod_l+0x8f6>
 800948c:	9b04      	ldr	r3, [sp, #16]
 800948e:	4651      	mov	r1, sl
 8009490:	b1eb      	cbz	r3, 80094ce <_strtod_l+0x8e6>
 8009492:	4b2d      	ldr	r3, [pc, #180]	; (8009548 <_strtod_l+0x960>)
 8009494:	403b      	ands	r3, r7
 8009496:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800949a:	f04f 32ff 	mov.w	r2, #4294967295
 800949e:	d819      	bhi.n	80094d4 <_strtod_l+0x8ec>
 80094a0:	0d1b      	lsrs	r3, r3, #20
 80094a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094a6:	fa02 f303 	lsl.w	r3, r2, r3
 80094aa:	4299      	cmp	r1, r3
 80094ac:	d117      	bne.n	80094de <_strtod_l+0x8f6>
 80094ae:	4b29      	ldr	r3, [pc, #164]	; (8009554 <_strtod_l+0x96c>)
 80094b0:	429f      	cmp	r7, r3
 80094b2:	d102      	bne.n	80094ba <_strtod_l+0x8d2>
 80094b4:	3101      	adds	r1, #1
 80094b6:	f43f addf 	beq.w	8009078 <_strtod_l+0x490>
 80094ba:	4b23      	ldr	r3, [pc, #140]	; (8009548 <_strtod_l+0x960>)
 80094bc:	403b      	ands	r3, r7
 80094be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80094c2:	f04f 0a00 	mov.w	sl, #0
 80094c6:	9b04      	ldr	r3, [sp, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1a4      	bne.n	8009416 <_strtod_l+0x82e>
 80094cc:	e5de      	b.n	800908c <_strtod_l+0x4a4>
 80094ce:	f04f 33ff 	mov.w	r3, #4294967295
 80094d2:	e7ea      	b.n	80094aa <_strtod_l+0x8c2>
 80094d4:	4613      	mov	r3, r2
 80094d6:	e7e8      	b.n	80094aa <_strtod_l+0x8c2>
 80094d8:	ea53 030a 	orrs.w	r3, r3, sl
 80094dc:	d08c      	beq.n	80093f8 <_strtod_l+0x810>
 80094de:	9b08      	ldr	r3, [sp, #32]
 80094e0:	b1db      	cbz	r3, 800951a <_strtod_l+0x932>
 80094e2:	423b      	tst	r3, r7
 80094e4:	d0ef      	beq.n	80094c6 <_strtod_l+0x8de>
 80094e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094e8:	9a04      	ldr	r2, [sp, #16]
 80094ea:	4650      	mov	r0, sl
 80094ec:	4659      	mov	r1, fp
 80094ee:	b1c3      	cbz	r3, 8009522 <_strtod_l+0x93a>
 80094f0:	f7ff fb5b 	bl	8008baa <sulp>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	ec51 0b18 	vmov	r0, r1, d8
 80094fc:	f7f6 fee6 	bl	80002cc <__adddf3>
 8009500:	4682      	mov	sl, r0
 8009502:	468b      	mov	fp, r1
 8009504:	e7df      	b.n	80094c6 <_strtod_l+0x8de>
 8009506:	4013      	ands	r3, r2
 8009508:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800950c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009510:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009514:	f04f 3aff 	mov.w	sl, #4294967295
 8009518:	e7d5      	b.n	80094c6 <_strtod_l+0x8de>
 800951a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800951c:	ea13 0f0a 	tst.w	r3, sl
 8009520:	e7e0      	b.n	80094e4 <_strtod_l+0x8fc>
 8009522:	f7ff fb42 	bl	8008baa <sulp>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	ec51 0b18 	vmov	r0, r1, d8
 800952e:	f7f6 fecb 	bl	80002c8 <__aeabi_dsub>
 8009532:	2200      	movs	r2, #0
 8009534:	2300      	movs	r3, #0
 8009536:	4682      	mov	sl, r0
 8009538:	468b      	mov	fp, r1
 800953a:	f7f7 fae5 	bl	8000b08 <__aeabi_dcmpeq>
 800953e:	2800      	cmp	r0, #0
 8009540:	d0c1      	beq.n	80094c6 <_strtod_l+0x8de>
 8009542:	e611      	b.n	8009168 <_strtod_l+0x580>
 8009544:	fffffc02 	.word	0xfffffc02
 8009548:	7ff00000 	.word	0x7ff00000
 800954c:	39500000 	.word	0x39500000
 8009550:	000fffff 	.word	0x000fffff
 8009554:	7fefffff 	.word	0x7fefffff
 8009558:	0800d1b0 	.word	0x0800d1b0
 800955c:	4631      	mov	r1, r6
 800955e:	4628      	mov	r0, r5
 8009560:	f001 fa5a 	bl	800aa18 <__ratio>
 8009564:	ec59 8b10 	vmov	r8, r9, d0
 8009568:	ee10 0a10 	vmov	r0, s0
 800956c:	2200      	movs	r2, #0
 800956e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009572:	4649      	mov	r1, r9
 8009574:	f7f7 fadc 	bl	8000b30 <__aeabi_dcmple>
 8009578:	2800      	cmp	r0, #0
 800957a:	d07a      	beq.n	8009672 <_strtod_l+0xa8a>
 800957c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d04a      	beq.n	8009618 <_strtod_l+0xa30>
 8009582:	4b95      	ldr	r3, [pc, #596]	; (80097d8 <_strtod_l+0xbf0>)
 8009584:	2200      	movs	r2, #0
 8009586:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800958a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80097d8 <_strtod_l+0xbf0>
 800958e:	f04f 0800 	mov.w	r8, #0
 8009592:	4b92      	ldr	r3, [pc, #584]	; (80097dc <_strtod_l+0xbf4>)
 8009594:	403b      	ands	r3, r7
 8009596:	930d      	str	r3, [sp, #52]	; 0x34
 8009598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800959a:	4b91      	ldr	r3, [pc, #580]	; (80097e0 <_strtod_l+0xbf8>)
 800959c:	429a      	cmp	r2, r3
 800959e:	f040 80b0 	bne.w	8009702 <_strtod_l+0xb1a>
 80095a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80095aa:	ec4b ab10 	vmov	d0, sl, fp
 80095ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095b2:	f001 f959 	bl	800a868 <__ulp>
 80095b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095ba:	ec53 2b10 	vmov	r2, r3, d0
 80095be:	f7f7 f83b 	bl	8000638 <__aeabi_dmul>
 80095c2:	4652      	mov	r2, sl
 80095c4:	465b      	mov	r3, fp
 80095c6:	f7f6 fe81 	bl	80002cc <__adddf3>
 80095ca:	460b      	mov	r3, r1
 80095cc:	4983      	ldr	r1, [pc, #524]	; (80097dc <_strtod_l+0xbf4>)
 80095ce:	4a85      	ldr	r2, [pc, #532]	; (80097e4 <_strtod_l+0xbfc>)
 80095d0:	4019      	ands	r1, r3
 80095d2:	4291      	cmp	r1, r2
 80095d4:	4682      	mov	sl, r0
 80095d6:	d960      	bls.n	800969a <_strtod_l+0xab2>
 80095d8:	ee18 3a90 	vmov	r3, s17
 80095dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d104      	bne.n	80095ee <_strtod_l+0xa06>
 80095e4:	ee18 3a10 	vmov	r3, s16
 80095e8:	3301      	adds	r3, #1
 80095ea:	f43f ad45 	beq.w	8009078 <_strtod_l+0x490>
 80095ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80097f0 <_strtod_l+0xc08>
 80095f2:	f04f 3aff 	mov.w	sl, #4294967295
 80095f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 fe03 	bl	800a204 <_Bfree>
 80095fe:	9905      	ldr	r1, [sp, #20]
 8009600:	4620      	mov	r0, r4
 8009602:	f000 fdff 	bl	800a204 <_Bfree>
 8009606:	4631      	mov	r1, r6
 8009608:	4620      	mov	r0, r4
 800960a:	f000 fdfb 	bl	800a204 <_Bfree>
 800960e:	4629      	mov	r1, r5
 8009610:	4620      	mov	r0, r4
 8009612:	f000 fdf7 	bl	800a204 <_Bfree>
 8009616:	e61a      	b.n	800924e <_strtod_l+0x666>
 8009618:	f1ba 0f00 	cmp.w	sl, #0
 800961c:	d11b      	bne.n	8009656 <_strtod_l+0xa6e>
 800961e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009622:	b9f3      	cbnz	r3, 8009662 <_strtod_l+0xa7a>
 8009624:	4b6c      	ldr	r3, [pc, #432]	; (80097d8 <_strtod_l+0xbf0>)
 8009626:	2200      	movs	r2, #0
 8009628:	4640      	mov	r0, r8
 800962a:	4649      	mov	r1, r9
 800962c:	f7f7 fa76 	bl	8000b1c <__aeabi_dcmplt>
 8009630:	b9d0      	cbnz	r0, 8009668 <_strtod_l+0xa80>
 8009632:	4640      	mov	r0, r8
 8009634:	4649      	mov	r1, r9
 8009636:	4b6c      	ldr	r3, [pc, #432]	; (80097e8 <_strtod_l+0xc00>)
 8009638:	2200      	movs	r2, #0
 800963a:	f7f6 fffd 	bl	8000638 <__aeabi_dmul>
 800963e:	4680      	mov	r8, r0
 8009640:	4689      	mov	r9, r1
 8009642:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009646:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800964a:	9315      	str	r3, [sp, #84]	; 0x54
 800964c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009650:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009654:	e79d      	b.n	8009592 <_strtod_l+0x9aa>
 8009656:	f1ba 0f01 	cmp.w	sl, #1
 800965a:	d102      	bne.n	8009662 <_strtod_l+0xa7a>
 800965c:	2f00      	cmp	r7, #0
 800965e:	f43f ad83 	beq.w	8009168 <_strtod_l+0x580>
 8009662:	4b62      	ldr	r3, [pc, #392]	; (80097ec <_strtod_l+0xc04>)
 8009664:	2200      	movs	r2, #0
 8009666:	e78e      	b.n	8009586 <_strtod_l+0x99e>
 8009668:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80097e8 <_strtod_l+0xc00>
 800966c:	f04f 0800 	mov.w	r8, #0
 8009670:	e7e7      	b.n	8009642 <_strtod_l+0xa5a>
 8009672:	4b5d      	ldr	r3, [pc, #372]	; (80097e8 <_strtod_l+0xc00>)
 8009674:	4640      	mov	r0, r8
 8009676:	4649      	mov	r1, r9
 8009678:	2200      	movs	r2, #0
 800967a:	f7f6 ffdd 	bl	8000638 <__aeabi_dmul>
 800967e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009680:	4680      	mov	r8, r0
 8009682:	4689      	mov	r9, r1
 8009684:	b933      	cbnz	r3, 8009694 <_strtod_l+0xaac>
 8009686:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800968a:	900e      	str	r0, [sp, #56]	; 0x38
 800968c:	930f      	str	r3, [sp, #60]	; 0x3c
 800968e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009692:	e7dd      	b.n	8009650 <_strtod_l+0xa68>
 8009694:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009698:	e7f9      	b.n	800968e <_strtod_l+0xaa6>
 800969a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1a8      	bne.n	80095f6 <_strtod_l+0xa0e>
 80096a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096aa:	0d1b      	lsrs	r3, r3, #20
 80096ac:	051b      	lsls	r3, r3, #20
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d1a1      	bne.n	80095f6 <_strtod_l+0xa0e>
 80096b2:	4640      	mov	r0, r8
 80096b4:	4649      	mov	r1, r9
 80096b6:	f7f7 fb09 	bl	8000ccc <__aeabi_d2lz>
 80096ba:	f7f6 ff8f 	bl	80005dc <__aeabi_l2d>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	4640      	mov	r0, r8
 80096c4:	4649      	mov	r1, r9
 80096c6:	f7f6 fdff 	bl	80002c8 <__aeabi_dsub>
 80096ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096d0:	ea43 030a 	orr.w	r3, r3, sl
 80096d4:	4313      	orrs	r3, r2
 80096d6:	4680      	mov	r8, r0
 80096d8:	4689      	mov	r9, r1
 80096da:	d055      	beq.n	8009788 <_strtod_l+0xba0>
 80096dc:	a336      	add	r3, pc, #216	; (adr r3, 80097b8 <_strtod_l+0xbd0>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	f7f7 fa1b 	bl	8000b1c <__aeabi_dcmplt>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f47f acd0 	bne.w	800908c <_strtod_l+0x4a4>
 80096ec:	a334      	add	r3, pc, #208	; (adr r3, 80097c0 <_strtod_l+0xbd8>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	4640      	mov	r0, r8
 80096f4:	4649      	mov	r1, r9
 80096f6:	f7f7 fa2f 	bl	8000b58 <__aeabi_dcmpgt>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	f43f af7b 	beq.w	80095f6 <_strtod_l+0xa0e>
 8009700:	e4c4      	b.n	800908c <_strtod_l+0x4a4>
 8009702:	9b04      	ldr	r3, [sp, #16]
 8009704:	b333      	cbz	r3, 8009754 <_strtod_l+0xb6c>
 8009706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009708:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800970c:	d822      	bhi.n	8009754 <_strtod_l+0xb6c>
 800970e:	a32e      	add	r3, pc, #184	; (adr r3, 80097c8 <_strtod_l+0xbe0>)
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	4640      	mov	r0, r8
 8009716:	4649      	mov	r1, r9
 8009718:	f7f7 fa0a 	bl	8000b30 <__aeabi_dcmple>
 800971c:	b1a0      	cbz	r0, 8009748 <_strtod_l+0xb60>
 800971e:	4649      	mov	r1, r9
 8009720:	4640      	mov	r0, r8
 8009722:	f7f7 fa4b 	bl	8000bbc <__aeabi_d2uiz>
 8009726:	2801      	cmp	r0, #1
 8009728:	bf38      	it	cc
 800972a:	2001      	movcc	r0, #1
 800972c:	f7f6 ff0a 	bl	8000544 <__aeabi_ui2d>
 8009730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009732:	4680      	mov	r8, r0
 8009734:	4689      	mov	r9, r1
 8009736:	bb23      	cbnz	r3, 8009782 <_strtod_l+0xb9a>
 8009738:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800973c:	9010      	str	r0, [sp, #64]	; 0x40
 800973e:	9311      	str	r3, [sp, #68]	; 0x44
 8009740:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009744:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800974a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800974c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009750:	1a9b      	subs	r3, r3, r2
 8009752:	9309      	str	r3, [sp, #36]	; 0x24
 8009754:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009758:	eeb0 0a48 	vmov.f32	s0, s16
 800975c:	eef0 0a68 	vmov.f32	s1, s17
 8009760:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009764:	f001 f880 	bl	800a868 <__ulp>
 8009768:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800976c:	ec53 2b10 	vmov	r2, r3, d0
 8009770:	f7f6 ff62 	bl	8000638 <__aeabi_dmul>
 8009774:	ec53 2b18 	vmov	r2, r3, d8
 8009778:	f7f6 fda8 	bl	80002cc <__adddf3>
 800977c:	4682      	mov	sl, r0
 800977e:	468b      	mov	fp, r1
 8009780:	e78d      	b.n	800969e <_strtod_l+0xab6>
 8009782:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009786:	e7db      	b.n	8009740 <_strtod_l+0xb58>
 8009788:	a311      	add	r3, pc, #68	; (adr r3, 80097d0 <_strtod_l+0xbe8>)
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	f7f7 f9c5 	bl	8000b1c <__aeabi_dcmplt>
 8009792:	e7b2      	b.n	80096fa <_strtod_l+0xb12>
 8009794:	2300      	movs	r3, #0
 8009796:	930a      	str	r3, [sp, #40]	; 0x28
 8009798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800979a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	f7ff ba6b 	b.w	8008c78 <_strtod_l+0x90>
 80097a2:	2a65      	cmp	r2, #101	; 0x65
 80097a4:	f43f ab5f 	beq.w	8008e66 <_strtod_l+0x27e>
 80097a8:	2a45      	cmp	r2, #69	; 0x45
 80097aa:	f43f ab5c 	beq.w	8008e66 <_strtod_l+0x27e>
 80097ae:	2301      	movs	r3, #1
 80097b0:	f7ff bb94 	b.w	8008edc <_strtod_l+0x2f4>
 80097b4:	f3af 8000 	nop.w
 80097b8:	94a03595 	.word	0x94a03595
 80097bc:	3fdfffff 	.word	0x3fdfffff
 80097c0:	35afe535 	.word	0x35afe535
 80097c4:	3fe00000 	.word	0x3fe00000
 80097c8:	ffc00000 	.word	0xffc00000
 80097cc:	41dfffff 	.word	0x41dfffff
 80097d0:	94a03595 	.word	0x94a03595
 80097d4:	3fcfffff 	.word	0x3fcfffff
 80097d8:	3ff00000 	.word	0x3ff00000
 80097dc:	7ff00000 	.word	0x7ff00000
 80097e0:	7fe00000 	.word	0x7fe00000
 80097e4:	7c9fffff 	.word	0x7c9fffff
 80097e8:	3fe00000 	.word	0x3fe00000
 80097ec:	bff00000 	.word	0xbff00000
 80097f0:	7fefffff 	.word	0x7fefffff

080097f4 <strtod>:
 80097f4:	460a      	mov	r2, r1
 80097f6:	4601      	mov	r1, r0
 80097f8:	4802      	ldr	r0, [pc, #8]	; (8009804 <strtod+0x10>)
 80097fa:	4b03      	ldr	r3, [pc, #12]	; (8009808 <strtod+0x14>)
 80097fc:	6800      	ldr	r0, [r0, #0]
 80097fe:	f7ff b9f3 	b.w	8008be8 <_strtod_l>
 8009802:	bf00      	nop
 8009804:	2000001c 	.word	0x2000001c
 8009808:	20000084 	.word	0x20000084

0800980c <print_e>:
 800980c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800980e:	b087      	sub	sp, #28
 8009810:	ec43 2b10 	vmov	d0, r2, r3
 8009814:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009816:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800981a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800981c:	ab04      	add	r3, sp, #16
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	ab03      	add	r3, sp, #12
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	1c62      	adds	r2, r4, #1
 8009826:	ab05      	add	r3, sp, #20
 8009828:	460f      	mov	r7, r1
 800982a:	2102      	movs	r1, #2
 800982c:	f001 fcb4 	bl	800b198 <_dtoa_r>
 8009830:	9a05      	ldr	r2, [sp, #20]
 8009832:	f242 730f 	movw	r3, #9999	; 0x270f
 8009836:	429a      	cmp	r2, r3
 8009838:	d105      	bne.n	8009846 <print_e+0x3a>
 800983a:	4601      	mov	r1, r0
 800983c:	4638      	mov	r0, r7
 800983e:	f001 fbd7 	bl	800aff0 <strcpy>
 8009842:	b007      	add	sp, #28
 8009844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009846:	463b      	mov	r3, r7
 8009848:	7801      	ldrb	r1, [r0, #0]
 800984a:	f803 1b01 	strb.w	r1, [r3], #1
 800984e:	2c00      	cmp	r4, #0
 8009850:	bfc8      	it	gt
 8009852:	2501      	movgt	r5, #1
 8009854:	212e      	movs	r1, #46	; 0x2e
 8009856:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800985a:	b10f      	cbz	r7, 8009860 <print_e+0x54>
 800985c:	2c00      	cmp	r4, #0
 800985e:	dc37      	bgt.n	80098d0 <print_e+0xc4>
 8009860:	2e67      	cmp	r6, #103	; 0x67
 8009862:	d046      	beq.n	80098f2 <print_e+0xe6>
 8009864:	2e47      	cmp	r6, #71	; 0x47
 8009866:	d046      	beq.n	80098f6 <print_e+0xea>
 8009868:	212e      	movs	r1, #46	; 0x2e
 800986a:	2030      	movs	r0, #48	; 0x30
 800986c:	2c00      	cmp	r4, #0
 800986e:	dc38      	bgt.n	80098e2 <print_e+0xd6>
 8009870:	1e51      	subs	r1, r2, #1
 8009872:	2900      	cmp	r1, #0
 8009874:	bfb8      	it	lt
 8009876:	f1c2 0201 	rsblt	r2, r2, #1
 800987a:	4618      	mov	r0, r3
 800987c:	9105      	str	r1, [sp, #20]
 800987e:	bfac      	ite	ge
 8009880:	222b      	movge	r2, #43	; 0x2b
 8009882:	9205      	strlt	r2, [sp, #20]
 8009884:	f800 6b02 	strb.w	r6, [r0], #2
 8009888:	bfa8      	it	ge
 800988a:	705a      	strbge	r2, [r3, #1]
 800988c:	9a05      	ldr	r2, [sp, #20]
 800988e:	bfbc      	itt	lt
 8009890:	212d      	movlt	r1, #45	; 0x2d
 8009892:	7059      	strblt	r1, [r3, #1]
 8009894:	2a63      	cmp	r2, #99	; 0x63
 8009896:	dd0b      	ble.n	80098b0 <print_e+0xa4>
 8009898:	2164      	movs	r1, #100	; 0x64
 800989a:	fb92 f1f1 	sdiv	r1, r2, r1
 800989e:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80098a2:	1cd8      	adds	r0, r3, #3
 80098a4:	709c      	strb	r4, [r3, #2]
 80098a6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80098aa:	fb03 2201 	mla	r2, r3, r1, r2
 80098ae:	9205      	str	r2, [sp, #20]
 80098b0:	9b05      	ldr	r3, [sp, #20]
 80098b2:	220a      	movs	r2, #10
 80098b4:	fb93 f2f2 	sdiv	r2, r3, r2
 80098b8:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80098bc:	7001      	strb	r1, [r0, #0]
 80098be:	f06f 0109 	mvn.w	r1, #9
 80098c2:	fb01 3302 	mla	r3, r1, r2, r3
 80098c6:	3330      	adds	r3, #48	; 0x30
 80098c8:	7043      	strb	r3, [r0, #1]
 80098ca:	2300      	movs	r3, #0
 80098cc:	7083      	strb	r3, [r0, #2]
 80098ce:	e7b8      	b.n	8009842 <print_e+0x36>
 80098d0:	b10d      	cbz	r5, 80098d6 <print_e+0xca>
 80098d2:	f803 1b01 	strb.w	r1, [r3], #1
 80098d6:	7805      	ldrb	r5, [r0, #0]
 80098d8:	f803 5b01 	strb.w	r5, [r3], #1
 80098dc:	3c01      	subs	r4, #1
 80098de:	2500      	movs	r5, #0
 80098e0:	e7b9      	b.n	8009856 <print_e+0x4a>
 80098e2:	b10d      	cbz	r5, 80098e8 <print_e+0xdc>
 80098e4:	f803 1b01 	strb.w	r1, [r3], #1
 80098e8:	f803 0b01 	strb.w	r0, [r3], #1
 80098ec:	3c01      	subs	r4, #1
 80098ee:	2500      	movs	r5, #0
 80098f0:	e7bc      	b.n	800986c <print_e+0x60>
 80098f2:	2665      	movs	r6, #101	; 0x65
 80098f4:	e7bc      	b.n	8009870 <print_e+0x64>
 80098f6:	2645      	movs	r6, #69	; 0x45
 80098f8:	e7ba      	b.n	8009870 <print_e+0x64>
 80098fa:	0000      	movs	r0, r0
 80098fc:	0000      	movs	r0, r0
	...

08009900 <_gcvt>:
 8009900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009904:	ec55 4b10 	vmov	r4, r5, d0
 8009908:	b088      	sub	sp, #32
 800990a:	4681      	mov	r9, r0
 800990c:	4688      	mov	r8, r1
 800990e:	4616      	mov	r6, r2
 8009910:	469a      	mov	sl, r3
 8009912:	ee10 0a10 	vmov	r0, s0
 8009916:	2200      	movs	r2, #0
 8009918:	2300      	movs	r3, #0
 800991a:	4629      	mov	r1, r5
 800991c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800991e:	f7f7 f8fd 	bl	8000b1c <__aeabi_dcmplt>
 8009922:	b110      	cbz	r0, 800992a <_gcvt+0x2a>
 8009924:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009928:	461d      	mov	r5, r3
 800992a:	2200      	movs	r2, #0
 800992c:	2300      	movs	r3, #0
 800992e:	4620      	mov	r0, r4
 8009930:	4629      	mov	r1, r5
 8009932:	f7f7 f8e9 	bl	8000b08 <__aeabi_dcmpeq>
 8009936:	b138      	cbz	r0, 8009948 <_gcvt+0x48>
 8009938:	2330      	movs	r3, #48	; 0x30
 800993a:	7033      	strb	r3, [r6, #0]
 800993c:	2300      	movs	r3, #0
 800993e:	7073      	strb	r3, [r6, #1]
 8009940:	4630      	mov	r0, r6
 8009942:	b008      	add	sp, #32
 8009944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009948:	a34b      	add	r3, pc, #300	; (adr r3, 8009a78 <_gcvt+0x178>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	4620      	mov	r0, r4
 8009950:	4629      	mov	r1, r5
 8009952:	f7f7 f8ed 	bl	8000b30 <__aeabi_dcmple>
 8009956:	b158      	cbz	r0, 8009970 <_gcvt+0x70>
 8009958:	f108 31ff 	add.w	r1, r8, #4294967295
 800995c:	9100      	str	r1, [sp, #0]
 800995e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8009962:	4622      	mov	r2, r4
 8009964:	462b      	mov	r3, r5
 8009966:	4631      	mov	r1, r6
 8009968:	4648      	mov	r0, r9
 800996a:	f7ff ff4f 	bl	800980c <print_e>
 800996e:	e7e7      	b.n	8009940 <_gcvt+0x40>
 8009970:	4640      	mov	r0, r8
 8009972:	f001 f885 	bl	800aa80 <_mprec_log10>
 8009976:	4622      	mov	r2, r4
 8009978:	ec51 0b10 	vmov	r0, r1, d0
 800997c:	462b      	mov	r3, r5
 800997e:	f7f7 f8d7 	bl	8000b30 <__aeabi_dcmple>
 8009982:	2800      	cmp	r0, #0
 8009984:	d1e8      	bne.n	8009958 <_gcvt+0x58>
 8009986:	ab07      	add	r3, sp, #28
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	ab06      	add	r3, sp, #24
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	4642      	mov	r2, r8
 8009990:	ab05      	add	r3, sp, #20
 8009992:	ec45 4b10 	vmov	d0, r4, r5
 8009996:	2102      	movs	r1, #2
 8009998:	4648      	mov	r0, r9
 800999a:	f001 fbfd 	bl	800b198 <_dtoa_r>
 800999e:	9a05      	ldr	r2, [sp, #20]
 80099a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d00e      	beq.n	80099c6 <_gcvt+0xc6>
 80099a8:	4633      	mov	r3, r6
 80099aa:	44b0      	add	r8, r6
 80099ac:	4605      	mov	r5, r0
 80099ae:	f810 1b01 	ldrb.w	r1, [r0], #1
 80099b2:	9c05      	ldr	r4, [sp, #20]
 80099b4:	eba8 0203 	sub.w	r2, r8, r3
 80099b8:	b109      	cbz	r1, 80099be <_gcvt+0xbe>
 80099ba:	2c00      	cmp	r4, #0
 80099bc:	dc08      	bgt.n	80099d0 <_gcvt+0xd0>
 80099be:	2100      	movs	r1, #0
 80099c0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80099c4:	e00d      	b.n	80099e2 <_gcvt+0xe2>
 80099c6:	4601      	mov	r1, r0
 80099c8:	4630      	mov	r0, r6
 80099ca:	f001 fb11 	bl	800aff0 <strcpy>
 80099ce:	e7b7      	b.n	8009940 <_gcvt+0x40>
 80099d0:	3c01      	subs	r4, #1
 80099d2:	f803 1b01 	strb.w	r1, [r3], #1
 80099d6:	9405      	str	r4, [sp, #20]
 80099d8:	e7e8      	b.n	80099ac <_gcvt+0xac>
 80099da:	f803 cb01 	strb.w	ip, [r3], #1
 80099de:	3a01      	subs	r2, #1
 80099e0:	2101      	movs	r1, #1
 80099e2:	2c00      	cmp	r4, #0
 80099e4:	4620      	mov	r0, r4
 80099e6:	dc2a      	bgt.n	8009a3e <_gcvt+0x13e>
 80099e8:	b101      	cbz	r1, 80099ec <_gcvt+0xec>
 80099ea:	9405      	str	r4, [sp, #20]
 80099ec:	b90f      	cbnz	r7, 80099f2 <_gcvt+0xf2>
 80099ee:	7829      	ldrb	r1, [r5, #0]
 80099f0:	b311      	cbz	r1, 8009a38 <_gcvt+0x138>
 80099f2:	42b3      	cmp	r3, r6
 80099f4:	bf04      	itt	eq
 80099f6:	2130      	moveq	r1, #48	; 0x30
 80099f8:	f803 1b01 	strbeq.w	r1, [r3], #1
 80099fc:	212e      	movs	r1, #46	; 0x2e
 80099fe:	7019      	strb	r1, [r3, #0]
 8009a00:	9905      	ldr	r1, [sp, #20]
 8009a02:	4618      	mov	r0, r3
 8009a04:	2400      	movs	r4, #0
 8009a06:	eba1 0c03 	sub.w	ip, r1, r3
 8009a0a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8009a0e:	eb1c 0f00 	cmn.w	ip, r0
 8009a12:	d41c      	bmi.n	8009a4e <_gcvt+0x14e>
 8009a14:	2900      	cmp	r1, #0
 8009a16:	f1c1 0000 	rsb	r0, r1, #0
 8009a1a:	bfc8      	it	gt
 8009a1c:	2000      	movgt	r0, #0
 8009a1e:	f100 0c01 	add.w	ip, r0, #1
 8009a22:	4463      	add	r3, ip
 8009a24:	4401      	add	r1, r0
 8009a26:	b104      	cbz	r4, 8009a2a <_gcvt+0x12a>
 8009a28:	9105      	str	r1, [sp, #20]
 8009a2a:	1e69      	subs	r1, r5, #1
 8009a2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a30:	b108      	cbz	r0, 8009a36 <_gcvt+0x136>
 8009a32:	2a00      	cmp	r2, #0
 8009a34:	dc0f      	bgt.n	8009a56 <_gcvt+0x156>
 8009a36:	b9df      	cbnz	r7, 8009a70 <_gcvt+0x170>
 8009a38:	2200      	movs	r2, #0
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	e780      	b.n	8009940 <_gcvt+0x40>
 8009a3e:	2a00      	cmp	r2, #0
 8009a40:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a44:	dcc9      	bgt.n	80099da <_gcvt+0xda>
 8009a46:	2900      	cmp	r1, #0
 8009a48:	d0d0      	beq.n	80099ec <_gcvt+0xec>
 8009a4a:	9005      	str	r0, [sp, #20]
 8009a4c:	e7ce      	b.n	80099ec <_gcvt+0xec>
 8009a4e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8009a52:	2401      	movs	r4, #1
 8009a54:	e7db      	b.n	8009a0e <_gcvt+0x10e>
 8009a56:	f803 0b01 	strb.w	r0, [r3], #1
 8009a5a:	3a01      	subs	r2, #1
 8009a5c:	e7e6      	b.n	8009a2c <_gcvt+0x12c>
 8009a5e:	f801 5b01 	strb.w	r5, [r1], #1
 8009a62:	1a60      	subs	r0, r4, r1
 8009a64:	2800      	cmp	r0, #0
 8009a66:	dcfa      	bgt.n	8009a5e <_gcvt+0x15e>
 8009a68:	2a00      	cmp	r2, #0
 8009a6a:	bfa8      	it	ge
 8009a6c:	189b      	addge	r3, r3, r2
 8009a6e:	e7e3      	b.n	8009a38 <_gcvt+0x138>
 8009a70:	4619      	mov	r1, r3
 8009a72:	189c      	adds	r4, r3, r2
 8009a74:	2530      	movs	r5, #48	; 0x30
 8009a76:	e7f4      	b.n	8009a62 <_gcvt+0x162>
 8009a78:	eb1c432d 	.word	0xeb1c432d
 8009a7c:	3f1a36e2 	.word	0x3f1a36e2

08009a80 <rshift>:
 8009a80:	6903      	ldr	r3, [r0, #16]
 8009a82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a8e:	f100 0414 	add.w	r4, r0, #20
 8009a92:	dd45      	ble.n	8009b20 <rshift+0xa0>
 8009a94:	f011 011f 	ands.w	r1, r1, #31
 8009a98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009aa0:	d10c      	bne.n	8009abc <rshift+0x3c>
 8009aa2:	f100 0710 	add.w	r7, r0, #16
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	42b1      	cmp	r1, r6
 8009aaa:	d334      	bcc.n	8009b16 <rshift+0x96>
 8009aac:	1a9b      	subs	r3, r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	1eea      	subs	r2, r5, #3
 8009ab2:	4296      	cmp	r6, r2
 8009ab4:	bf38      	it	cc
 8009ab6:	2300      	movcc	r3, #0
 8009ab8:	4423      	add	r3, r4
 8009aba:	e015      	b.n	8009ae8 <rshift+0x68>
 8009abc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ac0:	f1c1 0820 	rsb	r8, r1, #32
 8009ac4:	40cf      	lsrs	r7, r1
 8009ac6:	f105 0e04 	add.w	lr, r5, #4
 8009aca:	46a1      	mov	r9, r4
 8009acc:	4576      	cmp	r6, lr
 8009ace:	46f4      	mov	ip, lr
 8009ad0:	d815      	bhi.n	8009afe <rshift+0x7e>
 8009ad2:	1a9a      	subs	r2, r3, r2
 8009ad4:	0092      	lsls	r2, r2, #2
 8009ad6:	3a04      	subs	r2, #4
 8009ad8:	3501      	adds	r5, #1
 8009ada:	42ae      	cmp	r6, r5
 8009adc:	bf38      	it	cc
 8009ade:	2200      	movcc	r2, #0
 8009ae0:	18a3      	adds	r3, r4, r2
 8009ae2:	50a7      	str	r7, [r4, r2]
 8009ae4:	b107      	cbz	r7, 8009ae8 <rshift+0x68>
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	1b1a      	subs	r2, r3, r4
 8009aea:	42a3      	cmp	r3, r4
 8009aec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009af0:	bf08      	it	eq
 8009af2:	2300      	moveq	r3, #0
 8009af4:	6102      	str	r2, [r0, #16]
 8009af6:	bf08      	it	eq
 8009af8:	6143      	streq	r3, [r0, #20]
 8009afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009afe:	f8dc c000 	ldr.w	ip, [ip]
 8009b02:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b06:	ea4c 0707 	orr.w	r7, ip, r7
 8009b0a:	f849 7b04 	str.w	r7, [r9], #4
 8009b0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b12:	40cf      	lsrs	r7, r1
 8009b14:	e7da      	b.n	8009acc <rshift+0x4c>
 8009b16:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b1a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b1e:	e7c3      	b.n	8009aa8 <rshift+0x28>
 8009b20:	4623      	mov	r3, r4
 8009b22:	e7e1      	b.n	8009ae8 <rshift+0x68>

08009b24 <__hexdig_fun>:
 8009b24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b28:	2b09      	cmp	r3, #9
 8009b2a:	d802      	bhi.n	8009b32 <__hexdig_fun+0xe>
 8009b2c:	3820      	subs	r0, #32
 8009b2e:	b2c0      	uxtb	r0, r0
 8009b30:	4770      	bx	lr
 8009b32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b36:	2b05      	cmp	r3, #5
 8009b38:	d801      	bhi.n	8009b3e <__hexdig_fun+0x1a>
 8009b3a:	3847      	subs	r0, #71	; 0x47
 8009b3c:	e7f7      	b.n	8009b2e <__hexdig_fun+0xa>
 8009b3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b42:	2b05      	cmp	r3, #5
 8009b44:	d801      	bhi.n	8009b4a <__hexdig_fun+0x26>
 8009b46:	3827      	subs	r0, #39	; 0x27
 8009b48:	e7f1      	b.n	8009b2e <__hexdig_fun+0xa>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	4770      	bx	lr
	...

08009b50 <__gethex>:
 8009b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	ed2d 8b02 	vpush	{d8}
 8009b58:	b089      	sub	sp, #36	; 0x24
 8009b5a:	ee08 0a10 	vmov	s16, r0
 8009b5e:	9304      	str	r3, [sp, #16]
 8009b60:	4bb4      	ldr	r3, [pc, #720]	; (8009e34 <__gethex+0x2e4>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	4618      	mov	r0, r3
 8009b68:	468b      	mov	fp, r1
 8009b6a:	4690      	mov	r8, r2
 8009b6c:	f7f6 fb50 	bl	8000210 <strlen>
 8009b70:	9b01      	ldr	r3, [sp, #4]
 8009b72:	f8db 2000 	ldr.w	r2, [fp]
 8009b76:	4403      	add	r3, r0
 8009b78:	4682      	mov	sl, r0
 8009b7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b7e:	9305      	str	r3, [sp, #20]
 8009b80:	1c93      	adds	r3, r2, #2
 8009b82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009b86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009b8a:	32fe      	adds	r2, #254	; 0xfe
 8009b8c:	18d1      	adds	r1, r2, r3
 8009b8e:	461f      	mov	r7, r3
 8009b90:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b94:	9100      	str	r1, [sp, #0]
 8009b96:	2830      	cmp	r0, #48	; 0x30
 8009b98:	d0f8      	beq.n	8009b8c <__gethex+0x3c>
 8009b9a:	f7ff ffc3 	bl	8009b24 <__hexdig_fun>
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d13a      	bne.n	8009c1a <__gethex+0xca>
 8009ba4:	9901      	ldr	r1, [sp, #4]
 8009ba6:	4652      	mov	r2, sl
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f001 fa29 	bl	800b000 <strncmp>
 8009bae:	4605      	mov	r5, r0
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d168      	bne.n	8009c86 <__gethex+0x136>
 8009bb4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009bb8:	eb07 060a 	add.w	r6, r7, sl
 8009bbc:	f7ff ffb2 	bl	8009b24 <__hexdig_fun>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d062      	beq.n	8009c8a <__gethex+0x13a>
 8009bc4:	4633      	mov	r3, r6
 8009bc6:	7818      	ldrb	r0, [r3, #0]
 8009bc8:	2830      	cmp	r0, #48	; 0x30
 8009bca:	461f      	mov	r7, r3
 8009bcc:	f103 0301 	add.w	r3, r3, #1
 8009bd0:	d0f9      	beq.n	8009bc6 <__gethex+0x76>
 8009bd2:	f7ff ffa7 	bl	8009b24 <__hexdig_fun>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	fab0 f480 	clz	r4, r0
 8009bdc:	0964      	lsrs	r4, r4, #5
 8009bde:	4635      	mov	r5, r6
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	463a      	mov	r2, r7
 8009be4:	4616      	mov	r6, r2
 8009be6:	3201      	adds	r2, #1
 8009be8:	7830      	ldrb	r0, [r6, #0]
 8009bea:	f7ff ff9b 	bl	8009b24 <__hexdig_fun>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d1f8      	bne.n	8009be4 <__gethex+0x94>
 8009bf2:	9901      	ldr	r1, [sp, #4]
 8009bf4:	4652      	mov	r2, sl
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f001 fa02 	bl	800b000 <strncmp>
 8009bfc:	b980      	cbnz	r0, 8009c20 <__gethex+0xd0>
 8009bfe:	b94d      	cbnz	r5, 8009c14 <__gethex+0xc4>
 8009c00:	eb06 050a 	add.w	r5, r6, sl
 8009c04:	462a      	mov	r2, r5
 8009c06:	4616      	mov	r6, r2
 8009c08:	3201      	adds	r2, #1
 8009c0a:	7830      	ldrb	r0, [r6, #0]
 8009c0c:	f7ff ff8a 	bl	8009b24 <__hexdig_fun>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d1f8      	bne.n	8009c06 <__gethex+0xb6>
 8009c14:	1bad      	subs	r5, r5, r6
 8009c16:	00ad      	lsls	r5, r5, #2
 8009c18:	e004      	b.n	8009c24 <__gethex+0xd4>
 8009c1a:	2400      	movs	r4, #0
 8009c1c:	4625      	mov	r5, r4
 8009c1e:	e7e0      	b.n	8009be2 <__gethex+0x92>
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	d1f7      	bne.n	8009c14 <__gethex+0xc4>
 8009c24:	7833      	ldrb	r3, [r6, #0]
 8009c26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c2a:	2b50      	cmp	r3, #80	; 0x50
 8009c2c:	d13b      	bne.n	8009ca6 <__gethex+0x156>
 8009c2e:	7873      	ldrb	r3, [r6, #1]
 8009c30:	2b2b      	cmp	r3, #43	; 0x2b
 8009c32:	d02c      	beq.n	8009c8e <__gethex+0x13e>
 8009c34:	2b2d      	cmp	r3, #45	; 0x2d
 8009c36:	d02e      	beq.n	8009c96 <__gethex+0x146>
 8009c38:	1c71      	adds	r1, r6, #1
 8009c3a:	f04f 0900 	mov.w	r9, #0
 8009c3e:	7808      	ldrb	r0, [r1, #0]
 8009c40:	f7ff ff70 	bl	8009b24 <__hexdig_fun>
 8009c44:	1e43      	subs	r3, r0, #1
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b18      	cmp	r3, #24
 8009c4a:	d82c      	bhi.n	8009ca6 <__gethex+0x156>
 8009c4c:	f1a0 0210 	sub.w	r2, r0, #16
 8009c50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c54:	f7ff ff66 	bl	8009b24 <__hexdig_fun>
 8009c58:	1e43      	subs	r3, r0, #1
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b18      	cmp	r3, #24
 8009c5e:	d91d      	bls.n	8009c9c <__gethex+0x14c>
 8009c60:	f1b9 0f00 	cmp.w	r9, #0
 8009c64:	d000      	beq.n	8009c68 <__gethex+0x118>
 8009c66:	4252      	negs	r2, r2
 8009c68:	4415      	add	r5, r2
 8009c6a:	f8cb 1000 	str.w	r1, [fp]
 8009c6e:	b1e4      	cbz	r4, 8009caa <__gethex+0x15a>
 8009c70:	9b00      	ldr	r3, [sp, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	bf14      	ite	ne
 8009c76:	2700      	movne	r7, #0
 8009c78:	2706      	moveq	r7, #6
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	b009      	add	sp, #36	; 0x24
 8009c7e:	ecbd 8b02 	vpop	{d8}
 8009c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c86:	463e      	mov	r6, r7
 8009c88:	4625      	mov	r5, r4
 8009c8a:	2401      	movs	r4, #1
 8009c8c:	e7ca      	b.n	8009c24 <__gethex+0xd4>
 8009c8e:	f04f 0900 	mov.w	r9, #0
 8009c92:	1cb1      	adds	r1, r6, #2
 8009c94:	e7d3      	b.n	8009c3e <__gethex+0xee>
 8009c96:	f04f 0901 	mov.w	r9, #1
 8009c9a:	e7fa      	b.n	8009c92 <__gethex+0x142>
 8009c9c:	230a      	movs	r3, #10
 8009c9e:	fb03 0202 	mla	r2, r3, r2, r0
 8009ca2:	3a10      	subs	r2, #16
 8009ca4:	e7d4      	b.n	8009c50 <__gethex+0x100>
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	e7df      	b.n	8009c6a <__gethex+0x11a>
 8009caa:	1bf3      	subs	r3, r6, r7
 8009cac:	3b01      	subs	r3, #1
 8009cae:	4621      	mov	r1, r4
 8009cb0:	2b07      	cmp	r3, #7
 8009cb2:	dc0b      	bgt.n	8009ccc <__gethex+0x17c>
 8009cb4:	ee18 0a10 	vmov	r0, s16
 8009cb8:	f000 fa64 	bl	800a184 <_Balloc>
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	b940      	cbnz	r0, 8009cd2 <__gethex+0x182>
 8009cc0:	4b5d      	ldr	r3, [pc, #372]	; (8009e38 <__gethex+0x2e8>)
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	21de      	movs	r1, #222	; 0xde
 8009cc6:	485d      	ldr	r0, [pc, #372]	; (8009e3c <__gethex+0x2ec>)
 8009cc8:	f001 f9bc 	bl	800b044 <__assert_func>
 8009ccc:	3101      	adds	r1, #1
 8009cce:	105b      	asrs	r3, r3, #1
 8009cd0:	e7ee      	b.n	8009cb0 <__gethex+0x160>
 8009cd2:	f100 0914 	add.w	r9, r0, #20
 8009cd6:	f04f 0b00 	mov.w	fp, #0
 8009cda:	f1ca 0301 	rsb	r3, sl, #1
 8009cde:	f8cd 9008 	str.w	r9, [sp, #8]
 8009ce2:	f8cd b000 	str.w	fp, [sp]
 8009ce6:	9306      	str	r3, [sp, #24]
 8009ce8:	42b7      	cmp	r7, r6
 8009cea:	d340      	bcc.n	8009d6e <__gethex+0x21e>
 8009cec:	9802      	ldr	r0, [sp, #8]
 8009cee:	9b00      	ldr	r3, [sp, #0]
 8009cf0:	f840 3b04 	str.w	r3, [r0], #4
 8009cf4:	eba0 0009 	sub.w	r0, r0, r9
 8009cf8:	1080      	asrs	r0, r0, #2
 8009cfa:	0146      	lsls	r6, r0, #5
 8009cfc:	6120      	str	r0, [r4, #16]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 fb32 	bl	800a368 <__hi0bits>
 8009d04:	1a30      	subs	r0, r6, r0
 8009d06:	f8d8 6000 	ldr.w	r6, [r8]
 8009d0a:	42b0      	cmp	r0, r6
 8009d0c:	dd63      	ble.n	8009dd6 <__gethex+0x286>
 8009d0e:	1b87      	subs	r7, r0, r6
 8009d10:	4639      	mov	r1, r7
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 fef5 	bl	800ab02 <__any_on>
 8009d18:	4682      	mov	sl, r0
 8009d1a:	b1a8      	cbz	r0, 8009d48 <__gethex+0x1f8>
 8009d1c:	1e7b      	subs	r3, r7, #1
 8009d1e:	1159      	asrs	r1, r3, #5
 8009d20:	f003 021f 	and.w	r2, r3, #31
 8009d24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d28:	f04f 0a01 	mov.w	sl, #1
 8009d2c:	fa0a f202 	lsl.w	r2, sl, r2
 8009d30:	420a      	tst	r2, r1
 8009d32:	d009      	beq.n	8009d48 <__gethex+0x1f8>
 8009d34:	4553      	cmp	r3, sl
 8009d36:	dd05      	ble.n	8009d44 <__gethex+0x1f4>
 8009d38:	1eb9      	subs	r1, r7, #2
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 fee1 	bl	800ab02 <__any_on>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d145      	bne.n	8009dd0 <__gethex+0x280>
 8009d44:	f04f 0a02 	mov.w	sl, #2
 8009d48:	4639      	mov	r1, r7
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f7ff fe98 	bl	8009a80 <rshift>
 8009d50:	443d      	add	r5, r7
 8009d52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d56:	42ab      	cmp	r3, r5
 8009d58:	da4c      	bge.n	8009df4 <__gethex+0x2a4>
 8009d5a:	ee18 0a10 	vmov	r0, s16
 8009d5e:	4621      	mov	r1, r4
 8009d60:	f000 fa50 	bl	800a204 <_Bfree>
 8009d64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d66:	2300      	movs	r3, #0
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	27a3      	movs	r7, #163	; 0xa3
 8009d6c:	e785      	b.n	8009c7a <__gethex+0x12a>
 8009d6e:	1e73      	subs	r3, r6, #1
 8009d70:	9a05      	ldr	r2, [sp, #20]
 8009d72:	9303      	str	r3, [sp, #12]
 8009d74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d019      	beq.n	8009db0 <__gethex+0x260>
 8009d7c:	f1bb 0f20 	cmp.w	fp, #32
 8009d80:	d107      	bne.n	8009d92 <__gethex+0x242>
 8009d82:	9b02      	ldr	r3, [sp, #8]
 8009d84:	9a00      	ldr	r2, [sp, #0]
 8009d86:	f843 2b04 	str.w	r2, [r3], #4
 8009d8a:	9302      	str	r3, [sp, #8]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	469b      	mov	fp, r3
 8009d92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d96:	f7ff fec5 	bl	8009b24 <__hexdig_fun>
 8009d9a:	9b00      	ldr	r3, [sp, #0]
 8009d9c:	f000 000f 	and.w	r0, r0, #15
 8009da0:	fa00 f00b 	lsl.w	r0, r0, fp
 8009da4:	4303      	orrs	r3, r0
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	f10b 0b04 	add.w	fp, fp, #4
 8009dac:	9b03      	ldr	r3, [sp, #12]
 8009dae:	e00d      	b.n	8009dcc <__gethex+0x27c>
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	9a06      	ldr	r2, [sp, #24]
 8009db4:	4413      	add	r3, r2
 8009db6:	42bb      	cmp	r3, r7
 8009db8:	d3e0      	bcc.n	8009d7c <__gethex+0x22c>
 8009dba:	4618      	mov	r0, r3
 8009dbc:	9901      	ldr	r1, [sp, #4]
 8009dbe:	9307      	str	r3, [sp, #28]
 8009dc0:	4652      	mov	r2, sl
 8009dc2:	f001 f91d 	bl	800b000 <strncmp>
 8009dc6:	9b07      	ldr	r3, [sp, #28]
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d1d7      	bne.n	8009d7c <__gethex+0x22c>
 8009dcc:	461e      	mov	r6, r3
 8009dce:	e78b      	b.n	8009ce8 <__gethex+0x198>
 8009dd0:	f04f 0a03 	mov.w	sl, #3
 8009dd4:	e7b8      	b.n	8009d48 <__gethex+0x1f8>
 8009dd6:	da0a      	bge.n	8009dee <__gethex+0x29e>
 8009dd8:	1a37      	subs	r7, r6, r0
 8009dda:	4621      	mov	r1, r4
 8009ddc:	ee18 0a10 	vmov	r0, s16
 8009de0:	463a      	mov	r2, r7
 8009de2:	f000 fc2b 	bl	800a63c <__lshift>
 8009de6:	1bed      	subs	r5, r5, r7
 8009de8:	4604      	mov	r4, r0
 8009dea:	f100 0914 	add.w	r9, r0, #20
 8009dee:	f04f 0a00 	mov.w	sl, #0
 8009df2:	e7ae      	b.n	8009d52 <__gethex+0x202>
 8009df4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009df8:	42a8      	cmp	r0, r5
 8009dfa:	dd72      	ble.n	8009ee2 <__gethex+0x392>
 8009dfc:	1b45      	subs	r5, r0, r5
 8009dfe:	42ae      	cmp	r6, r5
 8009e00:	dc36      	bgt.n	8009e70 <__gethex+0x320>
 8009e02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d02a      	beq.n	8009e60 <__gethex+0x310>
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d02c      	beq.n	8009e68 <__gethex+0x318>
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d11c      	bne.n	8009e4c <__gethex+0x2fc>
 8009e12:	42ae      	cmp	r6, r5
 8009e14:	d11a      	bne.n	8009e4c <__gethex+0x2fc>
 8009e16:	2e01      	cmp	r6, #1
 8009e18:	d112      	bne.n	8009e40 <__gethex+0x2f0>
 8009e1a:	9a04      	ldr	r2, [sp, #16]
 8009e1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	2301      	movs	r3, #1
 8009e24:	6123      	str	r3, [r4, #16]
 8009e26:	f8c9 3000 	str.w	r3, [r9]
 8009e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e2c:	2762      	movs	r7, #98	; 0x62
 8009e2e:	601c      	str	r4, [r3, #0]
 8009e30:	e723      	b.n	8009c7a <__gethex+0x12a>
 8009e32:	bf00      	nop
 8009e34:	0800d250 	.word	0x0800d250
 8009e38:	0800d1d8 	.word	0x0800d1d8
 8009e3c:	0800d1e9 	.word	0x0800d1e9
 8009e40:	1e71      	subs	r1, r6, #1
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 fe5d 	bl	800ab02 <__any_on>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d1e6      	bne.n	8009e1a <__gethex+0x2ca>
 8009e4c:	ee18 0a10 	vmov	r0, s16
 8009e50:	4621      	mov	r1, r4
 8009e52:	f000 f9d7 	bl	800a204 <_Bfree>
 8009e56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e58:	2300      	movs	r3, #0
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	2750      	movs	r7, #80	; 0x50
 8009e5e:	e70c      	b.n	8009c7a <__gethex+0x12a>
 8009e60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1f2      	bne.n	8009e4c <__gethex+0x2fc>
 8009e66:	e7d8      	b.n	8009e1a <__gethex+0x2ca>
 8009e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1d5      	bne.n	8009e1a <__gethex+0x2ca>
 8009e6e:	e7ed      	b.n	8009e4c <__gethex+0x2fc>
 8009e70:	1e6f      	subs	r7, r5, #1
 8009e72:	f1ba 0f00 	cmp.w	sl, #0
 8009e76:	d131      	bne.n	8009edc <__gethex+0x38c>
 8009e78:	b127      	cbz	r7, 8009e84 <__gethex+0x334>
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 fe40 	bl	800ab02 <__any_on>
 8009e82:	4682      	mov	sl, r0
 8009e84:	117b      	asrs	r3, r7, #5
 8009e86:	2101      	movs	r1, #1
 8009e88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009e8c:	f007 071f 	and.w	r7, r7, #31
 8009e90:	fa01 f707 	lsl.w	r7, r1, r7
 8009e94:	421f      	tst	r7, r3
 8009e96:	4629      	mov	r1, r5
 8009e98:	4620      	mov	r0, r4
 8009e9a:	bf18      	it	ne
 8009e9c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ea0:	1b76      	subs	r6, r6, r5
 8009ea2:	f7ff fded 	bl	8009a80 <rshift>
 8009ea6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009eaa:	2702      	movs	r7, #2
 8009eac:	f1ba 0f00 	cmp.w	sl, #0
 8009eb0:	d048      	beq.n	8009f44 <__gethex+0x3f4>
 8009eb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d015      	beq.n	8009ee6 <__gethex+0x396>
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d017      	beq.n	8009eee <__gethex+0x39e>
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d109      	bne.n	8009ed6 <__gethex+0x386>
 8009ec2:	f01a 0f02 	tst.w	sl, #2
 8009ec6:	d006      	beq.n	8009ed6 <__gethex+0x386>
 8009ec8:	f8d9 0000 	ldr.w	r0, [r9]
 8009ecc:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ed0:	f01a 0f01 	tst.w	sl, #1
 8009ed4:	d10e      	bne.n	8009ef4 <__gethex+0x3a4>
 8009ed6:	f047 0710 	orr.w	r7, r7, #16
 8009eda:	e033      	b.n	8009f44 <__gethex+0x3f4>
 8009edc:	f04f 0a01 	mov.w	sl, #1
 8009ee0:	e7d0      	b.n	8009e84 <__gethex+0x334>
 8009ee2:	2701      	movs	r7, #1
 8009ee4:	e7e2      	b.n	8009eac <__gethex+0x35c>
 8009ee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee8:	f1c3 0301 	rsb	r3, r3, #1
 8009eec:	9315      	str	r3, [sp, #84]	; 0x54
 8009eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d0f0      	beq.n	8009ed6 <__gethex+0x386>
 8009ef4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ef8:	f104 0314 	add.w	r3, r4, #20
 8009efc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f04:	f04f 0c00 	mov.w	ip, #0
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f12:	d01c      	beq.n	8009f4e <__gethex+0x3fe>
 8009f14:	3201      	adds	r2, #1
 8009f16:	6002      	str	r2, [r0, #0]
 8009f18:	2f02      	cmp	r7, #2
 8009f1a:	f104 0314 	add.w	r3, r4, #20
 8009f1e:	d13f      	bne.n	8009fa0 <__gethex+0x450>
 8009f20:	f8d8 2000 	ldr.w	r2, [r8]
 8009f24:	3a01      	subs	r2, #1
 8009f26:	42b2      	cmp	r2, r6
 8009f28:	d10a      	bne.n	8009f40 <__gethex+0x3f0>
 8009f2a:	1171      	asrs	r1, r6, #5
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f32:	f006 061f 	and.w	r6, r6, #31
 8009f36:	fa02 f606 	lsl.w	r6, r2, r6
 8009f3a:	421e      	tst	r6, r3
 8009f3c:	bf18      	it	ne
 8009f3e:	4617      	movne	r7, r2
 8009f40:	f047 0720 	orr.w	r7, r7, #32
 8009f44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f46:	601c      	str	r4, [r3, #0]
 8009f48:	9b04      	ldr	r3, [sp, #16]
 8009f4a:	601d      	str	r5, [r3, #0]
 8009f4c:	e695      	b.n	8009c7a <__gethex+0x12a>
 8009f4e:	4299      	cmp	r1, r3
 8009f50:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f54:	d8d8      	bhi.n	8009f08 <__gethex+0x3b8>
 8009f56:	68a3      	ldr	r3, [r4, #8]
 8009f58:	459b      	cmp	fp, r3
 8009f5a:	db19      	blt.n	8009f90 <__gethex+0x440>
 8009f5c:	6861      	ldr	r1, [r4, #4]
 8009f5e:	ee18 0a10 	vmov	r0, s16
 8009f62:	3101      	adds	r1, #1
 8009f64:	f000 f90e 	bl	800a184 <_Balloc>
 8009f68:	4681      	mov	r9, r0
 8009f6a:	b918      	cbnz	r0, 8009f74 <__gethex+0x424>
 8009f6c:	4b1a      	ldr	r3, [pc, #104]	; (8009fd8 <__gethex+0x488>)
 8009f6e:	4602      	mov	r2, r0
 8009f70:	2184      	movs	r1, #132	; 0x84
 8009f72:	e6a8      	b.n	8009cc6 <__gethex+0x176>
 8009f74:	6922      	ldr	r2, [r4, #16]
 8009f76:	3202      	adds	r2, #2
 8009f78:	f104 010c 	add.w	r1, r4, #12
 8009f7c:	0092      	lsls	r2, r2, #2
 8009f7e:	300c      	adds	r0, #12
 8009f80:	f7fe fdee 	bl	8008b60 <memcpy>
 8009f84:	4621      	mov	r1, r4
 8009f86:	ee18 0a10 	vmov	r0, s16
 8009f8a:	f000 f93b 	bl	800a204 <_Bfree>
 8009f8e:	464c      	mov	r4, r9
 8009f90:	6923      	ldr	r3, [r4, #16]
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f98:	6122      	str	r2, [r4, #16]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	615a      	str	r2, [r3, #20]
 8009f9e:	e7bb      	b.n	8009f18 <__gethex+0x3c8>
 8009fa0:	6922      	ldr	r2, [r4, #16]
 8009fa2:	455a      	cmp	r2, fp
 8009fa4:	dd0b      	ble.n	8009fbe <__gethex+0x46e>
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f7ff fd69 	bl	8009a80 <rshift>
 8009fae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fb2:	3501      	adds	r5, #1
 8009fb4:	42ab      	cmp	r3, r5
 8009fb6:	f6ff aed0 	blt.w	8009d5a <__gethex+0x20a>
 8009fba:	2701      	movs	r7, #1
 8009fbc:	e7c0      	b.n	8009f40 <__gethex+0x3f0>
 8009fbe:	f016 061f 	ands.w	r6, r6, #31
 8009fc2:	d0fa      	beq.n	8009fba <__gethex+0x46a>
 8009fc4:	4453      	add	r3, sl
 8009fc6:	f1c6 0620 	rsb	r6, r6, #32
 8009fca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009fce:	f000 f9cb 	bl	800a368 <__hi0bits>
 8009fd2:	42b0      	cmp	r0, r6
 8009fd4:	dbe7      	blt.n	8009fa6 <__gethex+0x456>
 8009fd6:	e7f0      	b.n	8009fba <__gethex+0x46a>
 8009fd8:	0800d1d8 	.word	0x0800d1d8

08009fdc <L_shift>:
 8009fdc:	f1c2 0208 	rsb	r2, r2, #8
 8009fe0:	0092      	lsls	r2, r2, #2
 8009fe2:	b570      	push	{r4, r5, r6, lr}
 8009fe4:	f1c2 0620 	rsb	r6, r2, #32
 8009fe8:	6843      	ldr	r3, [r0, #4]
 8009fea:	6804      	ldr	r4, [r0, #0]
 8009fec:	fa03 f506 	lsl.w	r5, r3, r6
 8009ff0:	432c      	orrs	r4, r5
 8009ff2:	40d3      	lsrs	r3, r2
 8009ff4:	6004      	str	r4, [r0, #0]
 8009ff6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ffa:	4288      	cmp	r0, r1
 8009ffc:	d3f4      	bcc.n	8009fe8 <L_shift+0xc>
 8009ffe:	bd70      	pop	{r4, r5, r6, pc}

0800a000 <__match>:
 800a000:	b530      	push	{r4, r5, lr}
 800a002:	6803      	ldr	r3, [r0, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a00a:	b914      	cbnz	r4, 800a012 <__match+0x12>
 800a00c:	6003      	str	r3, [r0, #0]
 800a00e:	2001      	movs	r0, #1
 800a010:	bd30      	pop	{r4, r5, pc}
 800a012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a016:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a01a:	2d19      	cmp	r5, #25
 800a01c:	bf98      	it	ls
 800a01e:	3220      	addls	r2, #32
 800a020:	42a2      	cmp	r2, r4
 800a022:	d0f0      	beq.n	800a006 <__match+0x6>
 800a024:	2000      	movs	r0, #0
 800a026:	e7f3      	b.n	800a010 <__match+0x10>

0800a028 <__hexnan>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	680b      	ldr	r3, [r1, #0]
 800a02e:	115e      	asrs	r6, r3, #5
 800a030:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a034:	f013 031f 	ands.w	r3, r3, #31
 800a038:	b087      	sub	sp, #28
 800a03a:	bf18      	it	ne
 800a03c:	3604      	addne	r6, #4
 800a03e:	2500      	movs	r5, #0
 800a040:	1f37      	subs	r7, r6, #4
 800a042:	4690      	mov	r8, r2
 800a044:	6802      	ldr	r2, [r0, #0]
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	4682      	mov	sl, r0
 800a04a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a04e:	46b9      	mov	r9, r7
 800a050:	463c      	mov	r4, r7
 800a052:	9502      	str	r5, [sp, #8]
 800a054:	46ab      	mov	fp, r5
 800a056:	7851      	ldrb	r1, [r2, #1]
 800a058:	1c53      	adds	r3, r2, #1
 800a05a:	9303      	str	r3, [sp, #12]
 800a05c:	b341      	cbz	r1, 800a0b0 <__hexnan+0x88>
 800a05e:	4608      	mov	r0, r1
 800a060:	9205      	str	r2, [sp, #20]
 800a062:	9104      	str	r1, [sp, #16]
 800a064:	f7ff fd5e 	bl	8009b24 <__hexdig_fun>
 800a068:	2800      	cmp	r0, #0
 800a06a:	d14f      	bne.n	800a10c <__hexnan+0xe4>
 800a06c:	9904      	ldr	r1, [sp, #16]
 800a06e:	9a05      	ldr	r2, [sp, #20]
 800a070:	2920      	cmp	r1, #32
 800a072:	d818      	bhi.n	800a0a6 <__hexnan+0x7e>
 800a074:	9b02      	ldr	r3, [sp, #8]
 800a076:	459b      	cmp	fp, r3
 800a078:	dd13      	ble.n	800a0a2 <__hexnan+0x7a>
 800a07a:	454c      	cmp	r4, r9
 800a07c:	d206      	bcs.n	800a08c <__hexnan+0x64>
 800a07e:	2d07      	cmp	r5, #7
 800a080:	dc04      	bgt.n	800a08c <__hexnan+0x64>
 800a082:	462a      	mov	r2, r5
 800a084:	4649      	mov	r1, r9
 800a086:	4620      	mov	r0, r4
 800a088:	f7ff ffa8 	bl	8009fdc <L_shift>
 800a08c:	4544      	cmp	r4, r8
 800a08e:	d950      	bls.n	800a132 <__hexnan+0x10a>
 800a090:	2300      	movs	r3, #0
 800a092:	f1a4 0904 	sub.w	r9, r4, #4
 800a096:	f844 3c04 	str.w	r3, [r4, #-4]
 800a09a:	f8cd b008 	str.w	fp, [sp, #8]
 800a09e:	464c      	mov	r4, r9
 800a0a0:	461d      	mov	r5, r3
 800a0a2:	9a03      	ldr	r2, [sp, #12]
 800a0a4:	e7d7      	b.n	800a056 <__hexnan+0x2e>
 800a0a6:	2929      	cmp	r1, #41	; 0x29
 800a0a8:	d156      	bne.n	800a158 <__hexnan+0x130>
 800a0aa:	3202      	adds	r2, #2
 800a0ac:	f8ca 2000 	str.w	r2, [sl]
 800a0b0:	f1bb 0f00 	cmp.w	fp, #0
 800a0b4:	d050      	beq.n	800a158 <__hexnan+0x130>
 800a0b6:	454c      	cmp	r4, r9
 800a0b8:	d206      	bcs.n	800a0c8 <__hexnan+0xa0>
 800a0ba:	2d07      	cmp	r5, #7
 800a0bc:	dc04      	bgt.n	800a0c8 <__hexnan+0xa0>
 800a0be:	462a      	mov	r2, r5
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f7ff ff8a 	bl	8009fdc <L_shift>
 800a0c8:	4544      	cmp	r4, r8
 800a0ca:	d934      	bls.n	800a136 <__hexnan+0x10e>
 800a0cc:	f1a8 0204 	sub.w	r2, r8, #4
 800a0d0:	4623      	mov	r3, r4
 800a0d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0da:	429f      	cmp	r7, r3
 800a0dc:	d2f9      	bcs.n	800a0d2 <__hexnan+0xaa>
 800a0de:	1b3b      	subs	r3, r7, r4
 800a0e0:	f023 0303 	bic.w	r3, r3, #3
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	3401      	adds	r4, #1
 800a0e8:	3e03      	subs	r6, #3
 800a0ea:	42b4      	cmp	r4, r6
 800a0ec:	bf88      	it	hi
 800a0ee:	2304      	movhi	r3, #4
 800a0f0:	4443      	add	r3, r8
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f843 2b04 	str.w	r2, [r3], #4
 800a0f8:	429f      	cmp	r7, r3
 800a0fa:	d2fb      	bcs.n	800a0f4 <__hexnan+0xcc>
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	b91b      	cbnz	r3, 800a108 <__hexnan+0xe0>
 800a100:	4547      	cmp	r7, r8
 800a102:	d127      	bne.n	800a154 <__hexnan+0x12c>
 800a104:	2301      	movs	r3, #1
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	2005      	movs	r0, #5
 800a10a:	e026      	b.n	800a15a <__hexnan+0x132>
 800a10c:	3501      	adds	r5, #1
 800a10e:	2d08      	cmp	r5, #8
 800a110:	f10b 0b01 	add.w	fp, fp, #1
 800a114:	dd06      	ble.n	800a124 <__hexnan+0xfc>
 800a116:	4544      	cmp	r4, r8
 800a118:	d9c3      	bls.n	800a0a2 <__hexnan+0x7a>
 800a11a:	2300      	movs	r3, #0
 800a11c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a120:	2501      	movs	r5, #1
 800a122:	3c04      	subs	r4, #4
 800a124:	6822      	ldr	r2, [r4, #0]
 800a126:	f000 000f 	and.w	r0, r0, #15
 800a12a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a12e:	6022      	str	r2, [r4, #0]
 800a130:	e7b7      	b.n	800a0a2 <__hexnan+0x7a>
 800a132:	2508      	movs	r5, #8
 800a134:	e7b5      	b.n	800a0a2 <__hexnan+0x7a>
 800a136:	9b01      	ldr	r3, [sp, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d0df      	beq.n	800a0fc <__hexnan+0xd4>
 800a13c:	f04f 32ff 	mov.w	r2, #4294967295
 800a140:	f1c3 0320 	rsb	r3, r3, #32
 800a144:	fa22 f303 	lsr.w	r3, r2, r3
 800a148:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a14c:	401a      	ands	r2, r3
 800a14e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a152:	e7d3      	b.n	800a0fc <__hexnan+0xd4>
 800a154:	3f04      	subs	r7, #4
 800a156:	e7d1      	b.n	800a0fc <__hexnan+0xd4>
 800a158:	2004      	movs	r0, #4
 800a15a:	b007      	add	sp, #28
 800a15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a160 <__ascii_mbtowc>:
 800a160:	b082      	sub	sp, #8
 800a162:	b901      	cbnz	r1, 800a166 <__ascii_mbtowc+0x6>
 800a164:	a901      	add	r1, sp, #4
 800a166:	b142      	cbz	r2, 800a17a <__ascii_mbtowc+0x1a>
 800a168:	b14b      	cbz	r3, 800a17e <__ascii_mbtowc+0x1e>
 800a16a:	7813      	ldrb	r3, [r2, #0]
 800a16c:	600b      	str	r3, [r1, #0]
 800a16e:	7812      	ldrb	r2, [r2, #0]
 800a170:	1e10      	subs	r0, r2, #0
 800a172:	bf18      	it	ne
 800a174:	2001      	movne	r0, #1
 800a176:	b002      	add	sp, #8
 800a178:	4770      	bx	lr
 800a17a:	4610      	mov	r0, r2
 800a17c:	e7fb      	b.n	800a176 <__ascii_mbtowc+0x16>
 800a17e:	f06f 0001 	mvn.w	r0, #1
 800a182:	e7f8      	b.n	800a176 <__ascii_mbtowc+0x16>

0800a184 <_Balloc>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a188:	4604      	mov	r4, r0
 800a18a:	460d      	mov	r5, r1
 800a18c:	b976      	cbnz	r6, 800a1ac <_Balloc+0x28>
 800a18e:	2010      	movs	r0, #16
 800a190:	f001 fe02 	bl	800bd98 <malloc>
 800a194:	4602      	mov	r2, r0
 800a196:	6260      	str	r0, [r4, #36]	; 0x24
 800a198:	b920      	cbnz	r0, 800a1a4 <_Balloc+0x20>
 800a19a:	4b18      	ldr	r3, [pc, #96]	; (800a1fc <_Balloc+0x78>)
 800a19c:	4818      	ldr	r0, [pc, #96]	; (800a200 <_Balloc+0x7c>)
 800a19e:	2166      	movs	r1, #102	; 0x66
 800a1a0:	f000 ff50 	bl	800b044 <__assert_func>
 800a1a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1a8:	6006      	str	r6, [r0, #0]
 800a1aa:	60c6      	str	r6, [r0, #12]
 800a1ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1ae:	68f3      	ldr	r3, [r6, #12]
 800a1b0:	b183      	cbz	r3, 800a1d4 <_Balloc+0x50>
 800a1b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1ba:	b9b8      	cbnz	r0, 800a1ec <_Balloc+0x68>
 800a1bc:	2101      	movs	r1, #1
 800a1be:	fa01 f605 	lsl.w	r6, r1, r5
 800a1c2:	1d72      	adds	r2, r6, #5
 800a1c4:	0092      	lsls	r2, r2, #2
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f000 fcbc 	bl	800ab44 <_calloc_r>
 800a1cc:	b160      	cbz	r0, 800a1e8 <_Balloc+0x64>
 800a1ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1d2:	e00e      	b.n	800a1f2 <_Balloc+0x6e>
 800a1d4:	2221      	movs	r2, #33	; 0x21
 800a1d6:	2104      	movs	r1, #4
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f000 fcb3 	bl	800ab44 <_calloc_r>
 800a1de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1e0:	60f0      	str	r0, [r6, #12]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e4      	bne.n	800a1b2 <_Balloc+0x2e>
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	6802      	ldr	r2, [r0, #0]
 800a1ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1f8:	e7f7      	b.n	800a1ea <_Balloc+0x66>
 800a1fa:	bf00      	nop
 800a1fc:	0800d264 	.word	0x0800d264
 800a200:	0800d27b 	.word	0x0800d27b

0800a204 <_Bfree>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a208:	4605      	mov	r5, r0
 800a20a:	460c      	mov	r4, r1
 800a20c:	b976      	cbnz	r6, 800a22c <_Bfree+0x28>
 800a20e:	2010      	movs	r0, #16
 800a210:	f001 fdc2 	bl	800bd98 <malloc>
 800a214:	4602      	mov	r2, r0
 800a216:	6268      	str	r0, [r5, #36]	; 0x24
 800a218:	b920      	cbnz	r0, 800a224 <_Bfree+0x20>
 800a21a:	4b09      	ldr	r3, [pc, #36]	; (800a240 <_Bfree+0x3c>)
 800a21c:	4809      	ldr	r0, [pc, #36]	; (800a244 <_Bfree+0x40>)
 800a21e:	218a      	movs	r1, #138	; 0x8a
 800a220:	f000 ff10 	bl	800b044 <__assert_func>
 800a224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a228:	6006      	str	r6, [r0, #0]
 800a22a:	60c6      	str	r6, [r0, #12]
 800a22c:	b13c      	cbz	r4, 800a23e <_Bfree+0x3a>
 800a22e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a230:	6862      	ldr	r2, [r4, #4]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a238:	6021      	str	r1, [r4, #0]
 800a23a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a23e:	bd70      	pop	{r4, r5, r6, pc}
 800a240:	0800d264 	.word	0x0800d264
 800a244:	0800d27b 	.word	0x0800d27b

0800a248 <__multadd>:
 800a248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a24c:	690d      	ldr	r5, [r1, #16]
 800a24e:	4607      	mov	r7, r0
 800a250:	460c      	mov	r4, r1
 800a252:	461e      	mov	r6, r3
 800a254:	f101 0c14 	add.w	ip, r1, #20
 800a258:	2000      	movs	r0, #0
 800a25a:	f8dc 3000 	ldr.w	r3, [ip]
 800a25e:	b299      	uxth	r1, r3
 800a260:	fb02 6101 	mla	r1, r2, r1, r6
 800a264:	0c1e      	lsrs	r6, r3, #16
 800a266:	0c0b      	lsrs	r3, r1, #16
 800a268:	fb02 3306 	mla	r3, r2, r6, r3
 800a26c:	b289      	uxth	r1, r1
 800a26e:	3001      	adds	r0, #1
 800a270:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a274:	4285      	cmp	r5, r0
 800a276:	f84c 1b04 	str.w	r1, [ip], #4
 800a27a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a27e:	dcec      	bgt.n	800a25a <__multadd+0x12>
 800a280:	b30e      	cbz	r6, 800a2c6 <__multadd+0x7e>
 800a282:	68a3      	ldr	r3, [r4, #8]
 800a284:	42ab      	cmp	r3, r5
 800a286:	dc19      	bgt.n	800a2bc <__multadd+0x74>
 800a288:	6861      	ldr	r1, [r4, #4]
 800a28a:	4638      	mov	r0, r7
 800a28c:	3101      	adds	r1, #1
 800a28e:	f7ff ff79 	bl	800a184 <_Balloc>
 800a292:	4680      	mov	r8, r0
 800a294:	b928      	cbnz	r0, 800a2a2 <__multadd+0x5a>
 800a296:	4602      	mov	r2, r0
 800a298:	4b0c      	ldr	r3, [pc, #48]	; (800a2cc <__multadd+0x84>)
 800a29a:	480d      	ldr	r0, [pc, #52]	; (800a2d0 <__multadd+0x88>)
 800a29c:	21b5      	movs	r1, #181	; 0xb5
 800a29e:	f000 fed1 	bl	800b044 <__assert_func>
 800a2a2:	6922      	ldr	r2, [r4, #16]
 800a2a4:	3202      	adds	r2, #2
 800a2a6:	f104 010c 	add.w	r1, r4, #12
 800a2aa:	0092      	lsls	r2, r2, #2
 800a2ac:	300c      	adds	r0, #12
 800a2ae:	f7fe fc57 	bl	8008b60 <memcpy>
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	4638      	mov	r0, r7
 800a2b6:	f7ff ffa5 	bl	800a204 <_Bfree>
 800a2ba:	4644      	mov	r4, r8
 800a2bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2c0:	3501      	adds	r5, #1
 800a2c2:	615e      	str	r6, [r3, #20]
 800a2c4:	6125      	str	r5, [r4, #16]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2cc:	0800d1d8 	.word	0x0800d1d8
 800a2d0:	0800d27b 	.word	0x0800d27b

0800a2d4 <__s2b>:
 800a2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2d8:	460c      	mov	r4, r1
 800a2da:	4615      	mov	r5, r2
 800a2dc:	461f      	mov	r7, r3
 800a2de:	2209      	movs	r2, #9
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	db09      	blt.n	800a304 <__s2b+0x30>
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f7ff ff47 	bl	800a184 <_Balloc>
 800a2f6:	b940      	cbnz	r0, 800a30a <__s2b+0x36>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	4b19      	ldr	r3, [pc, #100]	; (800a360 <__s2b+0x8c>)
 800a2fc:	4819      	ldr	r0, [pc, #100]	; (800a364 <__s2b+0x90>)
 800a2fe:	21ce      	movs	r1, #206	; 0xce
 800a300:	f000 fea0 	bl	800b044 <__assert_func>
 800a304:	0052      	lsls	r2, r2, #1
 800a306:	3101      	adds	r1, #1
 800a308:	e7f0      	b.n	800a2ec <__s2b+0x18>
 800a30a:	9b08      	ldr	r3, [sp, #32]
 800a30c:	6143      	str	r3, [r0, #20]
 800a30e:	2d09      	cmp	r5, #9
 800a310:	f04f 0301 	mov.w	r3, #1
 800a314:	6103      	str	r3, [r0, #16]
 800a316:	dd16      	ble.n	800a346 <__s2b+0x72>
 800a318:	f104 0909 	add.w	r9, r4, #9
 800a31c:	46c8      	mov	r8, r9
 800a31e:	442c      	add	r4, r5
 800a320:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a324:	4601      	mov	r1, r0
 800a326:	3b30      	subs	r3, #48	; 0x30
 800a328:	220a      	movs	r2, #10
 800a32a:	4630      	mov	r0, r6
 800a32c:	f7ff ff8c 	bl	800a248 <__multadd>
 800a330:	45a0      	cmp	r8, r4
 800a332:	d1f5      	bne.n	800a320 <__s2b+0x4c>
 800a334:	f1a5 0408 	sub.w	r4, r5, #8
 800a338:	444c      	add	r4, r9
 800a33a:	1b2d      	subs	r5, r5, r4
 800a33c:	1963      	adds	r3, r4, r5
 800a33e:	42bb      	cmp	r3, r7
 800a340:	db04      	blt.n	800a34c <__s2b+0x78>
 800a342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a346:	340a      	adds	r4, #10
 800a348:	2509      	movs	r5, #9
 800a34a:	e7f6      	b.n	800a33a <__s2b+0x66>
 800a34c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a350:	4601      	mov	r1, r0
 800a352:	3b30      	subs	r3, #48	; 0x30
 800a354:	220a      	movs	r2, #10
 800a356:	4630      	mov	r0, r6
 800a358:	f7ff ff76 	bl	800a248 <__multadd>
 800a35c:	e7ee      	b.n	800a33c <__s2b+0x68>
 800a35e:	bf00      	nop
 800a360:	0800d1d8 	.word	0x0800d1d8
 800a364:	0800d27b 	.word	0x0800d27b

0800a368 <__hi0bits>:
 800a368:	0c03      	lsrs	r3, r0, #16
 800a36a:	041b      	lsls	r3, r3, #16
 800a36c:	b9d3      	cbnz	r3, 800a3a4 <__hi0bits+0x3c>
 800a36e:	0400      	lsls	r0, r0, #16
 800a370:	2310      	movs	r3, #16
 800a372:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a376:	bf04      	itt	eq
 800a378:	0200      	lsleq	r0, r0, #8
 800a37a:	3308      	addeq	r3, #8
 800a37c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a380:	bf04      	itt	eq
 800a382:	0100      	lsleq	r0, r0, #4
 800a384:	3304      	addeq	r3, #4
 800a386:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a38a:	bf04      	itt	eq
 800a38c:	0080      	lsleq	r0, r0, #2
 800a38e:	3302      	addeq	r3, #2
 800a390:	2800      	cmp	r0, #0
 800a392:	db05      	blt.n	800a3a0 <__hi0bits+0x38>
 800a394:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a398:	f103 0301 	add.w	r3, r3, #1
 800a39c:	bf08      	it	eq
 800a39e:	2320      	moveq	r3, #32
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	4770      	bx	lr
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	e7e4      	b.n	800a372 <__hi0bits+0xa>

0800a3a8 <__lo0bits>:
 800a3a8:	6803      	ldr	r3, [r0, #0]
 800a3aa:	f013 0207 	ands.w	r2, r3, #7
 800a3ae:	4601      	mov	r1, r0
 800a3b0:	d00b      	beq.n	800a3ca <__lo0bits+0x22>
 800a3b2:	07da      	lsls	r2, r3, #31
 800a3b4:	d423      	bmi.n	800a3fe <__lo0bits+0x56>
 800a3b6:	0798      	lsls	r0, r3, #30
 800a3b8:	bf49      	itett	mi
 800a3ba:	085b      	lsrmi	r3, r3, #1
 800a3bc:	089b      	lsrpl	r3, r3, #2
 800a3be:	2001      	movmi	r0, #1
 800a3c0:	600b      	strmi	r3, [r1, #0]
 800a3c2:	bf5c      	itt	pl
 800a3c4:	600b      	strpl	r3, [r1, #0]
 800a3c6:	2002      	movpl	r0, #2
 800a3c8:	4770      	bx	lr
 800a3ca:	b298      	uxth	r0, r3
 800a3cc:	b9a8      	cbnz	r0, 800a3fa <__lo0bits+0x52>
 800a3ce:	0c1b      	lsrs	r3, r3, #16
 800a3d0:	2010      	movs	r0, #16
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	b90a      	cbnz	r2, 800a3da <__lo0bits+0x32>
 800a3d6:	3008      	adds	r0, #8
 800a3d8:	0a1b      	lsrs	r3, r3, #8
 800a3da:	071a      	lsls	r2, r3, #28
 800a3dc:	bf04      	itt	eq
 800a3de:	091b      	lsreq	r3, r3, #4
 800a3e0:	3004      	addeq	r0, #4
 800a3e2:	079a      	lsls	r2, r3, #30
 800a3e4:	bf04      	itt	eq
 800a3e6:	089b      	lsreq	r3, r3, #2
 800a3e8:	3002      	addeq	r0, #2
 800a3ea:	07da      	lsls	r2, r3, #31
 800a3ec:	d403      	bmi.n	800a3f6 <__lo0bits+0x4e>
 800a3ee:	085b      	lsrs	r3, r3, #1
 800a3f0:	f100 0001 	add.w	r0, r0, #1
 800a3f4:	d005      	beq.n	800a402 <__lo0bits+0x5a>
 800a3f6:	600b      	str	r3, [r1, #0]
 800a3f8:	4770      	bx	lr
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	e7e9      	b.n	800a3d2 <__lo0bits+0x2a>
 800a3fe:	2000      	movs	r0, #0
 800a400:	4770      	bx	lr
 800a402:	2020      	movs	r0, #32
 800a404:	4770      	bx	lr
	...

0800a408 <__i2b>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	460c      	mov	r4, r1
 800a40c:	2101      	movs	r1, #1
 800a40e:	f7ff feb9 	bl	800a184 <_Balloc>
 800a412:	4602      	mov	r2, r0
 800a414:	b928      	cbnz	r0, 800a422 <__i2b+0x1a>
 800a416:	4b05      	ldr	r3, [pc, #20]	; (800a42c <__i2b+0x24>)
 800a418:	4805      	ldr	r0, [pc, #20]	; (800a430 <__i2b+0x28>)
 800a41a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a41e:	f000 fe11 	bl	800b044 <__assert_func>
 800a422:	2301      	movs	r3, #1
 800a424:	6144      	str	r4, [r0, #20]
 800a426:	6103      	str	r3, [r0, #16]
 800a428:	bd10      	pop	{r4, pc}
 800a42a:	bf00      	nop
 800a42c:	0800d1d8 	.word	0x0800d1d8
 800a430:	0800d27b 	.word	0x0800d27b

0800a434 <__multiply>:
 800a434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	4691      	mov	r9, r2
 800a43a:	690a      	ldr	r2, [r1, #16]
 800a43c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a440:	429a      	cmp	r2, r3
 800a442:	bfb8      	it	lt
 800a444:	460b      	movlt	r3, r1
 800a446:	460c      	mov	r4, r1
 800a448:	bfbc      	itt	lt
 800a44a:	464c      	movlt	r4, r9
 800a44c:	4699      	movlt	r9, r3
 800a44e:	6927      	ldr	r7, [r4, #16]
 800a450:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a454:	68a3      	ldr	r3, [r4, #8]
 800a456:	6861      	ldr	r1, [r4, #4]
 800a458:	eb07 060a 	add.w	r6, r7, sl
 800a45c:	42b3      	cmp	r3, r6
 800a45e:	b085      	sub	sp, #20
 800a460:	bfb8      	it	lt
 800a462:	3101      	addlt	r1, #1
 800a464:	f7ff fe8e 	bl	800a184 <_Balloc>
 800a468:	b930      	cbnz	r0, 800a478 <__multiply+0x44>
 800a46a:	4602      	mov	r2, r0
 800a46c:	4b44      	ldr	r3, [pc, #272]	; (800a580 <__multiply+0x14c>)
 800a46e:	4845      	ldr	r0, [pc, #276]	; (800a584 <__multiply+0x150>)
 800a470:	f240 115d 	movw	r1, #349	; 0x15d
 800a474:	f000 fde6 	bl	800b044 <__assert_func>
 800a478:	f100 0514 	add.w	r5, r0, #20
 800a47c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a480:	462b      	mov	r3, r5
 800a482:	2200      	movs	r2, #0
 800a484:	4543      	cmp	r3, r8
 800a486:	d321      	bcc.n	800a4cc <__multiply+0x98>
 800a488:	f104 0314 	add.w	r3, r4, #20
 800a48c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a490:	f109 0314 	add.w	r3, r9, #20
 800a494:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a498:	9202      	str	r2, [sp, #8]
 800a49a:	1b3a      	subs	r2, r7, r4
 800a49c:	3a15      	subs	r2, #21
 800a49e:	f022 0203 	bic.w	r2, r2, #3
 800a4a2:	3204      	adds	r2, #4
 800a4a4:	f104 0115 	add.w	r1, r4, #21
 800a4a8:	428f      	cmp	r7, r1
 800a4aa:	bf38      	it	cc
 800a4ac:	2204      	movcc	r2, #4
 800a4ae:	9201      	str	r2, [sp, #4]
 800a4b0:	9a02      	ldr	r2, [sp, #8]
 800a4b2:	9303      	str	r3, [sp, #12]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d80c      	bhi.n	800a4d2 <__multiply+0x9e>
 800a4b8:	2e00      	cmp	r6, #0
 800a4ba:	dd03      	ble.n	800a4c4 <__multiply+0x90>
 800a4bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d05a      	beq.n	800a57a <__multiply+0x146>
 800a4c4:	6106      	str	r6, [r0, #16]
 800a4c6:	b005      	add	sp, #20
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4cc:	f843 2b04 	str.w	r2, [r3], #4
 800a4d0:	e7d8      	b.n	800a484 <__multiply+0x50>
 800a4d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4d6:	f1ba 0f00 	cmp.w	sl, #0
 800a4da:	d024      	beq.n	800a526 <__multiply+0xf2>
 800a4dc:	f104 0e14 	add.w	lr, r4, #20
 800a4e0:	46a9      	mov	r9, r5
 800a4e2:	f04f 0c00 	mov.w	ip, #0
 800a4e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a4ea:	f8d9 1000 	ldr.w	r1, [r9]
 800a4ee:	fa1f fb82 	uxth.w	fp, r2
 800a4f2:	b289      	uxth	r1, r1
 800a4f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a4fc:	f8d9 2000 	ldr.w	r2, [r9]
 800a500:	4461      	add	r1, ip
 800a502:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a506:	fb0a c20b 	mla	r2, sl, fp, ip
 800a50a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a50e:	b289      	uxth	r1, r1
 800a510:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a514:	4577      	cmp	r7, lr
 800a516:	f849 1b04 	str.w	r1, [r9], #4
 800a51a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a51e:	d8e2      	bhi.n	800a4e6 <__multiply+0xb2>
 800a520:	9a01      	ldr	r2, [sp, #4]
 800a522:	f845 c002 	str.w	ip, [r5, r2]
 800a526:	9a03      	ldr	r2, [sp, #12]
 800a528:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a52c:	3304      	adds	r3, #4
 800a52e:	f1b9 0f00 	cmp.w	r9, #0
 800a532:	d020      	beq.n	800a576 <__multiply+0x142>
 800a534:	6829      	ldr	r1, [r5, #0]
 800a536:	f104 0c14 	add.w	ip, r4, #20
 800a53a:	46ae      	mov	lr, r5
 800a53c:	f04f 0a00 	mov.w	sl, #0
 800a540:	f8bc b000 	ldrh.w	fp, [ip]
 800a544:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a548:	fb09 220b 	mla	r2, r9, fp, r2
 800a54c:	4492      	add	sl, r2
 800a54e:	b289      	uxth	r1, r1
 800a550:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a554:	f84e 1b04 	str.w	r1, [lr], #4
 800a558:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a55c:	f8be 1000 	ldrh.w	r1, [lr]
 800a560:	0c12      	lsrs	r2, r2, #16
 800a562:	fb09 1102 	mla	r1, r9, r2, r1
 800a566:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a56a:	4567      	cmp	r7, ip
 800a56c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a570:	d8e6      	bhi.n	800a540 <__multiply+0x10c>
 800a572:	9a01      	ldr	r2, [sp, #4]
 800a574:	50a9      	str	r1, [r5, r2]
 800a576:	3504      	adds	r5, #4
 800a578:	e79a      	b.n	800a4b0 <__multiply+0x7c>
 800a57a:	3e01      	subs	r6, #1
 800a57c:	e79c      	b.n	800a4b8 <__multiply+0x84>
 800a57e:	bf00      	nop
 800a580:	0800d1d8 	.word	0x0800d1d8
 800a584:	0800d27b 	.word	0x0800d27b

0800a588 <__pow5mult>:
 800a588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a58c:	4615      	mov	r5, r2
 800a58e:	f012 0203 	ands.w	r2, r2, #3
 800a592:	4606      	mov	r6, r0
 800a594:	460f      	mov	r7, r1
 800a596:	d007      	beq.n	800a5a8 <__pow5mult+0x20>
 800a598:	4c25      	ldr	r4, [pc, #148]	; (800a630 <__pow5mult+0xa8>)
 800a59a:	3a01      	subs	r2, #1
 800a59c:	2300      	movs	r3, #0
 800a59e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5a2:	f7ff fe51 	bl	800a248 <__multadd>
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	10ad      	asrs	r5, r5, #2
 800a5aa:	d03d      	beq.n	800a628 <__pow5mult+0xa0>
 800a5ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a5ae:	b97c      	cbnz	r4, 800a5d0 <__pow5mult+0x48>
 800a5b0:	2010      	movs	r0, #16
 800a5b2:	f001 fbf1 	bl	800bd98 <malloc>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	6270      	str	r0, [r6, #36]	; 0x24
 800a5ba:	b928      	cbnz	r0, 800a5c8 <__pow5mult+0x40>
 800a5bc:	4b1d      	ldr	r3, [pc, #116]	; (800a634 <__pow5mult+0xac>)
 800a5be:	481e      	ldr	r0, [pc, #120]	; (800a638 <__pow5mult+0xb0>)
 800a5c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a5c4:	f000 fd3e 	bl	800b044 <__assert_func>
 800a5c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5cc:	6004      	str	r4, [r0, #0]
 800a5ce:	60c4      	str	r4, [r0, #12]
 800a5d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5d8:	b94c      	cbnz	r4, 800a5ee <__pow5mult+0x66>
 800a5da:	f240 2171 	movw	r1, #625	; 0x271
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f7ff ff12 	bl	800a408 <__i2b>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	6003      	str	r3, [r0, #0]
 800a5ee:	f04f 0900 	mov.w	r9, #0
 800a5f2:	07eb      	lsls	r3, r5, #31
 800a5f4:	d50a      	bpl.n	800a60c <__pow5mult+0x84>
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f7ff ff1a 	bl	800a434 <__multiply>
 800a600:	4639      	mov	r1, r7
 800a602:	4680      	mov	r8, r0
 800a604:	4630      	mov	r0, r6
 800a606:	f7ff fdfd 	bl	800a204 <_Bfree>
 800a60a:	4647      	mov	r7, r8
 800a60c:	106d      	asrs	r5, r5, #1
 800a60e:	d00b      	beq.n	800a628 <__pow5mult+0xa0>
 800a610:	6820      	ldr	r0, [r4, #0]
 800a612:	b938      	cbnz	r0, 800a624 <__pow5mult+0x9c>
 800a614:	4622      	mov	r2, r4
 800a616:	4621      	mov	r1, r4
 800a618:	4630      	mov	r0, r6
 800a61a:	f7ff ff0b 	bl	800a434 <__multiply>
 800a61e:	6020      	str	r0, [r4, #0]
 800a620:	f8c0 9000 	str.w	r9, [r0]
 800a624:	4604      	mov	r4, r0
 800a626:	e7e4      	b.n	800a5f2 <__pow5mult+0x6a>
 800a628:	4638      	mov	r0, r7
 800a62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a62e:	bf00      	nop
 800a630:	0800d3c8 	.word	0x0800d3c8
 800a634:	0800d264 	.word	0x0800d264
 800a638:	0800d27b 	.word	0x0800d27b

0800a63c <__lshift>:
 800a63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a640:	460c      	mov	r4, r1
 800a642:	6849      	ldr	r1, [r1, #4]
 800a644:	6923      	ldr	r3, [r4, #16]
 800a646:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a64a:	68a3      	ldr	r3, [r4, #8]
 800a64c:	4607      	mov	r7, r0
 800a64e:	4691      	mov	r9, r2
 800a650:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a654:	f108 0601 	add.w	r6, r8, #1
 800a658:	42b3      	cmp	r3, r6
 800a65a:	db0b      	blt.n	800a674 <__lshift+0x38>
 800a65c:	4638      	mov	r0, r7
 800a65e:	f7ff fd91 	bl	800a184 <_Balloc>
 800a662:	4605      	mov	r5, r0
 800a664:	b948      	cbnz	r0, 800a67a <__lshift+0x3e>
 800a666:	4602      	mov	r2, r0
 800a668:	4b2a      	ldr	r3, [pc, #168]	; (800a714 <__lshift+0xd8>)
 800a66a:	482b      	ldr	r0, [pc, #172]	; (800a718 <__lshift+0xdc>)
 800a66c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a670:	f000 fce8 	bl	800b044 <__assert_func>
 800a674:	3101      	adds	r1, #1
 800a676:	005b      	lsls	r3, r3, #1
 800a678:	e7ee      	b.n	800a658 <__lshift+0x1c>
 800a67a:	2300      	movs	r3, #0
 800a67c:	f100 0114 	add.w	r1, r0, #20
 800a680:	f100 0210 	add.w	r2, r0, #16
 800a684:	4618      	mov	r0, r3
 800a686:	4553      	cmp	r3, sl
 800a688:	db37      	blt.n	800a6fa <__lshift+0xbe>
 800a68a:	6920      	ldr	r0, [r4, #16]
 800a68c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a690:	f104 0314 	add.w	r3, r4, #20
 800a694:	f019 091f 	ands.w	r9, r9, #31
 800a698:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a69c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a6a0:	d02f      	beq.n	800a702 <__lshift+0xc6>
 800a6a2:	f1c9 0e20 	rsb	lr, r9, #32
 800a6a6:	468a      	mov	sl, r1
 800a6a8:	f04f 0c00 	mov.w	ip, #0
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	fa02 f209 	lsl.w	r2, r2, r9
 800a6b2:	ea42 020c 	orr.w	r2, r2, ip
 800a6b6:	f84a 2b04 	str.w	r2, [sl], #4
 800a6ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6be:	4298      	cmp	r0, r3
 800a6c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a6c4:	d8f2      	bhi.n	800a6ac <__lshift+0x70>
 800a6c6:	1b03      	subs	r3, r0, r4
 800a6c8:	3b15      	subs	r3, #21
 800a6ca:	f023 0303 	bic.w	r3, r3, #3
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	f104 0215 	add.w	r2, r4, #21
 800a6d4:	4290      	cmp	r0, r2
 800a6d6:	bf38      	it	cc
 800a6d8:	2304      	movcc	r3, #4
 800a6da:	f841 c003 	str.w	ip, [r1, r3]
 800a6de:	f1bc 0f00 	cmp.w	ip, #0
 800a6e2:	d001      	beq.n	800a6e8 <__lshift+0xac>
 800a6e4:	f108 0602 	add.w	r6, r8, #2
 800a6e8:	3e01      	subs	r6, #1
 800a6ea:	4638      	mov	r0, r7
 800a6ec:	612e      	str	r6, [r5, #16]
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	f7ff fd88 	bl	800a204 <_Bfree>
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6fe:	3301      	adds	r3, #1
 800a700:	e7c1      	b.n	800a686 <__lshift+0x4a>
 800a702:	3904      	subs	r1, #4
 800a704:	f853 2b04 	ldr.w	r2, [r3], #4
 800a708:	f841 2f04 	str.w	r2, [r1, #4]!
 800a70c:	4298      	cmp	r0, r3
 800a70e:	d8f9      	bhi.n	800a704 <__lshift+0xc8>
 800a710:	e7ea      	b.n	800a6e8 <__lshift+0xac>
 800a712:	bf00      	nop
 800a714:	0800d1d8 	.word	0x0800d1d8
 800a718:	0800d27b 	.word	0x0800d27b

0800a71c <__mcmp>:
 800a71c:	b530      	push	{r4, r5, lr}
 800a71e:	6902      	ldr	r2, [r0, #16]
 800a720:	690c      	ldr	r4, [r1, #16]
 800a722:	1b12      	subs	r2, r2, r4
 800a724:	d10e      	bne.n	800a744 <__mcmp+0x28>
 800a726:	f100 0314 	add.w	r3, r0, #20
 800a72a:	3114      	adds	r1, #20
 800a72c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a730:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a734:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a738:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a73c:	42a5      	cmp	r5, r4
 800a73e:	d003      	beq.n	800a748 <__mcmp+0x2c>
 800a740:	d305      	bcc.n	800a74e <__mcmp+0x32>
 800a742:	2201      	movs	r2, #1
 800a744:	4610      	mov	r0, r2
 800a746:	bd30      	pop	{r4, r5, pc}
 800a748:	4283      	cmp	r3, r0
 800a74a:	d3f3      	bcc.n	800a734 <__mcmp+0x18>
 800a74c:	e7fa      	b.n	800a744 <__mcmp+0x28>
 800a74e:	f04f 32ff 	mov.w	r2, #4294967295
 800a752:	e7f7      	b.n	800a744 <__mcmp+0x28>

0800a754 <__mdiff>:
 800a754:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a758:	460c      	mov	r4, r1
 800a75a:	4606      	mov	r6, r0
 800a75c:	4611      	mov	r1, r2
 800a75e:	4620      	mov	r0, r4
 800a760:	4690      	mov	r8, r2
 800a762:	f7ff ffdb 	bl	800a71c <__mcmp>
 800a766:	1e05      	subs	r5, r0, #0
 800a768:	d110      	bne.n	800a78c <__mdiff+0x38>
 800a76a:	4629      	mov	r1, r5
 800a76c:	4630      	mov	r0, r6
 800a76e:	f7ff fd09 	bl	800a184 <_Balloc>
 800a772:	b930      	cbnz	r0, 800a782 <__mdiff+0x2e>
 800a774:	4b3a      	ldr	r3, [pc, #232]	; (800a860 <__mdiff+0x10c>)
 800a776:	4602      	mov	r2, r0
 800a778:	f240 2132 	movw	r1, #562	; 0x232
 800a77c:	4839      	ldr	r0, [pc, #228]	; (800a864 <__mdiff+0x110>)
 800a77e:	f000 fc61 	bl	800b044 <__assert_func>
 800a782:	2301      	movs	r3, #1
 800a784:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a788:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78c:	bfa4      	itt	ge
 800a78e:	4643      	movge	r3, r8
 800a790:	46a0      	movge	r8, r4
 800a792:	4630      	mov	r0, r6
 800a794:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a798:	bfa6      	itte	ge
 800a79a:	461c      	movge	r4, r3
 800a79c:	2500      	movge	r5, #0
 800a79e:	2501      	movlt	r5, #1
 800a7a0:	f7ff fcf0 	bl	800a184 <_Balloc>
 800a7a4:	b920      	cbnz	r0, 800a7b0 <__mdiff+0x5c>
 800a7a6:	4b2e      	ldr	r3, [pc, #184]	; (800a860 <__mdiff+0x10c>)
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a7ae:	e7e5      	b.n	800a77c <__mdiff+0x28>
 800a7b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7b4:	6926      	ldr	r6, [r4, #16]
 800a7b6:	60c5      	str	r5, [r0, #12]
 800a7b8:	f104 0914 	add.w	r9, r4, #20
 800a7bc:	f108 0514 	add.w	r5, r8, #20
 800a7c0:	f100 0e14 	add.w	lr, r0, #20
 800a7c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a7c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a7cc:	f108 0210 	add.w	r2, r8, #16
 800a7d0:	46f2      	mov	sl, lr
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7dc:	fa1f f883 	uxth.w	r8, r3
 800a7e0:	fa11 f18b 	uxtah	r1, r1, fp
 800a7e4:	0c1b      	lsrs	r3, r3, #16
 800a7e6:	eba1 0808 	sub.w	r8, r1, r8
 800a7ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7f2:	fa1f f888 	uxth.w	r8, r8
 800a7f6:	1419      	asrs	r1, r3, #16
 800a7f8:	454e      	cmp	r6, r9
 800a7fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7fe:	f84a 3b04 	str.w	r3, [sl], #4
 800a802:	d8e7      	bhi.n	800a7d4 <__mdiff+0x80>
 800a804:	1b33      	subs	r3, r6, r4
 800a806:	3b15      	subs	r3, #21
 800a808:	f023 0303 	bic.w	r3, r3, #3
 800a80c:	3304      	adds	r3, #4
 800a80e:	3415      	adds	r4, #21
 800a810:	42a6      	cmp	r6, r4
 800a812:	bf38      	it	cc
 800a814:	2304      	movcc	r3, #4
 800a816:	441d      	add	r5, r3
 800a818:	4473      	add	r3, lr
 800a81a:	469e      	mov	lr, r3
 800a81c:	462e      	mov	r6, r5
 800a81e:	4566      	cmp	r6, ip
 800a820:	d30e      	bcc.n	800a840 <__mdiff+0xec>
 800a822:	f10c 0203 	add.w	r2, ip, #3
 800a826:	1b52      	subs	r2, r2, r5
 800a828:	f022 0203 	bic.w	r2, r2, #3
 800a82c:	3d03      	subs	r5, #3
 800a82e:	45ac      	cmp	ip, r5
 800a830:	bf38      	it	cc
 800a832:	2200      	movcc	r2, #0
 800a834:	441a      	add	r2, r3
 800a836:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a83a:	b17b      	cbz	r3, 800a85c <__mdiff+0x108>
 800a83c:	6107      	str	r7, [r0, #16]
 800a83e:	e7a3      	b.n	800a788 <__mdiff+0x34>
 800a840:	f856 8b04 	ldr.w	r8, [r6], #4
 800a844:	fa11 f288 	uxtah	r2, r1, r8
 800a848:	1414      	asrs	r4, r2, #16
 800a84a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a84e:	b292      	uxth	r2, r2
 800a850:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a854:	f84e 2b04 	str.w	r2, [lr], #4
 800a858:	1421      	asrs	r1, r4, #16
 800a85a:	e7e0      	b.n	800a81e <__mdiff+0xca>
 800a85c:	3f01      	subs	r7, #1
 800a85e:	e7ea      	b.n	800a836 <__mdiff+0xe2>
 800a860:	0800d1d8 	.word	0x0800d1d8
 800a864:	0800d27b 	.word	0x0800d27b

0800a868 <__ulp>:
 800a868:	b082      	sub	sp, #8
 800a86a:	ed8d 0b00 	vstr	d0, [sp]
 800a86e:	9b01      	ldr	r3, [sp, #4]
 800a870:	4912      	ldr	r1, [pc, #72]	; (800a8bc <__ulp+0x54>)
 800a872:	4019      	ands	r1, r3
 800a874:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a878:	2900      	cmp	r1, #0
 800a87a:	dd05      	ble.n	800a888 <__ulp+0x20>
 800a87c:	2200      	movs	r2, #0
 800a87e:	460b      	mov	r3, r1
 800a880:	ec43 2b10 	vmov	d0, r2, r3
 800a884:	b002      	add	sp, #8
 800a886:	4770      	bx	lr
 800a888:	4249      	negs	r1, r1
 800a88a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a88e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a892:	f04f 0200 	mov.w	r2, #0
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	da04      	bge.n	800a8a6 <__ulp+0x3e>
 800a89c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a8a0:	fa41 f300 	asr.w	r3, r1, r0
 800a8a4:	e7ec      	b.n	800a880 <__ulp+0x18>
 800a8a6:	f1a0 0114 	sub.w	r1, r0, #20
 800a8aa:	291e      	cmp	r1, #30
 800a8ac:	bfda      	itte	le
 800a8ae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a8b2:	fa20 f101 	lsrle.w	r1, r0, r1
 800a8b6:	2101      	movgt	r1, #1
 800a8b8:	460a      	mov	r2, r1
 800a8ba:	e7e1      	b.n	800a880 <__ulp+0x18>
 800a8bc:	7ff00000 	.word	0x7ff00000

0800a8c0 <__b2d>:
 800a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c2:	6905      	ldr	r5, [r0, #16]
 800a8c4:	f100 0714 	add.w	r7, r0, #20
 800a8c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a8cc:	1f2e      	subs	r6, r5, #4
 800a8ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f7ff fd48 	bl	800a368 <__hi0bits>
 800a8d8:	f1c0 0320 	rsb	r3, r0, #32
 800a8dc:	280a      	cmp	r0, #10
 800a8de:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a95c <__b2d+0x9c>
 800a8e2:	600b      	str	r3, [r1, #0]
 800a8e4:	dc14      	bgt.n	800a910 <__b2d+0x50>
 800a8e6:	f1c0 0e0b 	rsb	lr, r0, #11
 800a8ea:	fa24 f10e 	lsr.w	r1, r4, lr
 800a8ee:	42b7      	cmp	r7, r6
 800a8f0:	ea41 030c 	orr.w	r3, r1, ip
 800a8f4:	bf34      	ite	cc
 800a8f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a8fa:	2100      	movcs	r1, #0
 800a8fc:	3015      	adds	r0, #21
 800a8fe:	fa04 f000 	lsl.w	r0, r4, r0
 800a902:	fa21 f10e 	lsr.w	r1, r1, lr
 800a906:	ea40 0201 	orr.w	r2, r0, r1
 800a90a:	ec43 2b10 	vmov	d0, r2, r3
 800a90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a910:	42b7      	cmp	r7, r6
 800a912:	bf3a      	itte	cc
 800a914:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a918:	f1a5 0608 	subcc.w	r6, r5, #8
 800a91c:	2100      	movcs	r1, #0
 800a91e:	380b      	subs	r0, #11
 800a920:	d017      	beq.n	800a952 <__b2d+0x92>
 800a922:	f1c0 0c20 	rsb	ip, r0, #32
 800a926:	fa04 f500 	lsl.w	r5, r4, r0
 800a92a:	42be      	cmp	r6, r7
 800a92c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a930:	ea45 0504 	orr.w	r5, r5, r4
 800a934:	bf8c      	ite	hi
 800a936:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a93a:	2400      	movls	r4, #0
 800a93c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a940:	fa01 f000 	lsl.w	r0, r1, r0
 800a944:	fa24 f40c 	lsr.w	r4, r4, ip
 800a948:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a94c:	ea40 0204 	orr.w	r2, r0, r4
 800a950:	e7db      	b.n	800a90a <__b2d+0x4a>
 800a952:	ea44 030c 	orr.w	r3, r4, ip
 800a956:	460a      	mov	r2, r1
 800a958:	e7d7      	b.n	800a90a <__b2d+0x4a>
 800a95a:	bf00      	nop
 800a95c:	3ff00000 	.word	0x3ff00000

0800a960 <__d2b>:
 800a960:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a964:	4689      	mov	r9, r1
 800a966:	2101      	movs	r1, #1
 800a968:	ec57 6b10 	vmov	r6, r7, d0
 800a96c:	4690      	mov	r8, r2
 800a96e:	f7ff fc09 	bl	800a184 <_Balloc>
 800a972:	4604      	mov	r4, r0
 800a974:	b930      	cbnz	r0, 800a984 <__d2b+0x24>
 800a976:	4602      	mov	r2, r0
 800a978:	4b25      	ldr	r3, [pc, #148]	; (800aa10 <__d2b+0xb0>)
 800a97a:	4826      	ldr	r0, [pc, #152]	; (800aa14 <__d2b+0xb4>)
 800a97c:	f240 310a 	movw	r1, #778	; 0x30a
 800a980:	f000 fb60 	bl	800b044 <__assert_func>
 800a984:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a988:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a98c:	bb35      	cbnz	r5, 800a9dc <__d2b+0x7c>
 800a98e:	2e00      	cmp	r6, #0
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	d028      	beq.n	800a9e6 <__d2b+0x86>
 800a994:	4668      	mov	r0, sp
 800a996:	9600      	str	r6, [sp, #0]
 800a998:	f7ff fd06 	bl	800a3a8 <__lo0bits>
 800a99c:	9900      	ldr	r1, [sp, #0]
 800a99e:	b300      	cbz	r0, 800a9e2 <__d2b+0x82>
 800a9a0:	9a01      	ldr	r2, [sp, #4]
 800a9a2:	f1c0 0320 	rsb	r3, r0, #32
 800a9a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	40c2      	lsrs	r2, r0
 800a9ae:	6163      	str	r3, [r4, #20]
 800a9b0:	9201      	str	r2, [sp, #4]
 800a9b2:	9b01      	ldr	r3, [sp, #4]
 800a9b4:	61a3      	str	r3, [r4, #24]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	bf14      	ite	ne
 800a9ba:	2202      	movne	r2, #2
 800a9bc:	2201      	moveq	r2, #1
 800a9be:	6122      	str	r2, [r4, #16]
 800a9c0:	b1d5      	cbz	r5, 800a9f8 <__d2b+0x98>
 800a9c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a9c6:	4405      	add	r5, r0
 800a9c8:	f8c9 5000 	str.w	r5, [r9]
 800a9cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9d0:	f8c8 0000 	str.w	r0, [r8]
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	b003      	add	sp, #12
 800a9d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9e0:	e7d5      	b.n	800a98e <__d2b+0x2e>
 800a9e2:	6161      	str	r1, [r4, #20]
 800a9e4:	e7e5      	b.n	800a9b2 <__d2b+0x52>
 800a9e6:	a801      	add	r0, sp, #4
 800a9e8:	f7ff fcde 	bl	800a3a8 <__lo0bits>
 800a9ec:	9b01      	ldr	r3, [sp, #4]
 800a9ee:	6163      	str	r3, [r4, #20]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	6122      	str	r2, [r4, #16]
 800a9f4:	3020      	adds	r0, #32
 800a9f6:	e7e3      	b.n	800a9c0 <__d2b+0x60>
 800a9f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa00:	f8c9 0000 	str.w	r0, [r9]
 800aa04:	6918      	ldr	r0, [r3, #16]
 800aa06:	f7ff fcaf 	bl	800a368 <__hi0bits>
 800aa0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa0e:	e7df      	b.n	800a9d0 <__d2b+0x70>
 800aa10:	0800d1d8 	.word	0x0800d1d8
 800aa14:	0800d27b 	.word	0x0800d27b

0800aa18 <__ratio>:
 800aa18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	4688      	mov	r8, r1
 800aa1e:	4669      	mov	r1, sp
 800aa20:	4681      	mov	r9, r0
 800aa22:	f7ff ff4d 	bl	800a8c0 <__b2d>
 800aa26:	a901      	add	r1, sp, #4
 800aa28:	4640      	mov	r0, r8
 800aa2a:	ec55 4b10 	vmov	r4, r5, d0
 800aa2e:	f7ff ff47 	bl	800a8c0 <__b2d>
 800aa32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa3a:	eba3 0c02 	sub.w	ip, r3, r2
 800aa3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa42:	1a9b      	subs	r3, r3, r2
 800aa44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aa48:	ec51 0b10 	vmov	r0, r1, d0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bfd6      	itet	le
 800aa50:	460a      	movle	r2, r1
 800aa52:	462a      	movgt	r2, r5
 800aa54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa58:	468b      	mov	fp, r1
 800aa5a:	462f      	mov	r7, r5
 800aa5c:	bfd4      	ite	le
 800aa5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aa62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa66:	4620      	mov	r0, r4
 800aa68:	ee10 2a10 	vmov	r2, s0
 800aa6c:	465b      	mov	r3, fp
 800aa6e:	4639      	mov	r1, r7
 800aa70:	f7f5 ff0c 	bl	800088c <__aeabi_ddiv>
 800aa74:	ec41 0b10 	vmov	d0, r0, r1
 800aa78:	b003      	add	sp, #12
 800aa7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800aa80 <_mprec_log10>:
 800aa80:	2817      	cmp	r0, #23
 800aa82:	b5d0      	push	{r4, r6, r7, lr}
 800aa84:	4604      	mov	r4, r0
 800aa86:	dc07      	bgt.n	800aa98 <_mprec_log10+0x18>
 800aa88:	4809      	ldr	r0, [pc, #36]	; (800aab0 <_mprec_log10+0x30>)
 800aa8a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800aa8e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aa92:	ec41 0b10 	vmov	d0, r0, r1
 800aa96:	bdd0      	pop	{r4, r6, r7, pc}
 800aa98:	4906      	ldr	r1, [pc, #24]	; (800aab4 <_mprec_log10+0x34>)
 800aa9a:	4f07      	ldr	r7, [pc, #28]	; (800aab8 <_mprec_log10+0x38>)
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	2600      	movs	r6, #0
 800aaa0:	4632      	mov	r2, r6
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	f7f5 fdc8 	bl	8000638 <__aeabi_dmul>
 800aaa8:	3c01      	subs	r4, #1
 800aaaa:	d1f9      	bne.n	800aaa0 <_mprec_log10+0x20>
 800aaac:	e7f1      	b.n	800aa92 <_mprec_log10+0x12>
 800aaae:	bf00      	nop
 800aab0:	0800d300 	.word	0x0800d300
 800aab4:	3ff00000 	.word	0x3ff00000
 800aab8:	40240000 	.word	0x40240000

0800aabc <__copybits>:
 800aabc:	3901      	subs	r1, #1
 800aabe:	b570      	push	{r4, r5, r6, lr}
 800aac0:	1149      	asrs	r1, r1, #5
 800aac2:	6914      	ldr	r4, [r2, #16]
 800aac4:	3101      	adds	r1, #1
 800aac6:	f102 0314 	add.w	r3, r2, #20
 800aaca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aace:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aad2:	1f05      	subs	r5, r0, #4
 800aad4:	42a3      	cmp	r3, r4
 800aad6:	d30c      	bcc.n	800aaf2 <__copybits+0x36>
 800aad8:	1aa3      	subs	r3, r4, r2
 800aada:	3b11      	subs	r3, #17
 800aadc:	f023 0303 	bic.w	r3, r3, #3
 800aae0:	3211      	adds	r2, #17
 800aae2:	42a2      	cmp	r2, r4
 800aae4:	bf88      	it	hi
 800aae6:	2300      	movhi	r3, #0
 800aae8:	4418      	add	r0, r3
 800aaea:	2300      	movs	r3, #0
 800aaec:	4288      	cmp	r0, r1
 800aaee:	d305      	bcc.n	800aafc <__copybits+0x40>
 800aaf0:	bd70      	pop	{r4, r5, r6, pc}
 800aaf2:	f853 6b04 	ldr.w	r6, [r3], #4
 800aaf6:	f845 6f04 	str.w	r6, [r5, #4]!
 800aafa:	e7eb      	b.n	800aad4 <__copybits+0x18>
 800aafc:	f840 3b04 	str.w	r3, [r0], #4
 800ab00:	e7f4      	b.n	800aaec <__copybits+0x30>

0800ab02 <__any_on>:
 800ab02:	f100 0214 	add.w	r2, r0, #20
 800ab06:	6900      	ldr	r0, [r0, #16]
 800ab08:	114b      	asrs	r3, r1, #5
 800ab0a:	4298      	cmp	r0, r3
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	db11      	blt.n	800ab34 <__any_on+0x32>
 800ab10:	dd0a      	ble.n	800ab28 <__any_on+0x26>
 800ab12:	f011 011f 	ands.w	r1, r1, #31
 800ab16:	d007      	beq.n	800ab28 <__any_on+0x26>
 800ab18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab1c:	fa24 f001 	lsr.w	r0, r4, r1
 800ab20:	fa00 f101 	lsl.w	r1, r0, r1
 800ab24:	428c      	cmp	r4, r1
 800ab26:	d10b      	bne.n	800ab40 <__any_on+0x3e>
 800ab28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d803      	bhi.n	800ab38 <__any_on+0x36>
 800ab30:	2000      	movs	r0, #0
 800ab32:	bd10      	pop	{r4, pc}
 800ab34:	4603      	mov	r3, r0
 800ab36:	e7f7      	b.n	800ab28 <__any_on+0x26>
 800ab38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab3c:	2900      	cmp	r1, #0
 800ab3e:	d0f5      	beq.n	800ab2c <__any_on+0x2a>
 800ab40:	2001      	movs	r0, #1
 800ab42:	e7f6      	b.n	800ab32 <__any_on+0x30>

0800ab44 <_calloc_r>:
 800ab44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab46:	fba1 2402 	umull	r2, r4, r1, r2
 800ab4a:	b94c      	cbnz	r4, 800ab60 <_calloc_r+0x1c>
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	9201      	str	r2, [sp, #4]
 800ab50:	f000 f82e 	bl	800abb0 <_malloc_r>
 800ab54:	9a01      	ldr	r2, [sp, #4]
 800ab56:	4605      	mov	r5, r0
 800ab58:	b930      	cbnz	r0, 800ab68 <_calloc_r+0x24>
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	b003      	add	sp, #12
 800ab5e:	bd30      	pop	{r4, r5, pc}
 800ab60:	220c      	movs	r2, #12
 800ab62:	6002      	str	r2, [r0, #0]
 800ab64:	2500      	movs	r5, #0
 800ab66:	e7f8      	b.n	800ab5a <_calloc_r+0x16>
 800ab68:	4621      	mov	r1, r4
 800ab6a:	f7fe f807 	bl	8008b7c <memset>
 800ab6e:	e7f4      	b.n	800ab5a <_calloc_r+0x16>

0800ab70 <sbrk_aligned>:
 800ab70:	b570      	push	{r4, r5, r6, lr}
 800ab72:	4e0e      	ldr	r6, [pc, #56]	; (800abac <sbrk_aligned+0x3c>)
 800ab74:	460c      	mov	r4, r1
 800ab76:	6831      	ldr	r1, [r6, #0]
 800ab78:	4605      	mov	r5, r0
 800ab7a:	b911      	cbnz	r1, 800ab82 <sbrk_aligned+0x12>
 800ab7c:	f000 fa28 	bl	800afd0 <_sbrk_r>
 800ab80:	6030      	str	r0, [r6, #0]
 800ab82:	4621      	mov	r1, r4
 800ab84:	4628      	mov	r0, r5
 800ab86:	f000 fa23 	bl	800afd0 <_sbrk_r>
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	d00a      	beq.n	800aba4 <sbrk_aligned+0x34>
 800ab8e:	1cc4      	adds	r4, r0, #3
 800ab90:	f024 0403 	bic.w	r4, r4, #3
 800ab94:	42a0      	cmp	r0, r4
 800ab96:	d007      	beq.n	800aba8 <sbrk_aligned+0x38>
 800ab98:	1a21      	subs	r1, r4, r0
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f000 fa18 	bl	800afd0 <_sbrk_r>
 800aba0:	3001      	adds	r0, #1
 800aba2:	d101      	bne.n	800aba8 <sbrk_aligned+0x38>
 800aba4:	f04f 34ff 	mov.w	r4, #4294967295
 800aba8:	4620      	mov	r0, r4
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	20000958 	.word	0x20000958

0800abb0 <_malloc_r>:
 800abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb4:	1ccd      	adds	r5, r1, #3
 800abb6:	f025 0503 	bic.w	r5, r5, #3
 800abba:	3508      	adds	r5, #8
 800abbc:	2d0c      	cmp	r5, #12
 800abbe:	bf38      	it	cc
 800abc0:	250c      	movcc	r5, #12
 800abc2:	2d00      	cmp	r5, #0
 800abc4:	4607      	mov	r7, r0
 800abc6:	db01      	blt.n	800abcc <_malloc_r+0x1c>
 800abc8:	42a9      	cmp	r1, r5
 800abca:	d905      	bls.n	800abd8 <_malloc_r+0x28>
 800abcc:	230c      	movs	r3, #12
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	2600      	movs	r6, #0
 800abd2:	4630      	mov	r0, r6
 800abd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd8:	4e2e      	ldr	r6, [pc, #184]	; (800ac94 <_malloc_r+0xe4>)
 800abda:	f001 f8e5 	bl	800bda8 <__malloc_lock>
 800abde:	6833      	ldr	r3, [r6, #0]
 800abe0:	461c      	mov	r4, r3
 800abe2:	bb34      	cbnz	r4, 800ac32 <_malloc_r+0x82>
 800abe4:	4629      	mov	r1, r5
 800abe6:	4638      	mov	r0, r7
 800abe8:	f7ff ffc2 	bl	800ab70 <sbrk_aligned>
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	4604      	mov	r4, r0
 800abf0:	d14d      	bne.n	800ac8e <_malloc_r+0xde>
 800abf2:	6834      	ldr	r4, [r6, #0]
 800abf4:	4626      	mov	r6, r4
 800abf6:	2e00      	cmp	r6, #0
 800abf8:	d140      	bne.n	800ac7c <_malloc_r+0xcc>
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	4631      	mov	r1, r6
 800abfe:	4638      	mov	r0, r7
 800ac00:	eb04 0803 	add.w	r8, r4, r3
 800ac04:	f000 f9e4 	bl	800afd0 <_sbrk_r>
 800ac08:	4580      	cmp	r8, r0
 800ac0a:	d13a      	bne.n	800ac82 <_malloc_r+0xd2>
 800ac0c:	6821      	ldr	r1, [r4, #0]
 800ac0e:	3503      	adds	r5, #3
 800ac10:	1a6d      	subs	r5, r5, r1
 800ac12:	f025 0503 	bic.w	r5, r5, #3
 800ac16:	3508      	adds	r5, #8
 800ac18:	2d0c      	cmp	r5, #12
 800ac1a:	bf38      	it	cc
 800ac1c:	250c      	movcc	r5, #12
 800ac1e:	4629      	mov	r1, r5
 800ac20:	4638      	mov	r0, r7
 800ac22:	f7ff ffa5 	bl	800ab70 <sbrk_aligned>
 800ac26:	3001      	adds	r0, #1
 800ac28:	d02b      	beq.n	800ac82 <_malloc_r+0xd2>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	442b      	add	r3, r5
 800ac2e:	6023      	str	r3, [r4, #0]
 800ac30:	e00e      	b.n	800ac50 <_malloc_r+0xa0>
 800ac32:	6822      	ldr	r2, [r4, #0]
 800ac34:	1b52      	subs	r2, r2, r5
 800ac36:	d41e      	bmi.n	800ac76 <_malloc_r+0xc6>
 800ac38:	2a0b      	cmp	r2, #11
 800ac3a:	d916      	bls.n	800ac6a <_malloc_r+0xba>
 800ac3c:	1961      	adds	r1, r4, r5
 800ac3e:	42a3      	cmp	r3, r4
 800ac40:	6025      	str	r5, [r4, #0]
 800ac42:	bf18      	it	ne
 800ac44:	6059      	strne	r1, [r3, #4]
 800ac46:	6863      	ldr	r3, [r4, #4]
 800ac48:	bf08      	it	eq
 800ac4a:	6031      	streq	r1, [r6, #0]
 800ac4c:	5162      	str	r2, [r4, r5]
 800ac4e:	604b      	str	r3, [r1, #4]
 800ac50:	4638      	mov	r0, r7
 800ac52:	f104 060b 	add.w	r6, r4, #11
 800ac56:	f001 f8ad 	bl	800bdb4 <__malloc_unlock>
 800ac5a:	f026 0607 	bic.w	r6, r6, #7
 800ac5e:	1d23      	adds	r3, r4, #4
 800ac60:	1af2      	subs	r2, r6, r3
 800ac62:	d0b6      	beq.n	800abd2 <_malloc_r+0x22>
 800ac64:	1b9b      	subs	r3, r3, r6
 800ac66:	50a3      	str	r3, [r4, r2]
 800ac68:	e7b3      	b.n	800abd2 <_malloc_r+0x22>
 800ac6a:	6862      	ldr	r2, [r4, #4]
 800ac6c:	42a3      	cmp	r3, r4
 800ac6e:	bf0c      	ite	eq
 800ac70:	6032      	streq	r2, [r6, #0]
 800ac72:	605a      	strne	r2, [r3, #4]
 800ac74:	e7ec      	b.n	800ac50 <_malloc_r+0xa0>
 800ac76:	4623      	mov	r3, r4
 800ac78:	6864      	ldr	r4, [r4, #4]
 800ac7a:	e7b2      	b.n	800abe2 <_malloc_r+0x32>
 800ac7c:	4634      	mov	r4, r6
 800ac7e:	6876      	ldr	r6, [r6, #4]
 800ac80:	e7b9      	b.n	800abf6 <_malloc_r+0x46>
 800ac82:	230c      	movs	r3, #12
 800ac84:	603b      	str	r3, [r7, #0]
 800ac86:	4638      	mov	r0, r7
 800ac88:	f001 f894 	bl	800bdb4 <__malloc_unlock>
 800ac8c:	e7a1      	b.n	800abd2 <_malloc_r+0x22>
 800ac8e:	6025      	str	r5, [r4, #0]
 800ac90:	e7de      	b.n	800ac50 <_malloc_r+0xa0>
 800ac92:	bf00      	nop
 800ac94:	20000954 	.word	0x20000954

0800ac98 <_printf_common>:
 800ac98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac9c:	4616      	mov	r6, r2
 800ac9e:	4699      	mov	r9, r3
 800aca0:	688a      	ldr	r2, [r1, #8]
 800aca2:	690b      	ldr	r3, [r1, #16]
 800aca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aca8:	4293      	cmp	r3, r2
 800acaa:	bfb8      	it	lt
 800acac:	4613      	movlt	r3, r2
 800acae:	6033      	str	r3, [r6, #0]
 800acb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acb4:	4607      	mov	r7, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	b10a      	cbz	r2, 800acbe <_printf_common+0x26>
 800acba:	3301      	adds	r3, #1
 800acbc:	6033      	str	r3, [r6, #0]
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	0699      	lsls	r1, r3, #26
 800acc2:	bf42      	ittt	mi
 800acc4:	6833      	ldrmi	r3, [r6, #0]
 800acc6:	3302      	addmi	r3, #2
 800acc8:	6033      	strmi	r3, [r6, #0]
 800acca:	6825      	ldr	r5, [r4, #0]
 800accc:	f015 0506 	ands.w	r5, r5, #6
 800acd0:	d106      	bne.n	800ace0 <_printf_common+0x48>
 800acd2:	f104 0a19 	add.w	sl, r4, #25
 800acd6:	68e3      	ldr	r3, [r4, #12]
 800acd8:	6832      	ldr	r2, [r6, #0]
 800acda:	1a9b      	subs	r3, r3, r2
 800acdc:	42ab      	cmp	r3, r5
 800acde:	dc26      	bgt.n	800ad2e <_printf_common+0x96>
 800ace0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ace4:	1e13      	subs	r3, r2, #0
 800ace6:	6822      	ldr	r2, [r4, #0]
 800ace8:	bf18      	it	ne
 800acea:	2301      	movne	r3, #1
 800acec:	0692      	lsls	r2, r2, #26
 800acee:	d42b      	bmi.n	800ad48 <_printf_common+0xb0>
 800acf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acf4:	4649      	mov	r1, r9
 800acf6:	4638      	mov	r0, r7
 800acf8:	47c0      	blx	r8
 800acfa:	3001      	adds	r0, #1
 800acfc:	d01e      	beq.n	800ad3c <_printf_common+0xa4>
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	68e5      	ldr	r5, [r4, #12]
 800ad02:	6832      	ldr	r2, [r6, #0]
 800ad04:	f003 0306 	and.w	r3, r3, #6
 800ad08:	2b04      	cmp	r3, #4
 800ad0a:	bf08      	it	eq
 800ad0c:	1aad      	subeq	r5, r5, r2
 800ad0e:	68a3      	ldr	r3, [r4, #8]
 800ad10:	6922      	ldr	r2, [r4, #16]
 800ad12:	bf0c      	ite	eq
 800ad14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad18:	2500      	movne	r5, #0
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	bfc4      	itt	gt
 800ad1e:	1a9b      	subgt	r3, r3, r2
 800ad20:	18ed      	addgt	r5, r5, r3
 800ad22:	2600      	movs	r6, #0
 800ad24:	341a      	adds	r4, #26
 800ad26:	42b5      	cmp	r5, r6
 800ad28:	d11a      	bne.n	800ad60 <_printf_common+0xc8>
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	e008      	b.n	800ad40 <_printf_common+0xa8>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	4652      	mov	r2, sl
 800ad32:	4649      	mov	r1, r9
 800ad34:	4638      	mov	r0, r7
 800ad36:	47c0      	blx	r8
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d103      	bne.n	800ad44 <_printf_common+0xac>
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad44:	3501      	adds	r5, #1
 800ad46:	e7c6      	b.n	800acd6 <_printf_common+0x3e>
 800ad48:	18e1      	adds	r1, r4, r3
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	2030      	movs	r0, #48	; 0x30
 800ad4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad52:	4422      	add	r2, r4
 800ad54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad5c:	3302      	adds	r3, #2
 800ad5e:	e7c7      	b.n	800acf0 <_printf_common+0x58>
 800ad60:	2301      	movs	r3, #1
 800ad62:	4622      	mov	r2, r4
 800ad64:	4649      	mov	r1, r9
 800ad66:	4638      	mov	r0, r7
 800ad68:	47c0      	blx	r8
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	d0e6      	beq.n	800ad3c <_printf_common+0xa4>
 800ad6e:	3601      	adds	r6, #1
 800ad70:	e7d9      	b.n	800ad26 <_printf_common+0x8e>
	...

0800ad74 <_printf_i>:
 800ad74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad78:	7e0f      	ldrb	r7, [r1, #24]
 800ad7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad7c:	2f78      	cmp	r7, #120	; 0x78
 800ad7e:	4691      	mov	r9, r2
 800ad80:	4680      	mov	r8, r0
 800ad82:	460c      	mov	r4, r1
 800ad84:	469a      	mov	sl, r3
 800ad86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad8a:	d807      	bhi.n	800ad9c <_printf_i+0x28>
 800ad8c:	2f62      	cmp	r7, #98	; 0x62
 800ad8e:	d80a      	bhi.n	800ada6 <_printf_i+0x32>
 800ad90:	2f00      	cmp	r7, #0
 800ad92:	f000 80d8 	beq.w	800af46 <_printf_i+0x1d2>
 800ad96:	2f58      	cmp	r7, #88	; 0x58
 800ad98:	f000 80a3 	beq.w	800aee2 <_printf_i+0x16e>
 800ad9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ada0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ada4:	e03a      	b.n	800ae1c <_printf_i+0xa8>
 800ada6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adaa:	2b15      	cmp	r3, #21
 800adac:	d8f6      	bhi.n	800ad9c <_printf_i+0x28>
 800adae:	a101      	add	r1, pc, #4	; (adr r1, 800adb4 <_printf_i+0x40>)
 800adb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adb4:	0800ae0d 	.word	0x0800ae0d
 800adb8:	0800ae21 	.word	0x0800ae21
 800adbc:	0800ad9d 	.word	0x0800ad9d
 800adc0:	0800ad9d 	.word	0x0800ad9d
 800adc4:	0800ad9d 	.word	0x0800ad9d
 800adc8:	0800ad9d 	.word	0x0800ad9d
 800adcc:	0800ae21 	.word	0x0800ae21
 800add0:	0800ad9d 	.word	0x0800ad9d
 800add4:	0800ad9d 	.word	0x0800ad9d
 800add8:	0800ad9d 	.word	0x0800ad9d
 800addc:	0800ad9d 	.word	0x0800ad9d
 800ade0:	0800af2d 	.word	0x0800af2d
 800ade4:	0800ae51 	.word	0x0800ae51
 800ade8:	0800af0f 	.word	0x0800af0f
 800adec:	0800ad9d 	.word	0x0800ad9d
 800adf0:	0800ad9d 	.word	0x0800ad9d
 800adf4:	0800af4f 	.word	0x0800af4f
 800adf8:	0800ad9d 	.word	0x0800ad9d
 800adfc:	0800ae51 	.word	0x0800ae51
 800ae00:	0800ad9d 	.word	0x0800ad9d
 800ae04:	0800ad9d 	.word	0x0800ad9d
 800ae08:	0800af17 	.word	0x0800af17
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	1d1a      	adds	r2, r3, #4
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	602a      	str	r2, [r5, #0]
 800ae14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e0a3      	b.n	800af68 <_printf_i+0x1f4>
 800ae20:	6820      	ldr	r0, [r4, #0]
 800ae22:	6829      	ldr	r1, [r5, #0]
 800ae24:	0606      	lsls	r6, r0, #24
 800ae26:	f101 0304 	add.w	r3, r1, #4
 800ae2a:	d50a      	bpl.n	800ae42 <_printf_i+0xce>
 800ae2c:	680e      	ldr	r6, [r1, #0]
 800ae2e:	602b      	str	r3, [r5, #0]
 800ae30:	2e00      	cmp	r6, #0
 800ae32:	da03      	bge.n	800ae3c <_printf_i+0xc8>
 800ae34:	232d      	movs	r3, #45	; 0x2d
 800ae36:	4276      	negs	r6, r6
 800ae38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae3c:	485e      	ldr	r0, [pc, #376]	; (800afb8 <_printf_i+0x244>)
 800ae3e:	230a      	movs	r3, #10
 800ae40:	e019      	b.n	800ae76 <_printf_i+0x102>
 800ae42:	680e      	ldr	r6, [r1, #0]
 800ae44:	602b      	str	r3, [r5, #0]
 800ae46:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae4a:	bf18      	it	ne
 800ae4c:	b236      	sxthne	r6, r6
 800ae4e:	e7ef      	b.n	800ae30 <_printf_i+0xbc>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	6820      	ldr	r0, [r4, #0]
 800ae54:	1d19      	adds	r1, r3, #4
 800ae56:	6029      	str	r1, [r5, #0]
 800ae58:	0601      	lsls	r1, r0, #24
 800ae5a:	d501      	bpl.n	800ae60 <_printf_i+0xec>
 800ae5c:	681e      	ldr	r6, [r3, #0]
 800ae5e:	e002      	b.n	800ae66 <_printf_i+0xf2>
 800ae60:	0646      	lsls	r6, r0, #25
 800ae62:	d5fb      	bpl.n	800ae5c <_printf_i+0xe8>
 800ae64:	881e      	ldrh	r6, [r3, #0]
 800ae66:	4854      	ldr	r0, [pc, #336]	; (800afb8 <_printf_i+0x244>)
 800ae68:	2f6f      	cmp	r7, #111	; 0x6f
 800ae6a:	bf0c      	ite	eq
 800ae6c:	2308      	moveq	r3, #8
 800ae6e:	230a      	movne	r3, #10
 800ae70:	2100      	movs	r1, #0
 800ae72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae76:	6865      	ldr	r5, [r4, #4]
 800ae78:	60a5      	str	r5, [r4, #8]
 800ae7a:	2d00      	cmp	r5, #0
 800ae7c:	bfa2      	ittt	ge
 800ae7e:	6821      	ldrge	r1, [r4, #0]
 800ae80:	f021 0104 	bicge.w	r1, r1, #4
 800ae84:	6021      	strge	r1, [r4, #0]
 800ae86:	b90e      	cbnz	r6, 800ae8c <_printf_i+0x118>
 800ae88:	2d00      	cmp	r5, #0
 800ae8a:	d04d      	beq.n	800af28 <_printf_i+0x1b4>
 800ae8c:	4615      	mov	r5, r2
 800ae8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae92:	fb03 6711 	mls	r7, r3, r1, r6
 800ae96:	5dc7      	ldrb	r7, [r0, r7]
 800ae98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae9c:	4637      	mov	r7, r6
 800ae9e:	42bb      	cmp	r3, r7
 800aea0:	460e      	mov	r6, r1
 800aea2:	d9f4      	bls.n	800ae8e <_printf_i+0x11a>
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d10b      	bne.n	800aec0 <_printf_i+0x14c>
 800aea8:	6823      	ldr	r3, [r4, #0]
 800aeaa:	07de      	lsls	r6, r3, #31
 800aeac:	d508      	bpl.n	800aec0 <_printf_i+0x14c>
 800aeae:	6923      	ldr	r3, [r4, #16]
 800aeb0:	6861      	ldr	r1, [r4, #4]
 800aeb2:	4299      	cmp	r1, r3
 800aeb4:	bfde      	ittt	le
 800aeb6:	2330      	movle	r3, #48	; 0x30
 800aeb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aec0:	1b52      	subs	r2, r2, r5
 800aec2:	6122      	str	r2, [r4, #16]
 800aec4:	f8cd a000 	str.w	sl, [sp]
 800aec8:	464b      	mov	r3, r9
 800aeca:	aa03      	add	r2, sp, #12
 800aecc:	4621      	mov	r1, r4
 800aece:	4640      	mov	r0, r8
 800aed0:	f7ff fee2 	bl	800ac98 <_printf_common>
 800aed4:	3001      	adds	r0, #1
 800aed6:	d14c      	bne.n	800af72 <_printf_i+0x1fe>
 800aed8:	f04f 30ff 	mov.w	r0, #4294967295
 800aedc:	b004      	add	sp, #16
 800aede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee2:	4835      	ldr	r0, [pc, #212]	; (800afb8 <_printf_i+0x244>)
 800aee4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aee8:	6829      	ldr	r1, [r5, #0]
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	f851 6b04 	ldr.w	r6, [r1], #4
 800aef0:	6029      	str	r1, [r5, #0]
 800aef2:	061d      	lsls	r5, r3, #24
 800aef4:	d514      	bpl.n	800af20 <_printf_i+0x1ac>
 800aef6:	07df      	lsls	r7, r3, #31
 800aef8:	bf44      	itt	mi
 800aefa:	f043 0320 	orrmi.w	r3, r3, #32
 800aefe:	6023      	strmi	r3, [r4, #0]
 800af00:	b91e      	cbnz	r6, 800af0a <_printf_i+0x196>
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	f023 0320 	bic.w	r3, r3, #32
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	2310      	movs	r3, #16
 800af0c:	e7b0      	b.n	800ae70 <_printf_i+0xfc>
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	f043 0320 	orr.w	r3, r3, #32
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	2378      	movs	r3, #120	; 0x78
 800af18:	4828      	ldr	r0, [pc, #160]	; (800afbc <_printf_i+0x248>)
 800af1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af1e:	e7e3      	b.n	800aee8 <_printf_i+0x174>
 800af20:	0659      	lsls	r1, r3, #25
 800af22:	bf48      	it	mi
 800af24:	b2b6      	uxthmi	r6, r6
 800af26:	e7e6      	b.n	800aef6 <_printf_i+0x182>
 800af28:	4615      	mov	r5, r2
 800af2a:	e7bb      	b.n	800aea4 <_printf_i+0x130>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	6826      	ldr	r6, [r4, #0]
 800af30:	6961      	ldr	r1, [r4, #20]
 800af32:	1d18      	adds	r0, r3, #4
 800af34:	6028      	str	r0, [r5, #0]
 800af36:	0635      	lsls	r5, r6, #24
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	d501      	bpl.n	800af40 <_printf_i+0x1cc>
 800af3c:	6019      	str	r1, [r3, #0]
 800af3e:	e002      	b.n	800af46 <_printf_i+0x1d2>
 800af40:	0670      	lsls	r0, r6, #25
 800af42:	d5fb      	bpl.n	800af3c <_printf_i+0x1c8>
 800af44:	8019      	strh	r1, [r3, #0]
 800af46:	2300      	movs	r3, #0
 800af48:	6123      	str	r3, [r4, #16]
 800af4a:	4615      	mov	r5, r2
 800af4c:	e7ba      	b.n	800aec4 <_printf_i+0x150>
 800af4e:	682b      	ldr	r3, [r5, #0]
 800af50:	1d1a      	adds	r2, r3, #4
 800af52:	602a      	str	r2, [r5, #0]
 800af54:	681d      	ldr	r5, [r3, #0]
 800af56:	6862      	ldr	r2, [r4, #4]
 800af58:	2100      	movs	r1, #0
 800af5a:	4628      	mov	r0, r5
 800af5c:	f7f5 f960 	bl	8000220 <memchr>
 800af60:	b108      	cbz	r0, 800af66 <_printf_i+0x1f2>
 800af62:	1b40      	subs	r0, r0, r5
 800af64:	6060      	str	r0, [r4, #4]
 800af66:	6863      	ldr	r3, [r4, #4]
 800af68:	6123      	str	r3, [r4, #16]
 800af6a:	2300      	movs	r3, #0
 800af6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af70:	e7a8      	b.n	800aec4 <_printf_i+0x150>
 800af72:	6923      	ldr	r3, [r4, #16]
 800af74:	462a      	mov	r2, r5
 800af76:	4649      	mov	r1, r9
 800af78:	4640      	mov	r0, r8
 800af7a:	47d0      	blx	sl
 800af7c:	3001      	adds	r0, #1
 800af7e:	d0ab      	beq.n	800aed8 <_printf_i+0x164>
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	079b      	lsls	r3, r3, #30
 800af84:	d413      	bmi.n	800afae <_printf_i+0x23a>
 800af86:	68e0      	ldr	r0, [r4, #12]
 800af88:	9b03      	ldr	r3, [sp, #12]
 800af8a:	4298      	cmp	r0, r3
 800af8c:	bfb8      	it	lt
 800af8e:	4618      	movlt	r0, r3
 800af90:	e7a4      	b.n	800aedc <_printf_i+0x168>
 800af92:	2301      	movs	r3, #1
 800af94:	4632      	mov	r2, r6
 800af96:	4649      	mov	r1, r9
 800af98:	4640      	mov	r0, r8
 800af9a:	47d0      	blx	sl
 800af9c:	3001      	adds	r0, #1
 800af9e:	d09b      	beq.n	800aed8 <_printf_i+0x164>
 800afa0:	3501      	adds	r5, #1
 800afa2:	68e3      	ldr	r3, [r4, #12]
 800afa4:	9903      	ldr	r1, [sp, #12]
 800afa6:	1a5b      	subs	r3, r3, r1
 800afa8:	42ab      	cmp	r3, r5
 800afaa:	dcf2      	bgt.n	800af92 <_printf_i+0x21e>
 800afac:	e7eb      	b.n	800af86 <_printf_i+0x212>
 800afae:	2500      	movs	r5, #0
 800afb0:	f104 0619 	add.w	r6, r4, #25
 800afb4:	e7f5      	b.n	800afa2 <_printf_i+0x22e>
 800afb6:	bf00      	nop
 800afb8:	0800d3d4 	.word	0x0800d3d4
 800afbc:	0800d3e5 	.word	0x0800d3e5

0800afc0 <nan>:
 800afc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800afc8 <nan+0x8>
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	00000000 	.word	0x00000000
 800afcc:	7ff80000 	.word	0x7ff80000

0800afd0 <_sbrk_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4d06      	ldr	r5, [pc, #24]	; (800afec <_sbrk_r+0x1c>)
 800afd4:	2300      	movs	r3, #0
 800afd6:	4604      	mov	r4, r0
 800afd8:	4608      	mov	r0, r1
 800afda:	602b      	str	r3, [r5, #0]
 800afdc:	f7f7 fc98 	bl	8002910 <_sbrk>
 800afe0:	1c43      	adds	r3, r0, #1
 800afe2:	d102      	bne.n	800afea <_sbrk_r+0x1a>
 800afe4:	682b      	ldr	r3, [r5, #0]
 800afe6:	b103      	cbz	r3, 800afea <_sbrk_r+0x1a>
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	bd38      	pop	{r3, r4, r5, pc}
 800afec:	2000095c 	.word	0x2000095c

0800aff0 <strcpy>:
 800aff0:	4603      	mov	r3, r0
 800aff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aff6:	f803 2b01 	strb.w	r2, [r3], #1
 800affa:	2a00      	cmp	r2, #0
 800affc:	d1f9      	bne.n	800aff2 <strcpy+0x2>
 800affe:	4770      	bx	lr

0800b000 <strncmp>:
 800b000:	b510      	push	{r4, lr}
 800b002:	b17a      	cbz	r2, 800b024 <strncmp+0x24>
 800b004:	4603      	mov	r3, r0
 800b006:	3901      	subs	r1, #1
 800b008:	1884      	adds	r4, r0, r2
 800b00a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b00e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b012:	4290      	cmp	r0, r2
 800b014:	d101      	bne.n	800b01a <strncmp+0x1a>
 800b016:	42a3      	cmp	r3, r4
 800b018:	d101      	bne.n	800b01e <strncmp+0x1e>
 800b01a:	1a80      	subs	r0, r0, r2
 800b01c:	bd10      	pop	{r4, pc}
 800b01e:	2800      	cmp	r0, #0
 800b020:	d1f3      	bne.n	800b00a <strncmp+0xa>
 800b022:	e7fa      	b.n	800b01a <strncmp+0x1a>
 800b024:	4610      	mov	r0, r2
 800b026:	e7f9      	b.n	800b01c <strncmp+0x1c>

0800b028 <__ascii_wctomb>:
 800b028:	b149      	cbz	r1, 800b03e <__ascii_wctomb+0x16>
 800b02a:	2aff      	cmp	r2, #255	; 0xff
 800b02c:	bf85      	ittet	hi
 800b02e:	238a      	movhi	r3, #138	; 0x8a
 800b030:	6003      	strhi	r3, [r0, #0]
 800b032:	700a      	strbls	r2, [r1, #0]
 800b034:	f04f 30ff 	movhi.w	r0, #4294967295
 800b038:	bf98      	it	ls
 800b03a:	2001      	movls	r0, #1
 800b03c:	4770      	bx	lr
 800b03e:	4608      	mov	r0, r1
 800b040:	4770      	bx	lr
	...

0800b044 <__assert_func>:
 800b044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b046:	4614      	mov	r4, r2
 800b048:	461a      	mov	r2, r3
 800b04a:	4b09      	ldr	r3, [pc, #36]	; (800b070 <__assert_func+0x2c>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4605      	mov	r5, r0
 800b050:	68d8      	ldr	r0, [r3, #12]
 800b052:	b14c      	cbz	r4, 800b068 <__assert_func+0x24>
 800b054:	4b07      	ldr	r3, [pc, #28]	; (800b074 <__assert_func+0x30>)
 800b056:	9100      	str	r1, [sp, #0]
 800b058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b05c:	4906      	ldr	r1, [pc, #24]	; (800b078 <__assert_func+0x34>)
 800b05e:	462b      	mov	r3, r5
 800b060:	f000 fe88 	bl	800bd74 <fiprintf>
 800b064:	f001 f912 	bl	800c28c <abort>
 800b068:	4b04      	ldr	r3, [pc, #16]	; (800b07c <__assert_func+0x38>)
 800b06a:	461c      	mov	r4, r3
 800b06c:	e7f3      	b.n	800b056 <__assert_func+0x12>
 800b06e:	bf00      	nop
 800b070:	2000001c 	.word	0x2000001c
 800b074:	0800d3f6 	.word	0x0800d3f6
 800b078:	0800d403 	.word	0x0800d403
 800b07c:	0800d431 	.word	0x0800d431

0800b080 <quorem>:
 800b080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	6903      	ldr	r3, [r0, #16]
 800b086:	690c      	ldr	r4, [r1, #16]
 800b088:	42a3      	cmp	r3, r4
 800b08a:	4607      	mov	r7, r0
 800b08c:	f2c0 8081 	blt.w	800b192 <quorem+0x112>
 800b090:	3c01      	subs	r4, #1
 800b092:	f101 0814 	add.w	r8, r1, #20
 800b096:	f100 0514 	add.w	r5, r0, #20
 800b09a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b0b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0b8:	d331      	bcc.n	800b11e <quorem+0x9e>
 800b0ba:	f04f 0e00 	mov.w	lr, #0
 800b0be:	4640      	mov	r0, r8
 800b0c0:	46ac      	mov	ip, r5
 800b0c2:	46f2      	mov	sl, lr
 800b0c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b0c8:	b293      	uxth	r3, r2
 800b0ca:	fb06 e303 	mla	r3, r6, r3, lr
 800b0ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	ebaa 0303 	sub.w	r3, sl, r3
 800b0d8:	f8dc a000 	ldr.w	sl, [ip]
 800b0dc:	0c12      	lsrs	r2, r2, #16
 800b0de:	fa13 f38a 	uxtah	r3, r3, sl
 800b0e2:	fb06 e202 	mla	r2, r6, r2, lr
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	9b00      	ldr	r3, [sp, #0]
 800b0ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b0ee:	b292      	uxth	r2, r2
 800b0f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b0f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0f8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b0fc:	4581      	cmp	r9, r0
 800b0fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b102:	f84c 3b04 	str.w	r3, [ip], #4
 800b106:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b10a:	d2db      	bcs.n	800b0c4 <quorem+0x44>
 800b10c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b110:	b92b      	cbnz	r3, 800b11e <quorem+0x9e>
 800b112:	9b01      	ldr	r3, [sp, #4]
 800b114:	3b04      	subs	r3, #4
 800b116:	429d      	cmp	r5, r3
 800b118:	461a      	mov	r2, r3
 800b11a:	d32e      	bcc.n	800b17a <quorem+0xfa>
 800b11c:	613c      	str	r4, [r7, #16]
 800b11e:	4638      	mov	r0, r7
 800b120:	f7ff fafc 	bl	800a71c <__mcmp>
 800b124:	2800      	cmp	r0, #0
 800b126:	db24      	blt.n	800b172 <quorem+0xf2>
 800b128:	3601      	adds	r6, #1
 800b12a:	4628      	mov	r0, r5
 800b12c:	f04f 0c00 	mov.w	ip, #0
 800b130:	f858 2b04 	ldr.w	r2, [r8], #4
 800b134:	f8d0 e000 	ldr.w	lr, [r0]
 800b138:	b293      	uxth	r3, r2
 800b13a:	ebac 0303 	sub.w	r3, ip, r3
 800b13e:	0c12      	lsrs	r2, r2, #16
 800b140:	fa13 f38e 	uxtah	r3, r3, lr
 800b144:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b152:	45c1      	cmp	r9, r8
 800b154:	f840 3b04 	str.w	r3, [r0], #4
 800b158:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b15c:	d2e8      	bcs.n	800b130 <quorem+0xb0>
 800b15e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b166:	b922      	cbnz	r2, 800b172 <quorem+0xf2>
 800b168:	3b04      	subs	r3, #4
 800b16a:	429d      	cmp	r5, r3
 800b16c:	461a      	mov	r2, r3
 800b16e:	d30a      	bcc.n	800b186 <quorem+0x106>
 800b170:	613c      	str	r4, [r7, #16]
 800b172:	4630      	mov	r0, r6
 800b174:	b003      	add	sp, #12
 800b176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17a:	6812      	ldr	r2, [r2, #0]
 800b17c:	3b04      	subs	r3, #4
 800b17e:	2a00      	cmp	r2, #0
 800b180:	d1cc      	bne.n	800b11c <quorem+0x9c>
 800b182:	3c01      	subs	r4, #1
 800b184:	e7c7      	b.n	800b116 <quorem+0x96>
 800b186:	6812      	ldr	r2, [r2, #0]
 800b188:	3b04      	subs	r3, #4
 800b18a:	2a00      	cmp	r2, #0
 800b18c:	d1f0      	bne.n	800b170 <quorem+0xf0>
 800b18e:	3c01      	subs	r4, #1
 800b190:	e7eb      	b.n	800b16a <quorem+0xea>
 800b192:	2000      	movs	r0, #0
 800b194:	e7ee      	b.n	800b174 <quorem+0xf4>
	...

0800b198 <_dtoa_r>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	ed2d 8b04 	vpush	{d8-d9}
 800b1a0:	ec57 6b10 	vmov	r6, r7, d0
 800b1a4:	b093      	sub	sp, #76	; 0x4c
 800b1a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b1ac:	9106      	str	r1, [sp, #24]
 800b1ae:	ee10 aa10 	vmov	sl, s0
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b1b6:	930c      	str	r3, [sp, #48]	; 0x30
 800b1b8:	46bb      	mov	fp, r7
 800b1ba:	b975      	cbnz	r5, 800b1da <_dtoa_r+0x42>
 800b1bc:	2010      	movs	r0, #16
 800b1be:	f000 fdeb 	bl	800bd98 <malloc>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	6260      	str	r0, [r4, #36]	; 0x24
 800b1c6:	b920      	cbnz	r0, 800b1d2 <_dtoa_r+0x3a>
 800b1c8:	4ba7      	ldr	r3, [pc, #668]	; (800b468 <_dtoa_r+0x2d0>)
 800b1ca:	21ea      	movs	r1, #234	; 0xea
 800b1cc:	48a7      	ldr	r0, [pc, #668]	; (800b46c <_dtoa_r+0x2d4>)
 800b1ce:	f7ff ff39 	bl	800b044 <__assert_func>
 800b1d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b1d6:	6005      	str	r5, [r0, #0]
 800b1d8:	60c5      	str	r5, [r0, #12]
 800b1da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1dc:	6819      	ldr	r1, [r3, #0]
 800b1de:	b151      	cbz	r1, 800b1f6 <_dtoa_r+0x5e>
 800b1e0:	685a      	ldr	r2, [r3, #4]
 800b1e2:	604a      	str	r2, [r1, #4]
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	4093      	lsls	r3, r2
 800b1e8:	608b      	str	r3, [r1, #8]
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f7ff f80a 	bl	800a204 <_Bfree>
 800b1f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	1e3b      	subs	r3, r7, #0
 800b1f8:	bfaa      	itet	ge
 800b1fa:	2300      	movge	r3, #0
 800b1fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b200:	f8c8 3000 	strge.w	r3, [r8]
 800b204:	4b9a      	ldr	r3, [pc, #616]	; (800b470 <_dtoa_r+0x2d8>)
 800b206:	bfbc      	itt	lt
 800b208:	2201      	movlt	r2, #1
 800b20a:	f8c8 2000 	strlt.w	r2, [r8]
 800b20e:	ea33 030b 	bics.w	r3, r3, fp
 800b212:	d11b      	bne.n	800b24c <_dtoa_r+0xb4>
 800b214:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b216:	f242 730f 	movw	r3, #9999	; 0x270f
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b220:	4333      	orrs	r3, r6
 800b222:	f000 8592 	beq.w	800bd4a <_dtoa_r+0xbb2>
 800b226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b228:	b963      	cbnz	r3, 800b244 <_dtoa_r+0xac>
 800b22a:	4b92      	ldr	r3, [pc, #584]	; (800b474 <_dtoa_r+0x2dc>)
 800b22c:	e022      	b.n	800b274 <_dtoa_r+0xdc>
 800b22e:	4b92      	ldr	r3, [pc, #584]	; (800b478 <_dtoa_r+0x2e0>)
 800b230:	9301      	str	r3, [sp, #4]
 800b232:	3308      	adds	r3, #8
 800b234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b236:	6013      	str	r3, [r2, #0]
 800b238:	9801      	ldr	r0, [sp, #4]
 800b23a:	b013      	add	sp, #76	; 0x4c
 800b23c:	ecbd 8b04 	vpop	{d8-d9}
 800b240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b244:	4b8b      	ldr	r3, [pc, #556]	; (800b474 <_dtoa_r+0x2dc>)
 800b246:	9301      	str	r3, [sp, #4]
 800b248:	3303      	adds	r3, #3
 800b24a:	e7f3      	b.n	800b234 <_dtoa_r+0x9c>
 800b24c:	2200      	movs	r2, #0
 800b24e:	2300      	movs	r3, #0
 800b250:	4650      	mov	r0, sl
 800b252:	4659      	mov	r1, fp
 800b254:	f7f5 fc58 	bl	8000b08 <__aeabi_dcmpeq>
 800b258:	ec4b ab19 	vmov	d9, sl, fp
 800b25c:	4680      	mov	r8, r0
 800b25e:	b158      	cbz	r0, 800b278 <_dtoa_r+0xe0>
 800b260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b262:	2301      	movs	r3, #1
 800b264:	6013      	str	r3, [r2, #0]
 800b266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f000 856b 	beq.w	800bd44 <_dtoa_r+0xbac>
 800b26e:	4883      	ldr	r0, [pc, #524]	; (800b47c <_dtoa_r+0x2e4>)
 800b270:	6018      	str	r0, [r3, #0]
 800b272:	1e43      	subs	r3, r0, #1
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	e7df      	b.n	800b238 <_dtoa_r+0xa0>
 800b278:	ec4b ab10 	vmov	d0, sl, fp
 800b27c:	aa10      	add	r2, sp, #64	; 0x40
 800b27e:	a911      	add	r1, sp, #68	; 0x44
 800b280:	4620      	mov	r0, r4
 800b282:	f7ff fb6d 	bl	800a960 <__d2b>
 800b286:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b28a:	ee08 0a10 	vmov	s16, r0
 800b28e:	2d00      	cmp	r5, #0
 800b290:	f000 8084 	beq.w	800b39c <_dtoa_r+0x204>
 800b294:	ee19 3a90 	vmov	r3, s19
 800b298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b29c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b2a0:	4656      	mov	r6, sl
 800b2a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b2a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b2aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b2ae:	4b74      	ldr	r3, [pc, #464]	; (800b480 <_dtoa_r+0x2e8>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	f7f5 f807 	bl	80002c8 <__aeabi_dsub>
 800b2ba:	a365      	add	r3, pc, #404	; (adr r3, 800b450 <_dtoa_r+0x2b8>)
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	f7f5 f9ba 	bl	8000638 <__aeabi_dmul>
 800b2c4:	a364      	add	r3, pc, #400	; (adr r3, 800b458 <_dtoa_r+0x2c0>)
 800b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ca:	f7f4 ffff 	bl	80002cc <__adddf3>
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	460f      	mov	r7, r1
 800b2d4:	f7f5 f946 	bl	8000564 <__aeabi_i2d>
 800b2d8:	a361      	add	r3, pc, #388	; (adr r3, 800b460 <_dtoa_r+0x2c8>)
 800b2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2de:	f7f5 f9ab 	bl	8000638 <__aeabi_dmul>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	4639      	mov	r1, r7
 800b2ea:	f7f4 ffef 	bl	80002cc <__adddf3>
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	460f      	mov	r7, r1
 800b2f2:	f7f5 fc3b 	bl	8000b6c <__aeabi_d2iz>
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	9000      	str	r0, [sp, #0]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	4639      	mov	r1, r7
 800b300:	f7f5 fc0c 	bl	8000b1c <__aeabi_dcmplt>
 800b304:	b150      	cbz	r0, 800b31c <_dtoa_r+0x184>
 800b306:	9800      	ldr	r0, [sp, #0]
 800b308:	f7f5 f92c 	bl	8000564 <__aeabi_i2d>
 800b30c:	4632      	mov	r2, r6
 800b30e:	463b      	mov	r3, r7
 800b310:	f7f5 fbfa 	bl	8000b08 <__aeabi_dcmpeq>
 800b314:	b910      	cbnz	r0, 800b31c <_dtoa_r+0x184>
 800b316:	9b00      	ldr	r3, [sp, #0]
 800b318:	3b01      	subs	r3, #1
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	9b00      	ldr	r3, [sp, #0]
 800b31e:	2b16      	cmp	r3, #22
 800b320:	d85a      	bhi.n	800b3d8 <_dtoa_r+0x240>
 800b322:	9a00      	ldr	r2, [sp, #0]
 800b324:	4b57      	ldr	r3, [pc, #348]	; (800b484 <_dtoa_r+0x2ec>)
 800b326:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	ec51 0b19 	vmov	r0, r1, d9
 800b332:	f7f5 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 800b336:	2800      	cmp	r0, #0
 800b338:	d050      	beq.n	800b3dc <_dtoa_r+0x244>
 800b33a:	9b00      	ldr	r3, [sp, #0]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	2300      	movs	r3, #0
 800b342:	930b      	str	r3, [sp, #44]	; 0x2c
 800b344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b346:	1b5d      	subs	r5, r3, r5
 800b348:	1e6b      	subs	r3, r5, #1
 800b34a:	9305      	str	r3, [sp, #20]
 800b34c:	bf45      	ittet	mi
 800b34e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b352:	9304      	strmi	r3, [sp, #16]
 800b354:	2300      	movpl	r3, #0
 800b356:	2300      	movmi	r3, #0
 800b358:	bf4c      	ite	mi
 800b35a:	9305      	strmi	r3, [sp, #20]
 800b35c:	9304      	strpl	r3, [sp, #16]
 800b35e:	9b00      	ldr	r3, [sp, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	db3d      	blt.n	800b3e0 <_dtoa_r+0x248>
 800b364:	9b05      	ldr	r3, [sp, #20]
 800b366:	9a00      	ldr	r2, [sp, #0]
 800b368:	920a      	str	r2, [sp, #40]	; 0x28
 800b36a:	4413      	add	r3, r2
 800b36c:	9305      	str	r3, [sp, #20]
 800b36e:	2300      	movs	r3, #0
 800b370:	9307      	str	r3, [sp, #28]
 800b372:	9b06      	ldr	r3, [sp, #24]
 800b374:	2b09      	cmp	r3, #9
 800b376:	f200 8089 	bhi.w	800b48c <_dtoa_r+0x2f4>
 800b37a:	2b05      	cmp	r3, #5
 800b37c:	bfc4      	itt	gt
 800b37e:	3b04      	subgt	r3, #4
 800b380:	9306      	strgt	r3, [sp, #24]
 800b382:	9b06      	ldr	r3, [sp, #24]
 800b384:	f1a3 0302 	sub.w	r3, r3, #2
 800b388:	bfcc      	ite	gt
 800b38a:	2500      	movgt	r5, #0
 800b38c:	2501      	movle	r5, #1
 800b38e:	2b03      	cmp	r3, #3
 800b390:	f200 8087 	bhi.w	800b4a2 <_dtoa_r+0x30a>
 800b394:	e8df f003 	tbb	[pc, r3]
 800b398:	59383a2d 	.word	0x59383a2d
 800b39c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b3a0:	441d      	add	r5, r3
 800b3a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b3a6:	2b20      	cmp	r3, #32
 800b3a8:	bfc1      	itttt	gt
 800b3aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b3ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b3b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b3b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b3ba:	bfda      	itte	le
 800b3bc:	f1c3 0320 	rsble	r3, r3, #32
 800b3c0:	fa06 f003 	lslle.w	r0, r6, r3
 800b3c4:	4318      	orrgt	r0, r3
 800b3c6:	f7f5 f8bd 	bl	8000544 <__aeabi_ui2d>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	4606      	mov	r6, r0
 800b3ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b3d2:	3d01      	subs	r5, #1
 800b3d4:	930e      	str	r3, [sp, #56]	; 0x38
 800b3d6:	e76a      	b.n	800b2ae <_dtoa_r+0x116>
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e7b2      	b.n	800b342 <_dtoa_r+0x1aa>
 800b3dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3de:	e7b1      	b.n	800b344 <_dtoa_r+0x1ac>
 800b3e0:	9b04      	ldr	r3, [sp, #16]
 800b3e2:	9a00      	ldr	r2, [sp, #0]
 800b3e4:	1a9b      	subs	r3, r3, r2
 800b3e6:	9304      	str	r3, [sp, #16]
 800b3e8:	4253      	negs	r3, r2
 800b3ea:	9307      	str	r3, [sp, #28]
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b3f0:	e7bf      	b.n	800b372 <_dtoa_r+0x1da>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	9308      	str	r3, [sp, #32]
 800b3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	dc55      	bgt.n	800b4a8 <_dtoa_r+0x310>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b402:	461a      	mov	r2, r3
 800b404:	9209      	str	r2, [sp, #36]	; 0x24
 800b406:	e00c      	b.n	800b422 <_dtoa_r+0x28a>
 800b408:	2301      	movs	r3, #1
 800b40a:	e7f3      	b.n	800b3f4 <_dtoa_r+0x25c>
 800b40c:	2300      	movs	r3, #0
 800b40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b410:	9308      	str	r3, [sp, #32]
 800b412:	9b00      	ldr	r3, [sp, #0]
 800b414:	4413      	add	r3, r2
 800b416:	9302      	str	r3, [sp, #8]
 800b418:	3301      	adds	r3, #1
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	9303      	str	r3, [sp, #12]
 800b41e:	bfb8      	it	lt
 800b420:	2301      	movlt	r3, #1
 800b422:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b424:	2200      	movs	r2, #0
 800b426:	6042      	str	r2, [r0, #4]
 800b428:	2204      	movs	r2, #4
 800b42a:	f102 0614 	add.w	r6, r2, #20
 800b42e:	429e      	cmp	r6, r3
 800b430:	6841      	ldr	r1, [r0, #4]
 800b432:	d93d      	bls.n	800b4b0 <_dtoa_r+0x318>
 800b434:	4620      	mov	r0, r4
 800b436:	f7fe fea5 	bl	800a184 <_Balloc>
 800b43a:	9001      	str	r0, [sp, #4]
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d13b      	bne.n	800b4b8 <_dtoa_r+0x320>
 800b440:	4b11      	ldr	r3, [pc, #68]	; (800b488 <_dtoa_r+0x2f0>)
 800b442:	4602      	mov	r2, r0
 800b444:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b448:	e6c0      	b.n	800b1cc <_dtoa_r+0x34>
 800b44a:	2301      	movs	r3, #1
 800b44c:	e7df      	b.n	800b40e <_dtoa_r+0x276>
 800b44e:	bf00      	nop
 800b450:	636f4361 	.word	0x636f4361
 800b454:	3fd287a7 	.word	0x3fd287a7
 800b458:	8b60c8b3 	.word	0x8b60c8b3
 800b45c:	3fc68a28 	.word	0x3fc68a28
 800b460:	509f79fb 	.word	0x509f79fb
 800b464:	3fd34413 	.word	0x3fd34413
 800b468:	0800d264 	.word	0x0800d264
 800b46c:	0800d542 	.word	0x0800d542
 800b470:	7ff00000 	.word	0x7ff00000
 800b474:	0800d53c 	.word	0x0800d53c
 800b478:	0800d533 	.word	0x0800d533
 800b47c:	0800d541 	.word	0x0800d541
 800b480:	3ff80000 	.word	0x3ff80000
 800b484:	0800d300 	.word	0x0800d300
 800b488:	0800d1d8 	.word	0x0800d1d8
 800b48c:	2501      	movs	r5, #1
 800b48e:	2300      	movs	r3, #0
 800b490:	9306      	str	r3, [sp, #24]
 800b492:	9508      	str	r5, [sp, #32]
 800b494:	f04f 33ff 	mov.w	r3, #4294967295
 800b498:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b49c:	2200      	movs	r2, #0
 800b49e:	2312      	movs	r3, #18
 800b4a0:	e7b0      	b.n	800b404 <_dtoa_r+0x26c>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	9308      	str	r3, [sp, #32]
 800b4a6:	e7f5      	b.n	800b494 <_dtoa_r+0x2fc>
 800b4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4ae:	e7b8      	b.n	800b422 <_dtoa_r+0x28a>
 800b4b0:	3101      	adds	r1, #1
 800b4b2:	6041      	str	r1, [r0, #4]
 800b4b4:	0052      	lsls	r2, r2, #1
 800b4b6:	e7b8      	b.n	800b42a <_dtoa_r+0x292>
 800b4b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4ba:	9a01      	ldr	r2, [sp, #4]
 800b4bc:	601a      	str	r2, [r3, #0]
 800b4be:	9b03      	ldr	r3, [sp, #12]
 800b4c0:	2b0e      	cmp	r3, #14
 800b4c2:	f200 809d 	bhi.w	800b600 <_dtoa_r+0x468>
 800b4c6:	2d00      	cmp	r5, #0
 800b4c8:	f000 809a 	beq.w	800b600 <_dtoa_r+0x468>
 800b4cc:	9b00      	ldr	r3, [sp, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	dd32      	ble.n	800b538 <_dtoa_r+0x3a0>
 800b4d2:	4ab7      	ldr	r2, [pc, #732]	; (800b7b0 <_dtoa_r+0x618>)
 800b4d4:	f003 030f 	and.w	r3, r3, #15
 800b4d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b4dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4e0:	9b00      	ldr	r3, [sp, #0]
 800b4e2:	05d8      	lsls	r0, r3, #23
 800b4e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b4e8:	d516      	bpl.n	800b518 <_dtoa_r+0x380>
 800b4ea:	4bb2      	ldr	r3, [pc, #712]	; (800b7b4 <_dtoa_r+0x61c>)
 800b4ec:	ec51 0b19 	vmov	r0, r1, d9
 800b4f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4f4:	f7f5 f9ca 	bl	800088c <__aeabi_ddiv>
 800b4f8:	f007 070f 	and.w	r7, r7, #15
 800b4fc:	4682      	mov	sl, r0
 800b4fe:	468b      	mov	fp, r1
 800b500:	2503      	movs	r5, #3
 800b502:	4eac      	ldr	r6, [pc, #688]	; (800b7b4 <_dtoa_r+0x61c>)
 800b504:	b957      	cbnz	r7, 800b51c <_dtoa_r+0x384>
 800b506:	4642      	mov	r2, r8
 800b508:	464b      	mov	r3, r9
 800b50a:	4650      	mov	r0, sl
 800b50c:	4659      	mov	r1, fp
 800b50e:	f7f5 f9bd 	bl	800088c <__aeabi_ddiv>
 800b512:	4682      	mov	sl, r0
 800b514:	468b      	mov	fp, r1
 800b516:	e028      	b.n	800b56a <_dtoa_r+0x3d2>
 800b518:	2502      	movs	r5, #2
 800b51a:	e7f2      	b.n	800b502 <_dtoa_r+0x36a>
 800b51c:	07f9      	lsls	r1, r7, #31
 800b51e:	d508      	bpl.n	800b532 <_dtoa_r+0x39a>
 800b520:	4640      	mov	r0, r8
 800b522:	4649      	mov	r1, r9
 800b524:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b528:	f7f5 f886 	bl	8000638 <__aeabi_dmul>
 800b52c:	3501      	adds	r5, #1
 800b52e:	4680      	mov	r8, r0
 800b530:	4689      	mov	r9, r1
 800b532:	107f      	asrs	r7, r7, #1
 800b534:	3608      	adds	r6, #8
 800b536:	e7e5      	b.n	800b504 <_dtoa_r+0x36c>
 800b538:	f000 809b 	beq.w	800b672 <_dtoa_r+0x4da>
 800b53c:	9b00      	ldr	r3, [sp, #0]
 800b53e:	4f9d      	ldr	r7, [pc, #628]	; (800b7b4 <_dtoa_r+0x61c>)
 800b540:	425e      	negs	r6, r3
 800b542:	4b9b      	ldr	r3, [pc, #620]	; (800b7b0 <_dtoa_r+0x618>)
 800b544:	f006 020f 	and.w	r2, r6, #15
 800b548:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	ec51 0b19 	vmov	r0, r1, d9
 800b554:	f7f5 f870 	bl	8000638 <__aeabi_dmul>
 800b558:	1136      	asrs	r6, r6, #4
 800b55a:	4682      	mov	sl, r0
 800b55c:	468b      	mov	fp, r1
 800b55e:	2300      	movs	r3, #0
 800b560:	2502      	movs	r5, #2
 800b562:	2e00      	cmp	r6, #0
 800b564:	d17a      	bne.n	800b65c <_dtoa_r+0x4c4>
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1d3      	bne.n	800b512 <_dtoa_r+0x37a>
 800b56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 8082 	beq.w	800b676 <_dtoa_r+0x4de>
 800b572:	4b91      	ldr	r3, [pc, #580]	; (800b7b8 <_dtoa_r+0x620>)
 800b574:	2200      	movs	r2, #0
 800b576:	4650      	mov	r0, sl
 800b578:	4659      	mov	r1, fp
 800b57a:	f7f5 facf 	bl	8000b1c <__aeabi_dcmplt>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d079      	beq.n	800b676 <_dtoa_r+0x4de>
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d076      	beq.n	800b676 <_dtoa_r+0x4de>
 800b588:	9b02      	ldr	r3, [sp, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	dd36      	ble.n	800b5fc <_dtoa_r+0x464>
 800b58e:	9b00      	ldr	r3, [sp, #0]
 800b590:	4650      	mov	r0, sl
 800b592:	4659      	mov	r1, fp
 800b594:	1e5f      	subs	r7, r3, #1
 800b596:	2200      	movs	r2, #0
 800b598:	4b88      	ldr	r3, [pc, #544]	; (800b7bc <_dtoa_r+0x624>)
 800b59a:	f7f5 f84d 	bl	8000638 <__aeabi_dmul>
 800b59e:	9e02      	ldr	r6, [sp, #8]
 800b5a0:	4682      	mov	sl, r0
 800b5a2:	468b      	mov	fp, r1
 800b5a4:	3501      	adds	r5, #1
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	f7f4 ffdc 	bl	8000564 <__aeabi_i2d>
 800b5ac:	4652      	mov	r2, sl
 800b5ae:	465b      	mov	r3, fp
 800b5b0:	f7f5 f842 	bl	8000638 <__aeabi_dmul>
 800b5b4:	4b82      	ldr	r3, [pc, #520]	; (800b7c0 <_dtoa_r+0x628>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f7f4 fe88 	bl	80002cc <__adddf3>
 800b5bc:	46d0      	mov	r8, sl
 800b5be:	46d9      	mov	r9, fp
 800b5c0:	4682      	mov	sl, r0
 800b5c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b5c6:	2e00      	cmp	r6, #0
 800b5c8:	d158      	bne.n	800b67c <_dtoa_r+0x4e4>
 800b5ca:	4b7e      	ldr	r3, [pc, #504]	; (800b7c4 <_dtoa_r+0x62c>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	4649      	mov	r1, r9
 800b5d2:	f7f4 fe79 	bl	80002c8 <__aeabi_dsub>
 800b5d6:	4652      	mov	r2, sl
 800b5d8:	465b      	mov	r3, fp
 800b5da:	4680      	mov	r8, r0
 800b5dc:	4689      	mov	r9, r1
 800b5de:	f7f5 fabb 	bl	8000b58 <__aeabi_dcmpgt>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	f040 8295 	bne.w	800bb12 <_dtoa_r+0x97a>
 800b5e8:	4652      	mov	r2, sl
 800b5ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b5ee:	4640      	mov	r0, r8
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	f7f5 fa93 	bl	8000b1c <__aeabi_dcmplt>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	f040 8289 	bne.w	800bb0e <_dtoa_r+0x976>
 800b5fc:	ec5b ab19 	vmov	sl, fp, d9
 800b600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b602:	2b00      	cmp	r3, #0
 800b604:	f2c0 8148 	blt.w	800b898 <_dtoa_r+0x700>
 800b608:	9a00      	ldr	r2, [sp, #0]
 800b60a:	2a0e      	cmp	r2, #14
 800b60c:	f300 8144 	bgt.w	800b898 <_dtoa_r+0x700>
 800b610:	4b67      	ldr	r3, [pc, #412]	; (800b7b0 <_dtoa_r+0x618>)
 800b612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b616:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f280 80d5 	bge.w	800b7cc <_dtoa_r+0x634>
 800b622:	9b03      	ldr	r3, [sp, #12]
 800b624:	2b00      	cmp	r3, #0
 800b626:	f300 80d1 	bgt.w	800b7cc <_dtoa_r+0x634>
 800b62a:	f040 826f 	bne.w	800bb0c <_dtoa_r+0x974>
 800b62e:	4b65      	ldr	r3, [pc, #404]	; (800b7c4 <_dtoa_r+0x62c>)
 800b630:	2200      	movs	r2, #0
 800b632:	4640      	mov	r0, r8
 800b634:	4649      	mov	r1, r9
 800b636:	f7f4 ffff 	bl	8000638 <__aeabi_dmul>
 800b63a:	4652      	mov	r2, sl
 800b63c:	465b      	mov	r3, fp
 800b63e:	f7f5 fa81 	bl	8000b44 <__aeabi_dcmpge>
 800b642:	9e03      	ldr	r6, [sp, #12]
 800b644:	4637      	mov	r7, r6
 800b646:	2800      	cmp	r0, #0
 800b648:	f040 8245 	bne.w	800bad6 <_dtoa_r+0x93e>
 800b64c:	9d01      	ldr	r5, [sp, #4]
 800b64e:	2331      	movs	r3, #49	; 0x31
 800b650:	f805 3b01 	strb.w	r3, [r5], #1
 800b654:	9b00      	ldr	r3, [sp, #0]
 800b656:	3301      	adds	r3, #1
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	e240      	b.n	800bade <_dtoa_r+0x946>
 800b65c:	07f2      	lsls	r2, r6, #31
 800b65e:	d505      	bpl.n	800b66c <_dtoa_r+0x4d4>
 800b660:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b664:	f7f4 ffe8 	bl	8000638 <__aeabi_dmul>
 800b668:	3501      	adds	r5, #1
 800b66a:	2301      	movs	r3, #1
 800b66c:	1076      	asrs	r6, r6, #1
 800b66e:	3708      	adds	r7, #8
 800b670:	e777      	b.n	800b562 <_dtoa_r+0x3ca>
 800b672:	2502      	movs	r5, #2
 800b674:	e779      	b.n	800b56a <_dtoa_r+0x3d2>
 800b676:	9f00      	ldr	r7, [sp, #0]
 800b678:	9e03      	ldr	r6, [sp, #12]
 800b67a:	e794      	b.n	800b5a6 <_dtoa_r+0x40e>
 800b67c:	9901      	ldr	r1, [sp, #4]
 800b67e:	4b4c      	ldr	r3, [pc, #304]	; (800b7b0 <_dtoa_r+0x618>)
 800b680:	4431      	add	r1, r6
 800b682:	910d      	str	r1, [sp, #52]	; 0x34
 800b684:	9908      	ldr	r1, [sp, #32]
 800b686:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b68a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b68e:	2900      	cmp	r1, #0
 800b690:	d043      	beq.n	800b71a <_dtoa_r+0x582>
 800b692:	494d      	ldr	r1, [pc, #308]	; (800b7c8 <_dtoa_r+0x630>)
 800b694:	2000      	movs	r0, #0
 800b696:	f7f5 f8f9 	bl	800088c <__aeabi_ddiv>
 800b69a:	4652      	mov	r2, sl
 800b69c:	465b      	mov	r3, fp
 800b69e:	f7f4 fe13 	bl	80002c8 <__aeabi_dsub>
 800b6a2:	9d01      	ldr	r5, [sp, #4]
 800b6a4:	4682      	mov	sl, r0
 800b6a6:	468b      	mov	fp, r1
 800b6a8:	4649      	mov	r1, r9
 800b6aa:	4640      	mov	r0, r8
 800b6ac:	f7f5 fa5e 	bl	8000b6c <__aeabi_d2iz>
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	f7f4 ff57 	bl	8000564 <__aeabi_i2d>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	4649      	mov	r1, r9
 800b6be:	f7f4 fe03 	bl	80002c8 <__aeabi_dsub>
 800b6c2:	3630      	adds	r6, #48	; 0x30
 800b6c4:	f805 6b01 	strb.w	r6, [r5], #1
 800b6c8:	4652      	mov	r2, sl
 800b6ca:	465b      	mov	r3, fp
 800b6cc:	4680      	mov	r8, r0
 800b6ce:	4689      	mov	r9, r1
 800b6d0:	f7f5 fa24 	bl	8000b1c <__aeabi_dcmplt>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d163      	bne.n	800b7a0 <_dtoa_r+0x608>
 800b6d8:	4642      	mov	r2, r8
 800b6da:	464b      	mov	r3, r9
 800b6dc:	4936      	ldr	r1, [pc, #216]	; (800b7b8 <_dtoa_r+0x620>)
 800b6de:	2000      	movs	r0, #0
 800b6e0:	f7f4 fdf2 	bl	80002c8 <__aeabi_dsub>
 800b6e4:	4652      	mov	r2, sl
 800b6e6:	465b      	mov	r3, fp
 800b6e8:	f7f5 fa18 	bl	8000b1c <__aeabi_dcmplt>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	f040 80b5 	bne.w	800b85c <_dtoa_r+0x6c4>
 800b6f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6f4:	429d      	cmp	r5, r3
 800b6f6:	d081      	beq.n	800b5fc <_dtoa_r+0x464>
 800b6f8:	4b30      	ldr	r3, [pc, #192]	; (800b7bc <_dtoa_r+0x624>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	4650      	mov	r0, sl
 800b6fe:	4659      	mov	r1, fp
 800b700:	f7f4 ff9a 	bl	8000638 <__aeabi_dmul>
 800b704:	4b2d      	ldr	r3, [pc, #180]	; (800b7bc <_dtoa_r+0x624>)
 800b706:	4682      	mov	sl, r0
 800b708:	468b      	mov	fp, r1
 800b70a:	4640      	mov	r0, r8
 800b70c:	4649      	mov	r1, r9
 800b70e:	2200      	movs	r2, #0
 800b710:	f7f4 ff92 	bl	8000638 <__aeabi_dmul>
 800b714:	4680      	mov	r8, r0
 800b716:	4689      	mov	r9, r1
 800b718:	e7c6      	b.n	800b6a8 <_dtoa_r+0x510>
 800b71a:	4650      	mov	r0, sl
 800b71c:	4659      	mov	r1, fp
 800b71e:	f7f4 ff8b 	bl	8000638 <__aeabi_dmul>
 800b722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b724:	9d01      	ldr	r5, [sp, #4]
 800b726:	930f      	str	r3, [sp, #60]	; 0x3c
 800b728:	4682      	mov	sl, r0
 800b72a:	468b      	mov	fp, r1
 800b72c:	4649      	mov	r1, r9
 800b72e:	4640      	mov	r0, r8
 800b730:	f7f5 fa1c 	bl	8000b6c <__aeabi_d2iz>
 800b734:	4606      	mov	r6, r0
 800b736:	f7f4 ff15 	bl	8000564 <__aeabi_i2d>
 800b73a:	3630      	adds	r6, #48	; 0x30
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4640      	mov	r0, r8
 800b742:	4649      	mov	r1, r9
 800b744:	f7f4 fdc0 	bl	80002c8 <__aeabi_dsub>
 800b748:	f805 6b01 	strb.w	r6, [r5], #1
 800b74c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b74e:	429d      	cmp	r5, r3
 800b750:	4680      	mov	r8, r0
 800b752:	4689      	mov	r9, r1
 800b754:	f04f 0200 	mov.w	r2, #0
 800b758:	d124      	bne.n	800b7a4 <_dtoa_r+0x60c>
 800b75a:	4b1b      	ldr	r3, [pc, #108]	; (800b7c8 <_dtoa_r+0x630>)
 800b75c:	4650      	mov	r0, sl
 800b75e:	4659      	mov	r1, fp
 800b760:	f7f4 fdb4 	bl	80002cc <__adddf3>
 800b764:	4602      	mov	r2, r0
 800b766:	460b      	mov	r3, r1
 800b768:	4640      	mov	r0, r8
 800b76a:	4649      	mov	r1, r9
 800b76c:	f7f5 f9f4 	bl	8000b58 <__aeabi_dcmpgt>
 800b770:	2800      	cmp	r0, #0
 800b772:	d173      	bne.n	800b85c <_dtoa_r+0x6c4>
 800b774:	4652      	mov	r2, sl
 800b776:	465b      	mov	r3, fp
 800b778:	4913      	ldr	r1, [pc, #76]	; (800b7c8 <_dtoa_r+0x630>)
 800b77a:	2000      	movs	r0, #0
 800b77c:	f7f4 fda4 	bl	80002c8 <__aeabi_dsub>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	4640      	mov	r0, r8
 800b786:	4649      	mov	r1, r9
 800b788:	f7f5 f9c8 	bl	8000b1c <__aeabi_dcmplt>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	f43f af35 	beq.w	800b5fc <_dtoa_r+0x464>
 800b792:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b794:	1e6b      	subs	r3, r5, #1
 800b796:	930f      	str	r3, [sp, #60]	; 0x3c
 800b798:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b79c:	2b30      	cmp	r3, #48	; 0x30
 800b79e:	d0f8      	beq.n	800b792 <_dtoa_r+0x5fa>
 800b7a0:	9700      	str	r7, [sp, #0]
 800b7a2:	e049      	b.n	800b838 <_dtoa_r+0x6a0>
 800b7a4:	4b05      	ldr	r3, [pc, #20]	; (800b7bc <_dtoa_r+0x624>)
 800b7a6:	f7f4 ff47 	bl	8000638 <__aeabi_dmul>
 800b7aa:	4680      	mov	r8, r0
 800b7ac:	4689      	mov	r9, r1
 800b7ae:	e7bd      	b.n	800b72c <_dtoa_r+0x594>
 800b7b0:	0800d300 	.word	0x0800d300
 800b7b4:	0800d2d8 	.word	0x0800d2d8
 800b7b8:	3ff00000 	.word	0x3ff00000
 800b7bc:	40240000 	.word	0x40240000
 800b7c0:	401c0000 	.word	0x401c0000
 800b7c4:	40140000 	.word	0x40140000
 800b7c8:	3fe00000 	.word	0x3fe00000
 800b7cc:	9d01      	ldr	r5, [sp, #4]
 800b7ce:	4656      	mov	r6, sl
 800b7d0:	465f      	mov	r7, fp
 800b7d2:	4642      	mov	r2, r8
 800b7d4:	464b      	mov	r3, r9
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	4639      	mov	r1, r7
 800b7da:	f7f5 f857 	bl	800088c <__aeabi_ddiv>
 800b7de:	f7f5 f9c5 	bl	8000b6c <__aeabi_d2iz>
 800b7e2:	4682      	mov	sl, r0
 800b7e4:	f7f4 febe 	bl	8000564 <__aeabi_i2d>
 800b7e8:	4642      	mov	r2, r8
 800b7ea:	464b      	mov	r3, r9
 800b7ec:	f7f4 ff24 	bl	8000638 <__aeabi_dmul>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b7fc:	f7f4 fd64 	bl	80002c8 <__aeabi_dsub>
 800b800:	f805 6b01 	strb.w	r6, [r5], #1
 800b804:	9e01      	ldr	r6, [sp, #4]
 800b806:	9f03      	ldr	r7, [sp, #12]
 800b808:	1bae      	subs	r6, r5, r6
 800b80a:	42b7      	cmp	r7, r6
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	d135      	bne.n	800b87e <_dtoa_r+0x6e6>
 800b812:	f7f4 fd5b 	bl	80002cc <__adddf3>
 800b816:	4642      	mov	r2, r8
 800b818:	464b      	mov	r3, r9
 800b81a:	4606      	mov	r6, r0
 800b81c:	460f      	mov	r7, r1
 800b81e:	f7f5 f99b 	bl	8000b58 <__aeabi_dcmpgt>
 800b822:	b9d0      	cbnz	r0, 800b85a <_dtoa_r+0x6c2>
 800b824:	4642      	mov	r2, r8
 800b826:	464b      	mov	r3, r9
 800b828:	4630      	mov	r0, r6
 800b82a:	4639      	mov	r1, r7
 800b82c:	f7f5 f96c 	bl	8000b08 <__aeabi_dcmpeq>
 800b830:	b110      	cbz	r0, 800b838 <_dtoa_r+0x6a0>
 800b832:	f01a 0f01 	tst.w	sl, #1
 800b836:	d110      	bne.n	800b85a <_dtoa_r+0x6c2>
 800b838:	4620      	mov	r0, r4
 800b83a:	ee18 1a10 	vmov	r1, s16
 800b83e:	f7fe fce1 	bl	800a204 <_Bfree>
 800b842:	2300      	movs	r3, #0
 800b844:	9800      	ldr	r0, [sp, #0]
 800b846:	702b      	strb	r3, [r5, #0]
 800b848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b84a:	3001      	adds	r0, #1
 800b84c:	6018      	str	r0, [r3, #0]
 800b84e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b850:	2b00      	cmp	r3, #0
 800b852:	f43f acf1 	beq.w	800b238 <_dtoa_r+0xa0>
 800b856:	601d      	str	r5, [r3, #0]
 800b858:	e4ee      	b.n	800b238 <_dtoa_r+0xa0>
 800b85a:	9f00      	ldr	r7, [sp, #0]
 800b85c:	462b      	mov	r3, r5
 800b85e:	461d      	mov	r5, r3
 800b860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b864:	2a39      	cmp	r2, #57	; 0x39
 800b866:	d106      	bne.n	800b876 <_dtoa_r+0x6de>
 800b868:	9a01      	ldr	r2, [sp, #4]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d1f7      	bne.n	800b85e <_dtoa_r+0x6c6>
 800b86e:	9901      	ldr	r1, [sp, #4]
 800b870:	2230      	movs	r2, #48	; 0x30
 800b872:	3701      	adds	r7, #1
 800b874:	700a      	strb	r2, [r1, #0]
 800b876:	781a      	ldrb	r2, [r3, #0]
 800b878:	3201      	adds	r2, #1
 800b87a:	701a      	strb	r2, [r3, #0]
 800b87c:	e790      	b.n	800b7a0 <_dtoa_r+0x608>
 800b87e:	4ba6      	ldr	r3, [pc, #664]	; (800bb18 <_dtoa_r+0x980>)
 800b880:	2200      	movs	r2, #0
 800b882:	f7f4 fed9 	bl	8000638 <__aeabi_dmul>
 800b886:	2200      	movs	r2, #0
 800b888:	2300      	movs	r3, #0
 800b88a:	4606      	mov	r6, r0
 800b88c:	460f      	mov	r7, r1
 800b88e:	f7f5 f93b 	bl	8000b08 <__aeabi_dcmpeq>
 800b892:	2800      	cmp	r0, #0
 800b894:	d09d      	beq.n	800b7d2 <_dtoa_r+0x63a>
 800b896:	e7cf      	b.n	800b838 <_dtoa_r+0x6a0>
 800b898:	9a08      	ldr	r2, [sp, #32]
 800b89a:	2a00      	cmp	r2, #0
 800b89c:	f000 80d7 	beq.w	800ba4e <_dtoa_r+0x8b6>
 800b8a0:	9a06      	ldr	r2, [sp, #24]
 800b8a2:	2a01      	cmp	r2, #1
 800b8a4:	f300 80ba 	bgt.w	800ba1c <_dtoa_r+0x884>
 800b8a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8aa:	2a00      	cmp	r2, #0
 800b8ac:	f000 80b2 	beq.w	800ba14 <_dtoa_r+0x87c>
 800b8b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b8b4:	9e07      	ldr	r6, [sp, #28]
 800b8b6:	9d04      	ldr	r5, [sp, #16]
 800b8b8:	9a04      	ldr	r2, [sp, #16]
 800b8ba:	441a      	add	r2, r3
 800b8bc:	9204      	str	r2, [sp, #16]
 800b8be:	9a05      	ldr	r2, [sp, #20]
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	441a      	add	r2, r3
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	9205      	str	r2, [sp, #20]
 800b8c8:	f7fe fd9e 	bl	800a408 <__i2b>
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	2d00      	cmp	r5, #0
 800b8d0:	dd0c      	ble.n	800b8ec <_dtoa_r+0x754>
 800b8d2:	9b05      	ldr	r3, [sp, #20]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	dd09      	ble.n	800b8ec <_dtoa_r+0x754>
 800b8d8:	42ab      	cmp	r3, r5
 800b8da:	9a04      	ldr	r2, [sp, #16]
 800b8dc:	bfa8      	it	ge
 800b8de:	462b      	movge	r3, r5
 800b8e0:	1ad2      	subs	r2, r2, r3
 800b8e2:	9204      	str	r2, [sp, #16]
 800b8e4:	9a05      	ldr	r2, [sp, #20]
 800b8e6:	1aed      	subs	r5, r5, r3
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	9305      	str	r3, [sp, #20]
 800b8ec:	9b07      	ldr	r3, [sp, #28]
 800b8ee:	b31b      	cbz	r3, 800b938 <_dtoa_r+0x7a0>
 800b8f0:	9b08      	ldr	r3, [sp, #32]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 80af 	beq.w	800ba56 <_dtoa_r+0x8be>
 800b8f8:	2e00      	cmp	r6, #0
 800b8fa:	dd13      	ble.n	800b924 <_dtoa_r+0x78c>
 800b8fc:	4639      	mov	r1, r7
 800b8fe:	4632      	mov	r2, r6
 800b900:	4620      	mov	r0, r4
 800b902:	f7fe fe41 	bl	800a588 <__pow5mult>
 800b906:	ee18 2a10 	vmov	r2, s16
 800b90a:	4601      	mov	r1, r0
 800b90c:	4607      	mov	r7, r0
 800b90e:	4620      	mov	r0, r4
 800b910:	f7fe fd90 	bl	800a434 <__multiply>
 800b914:	ee18 1a10 	vmov	r1, s16
 800b918:	4680      	mov	r8, r0
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7fe fc72 	bl	800a204 <_Bfree>
 800b920:	ee08 8a10 	vmov	s16, r8
 800b924:	9b07      	ldr	r3, [sp, #28]
 800b926:	1b9a      	subs	r2, r3, r6
 800b928:	d006      	beq.n	800b938 <_dtoa_r+0x7a0>
 800b92a:	ee18 1a10 	vmov	r1, s16
 800b92e:	4620      	mov	r0, r4
 800b930:	f7fe fe2a 	bl	800a588 <__pow5mult>
 800b934:	ee08 0a10 	vmov	s16, r0
 800b938:	2101      	movs	r1, #1
 800b93a:	4620      	mov	r0, r4
 800b93c:	f7fe fd64 	bl	800a408 <__i2b>
 800b940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b942:	2b00      	cmp	r3, #0
 800b944:	4606      	mov	r6, r0
 800b946:	f340 8088 	ble.w	800ba5a <_dtoa_r+0x8c2>
 800b94a:	461a      	mov	r2, r3
 800b94c:	4601      	mov	r1, r0
 800b94e:	4620      	mov	r0, r4
 800b950:	f7fe fe1a 	bl	800a588 <__pow5mult>
 800b954:	9b06      	ldr	r3, [sp, #24]
 800b956:	2b01      	cmp	r3, #1
 800b958:	4606      	mov	r6, r0
 800b95a:	f340 8081 	ble.w	800ba60 <_dtoa_r+0x8c8>
 800b95e:	f04f 0800 	mov.w	r8, #0
 800b962:	6933      	ldr	r3, [r6, #16]
 800b964:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b968:	6918      	ldr	r0, [r3, #16]
 800b96a:	f7fe fcfd 	bl	800a368 <__hi0bits>
 800b96e:	f1c0 0020 	rsb	r0, r0, #32
 800b972:	9b05      	ldr	r3, [sp, #20]
 800b974:	4418      	add	r0, r3
 800b976:	f010 001f 	ands.w	r0, r0, #31
 800b97a:	f000 8092 	beq.w	800baa2 <_dtoa_r+0x90a>
 800b97e:	f1c0 0320 	rsb	r3, r0, #32
 800b982:	2b04      	cmp	r3, #4
 800b984:	f340 808a 	ble.w	800ba9c <_dtoa_r+0x904>
 800b988:	f1c0 001c 	rsb	r0, r0, #28
 800b98c:	9b04      	ldr	r3, [sp, #16]
 800b98e:	4403      	add	r3, r0
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	9b05      	ldr	r3, [sp, #20]
 800b994:	4403      	add	r3, r0
 800b996:	4405      	add	r5, r0
 800b998:	9305      	str	r3, [sp, #20]
 800b99a:	9b04      	ldr	r3, [sp, #16]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	dd07      	ble.n	800b9b0 <_dtoa_r+0x818>
 800b9a0:	ee18 1a10 	vmov	r1, s16
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f7fe fe48 	bl	800a63c <__lshift>
 800b9ac:	ee08 0a10 	vmov	s16, r0
 800b9b0:	9b05      	ldr	r3, [sp, #20]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	dd05      	ble.n	800b9c2 <_dtoa_r+0x82a>
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f7fe fe3e 	bl	800a63c <__lshift>
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d06e      	beq.n	800baa6 <_dtoa_r+0x90e>
 800b9c8:	ee18 0a10 	vmov	r0, s16
 800b9cc:	4631      	mov	r1, r6
 800b9ce:	f7fe fea5 	bl	800a71c <__mcmp>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	da67      	bge.n	800baa6 <_dtoa_r+0x90e>
 800b9d6:	9b00      	ldr	r3, [sp, #0]
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	ee18 1a10 	vmov	r1, s16
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	220a      	movs	r2, #10
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f7fe fc2f 	bl	800a248 <__multadd>
 800b9ea:	9b08      	ldr	r3, [sp, #32]
 800b9ec:	ee08 0a10 	vmov	s16, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f000 81b1 	beq.w	800bd58 <_dtoa_r+0xbc0>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	220a      	movs	r2, #10
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f7fe fc23 	bl	800a248 <__multadd>
 800ba02:	9b02      	ldr	r3, [sp, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	4607      	mov	r7, r0
 800ba08:	f300 808e 	bgt.w	800bb28 <_dtoa_r+0x990>
 800ba0c:	9b06      	ldr	r3, [sp, #24]
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	dc51      	bgt.n	800bab6 <_dtoa_r+0x91e>
 800ba12:	e089      	b.n	800bb28 <_dtoa_r+0x990>
 800ba14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba1a:	e74b      	b.n	800b8b4 <_dtoa_r+0x71c>
 800ba1c:	9b03      	ldr	r3, [sp, #12]
 800ba1e:	1e5e      	subs	r6, r3, #1
 800ba20:	9b07      	ldr	r3, [sp, #28]
 800ba22:	42b3      	cmp	r3, r6
 800ba24:	bfbf      	itttt	lt
 800ba26:	9b07      	ldrlt	r3, [sp, #28]
 800ba28:	9607      	strlt	r6, [sp, #28]
 800ba2a:	1af2      	sublt	r2, r6, r3
 800ba2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ba2e:	bfb6      	itet	lt
 800ba30:	189b      	addlt	r3, r3, r2
 800ba32:	1b9e      	subge	r6, r3, r6
 800ba34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ba36:	9b03      	ldr	r3, [sp, #12]
 800ba38:	bfb8      	it	lt
 800ba3a:	2600      	movlt	r6, #0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	bfb7      	itett	lt
 800ba40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ba44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ba48:	1a9d      	sublt	r5, r3, r2
 800ba4a:	2300      	movlt	r3, #0
 800ba4c:	e734      	b.n	800b8b8 <_dtoa_r+0x720>
 800ba4e:	9e07      	ldr	r6, [sp, #28]
 800ba50:	9d04      	ldr	r5, [sp, #16]
 800ba52:	9f08      	ldr	r7, [sp, #32]
 800ba54:	e73b      	b.n	800b8ce <_dtoa_r+0x736>
 800ba56:	9a07      	ldr	r2, [sp, #28]
 800ba58:	e767      	b.n	800b92a <_dtoa_r+0x792>
 800ba5a:	9b06      	ldr	r3, [sp, #24]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	dc18      	bgt.n	800ba92 <_dtoa_r+0x8fa>
 800ba60:	f1ba 0f00 	cmp.w	sl, #0
 800ba64:	d115      	bne.n	800ba92 <_dtoa_r+0x8fa>
 800ba66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba6a:	b993      	cbnz	r3, 800ba92 <_dtoa_r+0x8fa>
 800ba6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba70:	0d1b      	lsrs	r3, r3, #20
 800ba72:	051b      	lsls	r3, r3, #20
 800ba74:	b183      	cbz	r3, 800ba98 <_dtoa_r+0x900>
 800ba76:	9b04      	ldr	r3, [sp, #16]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	9304      	str	r3, [sp, #16]
 800ba7c:	9b05      	ldr	r3, [sp, #20]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	9305      	str	r3, [sp, #20]
 800ba82:	f04f 0801 	mov.w	r8, #1
 800ba86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f47f af6a 	bne.w	800b962 <_dtoa_r+0x7ca>
 800ba8e:	2001      	movs	r0, #1
 800ba90:	e76f      	b.n	800b972 <_dtoa_r+0x7da>
 800ba92:	f04f 0800 	mov.w	r8, #0
 800ba96:	e7f6      	b.n	800ba86 <_dtoa_r+0x8ee>
 800ba98:	4698      	mov	r8, r3
 800ba9a:	e7f4      	b.n	800ba86 <_dtoa_r+0x8ee>
 800ba9c:	f43f af7d 	beq.w	800b99a <_dtoa_r+0x802>
 800baa0:	4618      	mov	r0, r3
 800baa2:	301c      	adds	r0, #28
 800baa4:	e772      	b.n	800b98c <_dtoa_r+0x7f4>
 800baa6:	9b03      	ldr	r3, [sp, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	dc37      	bgt.n	800bb1c <_dtoa_r+0x984>
 800baac:	9b06      	ldr	r3, [sp, #24]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	dd34      	ble.n	800bb1c <_dtoa_r+0x984>
 800bab2:	9b03      	ldr	r3, [sp, #12]
 800bab4:	9302      	str	r3, [sp, #8]
 800bab6:	9b02      	ldr	r3, [sp, #8]
 800bab8:	b96b      	cbnz	r3, 800bad6 <_dtoa_r+0x93e>
 800baba:	4631      	mov	r1, r6
 800babc:	2205      	movs	r2, #5
 800babe:	4620      	mov	r0, r4
 800bac0:	f7fe fbc2 	bl	800a248 <__multadd>
 800bac4:	4601      	mov	r1, r0
 800bac6:	4606      	mov	r6, r0
 800bac8:	ee18 0a10 	vmov	r0, s16
 800bacc:	f7fe fe26 	bl	800a71c <__mcmp>
 800bad0:	2800      	cmp	r0, #0
 800bad2:	f73f adbb 	bgt.w	800b64c <_dtoa_r+0x4b4>
 800bad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad8:	9d01      	ldr	r5, [sp, #4]
 800bada:	43db      	mvns	r3, r3
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	f04f 0800 	mov.w	r8, #0
 800bae2:	4631      	mov	r1, r6
 800bae4:	4620      	mov	r0, r4
 800bae6:	f7fe fb8d 	bl	800a204 <_Bfree>
 800baea:	2f00      	cmp	r7, #0
 800baec:	f43f aea4 	beq.w	800b838 <_dtoa_r+0x6a0>
 800baf0:	f1b8 0f00 	cmp.w	r8, #0
 800baf4:	d005      	beq.n	800bb02 <_dtoa_r+0x96a>
 800baf6:	45b8      	cmp	r8, r7
 800baf8:	d003      	beq.n	800bb02 <_dtoa_r+0x96a>
 800bafa:	4641      	mov	r1, r8
 800bafc:	4620      	mov	r0, r4
 800bafe:	f7fe fb81 	bl	800a204 <_Bfree>
 800bb02:	4639      	mov	r1, r7
 800bb04:	4620      	mov	r0, r4
 800bb06:	f7fe fb7d 	bl	800a204 <_Bfree>
 800bb0a:	e695      	b.n	800b838 <_dtoa_r+0x6a0>
 800bb0c:	2600      	movs	r6, #0
 800bb0e:	4637      	mov	r7, r6
 800bb10:	e7e1      	b.n	800bad6 <_dtoa_r+0x93e>
 800bb12:	9700      	str	r7, [sp, #0]
 800bb14:	4637      	mov	r7, r6
 800bb16:	e599      	b.n	800b64c <_dtoa_r+0x4b4>
 800bb18:	40240000 	.word	0x40240000
 800bb1c:	9b08      	ldr	r3, [sp, #32]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f000 80ca 	beq.w	800bcb8 <_dtoa_r+0xb20>
 800bb24:	9b03      	ldr	r3, [sp, #12]
 800bb26:	9302      	str	r3, [sp, #8]
 800bb28:	2d00      	cmp	r5, #0
 800bb2a:	dd05      	ble.n	800bb38 <_dtoa_r+0x9a0>
 800bb2c:	4639      	mov	r1, r7
 800bb2e:	462a      	mov	r2, r5
 800bb30:	4620      	mov	r0, r4
 800bb32:	f7fe fd83 	bl	800a63c <__lshift>
 800bb36:	4607      	mov	r7, r0
 800bb38:	f1b8 0f00 	cmp.w	r8, #0
 800bb3c:	d05b      	beq.n	800bbf6 <_dtoa_r+0xa5e>
 800bb3e:	6879      	ldr	r1, [r7, #4]
 800bb40:	4620      	mov	r0, r4
 800bb42:	f7fe fb1f 	bl	800a184 <_Balloc>
 800bb46:	4605      	mov	r5, r0
 800bb48:	b928      	cbnz	r0, 800bb56 <_dtoa_r+0x9be>
 800bb4a:	4b87      	ldr	r3, [pc, #540]	; (800bd68 <_dtoa_r+0xbd0>)
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bb52:	f7ff bb3b 	b.w	800b1cc <_dtoa_r+0x34>
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	3202      	adds	r2, #2
 800bb5a:	0092      	lsls	r2, r2, #2
 800bb5c:	f107 010c 	add.w	r1, r7, #12
 800bb60:	300c      	adds	r0, #12
 800bb62:	f7fc fffd 	bl	8008b60 <memcpy>
 800bb66:	2201      	movs	r2, #1
 800bb68:	4629      	mov	r1, r5
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f7fe fd66 	bl	800a63c <__lshift>
 800bb70:	9b01      	ldr	r3, [sp, #4]
 800bb72:	f103 0901 	add.w	r9, r3, #1
 800bb76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	9305      	str	r3, [sp, #20]
 800bb7e:	f00a 0301 	and.w	r3, sl, #1
 800bb82:	46b8      	mov	r8, r7
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	4607      	mov	r7, r0
 800bb88:	4631      	mov	r1, r6
 800bb8a:	ee18 0a10 	vmov	r0, s16
 800bb8e:	f7ff fa77 	bl	800b080 <quorem>
 800bb92:	4641      	mov	r1, r8
 800bb94:	9002      	str	r0, [sp, #8]
 800bb96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb9a:	ee18 0a10 	vmov	r0, s16
 800bb9e:	f7fe fdbd 	bl	800a71c <__mcmp>
 800bba2:	463a      	mov	r2, r7
 800bba4:	9003      	str	r0, [sp, #12]
 800bba6:	4631      	mov	r1, r6
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7fe fdd3 	bl	800a754 <__mdiff>
 800bbae:	68c2      	ldr	r2, [r0, #12]
 800bbb0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	bb02      	cbnz	r2, 800bbfa <_dtoa_r+0xa62>
 800bbb8:	4601      	mov	r1, r0
 800bbba:	ee18 0a10 	vmov	r0, s16
 800bbbe:	f7fe fdad 	bl	800a71c <__mcmp>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	9207      	str	r2, [sp, #28]
 800bbca:	f7fe fb1b 	bl	800a204 <_Bfree>
 800bbce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bbd2:	ea43 0102 	orr.w	r1, r3, r2
 800bbd6:	9b04      	ldr	r3, [sp, #16]
 800bbd8:	430b      	orrs	r3, r1
 800bbda:	464d      	mov	r5, r9
 800bbdc:	d10f      	bne.n	800bbfe <_dtoa_r+0xa66>
 800bbde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbe2:	d02a      	beq.n	800bc3a <_dtoa_r+0xaa2>
 800bbe4:	9b03      	ldr	r3, [sp, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	dd02      	ble.n	800bbf0 <_dtoa_r+0xa58>
 800bbea:	9b02      	ldr	r3, [sp, #8]
 800bbec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bbf0:	f88b a000 	strb.w	sl, [fp]
 800bbf4:	e775      	b.n	800bae2 <_dtoa_r+0x94a>
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	e7ba      	b.n	800bb70 <_dtoa_r+0x9d8>
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	e7e2      	b.n	800bbc4 <_dtoa_r+0xa2c>
 800bbfe:	9b03      	ldr	r3, [sp, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	db04      	blt.n	800bc0e <_dtoa_r+0xa76>
 800bc04:	9906      	ldr	r1, [sp, #24]
 800bc06:	430b      	orrs	r3, r1
 800bc08:	9904      	ldr	r1, [sp, #16]
 800bc0a:	430b      	orrs	r3, r1
 800bc0c:	d122      	bne.n	800bc54 <_dtoa_r+0xabc>
 800bc0e:	2a00      	cmp	r2, #0
 800bc10:	ddee      	ble.n	800bbf0 <_dtoa_r+0xa58>
 800bc12:	ee18 1a10 	vmov	r1, s16
 800bc16:	2201      	movs	r2, #1
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f7fe fd0f 	bl	800a63c <__lshift>
 800bc1e:	4631      	mov	r1, r6
 800bc20:	ee08 0a10 	vmov	s16, r0
 800bc24:	f7fe fd7a 	bl	800a71c <__mcmp>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	dc03      	bgt.n	800bc34 <_dtoa_r+0xa9c>
 800bc2c:	d1e0      	bne.n	800bbf0 <_dtoa_r+0xa58>
 800bc2e:	f01a 0f01 	tst.w	sl, #1
 800bc32:	d0dd      	beq.n	800bbf0 <_dtoa_r+0xa58>
 800bc34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc38:	d1d7      	bne.n	800bbea <_dtoa_r+0xa52>
 800bc3a:	2339      	movs	r3, #57	; 0x39
 800bc3c:	f88b 3000 	strb.w	r3, [fp]
 800bc40:	462b      	mov	r3, r5
 800bc42:	461d      	mov	r5, r3
 800bc44:	3b01      	subs	r3, #1
 800bc46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bc4a:	2a39      	cmp	r2, #57	; 0x39
 800bc4c:	d071      	beq.n	800bd32 <_dtoa_r+0xb9a>
 800bc4e:	3201      	adds	r2, #1
 800bc50:	701a      	strb	r2, [r3, #0]
 800bc52:	e746      	b.n	800bae2 <_dtoa_r+0x94a>
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	dd07      	ble.n	800bc68 <_dtoa_r+0xad0>
 800bc58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc5c:	d0ed      	beq.n	800bc3a <_dtoa_r+0xaa2>
 800bc5e:	f10a 0301 	add.w	r3, sl, #1
 800bc62:	f88b 3000 	strb.w	r3, [fp]
 800bc66:	e73c      	b.n	800bae2 <_dtoa_r+0x94a>
 800bc68:	9b05      	ldr	r3, [sp, #20]
 800bc6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bc6e:	4599      	cmp	r9, r3
 800bc70:	d047      	beq.n	800bd02 <_dtoa_r+0xb6a>
 800bc72:	ee18 1a10 	vmov	r1, s16
 800bc76:	2300      	movs	r3, #0
 800bc78:	220a      	movs	r2, #10
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f7fe fae4 	bl	800a248 <__multadd>
 800bc80:	45b8      	cmp	r8, r7
 800bc82:	ee08 0a10 	vmov	s16, r0
 800bc86:	f04f 0300 	mov.w	r3, #0
 800bc8a:	f04f 020a 	mov.w	r2, #10
 800bc8e:	4641      	mov	r1, r8
 800bc90:	4620      	mov	r0, r4
 800bc92:	d106      	bne.n	800bca2 <_dtoa_r+0xb0a>
 800bc94:	f7fe fad8 	bl	800a248 <__multadd>
 800bc98:	4680      	mov	r8, r0
 800bc9a:	4607      	mov	r7, r0
 800bc9c:	f109 0901 	add.w	r9, r9, #1
 800bca0:	e772      	b.n	800bb88 <_dtoa_r+0x9f0>
 800bca2:	f7fe fad1 	bl	800a248 <__multadd>
 800bca6:	4639      	mov	r1, r7
 800bca8:	4680      	mov	r8, r0
 800bcaa:	2300      	movs	r3, #0
 800bcac:	220a      	movs	r2, #10
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7fe faca 	bl	800a248 <__multadd>
 800bcb4:	4607      	mov	r7, r0
 800bcb6:	e7f1      	b.n	800bc9c <_dtoa_r+0xb04>
 800bcb8:	9b03      	ldr	r3, [sp, #12]
 800bcba:	9302      	str	r3, [sp, #8]
 800bcbc:	9d01      	ldr	r5, [sp, #4]
 800bcbe:	ee18 0a10 	vmov	r0, s16
 800bcc2:	4631      	mov	r1, r6
 800bcc4:	f7ff f9dc 	bl	800b080 <quorem>
 800bcc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bccc:	9b01      	ldr	r3, [sp, #4]
 800bcce:	f805 ab01 	strb.w	sl, [r5], #1
 800bcd2:	1aea      	subs	r2, r5, r3
 800bcd4:	9b02      	ldr	r3, [sp, #8]
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	dd09      	ble.n	800bcee <_dtoa_r+0xb56>
 800bcda:	ee18 1a10 	vmov	r1, s16
 800bcde:	2300      	movs	r3, #0
 800bce0:	220a      	movs	r2, #10
 800bce2:	4620      	mov	r0, r4
 800bce4:	f7fe fab0 	bl	800a248 <__multadd>
 800bce8:	ee08 0a10 	vmov	s16, r0
 800bcec:	e7e7      	b.n	800bcbe <_dtoa_r+0xb26>
 800bcee:	9b02      	ldr	r3, [sp, #8]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	bfc8      	it	gt
 800bcf4:	461d      	movgt	r5, r3
 800bcf6:	9b01      	ldr	r3, [sp, #4]
 800bcf8:	bfd8      	it	le
 800bcfa:	2501      	movle	r5, #1
 800bcfc:	441d      	add	r5, r3
 800bcfe:	f04f 0800 	mov.w	r8, #0
 800bd02:	ee18 1a10 	vmov	r1, s16
 800bd06:	2201      	movs	r2, #1
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f7fe fc97 	bl	800a63c <__lshift>
 800bd0e:	4631      	mov	r1, r6
 800bd10:	ee08 0a10 	vmov	s16, r0
 800bd14:	f7fe fd02 	bl	800a71c <__mcmp>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	dc91      	bgt.n	800bc40 <_dtoa_r+0xaa8>
 800bd1c:	d102      	bne.n	800bd24 <_dtoa_r+0xb8c>
 800bd1e:	f01a 0f01 	tst.w	sl, #1
 800bd22:	d18d      	bne.n	800bc40 <_dtoa_r+0xaa8>
 800bd24:	462b      	mov	r3, r5
 800bd26:	461d      	mov	r5, r3
 800bd28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd2c:	2a30      	cmp	r2, #48	; 0x30
 800bd2e:	d0fa      	beq.n	800bd26 <_dtoa_r+0xb8e>
 800bd30:	e6d7      	b.n	800bae2 <_dtoa_r+0x94a>
 800bd32:	9a01      	ldr	r2, [sp, #4]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d184      	bne.n	800bc42 <_dtoa_r+0xaaa>
 800bd38:	9b00      	ldr	r3, [sp, #0]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	2331      	movs	r3, #49	; 0x31
 800bd40:	7013      	strb	r3, [r2, #0]
 800bd42:	e6ce      	b.n	800bae2 <_dtoa_r+0x94a>
 800bd44:	4b09      	ldr	r3, [pc, #36]	; (800bd6c <_dtoa_r+0xbd4>)
 800bd46:	f7ff ba95 	b.w	800b274 <_dtoa_r+0xdc>
 800bd4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f47f aa6e 	bne.w	800b22e <_dtoa_r+0x96>
 800bd52:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <_dtoa_r+0xbd8>)
 800bd54:	f7ff ba8e 	b.w	800b274 <_dtoa_r+0xdc>
 800bd58:	9b02      	ldr	r3, [sp, #8]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	dcae      	bgt.n	800bcbc <_dtoa_r+0xb24>
 800bd5e:	9b06      	ldr	r3, [sp, #24]
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	f73f aea8 	bgt.w	800bab6 <_dtoa_r+0x91e>
 800bd66:	e7a9      	b.n	800bcbc <_dtoa_r+0xb24>
 800bd68:	0800d1d8 	.word	0x0800d1d8
 800bd6c:	0800d540 	.word	0x0800d540
 800bd70:	0800d533 	.word	0x0800d533

0800bd74 <fiprintf>:
 800bd74:	b40e      	push	{r1, r2, r3}
 800bd76:	b503      	push	{r0, r1, lr}
 800bd78:	4601      	mov	r1, r0
 800bd7a:	ab03      	add	r3, sp, #12
 800bd7c:	4805      	ldr	r0, [pc, #20]	; (800bd94 <fiprintf+0x20>)
 800bd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd82:	6800      	ldr	r0, [r0, #0]
 800bd84:	9301      	str	r3, [sp, #4]
 800bd86:	f000 f891 	bl	800beac <_vfiprintf_r>
 800bd8a:	b002      	add	sp, #8
 800bd8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd90:	b003      	add	sp, #12
 800bd92:	4770      	bx	lr
 800bd94:	2000001c 	.word	0x2000001c

0800bd98 <malloc>:
 800bd98:	4b02      	ldr	r3, [pc, #8]	; (800bda4 <malloc+0xc>)
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	6818      	ldr	r0, [r3, #0]
 800bd9e:	f7fe bf07 	b.w	800abb0 <_malloc_r>
 800bda2:	bf00      	nop
 800bda4:	2000001c 	.word	0x2000001c

0800bda8 <__malloc_lock>:
 800bda8:	4801      	ldr	r0, [pc, #4]	; (800bdb0 <__malloc_lock+0x8>)
 800bdaa:	f000 bc2f 	b.w	800c60c <__retarget_lock_acquire_recursive>
 800bdae:	bf00      	nop
 800bdb0:	20000960 	.word	0x20000960

0800bdb4 <__malloc_unlock>:
 800bdb4:	4801      	ldr	r0, [pc, #4]	; (800bdbc <__malloc_unlock+0x8>)
 800bdb6:	f000 bc2a 	b.w	800c60e <__retarget_lock_release_recursive>
 800bdba:	bf00      	nop
 800bdbc:	20000960 	.word	0x20000960

0800bdc0 <_free_r>:
 800bdc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdc2:	2900      	cmp	r1, #0
 800bdc4:	d044      	beq.n	800be50 <_free_r+0x90>
 800bdc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdca:	9001      	str	r0, [sp, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f1a1 0404 	sub.w	r4, r1, #4
 800bdd2:	bfb8      	it	lt
 800bdd4:	18e4      	addlt	r4, r4, r3
 800bdd6:	f7ff ffe7 	bl	800bda8 <__malloc_lock>
 800bdda:	4a1e      	ldr	r2, [pc, #120]	; (800be54 <_free_r+0x94>)
 800bddc:	9801      	ldr	r0, [sp, #4]
 800bdde:	6813      	ldr	r3, [r2, #0]
 800bde0:	b933      	cbnz	r3, 800bdf0 <_free_r+0x30>
 800bde2:	6063      	str	r3, [r4, #4]
 800bde4:	6014      	str	r4, [r2, #0]
 800bde6:	b003      	add	sp, #12
 800bde8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdec:	f7ff bfe2 	b.w	800bdb4 <__malloc_unlock>
 800bdf0:	42a3      	cmp	r3, r4
 800bdf2:	d908      	bls.n	800be06 <_free_r+0x46>
 800bdf4:	6825      	ldr	r5, [r4, #0]
 800bdf6:	1961      	adds	r1, r4, r5
 800bdf8:	428b      	cmp	r3, r1
 800bdfa:	bf01      	itttt	eq
 800bdfc:	6819      	ldreq	r1, [r3, #0]
 800bdfe:	685b      	ldreq	r3, [r3, #4]
 800be00:	1949      	addeq	r1, r1, r5
 800be02:	6021      	streq	r1, [r4, #0]
 800be04:	e7ed      	b.n	800bde2 <_free_r+0x22>
 800be06:	461a      	mov	r2, r3
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	b10b      	cbz	r3, 800be10 <_free_r+0x50>
 800be0c:	42a3      	cmp	r3, r4
 800be0e:	d9fa      	bls.n	800be06 <_free_r+0x46>
 800be10:	6811      	ldr	r1, [r2, #0]
 800be12:	1855      	adds	r5, r2, r1
 800be14:	42a5      	cmp	r5, r4
 800be16:	d10b      	bne.n	800be30 <_free_r+0x70>
 800be18:	6824      	ldr	r4, [r4, #0]
 800be1a:	4421      	add	r1, r4
 800be1c:	1854      	adds	r4, r2, r1
 800be1e:	42a3      	cmp	r3, r4
 800be20:	6011      	str	r1, [r2, #0]
 800be22:	d1e0      	bne.n	800bde6 <_free_r+0x26>
 800be24:	681c      	ldr	r4, [r3, #0]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	6053      	str	r3, [r2, #4]
 800be2a:	4421      	add	r1, r4
 800be2c:	6011      	str	r1, [r2, #0]
 800be2e:	e7da      	b.n	800bde6 <_free_r+0x26>
 800be30:	d902      	bls.n	800be38 <_free_r+0x78>
 800be32:	230c      	movs	r3, #12
 800be34:	6003      	str	r3, [r0, #0]
 800be36:	e7d6      	b.n	800bde6 <_free_r+0x26>
 800be38:	6825      	ldr	r5, [r4, #0]
 800be3a:	1961      	adds	r1, r4, r5
 800be3c:	428b      	cmp	r3, r1
 800be3e:	bf04      	itt	eq
 800be40:	6819      	ldreq	r1, [r3, #0]
 800be42:	685b      	ldreq	r3, [r3, #4]
 800be44:	6063      	str	r3, [r4, #4]
 800be46:	bf04      	itt	eq
 800be48:	1949      	addeq	r1, r1, r5
 800be4a:	6021      	streq	r1, [r4, #0]
 800be4c:	6054      	str	r4, [r2, #4]
 800be4e:	e7ca      	b.n	800bde6 <_free_r+0x26>
 800be50:	b003      	add	sp, #12
 800be52:	bd30      	pop	{r4, r5, pc}
 800be54:	20000954 	.word	0x20000954

0800be58 <__sfputc_r>:
 800be58:	6893      	ldr	r3, [r2, #8]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	b410      	push	{r4}
 800be60:	6093      	str	r3, [r2, #8]
 800be62:	da08      	bge.n	800be76 <__sfputc_r+0x1e>
 800be64:	6994      	ldr	r4, [r2, #24]
 800be66:	42a3      	cmp	r3, r4
 800be68:	db01      	blt.n	800be6e <__sfputc_r+0x16>
 800be6a:	290a      	cmp	r1, #10
 800be6c:	d103      	bne.n	800be76 <__sfputc_r+0x1e>
 800be6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be72:	f000 b94b 	b.w	800c10c <__swbuf_r>
 800be76:	6813      	ldr	r3, [r2, #0]
 800be78:	1c58      	adds	r0, r3, #1
 800be7a:	6010      	str	r0, [r2, #0]
 800be7c:	7019      	strb	r1, [r3, #0]
 800be7e:	4608      	mov	r0, r1
 800be80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <__sfputs_r>:
 800be86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be88:	4606      	mov	r6, r0
 800be8a:	460f      	mov	r7, r1
 800be8c:	4614      	mov	r4, r2
 800be8e:	18d5      	adds	r5, r2, r3
 800be90:	42ac      	cmp	r4, r5
 800be92:	d101      	bne.n	800be98 <__sfputs_r+0x12>
 800be94:	2000      	movs	r0, #0
 800be96:	e007      	b.n	800bea8 <__sfputs_r+0x22>
 800be98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be9c:	463a      	mov	r2, r7
 800be9e:	4630      	mov	r0, r6
 800bea0:	f7ff ffda 	bl	800be58 <__sfputc_r>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d1f3      	bne.n	800be90 <__sfputs_r+0xa>
 800bea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800beac <_vfiprintf_r>:
 800beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	460d      	mov	r5, r1
 800beb2:	b09d      	sub	sp, #116	; 0x74
 800beb4:	4614      	mov	r4, r2
 800beb6:	4698      	mov	r8, r3
 800beb8:	4606      	mov	r6, r0
 800beba:	b118      	cbz	r0, 800bec4 <_vfiprintf_r+0x18>
 800bebc:	6983      	ldr	r3, [r0, #24]
 800bebe:	b90b      	cbnz	r3, 800bec4 <_vfiprintf_r+0x18>
 800bec0:	f000 fb06 	bl	800c4d0 <__sinit>
 800bec4:	4b89      	ldr	r3, [pc, #548]	; (800c0ec <_vfiprintf_r+0x240>)
 800bec6:	429d      	cmp	r5, r3
 800bec8:	d11b      	bne.n	800bf02 <_vfiprintf_r+0x56>
 800beca:	6875      	ldr	r5, [r6, #4]
 800becc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bece:	07d9      	lsls	r1, r3, #31
 800bed0:	d405      	bmi.n	800bede <_vfiprintf_r+0x32>
 800bed2:	89ab      	ldrh	r3, [r5, #12]
 800bed4:	059a      	lsls	r2, r3, #22
 800bed6:	d402      	bmi.n	800bede <_vfiprintf_r+0x32>
 800bed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beda:	f000 fb97 	bl	800c60c <__retarget_lock_acquire_recursive>
 800bede:	89ab      	ldrh	r3, [r5, #12]
 800bee0:	071b      	lsls	r3, r3, #28
 800bee2:	d501      	bpl.n	800bee8 <_vfiprintf_r+0x3c>
 800bee4:	692b      	ldr	r3, [r5, #16]
 800bee6:	b9eb      	cbnz	r3, 800bf24 <_vfiprintf_r+0x78>
 800bee8:	4629      	mov	r1, r5
 800beea:	4630      	mov	r0, r6
 800beec:	f000 f960 	bl	800c1b0 <__swsetup_r>
 800bef0:	b1c0      	cbz	r0, 800bf24 <_vfiprintf_r+0x78>
 800bef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bef4:	07dc      	lsls	r4, r3, #31
 800bef6:	d50e      	bpl.n	800bf16 <_vfiprintf_r+0x6a>
 800bef8:	f04f 30ff 	mov.w	r0, #4294967295
 800befc:	b01d      	add	sp, #116	; 0x74
 800befe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf02:	4b7b      	ldr	r3, [pc, #492]	; (800c0f0 <_vfiprintf_r+0x244>)
 800bf04:	429d      	cmp	r5, r3
 800bf06:	d101      	bne.n	800bf0c <_vfiprintf_r+0x60>
 800bf08:	68b5      	ldr	r5, [r6, #8]
 800bf0a:	e7df      	b.n	800becc <_vfiprintf_r+0x20>
 800bf0c:	4b79      	ldr	r3, [pc, #484]	; (800c0f4 <_vfiprintf_r+0x248>)
 800bf0e:	429d      	cmp	r5, r3
 800bf10:	bf08      	it	eq
 800bf12:	68f5      	ldreq	r5, [r6, #12]
 800bf14:	e7da      	b.n	800becc <_vfiprintf_r+0x20>
 800bf16:	89ab      	ldrh	r3, [r5, #12]
 800bf18:	0598      	lsls	r0, r3, #22
 800bf1a:	d4ed      	bmi.n	800bef8 <_vfiprintf_r+0x4c>
 800bf1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf1e:	f000 fb76 	bl	800c60e <__retarget_lock_release_recursive>
 800bf22:	e7e9      	b.n	800bef8 <_vfiprintf_r+0x4c>
 800bf24:	2300      	movs	r3, #0
 800bf26:	9309      	str	r3, [sp, #36]	; 0x24
 800bf28:	2320      	movs	r3, #32
 800bf2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf32:	2330      	movs	r3, #48	; 0x30
 800bf34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c0f8 <_vfiprintf_r+0x24c>
 800bf38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf3c:	f04f 0901 	mov.w	r9, #1
 800bf40:	4623      	mov	r3, r4
 800bf42:	469a      	mov	sl, r3
 800bf44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf48:	b10a      	cbz	r2, 800bf4e <_vfiprintf_r+0xa2>
 800bf4a:	2a25      	cmp	r2, #37	; 0x25
 800bf4c:	d1f9      	bne.n	800bf42 <_vfiprintf_r+0x96>
 800bf4e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf52:	d00b      	beq.n	800bf6c <_vfiprintf_r+0xc0>
 800bf54:	465b      	mov	r3, fp
 800bf56:	4622      	mov	r2, r4
 800bf58:	4629      	mov	r1, r5
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f7ff ff93 	bl	800be86 <__sfputs_r>
 800bf60:	3001      	adds	r0, #1
 800bf62:	f000 80aa 	beq.w	800c0ba <_vfiprintf_r+0x20e>
 800bf66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf68:	445a      	add	r2, fp
 800bf6a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 80a2 	beq.w	800c0ba <_vfiprintf_r+0x20e>
 800bf76:	2300      	movs	r3, #0
 800bf78:	f04f 32ff 	mov.w	r2, #4294967295
 800bf7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf80:	f10a 0a01 	add.w	sl, sl, #1
 800bf84:	9304      	str	r3, [sp, #16]
 800bf86:	9307      	str	r3, [sp, #28]
 800bf88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf8c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf8e:	4654      	mov	r4, sl
 800bf90:	2205      	movs	r2, #5
 800bf92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf96:	4858      	ldr	r0, [pc, #352]	; (800c0f8 <_vfiprintf_r+0x24c>)
 800bf98:	f7f4 f942 	bl	8000220 <memchr>
 800bf9c:	9a04      	ldr	r2, [sp, #16]
 800bf9e:	b9d8      	cbnz	r0, 800bfd8 <_vfiprintf_r+0x12c>
 800bfa0:	06d1      	lsls	r1, r2, #27
 800bfa2:	bf44      	itt	mi
 800bfa4:	2320      	movmi	r3, #32
 800bfa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfaa:	0713      	lsls	r3, r2, #28
 800bfac:	bf44      	itt	mi
 800bfae:	232b      	movmi	r3, #43	; 0x2b
 800bfb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfb8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfba:	d015      	beq.n	800bfe8 <_vfiprintf_r+0x13c>
 800bfbc:	9a07      	ldr	r2, [sp, #28]
 800bfbe:	4654      	mov	r4, sl
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	f04f 0c0a 	mov.w	ip, #10
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfcc:	3b30      	subs	r3, #48	; 0x30
 800bfce:	2b09      	cmp	r3, #9
 800bfd0:	d94e      	bls.n	800c070 <_vfiprintf_r+0x1c4>
 800bfd2:	b1b0      	cbz	r0, 800c002 <_vfiprintf_r+0x156>
 800bfd4:	9207      	str	r2, [sp, #28]
 800bfd6:	e014      	b.n	800c002 <_vfiprintf_r+0x156>
 800bfd8:	eba0 0308 	sub.w	r3, r0, r8
 800bfdc:	fa09 f303 	lsl.w	r3, r9, r3
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	9304      	str	r3, [sp, #16]
 800bfe4:	46a2      	mov	sl, r4
 800bfe6:	e7d2      	b.n	800bf8e <_vfiprintf_r+0xe2>
 800bfe8:	9b03      	ldr	r3, [sp, #12]
 800bfea:	1d19      	adds	r1, r3, #4
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	9103      	str	r1, [sp, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	bfbb      	ittet	lt
 800bff4:	425b      	neglt	r3, r3
 800bff6:	f042 0202 	orrlt.w	r2, r2, #2
 800bffa:	9307      	strge	r3, [sp, #28]
 800bffc:	9307      	strlt	r3, [sp, #28]
 800bffe:	bfb8      	it	lt
 800c000:	9204      	strlt	r2, [sp, #16]
 800c002:	7823      	ldrb	r3, [r4, #0]
 800c004:	2b2e      	cmp	r3, #46	; 0x2e
 800c006:	d10c      	bne.n	800c022 <_vfiprintf_r+0x176>
 800c008:	7863      	ldrb	r3, [r4, #1]
 800c00a:	2b2a      	cmp	r3, #42	; 0x2a
 800c00c:	d135      	bne.n	800c07a <_vfiprintf_r+0x1ce>
 800c00e:	9b03      	ldr	r3, [sp, #12]
 800c010:	1d1a      	adds	r2, r3, #4
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	9203      	str	r2, [sp, #12]
 800c016:	2b00      	cmp	r3, #0
 800c018:	bfb8      	it	lt
 800c01a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c01e:	3402      	adds	r4, #2
 800c020:	9305      	str	r3, [sp, #20]
 800c022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c108 <_vfiprintf_r+0x25c>
 800c026:	7821      	ldrb	r1, [r4, #0]
 800c028:	2203      	movs	r2, #3
 800c02a:	4650      	mov	r0, sl
 800c02c:	f7f4 f8f8 	bl	8000220 <memchr>
 800c030:	b140      	cbz	r0, 800c044 <_vfiprintf_r+0x198>
 800c032:	2340      	movs	r3, #64	; 0x40
 800c034:	eba0 000a 	sub.w	r0, r0, sl
 800c038:	fa03 f000 	lsl.w	r0, r3, r0
 800c03c:	9b04      	ldr	r3, [sp, #16]
 800c03e:	4303      	orrs	r3, r0
 800c040:	3401      	adds	r4, #1
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c048:	482c      	ldr	r0, [pc, #176]	; (800c0fc <_vfiprintf_r+0x250>)
 800c04a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c04e:	2206      	movs	r2, #6
 800c050:	f7f4 f8e6 	bl	8000220 <memchr>
 800c054:	2800      	cmp	r0, #0
 800c056:	d03f      	beq.n	800c0d8 <_vfiprintf_r+0x22c>
 800c058:	4b29      	ldr	r3, [pc, #164]	; (800c100 <_vfiprintf_r+0x254>)
 800c05a:	bb1b      	cbnz	r3, 800c0a4 <_vfiprintf_r+0x1f8>
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	3307      	adds	r3, #7
 800c060:	f023 0307 	bic.w	r3, r3, #7
 800c064:	3308      	adds	r3, #8
 800c066:	9303      	str	r3, [sp, #12]
 800c068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c06a:	443b      	add	r3, r7
 800c06c:	9309      	str	r3, [sp, #36]	; 0x24
 800c06e:	e767      	b.n	800bf40 <_vfiprintf_r+0x94>
 800c070:	fb0c 3202 	mla	r2, ip, r2, r3
 800c074:	460c      	mov	r4, r1
 800c076:	2001      	movs	r0, #1
 800c078:	e7a5      	b.n	800bfc6 <_vfiprintf_r+0x11a>
 800c07a:	2300      	movs	r3, #0
 800c07c:	3401      	adds	r4, #1
 800c07e:	9305      	str	r3, [sp, #20]
 800c080:	4619      	mov	r1, r3
 800c082:	f04f 0c0a 	mov.w	ip, #10
 800c086:	4620      	mov	r0, r4
 800c088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c08c:	3a30      	subs	r2, #48	; 0x30
 800c08e:	2a09      	cmp	r2, #9
 800c090:	d903      	bls.n	800c09a <_vfiprintf_r+0x1ee>
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0c5      	beq.n	800c022 <_vfiprintf_r+0x176>
 800c096:	9105      	str	r1, [sp, #20]
 800c098:	e7c3      	b.n	800c022 <_vfiprintf_r+0x176>
 800c09a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c09e:	4604      	mov	r4, r0
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e7f0      	b.n	800c086 <_vfiprintf_r+0x1da>
 800c0a4:	ab03      	add	r3, sp, #12
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	4b16      	ldr	r3, [pc, #88]	; (800c104 <_vfiprintf_r+0x258>)
 800c0ac:	a904      	add	r1, sp, #16
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f3af 8000 	nop.w
 800c0b4:	4607      	mov	r7, r0
 800c0b6:	1c78      	adds	r0, r7, #1
 800c0b8:	d1d6      	bne.n	800c068 <_vfiprintf_r+0x1bc>
 800c0ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0bc:	07d9      	lsls	r1, r3, #31
 800c0be:	d405      	bmi.n	800c0cc <_vfiprintf_r+0x220>
 800c0c0:	89ab      	ldrh	r3, [r5, #12]
 800c0c2:	059a      	lsls	r2, r3, #22
 800c0c4:	d402      	bmi.n	800c0cc <_vfiprintf_r+0x220>
 800c0c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0c8:	f000 faa1 	bl	800c60e <__retarget_lock_release_recursive>
 800c0cc:	89ab      	ldrh	r3, [r5, #12]
 800c0ce:	065b      	lsls	r3, r3, #25
 800c0d0:	f53f af12 	bmi.w	800bef8 <_vfiprintf_r+0x4c>
 800c0d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0d6:	e711      	b.n	800befc <_vfiprintf_r+0x50>
 800c0d8:	ab03      	add	r3, sp, #12
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	462a      	mov	r2, r5
 800c0de:	4b09      	ldr	r3, [pc, #36]	; (800c104 <_vfiprintf_r+0x258>)
 800c0e0:	a904      	add	r1, sp, #16
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	f7fe fe46 	bl	800ad74 <_printf_i>
 800c0e8:	e7e4      	b.n	800c0b4 <_vfiprintf_r+0x208>
 800c0ea:	bf00      	nop
 800c0ec:	0800d5d0 	.word	0x0800d5d0
 800c0f0:	0800d5f0 	.word	0x0800d5f0
 800c0f4:	0800d5b0 	.word	0x0800d5b0
 800c0f8:	0800d59d 	.word	0x0800d59d
 800c0fc:	0800d5a7 	.word	0x0800d5a7
 800c100:	00000000 	.word	0x00000000
 800c104:	0800be87 	.word	0x0800be87
 800c108:	0800d5a3 	.word	0x0800d5a3

0800c10c <__swbuf_r>:
 800c10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10e:	460e      	mov	r6, r1
 800c110:	4614      	mov	r4, r2
 800c112:	4605      	mov	r5, r0
 800c114:	b118      	cbz	r0, 800c11e <__swbuf_r+0x12>
 800c116:	6983      	ldr	r3, [r0, #24]
 800c118:	b90b      	cbnz	r3, 800c11e <__swbuf_r+0x12>
 800c11a:	f000 f9d9 	bl	800c4d0 <__sinit>
 800c11e:	4b21      	ldr	r3, [pc, #132]	; (800c1a4 <__swbuf_r+0x98>)
 800c120:	429c      	cmp	r4, r3
 800c122:	d12b      	bne.n	800c17c <__swbuf_r+0x70>
 800c124:	686c      	ldr	r4, [r5, #4]
 800c126:	69a3      	ldr	r3, [r4, #24]
 800c128:	60a3      	str	r3, [r4, #8]
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	071a      	lsls	r2, r3, #28
 800c12e:	d52f      	bpl.n	800c190 <__swbuf_r+0x84>
 800c130:	6923      	ldr	r3, [r4, #16]
 800c132:	b36b      	cbz	r3, 800c190 <__swbuf_r+0x84>
 800c134:	6923      	ldr	r3, [r4, #16]
 800c136:	6820      	ldr	r0, [r4, #0]
 800c138:	1ac0      	subs	r0, r0, r3
 800c13a:	6963      	ldr	r3, [r4, #20]
 800c13c:	b2f6      	uxtb	r6, r6
 800c13e:	4283      	cmp	r3, r0
 800c140:	4637      	mov	r7, r6
 800c142:	dc04      	bgt.n	800c14e <__swbuf_r+0x42>
 800c144:	4621      	mov	r1, r4
 800c146:	4628      	mov	r0, r5
 800c148:	f000 f92e 	bl	800c3a8 <_fflush_r>
 800c14c:	bb30      	cbnz	r0, 800c19c <__swbuf_r+0x90>
 800c14e:	68a3      	ldr	r3, [r4, #8]
 800c150:	3b01      	subs	r3, #1
 800c152:	60a3      	str	r3, [r4, #8]
 800c154:	6823      	ldr	r3, [r4, #0]
 800c156:	1c5a      	adds	r2, r3, #1
 800c158:	6022      	str	r2, [r4, #0]
 800c15a:	701e      	strb	r6, [r3, #0]
 800c15c:	6963      	ldr	r3, [r4, #20]
 800c15e:	3001      	adds	r0, #1
 800c160:	4283      	cmp	r3, r0
 800c162:	d004      	beq.n	800c16e <__swbuf_r+0x62>
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	07db      	lsls	r3, r3, #31
 800c168:	d506      	bpl.n	800c178 <__swbuf_r+0x6c>
 800c16a:	2e0a      	cmp	r6, #10
 800c16c:	d104      	bne.n	800c178 <__swbuf_r+0x6c>
 800c16e:	4621      	mov	r1, r4
 800c170:	4628      	mov	r0, r5
 800c172:	f000 f919 	bl	800c3a8 <_fflush_r>
 800c176:	b988      	cbnz	r0, 800c19c <__swbuf_r+0x90>
 800c178:	4638      	mov	r0, r7
 800c17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c17c:	4b0a      	ldr	r3, [pc, #40]	; (800c1a8 <__swbuf_r+0x9c>)
 800c17e:	429c      	cmp	r4, r3
 800c180:	d101      	bne.n	800c186 <__swbuf_r+0x7a>
 800c182:	68ac      	ldr	r4, [r5, #8]
 800c184:	e7cf      	b.n	800c126 <__swbuf_r+0x1a>
 800c186:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <__swbuf_r+0xa0>)
 800c188:	429c      	cmp	r4, r3
 800c18a:	bf08      	it	eq
 800c18c:	68ec      	ldreq	r4, [r5, #12]
 800c18e:	e7ca      	b.n	800c126 <__swbuf_r+0x1a>
 800c190:	4621      	mov	r1, r4
 800c192:	4628      	mov	r0, r5
 800c194:	f000 f80c 	bl	800c1b0 <__swsetup_r>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d0cb      	beq.n	800c134 <__swbuf_r+0x28>
 800c19c:	f04f 37ff 	mov.w	r7, #4294967295
 800c1a0:	e7ea      	b.n	800c178 <__swbuf_r+0x6c>
 800c1a2:	bf00      	nop
 800c1a4:	0800d5d0 	.word	0x0800d5d0
 800c1a8:	0800d5f0 	.word	0x0800d5f0
 800c1ac:	0800d5b0 	.word	0x0800d5b0

0800c1b0 <__swsetup_r>:
 800c1b0:	4b32      	ldr	r3, [pc, #200]	; (800c27c <__swsetup_r+0xcc>)
 800c1b2:	b570      	push	{r4, r5, r6, lr}
 800c1b4:	681d      	ldr	r5, [r3, #0]
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	b125      	cbz	r5, 800c1c6 <__swsetup_r+0x16>
 800c1bc:	69ab      	ldr	r3, [r5, #24]
 800c1be:	b913      	cbnz	r3, 800c1c6 <__swsetup_r+0x16>
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	f000 f985 	bl	800c4d0 <__sinit>
 800c1c6:	4b2e      	ldr	r3, [pc, #184]	; (800c280 <__swsetup_r+0xd0>)
 800c1c8:	429c      	cmp	r4, r3
 800c1ca:	d10f      	bne.n	800c1ec <__swsetup_r+0x3c>
 800c1cc:	686c      	ldr	r4, [r5, #4]
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1d4:	0719      	lsls	r1, r3, #28
 800c1d6:	d42c      	bmi.n	800c232 <__swsetup_r+0x82>
 800c1d8:	06dd      	lsls	r5, r3, #27
 800c1da:	d411      	bmi.n	800c200 <__swsetup_r+0x50>
 800c1dc:	2309      	movs	r3, #9
 800c1de:	6033      	str	r3, [r6, #0]
 800c1e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c1e4:	81a3      	strh	r3, [r4, #12]
 800c1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ea:	e03e      	b.n	800c26a <__swsetup_r+0xba>
 800c1ec:	4b25      	ldr	r3, [pc, #148]	; (800c284 <__swsetup_r+0xd4>)
 800c1ee:	429c      	cmp	r4, r3
 800c1f0:	d101      	bne.n	800c1f6 <__swsetup_r+0x46>
 800c1f2:	68ac      	ldr	r4, [r5, #8]
 800c1f4:	e7eb      	b.n	800c1ce <__swsetup_r+0x1e>
 800c1f6:	4b24      	ldr	r3, [pc, #144]	; (800c288 <__swsetup_r+0xd8>)
 800c1f8:	429c      	cmp	r4, r3
 800c1fa:	bf08      	it	eq
 800c1fc:	68ec      	ldreq	r4, [r5, #12]
 800c1fe:	e7e6      	b.n	800c1ce <__swsetup_r+0x1e>
 800c200:	0758      	lsls	r0, r3, #29
 800c202:	d512      	bpl.n	800c22a <__swsetup_r+0x7a>
 800c204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c206:	b141      	cbz	r1, 800c21a <__swsetup_r+0x6a>
 800c208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c20c:	4299      	cmp	r1, r3
 800c20e:	d002      	beq.n	800c216 <__swsetup_r+0x66>
 800c210:	4630      	mov	r0, r6
 800c212:	f7ff fdd5 	bl	800bdc0 <_free_r>
 800c216:	2300      	movs	r3, #0
 800c218:	6363      	str	r3, [r4, #52]	; 0x34
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c220:	81a3      	strh	r3, [r4, #12]
 800c222:	2300      	movs	r3, #0
 800c224:	6063      	str	r3, [r4, #4]
 800c226:	6923      	ldr	r3, [r4, #16]
 800c228:	6023      	str	r3, [r4, #0]
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	f043 0308 	orr.w	r3, r3, #8
 800c230:	81a3      	strh	r3, [r4, #12]
 800c232:	6923      	ldr	r3, [r4, #16]
 800c234:	b94b      	cbnz	r3, 800c24a <__swsetup_r+0x9a>
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c23c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c240:	d003      	beq.n	800c24a <__swsetup_r+0x9a>
 800c242:	4621      	mov	r1, r4
 800c244:	4630      	mov	r0, r6
 800c246:	f000 fa09 	bl	800c65c <__smakebuf_r>
 800c24a:	89a0      	ldrh	r0, [r4, #12]
 800c24c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c250:	f010 0301 	ands.w	r3, r0, #1
 800c254:	d00a      	beq.n	800c26c <__swsetup_r+0xbc>
 800c256:	2300      	movs	r3, #0
 800c258:	60a3      	str	r3, [r4, #8]
 800c25a:	6963      	ldr	r3, [r4, #20]
 800c25c:	425b      	negs	r3, r3
 800c25e:	61a3      	str	r3, [r4, #24]
 800c260:	6923      	ldr	r3, [r4, #16]
 800c262:	b943      	cbnz	r3, 800c276 <__swsetup_r+0xc6>
 800c264:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c268:	d1ba      	bne.n	800c1e0 <__swsetup_r+0x30>
 800c26a:	bd70      	pop	{r4, r5, r6, pc}
 800c26c:	0781      	lsls	r1, r0, #30
 800c26e:	bf58      	it	pl
 800c270:	6963      	ldrpl	r3, [r4, #20]
 800c272:	60a3      	str	r3, [r4, #8]
 800c274:	e7f4      	b.n	800c260 <__swsetup_r+0xb0>
 800c276:	2000      	movs	r0, #0
 800c278:	e7f7      	b.n	800c26a <__swsetup_r+0xba>
 800c27a:	bf00      	nop
 800c27c:	2000001c 	.word	0x2000001c
 800c280:	0800d5d0 	.word	0x0800d5d0
 800c284:	0800d5f0 	.word	0x0800d5f0
 800c288:	0800d5b0 	.word	0x0800d5b0

0800c28c <abort>:
 800c28c:	b508      	push	{r3, lr}
 800c28e:	2006      	movs	r0, #6
 800c290:	f000 fa4c 	bl	800c72c <raise>
 800c294:	2001      	movs	r0, #1
 800c296:	f7f6 fac3 	bl	8002820 <_exit>
	...

0800c29c <__sflush_r>:
 800c29c:	898a      	ldrh	r2, [r1, #12]
 800c29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	0710      	lsls	r0, r2, #28
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	d458      	bmi.n	800c35c <__sflush_r+0xc0>
 800c2aa:	684b      	ldr	r3, [r1, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	dc05      	bgt.n	800c2bc <__sflush_r+0x20>
 800c2b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	dc02      	bgt.n	800c2bc <__sflush_r+0x20>
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2be:	2e00      	cmp	r6, #0
 800c2c0:	d0f9      	beq.n	800c2b6 <__sflush_r+0x1a>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2c8:	682f      	ldr	r7, [r5, #0]
 800c2ca:	602b      	str	r3, [r5, #0]
 800c2cc:	d032      	beq.n	800c334 <__sflush_r+0x98>
 800c2ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	075a      	lsls	r2, r3, #29
 800c2d4:	d505      	bpl.n	800c2e2 <__sflush_r+0x46>
 800c2d6:	6863      	ldr	r3, [r4, #4]
 800c2d8:	1ac0      	subs	r0, r0, r3
 800c2da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2dc:	b10b      	cbz	r3, 800c2e2 <__sflush_r+0x46>
 800c2de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2e0:	1ac0      	subs	r0, r0, r3
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2e8:	6a21      	ldr	r1, [r4, #32]
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	47b0      	blx	r6
 800c2ee:	1c43      	adds	r3, r0, #1
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	d106      	bne.n	800c302 <__sflush_r+0x66>
 800c2f4:	6829      	ldr	r1, [r5, #0]
 800c2f6:	291d      	cmp	r1, #29
 800c2f8:	d82c      	bhi.n	800c354 <__sflush_r+0xb8>
 800c2fa:	4a2a      	ldr	r2, [pc, #168]	; (800c3a4 <__sflush_r+0x108>)
 800c2fc:	40ca      	lsrs	r2, r1
 800c2fe:	07d6      	lsls	r6, r2, #31
 800c300:	d528      	bpl.n	800c354 <__sflush_r+0xb8>
 800c302:	2200      	movs	r2, #0
 800c304:	6062      	str	r2, [r4, #4]
 800c306:	04d9      	lsls	r1, r3, #19
 800c308:	6922      	ldr	r2, [r4, #16]
 800c30a:	6022      	str	r2, [r4, #0]
 800c30c:	d504      	bpl.n	800c318 <__sflush_r+0x7c>
 800c30e:	1c42      	adds	r2, r0, #1
 800c310:	d101      	bne.n	800c316 <__sflush_r+0x7a>
 800c312:	682b      	ldr	r3, [r5, #0]
 800c314:	b903      	cbnz	r3, 800c318 <__sflush_r+0x7c>
 800c316:	6560      	str	r0, [r4, #84]	; 0x54
 800c318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c31a:	602f      	str	r7, [r5, #0]
 800c31c:	2900      	cmp	r1, #0
 800c31e:	d0ca      	beq.n	800c2b6 <__sflush_r+0x1a>
 800c320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c324:	4299      	cmp	r1, r3
 800c326:	d002      	beq.n	800c32e <__sflush_r+0x92>
 800c328:	4628      	mov	r0, r5
 800c32a:	f7ff fd49 	bl	800bdc0 <_free_r>
 800c32e:	2000      	movs	r0, #0
 800c330:	6360      	str	r0, [r4, #52]	; 0x34
 800c332:	e7c1      	b.n	800c2b8 <__sflush_r+0x1c>
 800c334:	6a21      	ldr	r1, [r4, #32]
 800c336:	2301      	movs	r3, #1
 800c338:	4628      	mov	r0, r5
 800c33a:	47b0      	blx	r6
 800c33c:	1c41      	adds	r1, r0, #1
 800c33e:	d1c7      	bne.n	800c2d0 <__sflush_r+0x34>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d0c4      	beq.n	800c2d0 <__sflush_r+0x34>
 800c346:	2b1d      	cmp	r3, #29
 800c348:	d001      	beq.n	800c34e <__sflush_r+0xb2>
 800c34a:	2b16      	cmp	r3, #22
 800c34c:	d101      	bne.n	800c352 <__sflush_r+0xb6>
 800c34e:	602f      	str	r7, [r5, #0]
 800c350:	e7b1      	b.n	800c2b6 <__sflush_r+0x1a>
 800c352:	89a3      	ldrh	r3, [r4, #12]
 800c354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c358:	81a3      	strh	r3, [r4, #12]
 800c35a:	e7ad      	b.n	800c2b8 <__sflush_r+0x1c>
 800c35c:	690f      	ldr	r7, [r1, #16]
 800c35e:	2f00      	cmp	r7, #0
 800c360:	d0a9      	beq.n	800c2b6 <__sflush_r+0x1a>
 800c362:	0793      	lsls	r3, r2, #30
 800c364:	680e      	ldr	r6, [r1, #0]
 800c366:	bf08      	it	eq
 800c368:	694b      	ldreq	r3, [r1, #20]
 800c36a:	600f      	str	r7, [r1, #0]
 800c36c:	bf18      	it	ne
 800c36e:	2300      	movne	r3, #0
 800c370:	eba6 0807 	sub.w	r8, r6, r7
 800c374:	608b      	str	r3, [r1, #8]
 800c376:	f1b8 0f00 	cmp.w	r8, #0
 800c37a:	dd9c      	ble.n	800c2b6 <__sflush_r+0x1a>
 800c37c:	6a21      	ldr	r1, [r4, #32]
 800c37e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c380:	4643      	mov	r3, r8
 800c382:	463a      	mov	r2, r7
 800c384:	4628      	mov	r0, r5
 800c386:	47b0      	blx	r6
 800c388:	2800      	cmp	r0, #0
 800c38a:	dc06      	bgt.n	800c39a <__sflush_r+0xfe>
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c392:	81a3      	strh	r3, [r4, #12]
 800c394:	f04f 30ff 	mov.w	r0, #4294967295
 800c398:	e78e      	b.n	800c2b8 <__sflush_r+0x1c>
 800c39a:	4407      	add	r7, r0
 800c39c:	eba8 0800 	sub.w	r8, r8, r0
 800c3a0:	e7e9      	b.n	800c376 <__sflush_r+0xda>
 800c3a2:	bf00      	nop
 800c3a4:	20400001 	.word	0x20400001

0800c3a8 <_fflush_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	690b      	ldr	r3, [r1, #16]
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	b913      	cbnz	r3, 800c3b8 <_fflush_r+0x10>
 800c3b2:	2500      	movs	r5, #0
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	b118      	cbz	r0, 800c3c2 <_fflush_r+0x1a>
 800c3ba:	6983      	ldr	r3, [r0, #24]
 800c3bc:	b90b      	cbnz	r3, 800c3c2 <_fflush_r+0x1a>
 800c3be:	f000 f887 	bl	800c4d0 <__sinit>
 800c3c2:	4b14      	ldr	r3, [pc, #80]	; (800c414 <_fflush_r+0x6c>)
 800c3c4:	429c      	cmp	r4, r3
 800c3c6:	d11b      	bne.n	800c400 <_fflush_r+0x58>
 800c3c8:	686c      	ldr	r4, [r5, #4]
 800c3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d0ef      	beq.n	800c3b2 <_fflush_r+0xa>
 800c3d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3d4:	07d0      	lsls	r0, r2, #31
 800c3d6:	d404      	bmi.n	800c3e2 <_fflush_r+0x3a>
 800c3d8:	0599      	lsls	r1, r3, #22
 800c3da:	d402      	bmi.n	800c3e2 <_fflush_r+0x3a>
 800c3dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3de:	f000 f915 	bl	800c60c <__retarget_lock_acquire_recursive>
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	f7ff ff59 	bl	800c29c <__sflush_r>
 800c3ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3ec:	07da      	lsls	r2, r3, #31
 800c3ee:	4605      	mov	r5, r0
 800c3f0:	d4e0      	bmi.n	800c3b4 <_fflush_r+0xc>
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	059b      	lsls	r3, r3, #22
 800c3f6:	d4dd      	bmi.n	800c3b4 <_fflush_r+0xc>
 800c3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3fa:	f000 f908 	bl	800c60e <__retarget_lock_release_recursive>
 800c3fe:	e7d9      	b.n	800c3b4 <_fflush_r+0xc>
 800c400:	4b05      	ldr	r3, [pc, #20]	; (800c418 <_fflush_r+0x70>)
 800c402:	429c      	cmp	r4, r3
 800c404:	d101      	bne.n	800c40a <_fflush_r+0x62>
 800c406:	68ac      	ldr	r4, [r5, #8]
 800c408:	e7df      	b.n	800c3ca <_fflush_r+0x22>
 800c40a:	4b04      	ldr	r3, [pc, #16]	; (800c41c <_fflush_r+0x74>)
 800c40c:	429c      	cmp	r4, r3
 800c40e:	bf08      	it	eq
 800c410:	68ec      	ldreq	r4, [r5, #12]
 800c412:	e7da      	b.n	800c3ca <_fflush_r+0x22>
 800c414:	0800d5d0 	.word	0x0800d5d0
 800c418:	0800d5f0 	.word	0x0800d5f0
 800c41c:	0800d5b0 	.word	0x0800d5b0

0800c420 <std>:
 800c420:	2300      	movs	r3, #0
 800c422:	b510      	push	{r4, lr}
 800c424:	4604      	mov	r4, r0
 800c426:	e9c0 3300 	strd	r3, r3, [r0]
 800c42a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c42e:	6083      	str	r3, [r0, #8]
 800c430:	8181      	strh	r1, [r0, #12]
 800c432:	6643      	str	r3, [r0, #100]	; 0x64
 800c434:	81c2      	strh	r2, [r0, #14]
 800c436:	6183      	str	r3, [r0, #24]
 800c438:	4619      	mov	r1, r3
 800c43a:	2208      	movs	r2, #8
 800c43c:	305c      	adds	r0, #92	; 0x5c
 800c43e:	f7fc fb9d 	bl	8008b7c <memset>
 800c442:	4b05      	ldr	r3, [pc, #20]	; (800c458 <std+0x38>)
 800c444:	6263      	str	r3, [r4, #36]	; 0x24
 800c446:	4b05      	ldr	r3, [pc, #20]	; (800c45c <std+0x3c>)
 800c448:	62a3      	str	r3, [r4, #40]	; 0x28
 800c44a:	4b05      	ldr	r3, [pc, #20]	; (800c460 <std+0x40>)
 800c44c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c44e:	4b05      	ldr	r3, [pc, #20]	; (800c464 <std+0x44>)
 800c450:	6224      	str	r4, [r4, #32]
 800c452:	6323      	str	r3, [r4, #48]	; 0x30
 800c454:	bd10      	pop	{r4, pc}
 800c456:	bf00      	nop
 800c458:	0800c765 	.word	0x0800c765
 800c45c:	0800c787 	.word	0x0800c787
 800c460:	0800c7bf 	.word	0x0800c7bf
 800c464:	0800c7e3 	.word	0x0800c7e3

0800c468 <_cleanup_r>:
 800c468:	4901      	ldr	r1, [pc, #4]	; (800c470 <_cleanup_r+0x8>)
 800c46a:	f000 b8af 	b.w	800c5cc <_fwalk_reent>
 800c46e:	bf00      	nop
 800c470:	0800c3a9 	.word	0x0800c3a9

0800c474 <__sfmoreglue>:
 800c474:	b570      	push	{r4, r5, r6, lr}
 800c476:	2268      	movs	r2, #104	; 0x68
 800c478:	1e4d      	subs	r5, r1, #1
 800c47a:	4355      	muls	r5, r2
 800c47c:	460e      	mov	r6, r1
 800c47e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c482:	f7fe fb95 	bl	800abb0 <_malloc_r>
 800c486:	4604      	mov	r4, r0
 800c488:	b140      	cbz	r0, 800c49c <__sfmoreglue+0x28>
 800c48a:	2100      	movs	r1, #0
 800c48c:	e9c0 1600 	strd	r1, r6, [r0]
 800c490:	300c      	adds	r0, #12
 800c492:	60a0      	str	r0, [r4, #8]
 800c494:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c498:	f7fc fb70 	bl	8008b7c <memset>
 800c49c:	4620      	mov	r0, r4
 800c49e:	bd70      	pop	{r4, r5, r6, pc}

0800c4a0 <__sfp_lock_acquire>:
 800c4a0:	4801      	ldr	r0, [pc, #4]	; (800c4a8 <__sfp_lock_acquire+0x8>)
 800c4a2:	f000 b8b3 	b.w	800c60c <__retarget_lock_acquire_recursive>
 800c4a6:	bf00      	nop
 800c4a8:	20000961 	.word	0x20000961

0800c4ac <__sfp_lock_release>:
 800c4ac:	4801      	ldr	r0, [pc, #4]	; (800c4b4 <__sfp_lock_release+0x8>)
 800c4ae:	f000 b8ae 	b.w	800c60e <__retarget_lock_release_recursive>
 800c4b2:	bf00      	nop
 800c4b4:	20000961 	.word	0x20000961

0800c4b8 <__sinit_lock_acquire>:
 800c4b8:	4801      	ldr	r0, [pc, #4]	; (800c4c0 <__sinit_lock_acquire+0x8>)
 800c4ba:	f000 b8a7 	b.w	800c60c <__retarget_lock_acquire_recursive>
 800c4be:	bf00      	nop
 800c4c0:	20000962 	.word	0x20000962

0800c4c4 <__sinit_lock_release>:
 800c4c4:	4801      	ldr	r0, [pc, #4]	; (800c4cc <__sinit_lock_release+0x8>)
 800c4c6:	f000 b8a2 	b.w	800c60e <__retarget_lock_release_recursive>
 800c4ca:	bf00      	nop
 800c4cc:	20000962 	.word	0x20000962

0800c4d0 <__sinit>:
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	f7ff fff0 	bl	800c4b8 <__sinit_lock_acquire>
 800c4d8:	69a3      	ldr	r3, [r4, #24]
 800c4da:	b11b      	cbz	r3, 800c4e4 <__sinit+0x14>
 800c4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e0:	f7ff bff0 	b.w	800c4c4 <__sinit_lock_release>
 800c4e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4e8:	6523      	str	r3, [r4, #80]	; 0x50
 800c4ea:	4b13      	ldr	r3, [pc, #76]	; (800c538 <__sinit+0x68>)
 800c4ec:	4a13      	ldr	r2, [pc, #76]	; (800c53c <__sinit+0x6c>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4f2:	42a3      	cmp	r3, r4
 800c4f4:	bf04      	itt	eq
 800c4f6:	2301      	moveq	r3, #1
 800c4f8:	61a3      	streq	r3, [r4, #24]
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f000 f820 	bl	800c540 <__sfp>
 800c500:	6060      	str	r0, [r4, #4]
 800c502:	4620      	mov	r0, r4
 800c504:	f000 f81c 	bl	800c540 <__sfp>
 800c508:	60a0      	str	r0, [r4, #8]
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 f818 	bl	800c540 <__sfp>
 800c510:	2200      	movs	r2, #0
 800c512:	60e0      	str	r0, [r4, #12]
 800c514:	2104      	movs	r1, #4
 800c516:	6860      	ldr	r0, [r4, #4]
 800c518:	f7ff ff82 	bl	800c420 <std>
 800c51c:	68a0      	ldr	r0, [r4, #8]
 800c51e:	2201      	movs	r2, #1
 800c520:	2109      	movs	r1, #9
 800c522:	f7ff ff7d 	bl	800c420 <std>
 800c526:	68e0      	ldr	r0, [r4, #12]
 800c528:	2202      	movs	r2, #2
 800c52a:	2112      	movs	r1, #18
 800c52c:	f7ff ff78 	bl	800c420 <std>
 800c530:	2301      	movs	r3, #1
 800c532:	61a3      	str	r3, [r4, #24]
 800c534:	e7d2      	b.n	800c4dc <__sinit+0xc>
 800c536:	bf00      	nop
 800c538:	0800d17c 	.word	0x0800d17c
 800c53c:	0800c469 	.word	0x0800c469

0800c540 <__sfp>:
 800c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c542:	4607      	mov	r7, r0
 800c544:	f7ff ffac 	bl	800c4a0 <__sfp_lock_acquire>
 800c548:	4b1e      	ldr	r3, [pc, #120]	; (800c5c4 <__sfp+0x84>)
 800c54a:	681e      	ldr	r6, [r3, #0]
 800c54c:	69b3      	ldr	r3, [r6, #24]
 800c54e:	b913      	cbnz	r3, 800c556 <__sfp+0x16>
 800c550:	4630      	mov	r0, r6
 800c552:	f7ff ffbd 	bl	800c4d0 <__sinit>
 800c556:	3648      	adds	r6, #72	; 0x48
 800c558:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	d503      	bpl.n	800c568 <__sfp+0x28>
 800c560:	6833      	ldr	r3, [r6, #0]
 800c562:	b30b      	cbz	r3, 800c5a8 <__sfp+0x68>
 800c564:	6836      	ldr	r6, [r6, #0]
 800c566:	e7f7      	b.n	800c558 <__sfp+0x18>
 800c568:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c56c:	b9d5      	cbnz	r5, 800c5a4 <__sfp+0x64>
 800c56e:	4b16      	ldr	r3, [pc, #88]	; (800c5c8 <__sfp+0x88>)
 800c570:	60e3      	str	r3, [r4, #12]
 800c572:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c576:	6665      	str	r5, [r4, #100]	; 0x64
 800c578:	f000 f847 	bl	800c60a <__retarget_lock_init_recursive>
 800c57c:	f7ff ff96 	bl	800c4ac <__sfp_lock_release>
 800c580:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c584:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c588:	6025      	str	r5, [r4, #0]
 800c58a:	61a5      	str	r5, [r4, #24]
 800c58c:	2208      	movs	r2, #8
 800c58e:	4629      	mov	r1, r5
 800c590:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c594:	f7fc faf2 	bl	8008b7c <memset>
 800c598:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c59c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5a4:	3468      	adds	r4, #104	; 0x68
 800c5a6:	e7d9      	b.n	800c55c <__sfp+0x1c>
 800c5a8:	2104      	movs	r1, #4
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	f7ff ff62 	bl	800c474 <__sfmoreglue>
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	6030      	str	r0, [r6, #0]
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d1d5      	bne.n	800c564 <__sfp+0x24>
 800c5b8:	f7ff ff78 	bl	800c4ac <__sfp_lock_release>
 800c5bc:	230c      	movs	r3, #12
 800c5be:	603b      	str	r3, [r7, #0]
 800c5c0:	e7ee      	b.n	800c5a0 <__sfp+0x60>
 800c5c2:	bf00      	nop
 800c5c4:	0800d17c 	.word	0x0800d17c
 800c5c8:	ffff0001 	.word	0xffff0001

0800c5cc <_fwalk_reent>:
 800c5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	4688      	mov	r8, r1
 800c5d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5d8:	2700      	movs	r7, #0
 800c5da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5de:	f1b9 0901 	subs.w	r9, r9, #1
 800c5e2:	d505      	bpl.n	800c5f0 <_fwalk_reent+0x24>
 800c5e4:	6824      	ldr	r4, [r4, #0]
 800c5e6:	2c00      	cmp	r4, #0
 800c5e8:	d1f7      	bne.n	800c5da <_fwalk_reent+0xe>
 800c5ea:	4638      	mov	r0, r7
 800c5ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5f0:	89ab      	ldrh	r3, [r5, #12]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d907      	bls.n	800c606 <_fwalk_reent+0x3a>
 800c5f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	d003      	beq.n	800c606 <_fwalk_reent+0x3a>
 800c5fe:	4629      	mov	r1, r5
 800c600:	4630      	mov	r0, r6
 800c602:	47c0      	blx	r8
 800c604:	4307      	orrs	r7, r0
 800c606:	3568      	adds	r5, #104	; 0x68
 800c608:	e7e9      	b.n	800c5de <_fwalk_reent+0x12>

0800c60a <__retarget_lock_init_recursive>:
 800c60a:	4770      	bx	lr

0800c60c <__retarget_lock_acquire_recursive>:
 800c60c:	4770      	bx	lr

0800c60e <__retarget_lock_release_recursive>:
 800c60e:	4770      	bx	lr

0800c610 <__swhatbuf_r>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	460e      	mov	r6, r1
 800c614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c618:	2900      	cmp	r1, #0
 800c61a:	b096      	sub	sp, #88	; 0x58
 800c61c:	4614      	mov	r4, r2
 800c61e:	461d      	mov	r5, r3
 800c620:	da08      	bge.n	800c634 <__swhatbuf_r+0x24>
 800c622:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	602a      	str	r2, [r5, #0]
 800c62a:	061a      	lsls	r2, r3, #24
 800c62c:	d410      	bmi.n	800c650 <__swhatbuf_r+0x40>
 800c62e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c632:	e00e      	b.n	800c652 <__swhatbuf_r+0x42>
 800c634:	466a      	mov	r2, sp
 800c636:	f000 f8fb 	bl	800c830 <_fstat_r>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	dbf1      	blt.n	800c622 <__swhatbuf_r+0x12>
 800c63e:	9a01      	ldr	r2, [sp, #4]
 800c640:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c644:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c648:	425a      	negs	r2, r3
 800c64a:	415a      	adcs	r2, r3
 800c64c:	602a      	str	r2, [r5, #0]
 800c64e:	e7ee      	b.n	800c62e <__swhatbuf_r+0x1e>
 800c650:	2340      	movs	r3, #64	; 0x40
 800c652:	2000      	movs	r0, #0
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	b016      	add	sp, #88	; 0x58
 800c658:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c65c <__smakebuf_r>:
 800c65c:	898b      	ldrh	r3, [r1, #12]
 800c65e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c660:	079d      	lsls	r5, r3, #30
 800c662:	4606      	mov	r6, r0
 800c664:	460c      	mov	r4, r1
 800c666:	d507      	bpl.n	800c678 <__smakebuf_r+0x1c>
 800c668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	6123      	str	r3, [r4, #16]
 800c670:	2301      	movs	r3, #1
 800c672:	6163      	str	r3, [r4, #20]
 800c674:	b002      	add	sp, #8
 800c676:	bd70      	pop	{r4, r5, r6, pc}
 800c678:	ab01      	add	r3, sp, #4
 800c67a:	466a      	mov	r2, sp
 800c67c:	f7ff ffc8 	bl	800c610 <__swhatbuf_r>
 800c680:	9900      	ldr	r1, [sp, #0]
 800c682:	4605      	mov	r5, r0
 800c684:	4630      	mov	r0, r6
 800c686:	f7fe fa93 	bl	800abb0 <_malloc_r>
 800c68a:	b948      	cbnz	r0, 800c6a0 <__smakebuf_r+0x44>
 800c68c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c690:	059a      	lsls	r2, r3, #22
 800c692:	d4ef      	bmi.n	800c674 <__smakebuf_r+0x18>
 800c694:	f023 0303 	bic.w	r3, r3, #3
 800c698:	f043 0302 	orr.w	r3, r3, #2
 800c69c:	81a3      	strh	r3, [r4, #12]
 800c69e:	e7e3      	b.n	800c668 <__smakebuf_r+0xc>
 800c6a0:	4b0d      	ldr	r3, [pc, #52]	; (800c6d8 <__smakebuf_r+0x7c>)
 800c6a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6a4:	89a3      	ldrh	r3, [r4, #12]
 800c6a6:	6020      	str	r0, [r4, #0]
 800c6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ac:	81a3      	strh	r3, [r4, #12]
 800c6ae:	9b00      	ldr	r3, [sp, #0]
 800c6b0:	6163      	str	r3, [r4, #20]
 800c6b2:	9b01      	ldr	r3, [sp, #4]
 800c6b4:	6120      	str	r0, [r4, #16]
 800c6b6:	b15b      	cbz	r3, 800c6d0 <__smakebuf_r+0x74>
 800c6b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f000 f8c9 	bl	800c854 <_isatty_r>
 800c6c2:	b128      	cbz	r0, 800c6d0 <__smakebuf_r+0x74>
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	f023 0303 	bic.w	r3, r3, #3
 800c6ca:	f043 0301 	orr.w	r3, r3, #1
 800c6ce:	81a3      	strh	r3, [r4, #12]
 800c6d0:	89a0      	ldrh	r0, [r4, #12]
 800c6d2:	4305      	orrs	r5, r0
 800c6d4:	81a5      	strh	r5, [r4, #12]
 800c6d6:	e7cd      	b.n	800c674 <__smakebuf_r+0x18>
 800c6d8:	0800c469 	.word	0x0800c469

0800c6dc <_raise_r>:
 800c6dc:	291f      	cmp	r1, #31
 800c6de:	b538      	push	{r3, r4, r5, lr}
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	460d      	mov	r5, r1
 800c6e4:	d904      	bls.n	800c6f0 <_raise_r+0x14>
 800c6e6:	2316      	movs	r3, #22
 800c6e8:	6003      	str	r3, [r0, #0]
 800c6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ee:	bd38      	pop	{r3, r4, r5, pc}
 800c6f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c6f2:	b112      	cbz	r2, 800c6fa <_raise_r+0x1e>
 800c6f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6f8:	b94b      	cbnz	r3, 800c70e <_raise_r+0x32>
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 f830 	bl	800c760 <_getpid_r>
 800c700:	462a      	mov	r2, r5
 800c702:	4601      	mov	r1, r0
 800c704:	4620      	mov	r0, r4
 800c706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c70a:	f000 b817 	b.w	800c73c <_kill_r>
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d00a      	beq.n	800c728 <_raise_r+0x4c>
 800c712:	1c59      	adds	r1, r3, #1
 800c714:	d103      	bne.n	800c71e <_raise_r+0x42>
 800c716:	2316      	movs	r3, #22
 800c718:	6003      	str	r3, [r0, #0]
 800c71a:	2001      	movs	r0, #1
 800c71c:	e7e7      	b.n	800c6ee <_raise_r+0x12>
 800c71e:	2400      	movs	r4, #0
 800c720:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c724:	4628      	mov	r0, r5
 800c726:	4798      	blx	r3
 800c728:	2000      	movs	r0, #0
 800c72a:	e7e0      	b.n	800c6ee <_raise_r+0x12>

0800c72c <raise>:
 800c72c:	4b02      	ldr	r3, [pc, #8]	; (800c738 <raise+0xc>)
 800c72e:	4601      	mov	r1, r0
 800c730:	6818      	ldr	r0, [r3, #0]
 800c732:	f7ff bfd3 	b.w	800c6dc <_raise_r>
 800c736:	bf00      	nop
 800c738:	2000001c 	.word	0x2000001c

0800c73c <_kill_r>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	4d07      	ldr	r5, [pc, #28]	; (800c75c <_kill_r+0x20>)
 800c740:	2300      	movs	r3, #0
 800c742:	4604      	mov	r4, r0
 800c744:	4608      	mov	r0, r1
 800c746:	4611      	mov	r1, r2
 800c748:	602b      	str	r3, [r5, #0]
 800c74a:	f7f6 f859 	bl	8002800 <_kill>
 800c74e:	1c43      	adds	r3, r0, #1
 800c750:	d102      	bne.n	800c758 <_kill_r+0x1c>
 800c752:	682b      	ldr	r3, [r5, #0]
 800c754:	b103      	cbz	r3, 800c758 <_kill_r+0x1c>
 800c756:	6023      	str	r3, [r4, #0]
 800c758:	bd38      	pop	{r3, r4, r5, pc}
 800c75a:	bf00      	nop
 800c75c:	2000095c 	.word	0x2000095c

0800c760 <_getpid_r>:
 800c760:	f7f6 b846 	b.w	80027f0 <_getpid>

0800c764 <__sread>:
 800c764:	b510      	push	{r4, lr}
 800c766:	460c      	mov	r4, r1
 800c768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c76c:	f000 f894 	bl	800c898 <_read_r>
 800c770:	2800      	cmp	r0, #0
 800c772:	bfab      	itete	ge
 800c774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c776:	89a3      	ldrhlt	r3, [r4, #12]
 800c778:	181b      	addge	r3, r3, r0
 800c77a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c77e:	bfac      	ite	ge
 800c780:	6563      	strge	r3, [r4, #84]	; 0x54
 800c782:	81a3      	strhlt	r3, [r4, #12]
 800c784:	bd10      	pop	{r4, pc}

0800c786 <__swrite>:
 800c786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c78a:	461f      	mov	r7, r3
 800c78c:	898b      	ldrh	r3, [r1, #12]
 800c78e:	05db      	lsls	r3, r3, #23
 800c790:	4605      	mov	r5, r0
 800c792:	460c      	mov	r4, r1
 800c794:	4616      	mov	r6, r2
 800c796:	d505      	bpl.n	800c7a4 <__swrite+0x1e>
 800c798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c79c:	2302      	movs	r3, #2
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f000 f868 	bl	800c874 <_lseek_r>
 800c7a4:	89a3      	ldrh	r3, [r4, #12]
 800c7a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7ae:	81a3      	strh	r3, [r4, #12]
 800c7b0:	4632      	mov	r2, r6
 800c7b2:	463b      	mov	r3, r7
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ba:	f000 b817 	b.w	800c7ec <_write_r>

0800c7be <__sseek>:
 800c7be:	b510      	push	{r4, lr}
 800c7c0:	460c      	mov	r4, r1
 800c7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c6:	f000 f855 	bl	800c874 <_lseek_r>
 800c7ca:	1c43      	adds	r3, r0, #1
 800c7cc:	89a3      	ldrh	r3, [r4, #12]
 800c7ce:	bf15      	itete	ne
 800c7d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7da:	81a3      	strheq	r3, [r4, #12]
 800c7dc:	bf18      	it	ne
 800c7de:	81a3      	strhne	r3, [r4, #12]
 800c7e0:	bd10      	pop	{r4, pc}

0800c7e2 <__sclose>:
 800c7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e6:	f000 b813 	b.w	800c810 <_close_r>
	...

0800c7ec <_write_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4d07      	ldr	r5, [pc, #28]	; (800c80c <_write_r+0x20>)
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	4608      	mov	r0, r1
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	602a      	str	r2, [r5, #0]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	f7f6 f837 	bl	800286e <_write>
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d102      	bne.n	800c80a <_write_r+0x1e>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	b103      	cbz	r3, 800c80a <_write_r+0x1e>
 800c808:	6023      	str	r3, [r4, #0]
 800c80a:	bd38      	pop	{r3, r4, r5, pc}
 800c80c:	2000095c 	.word	0x2000095c

0800c810 <_close_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4d06      	ldr	r5, [pc, #24]	; (800c82c <_close_r+0x1c>)
 800c814:	2300      	movs	r3, #0
 800c816:	4604      	mov	r4, r0
 800c818:	4608      	mov	r0, r1
 800c81a:	602b      	str	r3, [r5, #0]
 800c81c:	f7f6 f843 	bl	80028a6 <_close>
 800c820:	1c43      	adds	r3, r0, #1
 800c822:	d102      	bne.n	800c82a <_close_r+0x1a>
 800c824:	682b      	ldr	r3, [r5, #0]
 800c826:	b103      	cbz	r3, 800c82a <_close_r+0x1a>
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	bd38      	pop	{r3, r4, r5, pc}
 800c82c:	2000095c 	.word	0x2000095c

0800c830 <_fstat_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4d07      	ldr	r5, [pc, #28]	; (800c850 <_fstat_r+0x20>)
 800c834:	2300      	movs	r3, #0
 800c836:	4604      	mov	r4, r0
 800c838:	4608      	mov	r0, r1
 800c83a:	4611      	mov	r1, r2
 800c83c:	602b      	str	r3, [r5, #0]
 800c83e:	f7f6 f83e 	bl	80028be <_fstat>
 800c842:	1c43      	adds	r3, r0, #1
 800c844:	d102      	bne.n	800c84c <_fstat_r+0x1c>
 800c846:	682b      	ldr	r3, [r5, #0]
 800c848:	b103      	cbz	r3, 800c84c <_fstat_r+0x1c>
 800c84a:	6023      	str	r3, [r4, #0]
 800c84c:	bd38      	pop	{r3, r4, r5, pc}
 800c84e:	bf00      	nop
 800c850:	2000095c 	.word	0x2000095c

0800c854 <_isatty_r>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	4d06      	ldr	r5, [pc, #24]	; (800c870 <_isatty_r+0x1c>)
 800c858:	2300      	movs	r3, #0
 800c85a:	4604      	mov	r4, r0
 800c85c:	4608      	mov	r0, r1
 800c85e:	602b      	str	r3, [r5, #0]
 800c860:	f7f6 f83d 	bl	80028de <_isatty>
 800c864:	1c43      	adds	r3, r0, #1
 800c866:	d102      	bne.n	800c86e <_isatty_r+0x1a>
 800c868:	682b      	ldr	r3, [r5, #0]
 800c86a:	b103      	cbz	r3, 800c86e <_isatty_r+0x1a>
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	bd38      	pop	{r3, r4, r5, pc}
 800c870:	2000095c 	.word	0x2000095c

0800c874 <_lseek_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	4d07      	ldr	r5, [pc, #28]	; (800c894 <_lseek_r+0x20>)
 800c878:	4604      	mov	r4, r0
 800c87a:	4608      	mov	r0, r1
 800c87c:	4611      	mov	r1, r2
 800c87e:	2200      	movs	r2, #0
 800c880:	602a      	str	r2, [r5, #0]
 800c882:	461a      	mov	r2, r3
 800c884:	f7f6 f836 	bl	80028f4 <_lseek>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_lseek_r+0x1e>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_lseek_r+0x1e>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	2000095c 	.word	0x2000095c

0800c898 <_read_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d07      	ldr	r5, [pc, #28]	; (800c8b8 <_read_r+0x20>)
 800c89c:	4604      	mov	r4, r0
 800c89e:	4608      	mov	r0, r1
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	602a      	str	r2, [r5, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	f7f5 ffc4 	bl	8002834 <_read>
 800c8ac:	1c43      	adds	r3, r0, #1
 800c8ae:	d102      	bne.n	800c8b6 <_read_r+0x1e>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	b103      	cbz	r3, 800c8b6 <_read_r+0x1e>
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	bd38      	pop	{r3, r4, r5, pc}
 800c8b8:	2000095c 	.word	0x2000095c

0800c8bc <round>:
 800c8bc:	ec51 0b10 	vmov	r0, r1, d0
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c8c6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c8ca:	2c13      	cmp	r4, #19
 800c8cc:	ee10 2a10 	vmov	r2, s0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	dc19      	bgt.n	800c908 <round+0x4c>
 800c8d4:	2c00      	cmp	r4, #0
 800c8d6:	da09      	bge.n	800c8ec <round+0x30>
 800c8d8:	3401      	adds	r4, #1
 800c8da:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c8de:	d103      	bne.n	800c8e8 <round+0x2c>
 800c8e0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c8e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	e028      	b.n	800c93e <round+0x82>
 800c8ec:	4d15      	ldr	r5, [pc, #84]	; (800c944 <round+0x88>)
 800c8ee:	4125      	asrs	r5, r4
 800c8f0:	ea01 0605 	and.w	r6, r1, r5
 800c8f4:	4332      	orrs	r2, r6
 800c8f6:	d00e      	beq.n	800c916 <round+0x5a>
 800c8f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c8fc:	fa42 f404 	asr.w	r4, r2, r4
 800c900:	4423      	add	r3, r4
 800c902:	ea23 0305 	bic.w	r3, r3, r5
 800c906:	e7ef      	b.n	800c8e8 <round+0x2c>
 800c908:	2c33      	cmp	r4, #51	; 0x33
 800c90a:	dd07      	ble.n	800c91c <round+0x60>
 800c90c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c910:	d101      	bne.n	800c916 <round+0x5a>
 800c912:	f7f3 fcdb 	bl	80002cc <__adddf3>
 800c916:	ec41 0b10 	vmov	d0, r0, r1
 800c91a:	bd70      	pop	{r4, r5, r6, pc}
 800c91c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c920:	f04f 35ff 	mov.w	r5, #4294967295
 800c924:	40f5      	lsrs	r5, r6
 800c926:	4228      	tst	r0, r5
 800c928:	d0f5      	beq.n	800c916 <round+0x5a>
 800c92a:	2101      	movs	r1, #1
 800c92c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c930:	fa01 f404 	lsl.w	r4, r1, r4
 800c934:	1912      	adds	r2, r2, r4
 800c936:	bf28      	it	cs
 800c938:	185b      	addcs	r3, r3, r1
 800c93a:	ea22 0205 	bic.w	r2, r2, r5
 800c93e:	4619      	mov	r1, r3
 800c940:	4610      	mov	r0, r2
 800c942:	e7e8      	b.n	800c916 <round+0x5a>
 800c944:	000fffff 	.word	0x000fffff

0800c948 <_init>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	bf00      	nop
 800c94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94e:	bc08      	pop	{r3}
 800c950:	469e      	mov	lr, r3
 800c952:	4770      	bx	lr

0800c954 <_fini>:
 800c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c956:	bf00      	nop
 800c958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95a:	bc08      	pop	{r3}
 800c95c:	469e      	mov	lr, r3
 800c95e:	4770      	bx	lr
